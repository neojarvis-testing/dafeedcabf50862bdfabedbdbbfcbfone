import { GlacierServiceException as __BaseException } from "./GlacierServiceException";
export class InvalidParameterValueException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterValueException.prototype);
        this.type = opts.type;
        this.code = opts.code;
    }
}
export class MissingParameterValueException extends __BaseException {
    constructor(opts) {
        super({
            name: "MissingParameterValueException",
            $fault: "client",
            ...opts,
        });
        this.name = "MissingParameterValueException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingParameterValueException.prototype);
        this.type = opts.type;
        this.code = opts.code;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.type = opts.type;
        this.code = opts.code;
    }
}
export class ServiceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
        this.type = opts.type;
        this.code = opts.code;
    }
}
export const Type = {
    AmazonCustomerByEmail: "AmazonCustomerByEmail",
    CanonicalUser: "CanonicalUser",
    Group: "Group",
};
export const Permission = {
    FULL_CONTROL: "FULL_CONTROL",
    READ: "READ",
    READ_ACP: "READ_ACP",
    WRITE: "WRITE",
    WRITE_ACP: "WRITE_ACP",
};
export const ActionCode = {
    ArchiveRetrieval: "ArchiveRetrieval",
    InventoryRetrieval: "InventoryRetrieval",
    Select: "Select",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.type = opts.type;
        this.code = opts.code;
    }
}
export const CannedACL = {
    AuthenticatedRead: "authenticated-read",
    AwsExecRead: "aws-exec-read",
    BucketOwnerFullControl: "bucket-owner-full-control",
    BucketOwnerRead: "bucket-owner-read",
    Private: "private",
    PublicRead: "public-read",
    PublicReadWrite: "public-read-write",
};
export const FileHeaderInfo = {
    Ignore: "IGNORE",
    None: "NONE",
    Use: "USE",
};
export const QuoteFields = {
    Always: "ALWAYS",
    AsNeeded: "ASNEEDED",
};
export const EncryptionType = {
    KMS: "aws:kms",
    S3: "AES256",
};
export const StorageClass = {
    ReducedRedundancy: "REDUCED_REDUNDANCY",
    Standard: "STANDARD",
    StandardInfrequentAccess: "STANDARD_IA",
};
export const ExpressionType = {
    SQL: "SQL",
};
export const StatusCode = {
    Failed: "Failed",
    InProgress: "InProgress",
    Succeeded: "Succeeded",
};
export class InsufficientCapacityException extends __BaseException {
    constructor(opts) {
        super({
            name: "InsufficientCapacityException",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientCapacityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientCapacityException.prototype);
        this.type = opts.type;
        this.code = opts.code;
    }
}
export class PolicyEnforcedException extends __BaseException {
    constructor(opts) {
        super({
            name: "PolicyEnforcedException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyEnforcedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyEnforcedException.prototype);
        this.type = opts.type;
        this.code = opts.code;
    }
}
export class RequestTimeoutException extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestTimeoutException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestTimeoutException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestTimeoutException.prototype);
        this.type = opts.type;
        this.code = opts.code;
    }
}
export const GetJobOutputOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UploadArchiveInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UploadMultipartPartInputFilterSensitiveLog = (obj) => ({
    ...obj,
});
