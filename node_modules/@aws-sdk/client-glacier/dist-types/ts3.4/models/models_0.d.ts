import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { StreamingBlobTypes } from "@smithy/types";
import { GlacierServiceException as __BaseException } from "./GlacierServiceException";
export interface AbortMultipartUploadInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  uploadId: string | undefined;
}
export declare class InvalidParameterValueException extends __BaseException {
  readonly name: "InvalidParameterValueException";
  readonly $fault: "client";
  type?: string;
  code?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidParameterValueException, __BaseException>
  );
}
export declare class MissingParameterValueException extends __BaseException {
  readonly name: "MissingParameterValueException";
  readonly $fault: "client";
  type?: string;
  code?: string;
  constructor(
    opts: __ExceptionOptionType<MissingParameterValueException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  type?: string;
  code?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  type?: string;
  code?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export interface AbortVaultLockInput {
  accountId: string | undefined;
  vaultName: string | undefined;
}
export declare const Type: {
  readonly AmazonCustomerByEmail: "AmazonCustomerByEmail";
  readonly CanonicalUser: "CanonicalUser";
  readonly Group: "Group";
};
export type Type = (typeof Type)[keyof typeof Type];
export interface Grantee {
  Type: Type | undefined;
  DisplayName?: string;
  URI?: string;
  ID?: string;
  EmailAddress?: string;
}
export declare const Permission: {
  readonly FULL_CONTROL: "FULL_CONTROL";
  readonly READ: "READ";
  readonly READ_ACP: "READ_ACP";
  readonly WRITE: "WRITE";
  readonly WRITE_ACP: "WRITE_ACP";
};
export type Permission = (typeof Permission)[keyof typeof Permission];
export interface Grant {
  Grantee?: Grantee;
  Permission?: Permission;
}
export declare const ActionCode: {
  readonly ArchiveRetrieval: "ArchiveRetrieval";
  readonly InventoryRetrieval: "InventoryRetrieval";
  readonly Select: "Select";
};
export type ActionCode = (typeof ActionCode)[keyof typeof ActionCode];
export interface AddTagsToVaultInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  Tags?: Record<string, string>;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  type?: string;
  code?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export interface ArchiveCreationOutput {
  location?: string;
  checksum?: string;
  archiveId?: string;
}
export declare const CannedACL: {
  readonly AuthenticatedRead: "authenticated-read";
  readonly AwsExecRead: "aws-exec-read";
  readonly BucketOwnerFullControl: "bucket-owner-full-control";
  readonly BucketOwnerRead: "bucket-owner-read";
  readonly Private: "private";
  readonly PublicRead: "public-read";
  readonly PublicReadWrite: "public-read-write";
};
export type CannedACL = (typeof CannedACL)[keyof typeof CannedACL];
export interface CompleteMultipartUploadInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  uploadId: string | undefined;
  archiveSize?: string;
  checksum?: string;
}
export interface CompleteVaultLockInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  lockId: string | undefined;
}
export interface CreateVaultInput {
  accountId: string | undefined;
  vaultName: string | undefined;
}
export interface CreateVaultOutput {
  location?: string;
}
export declare const FileHeaderInfo: {
  readonly Ignore: "IGNORE";
  readonly None: "NONE";
  readonly Use: "USE";
};
export type FileHeaderInfo =
  (typeof FileHeaderInfo)[keyof typeof FileHeaderInfo];
export interface CSVInput {
  FileHeaderInfo?: FileHeaderInfo;
  Comments?: string;
  QuoteEscapeCharacter?: string;
  RecordDelimiter?: string;
  FieldDelimiter?: string;
  QuoteCharacter?: string;
}
export declare const QuoteFields: {
  readonly Always: "ALWAYS";
  readonly AsNeeded: "ASNEEDED";
};
export type QuoteFields = (typeof QuoteFields)[keyof typeof QuoteFields];
export interface CSVOutput {
  QuoteFields?: QuoteFields;
  QuoteEscapeCharacter?: string;
  RecordDelimiter?: string;
  FieldDelimiter?: string;
  QuoteCharacter?: string;
}
export interface DataRetrievalRule {
  Strategy?: string;
  BytesPerHour?: number;
}
export interface DataRetrievalPolicy {
  Rules?: DataRetrievalRule[];
}
export interface DeleteArchiveInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  archiveId: string | undefined;
}
export interface DeleteVaultInput {
  accountId: string | undefined;
  vaultName: string | undefined;
}
export interface DeleteVaultAccessPolicyInput {
  accountId: string | undefined;
  vaultName: string | undefined;
}
export interface DeleteVaultNotificationsInput {
  accountId: string | undefined;
  vaultName: string | undefined;
}
export interface DescribeJobInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  jobId: string | undefined;
}
export interface InventoryRetrievalJobDescription {
  Format?: string;
  StartDate?: string;
  EndDate?: string;
  Limit?: string;
  Marker?: string;
}
export declare const EncryptionType: {
  readonly KMS: "aws:kms";
  readonly S3: "AES256";
};
export type EncryptionType =
  (typeof EncryptionType)[keyof typeof EncryptionType];
export interface Encryption {
  EncryptionType?: EncryptionType;
  KMSKeyId?: string;
  KMSContext?: string;
}
export declare const StorageClass: {
  readonly ReducedRedundancy: "REDUCED_REDUNDANCY";
  readonly Standard: "STANDARD";
  readonly StandardInfrequentAccess: "STANDARD_IA";
};
export type StorageClass = (typeof StorageClass)[keyof typeof StorageClass];
export interface S3Location {
  BucketName?: string;
  Prefix?: string;
  Encryption?: Encryption;
  CannedACL?: CannedACL;
  AccessControlList?: Grant[];
  Tagging?: Record<string, string>;
  UserMetadata?: Record<string, string>;
  StorageClass?: StorageClass;
}
export interface OutputLocation {
  S3?: S3Location;
}
export declare const ExpressionType: {
  readonly SQL: "SQL";
};
export type ExpressionType =
  (typeof ExpressionType)[keyof typeof ExpressionType];
export interface InputSerialization {
  csv?: CSVInput;
}
export interface OutputSerialization {
  csv?: CSVOutput;
}
export interface SelectParameters {
  InputSerialization?: InputSerialization;
  ExpressionType?: ExpressionType;
  Expression?: string;
  OutputSerialization?: OutputSerialization;
}
export declare const StatusCode: {
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
  readonly Succeeded: "Succeeded";
};
export type StatusCode = (typeof StatusCode)[keyof typeof StatusCode];
export interface GlacierJobDescription {
  JobId?: string;
  JobDescription?: string;
  Action?: ActionCode;
  ArchiveId?: string;
  VaultARN?: string;
  CreationDate?: string;
  Completed?: boolean;
  StatusCode?: StatusCode;
  StatusMessage?: string;
  ArchiveSizeInBytes?: number;
  InventorySizeInBytes?: number;
  SNSTopic?: string;
  CompletionDate?: string;
  SHA256TreeHash?: string;
  ArchiveSHA256TreeHash?: string;
  RetrievalByteRange?: string;
  Tier?: string;
  InventoryRetrievalParameters?: InventoryRetrievalJobDescription;
  JobOutputPath?: string;
  SelectParameters?: SelectParameters;
  OutputLocation?: OutputLocation;
}
export interface DescribeVaultInput {
  accountId: string | undefined;
  vaultName: string | undefined;
}
export interface DescribeVaultOutput {
  VaultARN?: string;
  VaultName?: string;
  CreationDate?: string;
  LastInventoryDate?: string;
  NumberOfArchives?: number;
  SizeInBytes?: number;
}
export interface GetDataRetrievalPolicyInput {
  accountId: string | undefined;
}
export interface GetDataRetrievalPolicyOutput {
  Policy?: DataRetrievalPolicy;
}
export interface GetJobOutputInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  jobId: string | undefined;
  range?: string;
}
export interface GetJobOutputOutput {
  body?: StreamingBlobTypes;
  checksum?: string;
  status?: number;
  contentRange?: string;
  acceptRanges?: string;
  contentType?: string;
  archiveDescription?: string;
}
export interface GetVaultAccessPolicyInput {
  accountId: string | undefined;
  vaultName: string | undefined;
}
export interface VaultAccessPolicy {
  Policy?: string;
}
export interface GetVaultAccessPolicyOutput {
  policy?: VaultAccessPolicy;
}
export interface GetVaultLockInput {
  accountId: string | undefined;
  vaultName: string | undefined;
}
export interface GetVaultLockOutput {
  Policy?: string;
  State?: string;
  ExpirationDate?: string;
  CreationDate?: string;
}
export interface GetVaultNotificationsInput {
  accountId: string | undefined;
  vaultName: string | undefined;
}
export interface VaultNotificationConfig {
  SNSTopic?: string;
  Events?: string[];
}
export interface GetVaultNotificationsOutput {
  vaultNotificationConfig?: VaultNotificationConfig;
}
export interface InventoryRetrievalJobInput {
  StartDate?: string;
  EndDate?: string;
  Limit?: string;
  Marker?: string;
}
export interface JobParameters {
  Format?: string;
  Type?: string;
  ArchiveId?: string;
  Description?: string;
  SNSTopic?: string;
  RetrievalByteRange?: string;
  Tier?: string;
  InventoryRetrievalParameters?: InventoryRetrievalJobInput;
  SelectParameters?: SelectParameters;
  OutputLocation?: OutputLocation;
}
export interface InitiateJobInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  jobParameters?: JobParameters;
}
export interface InitiateJobOutput {
  location?: string;
  jobId?: string;
  jobOutputPath?: string;
}
export declare class InsufficientCapacityException extends __BaseException {
  readonly name: "InsufficientCapacityException";
  readonly $fault: "client";
  type?: string;
  code?: string;
  constructor(
    opts: __ExceptionOptionType<InsufficientCapacityException, __BaseException>
  );
}
export declare class PolicyEnforcedException extends __BaseException {
  readonly name: "PolicyEnforcedException";
  readonly $fault: "client";
  type?: string;
  code?: string;
  constructor(
    opts: __ExceptionOptionType<PolicyEnforcedException, __BaseException>
  );
}
export interface InitiateMultipartUploadInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  archiveDescription?: string;
  partSize?: string;
}
export interface InitiateMultipartUploadOutput {
  location?: string;
  uploadId?: string;
}
export interface VaultLockPolicy {
  Policy?: string;
}
export interface InitiateVaultLockInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  policy?: VaultLockPolicy;
}
export interface InitiateVaultLockOutput {
  lockId?: string;
}
export interface ListJobsInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  limit?: number;
  marker?: string;
  statuscode?: string;
  completed?: string;
}
export interface ListJobsOutput {
  JobList?: GlacierJobDescription[];
  Marker?: string;
}
export interface ListMultipartUploadsInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  limit?: number;
  marker?: string;
}
export interface UploadListElement {
  MultipartUploadId?: string;
  VaultARN?: string;
  ArchiveDescription?: string;
  PartSizeInBytes?: number;
  CreationDate?: string;
}
export interface ListMultipartUploadsOutput {
  UploadsList?: UploadListElement[];
  Marker?: string;
}
export interface ListPartsInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  uploadId: string | undefined;
  marker?: string;
  limit?: number;
}
export interface PartListElement {
  RangeInBytes?: string;
  SHA256TreeHash?: string;
}
export interface ListPartsOutput {
  MultipartUploadId?: string;
  VaultARN?: string;
  ArchiveDescription?: string;
  PartSizeInBytes?: number;
  CreationDate?: string;
  Parts?: PartListElement[];
  Marker?: string;
}
export interface ListProvisionedCapacityInput {
  accountId: string | undefined;
}
export interface ProvisionedCapacityDescription {
  CapacityId?: string;
  StartDate?: string;
  ExpirationDate?: string;
}
export interface ListProvisionedCapacityOutput {
  ProvisionedCapacityList?: ProvisionedCapacityDescription[];
}
export interface ListTagsForVaultInput {
  accountId: string | undefined;
  vaultName: string | undefined;
}
export interface ListTagsForVaultOutput {
  Tags?: Record<string, string>;
}
export interface ListVaultsInput {
  accountId: string | undefined;
  marker?: string;
  limit?: number;
}
export interface ListVaultsOutput {
  VaultList?: DescribeVaultOutput[];
  Marker?: string;
}
export interface PurchaseProvisionedCapacityInput {
  accountId: string | undefined;
}
export interface PurchaseProvisionedCapacityOutput {
  capacityId?: string;
}
export interface RemoveTagsFromVaultInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  TagKeys?: string[];
}
export interface SetDataRetrievalPolicyInput {
  accountId: string | undefined;
  Policy?: DataRetrievalPolicy;
}
export interface SetVaultAccessPolicyInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  policy?: VaultAccessPolicy;
}
export interface SetVaultNotificationsInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  vaultNotificationConfig?: VaultNotificationConfig;
}
export declare class RequestTimeoutException extends __BaseException {
  readonly name: "RequestTimeoutException";
  readonly $fault: "client";
  type?: string;
  code?: string;
  constructor(
    opts: __ExceptionOptionType<RequestTimeoutException, __BaseException>
  );
}
export interface UploadArchiveInput {
  vaultName: string | undefined;
  accountId: string | undefined;
  archiveDescription?: string;
  checksum?: string;
  body?: StreamingBlobTypes;
}
export interface UploadMultipartPartInput {
  accountId: string | undefined;
  vaultName: string | undefined;
  uploadId: string | undefined;
  checksum?: string;
  range?: string;
  body?: StreamingBlobTypes;
}
export interface UploadMultipartPartOutput {
  checksum?: string;
}
export declare const GetJobOutputOutputFilterSensitiveLog: (
  obj: GetJobOutputOutput
) => any;
export declare const UploadArchiveInputFilterSensitiveLog: (
  obj: UploadArchiveInput
) => any;
export declare const UploadMultipartPartInputFilterSensitiveLog: (
  obj: UploadMultipartPartInput
) => any;
