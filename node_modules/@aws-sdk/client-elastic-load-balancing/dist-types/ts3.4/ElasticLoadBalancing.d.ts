import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  AddTagsCommandInput,
  AddTagsCommandOutput,
} from "./commands/AddTagsCommand";
import {
  ApplySecurityGroupsToLoadBalancerCommandInput,
  ApplySecurityGroupsToLoadBalancerCommandOutput,
} from "./commands/ApplySecurityGroupsToLoadBalancerCommand";
import {
  AttachLoadBalancerToSubnetsCommandInput,
  AttachLoadBalancerToSubnetsCommandOutput,
} from "./commands/AttachLoadBalancerToSubnetsCommand";
import {
  ConfigureHealthCheckCommandInput,
  ConfigureHealthCheckCommandOutput,
} from "./commands/ConfigureHealthCheckCommand";
import {
  CreateAppCookieStickinessPolicyCommandInput,
  CreateAppCookieStickinessPolicyCommandOutput,
} from "./commands/CreateAppCookieStickinessPolicyCommand";
import {
  CreateLBCookieStickinessPolicyCommandInput,
  CreateLBCookieStickinessPolicyCommandOutput,
} from "./commands/CreateLBCookieStickinessPolicyCommand";
import {
  CreateLoadBalancerCommandInput,
  CreateLoadBalancerCommandOutput,
} from "./commands/CreateLoadBalancerCommand";
import {
  CreateLoadBalancerListenersCommandInput,
  CreateLoadBalancerListenersCommandOutput,
} from "./commands/CreateLoadBalancerListenersCommand";
import {
  CreateLoadBalancerPolicyCommandInput,
  CreateLoadBalancerPolicyCommandOutput,
} from "./commands/CreateLoadBalancerPolicyCommand";
import {
  DeleteLoadBalancerCommandInput,
  DeleteLoadBalancerCommandOutput,
} from "./commands/DeleteLoadBalancerCommand";
import {
  DeleteLoadBalancerListenersCommandInput,
  DeleteLoadBalancerListenersCommandOutput,
} from "./commands/DeleteLoadBalancerListenersCommand";
import {
  DeleteLoadBalancerPolicyCommandInput,
  DeleteLoadBalancerPolicyCommandOutput,
} from "./commands/DeleteLoadBalancerPolicyCommand";
import {
  DeregisterInstancesFromLoadBalancerCommandInput,
  DeregisterInstancesFromLoadBalancerCommandOutput,
} from "./commands/DeregisterInstancesFromLoadBalancerCommand";
import {
  DescribeAccountLimitsCommandInput,
  DescribeAccountLimitsCommandOutput,
} from "./commands/DescribeAccountLimitsCommand";
import {
  DescribeInstanceHealthCommandInput,
  DescribeInstanceHealthCommandOutput,
} from "./commands/DescribeInstanceHealthCommand";
import {
  DescribeLoadBalancerAttributesCommandInput,
  DescribeLoadBalancerAttributesCommandOutput,
} from "./commands/DescribeLoadBalancerAttributesCommand";
import {
  DescribeLoadBalancerPoliciesCommandInput,
  DescribeLoadBalancerPoliciesCommandOutput,
} from "./commands/DescribeLoadBalancerPoliciesCommand";
import {
  DescribeLoadBalancerPolicyTypesCommandInput,
  DescribeLoadBalancerPolicyTypesCommandOutput,
} from "./commands/DescribeLoadBalancerPolicyTypesCommand";
import {
  DescribeLoadBalancersCommandInput,
  DescribeLoadBalancersCommandOutput,
} from "./commands/DescribeLoadBalancersCommand";
import {
  DescribeTagsCommandInput,
  DescribeTagsCommandOutput,
} from "./commands/DescribeTagsCommand";
import {
  DetachLoadBalancerFromSubnetsCommandInput,
  DetachLoadBalancerFromSubnetsCommandOutput,
} from "./commands/DetachLoadBalancerFromSubnetsCommand";
import {
  DisableAvailabilityZonesForLoadBalancerCommandInput,
  DisableAvailabilityZonesForLoadBalancerCommandOutput,
} from "./commands/DisableAvailabilityZonesForLoadBalancerCommand";
import {
  EnableAvailabilityZonesForLoadBalancerCommandInput,
  EnableAvailabilityZonesForLoadBalancerCommandOutput,
} from "./commands/EnableAvailabilityZonesForLoadBalancerCommand";
import {
  ModifyLoadBalancerAttributesCommandInput,
  ModifyLoadBalancerAttributesCommandOutput,
} from "./commands/ModifyLoadBalancerAttributesCommand";
import {
  RegisterInstancesWithLoadBalancerCommandInput,
  RegisterInstancesWithLoadBalancerCommandOutput,
} from "./commands/RegisterInstancesWithLoadBalancerCommand";
import {
  RemoveTagsCommandInput,
  RemoveTagsCommandOutput,
} from "./commands/RemoveTagsCommand";
import {
  SetLoadBalancerListenerSSLCertificateCommandInput,
  SetLoadBalancerListenerSSLCertificateCommandOutput,
} from "./commands/SetLoadBalancerListenerSSLCertificateCommand";
import {
  SetLoadBalancerPoliciesForBackendServerCommandInput,
  SetLoadBalancerPoliciesForBackendServerCommandOutput,
} from "./commands/SetLoadBalancerPoliciesForBackendServerCommand";
import {
  SetLoadBalancerPoliciesOfListenerCommandInput,
  SetLoadBalancerPoliciesOfListenerCommandOutput,
} from "./commands/SetLoadBalancerPoliciesOfListenerCommand";
import { ElasticLoadBalancingClient } from "./ElasticLoadBalancingClient";
export interface ElasticLoadBalancing {
  addTags(
    args: AddTagsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<AddTagsCommandOutput>;
  addTags(
    args: AddTagsCommandInput,
    cb: (err: any, data?: AddTagsCommandOutput) => void
  ): void;
  addTags(
    args: AddTagsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: AddTagsCommandOutput) => void
  ): void;
  applySecurityGroupsToLoadBalancer(
    args: ApplySecurityGroupsToLoadBalancerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ApplySecurityGroupsToLoadBalancerCommandOutput>;
  applySecurityGroupsToLoadBalancer(
    args: ApplySecurityGroupsToLoadBalancerCommandInput,
    cb: (
      err: any,
      data?: ApplySecurityGroupsToLoadBalancerCommandOutput
    ) => void
  ): void;
  applySecurityGroupsToLoadBalancer(
    args: ApplySecurityGroupsToLoadBalancerCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: ApplySecurityGroupsToLoadBalancerCommandOutput
    ) => void
  ): void;
  attachLoadBalancerToSubnets(
    args: AttachLoadBalancerToSubnetsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<AttachLoadBalancerToSubnetsCommandOutput>;
  attachLoadBalancerToSubnets(
    args: AttachLoadBalancerToSubnetsCommandInput,
    cb: (err: any, data?: AttachLoadBalancerToSubnetsCommandOutput) => void
  ): void;
  attachLoadBalancerToSubnets(
    args: AttachLoadBalancerToSubnetsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: AttachLoadBalancerToSubnetsCommandOutput) => void
  ): void;
  configureHealthCheck(
    args: ConfigureHealthCheckCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ConfigureHealthCheckCommandOutput>;
  configureHealthCheck(
    args: ConfigureHealthCheckCommandInput,
    cb: (err: any, data?: ConfigureHealthCheckCommandOutput) => void
  ): void;
  configureHealthCheck(
    args: ConfigureHealthCheckCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ConfigureHealthCheckCommandOutput) => void
  ): void;
  createAppCookieStickinessPolicy(
    args: CreateAppCookieStickinessPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateAppCookieStickinessPolicyCommandOutput>;
  createAppCookieStickinessPolicy(
    args: CreateAppCookieStickinessPolicyCommandInput,
    cb: (err: any, data?: CreateAppCookieStickinessPolicyCommandOutput) => void
  ): void;
  createAppCookieStickinessPolicy(
    args: CreateAppCookieStickinessPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateAppCookieStickinessPolicyCommandOutput) => void
  ): void;
  createLBCookieStickinessPolicy(
    args: CreateLBCookieStickinessPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLBCookieStickinessPolicyCommandOutput>;
  createLBCookieStickinessPolicy(
    args: CreateLBCookieStickinessPolicyCommandInput,
    cb: (err: any, data?: CreateLBCookieStickinessPolicyCommandOutput) => void
  ): void;
  createLBCookieStickinessPolicy(
    args: CreateLBCookieStickinessPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateLBCookieStickinessPolicyCommandOutput) => void
  ): void;
  createLoadBalancer(
    args: CreateLoadBalancerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLoadBalancerCommandOutput>;
  createLoadBalancer(
    args: CreateLoadBalancerCommandInput,
    cb: (err: any, data?: CreateLoadBalancerCommandOutput) => void
  ): void;
  createLoadBalancer(
    args: CreateLoadBalancerCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateLoadBalancerCommandOutput) => void
  ): void;
  createLoadBalancerListeners(
    args: CreateLoadBalancerListenersCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLoadBalancerListenersCommandOutput>;
  createLoadBalancerListeners(
    args: CreateLoadBalancerListenersCommandInput,
    cb: (err: any, data?: CreateLoadBalancerListenersCommandOutput) => void
  ): void;
  createLoadBalancerListeners(
    args: CreateLoadBalancerListenersCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateLoadBalancerListenersCommandOutput) => void
  ): void;
  createLoadBalancerPolicy(
    args: CreateLoadBalancerPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateLoadBalancerPolicyCommandOutput>;
  createLoadBalancerPolicy(
    args: CreateLoadBalancerPolicyCommandInput,
    cb: (err: any, data?: CreateLoadBalancerPolicyCommandOutput) => void
  ): void;
  createLoadBalancerPolicy(
    args: CreateLoadBalancerPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateLoadBalancerPolicyCommandOutput) => void
  ): void;
  deleteLoadBalancer(
    args: DeleteLoadBalancerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteLoadBalancerCommandOutput>;
  deleteLoadBalancer(
    args: DeleteLoadBalancerCommandInput,
    cb: (err: any, data?: DeleteLoadBalancerCommandOutput) => void
  ): void;
  deleteLoadBalancer(
    args: DeleteLoadBalancerCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteLoadBalancerCommandOutput) => void
  ): void;
  deleteLoadBalancerListeners(
    args: DeleteLoadBalancerListenersCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteLoadBalancerListenersCommandOutput>;
  deleteLoadBalancerListeners(
    args: DeleteLoadBalancerListenersCommandInput,
    cb: (err: any, data?: DeleteLoadBalancerListenersCommandOutput) => void
  ): void;
  deleteLoadBalancerListeners(
    args: DeleteLoadBalancerListenersCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteLoadBalancerListenersCommandOutput) => void
  ): void;
  deleteLoadBalancerPolicy(
    args: DeleteLoadBalancerPolicyCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteLoadBalancerPolicyCommandOutput>;
  deleteLoadBalancerPolicy(
    args: DeleteLoadBalancerPolicyCommandInput,
    cb: (err: any, data?: DeleteLoadBalancerPolicyCommandOutput) => void
  ): void;
  deleteLoadBalancerPolicy(
    args: DeleteLoadBalancerPolicyCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteLoadBalancerPolicyCommandOutput) => void
  ): void;
  deregisterInstancesFromLoadBalancer(
    args: DeregisterInstancesFromLoadBalancerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeregisterInstancesFromLoadBalancerCommandOutput>;
  deregisterInstancesFromLoadBalancer(
    args: DeregisterInstancesFromLoadBalancerCommandInput,
    cb: (
      err: any,
      data?: DeregisterInstancesFromLoadBalancerCommandOutput
    ) => void
  ): void;
  deregisterInstancesFromLoadBalancer(
    args: DeregisterInstancesFromLoadBalancerCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: DeregisterInstancesFromLoadBalancerCommandOutput
    ) => void
  ): void;
  describeAccountLimits(): Promise<DescribeAccountLimitsCommandOutput>;
  describeAccountLimits(
    args: DescribeAccountLimitsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeAccountLimitsCommandOutput>;
  describeAccountLimits(
    args: DescribeAccountLimitsCommandInput,
    cb: (err: any, data?: DescribeAccountLimitsCommandOutput) => void
  ): void;
  describeAccountLimits(
    args: DescribeAccountLimitsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeAccountLimitsCommandOutput) => void
  ): void;
  describeInstanceHealth(
    args: DescribeInstanceHealthCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeInstanceHealthCommandOutput>;
  describeInstanceHealth(
    args: DescribeInstanceHealthCommandInput,
    cb: (err: any, data?: DescribeInstanceHealthCommandOutput) => void
  ): void;
  describeInstanceHealth(
    args: DescribeInstanceHealthCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeInstanceHealthCommandOutput) => void
  ): void;
  describeLoadBalancerAttributes(
    args: DescribeLoadBalancerAttributesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeLoadBalancerAttributesCommandOutput>;
  describeLoadBalancerAttributes(
    args: DescribeLoadBalancerAttributesCommandInput,
    cb: (err: any, data?: DescribeLoadBalancerAttributesCommandOutput) => void
  ): void;
  describeLoadBalancerAttributes(
    args: DescribeLoadBalancerAttributesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeLoadBalancerAttributesCommandOutput) => void
  ): void;
  describeLoadBalancerPolicies(): Promise<DescribeLoadBalancerPoliciesCommandOutput>;
  describeLoadBalancerPolicies(
    args: DescribeLoadBalancerPoliciesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeLoadBalancerPoliciesCommandOutput>;
  describeLoadBalancerPolicies(
    args: DescribeLoadBalancerPoliciesCommandInput,
    cb: (err: any, data?: DescribeLoadBalancerPoliciesCommandOutput) => void
  ): void;
  describeLoadBalancerPolicies(
    args: DescribeLoadBalancerPoliciesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeLoadBalancerPoliciesCommandOutput) => void
  ): void;
  describeLoadBalancerPolicyTypes(): Promise<DescribeLoadBalancerPolicyTypesCommandOutput>;
  describeLoadBalancerPolicyTypes(
    args: DescribeLoadBalancerPolicyTypesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeLoadBalancerPolicyTypesCommandOutput>;
  describeLoadBalancerPolicyTypes(
    args: DescribeLoadBalancerPolicyTypesCommandInput,
    cb: (err: any, data?: DescribeLoadBalancerPolicyTypesCommandOutput) => void
  ): void;
  describeLoadBalancerPolicyTypes(
    args: DescribeLoadBalancerPolicyTypesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeLoadBalancerPolicyTypesCommandOutput) => void
  ): void;
  describeLoadBalancers(): Promise<DescribeLoadBalancersCommandOutput>;
  describeLoadBalancers(
    args: DescribeLoadBalancersCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeLoadBalancersCommandOutput>;
  describeLoadBalancers(
    args: DescribeLoadBalancersCommandInput,
    cb: (err: any, data?: DescribeLoadBalancersCommandOutput) => void
  ): void;
  describeLoadBalancers(
    args: DescribeLoadBalancersCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeLoadBalancersCommandOutput) => void
  ): void;
  describeTags(
    args: DescribeTagsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeTagsCommandOutput>;
  describeTags(
    args: DescribeTagsCommandInput,
    cb: (err: any, data?: DescribeTagsCommandOutput) => void
  ): void;
  describeTags(
    args: DescribeTagsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeTagsCommandOutput) => void
  ): void;
  detachLoadBalancerFromSubnets(
    args: DetachLoadBalancerFromSubnetsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DetachLoadBalancerFromSubnetsCommandOutput>;
  detachLoadBalancerFromSubnets(
    args: DetachLoadBalancerFromSubnetsCommandInput,
    cb: (err: any, data?: DetachLoadBalancerFromSubnetsCommandOutput) => void
  ): void;
  detachLoadBalancerFromSubnets(
    args: DetachLoadBalancerFromSubnetsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DetachLoadBalancerFromSubnetsCommandOutput) => void
  ): void;
  disableAvailabilityZonesForLoadBalancer(
    args: DisableAvailabilityZonesForLoadBalancerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DisableAvailabilityZonesForLoadBalancerCommandOutput>;
  disableAvailabilityZonesForLoadBalancer(
    args: DisableAvailabilityZonesForLoadBalancerCommandInput,
    cb: (
      err: any,
      data?: DisableAvailabilityZonesForLoadBalancerCommandOutput
    ) => void
  ): void;
  disableAvailabilityZonesForLoadBalancer(
    args: DisableAvailabilityZonesForLoadBalancerCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: DisableAvailabilityZonesForLoadBalancerCommandOutput
    ) => void
  ): void;
  enableAvailabilityZonesForLoadBalancer(
    args: EnableAvailabilityZonesForLoadBalancerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<EnableAvailabilityZonesForLoadBalancerCommandOutput>;
  enableAvailabilityZonesForLoadBalancer(
    args: EnableAvailabilityZonesForLoadBalancerCommandInput,
    cb: (
      err: any,
      data?: EnableAvailabilityZonesForLoadBalancerCommandOutput
    ) => void
  ): void;
  enableAvailabilityZonesForLoadBalancer(
    args: EnableAvailabilityZonesForLoadBalancerCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: EnableAvailabilityZonesForLoadBalancerCommandOutput
    ) => void
  ): void;
  modifyLoadBalancerAttributes(
    args: ModifyLoadBalancerAttributesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ModifyLoadBalancerAttributesCommandOutput>;
  modifyLoadBalancerAttributes(
    args: ModifyLoadBalancerAttributesCommandInput,
    cb: (err: any, data?: ModifyLoadBalancerAttributesCommandOutput) => void
  ): void;
  modifyLoadBalancerAttributes(
    args: ModifyLoadBalancerAttributesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ModifyLoadBalancerAttributesCommandOutput) => void
  ): void;
  registerInstancesWithLoadBalancer(
    args: RegisterInstancesWithLoadBalancerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RegisterInstancesWithLoadBalancerCommandOutput>;
  registerInstancesWithLoadBalancer(
    args: RegisterInstancesWithLoadBalancerCommandInput,
    cb: (
      err: any,
      data?: RegisterInstancesWithLoadBalancerCommandOutput
    ) => void
  ): void;
  registerInstancesWithLoadBalancer(
    args: RegisterInstancesWithLoadBalancerCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: RegisterInstancesWithLoadBalancerCommandOutput
    ) => void
  ): void;
  removeTags(
    args: RemoveTagsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<RemoveTagsCommandOutput>;
  removeTags(
    args: RemoveTagsCommandInput,
    cb: (err: any, data?: RemoveTagsCommandOutput) => void
  ): void;
  removeTags(
    args: RemoveTagsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: RemoveTagsCommandOutput) => void
  ): void;
  setLoadBalancerListenerSSLCertificate(
    args: SetLoadBalancerListenerSSLCertificateCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SetLoadBalancerListenerSSLCertificateCommandOutput>;
  setLoadBalancerListenerSSLCertificate(
    args: SetLoadBalancerListenerSSLCertificateCommandInput,
    cb: (
      err: any,
      data?: SetLoadBalancerListenerSSLCertificateCommandOutput
    ) => void
  ): void;
  setLoadBalancerListenerSSLCertificate(
    args: SetLoadBalancerListenerSSLCertificateCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: SetLoadBalancerListenerSSLCertificateCommandOutput
    ) => void
  ): void;
  setLoadBalancerPoliciesForBackendServer(
    args: SetLoadBalancerPoliciesForBackendServerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SetLoadBalancerPoliciesForBackendServerCommandOutput>;
  setLoadBalancerPoliciesForBackendServer(
    args: SetLoadBalancerPoliciesForBackendServerCommandInput,
    cb: (
      err: any,
      data?: SetLoadBalancerPoliciesForBackendServerCommandOutput
    ) => void
  ): void;
  setLoadBalancerPoliciesForBackendServer(
    args: SetLoadBalancerPoliciesForBackendServerCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: SetLoadBalancerPoliciesForBackendServerCommandOutput
    ) => void
  ): void;
  setLoadBalancerPoliciesOfListener(
    args: SetLoadBalancerPoliciesOfListenerCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<SetLoadBalancerPoliciesOfListenerCommandOutput>;
  setLoadBalancerPoliciesOfListener(
    args: SetLoadBalancerPoliciesOfListenerCommandInput,
    cb: (
      err: any,
      data?: SetLoadBalancerPoliciesOfListenerCommandOutput
    ) => void
  ): void;
  setLoadBalancerPoliciesOfListener(
    args: SetLoadBalancerPoliciesOfListenerCommandInput,
    options: __HttpHandlerOptions,
    cb: (
      err: any,
      data?: SetLoadBalancerPoliciesOfListenerCommandOutput
    ) => void
  ): void;
}
export declare class ElasticLoadBalancing
  extends ElasticLoadBalancingClient
  implements ElasticLoadBalancing {}
