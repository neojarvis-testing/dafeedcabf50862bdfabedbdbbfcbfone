"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  TreeHash: () => TreeHash
});
module.exports = __toCommonJS(src_exports);
var MiB = 1048576;
var _TreeHash = class _TreeHash {
  /**
   * Initializes a TreeHash.
   * @param Sha256 A Sha256 hash constructor.
   */
  constructor(Sha256, fromUtf8) {
    this.Sha256 = Sha256;
    this.fromUtf8 = fromUtf8;
    this.collectedHashDigests = [];
  }
  /**
   * Generates Sha256 hashes from 1 MiB chunks of the
   * internal buffer.
   * Will set the internal buffer to any bytes remaining
   * that is less than 1 MiB.
   */
  hashBuffer() {
    if (!this.buffer) {
      return;
    }
    let remainingSize = this.buffer.byteLength;
    while (remainingSize >= MiB) {
      const hash = new this.Sha256();
      hash.update(this.buffer.subarray(0, MiB));
      this.collectedHashDigests.push(hash.digest());
      this.buffer = this.buffer.subarray(MiB);
      remainingSize = this.buffer.byteLength;
    }
  }
  /**
   * Updates the tree hash with byte data.
   * @param data Byte data to apply to the tree hash.
   */
  update(data) {
    const chunk = this.convertToBuffer(data);
    if (!this.buffer) {
      this.buffer = chunk;
    } else {
      const totalSize = this.buffer.byteLength + chunk.byteLength;
      const tempBuffer = new Uint8Array(totalSize);
      tempBuffer.set(this.buffer);
      tempBuffer.set(chunk, this.buffer.byteLength);
      this.buffer = tempBuffer;
    }
    this.hashBuffer();
  }
  /**
   * Calculates the digest for the tree hash.
   */
  async digest() {
    let collectedHashDigests = this.collectedHashDigests;
    this.collectedHashDigests = [];
    if (this.buffer && this.buffer.byteLength > 0) {
      const smallHash = new this.Sha256();
      smallHash.update(this.buffer);
      collectedHashDigests.push(smallHash.digest());
      this.buffer = void 0;
    }
    while (collectedHashDigests.length > 1) {
      const higherLevelHashDigests = [];
      for (let i = 0; i < collectedHashDigests.length; i += 2) {
        if (i + 1 < collectedHashDigests.length) {
          const [digest1, digest2] = await Promise.all([collectedHashDigests[i], collectedHashDigests[i + 1]]);
          const chunk = new Uint8Array(digest1.byteLength + digest2.byteLength);
          chunk.set(digest1);
          chunk.set(digest2, digest1.byteLength);
          const hash = new this.Sha256();
          hash.update(chunk);
          higherLevelHashDigests.push(hash.digest());
        } else {
          higherLevelHashDigests.push(collectedHashDigests[i]);
        }
      }
      collectedHashDigests = higherLevelHashDigests;
    }
    return collectedHashDigests[0];
  }
  /**
   * Converts source data into a Uint8Array.
   * @param data Data to convert to a Uint8Array.
   */
  convertToBuffer(data) {
    if (typeof data === "string") {
      return this.fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
  }
  reset() {
    this.buffer = void 0;
    this.collectedHashDigests = [];
  }
};
__name(_TreeHash, "TreeHash");
var TreeHash = _TreeHash;
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  TreeHash
});

