import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { CodePipelineServiceException as __BaseException } from "./CodePipelineServiceException";
export interface AcknowledgeJobInput {
  jobId: string | undefined;
  nonce: string | undefined;
}
export declare const JobStatus: {
  readonly Created: "Created";
  readonly Dispatched: "Dispatched";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
  readonly Queued: "Queued";
  readonly Succeeded: "Succeeded";
  readonly TimedOut: "TimedOut";
};
export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus];
export interface AcknowledgeJobOutput {
  status?: JobStatus;
}
export declare class InvalidNonceException extends __BaseException {
  readonly name: "InvalidNonceException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidNonceException, __BaseException>
  );
}
export declare class JobNotFoundException extends __BaseException {
  readonly name: "JobNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<JobNotFoundException, __BaseException>
  );
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface AcknowledgeThirdPartyJobInput {
  jobId: string | undefined;
  nonce: string | undefined;
  clientToken: string | undefined;
}
export interface AcknowledgeThirdPartyJobOutput {
  status?: JobStatus;
}
export declare class InvalidClientTokenException extends __BaseException {
  readonly name: "InvalidClientTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidClientTokenException, __BaseException>
  );
}
export declare const ActionCategory: {
  readonly Approval: "Approval";
  readonly Build: "Build";
  readonly Deploy: "Deploy";
  readonly Invoke: "Invoke";
  readonly Source: "Source";
  readonly Test: "Test";
};
export type ActionCategory =
  (typeof ActionCategory)[keyof typeof ActionCategory];
export interface ActionConfiguration {
  configuration?: Record<string, string>;
}
export declare const ActionConfigurationPropertyType: {
  readonly Boolean: "Boolean";
  readonly Number: "Number";
  readonly String: "String";
};
export type ActionConfigurationPropertyType =
  (typeof ActionConfigurationPropertyType)[keyof typeof ActionConfigurationPropertyType];
export interface ActionConfigurationProperty {
  name: string | undefined;
  required: boolean | undefined;
  key: boolean | undefined;
  secret: boolean | undefined;
  queryable?: boolean;
  description?: string;
  type?: ActionConfigurationPropertyType;
}
export interface ActionContext {
  name?: string;
  actionExecutionId?: string;
}
export declare const ActionOwner: {
  readonly AWS: "AWS";
  readonly Custom: "Custom";
  readonly ThirdParty: "ThirdParty";
};
export type ActionOwner = (typeof ActionOwner)[keyof typeof ActionOwner];
export interface ActionTypeId {
  category: ActionCategory | undefined;
  owner: ActionOwner | undefined;
  provider: string | undefined;
  version: string | undefined;
}
export interface InputArtifact {
  name: string | undefined;
}
export interface OutputArtifact {
  name: string | undefined;
}
export interface ActionDeclaration {
  name: string | undefined;
  actionTypeId: ActionTypeId | undefined;
  runOrder?: number;
  configuration?: Record<string, string>;
  outputArtifacts?: OutputArtifact[];
  inputArtifacts?: InputArtifact[];
  roleArn?: string;
  region?: string;
  namespace?: string;
  timeoutInMinutes?: number;
}
export interface ErrorDetails {
  code?: string;
  message?: string;
}
export declare const ActionExecutionStatus: {
  readonly Abandoned: "Abandoned";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
  readonly Succeeded: "Succeeded";
};
export type ActionExecutionStatus =
  (typeof ActionExecutionStatus)[keyof typeof ActionExecutionStatus];
export interface ActionExecution {
  actionExecutionId?: string;
  status?: ActionExecutionStatus;
  summary?: string;
  lastStatusChange?: Date;
  token?: string;
  lastUpdatedBy?: string;
  externalExecutionId?: string;
  externalExecutionUrl?: string;
  percentComplete?: number;
  errorDetails?: ErrorDetails;
}
export interface S3Location {
  bucket?: string;
  key?: string;
}
export interface ArtifactDetail {
  name?: string;
  s3location?: S3Location;
}
export interface ActionExecutionInput {
  actionTypeId?: ActionTypeId;
  configuration?: Record<string, string>;
  resolvedConfiguration?: Record<string, string>;
  roleArn?: string;
  region?: string;
  inputArtifacts?: ArtifactDetail[];
  namespace?: string;
}
export interface ActionExecutionResult {
  externalExecutionId?: string;
  externalExecutionSummary?: string;
  externalExecutionUrl?: string;
  errorDetails?: ErrorDetails;
}
export interface ActionExecutionOutput {
  outputArtifacts?: ArtifactDetail[];
  executionResult?: ActionExecutionResult;
  outputVariables?: Record<string, string>;
}
export interface ActionExecutionDetail {
  pipelineExecutionId?: string;
  actionExecutionId?: string;
  pipelineVersion?: number;
  stageName?: string;
  actionName?: string;
  startTime?: Date;
  lastUpdateTime?: Date;
  updatedBy?: string;
  status?: ActionExecutionStatus;
  input?: ActionExecutionInput;
  output?: ActionExecutionOutput;
}
export declare const StartTimeRange: {
  readonly All: "All";
  readonly Latest: "Latest";
};
export type StartTimeRange =
  (typeof StartTimeRange)[keyof typeof StartTimeRange];
export interface LatestInPipelineExecutionFilter {
  pipelineExecutionId: string | undefined;
  startTimeRange: StartTimeRange | undefined;
}
export interface ActionExecutionFilter {
  pipelineExecutionId?: string;
  latestInPipelineExecution?: LatestInPipelineExecutionFilter;
}
export declare class ActionNotFoundException extends __BaseException {
  readonly name: "ActionNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ActionNotFoundException, __BaseException>
  );
}
export interface ActionRevision {
  revisionId: string | undefined;
  revisionChangeId: string | undefined;
  created: Date | undefined;
}
export interface ActionState {
  actionName?: string;
  currentRevision?: ActionRevision;
  latestExecution?: ActionExecution;
  entityUrl?: string;
  revisionUrl?: string;
}
export interface ArtifactDetails {
  minimumCount: number | undefined;
  maximumCount: number | undefined;
}
export interface ActionTypeSettings {
  thirdPartyConfigurationUrl?: string;
  entityUrlTemplate?: string;
  executionUrlTemplate?: string;
  revisionUrlTemplate?: string;
}
export interface ActionType {
  id: ActionTypeId | undefined;
  settings?: ActionTypeSettings;
  actionConfigurationProperties?: ActionConfigurationProperty[];
  inputArtifactDetails: ArtifactDetails | undefined;
  outputArtifactDetails: ArtifactDetails | undefined;
}
export interface ActionTypeArtifactDetails {
  minimumCount: number | undefined;
  maximumCount: number | undefined;
}
export interface JobWorkerExecutorConfiguration {
  pollingAccounts?: string[];
  pollingServicePrincipals?: string[];
}
export interface LambdaExecutorConfiguration {
  lambdaFunctionArn: string | undefined;
}
export interface ExecutorConfiguration {
  lambdaExecutorConfiguration?: LambdaExecutorConfiguration;
  jobWorkerExecutorConfiguration?: JobWorkerExecutorConfiguration;
}
export declare const ExecutorType: {
  readonly JobWorker: "JobWorker";
  readonly Lambda: "Lambda";
};
export type ExecutorType = (typeof ExecutorType)[keyof typeof ExecutorType];
export interface ActionTypeExecutor {
  configuration: ExecutorConfiguration | undefined;
  type: ExecutorType | undefined;
  policyStatementsTemplate?: string;
  jobTimeout?: number;
}
export interface ActionTypeIdentifier {
  category: ActionCategory | undefined;
  owner: string | undefined;
  provider: string | undefined;
  version: string | undefined;
}
export interface ActionTypePermissions {
  allowedAccounts: string[] | undefined;
}
export interface ActionTypeProperty {
  name: string | undefined;
  optional: boolean | undefined;
  key: boolean | undefined;
  noEcho: boolean | undefined;
  queryable?: boolean;
  description?: string;
}
export interface ActionTypeUrls {
  configurationUrl?: string;
  entityUrlTemplate?: string;
  executionUrlTemplate?: string;
  revisionUrlTemplate?: string;
}
export interface ActionTypeDeclaration {
  description?: string;
  executor: ActionTypeExecutor | undefined;
  id: ActionTypeIdentifier | undefined;
  inputArtifactDetails: ActionTypeArtifactDetails | undefined;
  outputArtifactDetails: ActionTypeArtifactDetails | undefined;
  permissions?: ActionTypePermissions;
  properties?: ActionTypeProperty[];
  urls?: ActionTypeUrls;
}
export declare class ActionTypeNotFoundException extends __BaseException {
  readonly name: "ActionTypeNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ActionTypeNotFoundException, __BaseException>
  );
}
export declare class ApprovalAlreadyCompletedException extends __BaseException {
  readonly name: "ApprovalAlreadyCompletedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ApprovalAlreadyCompletedException,
      __BaseException
    >
  );
}
export declare const ApprovalStatus: {
  readonly Approved: "Approved";
  readonly Rejected: "Rejected";
};
export type ApprovalStatus =
  (typeof ApprovalStatus)[keyof typeof ApprovalStatus];
export interface ApprovalResult {
  summary: string | undefined;
  status: ApprovalStatus | undefined;
}
export interface S3ArtifactLocation {
  bucketName: string | undefined;
  objectKey: string | undefined;
}
export declare const ArtifactLocationType: {
  readonly S3: "S3";
};
export type ArtifactLocationType =
  (typeof ArtifactLocationType)[keyof typeof ArtifactLocationType];
export interface ArtifactLocation {
  type?: ArtifactLocationType;
  s3Location?: S3ArtifactLocation;
}
export interface Artifact {
  name?: string;
  revision?: string;
  location?: ArtifactLocation;
}
export interface ArtifactRevision {
  name?: string;
  revisionId?: string;
  revisionChangeIdentifier?: string;
  revisionSummary?: string;
  created?: Date;
  revisionUrl?: string;
}
export declare const EncryptionKeyType: {
  readonly KMS: "KMS";
};
export type EncryptionKeyType =
  (typeof EncryptionKeyType)[keyof typeof EncryptionKeyType];
export interface EncryptionKey {
  id: string | undefined;
  type: EncryptionKeyType | undefined;
}
export declare const ArtifactStoreType: {
  readonly S3: "S3";
};
export type ArtifactStoreType =
  (typeof ArtifactStoreType)[keyof typeof ArtifactStoreType];
export interface ArtifactStore {
  type: ArtifactStoreType | undefined;
  location: string | undefined;
  encryptionKey?: EncryptionKey;
}
export interface AWSSessionCredentials {
  accessKeyId: string | undefined;
  secretAccessKey: string | undefined;
  sessionToken: string | undefined;
}
export declare const BlockerType: {
  readonly Schedule: "Schedule";
};
export type BlockerType = (typeof BlockerType)[keyof typeof BlockerType];
export interface BlockerDeclaration {
  name: string | undefined;
  type: BlockerType | undefined;
}
export declare class ConcurrentModificationException extends __BaseException {
  readonly name: "ConcurrentModificationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentModificationException,
      __BaseException
    >
  );
}
export interface Tag {
  key: string | undefined;
  value: string | undefined;
}
export interface CreateCustomActionTypeInput {
  category: ActionCategory | undefined;
  provider: string | undefined;
  version: string | undefined;
  settings?: ActionTypeSettings;
  configurationProperties?: ActionConfigurationProperty[];
  inputArtifactDetails: ArtifactDetails | undefined;
  outputArtifactDetails: ArtifactDetails | undefined;
  tags?: Tag[];
}
export interface CreateCustomActionTypeOutput {
  actionType: ActionType | undefined;
  tags?: Tag[];
}
export declare class InvalidTagsException extends __BaseException {
  readonly name: "InvalidTagsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidTagsException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class TooManyTagsException extends __BaseException {
  readonly name: "TooManyTagsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TooManyTagsException, __BaseException>
  );
}
export declare const ExecutionMode: {
  readonly PARALLEL: "PARALLEL";
  readonly QUEUED: "QUEUED";
  readonly SUPERSEDED: "SUPERSEDED";
};
export type ExecutionMode = (typeof ExecutionMode)[keyof typeof ExecutionMode];
export declare const PipelineType: {
  readonly V1: "V1";
  readonly V2: "V2";
};
export type PipelineType = (typeof PipelineType)[keyof typeof PipelineType];
export declare const Result: {
  readonly ROLLBACK: "ROLLBACK";
};
export type Result = (typeof Result)[keyof typeof Result];
export interface FailureConditions {
  result?: Result;
}
export interface StageDeclaration {
  name: string | undefined;
  blockers?: BlockerDeclaration[];
  actions: ActionDeclaration[] | undefined;
  onFailure?: FailureConditions;
}
export interface GitBranchFilterCriteria {
  includes?: string[];
  excludes?: string[];
}
export declare const GitPullRequestEventType: {
  readonly CLOSED: "CLOSED";
  readonly OPEN: "OPEN";
  readonly UPDATED: "UPDATED";
};
export type GitPullRequestEventType =
  (typeof GitPullRequestEventType)[keyof typeof GitPullRequestEventType];
export interface GitFilePathFilterCriteria {
  includes?: string[];
  excludes?: string[];
}
export interface GitPullRequestFilter {
  events?: GitPullRequestEventType[];
  branches?: GitBranchFilterCriteria;
  filePaths?: GitFilePathFilterCriteria;
}
export interface GitTagFilterCriteria {
  includes?: string[];
  excludes?: string[];
}
export interface GitPushFilter {
  tags?: GitTagFilterCriteria;
  branches?: GitBranchFilterCriteria;
  filePaths?: GitFilePathFilterCriteria;
}
export interface GitConfiguration {
  sourceActionName: string | undefined;
  push?: GitPushFilter[];
  pullRequest?: GitPullRequestFilter[];
}
export declare const PipelineTriggerProviderType: {
  readonly CodeStarSourceConnection: "CodeStarSourceConnection";
};
export type PipelineTriggerProviderType =
  (typeof PipelineTriggerProviderType)[keyof typeof PipelineTriggerProviderType];
export interface PipelineTriggerDeclaration {
  providerType: PipelineTriggerProviderType | undefined;
  gitConfiguration: GitConfiguration | undefined;
}
export interface PipelineVariableDeclaration {
  name: string | undefined;
  defaultValue?: string;
  description?: string;
}
export interface PipelineDeclaration {
  name: string | undefined;
  roleArn: string | undefined;
  artifactStore?: ArtifactStore;
  artifactStores?: Record<string, ArtifactStore>;
  stages: StageDeclaration[] | undefined;
  version?: number;
  executionMode?: ExecutionMode;
  pipelineType?: PipelineType;
  variables?: PipelineVariableDeclaration[];
  triggers?: PipelineTriggerDeclaration[];
}
export interface CreatePipelineInput {
  pipeline: PipelineDeclaration | undefined;
  tags?: Tag[];
}
export interface CreatePipelineOutput {
  pipeline?: PipelineDeclaration;
  tags?: Tag[];
}
export declare class InvalidActionDeclarationException extends __BaseException {
  readonly name: "InvalidActionDeclarationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidActionDeclarationException,
      __BaseException
    >
  );
}
export declare class InvalidBlockerDeclarationException extends __BaseException {
  readonly name: "InvalidBlockerDeclarationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidBlockerDeclarationException,
      __BaseException
    >
  );
}
export declare class InvalidStageDeclarationException extends __BaseException {
  readonly name: "InvalidStageDeclarationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidStageDeclarationException,
      __BaseException
    >
  );
}
export declare class InvalidStructureException extends __BaseException {
  readonly name: "InvalidStructureException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidStructureException, __BaseException>
  );
}
export declare class PipelineNameInUseException extends __BaseException {
  readonly name: "PipelineNameInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PipelineNameInUseException, __BaseException>
  );
}
export interface DeleteCustomActionTypeInput {
  category: ActionCategory | undefined;
  provider: string | undefined;
  version: string | undefined;
}
export interface DeletePipelineInput {
  name: string | undefined;
}
export interface DeleteWebhookInput {
  name: string | undefined;
}
export interface DeleteWebhookOutput {}
export interface DeregisterWebhookWithThirdPartyInput {
  webhookName?: string;
}
export interface DeregisterWebhookWithThirdPartyOutput {}
export declare class WebhookNotFoundException extends __BaseException {
  readonly name: "WebhookNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<WebhookNotFoundException, __BaseException>
  );
}
export declare const StageTransitionType: {
  readonly Inbound: "Inbound";
  readonly Outbound: "Outbound";
};
export type StageTransitionType =
  (typeof StageTransitionType)[keyof typeof StageTransitionType];
export interface DisableStageTransitionInput {
  pipelineName: string | undefined;
  stageName: string | undefined;
  transitionType: StageTransitionType | undefined;
  reason: string | undefined;
}
export declare class PipelineNotFoundException extends __BaseException {
  readonly name: "PipelineNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PipelineNotFoundException, __BaseException>
  );
}
export declare class StageNotFoundException extends __BaseException {
  readonly name: "StageNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<StageNotFoundException, __BaseException>
  );
}
export interface EnableStageTransitionInput {
  pipelineName: string | undefined;
  stageName: string | undefined;
  transitionType: StageTransitionType | undefined;
}
export interface GetActionTypeInput {
  category: ActionCategory | undefined;
  owner: string | undefined;
  provider: string | undefined;
  version: string | undefined;
}
export interface GetActionTypeOutput {
  actionType?: ActionTypeDeclaration;
}
export interface GetJobDetailsInput {
  jobId: string | undefined;
}
export interface StageContext {
  name?: string;
}
export interface PipelineContext {
  pipelineName?: string;
  stage?: StageContext;
  action?: ActionContext;
  pipelineArn?: string;
  pipelineExecutionId?: string;
}
export interface JobData {
  actionTypeId?: ActionTypeId;
  actionConfiguration?: ActionConfiguration;
  pipelineContext?: PipelineContext;
  inputArtifacts?: Artifact[];
  outputArtifacts?: Artifact[];
  artifactCredentials?: AWSSessionCredentials;
  continuationToken?: string;
  encryptionKey?: EncryptionKey;
}
export interface JobDetails {
  id?: string;
  data?: JobData;
  accountId?: string;
}
export interface GetJobDetailsOutput {
  jobDetails?: JobDetails;
}
export interface GetPipelineInput {
  name: string | undefined;
  version?: number;
}
export interface PipelineMetadata {
  pipelineArn?: string;
  created?: Date;
  updated?: Date;
  pollingDisabledAt?: Date;
}
export interface GetPipelineOutput {
  pipeline?: PipelineDeclaration;
  metadata?: PipelineMetadata;
}
export declare class PipelineVersionNotFoundException extends __BaseException {
  readonly name: "PipelineVersionNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      PipelineVersionNotFoundException,
      __BaseException
    >
  );
}
export interface GetPipelineExecutionInput {
  pipelineName: string | undefined;
  pipelineExecutionId: string | undefined;
}
export declare const ExecutionType: {
  readonly ROLLBACK: "ROLLBACK";
  readonly STANDARD: "STANDARD";
};
export type ExecutionType = (typeof ExecutionType)[keyof typeof ExecutionType];
export interface PipelineRollbackMetadata {
  rollbackTargetPipelineExecutionId?: string;
}
export declare const PipelineExecutionStatus: {
  readonly Cancelled: "Cancelled";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
  readonly Stopped: "Stopped";
  readonly Stopping: "Stopping";
  readonly Succeeded: "Succeeded";
  readonly Superseded: "Superseded";
};
export type PipelineExecutionStatus =
  (typeof PipelineExecutionStatus)[keyof typeof PipelineExecutionStatus];
export declare const TriggerType: {
  readonly AutomatedRollback: "AutomatedRollback";
  readonly CloudWatchEvent: "CloudWatchEvent";
  readonly CreatePipeline: "CreatePipeline";
  readonly ManualRollback: "ManualRollback";
  readonly PollForSourceChanges: "PollForSourceChanges";
  readonly PutActionRevision: "PutActionRevision";
  readonly StartPipelineExecution: "StartPipelineExecution";
  readonly Webhook: "Webhook";
  readonly WebhookV2: "WebhookV2";
};
export type TriggerType = (typeof TriggerType)[keyof typeof TriggerType];
export interface ExecutionTrigger {
  triggerType?: TriggerType;
  triggerDetail?: string;
}
export interface ResolvedPipelineVariable {
  name?: string;
  resolvedValue?: string;
}
export interface PipelineExecution {
  pipelineName?: string;
  pipelineVersion?: number;
  pipelineExecutionId?: string;
  status?: PipelineExecutionStatus;
  statusSummary?: string;
  artifactRevisions?: ArtifactRevision[];
  variables?: ResolvedPipelineVariable[];
  trigger?: ExecutionTrigger;
  executionMode?: ExecutionMode;
  executionType?: ExecutionType;
  rollbackMetadata?: PipelineRollbackMetadata;
}
export interface GetPipelineExecutionOutput {
  pipelineExecution?: PipelineExecution;
}
export declare class PipelineExecutionNotFoundException extends __BaseException {
  readonly name: "PipelineExecutionNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      PipelineExecutionNotFoundException,
      __BaseException
    >
  );
}
export interface GetPipelineStateInput {
  name: string | undefined;
}
export declare const StageExecutionStatus: {
  readonly Cancelled: "Cancelled";
  readonly Failed: "Failed";
  readonly InProgress: "InProgress";
  readonly Stopped: "Stopped";
  readonly Stopping: "Stopping";
  readonly Succeeded: "Succeeded";
};
export type StageExecutionStatus =
  (typeof StageExecutionStatus)[keyof typeof StageExecutionStatus];
export interface StageExecution {
  pipelineExecutionId: string | undefined;
  status: StageExecutionStatus | undefined;
  type?: ExecutionType;
}
export interface TransitionState {
  enabled?: boolean;
  lastChangedBy?: string;
  lastChangedAt?: Date;
  disabledReason?: string;
}
export interface StageState {
  stageName?: string;
  inboundExecution?: StageExecution;
  inboundExecutions?: StageExecution[];
  inboundTransitionState?: TransitionState;
  actionStates?: ActionState[];
  latestExecution?: StageExecution;
}
export interface GetPipelineStateOutput {
  pipelineName?: string;
  pipelineVersion?: number;
  stageStates?: StageState[];
  created?: Date;
  updated?: Date;
}
export interface GetThirdPartyJobDetailsInput {
  jobId: string | undefined;
  clientToken: string | undefined;
}
export interface ThirdPartyJobData {
  actionTypeId?: ActionTypeId;
  actionConfiguration?: ActionConfiguration;
  pipelineContext?: PipelineContext;
  inputArtifacts?: Artifact[];
  outputArtifacts?: Artifact[];
  artifactCredentials?: AWSSessionCredentials;
  continuationToken?: string;
  encryptionKey?: EncryptionKey;
}
export interface ThirdPartyJobDetails {
  id?: string;
  data?: ThirdPartyJobData;
  nonce?: string;
}
export interface GetThirdPartyJobDetailsOutput {
  jobDetails?: ThirdPartyJobDetails;
}
export declare class InvalidJobException extends __BaseException {
  readonly name: "InvalidJobException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidJobException, __BaseException>
  );
}
export declare class InvalidNextTokenException extends __BaseException {
  readonly name: "InvalidNextTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>
  );
}
export interface ListActionExecutionsInput {
  pipelineName: string | undefined;
  filter?: ActionExecutionFilter;
  maxResults?: number;
  nextToken?: string;
}
export interface ListActionExecutionsOutput {
  actionExecutionDetails?: ActionExecutionDetail[];
  nextToken?: string;
}
export interface ListActionTypesInput {
  actionOwnerFilter?: ActionOwner;
  nextToken?: string;
  regionFilter?: string;
}
export interface ListActionTypesOutput {
  actionTypes: ActionType[] | undefined;
  nextToken?: string;
}
export interface SucceededInStageFilter {
  stageName?: string;
}
export interface PipelineExecutionFilter {
  succeededInStage?: SucceededInStageFilter;
}
export interface ListPipelineExecutionsInput {
  pipelineName: string | undefined;
  maxResults?: number;
  filter?: PipelineExecutionFilter;
  nextToken?: string;
}
export interface SourceRevision {
  actionName: string | undefined;
  revisionId?: string;
  revisionSummary?: string;
  revisionUrl?: string;
}
export interface StopExecutionTrigger {
  reason?: string;
}
export interface PipelineExecutionSummary {
  pipelineExecutionId?: string;
  status?: PipelineExecutionStatus;
  statusSummary?: string;
  startTime?: Date;
  lastUpdateTime?: Date;
  sourceRevisions?: SourceRevision[];
  trigger?: ExecutionTrigger;
  stopTrigger?: StopExecutionTrigger;
  executionMode?: ExecutionMode;
  executionType?: ExecutionType;
  rollbackMetadata?: PipelineRollbackMetadata;
}
export interface ListPipelineExecutionsOutput {
  pipelineExecutionSummaries?: PipelineExecutionSummary[];
  nextToken?: string;
}
export interface ListPipelinesInput {
  nextToken?: string;
  maxResults?: number;
}
export interface PipelineSummary {
  name?: string;
  version?: number;
  pipelineType?: PipelineType;
  executionMode?: ExecutionMode;
  created?: Date;
  updated?: Date;
}
export interface ListPipelinesOutput {
  pipelines?: PipelineSummary[];
  nextToken?: string;
}
export declare class InvalidArnException extends __BaseException {
  readonly name: "InvalidArnException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidArnException, __BaseException>
  );
}
export interface ListTagsForResourceInput {
  resourceArn: string | undefined;
  nextToken?: string;
  maxResults?: number;
}
export interface ListTagsForResourceOutput {
  tags?: Tag[];
  nextToken?: string;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface ListWebhooksInput {
  NextToken?: string;
  MaxResults?: number;
}
export declare const WebhookAuthenticationType: {
  readonly GITHUB_HMAC: "GITHUB_HMAC";
  readonly IP: "IP";
  readonly UNAUTHENTICATED: "UNAUTHENTICATED";
};
export type WebhookAuthenticationType =
  (typeof WebhookAuthenticationType)[keyof typeof WebhookAuthenticationType];
export interface WebhookAuthConfiguration {
  AllowedIPRange?: string;
  SecretToken?: string;
}
export interface WebhookFilterRule {
  jsonPath: string | undefined;
  matchEquals?: string;
}
export interface WebhookDefinition {
  name: string | undefined;
  targetPipeline: string | undefined;
  targetAction: string | undefined;
  filters: WebhookFilterRule[] | undefined;
  authentication: WebhookAuthenticationType | undefined;
  authenticationConfiguration: WebhookAuthConfiguration | undefined;
}
export interface ListWebhookItem {
  definition: WebhookDefinition | undefined;
  url: string | undefined;
  errorMessage?: string;
  errorCode?: string;
  lastTriggered?: Date;
  arn?: string;
  tags?: Tag[];
}
export interface ListWebhooksOutput {
  webhooks?: ListWebhookItem[];
  NextToken?: string;
}
export interface PollForJobsInput {
  actionTypeId: ActionTypeId | undefined;
  maxBatchSize?: number;
  queryParam?: Record<string, string>;
}
export interface Job {
  id?: string;
  data?: JobData;
  nonce?: string;
  accountId?: string;
}
export interface PollForJobsOutput {
  jobs?: Job[];
}
export interface PollForThirdPartyJobsInput {
  actionTypeId: ActionTypeId | undefined;
  maxBatchSize?: number;
}
export interface ThirdPartyJob {
  clientId?: string;
  jobId?: string;
}
export interface PollForThirdPartyJobsOutput {
  jobs?: ThirdPartyJob[];
}
export interface PutActionRevisionInput {
  pipelineName: string | undefined;
  stageName: string | undefined;
  actionName: string | undefined;
  actionRevision: ActionRevision | undefined;
}
export interface PutActionRevisionOutput {
  newRevision?: boolean;
  pipelineExecutionId?: string;
}
export declare class InvalidApprovalTokenException extends __BaseException {
  readonly name: "InvalidApprovalTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidApprovalTokenException, __BaseException>
  );
}
export interface PutApprovalResultInput {
  pipelineName: string | undefined;
  stageName: string | undefined;
  actionName: string | undefined;
  result: ApprovalResult | undefined;
  token: string | undefined;
}
export interface PutApprovalResultOutput {
  approvedAt?: Date;
}
export declare class InvalidJobStateException extends __BaseException {
  readonly name: "InvalidJobStateException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidJobStateException, __BaseException>
  );
}
export declare const FailureType: {
  readonly ConfigurationError: "ConfigurationError";
  readonly JobFailed: "JobFailed";
  readonly PermissionError: "PermissionError";
  readonly RevisionOutOfSync: "RevisionOutOfSync";
  readonly RevisionUnavailable: "RevisionUnavailable";
  readonly SystemUnavailable: "SystemUnavailable";
};
export type FailureType = (typeof FailureType)[keyof typeof FailureType];
export interface FailureDetails {
  type: FailureType | undefined;
  message: string | undefined;
  externalExecutionId?: string;
}
export interface PutJobFailureResultInput {
  jobId: string | undefined;
  failureDetails: FailureDetails | undefined;
}
export declare class OutputVariablesSizeExceededException extends __BaseException {
  readonly name: "OutputVariablesSizeExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      OutputVariablesSizeExceededException,
      __BaseException
    >
  );
}
export interface CurrentRevision {
  revision: string | undefined;
  changeIdentifier: string | undefined;
  created?: Date;
  revisionSummary?: string;
}
export interface ExecutionDetails {
  summary?: string;
  externalExecutionId?: string;
  percentComplete?: number;
}
export interface PutJobSuccessResultInput {
  jobId: string | undefined;
  currentRevision?: CurrentRevision;
  continuationToken?: string;
  executionDetails?: ExecutionDetails;
  outputVariables?: Record<string, string>;
}
export interface PutThirdPartyJobFailureResultInput {
  jobId: string | undefined;
  clientToken: string | undefined;
  failureDetails: FailureDetails | undefined;
}
export interface PutThirdPartyJobSuccessResultInput {
  jobId: string | undefined;
  clientToken: string | undefined;
  currentRevision?: CurrentRevision;
  continuationToken?: string;
  executionDetails?: ExecutionDetails;
}
export declare class InvalidWebhookAuthenticationParametersException extends __BaseException {
  readonly name: "InvalidWebhookAuthenticationParametersException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidWebhookAuthenticationParametersException,
      __BaseException
    >
  );
}
export declare class InvalidWebhookFilterPatternException extends __BaseException {
  readonly name: "InvalidWebhookFilterPatternException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidWebhookFilterPatternException,
      __BaseException
    >
  );
}
export interface PutWebhookInput {
  webhook: WebhookDefinition | undefined;
  tags?: Tag[];
}
export interface PutWebhookOutput {
  webhook?: ListWebhookItem;
}
export interface RegisterWebhookWithThirdPartyInput {
  webhookName?: string;
}
export interface RegisterWebhookWithThirdPartyOutput {}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class NotLatestPipelineExecutionException extends __BaseException {
  readonly name: "NotLatestPipelineExecutionException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      NotLatestPipelineExecutionException,
      __BaseException
    >
  );
}
export declare const StageRetryMode: {
  readonly ALL_ACTIONS: "ALL_ACTIONS";
  readonly FAILED_ACTIONS: "FAILED_ACTIONS";
};
export type StageRetryMode =
  (typeof StageRetryMode)[keyof typeof StageRetryMode];
export interface RetryStageExecutionInput {
  pipelineName: string | undefined;
  stageName: string | undefined;
  pipelineExecutionId: string | undefined;
  retryMode: StageRetryMode | undefined;
}
export interface RetryStageExecutionOutput {
  pipelineExecutionId?: string;
}
export declare class StageNotRetryableException extends __BaseException {
  readonly name: "StageNotRetryableException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<StageNotRetryableException, __BaseException>
  );
}
export declare class PipelineExecutionOutdatedException extends __BaseException {
  readonly name: "PipelineExecutionOutdatedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      PipelineExecutionOutdatedException,
      __BaseException
    >
  );
}
export interface RollbackStageInput {
  pipelineName: string | undefined;
  stageName: string | undefined;
  targetPipelineExecutionId: string | undefined;
}
export interface RollbackStageOutput {
  pipelineExecutionId: string | undefined;
}
export declare class UnableToRollbackStageException extends __BaseException {
  readonly name: "UnableToRollbackStageException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnableToRollbackStageException, __BaseException>
  );
}
export declare class ConcurrentPipelineExecutionsLimitExceededException extends __BaseException {
  readonly name: "ConcurrentPipelineExecutionsLimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentPipelineExecutionsLimitExceededException,
      __BaseException
    >
  );
}
export declare const SourceRevisionType: {
  readonly COMMIT_ID: "COMMIT_ID";
  readonly IMAGE_DIGEST: "IMAGE_DIGEST";
  readonly S3_OBJECT_VERSION_ID: "S3_OBJECT_VERSION_ID";
};
export type SourceRevisionType =
  (typeof SourceRevisionType)[keyof typeof SourceRevisionType];
export interface SourceRevisionOverride {
  actionName: string | undefined;
  revisionType: SourceRevisionType | undefined;
  revisionValue: string | undefined;
}
export interface PipelineVariable {
  name: string | undefined;
  value: string | undefined;
}
export interface StartPipelineExecutionInput {
  name: string | undefined;
  variables?: PipelineVariable[];
  clientRequestToken?: string;
  sourceRevisions?: SourceRevisionOverride[];
}
export interface StartPipelineExecutionOutput {
  pipelineExecutionId?: string;
}
export declare class DuplicatedStopRequestException extends __BaseException {
  readonly name: "DuplicatedStopRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DuplicatedStopRequestException, __BaseException>
  );
}
export declare class PipelineExecutionNotStoppableException extends __BaseException {
  readonly name: "PipelineExecutionNotStoppableException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      PipelineExecutionNotStoppableException,
      __BaseException
    >
  );
}
export interface StopPipelineExecutionInput {
  pipelineName: string | undefined;
  pipelineExecutionId: string | undefined;
  abandon?: boolean;
  reason?: string;
}
export interface StopPipelineExecutionOutput {
  pipelineExecutionId?: string;
}
export interface TagResourceInput {
  resourceArn: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceOutput {}
export interface UntagResourceInput {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceOutput {}
export declare class RequestFailedException extends __BaseException {
  readonly name: "RequestFailedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<RequestFailedException, __BaseException>
  );
}
export interface UpdateActionTypeInput {
  actionType: ActionTypeDeclaration | undefined;
}
export interface UpdatePipelineInput {
  pipeline: PipelineDeclaration | undefined;
}
export interface UpdatePipelineOutput {
  pipeline?: PipelineDeclaration;
}
export declare const AWSSessionCredentialsFilterSensitiveLog: (
  obj: AWSSessionCredentials
) => any;
export declare const JobDataFilterSensitiveLog: (obj: JobData) => any;
export declare const JobDetailsFilterSensitiveLog: (obj: JobDetails) => any;
export declare const GetJobDetailsOutputFilterSensitiveLog: (
  obj: GetJobDetailsOutput
) => any;
export declare const ThirdPartyJobDataFilterSensitiveLog: (
  obj: ThirdPartyJobData
) => any;
export declare const ThirdPartyJobDetailsFilterSensitiveLog: (
  obj: ThirdPartyJobDetails
) => any;
export declare const GetThirdPartyJobDetailsOutputFilterSensitiveLog: (
  obj: GetThirdPartyJobDetailsOutput
) => any;
export declare const JobFilterSensitiveLog: (obj: Job) => any;
export declare const PollForJobsOutputFilterSensitiveLog: (
  obj: PollForJobsOutput
) => any;
