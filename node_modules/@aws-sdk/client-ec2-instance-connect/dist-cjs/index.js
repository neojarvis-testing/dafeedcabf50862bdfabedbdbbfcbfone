"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AuthException: () => AuthException,
  EC2InstanceConnect: () => EC2InstanceConnect,
  EC2InstanceConnectClient: () => EC2InstanceConnectClient,
  EC2InstanceConnectServiceException: () => EC2InstanceConnectServiceException,
  EC2InstanceNotFoundException: () => EC2InstanceNotFoundException,
  EC2InstanceStateInvalidException: () => EC2InstanceStateInvalidException,
  EC2InstanceTypeInvalidException: () => EC2InstanceTypeInvalidException,
  EC2InstanceUnavailableException: () => EC2InstanceUnavailableException,
  InvalidArgsException: () => InvalidArgsException,
  SendSSHPublicKeyCommand: () => SendSSHPublicKeyCommand,
  SendSerialConsoleSSHPublicKeyCommand: () => SendSerialConsoleSSHPublicKeyCommand,
  SerialConsoleAccessDisabledException: () => SerialConsoleAccessDisabledException,
  SerialConsoleSessionLimitExceededException: () => SerialConsoleSessionLimitExceededException,
  SerialConsoleSessionUnavailableException: () => SerialConsoleSessionUnavailableException,
  SerialConsoleSessionUnsupportedException: () => SerialConsoleSessionUnsupportedException,
  ServiceException: () => ServiceException,
  ThrottlingException: () => ThrottlingException,
  __Client: () => import_smithy_client.Client
});
module.exports = __toCommonJS(src_exports);

// src/EC2InstanceConnectClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "ec2-instance-connect"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/EC2InstanceConnectClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/EC2InstanceConnectClient.ts
var _EC2InstanceConnectClient = class _EC2InstanceConnectClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultEC2InstanceConnectHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_EC2InstanceConnectClient, "EC2InstanceConnectClient");
var EC2InstanceConnectClient = _EC2InstanceConnectClient;

// src/EC2InstanceConnect.ts


// src/commands/SendSerialConsoleSSHPublicKeyCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_json1_1.ts
var import_core2 = require("@aws-sdk/core");



// src/models/EC2InstanceConnectServiceException.ts

var _EC2InstanceConnectServiceException = class _EC2InstanceConnectServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _EC2InstanceConnectServiceException.prototype);
  }
};
__name(_EC2InstanceConnectServiceException, "EC2InstanceConnectServiceException");
var EC2InstanceConnectServiceException = _EC2InstanceConnectServiceException;

// src/models/models_0.ts
var _AuthException = class _AuthException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AuthException",
      $fault: "client",
      ...opts
    });
    this.name = "AuthException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AuthException.prototype);
    this.Message = opts.Message;
  }
};
__name(_AuthException, "AuthException");
var AuthException = _AuthException;
var _EC2InstanceNotFoundException = class _EC2InstanceNotFoundException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "EC2InstanceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "EC2InstanceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _EC2InstanceNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_EC2InstanceNotFoundException, "EC2InstanceNotFoundException");
var EC2InstanceNotFoundException = _EC2InstanceNotFoundException;
var _EC2InstanceStateInvalidException = class _EC2InstanceStateInvalidException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "EC2InstanceStateInvalidException",
      $fault: "client",
      ...opts
    });
    this.name = "EC2InstanceStateInvalidException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _EC2InstanceStateInvalidException.prototype);
    this.Message = opts.Message;
  }
};
__name(_EC2InstanceStateInvalidException, "EC2InstanceStateInvalidException");
var EC2InstanceStateInvalidException = _EC2InstanceStateInvalidException;
var _EC2InstanceTypeInvalidException = class _EC2InstanceTypeInvalidException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "EC2InstanceTypeInvalidException",
      $fault: "client",
      ...opts
    });
    this.name = "EC2InstanceTypeInvalidException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _EC2InstanceTypeInvalidException.prototype);
    this.Message = opts.Message;
  }
};
__name(_EC2InstanceTypeInvalidException, "EC2InstanceTypeInvalidException");
var EC2InstanceTypeInvalidException = _EC2InstanceTypeInvalidException;
var _EC2InstanceUnavailableException = class _EC2InstanceUnavailableException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "EC2InstanceUnavailableException",
      $fault: "server",
      ...opts
    });
    this.name = "EC2InstanceUnavailableException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _EC2InstanceUnavailableException.prototype);
    this.Message = opts.Message;
  }
};
__name(_EC2InstanceUnavailableException, "EC2InstanceUnavailableException");
var EC2InstanceUnavailableException = _EC2InstanceUnavailableException;
var _InvalidArgsException = class _InvalidArgsException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidArgsException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidArgsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidArgsException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidArgsException, "InvalidArgsException");
var InvalidArgsException = _InvalidArgsException;
var _SerialConsoleAccessDisabledException = class _SerialConsoleAccessDisabledException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SerialConsoleAccessDisabledException",
      $fault: "client",
      ...opts
    });
    this.name = "SerialConsoleAccessDisabledException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _SerialConsoleAccessDisabledException.prototype);
    this.Message = opts.Message;
  }
};
__name(_SerialConsoleAccessDisabledException, "SerialConsoleAccessDisabledException");
var SerialConsoleAccessDisabledException = _SerialConsoleAccessDisabledException;
var _SerialConsoleSessionLimitExceededException = class _SerialConsoleSessionLimitExceededException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SerialConsoleSessionLimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "SerialConsoleSessionLimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _SerialConsoleSessionLimitExceededException.prototype);
    this.Message = opts.Message;
  }
};
__name(_SerialConsoleSessionLimitExceededException, "SerialConsoleSessionLimitExceededException");
var SerialConsoleSessionLimitExceededException = _SerialConsoleSessionLimitExceededException;
var _SerialConsoleSessionUnavailableException = class _SerialConsoleSessionUnavailableException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SerialConsoleSessionUnavailableException",
      $fault: "server",
      ...opts
    });
    this.name = "SerialConsoleSessionUnavailableException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _SerialConsoleSessionUnavailableException.prototype);
    this.Message = opts.Message;
  }
};
__name(_SerialConsoleSessionUnavailableException, "SerialConsoleSessionUnavailableException");
var SerialConsoleSessionUnavailableException = _SerialConsoleSessionUnavailableException;
var _SerialConsoleSessionUnsupportedException = class _SerialConsoleSessionUnsupportedException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SerialConsoleSessionUnsupportedException",
      $fault: "client",
      ...opts
    });
    this.name = "SerialConsoleSessionUnsupportedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _SerialConsoleSessionUnsupportedException.prototype);
    this.Message = opts.Message;
  }
};
__name(_SerialConsoleSessionUnsupportedException, "SerialConsoleSessionUnsupportedException");
var SerialConsoleSessionUnsupportedException = _SerialConsoleSessionUnsupportedException;
var _ServiceException = class _ServiceException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceException",
      $fault: "server",
      ...opts
    });
    this.name = "ServiceException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ServiceException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ServiceException, "ServiceException");
var ServiceException = _ServiceException;
var _ThrottlingException = class _ThrottlingException extends EC2InstanceConnectServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ThrottlingException, "ThrottlingException");
var ThrottlingException = _ThrottlingException;

// src/protocols/Aws_json1_1.ts
var se_SendSerialConsoleSSHPublicKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("SendSerialConsoleSSHPublicKey");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SendSerialConsoleSSHPublicKeyCommand");
var se_SendSSHPublicKeyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("SendSSHPublicKey");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SendSSHPublicKeyCommand");
var de_SendSerialConsoleSSHPublicKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_SendSerialConsoleSSHPublicKeyCommand");
var de_SendSSHPublicKeyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_SendSSHPublicKeyCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "AuthException":
    case "com.amazonaws.ec2instanceconnect#AuthException":
      throw await de_AuthExceptionRes(parsedOutput, context);
    case "EC2InstanceNotFoundException":
    case "com.amazonaws.ec2instanceconnect#EC2InstanceNotFoundException":
      throw await de_EC2InstanceNotFoundExceptionRes(parsedOutput, context);
    case "EC2InstanceStateInvalidException":
    case "com.amazonaws.ec2instanceconnect#EC2InstanceStateInvalidException":
      throw await de_EC2InstanceStateInvalidExceptionRes(parsedOutput, context);
    case "EC2InstanceTypeInvalidException":
    case "com.amazonaws.ec2instanceconnect#EC2InstanceTypeInvalidException":
      throw await de_EC2InstanceTypeInvalidExceptionRes(parsedOutput, context);
    case "EC2InstanceUnavailableException":
    case "com.amazonaws.ec2instanceconnect#EC2InstanceUnavailableException":
      throw await de_EC2InstanceUnavailableExceptionRes(parsedOutput, context);
    case "InvalidArgsException":
    case "com.amazonaws.ec2instanceconnect#InvalidArgsException":
      throw await de_InvalidArgsExceptionRes(parsedOutput, context);
    case "SerialConsoleAccessDisabledException":
    case "com.amazonaws.ec2instanceconnect#SerialConsoleAccessDisabledException":
      throw await de_SerialConsoleAccessDisabledExceptionRes(parsedOutput, context);
    case "SerialConsoleSessionLimitExceededException":
    case "com.amazonaws.ec2instanceconnect#SerialConsoleSessionLimitExceededException":
      throw await de_SerialConsoleSessionLimitExceededExceptionRes(parsedOutput, context);
    case "SerialConsoleSessionUnavailableException":
    case "com.amazonaws.ec2instanceconnect#SerialConsoleSessionUnavailableException":
      throw await de_SerialConsoleSessionUnavailableExceptionRes(parsedOutput, context);
    case "SerialConsoleSessionUnsupportedException":
    case "com.amazonaws.ec2instanceconnect#SerialConsoleSessionUnsupportedException":
      throw await de_SerialConsoleSessionUnsupportedExceptionRes(parsedOutput, context);
    case "ServiceException":
    case "com.amazonaws.ec2instanceconnect#ServiceException":
      throw await de_ServiceExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.ec2instanceconnect#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var de_AuthExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new AuthException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_AuthExceptionRes");
var de_EC2InstanceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new EC2InstanceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_EC2InstanceNotFoundExceptionRes");
var de_EC2InstanceStateInvalidExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new EC2InstanceStateInvalidException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_EC2InstanceStateInvalidExceptionRes");
var de_EC2InstanceTypeInvalidExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new EC2InstanceTypeInvalidException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_EC2InstanceTypeInvalidExceptionRes");
var de_EC2InstanceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new EC2InstanceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_EC2InstanceUnavailableExceptionRes");
var de_InvalidArgsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InvalidArgsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidArgsExceptionRes");
var de_SerialConsoleAccessDisabledExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new SerialConsoleAccessDisabledException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SerialConsoleAccessDisabledExceptionRes");
var de_SerialConsoleSessionLimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new SerialConsoleSessionLimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SerialConsoleSessionLimitExceededExceptionRes");
var de_SerialConsoleSessionUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new SerialConsoleSessionUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SerialConsoleSessionUnavailableExceptionRes");
var de_SerialConsoleSessionUnsupportedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new SerialConsoleSessionUnsupportedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SerialConsoleSessionUnsupportedExceptionRes");
var de_ServiceExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ServiceException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServiceExceptionRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ThrottlingExceptionRes");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var throwDefaultError = (0, import_smithy_client.withBaseException)(EC2InstanceConnectServiceException);
var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new import_protocol_http.HttpRequest(contents);
}, "buildHttpRpcRequest");
function sharedHeaders(operation) {
  return {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": `AWSEC2InstanceConnectService.${operation}`
  };
}
__name(sharedHeaders, "sharedHeaders");

// src/commands/SendSerialConsoleSSHPublicKeyCommand.ts
var _SendSerialConsoleSSHPublicKeyCommand = class _SendSerialConsoleSSHPublicKeyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSEC2InstanceConnectService", "SendSerialConsoleSSHPublicKey", {}).n("EC2InstanceConnectClient", "SendSerialConsoleSSHPublicKeyCommand").f(void 0, void 0).ser(se_SendSerialConsoleSSHPublicKeyCommand).de(de_SendSerialConsoleSSHPublicKeyCommand).build() {
};
__name(_SendSerialConsoleSSHPublicKeyCommand, "SendSerialConsoleSSHPublicKeyCommand");
var SendSerialConsoleSSHPublicKeyCommand = _SendSerialConsoleSSHPublicKeyCommand;

// src/commands/SendSSHPublicKeyCommand.ts




var _SendSSHPublicKeyCommand = class _SendSSHPublicKeyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSEC2InstanceConnectService", "SendSSHPublicKey", {}).n("EC2InstanceConnectClient", "SendSSHPublicKeyCommand").f(void 0, void 0).ser(se_SendSSHPublicKeyCommand).de(de_SendSSHPublicKeyCommand).build() {
};
__name(_SendSSHPublicKeyCommand, "SendSSHPublicKeyCommand");
var SendSSHPublicKeyCommand = _SendSSHPublicKeyCommand;

// src/EC2InstanceConnect.ts
var commands = {
  SendSerialConsoleSSHPublicKeyCommand,
  SendSSHPublicKeyCommand
};
var _EC2InstanceConnect = class _EC2InstanceConnect extends EC2InstanceConnectClient {
};
__name(_EC2InstanceConnect, "EC2InstanceConnect");
var EC2InstanceConnect = _EC2InstanceConnect;
(0, import_smithy_client.createAggregatedClient)(commands, EC2InstanceConnect);
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  EC2InstanceConnectServiceException,
  __Client,
  EC2InstanceConnectClient,
  EC2InstanceConnect,
  $Command,
  SendSSHPublicKeyCommand,
  SendSerialConsoleSSHPublicKeyCommand,
  AuthException,
  EC2InstanceNotFoundException,
  EC2InstanceStateInvalidException,
  EC2InstanceTypeInvalidException,
  EC2InstanceUnavailableException,
  InvalidArgsException,
  SerialConsoleAccessDisabledException,
  SerialConsoleSessionLimitExceededException,
  SerialConsoleSessionUnavailableException,
  SerialConsoleSessionUnsupportedException,
  ServiceException,
  ThrottlingException
});

