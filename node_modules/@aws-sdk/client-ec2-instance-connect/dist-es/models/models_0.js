import { EC2InstanceConnectServiceException as __BaseException } from "./EC2InstanceConnectServiceException";
export class AuthException extends __BaseException {
    constructor(opts) {
        super({
            name: "AuthException",
            $fault: "client",
            ...opts,
        });
        this.name = "AuthException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthException.prototype);
        this.Message = opts.Message;
    }
}
export class EC2InstanceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "EC2InstanceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "EC2InstanceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EC2InstanceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class EC2InstanceStateInvalidException extends __BaseException {
    constructor(opts) {
        super({
            name: "EC2InstanceStateInvalidException",
            $fault: "client",
            ...opts,
        });
        this.name = "EC2InstanceStateInvalidException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EC2InstanceStateInvalidException.prototype);
        this.Message = opts.Message;
    }
}
export class EC2InstanceTypeInvalidException extends __BaseException {
    constructor(opts) {
        super({
            name: "EC2InstanceTypeInvalidException",
            $fault: "client",
            ...opts,
        });
        this.name = "EC2InstanceTypeInvalidException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EC2InstanceTypeInvalidException.prototype);
        this.Message = opts.Message;
    }
}
export class EC2InstanceUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "EC2InstanceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "EC2InstanceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, EC2InstanceUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidArgsException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidArgsException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArgsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArgsException.prototype);
        this.Message = opts.Message;
    }
}
export class SerialConsoleAccessDisabledException extends __BaseException {
    constructor(opts) {
        super({
            name: "SerialConsoleAccessDisabledException",
            $fault: "client",
            ...opts,
        });
        this.name = "SerialConsoleAccessDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SerialConsoleAccessDisabledException.prototype);
        this.Message = opts.Message;
    }
}
export class SerialConsoleSessionLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "SerialConsoleSessionLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "SerialConsoleSessionLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SerialConsoleSessionLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class SerialConsoleSessionUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "SerialConsoleSessionUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "SerialConsoleSessionUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, SerialConsoleSessionUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
export class SerialConsoleSessionUnsupportedException extends __BaseException {
    constructor(opts) {
        super({
            name: "SerialConsoleSessionUnsupportedException",
            $fault: "client",
            ...opts,
        });
        this.name = "SerialConsoleSessionUnsupportedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SerialConsoleSessionUnsupportedException.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
