import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, withBaseException, } from "@smithy/smithy-client";
import { EC2InstanceConnectServiceException as __BaseException } from "../models/EC2InstanceConnectServiceException";
import { AuthException, EC2InstanceNotFoundException, EC2InstanceStateInvalidException, EC2InstanceTypeInvalidException, EC2InstanceUnavailableException, InvalidArgsException, SerialConsoleAccessDisabledException, SerialConsoleSessionLimitExceededException, SerialConsoleSessionUnavailableException, SerialConsoleSessionUnsupportedException, ServiceException, ThrottlingException, } from "../models/models_0";
export const se_SendSerialConsoleSSHPublicKeyCommand = async (input, context) => {
    const headers = sharedHeaders("SendSerialConsoleSSHPublicKey");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendSSHPublicKeyCommand = async (input, context) => {
    const headers = sharedHeaders("SendSSHPublicKey");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_SendSerialConsoleSSHPublicKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SendSSHPublicKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AuthException":
        case "com.amazonaws.ec2instanceconnect#AuthException":
            throw await de_AuthExceptionRes(parsedOutput, context);
        case "EC2InstanceNotFoundException":
        case "com.amazonaws.ec2instanceconnect#EC2InstanceNotFoundException":
            throw await de_EC2InstanceNotFoundExceptionRes(parsedOutput, context);
        case "EC2InstanceStateInvalidException":
        case "com.amazonaws.ec2instanceconnect#EC2InstanceStateInvalidException":
            throw await de_EC2InstanceStateInvalidExceptionRes(parsedOutput, context);
        case "EC2InstanceTypeInvalidException":
        case "com.amazonaws.ec2instanceconnect#EC2InstanceTypeInvalidException":
            throw await de_EC2InstanceTypeInvalidExceptionRes(parsedOutput, context);
        case "EC2InstanceUnavailableException":
        case "com.amazonaws.ec2instanceconnect#EC2InstanceUnavailableException":
            throw await de_EC2InstanceUnavailableExceptionRes(parsedOutput, context);
        case "InvalidArgsException":
        case "com.amazonaws.ec2instanceconnect#InvalidArgsException":
            throw await de_InvalidArgsExceptionRes(parsedOutput, context);
        case "SerialConsoleAccessDisabledException":
        case "com.amazonaws.ec2instanceconnect#SerialConsoleAccessDisabledException":
            throw await de_SerialConsoleAccessDisabledExceptionRes(parsedOutput, context);
        case "SerialConsoleSessionLimitExceededException":
        case "com.amazonaws.ec2instanceconnect#SerialConsoleSessionLimitExceededException":
            throw await de_SerialConsoleSessionLimitExceededExceptionRes(parsedOutput, context);
        case "SerialConsoleSessionUnavailableException":
        case "com.amazonaws.ec2instanceconnect#SerialConsoleSessionUnavailableException":
            throw await de_SerialConsoleSessionUnavailableExceptionRes(parsedOutput, context);
        case "SerialConsoleSessionUnsupportedException":
        case "com.amazonaws.ec2instanceconnect#SerialConsoleSessionUnsupportedException":
            throw await de_SerialConsoleSessionUnsupportedExceptionRes(parsedOutput, context);
        case "ServiceException":
        case "com.amazonaws.ec2instanceconnect#ServiceException":
            throw await de_ServiceExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.ec2instanceconnect#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AuthExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AuthException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EC2InstanceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EC2InstanceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EC2InstanceStateInvalidExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EC2InstanceStateInvalidException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EC2InstanceTypeInvalidExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EC2InstanceTypeInvalidException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EC2InstanceUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EC2InstanceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidArgsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidArgsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_SerialConsoleAccessDisabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new SerialConsoleAccessDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_SerialConsoleSessionLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new SerialConsoleSessionLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_SerialConsoleSessionUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new SerialConsoleSessionUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_SerialConsoleSessionUnsupportedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new SerialConsoleSessionUnsupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSEC2InstanceConnectService.${operation}`,
    };
}
