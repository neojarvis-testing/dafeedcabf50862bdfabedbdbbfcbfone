import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { EC2InstanceConnectServiceException as __BaseException } from "./EC2InstanceConnectServiceException";
export declare class AuthException extends __BaseException {
  readonly name: "AuthException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<AuthException, __BaseException>);
}
export declare class EC2InstanceNotFoundException extends __BaseException {
  readonly name: "EC2InstanceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<EC2InstanceNotFoundException, __BaseException>
  );
}
export declare class EC2InstanceStateInvalidException extends __BaseException {
  readonly name: "EC2InstanceStateInvalidException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      EC2InstanceStateInvalidException,
      __BaseException
    >
  );
}
export declare class EC2InstanceTypeInvalidException extends __BaseException {
  readonly name: "EC2InstanceTypeInvalidException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      EC2InstanceTypeInvalidException,
      __BaseException
    >
  );
}
export declare class EC2InstanceUnavailableException extends __BaseException {
  readonly name: "EC2InstanceUnavailableException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      EC2InstanceUnavailableException,
      __BaseException
    >
  );
}
export declare class InvalidArgsException extends __BaseException {
  readonly name: "InvalidArgsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidArgsException, __BaseException>
  );
}
export interface SendSerialConsoleSSHPublicKeyRequest {
  InstanceId: string | undefined;
  SerialPort?: number;
  SSHPublicKey: string | undefined;
}
export interface SendSerialConsoleSSHPublicKeyResponse {
  RequestId?: string;
  Success?: boolean;
}
export declare class SerialConsoleAccessDisabledException extends __BaseException {
  readonly name: "SerialConsoleAccessDisabledException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      SerialConsoleAccessDisabledException,
      __BaseException
    >
  );
}
export declare class SerialConsoleSessionLimitExceededException extends __BaseException {
  readonly name: "SerialConsoleSessionLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      SerialConsoleSessionLimitExceededException,
      __BaseException
    >
  );
}
export declare class SerialConsoleSessionUnavailableException extends __BaseException {
  readonly name: "SerialConsoleSessionUnavailableException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      SerialConsoleSessionUnavailableException,
      __BaseException
    >
  );
}
export declare class SerialConsoleSessionUnsupportedException extends __BaseException {
  readonly name: "SerialConsoleSessionUnsupportedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      SerialConsoleSessionUnsupportedException,
      __BaseException
    >
  );
}
export declare class ServiceException extends __BaseException {
  readonly name: "ServiceException";
  readonly $fault: "server";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ServiceException, __BaseException>);
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface SendSSHPublicKeyRequest {
  InstanceId: string | undefined;
  InstanceOSUser: string | undefined;
  SSHPublicKey: string | undefined;
  AvailabilityZone?: string;
}
export interface SendSSHPublicKeyResponse {
  RequestId?: string;
  Success?: boolean;
}
