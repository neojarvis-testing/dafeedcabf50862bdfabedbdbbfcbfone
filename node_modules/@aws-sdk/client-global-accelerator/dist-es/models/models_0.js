import { GlobalAcceleratorServiceException as __BaseException } from "./GlobalAcceleratorServiceException";
export const IpAddressType = {
    DUAL_STACK: "DUAL_STACK",
    IPV4: "IPV4",
};
export const IpAddressFamily = {
    IPv4: "IPv4",
    IPv6: "IPv6",
};
export const AcceleratorStatus = {
    DEPLOYED: "DEPLOYED",
    IN_PROGRESS: "IN_PROGRESS",
};
export class AcceleratorNotDisabledException extends __BaseException {
    constructor(opts) {
        super({
            name: "AcceleratorNotDisabledException",
            $fault: "client",
            ...opts,
        });
        this.name = "AcceleratorNotDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AcceleratorNotDisabledException.prototype);
        this.Message = opts.Message;
    }
}
export class AcceleratorNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "AcceleratorNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "AcceleratorNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AcceleratorNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class EndpointAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "EndpointAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "EndpointAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EndpointAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class EndpointGroupNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "EndpointGroupNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "EndpointGroupNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EndpointGroupNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServiceErrorException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServiceErrorException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceErrorException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidArgumentException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidArgumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArgumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArgumentException.prototype);
        this.Message = opts.Message;
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const HealthState = {
    HEALTHY: "HEALTHY",
    INITIAL: "INITIAL",
    UNHEALTHY: "UNHEALTHY",
};
export class TransactionInProgressException extends __BaseException {
    constructor(opts) {
        super({
            name: "TransactionInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "TransactionInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionInProgressException.prototype);
        this.Message = opts.Message;
    }
}
export const ByoipCidrState = {
    ADVERTISING: "ADVERTISING",
    DEPROVISIONED: "DEPROVISIONED",
    FAILED_ADVERTISING: "FAILED_ADVERTISING",
    FAILED_DEPROVISION: "FAILED_DEPROVISION",
    FAILED_PROVISION: "FAILED_PROVISION",
    FAILED_WITHDRAW: "FAILED_WITHDRAW",
    PENDING_ADVERTISING: "PENDING_ADVERTISING",
    PENDING_DEPROVISIONING: "PENDING_DEPROVISIONING",
    PENDING_PROVISIONING: "PENDING_PROVISIONING",
    PENDING_WITHDRAWING: "PENDING_WITHDRAWING",
    READY: "READY",
};
export class ByoipCidrNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ByoipCidrNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ByoipCidrNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ByoipCidrNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class IncorrectCidrStateException extends __BaseException {
    constructor(opts) {
        super({
            name: "IncorrectCidrStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "IncorrectCidrStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IncorrectCidrStateException.prototype);
        this.Message = opts.Message;
    }
}
export class AssociatedEndpointGroupFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "AssociatedEndpointGroupFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "AssociatedEndpointGroupFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociatedEndpointGroupFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class AssociatedListenerFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "AssociatedListenerFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "AssociatedListenerFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AssociatedListenerFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class AttachmentNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "AttachmentNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "AttachmentNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AttachmentNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const ClientAffinity = {
    NONE: "NONE",
    SOURCE_IP: "SOURCE_IP",
};
export const CustomRoutingAcceleratorStatus = {
    DEPLOYED: "DEPLOYED",
    IN_PROGRESS: "IN_PROGRESS",
};
export const CustomRoutingProtocol = {
    TCP: "TCP",
    UDP: "UDP",
};
export const Protocol = {
    TCP: "TCP",
    UDP: "UDP",
};
export class EndpointGroupAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "EndpointGroupAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "EndpointGroupAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EndpointGroupAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidPortRangeException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidPortRangeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidPortRangeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidPortRangeException.prototype);
        this.Message = opts.Message;
    }
}
export class ListenerNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ListenerNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ListenerNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ListenerNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export const HealthCheckProtocol = {
    HTTP: "HTTP",
    HTTPS: "HTTPS",
    TCP: "TCP",
};
export const CustomRoutingDestinationTrafficState = {
    ALLOW: "ALLOW",
    DENY: "DENY",
};
export class EndpointNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "EndpointNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "EndpointNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EndpointNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
