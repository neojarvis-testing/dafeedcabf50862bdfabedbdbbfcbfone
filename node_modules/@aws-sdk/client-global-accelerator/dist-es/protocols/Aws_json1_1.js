import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { GlobalAcceleratorServiceException as __BaseException } from "../models/GlobalAcceleratorServiceException";
import { AcceleratorNotDisabledException, AcceleratorNotFoundException, AccessDeniedException, AssociatedEndpointGroupFoundException, AssociatedListenerFoundException, AttachmentNotFoundException, ByoipCidrNotFoundException, ConflictException, EndpointAlreadyExistsException, EndpointGroupAlreadyExistsException, EndpointGroupNotFoundException, EndpointNotFoundException, IncorrectCidrStateException, InternalServiceErrorException, InvalidArgumentException, InvalidNextTokenException, InvalidPortRangeException, LimitExceededException, ListenerNotFoundException, TransactionInProgressException, } from "../models/models_0";
export const se_AddCustomRoutingEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("AddCustomRoutingEndpoints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AddEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("AddEndpoints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AdvertiseByoipCidrCommand = async (input, context) => {
    const headers = sharedHeaders("AdvertiseByoipCidr");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AllowCustomRoutingTrafficCommand = async (input, context) => {
    const headers = sharedHeaders("AllowCustomRoutingTraffic");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAcceleratorCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAccelerator");
    let body;
    body = JSON.stringify(se_CreateAcceleratorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCrossAccountAttachmentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCrossAccountAttachment");
    let body;
    body = JSON.stringify(se_CreateCrossAccountAttachmentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCustomRoutingAcceleratorCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCustomRoutingAccelerator");
    let body;
    body = JSON.stringify(se_CreateCustomRoutingAcceleratorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCustomRoutingEndpointGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCustomRoutingEndpointGroup");
    let body;
    body = JSON.stringify(se_CreateCustomRoutingEndpointGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCustomRoutingListenerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCustomRoutingListener");
    let body;
    body = JSON.stringify(se_CreateCustomRoutingListenerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEndpointGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEndpointGroup");
    let body;
    body = JSON.stringify(se_CreateEndpointGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateListenerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateListener");
    let body;
    body = JSON.stringify(se_CreateListenerRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAcceleratorCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAccelerator");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCrossAccountAttachmentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCrossAccountAttachment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCustomRoutingAcceleratorCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCustomRoutingAccelerator");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCustomRoutingEndpointGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCustomRoutingEndpointGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCustomRoutingListenerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCustomRoutingListener");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEndpointGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEndpointGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteListenerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteListener");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DenyCustomRoutingTrafficCommand = async (input, context) => {
    const headers = sharedHeaders("DenyCustomRoutingTraffic");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeprovisionByoipCidrCommand = async (input, context) => {
    const headers = sharedHeaders("DeprovisionByoipCidr");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAcceleratorCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAccelerator");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAcceleratorAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAcceleratorAttributes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCrossAccountAttachmentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCrossAccountAttachment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCustomRoutingAcceleratorCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCustomRoutingAccelerator");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCustomRoutingAcceleratorAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCustomRoutingAcceleratorAttributes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCustomRoutingEndpointGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCustomRoutingEndpointGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCustomRoutingListenerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCustomRoutingListener");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEndpointGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEndpointGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeListenerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeListener");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAcceleratorsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAccelerators");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListByoipCidrsCommand = async (input, context) => {
    const headers = sharedHeaders("ListByoipCidrs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCrossAccountAttachmentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCrossAccountAttachments");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCrossAccountResourceAccountsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCrossAccountResourceAccounts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCrossAccountResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCrossAccountResources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCustomRoutingAcceleratorsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCustomRoutingAccelerators");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCustomRoutingEndpointGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCustomRoutingEndpointGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCustomRoutingListenersCommand = async (input, context) => {
    const headers = sharedHeaders("ListCustomRoutingListeners");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCustomRoutingPortMappingsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCustomRoutingPortMappings");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCustomRoutingPortMappingsByDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("ListCustomRoutingPortMappingsByDestination");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListEndpointGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEndpointGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListListenersCommand = async (input, context) => {
    const headers = sharedHeaders("ListListeners");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ProvisionByoipCidrCommand = async (input, context) => {
    const headers = sharedHeaders("ProvisionByoipCidr");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RemoveCustomRoutingEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveCustomRoutingEndpoints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RemoveEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("RemoveEndpoints");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAcceleratorCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAccelerator");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAcceleratorAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAcceleratorAttributes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCrossAccountAttachmentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCrossAccountAttachment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCustomRoutingAcceleratorCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCustomRoutingAccelerator");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCustomRoutingAcceleratorAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCustomRoutingAcceleratorAttributes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCustomRoutingListenerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCustomRoutingListener");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEndpointGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEndpointGroup");
    let body;
    body = JSON.stringify(se_UpdateEndpointGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateListenerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateListener");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_WithdrawByoipCidrCommand = async (input, context) => {
    const headers = sharedHeaders("WithdrawByoipCidr");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AddCustomRoutingEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AddEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AdvertiseByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AdvertiseByoipCidrResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AllowCustomRoutingTrafficCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_CreateAcceleratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateAcceleratorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCrossAccountAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCrossAccountAttachmentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCustomRoutingAcceleratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateCustomRoutingAcceleratorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCustomRoutingEndpointGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCustomRoutingListenerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEndpointGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateEndpointGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateListenerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAcceleratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteCrossAccountAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteCustomRoutingAcceleratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteCustomRoutingEndpointGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteCustomRoutingListenerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteEndpointGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteListenerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DenyCustomRoutingTrafficCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeprovisionByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeprovisionByoipCidrResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAcceleratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAcceleratorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAcceleratorAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCrossAccountAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCrossAccountAttachmentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCustomRoutingAcceleratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCustomRoutingAcceleratorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCustomRoutingAcceleratorAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCustomRoutingEndpointGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCustomRoutingListenerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEndpointGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEndpointGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeListenerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAcceleratorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAcceleratorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListByoipCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListByoipCidrsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCrossAccountAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCrossAccountAttachmentsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCrossAccountResourceAccountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCrossAccountResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCustomRoutingAcceleratorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListCustomRoutingAcceleratorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCustomRoutingEndpointGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCustomRoutingListenersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCustomRoutingPortMappingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCustomRoutingPortMappingsByDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListEndpointGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListEndpointGroupsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListListenersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ProvisionByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ProvisionByoipCidrResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RemoveCustomRoutingEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RemoveEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAcceleratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateAcceleratorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAcceleratorAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCrossAccountAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateCrossAccountAttachmentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCustomRoutingAcceleratorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateCustomRoutingAcceleratorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCustomRoutingAcceleratorAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCustomRoutingListenerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEndpointGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateEndpointGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateListenerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_WithdrawByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_WithdrawByoipCidrResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.globalaccelerator#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.globalaccelerator#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "EndpointAlreadyExistsException":
        case "com.amazonaws.globalaccelerator#EndpointAlreadyExistsException":
            throw await de_EndpointAlreadyExistsExceptionRes(parsedOutput, context);
        case "EndpointGroupNotFoundException":
        case "com.amazonaws.globalaccelerator#EndpointGroupNotFoundException":
            throw await de_EndpointGroupNotFoundExceptionRes(parsedOutput, context);
        case "InternalServiceErrorException":
        case "com.amazonaws.globalaccelerator#InternalServiceErrorException":
            throw await de_InternalServiceErrorExceptionRes(parsedOutput, context);
        case "InvalidArgumentException":
        case "com.amazonaws.globalaccelerator#InvalidArgumentException":
            throw await de_InvalidArgumentExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.globalaccelerator#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.globalaccelerator#TransactionInProgressException":
            throw await de_TransactionInProgressExceptionRes(parsedOutput, context);
        case "ByoipCidrNotFoundException":
        case "com.amazonaws.globalaccelerator#ByoipCidrNotFoundException":
            throw await de_ByoipCidrNotFoundExceptionRes(parsedOutput, context);
        case "IncorrectCidrStateException":
        case "com.amazonaws.globalaccelerator#IncorrectCidrStateException":
            throw await de_IncorrectCidrStateExceptionRes(parsedOutput, context);
        case "AcceleratorNotFoundException":
        case "com.amazonaws.globalaccelerator#AcceleratorNotFoundException":
            throw await de_AcceleratorNotFoundExceptionRes(parsedOutput, context);
        case "EndpointGroupAlreadyExistsException":
        case "com.amazonaws.globalaccelerator#EndpointGroupAlreadyExistsException":
            throw await de_EndpointGroupAlreadyExistsExceptionRes(parsedOutput, context);
        case "InvalidPortRangeException":
        case "com.amazonaws.globalaccelerator#InvalidPortRangeException":
            throw await de_InvalidPortRangeExceptionRes(parsedOutput, context);
        case "ListenerNotFoundException":
        case "com.amazonaws.globalaccelerator#ListenerNotFoundException":
            throw await de_ListenerNotFoundExceptionRes(parsedOutput, context);
        case "AcceleratorNotDisabledException":
        case "com.amazonaws.globalaccelerator#AcceleratorNotDisabledException":
            throw await de_AcceleratorNotDisabledExceptionRes(parsedOutput, context);
        case "AssociatedListenerFoundException":
        case "com.amazonaws.globalaccelerator#AssociatedListenerFoundException":
            throw await de_AssociatedListenerFoundExceptionRes(parsedOutput, context);
        case "AttachmentNotFoundException":
        case "com.amazonaws.globalaccelerator#AttachmentNotFoundException":
            throw await de_AttachmentNotFoundExceptionRes(parsedOutput, context);
        case "AssociatedEndpointGroupFoundException":
        case "com.amazonaws.globalaccelerator#AssociatedEndpointGroupFoundException":
            throw await de_AssociatedEndpointGroupFoundExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.globalaccelerator#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "EndpointNotFoundException":
        case "com.amazonaws.globalaccelerator#EndpointNotFoundException":
            throw await de_EndpointNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AcceleratorNotDisabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AcceleratorNotDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AcceleratorNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AcceleratorNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AssociatedEndpointGroupFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AssociatedEndpointGroupFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AssociatedListenerFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AssociatedListenerFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_AttachmentNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AttachmentNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ByoipCidrNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ByoipCidrNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EndpointAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EndpointAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EndpointGroupAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EndpointGroupAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EndpointGroupNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EndpointGroupNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_EndpointNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new EndpointNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IncorrectCidrStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IncorrectCidrStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServiceErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServiceErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidArgumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidArgumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidPortRangeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPortRangeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ListenerNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ListenerNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TransactionInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TransactionInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateAcceleratorRequest = (input, context) => {
    return take(input, {
        Enabled: [],
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        IpAddressType: [],
        IpAddresses: _json,
        Name: [],
        Tags: _json,
    });
};
const se_CreateCrossAccountAttachmentRequest = (input, context) => {
    return take(input, {
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Name: [],
        Principals: _json,
        Resources: _json,
        Tags: _json,
    });
};
const se_CreateCustomRoutingAcceleratorRequest = (input, context) => {
    return take(input, {
        Enabled: [],
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        IpAddressType: [],
        IpAddresses: _json,
        Name: [],
        Tags: _json,
    });
};
const se_CreateCustomRoutingEndpointGroupRequest = (input, context) => {
    return take(input, {
        DestinationConfigurations: _json,
        EndpointGroupRegion: [],
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ListenerArn: [],
    });
};
const se_CreateCustomRoutingListenerRequest = (input, context) => {
    return take(input, {
        AcceleratorArn: [],
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        PortRanges: _json,
    });
};
const se_CreateEndpointGroupRequest = (input, context) => {
    return take(input, {
        EndpointConfigurations: _json,
        EndpointGroupRegion: [],
        HealthCheckIntervalSeconds: [],
        HealthCheckPath: [],
        HealthCheckPort: [],
        HealthCheckProtocol: [],
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ListenerArn: [],
        PortOverrides: _json,
        ThresholdCount: [],
        TrafficDialPercentage: __serializeFloat,
    });
};
const se_CreateListenerRequest = (input, context) => {
    return take(input, {
        AcceleratorArn: [],
        ClientAffinity: [],
        IdempotencyToken: [true, (_) => _ ?? generateIdempotencyToken()],
        PortRanges: _json,
        Protocol: [],
    });
};
const se_UpdateEndpointGroupRequest = (input, context) => {
    return take(input, {
        EndpointConfigurations: _json,
        EndpointGroupArn: [],
        HealthCheckIntervalSeconds: [],
        HealthCheckPath: [],
        HealthCheckPort: [],
        HealthCheckProtocol: [],
        PortOverrides: _json,
        ThresholdCount: [],
        TrafficDialPercentage: __serializeFloat,
    });
};
const de_Accelerator = (output, context) => {
    return take(output, {
        AcceleratorArn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DnsName: __expectString,
        DualStackDnsName: __expectString,
        Enabled: __expectBoolean,
        Events: (_) => de_AcceleratorEvents(_, context),
        IpAddressType: __expectString,
        IpSets: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Status: __expectString,
    });
};
const de_AcceleratorEvent = (output, context) => {
    return take(output, {
        Message: __expectString,
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AcceleratorEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AcceleratorEvent(entry, context);
    });
    return retVal;
};
const de_Accelerators = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Accelerator(entry, context);
    });
    return retVal;
};
const de_AdvertiseByoipCidrResponse = (output, context) => {
    return take(output, {
        ByoipCidr: (_) => de_ByoipCidr(_, context),
    });
};
const de_Attachment = (output, context) => {
    return take(output, {
        AttachmentArn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Principals: _json,
        Resources: _json,
    });
};
const de_Attachments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Attachment(entry, context);
    });
    return retVal;
};
const de_ByoipCidr = (output, context) => {
    return take(output, {
        Cidr: __expectString,
        Events: (_) => de_ByoipCidrEvents(_, context),
        State: __expectString,
    });
};
const de_ByoipCidrEvent = (output, context) => {
    return take(output, {
        Message: __expectString,
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ByoipCidrEvents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ByoipCidrEvent(entry, context);
    });
    return retVal;
};
const de_ByoipCidrs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ByoipCidr(entry, context);
    });
    return retVal;
};
const de_CreateAcceleratorResponse = (output, context) => {
    return take(output, {
        Accelerator: (_) => de_Accelerator(_, context),
    });
};
const de_CreateCrossAccountAttachmentResponse = (output, context) => {
    return take(output, {
        CrossAccountAttachment: (_) => de_Attachment(_, context),
    });
};
const de_CreateCustomRoutingAcceleratorResponse = (output, context) => {
    return take(output, {
        Accelerator: (_) => de_CustomRoutingAccelerator(_, context),
    });
};
const de_CreateEndpointGroupResponse = (output, context) => {
    return take(output, {
        EndpointGroup: (_) => de_EndpointGroup(_, context),
    });
};
const de_CustomRoutingAccelerator = (output, context) => {
    return take(output, {
        AcceleratorArn: __expectString,
        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DnsName: __expectString,
        Enabled: __expectBoolean,
        IpAddressType: __expectString,
        IpSets: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        Status: __expectString,
    });
};
const de_CustomRoutingAccelerators = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomRoutingAccelerator(entry, context);
    });
    return retVal;
};
const de_DeprovisionByoipCidrResponse = (output, context) => {
    return take(output, {
        ByoipCidr: (_) => de_ByoipCidr(_, context),
    });
};
const de_DescribeAcceleratorResponse = (output, context) => {
    return take(output, {
        Accelerator: (_) => de_Accelerator(_, context),
    });
};
const de_DescribeCrossAccountAttachmentResponse = (output, context) => {
    return take(output, {
        CrossAccountAttachment: (_) => de_Attachment(_, context),
    });
};
const de_DescribeCustomRoutingAcceleratorResponse = (output, context) => {
    return take(output, {
        Accelerator: (_) => de_CustomRoutingAccelerator(_, context),
    });
};
const de_DescribeEndpointGroupResponse = (output, context) => {
    return take(output, {
        EndpointGroup: (_) => de_EndpointGroup(_, context),
    });
};
const de_EndpointGroup = (output, context) => {
    return take(output, {
        EndpointDescriptions: _json,
        EndpointGroupArn: __expectString,
        EndpointGroupRegion: __expectString,
        HealthCheckIntervalSeconds: __expectInt32,
        HealthCheckPath: __expectString,
        HealthCheckPort: __expectInt32,
        HealthCheckProtocol: __expectString,
        PortOverrides: _json,
        ThresholdCount: __expectInt32,
        TrafficDialPercentage: __limitedParseFloat32,
    });
};
const de_EndpointGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EndpointGroup(entry, context);
    });
    return retVal;
};
const de_ListAcceleratorsResponse = (output, context) => {
    return take(output, {
        Accelerators: (_) => de_Accelerators(_, context),
        NextToken: __expectString,
    });
};
const de_ListByoipCidrsResponse = (output, context) => {
    return take(output, {
        ByoipCidrs: (_) => de_ByoipCidrs(_, context),
        NextToken: __expectString,
    });
};
const de_ListCrossAccountAttachmentsResponse = (output, context) => {
    return take(output, {
        CrossAccountAttachments: (_) => de_Attachments(_, context),
        NextToken: __expectString,
    });
};
const de_ListCustomRoutingAcceleratorsResponse = (output, context) => {
    return take(output, {
        Accelerators: (_) => de_CustomRoutingAccelerators(_, context),
        NextToken: __expectString,
    });
};
const de_ListEndpointGroupsResponse = (output, context) => {
    return take(output, {
        EndpointGroups: (_) => de_EndpointGroups(_, context),
        NextToken: __expectString,
    });
};
const de_ProvisionByoipCidrResponse = (output, context) => {
    return take(output, {
        ByoipCidr: (_) => de_ByoipCidr(_, context),
    });
};
const de_UpdateAcceleratorResponse = (output, context) => {
    return take(output, {
        Accelerator: (_) => de_Accelerator(_, context),
    });
};
const de_UpdateCrossAccountAttachmentResponse = (output, context) => {
    return take(output, {
        CrossAccountAttachment: (_) => de_Attachment(_, context),
    });
};
const de_UpdateCustomRoutingAcceleratorResponse = (output, context) => {
    return take(output, {
        Accelerator: (_) => de_CustomRoutingAccelerator(_, context),
    });
};
const de_UpdateEndpointGroupResponse = (output, context) => {
    return take(output, {
        EndpointGroup: (_) => de_EndpointGroup(_, context),
    });
};
const de_WithdrawByoipCidrResponse = (output, context) => {
    return take(output, {
        ByoipCidr: (_) => de_ByoipCidr(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `GlobalAccelerator_V20180706.${operation}`,
    };
}
