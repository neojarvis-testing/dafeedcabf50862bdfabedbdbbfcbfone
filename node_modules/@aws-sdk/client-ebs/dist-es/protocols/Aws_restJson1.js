import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, map, parseEpochTimestamp as __parseEpochTimestamp, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { EBSServiceException as __BaseException } from "../models/EBSServiceException";
import { AccessDeniedException, ConcurrentLimitExceededException, ConflictException, InternalServerException, RequestThrottledException, ResourceNotFoundException, ServiceQuotaExceededException, ValidationException, } from "../models/models_0";
export const se_CompleteSnapshotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xac]: [() => isSerializableHeaderValue(input[_CBC]), () => input[_CBC].toString()],
        [_xac_]: input[_C],
        [_xaca]: input[_CA],
        [_xacam]: input[_CAM],
    });
    b.bp("/snapshots/completion/{SnapshotId}");
    b.p("SnapshotId", () => input.SnapshotId, "{SnapshotId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetSnapshotBlockCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/snapshots/{SnapshotId}/blocks/{BlockIndex}");
    b.p("SnapshotId", () => input.SnapshotId, "{SnapshotId}", false);
    b.p("BlockIndex", () => input.BlockIndex.toString(), "{BlockIndex}", false);
    const query = map({
        [_bT]: [, __expectNonNull(input[_BT], `BlockToken`)],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListChangedBlocksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/snapshots/{SecondSnapshotId}/changedblocks");
    b.p("SecondSnapshotId", () => input.SecondSnapshotId, "{SecondSnapshotId}", false);
    const query = map({
        [_fSI]: [, input[_FSI]],
        [_pT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_sBI]: [() => input.StartingBlockIndex !== void 0, () => input[_SBI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListSnapshotBlocksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/snapshots/{SnapshotId}/blocks");
    b.p("SnapshotId", () => input.SnapshotId, "{SnapshotId}", false);
    const query = map({
        [_pT]: [, input[_NT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_sBI]: [() => input.StartingBlockIndex !== void 0, () => input[_SBI].toString()],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_PutSnapshotBlockCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
        "content-type": "application/octet-stream",
        [_xadl]: [() => isSerializableHeaderValue(input[_DL]), () => input[_DL].toString()],
        [_xap]: [() => isSerializableHeaderValue(input[_P]), () => input[_P].toString()],
        [_xac_]: input[_C],
        [_xaca]: input[_CA],
    });
    b.bp("/snapshots/{SnapshotId}/blocks/{BlockIndex}");
    b.p("SnapshotId", () => input.SnapshotId, "{SnapshotId}", false);
    b.p("BlockIndex", () => input.BlockIndex.toString(), "{BlockIndex}", false);
    let body;
    if (input.BlockData !== undefined) {
        body = input.BlockData;
    }
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_StartSnapshotCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/snapshots");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        Encrypted: [],
        KmsKeyArn: [],
        ParentSnapshotId: [],
        Tags: (_) => _json(_),
        Timeout: [],
        VolumeSize: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const de_CompleteSnapshotCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Status: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSnapshotBlockCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_DL]: [() => void 0 !== output.headers[_xadl], () => __strictParseInt32(output.headers[_xadl])],
        [_C]: [, output.headers[_xac_]],
        [_CA]: [, output.headers[_xaca]],
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.BlockData = data;
    return contents;
};
export const de_ListChangedBlocksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BlockSize: __expectInt32,
        ChangedBlocks: _json,
        ExpiryTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NextToken: __expectString,
        VolumeSize: __expectLong,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListSnapshotBlocksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BlockSize: __expectInt32,
        Blocks: _json,
        ExpiryTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NextToken: __expectString,
        VolumeSize: __expectLong,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutSnapshotBlockCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        [_C]: [, output.headers[_xac_]],
        [_CA]: [, output.headers[_xaca]],
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_StartSnapshotCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        BlockSize: __expectInt32,
        Description: __expectString,
        KmsKeyArn: __expectString,
        OwnerId: __expectString,
        ParentSnapshotId: __expectString,
        SnapshotId: __expectString,
        SseType: __expectString,
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        Tags: _json,
        VolumeSize: __expectLong,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ebs#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ebs#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "RequestThrottledException":
        case "com.amazonaws.ebs#RequestThrottledException":
            throw await de_RequestThrottledExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.ebs#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.ebs#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.ebs#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ConcurrentLimitExceededException":
        case "com.amazonaws.ebs#ConcurrentLimitExceededException":
            throw await de_ConcurrentLimitExceededExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.ebs#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConcurrentLimitExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConcurrentLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_RequestThrottledExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new RequestThrottledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _BT = "BlockToken";
const _C = "Checksum";
const _CA = "ChecksumAlgorithm";
const _CAM = "ChecksumAggregationMethod";
const _CBC = "ChangedBlocksCount";
const _DL = "DataLength";
const _FSI = "FirstSnapshotId";
const _MR = "MaxResults";
const _NT = "NextToken";
const _P = "Progress";
const _SBI = "StartingBlockIndex";
const _bT = "blockToken";
const _fSI = "firstSnapshotId";
const _mR = "maxResults";
const _pT = "pageToken";
const _sBI = "startingBlockIndex";
const _xac = "x-amz-changedblockscount";
const _xac_ = "x-amz-checksum";
const _xaca = "x-amz-checksum-algorithm";
const _xacam = "x-amz-checksum-aggregation-method";
const _xadl = "x-amz-data-length";
const _xap = "x-amz-progress";
