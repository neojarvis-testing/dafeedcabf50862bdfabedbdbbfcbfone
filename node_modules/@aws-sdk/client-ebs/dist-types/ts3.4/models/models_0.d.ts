import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { StreamingBlobTypes } from "@smithy/types";
import { EBSServiceException as __BaseException } from "./EBSServiceException";
export declare const AccessDeniedExceptionReason: {
  readonly DEPENDENCY_ACCESS_DENIED: "DEPENDENCY_ACCESS_DENIED";
  readonly UNAUTHORIZED_ACCOUNT: "UNAUTHORIZED_ACCOUNT";
};
export type AccessDeniedExceptionReason =
  (typeof AccessDeniedExceptionReason)[keyof typeof AccessDeniedExceptionReason];
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  Reason: AccessDeniedExceptionReason | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface Block {
  BlockIndex?: number;
  BlockToken?: string;
}
export interface ChangedBlock {
  BlockIndex?: number;
  FirstBlockToken?: string;
  SecondBlockToken?: string;
}
export declare const ChecksumAggregationMethod: {
  readonly CHECKSUM_AGGREGATION_LINEAR: "LINEAR";
};
export type ChecksumAggregationMethod =
  (typeof ChecksumAggregationMethod)[keyof typeof ChecksumAggregationMethod];
export declare const ChecksumAlgorithm: {
  readonly CHECKSUM_ALGORITHM_SHA256: "SHA256";
};
export type ChecksumAlgorithm =
  (typeof ChecksumAlgorithm)[keyof typeof ChecksumAlgorithm];
export interface CompleteSnapshotRequest {
  SnapshotId: string | undefined;
  ChangedBlocksCount: number | undefined;
  Checksum?: string;
  ChecksumAlgorithm?: ChecksumAlgorithm;
  ChecksumAggregationMethod?: ChecksumAggregationMethod;
}
export declare const Status: {
  readonly COMPLETED: "completed";
  readonly ERROR: "error";
  readonly PENDING: "pending";
};
export type Status = (typeof Status)[keyof typeof Status];
export interface CompleteSnapshotResponse {
  Status?: Status;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare const RequestThrottledExceptionReason: {
  readonly ACCOUNT_THROTTLED: "ACCOUNT_THROTTLED";
  readonly DEPENDENCY_REQUEST_THROTTLED: "DEPENDENCY_REQUEST_THROTTLED";
  readonly RESOURCE_LEVEL_THROTTLE: "RESOURCE_LEVEL_THROTTLE";
};
export type RequestThrottledExceptionReason =
  (typeof RequestThrottledExceptionReason)[keyof typeof RequestThrottledExceptionReason];
export declare class RequestThrottledException extends __BaseException {
  readonly name: "RequestThrottledException";
  readonly $fault: "client";
  Message?: string;
  Reason?: RequestThrottledExceptionReason;
  constructor(
    opts: __ExceptionOptionType<RequestThrottledException, __BaseException>
  );
}
export declare const ResourceNotFoundExceptionReason: {
  readonly DEPENDENCY_RESOURCE_NOT_FOUND: "DEPENDENCY_RESOURCE_NOT_FOUND";
  readonly GRANT_NOT_FOUND: "GRANT_NOT_FOUND";
  readonly IMAGE_NOT_FOUND: "IMAGE_NOT_FOUND";
  readonly SNAPSHOT_NOT_FOUND: "SNAPSHOT_NOT_FOUND";
};
export type ResourceNotFoundExceptionReason =
  (typeof ResourceNotFoundExceptionReason)[keyof typeof ResourceNotFoundExceptionReason];
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  Reason?: ResourceNotFoundExceptionReason;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare const ServiceQuotaExceededExceptionReason: {
  readonly DEPENDENCY_SERVICE_QUOTA_EXCEEDED: "DEPENDENCY_SERVICE_QUOTA_EXCEEDED";
};
export type ServiceQuotaExceededExceptionReason =
  (typeof ServiceQuotaExceededExceptionReason)[keyof typeof ServiceQuotaExceededExceptionReason];
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message?: string;
  Reason?: ServiceQuotaExceededExceptionReason;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare const ValidationExceptionReason: {
  readonly CONFLICTING_BLOCK_UPDATE: "CONFLICTING_BLOCK_UPDATE";
  readonly INVALID_BLOCK: "INVALID_BLOCK";
  readonly INVALID_BLOCK_TOKEN: "INVALID_BLOCK_TOKEN";
  readonly INVALID_CONTENT_ENCODING: "INVALID_CONTENT_ENCODING";
  readonly INVALID_CUSTOMER_KEY: "INVALID_CUSTOMER_KEY";
  readonly INVALID_DEPENDENCY_REQUEST: "INVALID_DEPENDENCY_REQUEST";
  readonly INVALID_GRANT_TOKEN: "INVALID_GRANT_TOKEN";
  readonly INVALID_IMAGE_ID: "INVALID_IMAGE_ID";
  readonly INVALID_PAGE_TOKEN: "INVALID_PAGE_TOKEN";
  readonly INVALID_PARAMETER_VALUE: "INVALID_PARAMETER_VALUE";
  readonly INVALID_SNAPSHOT_ID: "INVALID_SNAPSHOT_ID";
  readonly INVALID_TAG: "INVALID_TAG";
  readonly INVALID_VOLUME_SIZE: "INVALID_VOLUME_SIZE";
  readonly UNRELATED_SNAPSHOTS: "UNRELATED_SNAPSHOTS";
  readonly WRITE_REQUEST_TIMEOUT: "WRITE_REQUEST_TIMEOUT";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message?: string;
  Reason?: ValidationExceptionReason;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export declare class ConcurrentLimitExceededException extends __BaseException {
  readonly name: "ConcurrentLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      ConcurrentLimitExceededException,
      __BaseException
    >
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message?: string;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface GetSnapshotBlockRequest {
  SnapshotId: string | undefined;
  BlockIndex: number | undefined;
  BlockToken: string | undefined;
}
export interface GetSnapshotBlockResponse {
  DataLength?: number;
  BlockData?: StreamingBlobTypes;
  Checksum?: string;
  ChecksumAlgorithm?: ChecksumAlgorithm;
}
export interface ListChangedBlocksRequest {
  FirstSnapshotId?: string;
  SecondSnapshotId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  StartingBlockIndex?: number;
}
export interface ListChangedBlocksResponse {
  ChangedBlocks?: ChangedBlock[];
  ExpiryTime?: Date;
  VolumeSize?: number;
  BlockSize?: number;
  NextToken?: string;
}
export interface ListSnapshotBlocksRequest {
  SnapshotId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  StartingBlockIndex?: number;
}
export interface ListSnapshotBlocksResponse {
  Blocks?: Block[];
  ExpiryTime?: Date;
  VolumeSize?: number;
  BlockSize?: number;
  NextToken?: string;
}
export interface PutSnapshotBlockRequest {
  SnapshotId: string | undefined;
  BlockIndex: number | undefined;
  BlockData: StreamingBlobTypes | undefined;
  DataLength: number | undefined;
  Progress?: number;
  Checksum: string | undefined;
  ChecksumAlgorithm: ChecksumAlgorithm | undefined;
}
export interface PutSnapshotBlockResponse {
  Checksum?: string;
  ChecksumAlgorithm?: ChecksumAlgorithm;
}
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface StartSnapshotRequest {
  VolumeSize: number | undefined;
  ParentSnapshotId?: string;
  Tags?: Tag[];
  Description?: string;
  ClientToken?: string;
  Encrypted?: boolean;
  KmsKeyArn?: string;
  Timeout?: number;
}
export declare const SSEType: {
  readonly NONE: "none";
  readonly SSE_EBS: "sse-ebs";
  readonly SSE_KMS: "sse-kms";
};
export type SSEType = (typeof SSEType)[keyof typeof SSEType];
export interface StartSnapshotResponse {
  Description?: string;
  SnapshotId?: string;
  OwnerId?: string;
  Status?: Status;
  StartTime?: Date;
  VolumeSize?: number;
  BlockSize?: number;
  Tags?: Tag[];
  ParentSnapshotId?: string;
  KmsKeyArn?: string;
  SseType?: SSEType;
}
export declare const ChangedBlockFilterSensitiveLog: (obj: ChangedBlock) => any;
export declare const GetSnapshotBlockResponseFilterSensitiveLog: (
  obj: GetSnapshotBlockResponse
) => any;
export declare const ListChangedBlocksResponseFilterSensitiveLog: (
  obj: ListChangedBlocksResponse
) => any;
export declare const ListSnapshotBlocksResponseFilterSensitiveLog: (
  obj: ListSnapshotBlocksResponse
) => any;
export declare const PutSnapshotBlockRequestFilterSensitiveLog: (
  obj: PutSnapshotBlockRequest
) => any;
export declare const StartSnapshotRequestFilterSensitiveLog: (
  obj: StartSnapshotRequest
) => any;
export declare const StartSnapshotResponseFilterSensitiveLog: (
  obj: StartSnapshotResponse
) => any;
