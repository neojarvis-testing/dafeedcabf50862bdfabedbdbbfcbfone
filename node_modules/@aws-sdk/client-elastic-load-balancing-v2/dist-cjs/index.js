"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ALPNPolicyNotSupportedException: () => ALPNPolicyNotSupportedException,
  ActionTypeEnum: () => ActionTypeEnum,
  AddListenerCertificatesCommand: () => AddListenerCertificatesCommand,
  AddTagsCommand: () => AddTagsCommand,
  AddTrustStoreRevocationsCommand: () => AddTrustStoreRevocationsCommand,
  AllocationIdNotFoundException: () => AllocationIdNotFoundException,
  AnomalyResultEnum: () => AnomalyResultEnum,
  AuthenticateCognitoActionConditionalBehaviorEnum: () => AuthenticateCognitoActionConditionalBehaviorEnum,
  AuthenticateOidcActionConditionalBehaviorEnum: () => AuthenticateOidcActionConditionalBehaviorEnum,
  AvailabilityZoneNotSupportedException: () => AvailabilityZoneNotSupportedException,
  CaCertificatesBundleNotFoundException: () => CaCertificatesBundleNotFoundException,
  CertificateNotFoundException: () => CertificateNotFoundException,
  CreateListenerCommand: () => CreateListenerCommand,
  CreateLoadBalancerCommand: () => CreateLoadBalancerCommand,
  CreateRuleCommand: () => CreateRuleCommand,
  CreateTargetGroupCommand: () => CreateTargetGroupCommand,
  CreateTrustStoreCommand: () => CreateTrustStoreCommand,
  DeleteListenerCommand: () => DeleteListenerCommand,
  DeleteLoadBalancerCommand: () => DeleteLoadBalancerCommand,
  DeleteRuleCommand: () => DeleteRuleCommand,
  DeleteTargetGroupCommand: () => DeleteTargetGroupCommand,
  DeleteTrustStoreCommand: () => DeleteTrustStoreCommand,
  DeregisterTargetsCommand: () => DeregisterTargetsCommand,
  DescribeAccountLimitsCommand: () => DescribeAccountLimitsCommand,
  DescribeListenerCertificatesCommand: () => DescribeListenerCertificatesCommand,
  DescribeListenersCommand: () => DescribeListenersCommand,
  DescribeLoadBalancerAttributesCommand: () => DescribeLoadBalancerAttributesCommand,
  DescribeLoadBalancersCommand: () => DescribeLoadBalancersCommand,
  DescribeRulesCommand: () => DescribeRulesCommand,
  DescribeSSLPoliciesCommand: () => DescribeSSLPoliciesCommand,
  DescribeTagsCommand: () => DescribeTagsCommand,
  DescribeTargetGroupAttributesCommand: () => DescribeTargetGroupAttributesCommand,
  DescribeTargetGroupsCommand: () => DescribeTargetGroupsCommand,
  DescribeTargetHealthCommand: () => DescribeTargetHealthCommand,
  DescribeTargetHealthInputIncludeEnum: () => DescribeTargetHealthInputIncludeEnum,
  DescribeTrustStoreAssociationsCommand: () => DescribeTrustStoreAssociationsCommand,
  DescribeTrustStoreRevocationsCommand: () => DescribeTrustStoreRevocationsCommand,
  DescribeTrustStoresCommand: () => DescribeTrustStoresCommand,
  DuplicateListenerException: () => DuplicateListenerException,
  DuplicateLoadBalancerNameException: () => DuplicateLoadBalancerNameException,
  DuplicateTagKeysException: () => DuplicateTagKeysException,
  DuplicateTargetGroupNameException: () => DuplicateTargetGroupNameException,
  DuplicateTrustStoreNameException: () => DuplicateTrustStoreNameException,
  ElasticLoadBalancingV2: () => ElasticLoadBalancingV2,
  ElasticLoadBalancingV2Client: () => ElasticLoadBalancingV2Client,
  ElasticLoadBalancingV2ServiceException: () => ElasticLoadBalancingV2ServiceException,
  EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum: () => EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum,
  GetTrustStoreCaCertificatesBundleCommand: () => GetTrustStoreCaCertificatesBundleCommand,
  GetTrustStoreRevocationContentCommand: () => GetTrustStoreRevocationContentCommand,
  HealthUnavailableException: () => HealthUnavailableException,
  IncompatibleProtocolsException: () => IncompatibleProtocolsException,
  InvalidCaCertificatesBundleException: () => InvalidCaCertificatesBundleException,
  InvalidConfigurationRequestException: () => InvalidConfigurationRequestException,
  InvalidLoadBalancerActionException: () => InvalidLoadBalancerActionException,
  InvalidRevocationContentException: () => InvalidRevocationContentException,
  InvalidSchemeException: () => InvalidSchemeException,
  InvalidSecurityGroupException: () => InvalidSecurityGroupException,
  InvalidSubnetException: () => InvalidSubnetException,
  InvalidTargetException: () => InvalidTargetException,
  IpAddressType: () => IpAddressType,
  ListenerNotFoundException: () => ListenerNotFoundException,
  LoadBalancerNotFoundException: () => LoadBalancerNotFoundException,
  LoadBalancerSchemeEnum: () => LoadBalancerSchemeEnum,
  LoadBalancerStateEnum: () => LoadBalancerStateEnum,
  LoadBalancerTypeEnum: () => LoadBalancerTypeEnum,
  MitigationInEffectEnum: () => MitigationInEffectEnum,
  ModifyListenerCommand: () => ModifyListenerCommand,
  ModifyLoadBalancerAttributesCommand: () => ModifyLoadBalancerAttributesCommand,
  ModifyRuleCommand: () => ModifyRuleCommand,
  ModifyTargetGroupAttributesCommand: () => ModifyTargetGroupAttributesCommand,
  ModifyTargetGroupCommand: () => ModifyTargetGroupCommand,
  ModifyTrustStoreCommand: () => ModifyTrustStoreCommand,
  OperationNotPermittedException: () => OperationNotPermittedException,
  PriorityInUseException: () => PriorityInUseException,
  ProtocolEnum: () => ProtocolEnum,
  RedirectActionStatusCodeEnum: () => RedirectActionStatusCodeEnum,
  RegisterTargetsCommand: () => RegisterTargetsCommand,
  RemoveListenerCertificatesCommand: () => RemoveListenerCertificatesCommand,
  RemoveTagsCommand: () => RemoveTagsCommand,
  RemoveTrustStoreRevocationsCommand: () => RemoveTrustStoreRevocationsCommand,
  ResourceInUseException: () => ResourceInUseException,
  RevocationContentNotFoundException: () => RevocationContentNotFoundException,
  RevocationIdNotFoundException: () => RevocationIdNotFoundException,
  RevocationType: () => RevocationType,
  RuleNotFoundException: () => RuleNotFoundException,
  SSLPolicyNotFoundException: () => SSLPolicyNotFoundException,
  SetIpAddressTypeCommand: () => SetIpAddressTypeCommand,
  SetRulePrioritiesCommand: () => SetRulePrioritiesCommand,
  SetSecurityGroupsCommand: () => SetSecurityGroupsCommand,
  SetSubnetsCommand: () => SetSubnetsCommand,
  SubnetNotFoundException: () => SubnetNotFoundException,
  TargetGroupAssociationLimitException: () => TargetGroupAssociationLimitException,
  TargetGroupIpAddressTypeEnum: () => TargetGroupIpAddressTypeEnum,
  TargetGroupNotFoundException: () => TargetGroupNotFoundException,
  TargetHealthReasonEnum: () => TargetHealthReasonEnum,
  TargetHealthStateEnum: () => TargetHealthStateEnum,
  TargetTypeEnum: () => TargetTypeEnum,
  TooManyActionsException: () => TooManyActionsException,
  TooManyCertificatesException: () => TooManyCertificatesException,
  TooManyListenersException: () => TooManyListenersException,
  TooManyLoadBalancersException: () => TooManyLoadBalancersException,
  TooManyRegistrationsForTargetIdException: () => TooManyRegistrationsForTargetIdException,
  TooManyRulesException: () => TooManyRulesException,
  TooManyTagsException: () => TooManyTagsException,
  TooManyTargetGroupsException: () => TooManyTargetGroupsException,
  TooManyTargetsException: () => TooManyTargetsException,
  TooManyTrustStoreRevocationEntriesException: () => TooManyTrustStoreRevocationEntriesException,
  TooManyTrustStoresException: () => TooManyTrustStoresException,
  TooManyUniqueTargetGroupsPerLoadBalancerException: () => TooManyUniqueTargetGroupsPerLoadBalancerException,
  TrustStoreInUseException: () => TrustStoreInUseException,
  TrustStoreNotFoundException: () => TrustStoreNotFoundException,
  TrustStoreNotReadyException: () => TrustStoreNotReadyException,
  TrustStoreStatus: () => TrustStoreStatus,
  UnsupportedProtocolException: () => UnsupportedProtocolException,
  __Client: () => import_smithy_client.Client,
  paginateDescribeListeners: () => paginateDescribeListeners,
  paginateDescribeLoadBalancers: () => paginateDescribeLoadBalancers,
  paginateDescribeTargetGroups: () => paginateDescribeTargetGroups,
  paginateDescribeTrustStoreAssociations: () => paginateDescribeTrustStoreAssociations,
  paginateDescribeTrustStoreRevocations: () => paginateDescribeTrustStoreRevocations,
  paginateDescribeTrustStores: () => paginateDescribeTrustStores,
  waitForLoadBalancerAvailable: () => waitForLoadBalancerAvailable,
  waitForLoadBalancerExists: () => waitForLoadBalancerExists,
  waitForLoadBalancersDeleted: () => waitForLoadBalancersDeleted,
  waitForTargetDeregistered: () => waitForTargetDeregistered,
  waitForTargetInService: () => waitForTargetInService,
  waitUntilLoadBalancerAvailable: () => waitUntilLoadBalancerAvailable,
  waitUntilLoadBalancerExists: () => waitUntilLoadBalancerExists,
  waitUntilLoadBalancersDeleted: () => waitUntilLoadBalancersDeleted,
  waitUntilTargetDeregistered: () => waitUntilTargetDeregistered,
  waitUntilTargetInService: () => waitUntilTargetInService
});
module.exports = __toCommonJS(src_exports);

// src/ElasticLoadBalancingV2Client.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "elasticloadbalancing"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/ElasticLoadBalancingV2Client.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/ElasticLoadBalancingV2Client.ts
var _ElasticLoadBalancingV2Client = class _ElasticLoadBalancingV2Client extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultElasticLoadBalancingV2HttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_ElasticLoadBalancingV2Client, "ElasticLoadBalancingV2Client");
var ElasticLoadBalancingV2Client = _ElasticLoadBalancingV2Client;

// src/ElasticLoadBalancingV2.ts


// src/commands/AddListenerCertificatesCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_query.ts
var import_core2 = require("@aws-sdk/core");



// src/models/ElasticLoadBalancingV2ServiceException.ts

var _ElasticLoadBalancingV2ServiceException = class _ElasticLoadBalancingV2ServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _ElasticLoadBalancingV2ServiceException.prototype);
  }
};
__name(_ElasticLoadBalancingV2ServiceException, "ElasticLoadBalancingV2ServiceException");
var ElasticLoadBalancingV2ServiceException = _ElasticLoadBalancingV2ServiceException;

// src/models/models_0.ts
var AuthenticateCognitoActionConditionalBehaviorEnum = {
  ALLOW: "allow",
  AUTHENTICATE: "authenticate",
  DENY: "deny"
};
var AuthenticateOidcActionConditionalBehaviorEnum = {
  ALLOW: "allow",
  AUTHENTICATE: "authenticate",
  DENY: "deny"
};
var RedirectActionStatusCodeEnum = {
  HTTP_301: "HTTP_301",
  HTTP_302: "HTTP_302"
};
var ActionTypeEnum = {
  AUTHENTICATE_COGNITO: "authenticate-cognito",
  AUTHENTICATE_OIDC: "authenticate-oidc",
  FIXED_RESPONSE: "fixed-response",
  FORWARD: "forward",
  REDIRECT: "redirect"
};
var _CertificateNotFoundException = class _CertificateNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CertificateNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "CertificateNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _CertificateNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_CertificateNotFoundException, "CertificateNotFoundException");
var CertificateNotFoundException = _CertificateNotFoundException;
var _ListenerNotFoundException = class _ListenerNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ListenerNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ListenerNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ListenerNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ListenerNotFoundException, "ListenerNotFoundException");
var ListenerNotFoundException = _ListenerNotFoundException;
var _TooManyCertificatesException = class _TooManyCertificatesException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyCertificatesException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyCertificatesException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyCertificatesException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyCertificatesException, "TooManyCertificatesException");
var TooManyCertificatesException = _TooManyCertificatesException;
var _DuplicateTagKeysException = class _DuplicateTagKeysException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DuplicateTagKeysException",
      $fault: "client",
      ...opts
    });
    this.name = "DuplicateTagKeysException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _DuplicateTagKeysException.prototype);
    this.Message = opts.Message;
  }
};
__name(_DuplicateTagKeysException, "DuplicateTagKeysException");
var DuplicateTagKeysException = _DuplicateTagKeysException;
var _LoadBalancerNotFoundException = class _LoadBalancerNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LoadBalancerNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "LoadBalancerNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _LoadBalancerNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_LoadBalancerNotFoundException, "LoadBalancerNotFoundException");
var LoadBalancerNotFoundException = _LoadBalancerNotFoundException;
var _RuleNotFoundException = class _RuleNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RuleNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "RuleNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RuleNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_RuleNotFoundException, "RuleNotFoundException");
var RuleNotFoundException = _RuleNotFoundException;
var _TargetGroupNotFoundException = class _TargetGroupNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TargetGroupNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "TargetGroupNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TargetGroupNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TargetGroupNotFoundException, "TargetGroupNotFoundException");
var TargetGroupNotFoundException = _TargetGroupNotFoundException;
var _TooManyTagsException = class _TooManyTagsException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyTagsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyTagsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyTagsException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyTagsException, "TooManyTagsException");
var TooManyTagsException = _TooManyTagsException;
var _TrustStoreNotFoundException = class _TrustStoreNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TrustStoreNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "TrustStoreNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TrustStoreNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TrustStoreNotFoundException, "TrustStoreNotFoundException");
var TrustStoreNotFoundException = _TrustStoreNotFoundException;
var RevocationType = {
  CRL: "CRL"
};
var _InvalidRevocationContentException = class _InvalidRevocationContentException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidRevocationContentException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidRevocationContentException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidRevocationContentException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidRevocationContentException, "InvalidRevocationContentException");
var InvalidRevocationContentException = _InvalidRevocationContentException;
var _RevocationContentNotFoundException = class _RevocationContentNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RevocationContentNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "RevocationContentNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RevocationContentNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_RevocationContentNotFoundException, "RevocationContentNotFoundException");
var RevocationContentNotFoundException = _RevocationContentNotFoundException;
var _TooManyTrustStoreRevocationEntriesException = class _TooManyTrustStoreRevocationEntriesException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyTrustStoreRevocationEntriesException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyTrustStoreRevocationEntriesException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyTrustStoreRevocationEntriesException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyTrustStoreRevocationEntriesException, "TooManyTrustStoreRevocationEntriesException");
var TooManyTrustStoreRevocationEntriesException = _TooManyTrustStoreRevocationEntriesException;
var _AllocationIdNotFoundException = class _AllocationIdNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AllocationIdNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "AllocationIdNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AllocationIdNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_AllocationIdNotFoundException, "AllocationIdNotFoundException");
var AllocationIdNotFoundException = _AllocationIdNotFoundException;
var _ALPNPolicyNotSupportedException = class _ALPNPolicyNotSupportedException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ALPNPolicyNotSupportedException",
      $fault: "client",
      ...opts
    });
    this.name = "ALPNPolicyNotSupportedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ALPNPolicyNotSupportedException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ALPNPolicyNotSupportedException, "ALPNPolicyNotSupportedException");
var ALPNPolicyNotSupportedException = _ALPNPolicyNotSupportedException;
var MitigationInEffectEnum = {
  NO: "no",
  YES: "yes"
};
var AnomalyResultEnum = {
  ANOMALOUS: "anomalous",
  NORMAL: "normal"
};
var _AvailabilityZoneNotSupportedException = class _AvailabilityZoneNotSupportedException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AvailabilityZoneNotSupportedException",
      $fault: "client",
      ...opts
    });
    this.name = "AvailabilityZoneNotSupportedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AvailabilityZoneNotSupportedException.prototype);
    this.Message = opts.Message;
  }
};
__name(_AvailabilityZoneNotSupportedException, "AvailabilityZoneNotSupportedException");
var AvailabilityZoneNotSupportedException = _AvailabilityZoneNotSupportedException;
var _CaCertificatesBundleNotFoundException = class _CaCertificatesBundleNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CaCertificatesBundleNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "CaCertificatesBundleNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _CaCertificatesBundleNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_CaCertificatesBundleNotFoundException, "CaCertificatesBundleNotFoundException");
var CaCertificatesBundleNotFoundException = _CaCertificatesBundleNotFoundException;
var ProtocolEnum = {
  GENEVE: "GENEVE",
  HTTP: "HTTP",
  HTTPS: "HTTPS",
  TCP: "TCP",
  TCP_UDP: "TCP_UDP",
  TLS: "TLS",
  UDP: "UDP"
};
var _DuplicateListenerException = class _DuplicateListenerException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DuplicateListenerException",
      $fault: "client",
      ...opts
    });
    this.name = "DuplicateListenerException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _DuplicateListenerException.prototype);
    this.Message = opts.Message;
  }
};
__name(_DuplicateListenerException, "DuplicateListenerException");
var DuplicateListenerException = _DuplicateListenerException;
var _IncompatibleProtocolsException = class _IncompatibleProtocolsException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "IncompatibleProtocolsException",
      $fault: "client",
      ...opts
    });
    this.name = "IncompatibleProtocolsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _IncompatibleProtocolsException.prototype);
    this.Message = opts.Message;
  }
};
__name(_IncompatibleProtocolsException, "IncompatibleProtocolsException");
var IncompatibleProtocolsException = _IncompatibleProtocolsException;
var _InvalidConfigurationRequestException = class _InvalidConfigurationRequestException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidConfigurationRequestException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidConfigurationRequestException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidConfigurationRequestException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidConfigurationRequestException, "InvalidConfigurationRequestException");
var InvalidConfigurationRequestException = _InvalidConfigurationRequestException;
var _InvalidLoadBalancerActionException = class _InvalidLoadBalancerActionException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidLoadBalancerActionException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidLoadBalancerActionException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidLoadBalancerActionException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidLoadBalancerActionException, "InvalidLoadBalancerActionException");
var InvalidLoadBalancerActionException = _InvalidLoadBalancerActionException;
var _SSLPolicyNotFoundException = class _SSLPolicyNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SSLPolicyNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "SSLPolicyNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _SSLPolicyNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_SSLPolicyNotFoundException, "SSLPolicyNotFoundException");
var SSLPolicyNotFoundException = _SSLPolicyNotFoundException;
var _TargetGroupAssociationLimitException = class _TargetGroupAssociationLimitException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TargetGroupAssociationLimitException",
      $fault: "client",
      ...opts
    });
    this.name = "TargetGroupAssociationLimitException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TargetGroupAssociationLimitException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TargetGroupAssociationLimitException, "TargetGroupAssociationLimitException");
var TargetGroupAssociationLimitException = _TargetGroupAssociationLimitException;
var _TooManyActionsException = class _TooManyActionsException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyActionsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyActionsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyActionsException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyActionsException, "TooManyActionsException");
var TooManyActionsException = _TooManyActionsException;
var _TooManyListenersException = class _TooManyListenersException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyListenersException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyListenersException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyListenersException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyListenersException, "TooManyListenersException");
var TooManyListenersException = _TooManyListenersException;
var _TooManyRegistrationsForTargetIdException = class _TooManyRegistrationsForTargetIdException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyRegistrationsForTargetIdException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyRegistrationsForTargetIdException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyRegistrationsForTargetIdException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyRegistrationsForTargetIdException, "TooManyRegistrationsForTargetIdException");
var TooManyRegistrationsForTargetIdException = _TooManyRegistrationsForTargetIdException;
var _TooManyTargetsException = class _TooManyTargetsException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyTargetsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyTargetsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyTargetsException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyTargetsException, "TooManyTargetsException");
var TooManyTargetsException = _TooManyTargetsException;
var _TooManyUniqueTargetGroupsPerLoadBalancerException = class _TooManyUniqueTargetGroupsPerLoadBalancerException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyUniqueTargetGroupsPerLoadBalancerException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyUniqueTargetGroupsPerLoadBalancerException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyUniqueTargetGroupsPerLoadBalancerException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyUniqueTargetGroupsPerLoadBalancerException, "TooManyUniqueTargetGroupsPerLoadBalancerException");
var TooManyUniqueTargetGroupsPerLoadBalancerException = _TooManyUniqueTargetGroupsPerLoadBalancerException;
var _TrustStoreNotReadyException = class _TrustStoreNotReadyException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TrustStoreNotReadyException",
      $fault: "client",
      ...opts
    });
    this.name = "TrustStoreNotReadyException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TrustStoreNotReadyException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TrustStoreNotReadyException, "TrustStoreNotReadyException");
var TrustStoreNotReadyException = _TrustStoreNotReadyException;
var _UnsupportedProtocolException = class _UnsupportedProtocolException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnsupportedProtocolException",
      $fault: "client",
      ...opts
    });
    this.name = "UnsupportedProtocolException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _UnsupportedProtocolException.prototype);
    this.Message = opts.Message;
  }
};
__name(_UnsupportedProtocolException, "UnsupportedProtocolException");
var UnsupportedProtocolException = _UnsupportedProtocolException;
var IpAddressType = {
  DUALSTACK: "dualstack",
  DUALSTACK_WITHOUT_PUBLIC_IPV4: "dualstack-without-public-ipv4",
  IPV4: "ipv4"
};
var LoadBalancerSchemeEnum = {
  INTERNAL: "internal",
  INTERNET_FACING: "internet-facing"
};
var LoadBalancerTypeEnum = {
  APPLICATION: "application",
  GATEWAY: "gateway",
  NETWORK: "network"
};
var LoadBalancerStateEnum = {
  ACTIVE: "active",
  ACTIVE_IMPAIRED: "active_impaired",
  FAILED: "failed",
  PROVISIONING: "provisioning"
};
var _DuplicateLoadBalancerNameException = class _DuplicateLoadBalancerNameException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DuplicateLoadBalancerNameException",
      $fault: "client",
      ...opts
    });
    this.name = "DuplicateLoadBalancerNameException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _DuplicateLoadBalancerNameException.prototype);
    this.Message = opts.Message;
  }
};
__name(_DuplicateLoadBalancerNameException, "DuplicateLoadBalancerNameException");
var DuplicateLoadBalancerNameException = _DuplicateLoadBalancerNameException;
var _InvalidSchemeException = class _InvalidSchemeException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidSchemeException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidSchemeException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidSchemeException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidSchemeException, "InvalidSchemeException");
var InvalidSchemeException = _InvalidSchemeException;
var _InvalidSecurityGroupException = class _InvalidSecurityGroupException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidSecurityGroupException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidSecurityGroupException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidSecurityGroupException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidSecurityGroupException, "InvalidSecurityGroupException");
var InvalidSecurityGroupException = _InvalidSecurityGroupException;
var _InvalidSubnetException = class _InvalidSubnetException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidSubnetException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidSubnetException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidSubnetException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidSubnetException, "InvalidSubnetException");
var InvalidSubnetException = _InvalidSubnetException;
var _OperationNotPermittedException = class _OperationNotPermittedException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "OperationNotPermittedException",
      $fault: "client",
      ...opts
    });
    this.name = "OperationNotPermittedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _OperationNotPermittedException.prototype);
    this.Message = opts.Message;
  }
};
__name(_OperationNotPermittedException, "OperationNotPermittedException");
var OperationNotPermittedException = _OperationNotPermittedException;
var _ResourceInUseException = class _ResourceInUseException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceInUseException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceInUseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceInUseException.prototype);
    this.Message = opts.Message;
  }
};
__name(_ResourceInUseException, "ResourceInUseException");
var ResourceInUseException = _ResourceInUseException;
var _SubnetNotFoundException = class _SubnetNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "SubnetNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "SubnetNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _SubnetNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_SubnetNotFoundException, "SubnetNotFoundException");
var SubnetNotFoundException = _SubnetNotFoundException;
var _TooManyLoadBalancersException = class _TooManyLoadBalancersException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyLoadBalancersException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyLoadBalancersException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyLoadBalancersException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyLoadBalancersException, "TooManyLoadBalancersException");
var TooManyLoadBalancersException = _TooManyLoadBalancersException;
var _PriorityInUseException = class _PriorityInUseException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "PriorityInUseException",
      $fault: "client",
      ...opts
    });
    this.name = "PriorityInUseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _PriorityInUseException.prototype);
    this.Message = opts.Message;
  }
};
__name(_PriorityInUseException, "PriorityInUseException");
var PriorityInUseException = _PriorityInUseException;
var _TooManyRulesException = class _TooManyRulesException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyRulesException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyRulesException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyRulesException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyRulesException, "TooManyRulesException");
var TooManyRulesException = _TooManyRulesException;
var _TooManyTargetGroupsException = class _TooManyTargetGroupsException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyTargetGroupsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyTargetGroupsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyTargetGroupsException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyTargetGroupsException, "TooManyTargetGroupsException");
var TooManyTargetGroupsException = _TooManyTargetGroupsException;
var TargetGroupIpAddressTypeEnum = {
  IPV4: "ipv4",
  IPV6: "ipv6"
};
var TargetTypeEnum = {
  ALB: "alb",
  INSTANCE: "instance",
  IP: "ip",
  LAMBDA: "lambda"
};
var _DuplicateTargetGroupNameException = class _DuplicateTargetGroupNameException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DuplicateTargetGroupNameException",
      $fault: "client",
      ...opts
    });
    this.name = "DuplicateTargetGroupNameException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _DuplicateTargetGroupNameException.prototype);
    this.Message = opts.Message;
  }
};
__name(_DuplicateTargetGroupNameException, "DuplicateTargetGroupNameException");
var DuplicateTargetGroupNameException = _DuplicateTargetGroupNameException;
var TrustStoreStatus = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING"
};
var _DuplicateTrustStoreNameException = class _DuplicateTrustStoreNameException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "DuplicateTrustStoreNameException",
      $fault: "client",
      ...opts
    });
    this.name = "DuplicateTrustStoreNameException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _DuplicateTrustStoreNameException.prototype);
    this.Message = opts.Message;
  }
};
__name(_DuplicateTrustStoreNameException, "DuplicateTrustStoreNameException");
var DuplicateTrustStoreNameException = _DuplicateTrustStoreNameException;
var _InvalidCaCertificatesBundleException = class _InvalidCaCertificatesBundleException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidCaCertificatesBundleException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidCaCertificatesBundleException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidCaCertificatesBundleException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidCaCertificatesBundleException, "InvalidCaCertificatesBundleException");
var InvalidCaCertificatesBundleException = _InvalidCaCertificatesBundleException;
var _TooManyTrustStoresException = class _TooManyTrustStoresException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyTrustStoresException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyTrustStoresException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyTrustStoresException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TooManyTrustStoresException, "TooManyTrustStoresException");
var TooManyTrustStoresException = _TooManyTrustStoresException;
var _TrustStoreInUseException = class _TrustStoreInUseException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TrustStoreInUseException",
      $fault: "client",
      ...opts
    });
    this.name = "TrustStoreInUseException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TrustStoreInUseException.prototype);
    this.Message = opts.Message;
  }
};
__name(_TrustStoreInUseException, "TrustStoreInUseException");
var TrustStoreInUseException = _TrustStoreInUseException;
var _InvalidTargetException = class _InvalidTargetException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidTargetException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidTargetException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidTargetException.prototype);
    this.Message = opts.Message;
  }
};
__name(_InvalidTargetException, "InvalidTargetException");
var InvalidTargetException = _InvalidTargetException;
var DescribeTargetHealthInputIncludeEnum = {
  ALL: "All",
  ANOMALY: "AnomalyDetection"
};
var TargetHealthReasonEnum = {
  DEREGISTRATION_IN_PROGRESS: "Target.DeregistrationInProgress",
  FAILED_HEALTH_CHECKS: "Target.FailedHealthChecks",
  HEALTH_CHECK_DISABLED: "Target.HealthCheckDisabled",
  INITIAL_HEALTH_CHECKING: "Elb.InitialHealthChecking",
  INTERNAL_ERROR: "Elb.InternalError",
  INVALID_STATE: "Target.InvalidState",
  IP_UNUSABLE: "Target.IpUnusable",
  NOT_IN_USE: "Target.NotInUse",
  NOT_REGISTERED: "Target.NotRegistered",
  REGISTRATION_IN_PROGRESS: "Elb.RegistrationInProgress",
  RESPONSE_CODE_MISMATCH: "Target.ResponseCodeMismatch",
  TIMEOUT: "Target.Timeout"
};
var TargetHealthStateEnum = {
  DRAINING: "draining",
  HEALTHY: "healthy",
  INITIAL: "initial",
  UNAVAILABLE: "unavailable",
  UNHEALTHY: "unhealthy",
  UNHEALTHY_DRAINING: "unhealthy.draining",
  UNUSED: "unused"
};
var _HealthUnavailableException = class _HealthUnavailableException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "HealthUnavailableException",
      $fault: "server",
      ...opts
    });
    this.name = "HealthUnavailableException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _HealthUnavailableException.prototype);
    this.Message = opts.Message;
  }
};
__name(_HealthUnavailableException, "HealthUnavailableException");
var HealthUnavailableException = _HealthUnavailableException;
var _RevocationIdNotFoundException = class _RevocationIdNotFoundException extends ElasticLoadBalancingV2ServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RevocationIdNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "RevocationIdNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RevocationIdNotFoundException.prototype);
    this.Message = opts.Message;
  }
};
__name(_RevocationIdNotFoundException, "RevocationIdNotFoundException");
var RevocationIdNotFoundException = _RevocationIdNotFoundException;
var EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum = {
  off: "off",
  on: "on"
};

// src/protocols/Aws_query.ts
var se_AddListenerCertificatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AddListenerCertificatesInput(input, context),
    [_A]: _ALC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AddListenerCertificatesCommand");
var se_AddTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AddTagsInput(input, context),
    [_A]: _AT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AddTagsCommand");
var se_AddTrustStoreRevocationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_AddTrustStoreRevocationsInput(input, context),
    [_A]: _ATSR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_AddTrustStoreRevocationsCommand");
var se_CreateListenerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateListenerInput(input, context),
    [_A]: _CL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateListenerCommand");
var se_CreateLoadBalancerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateLoadBalancerInput(input, context),
    [_A]: _CLB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateLoadBalancerCommand");
var se_CreateRuleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateRuleInput(input, context),
    [_A]: _CR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateRuleCommand");
var se_CreateTargetGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTargetGroupInput(input, context),
    [_A]: _CTG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateTargetGroupCommand");
var se_CreateTrustStoreCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_CreateTrustStoreInput(input, context),
    [_A]: _CTS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateTrustStoreCommand");
var se_DeleteListenerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteListenerInput(input, context),
    [_A]: _DL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteListenerCommand");
var se_DeleteLoadBalancerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteLoadBalancerInput(input, context),
    [_A]: _DLB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteLoadBalancerCommand");
var se_DeleteRuleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteRuleInput(input, context),
    [_A]: _DR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteRuleCommand");
var se_DeleteTargetGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTargetGroupInput(input, context),
    [_A]: _DTG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteTargetGroupCommand");
var se_DeleteTrustStoreCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeleteTrustStoreInput(input, context),
    [_A]: _DTS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteTrustStoreCommand");
var se_DeregisterTargetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DeregisterTargetsInput(input, context),
    [_A]: _DT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeregisterTargetsCommand");
var se_DescribeAccountLimitsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeAccountLimitsInput(input, context),
    [_A]: _DAL,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeAccountLimitsCommand");
var se_DescribeListenerCertificatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeListenerCertificatesInput(input, context),
    [_A]: _DLC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeListenerCertificatesCommand");
var se_DescribeListenersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeListenersInput(input, context),
    [_A]: _DLe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeListenersCommand");
var se_DescribeLoadBalancerAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLoadBalancerAttributesInput(input, context),
    [_A]: _DLBA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeLoadBalancerAttributesCommand");
var se_DescribeLoadBalancersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeLoadBalancersInput(input, context),
    [_A]: _DLBe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeLoadBalancersCommand");
var se_DescribeRulesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeRulesInput(input, context),
    [_A]: _DRe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeRulesCommand");
var se_DescribeSSLPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeSSLPoliciesInput(input, context),
    [_A]: _DSSLP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeSSLPoliciesCommand");
var se_DescribeTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTagsInput(input, context),
    [_A]: _DTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTagsCommand");
var se_DescribeTargetGroupAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTargetGroupAttributesInput(input, context),
    [_A]: _DTGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTargetGroupAttributesCommand");
var se_DescribeTargetGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTargetGroupsInput(input, context),
    [_A]: _DTGe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTargetGroupsCommand");
var se_DescribeTargetHealthCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTargetHealthInput(input, context),
    [_A]: _DTH,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTargetHealthCommand");
var se_DescribeTrustStoreAssociationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTrustStoreAssociationsInput(input, context),
    [_A]: _DTSA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTrustStoreAssociationsCommand");
var se_DescribeTrustStoreRevocationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTrustStoreRevocationsInput(input, context),
    [_A]: _DTSR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTrustStoreRevocationsCommand");
var se_DescribeTrustStoresCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_DescribeTrustStoresInput(input, context),
    [_A]: _DTSe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeTrustStoresCommand");
var se_GetTrustStoreCaCertificatesBundleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetTrustStoreCaCertificatesBundleInput(input, context),
    [_A]: _GTSCCB,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetTrustStoreCaCertificatesBundleCommand");
var se_GetTrustStoreRevocationContentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_GetTrustStoreRevocationContentInput(input, context),
    [_A]: _GTSRC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetTrustStoreRevocationContentCommand");
var se_ModifyListenerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyListenerInput(input, context),
    [_A]: _ML,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyListenerCommand");
var se_ModifyLoadBalancerAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyLoadBalancerAttributesInput(input, context),
    [_A]: _MLBA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyLoadBalancerAttributesCommand");
var se_ModifyRuleCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyRuleInput(input, context),
    [_A]: _MR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyRuleCommand");
var se_ModifyTargetGroupCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyTargetGroupInput(input, context),
    [_A]: _MTG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyTargetGroupCommand");
var se_ModifyTargetGroupAttributesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyTargetGroupAttributesInput(input, context),
    [_A]: _MTGA,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyTargetGroupAttributesCommand");
var se_ModifyTrustStoreCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_ModifyTrustStoreInput(input, context),
    [_A]: _MTS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ModifyTrustStoreCommand");
var se_RegisterTargetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RegisterTargetsInput(input, context),
    [_A]: _RT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RegisterTargetsCommand");
var se_RemoveListenerCertificatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveListenerCertificatesInput(input, context),
    [_A]: _RLC,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RemoveListenerCertificatesCommand");
var se_RemoveTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveTagsInput(input, context),
    [_A]: _RTe,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RemoveTagsCommand");
var se_RemoveTrustStoreRevocationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_RemoveTrustStoreRevocationsInput(input, context),
    [_A]: _RTSR,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_RemoveTrustStoreRevocationsCommand");
var se_SetIpAddressTypeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SetIpAddressTypeInput(input, context),
    [_A]: _SIAT,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SetIpAddressTypeCommand");
var se_SetRulePrioritiesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SetRulePrioritiesInput(input, context),
    [_A]: _SRP,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SetRulePrioritiesCommand");
var se_SetSecurityGroupsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SetSecurityGroupsInput(input, context),
    [_A]: _SSG,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SetSecurityGroupsCommand");
var se_SetSubnetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = SHARED_HEADERS;
  let body;
  body = buildFormUrlencodedString({
    ...se_SetSubnetsInput(input, context),
    [_A]: _SS,
    [_V]: _
  });
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SetSubnetsCommand");
var de_AddListenerCertificatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AddListenerCertificatesOutput(data.AddListenerCertificatesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_AddListenerCertificatesCommand");
var de_AddTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AddTagsOutput(data.AddTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_AddTagsCommand");
var de_AddTrustStoreRevocationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_AddTrustStoreRevocationsOutput(data.AddTrustStoreRevocationsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_AddTrustStoreRevocationsCommand");
var de_CreateListenerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateListenerOutput(data.CreateListenerResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateListenerCommand");
var de_CreateLoadBalancerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateLoadBalancerOutput(data.CreateLoadBalancerResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateLoadBalancerCommand");
var de_CreateRuleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateRuleOutput(data.CreateRuleResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateRuleCommand");
var de_CreateTargetGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateTargetGroupOutput(data.CreateTargetGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateTargetGroupCommand");
var de_CreateTrustStoreCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_CreateTrustStoreOutput(data.CreateTrustStoreResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateTrustStoreCommand");
var de_DeleteListenerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteListenerOutput(data.DeleteListenerResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteListenerCommand");
var de_DeleteLoadBalancerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteLoadBalancerOutput(data.DeleteLoadBalancerResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteLoadBalancerCommand");
var de_DeleteRuleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteRuleOutput(data.DeleteRuleResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteRuleCommand");
var de_DeleteTargetGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteTargetGroupOutput(data.DeleteTargetGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteTargetGroupCommand");
var de_DeleteTrustStoreCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeleteTrustStoreOutput(data.DeleteTrustStoreResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteTrustStoreCommand");
var de_DeregisterTargetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DeregisterTargetsOutput(data.DeregisterTargetsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeregisterTargetsCommand");
var de_DescribeAccountLimitsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeAccountLimitsOutput(data.DescribeAccountLimitsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeAccountLimitsCommand");
var de_DescribeListenerCertificatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeListenerCertificatesOutput(data.DescribeListenerCertificatesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeListenerCertificatesCommand");
var de_DescribeListenersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeListenersOutput(data.DescribeListenersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeListenersCommand");
var de_DescribeLoadBalancerAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeLoadBalancerAttributesOutput(data.DescribeLoadBalancerAttributesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeLoadBalancerAttributesCommand");
var de_DescribeLoadBalancersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeLoadBalancersOutput(data.DescribeLoadBalancersResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeLoadBalancersCommand");
var de_DescribeRulesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeRulesOutput(data.DescribeRulesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeRulesCommand");
var de_DescribeSSLPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeSSLPoliciesOutput(data.DescribeSSLPoliciesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeSSLPoliciesCommand");
var de_DescribeTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeTagsOutput(data.DescribeTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTagsCommand");
var de_DescribeTargetGroupAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeTargetGroupAttributesOutput(data.DescribeTargetGroupAttributesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTargetGroupAttributesCommand");
var de_DescribeTargetGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeTargetGroupsOutput(data.DescribeTargetGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTargetGroupsCommand");
var de_DescribeTargetHealthCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeTargetHealthOutput(data.DescribeTargetHealthResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTargetHealthCommand");
var de_DescribeTrustStoreAssociationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeTrustStoreAssociationsOutput(data.DescribeTrustStoreAssociationsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTrustStoreAssociationsCommand");
var de_DescribeTrustStoreRevocationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeTrustStoreRevocationsOutput(data.DescribeTrustStoreRevocationsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTrustStoreRevocationsCommand");
var de_DescribeTrustStoresCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_DescribeTrustStoresOutput(data.DescribeTrustStoresResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeTrustStoresCommand");
var de_GetTrustStoreCaCertificatesBundleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_GetTrustStoreCaCertificatesBundleOutput(data.GetTrustStoreCaCertificatesBundleResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetTrustStoreCaCertificatesBundleCommand");
var de_GetTrustStoreRevocationContentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_GetTrustStoreRevocationContentOutput(data.GetTrustStoreRevocationContentResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetTrustStoreRevocationContentCommand");
var de_ModifyListenerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyListenerOutput(data.ModifyListenerResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyListenerCommand");
var de_ModifyLoadBalancerAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyLoadBalancerAttributesOutput(data.ModifyLoadBalancerAttributesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyLoadBalancerAttributesCommand");
var de_ModifyRuleCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyRuleOutput(data.ModifyRuleResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyRuleCommand");
var de_ModifyTargetGroupCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyTargetGroupOutput(data.ModifyTargetGroupResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyTargetGroupCommand");
var de_ModifyTargetGroupAttributesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyTargetGroupAttributesOutput(data.ModifyTargetGroupAttributesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyTargetGroupAttributesCommand");
var de_ModifyTrustStoreCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_ModifyTrustStoreOutput(data.ModifyTrustStoreResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ModifyTrustStoreCommand");
var de_RegisterTargetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RegisterTargetsOutput(data.RegisterTargetsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RegisterTargetsCommand");
var de_RemoveListenerCertificatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RemoveListenerCertificatesOutput(data.RemoveListenerCertificatesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RemoveListenerCertificatesCommand");
var de_RemoveTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RemoveTagsOutput(data.RemoveTagsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RemoveTagsCommand");
var de_RemoveTrustStoreRevocationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_RemoveTrustStoreRevocationsOutput(data.RemoveTrustStoreRevocationsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_RemoveTrustStoreRevocationsCommand");
var de_SetIpAddressTypeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_SetIpAddressTypeOutput(data.SetIpAddressTypeResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_SetIpAddressTypeCommand");
var de_SetRulePrioritiesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_SetRulePrioritiesOutput(data.SetRulePrioritiesResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_SetRulePrioritiesCommand");
var de_SetSecurityGroupsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_SetSecurityGroupsOutput(data.SetSecurityGroupsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_SetSecurityGroupsCommand");
var de_SetSubnetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseXmlBody)(output.body, context);
  let contents = {};
  contents = de_SetSubnetsOutput(data.SetSubnetsResult, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_SetSubnetsCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseXmlErrorBody)(output.body, context)
  };
  const errorCode = loadQueryErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "CertificateNotFound":
    case "com.amazonaws.elasticloadbalancingv2#CertificateNotFoundException":
      throw await de_CertificateNotFoundExceptionRes(parsedOutput, context);
    case "ListenerNotFound":
    case "com.amazonaws.elasticloadbalancingv2#ListenerNotFoundException":
      throw await de_ListenerNotFoundExceptionRes(parsedOutput, context);
    case "TooManyCertificates":
    case "com.amazonaws.elasticloadbalancingv2#TooManyCertificatesException":
      throw await de_TooManyCertificatesExceptionRes(parsedOutput, context);
    case "DuplicateTagKeys":
    case "com.amazonaws.elasticloadbalancingv2#DuplicateTagKeysException":
      throw await de_DuplicateTagKeysExceptionRes(parsedOutput, context);
    case "LoadBalancerNotFound":
    case "com.amazonaws.elasticloadbalancingv2#LoadBalancerNotFoundException":
      throw await de_LoadBalancerNotFoundExceptionRes(parsedOutput, context);
    case "RuleNotFound":
    case "com.amazonaws.elasticloadbalancingv2#RuleNotFoundException":
      throw await de_RuleNotFoundExceptionRes(parsedOutput, context);
    case "TargetGroupNotFound":
    case "com.amazonaws.elasticloadbalancingv2#TargetGroupNotFoundException":
      throw await de_TargetGroupNotFoundExceptionRes(parsedOutput, context);
    case "TooManyTags":
    case "com.amazonaws.elasticloadbalancingv2#TooManyTagsException":
      throw await de_TooManyTagsExceptionRes(parsedOutput, context);
    case "TrustStoreNotFound":
    case "com.amazonaws.elasticloadbalancingv2#TrustStoreNotFoundException":
      throw await de_TrustStoreNotFoundExceptionRes(parsedOutput, context);
    case "InvalidRevocationContent":
    case "com.amazonaws.elasticloadbalancingv2#InvalidRevocationContentException":
      throw await de_InvalidRevocationContentExceptionRes(parsedOutput, context);
    case "RevocationContentNotFound":
    case "com.amazonaws.elasticloadbalancingv2#RevocationContentNotFoundException":
      throw await de_RevocationContentNotFoundExceptionRes(parsedOutput, context);
    case "TooManyTrustStoreRevocationEntries":
    case "com.amazonaws.elasticloadbalancingv2#TooManyTrustStoreRevocationEntriesException":
      throw await de_TooManyTrustStoreRevocationEntriesExceptionRes(parsedOutput, context);
    case "ALPNPolicyNotFound":
    case "com.amazonaws.elasticloadbalancingv2#ALPNPolicyNotSupportedException":
      throw await de_ALPNPolicyNotSupportedExceptionRes(parsedOutput, context);
    case "DuplicateListener":
    case "com.amazonaws.elasticloadbalancingv2#DuplicateListenerException":
      throw await de_DuplicateListenerExceptionRes(parsedOutput, context);
    case "IncompatibleProtocols":
    case "com.amazonaws.elasticloadbalancingv2#IncompatibleProtocolsException":
      throw await de_IncompatibleProtocolsExceptionRes(parsedOutput, context);
    case "InvalidConfigurationRequest":
    case "com.amazonaws.elasticloadbalancingv2#InvalidConfigurationRequestException":
      throw await de_InvalidConfigurationRequestExceptionRes(parsedOutput, context);
    case "InvalidLoadBalancerAction":
    case "com.amazonaws.elasticloadbalancingv2#InvalidLoadBalancerActionException":
      throw await de_InvalidLoadBalancerActionExceptionRes(parsedOutput, context);
    case "SSLPolicyNotFound":
    case "com.amazonaws.elasticloadbalancingv2#SSLPolicyNotFoundException":
      throw await de_SSLPolicyNotFoundExceptionRes(parsedOutput, context);
    case "TargetGroupAssociationLimit":
    case "com.amazonaws.elasticloadbalancingv2#TargetGroupAssociationLimitException":
      throw await de_TargetGroupAssociationLimitExceptionRes(parsedOutput, context);
    case "TooManyActions":
    case "com.amazonaws.elasticloadbalancingv2#TooManyActionsException":
      throw await de_TooManyActionsExceptionRes(parsedOutput, context);
    case "TooManyListeners":
    case "com.amazonaws.elasticloadbalancingv2#TooManyListenersException":
      throw await de_TooManyListenersExceptionRes(parsedOutput, context);
    case "TooManyRegistrationsForTargetId":
    case "com.amazonaws.elasticloadbalancingv2#TooManyRegistrationsForTargetIdException":
      throw await de_TooManyRegistrationsForTargetIdExceptionRes(parsedOutput, context);
    case "TooManyTargets":
    case "com.amazonaws.elasticloadbalancingv2#TooManyTargetsException":
      throw await de_TooManyTargetsExceptionRes(parsedOutput, context);
    case "TooManyUniqueTargetGroupsPerLoadBalancer":
    case "com.amazonaws.elasticloadbalancingv2#TooManyUniqueTargetGroupsPerLoadBalancerException":
      throw await de_TooManyUniqueTargetGroupsPerLoadBalancerExceptionRes(parsedOutput, context);
    case "TrustStoreNotReady":
    case "com.amazonaws.elasticloadbalancingv2#TrustStoreNotReadyException":
      throw await de_TrustStoreNotReadyExceptionRes(parsedOutput, context);
    case "UnsupportedProtocol":
    case "com.amazonaws.elasticloadbalancingv2#UnsupportedProtocolException":
      throw await de_UnsupportedProtocolExceptionRes(parsedOutput, context);
    case "AllocationIdNotFound":
    case "com.amazonaws.elasticloadbalancingv2#AllocationIdNotFoundException":
      throw await de_AllocationIdNotFoundExceptionRes(parsedOutput, context);
    case "AvailabilityZoneNotSupported":
    case "com.amazonaws.elasticloadbalancingv2#AvailabilityZoneNotSupportedException":
      throw await de_AvailabilityZoneNotSupportedExceptionRes(parsedOutput, context);
    case "DuplicateLoadBalancerName":
    case "com.amazonaws.elasticloadbalancingv2#DuplicateLoadBalancerNameException":
      throw await de_DuplicateLoadBalancerNameExceptionRes(parsedOutput, context);
    case "InvalidScheme":
    case "com.amazonaws.elasticloadbalancingv2#InvalidSchemeException":
      throw await de_InvalidSchemeExceptionRes(parsedOutput, context);
    case "InvalidSecurityGroup":
    case "com.amazonaws.elasticloadbalancingv2#InvalidSecurityGroupException":
      throw await de_InvalidSecurityGroupExceptionRes(parsedOutput, context);
    case "InvalidSubnet":
    case "com.amazonaws.elasticloadbalancingv2#InvalidSubnetException":
      throw await de_InvalidSubnetExceptionRes(parsedOutput, context);
    case "OperationNotPermitted":
    case "com.amazonaws.elasticloadbalancingv2#OperationNotPermittedException":
      throw await de_OperationNotPermittedExceptionRes(parsedOutput, context);
    case "ResourceInUse":
    case "com.amazonaws.elasticloadbalancingv2#ResourceInUseException":
      throw await de_ResourceInUseExceptionRes(parsedOutput, context);
    case "SubnetNotFound":
    case "com.amazonaws.elasticloadbalancingv2#SubnetNotFoundException":
      throw await de_SubnetNotFoundExceptionRes(parsedOutput, context);
    case "TooManyLoadBalancers":
    case "com.amazonaws.elasticloadbalancingv2#TooManyLoadBalancersException":
      throw await de_TooManyLoadBalancersExceptionRes(parsedOutput, context);
    case "PriorityInUse":
    case "com.amazonaws.elasticloadbalancingv2#PriorityInUseException":
      throw await de_PriorityInUseExceptionRes(parsedOutput, context);
    case "TooManyRules":
    case "com.amazonaws.elasticloadbalancingv2#TooManyRulesException":
      throw await de_TooManyRulesExceptionRes(parsedOutput, context);
    case "TooManyTargetGroups":
    case "com.amazonaws.elasticloadbalancingv2#TooManyTargetGroupsException":
      throw await de_TooManyTargetGroupsExceptionRes(parsedOutput, context);
    case "DuplicateTargetGroupName":
    case "com.amazonaws.elasticloadbalancingv2#DuplicateTargetGroupNameException":
      throw await de_DuplicateTargetGroupNameExceptionRes(parsedOutput, context);
    case "CaCertificatesBundleNotFound":
    case "com.amazonaws.elasticloadbalancingv2#CaCertificatesBundleNotFoundException":
      throw await de_CaCertificatesBundleNotFoundExceptionRes(parsedOutput, context);
    case "DuplicateTrustStoreName":
    case "com.amazonaws.elasticloadbalancingv2#DuplicateTrustStoreNameException":
      throw await de_DuplicateTrustStoreNameExceptionRes(parsedOutput, context);
    case "InvalidCaCertificatesBundle":
    case "com.amazonaws.elasticloadbalancingv2#InvalidCaCertificatesBundleException":
      throw await de_InvalidCaCertificatesBundleExceptionRes(parsedOutput, context);
    case "TooManyTrustStores":
    case "com.amazonaws.elasticloadbalancingv2#TooManyTrustStoresException":
      throw await de_TooManyTrustStoresExceptionRes(parsedOutput, context);
    case "TrustStoreInUse":
    case "com.amazonaws.elasticloadbalancingv2#TrustStoreInUseException":
      throw await de_TrustStoreInUseExceptionRes(parsedOutput, context);
    case "InvalidTarget":
    case "com.amazonaws.elasticloadbalancingv2#InvalidTargetException":
      throw await de_InvalidTargetExceptionRes(parsedOutput, context);
    case "HealthUnavailable":
    case "com.amazonaws.elasticloadbalancingv2#HealthUnavailableException":
      throw await de_HealthUnavailableExceptionRes(parsedOutput, context);
    case "RevocationIdNotFound":
    case "com.amazonaws.elasticloadbalancingv2#RevocationIdNotFoundException":
      throw await de_RevocationIdNotFoundExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        errorCode
      });
  }
}, "de_CommandError");
var de_AllocationIdNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_AllocationIdNotFoundException(body.Error, context);
  const exception = new AllocationIdNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_AllocationIdNotFoundExceptionRes");
var de_ALPNPolicyNotSupportedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ALPNPolicyNotSupportedException(body.Error, context);
  const exception = new ALPNPolicyNotSupportedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ALPNPolicyNotSupportedExceptionRes");
var de_AvailabilityZoneNotSupportedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_AvailabilityZoneNotSupportedException(body.Error, context);
  const exception = new AvailabilityZoneNotSupportedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_AvailabilityZoneNotSupportedExceptionRes");
var de_CaCertificatesBundleNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CaCertificatesBundleNotFoundException(body.Error, context);
  const exception = new CaCertificatesBundleNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CaCertificatesBundleNotFoundExceptionRes");
var de_CertificateNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_CertificateNotFoundException(body.Error, context);
  const exception = new CertificateNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_CertificateNotFoundExceptionRes");
var de_DuplicateListenerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DuplicateListenerException(body.Error, context);
  const exception = new DuplicateListenerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DuplicateListenerExceptionRes");
var de_DuplicateLoadBalancerNameExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DuplicateLoadBalancerNameException(body.Error, context);
  const exception = new DuplicateLoadBalancerNameException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DuplicateLoadBalancerNameExceptionRes");
var de_DuplicateTagKeysExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DuplicateTagKeysException(body.Error, context);
  const exception = new DuplicateTagKeysException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DuplicateTagKeysExceptionRes");
var de_DuplicateTargetGroupNameExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DuplicateTargetGroupNameException(body.Error, context);
  const exception = new DuplicateTargetGroupNameException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DuplicateTargetGroupNameExceptionRes");
var de_DuplicateTrustStoreNameExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_DuplicateTrustStoreNameException(body.Error, context);
  const exception = new DuplicateTrustStoreNameException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_DuplicateTrustStoreNameExceptionRes");
var de_HealthUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_HealthUnavailableException(body.Error, context);
  const exception = new HealthUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_HealthUnavailableExceptionRes");
var de_IncompatibleProtocolsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_IncompatibleProtocolsException(body.Error, context);
  const exception = new IncompatibleProtocolsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_IncompatibleProtocolsExceptionRes");
var de_InvalidCaCertificatesBundleExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidCaCertificatesBundleException(body.Error, context);
  const exception = new InvalidCaCertificatesBundleException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidCaCertificatesBundleExceptionRes");
var de_InvalidConfigurationRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidConfigurationRequestException(body.Error, context);
  const exception = new InvalidConfigurationRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidConfigurationRequestExceptionRes");
var de_InvalidLoadBalancerActionExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidLoadBalancerActionException(body.Error, context);
  const exception = new InvalidLoadBalancerActionException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidLoadBalancerActionExceptionRes");
var de_InvalidRevocationContentExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidRevocationContentException(body.Error, context);
  const exception = new InvalidRevocationContentException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidRevocationContentExceptionRes");
var de_InvalidSchemeExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidSchemeException(body.Error, context);
  const exception = new InvalidSchemeException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidSchemeExceptionRes");
var de_InvalidSecurityGroupExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidSecurityGroupException(body.Error, context);
  const exception = new InvalidSecurityGroupException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidSecurityGroupExceptionRes");
var de_InvalidSubnetExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidSubnetException(body.Error, context);
  const exception = new InvalidSubnetException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidSubnetExceptionRes");
var de_InvalidTargetExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_InvalidTargetException(body.Error, context);
  const exception = new InvalidTargetException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidTargetExceptionRes");
var de_ListenerNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ListenerNotFoundException(body.Error, context);
  const exception = new ListenerNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ListenerNotFoundExceptionRes");
var de_LoadBalancerNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_LoadBalancerNotFoundException(body.Error, context);
  const exception = new LoadBalancerNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_LoadBalancerNotFoundExceptionRes");
var de_OperationNotPermittedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_OperationNotPermittedException(body.Error, context);
  const exception = new OperationNotPermittedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_OperationNotPermittedExceptionRes");
var de_PriorityInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_PriorityInUseException(body.Error, context);
  const exception = new PriorityInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_PriorityInUseExceptionRes");
var de_ResourceInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_ResourceInUseException(body.Error, context);
  const exception = new ResourceInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ResourceInUseExceptionRes");
var de_RevocationContentNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_RevocationContentNotFoundException(body.Error, context);
  const exception = new RevocationContentNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_RevocationContentNotFoundExceptionRes");
var de_RevocationIdNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_RevocationIdNotFoundException(body.Error, context);
  const exception = new RevocationIdNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_RevocationIdNotFoundExceptionRes");
var de_RuleNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_RuleNotFoundException(body.Error, context);
  const exception = new RuleNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_RuleNotFoundExceptionRes");
var de_SSLPolicyNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SSLPolicyNotFoundException(body.Error, context);
  const exception = new SSLPolicyNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SSLPolicyNotFoundExceptionRes");
var de_SubnetNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_SubnetNotFoundException(body.Error, context);
  const exception = new SubnetNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_SubnetNotFoundExceptionRes");
var de_TargetGroupAssociationLimitExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TargetGroupAssociationLimitException(body.Error, context);
  const exception = new TargetGroupAssociationLimitException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TargetGroupAssociationLimitExceptionRes");
var de_TargetGroupNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TargetGroupNotFoundException(body.Error, context);
  const exception = new TargetGroupNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TargetGroupNotFoundExceptionRes");
var de_TooManyActionsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyActionsException(body.Error, context);
  const exception = new TooManyActionsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyActionsExceptionRes");
var de_TooManyCertificatesExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyCertificatesException(body.Error, context);
  const exception = new TooManyCertificatesException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyCertificatesExceptionRes");
var de_TooManyListenersExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyListenersException(body.Error, context);
  const exception = new TooManyListenersException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyListenersExceptionRes");
var de_TooManyLoadBalancersExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyLoadBalancersException(body.Error, context);
  const exception = new TooManyLoadBalancersException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyLoadBalancersExceptionRes");
var de_TooManyRegistrationsForTargetIdExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyRegistrationsForTargetIdException(body.Error, context);
  const exception = new TooManyRegistrationsForTargetIdException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyRegistrationsForTargetIdExceptionRes");
var de_TooManyRulesExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyRulesException(body.Error, context);
  const exception = new TooManyRulesException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyRulesExceptionRes");
var de_TooManyTagsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyTagsException(body.Error, context);
  const exception = new TooManyTagsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyTagsExceptionRes");
var de_TooManyTargetGroupsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyTargetGroupsException(body.Error, context);
  const exception = new TooManyTargetGroupsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyTargetGroupsExceptionRes");
var de_TooManyTargetsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyTargetsException(body.Error, context);
  const exception = new TooManyTargetsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyTargetsExceptionRes");
var de_TooManyTrustStoreRevocationEntriesExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyTrustStoreRevocationEntriesException(body.Error, context);
  const exception = new TooManyTrustStoreRevocationEntriesException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyTrustStoreRevocationEntriesExceptionRes");
var de_TooManyTrustStoresExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyTrustStoresException(body.Error, context);
  const exception = new TooManyTrustStoresException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyTrustStoresExceptionRes");
var de_TooManyUniqueTargetGroupsPerLoadBalancerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TooManyUniqueTargetGroupsPerLoadBalancerException(body.Error, context);
  const exception = new TooManyUniqueTargetGroupsPerLoadBalancerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyUniqueTargetGroupsPerLoadBalancerExceptionRes");
var de_TrustStoreInUseExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TrustStoreInUseException(body.Error, context);
  const exception = new TrustStoreInUseException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TrustStoreInUseExceptionRes");
var de_TrustStoreNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TrustStoreNotFoundException(body.Error, context);
  const exception = new TrustStoreNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TrustStoreNotFoundExceptionRes");
var de_TrustStoreNotReadyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_TrustStoreNotReadyException(body.Error, context);
  const exception = new TrustStoreNotReadyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TrustStoreNotReadyExceptionRes");
var de_UnsupportedProtocolExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = de_UnsupportedProtocolException(body.Error, context);
  const exception = new UnsupportedProtocolException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UnsupportedProtocolExceptionRes");
var se_Action = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  if (input[_AOC] != null) {
    const memberEntries = se_AuthenticateOidcActionConfig(input[_AOC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AuthenticateOidcConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ACC] != null) {
    const memberEntries = se_AuthenticateCognitoActionConfig(input[_ACC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AuthenticateCognitoConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_O] != null) {
    entries[_O] = input[_O];
  }
  if (input[_RC] != null) {
    const memberEntries = se_RedirectActionConfig(input[_RC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RedirectConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_FRC] != null) {
    const memberEntries = se_FixedResponseActionConfig(input[_FRC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FixedResponseConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_FC] != null) {
    const memberEntries = se_ForwardActionConfig(input[_FC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ForwardConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_Action");
var se_Actions = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Action(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_Actions");
var se_AddListenerCertificatesInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_LA] != null) {
    entries[_LA] = input[_LA];
  }
  if (input[_C] != null) {
    const memberEntries = se_CertificateList(input[_C], context);
    if (((_a = input[_C]) == null ? void 0 : _a.length) === 0) {
      entries.Certificates = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Certificates.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AddListenerCertificatesInput");
var se_AddTagsInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_RA] != null) {
    const memberEntries = se_ResourceArns(input[_RA], context);
    if (((_a = input[_RA]) == null ? void 0 : _a.length) === 0) {
      entries.ResourceArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (((_b = input[_Ta]) == null ? void 0 : _b.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AddTagsInput");
var se_AddTrustStoreRevocationsInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_TSA] != null) {
    entries[_TSA] = input[_TSA];
  }
  if (input[_RCe] != null) {
    const memberEntries = se_RevocationContents(input[_RCe], context);
    if (((_a = input[_RCe]) == null ? void 0 : _a.length) === 0) {
      entries.RevocationContents = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RevocationContents.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_AddTrustStoreRevocationsInput");
var se_AlpnPolicyName = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_AlpnPolicyName");
var se_AuthenticateCognitoActionAuthenticationRequestExtraParams = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  Object.keys(input).filter((key) => input[key] != null).forEach((key) => {
    entries[`entry.${counter}.key`] = key;
    entries[`entry.${counter}.value`] = input[key];
    counter++;
  });
  return entries;
}, "se_AuthenticateCognitoActionAuthenticationRequestExtraParams");
var se_AuthenticateCognitoActionConfig = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_UPA] != null) {
    entries[_UPA] = input[_UPA];
  }
  if (input[_UPCI] != null) {
    entries[_UPCI] = input[_UPCI];
  }
  if (input[_UPD] != null) {
    entries[_UPD] = input[_UPD];
  }
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  if (input[_AREP] != null) {
    const memberEntries = se_AuthenticateCognitoActionAuthenticationRequestExtraParams(input[_AREP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AuthenticationRequestExtraParams.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_OUR] != null) {
    entries[_OUR] = input[_OUR];
  }
  return entries;
}, "se_AuthenticateCognitoActionConfig");
var se_AuthenticateOidcActionAuthenticationRequestExtraParams = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  Object.keys(input).filter((key) => input[key] != null).forEach((key) => {
    entries[`entry.${counter}.key`] = key;
    entries[`entry.${counter}.value`] = input[key];
    counter++;
  });
  return entries;
}, "se_AuthenticateOidcActionAuthenticationRequestExtraParams");
var se_AuthenticateOidcActionConfig = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_I] != null) {
    entries[_I] = input[_I];
  }
  if (input[_AE] != null) {
    entries[_AE] = input[_AE];
  }
  if (input[_TE] != null) {
    entries[_TE] = input[_TE];
  }
  if (input[_UIE] != null) {
    entries[_UIE] = input[_UIE];
  }
  if (input[_CI] != null) {
    entries[_CI] = input[_CI];
  }
  if (input[_CS] != null) {
    entries[_CS] = input[_CS];
  }
  if (input[_SCN] != null) {
    entries[_SCN] = input[_SCN];
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  if (input[_AREP] != null) {
    const memberEntries = se_AuthenticateOidcActionAuthenticationRequestExtraParams(input[_AREP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AuthenticationRequestExtraParams.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_OUR] != null) {
    entries[_OUR] = input[_OUR];
  }
  if (input[_UECS] != null) {
    entries[_UECS] = input[_UECS];
  }
  return entries;
}, "se_AuthenticateOidcActionConfig");
var se_Certificate = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_ID] != null) {
    entries[_ID] = input[_ID];
  }
  return entries;
}, "se_Certificate");
var se_CertificateList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Certificate(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_CertificateList");
var se_CreateListenerInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b, _c, _d;
  const entries = {};
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_SP] != null) {
    entries[_SP] = input[_SP];
  }
  if (input[_C] != null) {
    const memberEntries = se_CertificateList(input[_C], context);
    if (((_a = input[_C]) == null ? void 0 : _a.length) === 0) {
      entries.Certificates = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Certificates.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DA] != null) {
    const memberEntries = se_Actions(input[_DA], context);
    if (((_b = input[_DA]) == null ? void 0 : _b.length) === 0) {
      entries.DefaultActions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DefaultActions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AP] != null) {
    const memberEntries = se_AlpnPolicyName(input[_AP], context);
    if (((_c = input[_AP]) == null ? void 0 : _c.length) === 0) {
      entries.AlpnPolicy = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AlpnPolicy.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (((_d = input[_Ta]) == null ? void 0 : _d.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MA] != null) {
    const memberEntries = se_MutualAuthenticationAttributes(input[_MA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MutualAuthentication.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateListenerInput");
var se_CreateLoadBalancerInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b, _c, _d;
  const entries = {};
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_Su] != null) {
    const memberEntries = se_Subnets(input[_Su], context);
    if (((_a = input[_Su]) == null ? void 0 : _a.length) === 0) {
      entries.Subnets = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Subnets.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SM] != null) {
    const memberEntries = se_SubnetMappings(input[_SM], context);
    if (((_b = input[_SM]) == null ? void 0 : _b.length) === 0) {
      entries.SubnetMappings = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetMappings.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SG] != null) {
    const memberEntries = se_SecurityGroups(input[_SG], context);
    if (((_c = input[_SG]) == null ? void 0 : _c.length) === 0) {
      entries.SecurityGroups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroups.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Sc] != null) {
    entries[_Sc] = input[_Sc];
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (((_d = input[_Ta]) == null ? void 0 : _d.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_IAT] != null) {
    entries[_IAT] = input[_IAT];
  }
  if (input[_COIP] != null) {
    entries[_COIP] = input[_COIP];
  }
  return entries;
}, "se_CreateLoadBalancerInput");
var se_CreateRuleInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b, _c;
  const entries = {};
  if (input[_LA] != null) {
    entries[_LA] = input[_LA];
  }
  if (input[_Co] != null) {
    const memberEntries = se_RuleConditionList(input[_Co], context);
    if (((_a = input[_Co]) == null ? void 0 : _a.length) === 0) {
      entries.Conditions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Conditions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Pr] != null) {
    entries[_Pr] = input[_Pr];
  }
  if (input[_Ac] != null) {
    const memberEntries = se_Actions(input[_Ac], context);
    if (((_b = input[_Ac]) == null ? void 0 : _b.length) === 0) {
      entries.Actions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Actions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (((_c = input[_Ta]) == null ? void 0 : _c.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateRuleInput");
var se_CreateTargetGroupInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_PV] != null) {
    entries[_PV] = input[_PV];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_HCP] != null) {
    entries[_HCP] = input[_HCP];
  }
  if (input[_HCPe] != null) {
    entries[_HCPe] = input[_HCPe];
  }
  if (input[_HCE] != null) {
    entries[_HCE] = input[_HCE];
  }
  if (input[_HCPea] != null) {
    entries[_HCPea] = input[_HCPea];
  }
  if (input[_HCIS] != null) {
    entries[_HCIS] = input[_HCIS];
  }
  if (input[_HCTS] != null) {
    entries[_HCTS] = input[_HCTS];
  }
  if (input[_HTC] != null) {
    entries[_HTC] = input[_HTC];
  }
  if (input[_UTC] != null) {
    entries[_UTC] = input[_UTC];
  }
  if (input[_M] != null) {
    const memberEntries = se_Matcher(input[_M], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Matcher.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TT] != null) {
    entries[_TT] = input[_TT];
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (((_a = input[_Ta]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IAT] != null) {
    entries[_IAT] = input[_IAT];
  }
  return entries;
}, "se_CreateTargetGroupInput");
var se_CreateTrustStoreInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_CCBSB] != null) {
    entries[_CCBSB] = input[_CCBSB];
  }
  if (input[_CCBSK] != null) {
    entries[_CCBSK] = input[_CCBSK];
  }
  if (input[_CCBSOV] != null) {
    entries[_CCBSOV] = input[_CCBSOV];
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (((_a = input[_Ta]) == null ? void 0 : _a.length) === 0) {
      entries.Tags = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tags.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_CreateTrustStoreInput");
var se_DeleteListenerInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LA] != null) {
    entries[_LA] = input[_LA];
  }
  return entries;
}, "se_DeleteListenerInput");
var se_DeleteLoadBalancerInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  return entries;
}, "se_DeleteLoadBalancerInput");
var se_DeleteRuleInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  return entries;
}, "se_DeleteRuleInput");
var se_DeleteTargetGroupInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  return entries;
}, "se_DeleteTargetGroupInput");
var se_DeleteTrustStoreInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_TSA] != null) {
    entries[_TSA] = input[_TSA];
  }
  return entries;
}, "se_DeleteTrustStoreInput");
var se_DeregisterTargetsInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  if (input[_Tar] != null) {
    const memberEntries = se_TargetDescriptions(input[_Tar], context);
    if (((_a = input[_Tar]) == null ? void 0 : _a.length) === 0) {
      entries.Targets = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Targets.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DeregisterTargetsInput");
var se_DescribeAccountLimitsInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  return entries;
}, "se_DescribeAccountLimitsInput");
var se_DescribeListenerCertificatesInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LA] != null) {
    entries[_LA] = input[_LA];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  return entries;
}, "se_DescribeListenerCertificatesInput");
var se_DescribeListenersInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  if (input[_LAi] != null) {
    const memberEntries = se_ListenerArns(input[_LAi], context);
    if (((_a = input[_LAi]) == null ? void 0 : _a.length) === 0) {
      entries.ListenerArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ListenerArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  return entries;
}, "se_DescribeListenersInput");
var se_DescribeLoadBalancerAttributesInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  return entries;
}, "se_DescribeLoadBalancerAttributesInput");
var se_DescribeLoadBalancersInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_LBAo] != null) {
    const memberEntries = se_LoadBalancerArns(input[_LBAo], context);
    if (((_a = input[_LBAo]) == null ? void 0 : _a.length) === 0) {
      entries.LoadBalancerArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancerArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Na] != null) {
    const memberEntries = se_LoadBalancerNames(input[_Na], context);
    if (((_b = input[_Na]) == null ? void 0 : _b.length) === 0) {
      entries.Names = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Names.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  return entries;
}, "se_DescribeLoadBalancersInput");
var se_DescribeRulesInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_LA] != null) {
    entries[_LA] = input[_LA];
  }
  if (input[_RAul] != null) {
    const memberEntries = se_RuleArns(input[_RAul], context);
    if (((_a = input[_RAul]) == null ? void 0 : _a.length) === 0) {
      entries.RuleArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RuleArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  return entries;
}, "se_DescribeRulesInput");
var se_DescribeSSLPoliciesInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_Na] != null) {
    const memberEntries = se_SslPolicyNames(input[_Na], context);
    if (((_a = input[_Na]) == null ? void 0 : _a.length) === 0) {
      entries.Names = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Names.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  if (input[_LBT] != null) {
    entries[_LBT] = input[_LBT];
  }
  return entries;
}, "se_DescribeSSLPoliciesInput");
var se_DescribeTagsInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_RA] != null) {
    const memberEntries = se_ResourceArns(input[_RA], context);
    if (((_a = input[_RA]) == null ? void 0 : _a.length) === 0) {
      entries.ResourceArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceArns.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DescribeTagsInput");
var se_DescribeTargetGroupAttributesInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  return entries;
}, "se_DescribeTargetGroupAttributesInput");
var se_DescribeTargetGroupsInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  if (input[_TGAa] != null) {
    const memberEntries = se_TargetGroupArns(input[_TGAa], context);
    if (((_a = input[_TGAa]) == null ? void 0 : _a.length) === 0) {
      entries.TargetGroupArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroupArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Na] != null) {
    const memberEntries = se_TargetGroupNames(input[_Na], context);
    if (((_b = input[_Na]) == null ? void 0 : _b.length) === 0) {
      entries.Names = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Names.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  return entries;
}, "se_DescribeTargetGroupsInput");
var se_DescribeTargetHealthInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  if (input[_Tar] != null) {
    const memberEntries = se_TargetDescriptions(input[_Tar], context);
    if (((_a = input[_Tar]) == null ? void 0 : _a.length) === 0) {
      entries.Targets = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Targets.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_In] != null) {
    const memberEntries = se_ListOfDescribeTargetHealthIncludeOptions(input[_In], context);
    if (((_b = input[_In]) == null ? void 0 : _b.length) === 0) {
      entries.Include = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Include.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_DescribeTargetHealthInput");
var se_DescribeTrustStoreAssociationsInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_TSA] != null) {
    entries[_TSA] = input[_TSA];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  return entries;
}, "se_DescribeTrustStoreAssociationsInput");
var se_DescribeTrustStoreRevocationsInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_TSA] != null) {
    entries[_TSA] = input[_TSA];
  }
  if (input[_RI] != null) {
    const memberEntries = se_RevocationIds(input[_RI], context);
    if (((_a = input[_RI]) == null ? void 0 : _a.length) === 0) {
      entries.RevocationIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RevocationIds.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  return entries;
}, "se_DescribeTrustStoreRevocationsInput");
var se_DescribeTrustStoresInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_TSAr] != null) {
    const memberEntries = se_TrustStoreArns(input[_TSAr], context);
    if (((_a = input[_TSAr]) == null ? void 0 : _a.length) === 0) {
      entries.TrustStoreArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrustStoreArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Na] != null) {
    const memberEntries = se_TrustStoreNames(input[_Na], context);
    if (((_b = input[_Na]) == null ? void 0 : _b.length) === 0) {
      entries.Names = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Names.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  if (input[_PS] != null) {
    entries[_PS] = input[_PS];
  }
  return entries;
}, "se_DescribeTrustStoresInput");
var se_FixedResponseActionConfig = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_MB] != null) {
    entries[_MB] = input[_MB];
  }
  if (input[_SC] != null) {
    entries[_SC] = input[_SC];
  }
  if (input[_CT] != null) {
    entries[_CT] = input[_CT];
  }
  return entries;
}, "se_FixedResponseActionConfig");
var se_ForwardActionConfig = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_TG] != null) {
    const memberEntries = se_TargetGroupList(input[_TG], context);
    if (((_a = input[_TG]) == null ? void 0 : _a.length) === 0) {
      entries.TargetGroups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroups.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TGSC] != null) {
    const memberEntries = se_TargetGroupStickinessConfig(input[_TGSC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroupStickinessConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ForwardActionConfig");
var se_GetTrustStoreCaCertificatesBundleInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_TSA] != null) {
    entries[_TSA] = input[_TSA];
  }
  return entries;
}, "se_GetTrustStoreCaCertificatesBundleInput");
var se_GetTrustStoreRevocationContentInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_TSA] != null) {
    entries[_TSA] = input[_TSA];
  }
  if (input[_RIe] != null) {
    entries[_RIe] = input[_RIe];
  }
  return entries;
}, "se_GetTrustStoreRevocationContentInput");
var se_HostHeaderConditionConfig = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_Va] != null) {
    const memberEntries = se_ListOfString(input[_Va], context);
    if (((_a = input[_Va]) == null ? void 0 : _a.length) === 0) {
      entries.Values = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Values.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_HostHeaderConditionConfig");
var se_HttpHeaderConditionConfig = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_HHN] != null) {
    entries[_HHN] = input[_HHN];
  }
  if (input[_Va] != null) {
    const memberEntries = se_ListOfString(input[_Va], context);
    if (((_a = input[_Va]) == null ? void 0 : _a.length) === 0) {
      entries.Values = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Values.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_HttpHeaderConditionConfig");
var se_HttpRequestMethodConditionConfig = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_Va] != null) {
    const memberEntries = se_ListOfString(input[_Va], context);
    if (((_a = input[_Va]) == null ? void 0 : _a.length) === 0) {
      entries.Values = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Values.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_HttpRequestMethodConditionConfig");
var se_ListenerArns = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ListenerArns");
var se_ListOfDescribeTargetHealthIncludeOptions = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ListOfDescribeTargetHealthIncludeOptions");
var se_ListOfString = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ListOfString");
var se_LoadBalancerArns = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_LoadBalancerArns");
var se_LoadBalancerAttribute = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_K] != null) {
    entries[_K] = input[_K];
  }
  if (input[_Val] != null) {
    entries[_Val] = input[_Val];
  }
  return entries;
}, "se_LoadBalancerAttribute");
var se_LoadBalancerAttributes = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LoadBalancerAttribute(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_LoadBalancerAttributes");
var se_LoadBalancerNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_LoadBalancerNames");
var se_Matcher = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_HC] != null) {
    entries[_HC] = input[_HC];
  }
  if (input[_GC] != null) {
    entries[_GC] = input[_GC];
  }
  return entries;
}, "se_Matcher");
var se_ModifyListenerInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b, _c;
  const entries = {};
  if (input[_LA] != null) {
    entries[_LA] = input[_LA];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_SP] != null) {
    entries[_SP] = input[_SP];
  }
  if (input[_C] != null) {
    const memberEntries = se_CertificateList(input[_C], context);
    if (((_a = input[_C]) == null ? void 0 : _a.length) === 0) {
      entries.Certificates = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Certificates.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DA] != null) {
    const memberEntries = se_Actions(input[_DA], context);
    if (((_b = input[_DA]) == null ? void 0 : _b.length) === 0) {
      entries.DefaultActions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DefaultActions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AP] != null) {
    const memberEntries = se_AlpnPolicyName(input[_AP], context);
    if (((_c = input[_AP]) == null ? void 0 : _c.length) === 0) {
      entries.AlpnPolicy = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AlpnPolicy.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MA] != null) {
    const memberEntries = se_MutualAuthenticationAttributes(input[_MA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MutualAuthentication.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyListenerInput");
var se_ModifyLoadBalancerAttributesInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  if (input[_At] != null) {
    const memberEntries = se_LoadBalancerAttributes(input[_At], context);
    if (((_a = input[_At]) == null ? void 0 : _a.length) === 0) {
      entries.Attributes = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Attributes.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyLoadBalancerAttributesInput");
var se_ModifyRuleInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  if (input[_Co] != null) {
    const memberEntries = se_RuleConditionList(input[_Co], context);
    if (((_a = input[_Co]) == null ? void 0 : _a.length) === 0) {
      entries.Conditions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Conditions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ac] != null) {
    const memberEntries = se_Actions(input[_Ac], context);
    if (((_b = input[_Ac]) == null ? void 0 : _b.length) === 0) {
      entries.Actions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Actions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyRuleInput");
var se_ModifyTargetGroupAttributesInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  if (input[_At] != null) {
    const memberEntries = se_TargetGroupAttributes(input[_At], context);
    if (((_a = input[_At]) == null ? void 0 : _a.length) === 0) {
      entries.Attributes = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Attributes.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyTargetGroupAttributesInput");
var se_ModifyTargetGroupInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  if (input[_HCP] != null) {
    entries[_HCP] = input[_HCP];
  }
  if (input[_HCPe] != null) {
    entries[_HCPe] = input[_HCPe];
  }
  if (input[_HCPea] != null) {
    entries[_HCPea] = input[_HCPea];
  }
  if (input[_HCE] != null) {
    entries[_HCE] = input[_HCE];
  }
  if (input[_HCIS] != null) {
    entries[_HCIS] = input[_HCIS];
  }
  if (input[_HCTS] != null) {
    entries[_HCTS] = input[_HCTS];
  }
  if (input[_HTC] != null) {
    entries[_HTC] = input[_HTC];
  }
  if (input[_UTC] != null) {
    entries[_UTC] = input[_UTC];
  }
  if (input[_M] != null) {
    const memberEntries = se_Matcher(input[_M], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Matcher.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_ModifyTargetGroupInput");
var se_ModifyTrustStoreInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_TSA] != null) {
    entries[_TSA] = input[_TSA];
  }
  if (input[_CCBSB] != null) {
    entries[_CCBSB] = input[_CCBSB];
  }
  if (input[_CCBSK] != null) {
    entries[_CCBSK] = input[_CCBSK];
  }
  if (input[_CCBSOV] != null) {
    entries[_CCBSOV] = input[_CCBSOV];
  }
  return entries;
}, "se_ModifyTrustStoreInput");
var se_MutualAuthenticationAttributes = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Mo] != null) {
    entries[_Mo] = input[_Mo];
  }
  if (input[_TSA] != null) {
    entries[_TSA] = input[_TSA];
  }
  if (input[_ICCE] != null) {
    entries[_ICCE] = input[_ICCE];
  }
  return entries;
}, "se_MutualAuthenticationAttributes");
var se_PathPatternConditionConfig = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_Va] != null) {
    const memberEntries = se_ListOfString(input[_Va], context);
    if (((_a = input[_Va]) == null ? void 0 : _a.length) === 0) {
      entries.Values = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Values.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_PathPatternConditionConfig");
var se_QueryStringConditionConfig = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_Va] != null) {
    const memberEntries = se_QueryStringKeyValuePairList(input[_Va], context);
    if (((_a = input[_Va]) == null ? void 0 : _a.length) === 0) {
      entries.Values = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Values.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_QueryStringConditionConfig");
var se_QueryStringKeyValuePair = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_K] != null) {
    entries[_K] = input[_K];
  }
  if (input[_Val] != null) {
    entries[_Val] = input[_Val];
  }
  return entries;
}, "se_QueryStringKeyValuePair");
var se_QueryStringKeyValuePairList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_QueryStringKeyValuePair(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_QueryStringKeyValuePairList");
var se_RedirectActionConfig = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_H] != null) {
    entries[_H] = input[_H];
  }
  if (input[_Pa] != null) {
    entries[_Pa] = input[_Pa];
  }
  if (input[_Q] != null) {
    entries[_Q] = input[_Q];
  }
  if (input[_SC] != null) {
    entries[_SC] = input[_SC];
  }
  return entries;
}, "se_RedirectActionConfig");
var se_RegisterTargetsInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  if (input[_Tar] != null) {
    const memberEntries = se_TargetDescriptions(input[_Tar], context);
    if (((_a = input[_Tar]) == null ? void 0 : _a.length) === 0) {
      entries.Targets = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Targets.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_RegisterTargetsInput");
var se_RemoveListenerCertificatesInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_LA] != null) {
    entries[_LA] = input[_LA];
  }
  if (input[_C] != null) {
    const memberEntries = se_CertificateList(input[_C], context);
    if (((_a = input[_C]) == null ? void 0 : _a.length) === 0) {
      entries.Certificates = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Certificates.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_RemoveListenerCertificatesInput");
var se_RemoveTagsInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_RA] != null) {
    const memberEntries = se_ResourceArns(input[_RA], context);
    if (((_a = input[_RA]) == null ? void 0 : _a.length) === 0) {
      entries.ResourceArns = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceArns.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TK] != null) {
    const memberEntries = se_TagKeys(input[_TK], context);
    if (((_b = input[_TK]) == null ? void 0 : _b.length) === 0) {
      entries.TagKeys = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagKeys.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_RemoveTagsInput");
var se_RemoveTrustStoreRevocationsInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_TSA] != null) {
    entries[_TSA] = input[_TSA];
  }
  if (input[_RI] != null) {
    const memberEntries = se_RevocationIds(input[_RI], context);
    if (((_a = input[_RI]) == null ? void 0 : _a.length) === 0) {
      entries.RevocationIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RevocationIds.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_RemoveTrustStoreRevocationsInput");
var se_ResourceArns = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_ResourceArns");
var se_RevocationContent = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SB] != null) {
    entries[_SB] = input[_SB];
  }
  if (input[_SK] != null) {
    entries[_SK] = input[_SK];
  }
  if (input[_SOV] != null) {
    entries[_SOV] = input[_SOV];
  }
  if (input[_RTev] != null) {
    entries[_RTev] = input[_RTev];
  }
  return entries;
}, "se_RevocationContent");
var se_RevocationContents = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RevocationContent(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_RevocationContents");
var se_RevocationIds = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_RevocationIds");
var se_RuleArns = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_RuleArns");
var se_RuleCondition = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  if (input[_Va] != null) {
    const memberEntries = se_ListOfString(input[_Va], context);
    if (((_a = input[_Va]) == null ? void 0 : _a.length) === 0) {
      entries.Values = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Values.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_HHC] != null) {
    const memberEntries = se_HostHeaderConditionConfig(input[_HHC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostHeaderConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PPC] != null) {
    const memberEntries = se_PathPatternConditionConfig(input[_PPC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PathPatternConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_HHCt] != null) {
    const memberEntries = se_HttpHeaderConditionConfig(input[_HHCt], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HttpHeaderConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_QSC] != null) {
    const memberEntries = se_QueryStringConditionConfig(input[_QSC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `QueryStringConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_HRMC] != null) {
    const memberEntries = se_HttpRequestMethodConditionConfig(input[_HRMC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HttpRequestMethodConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SIC] != null) {
    const memberEntries = se_SourceIpConditionConfig(input[_SIC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceIpConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_RuleCondition");
var se_RuleConditionList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RuleCondition(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_RuleConditionList");
var se_RulePriorityList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RulePriorityPair(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_RulePriorityList");
var se_RulePriorityPair = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  if (input[_Pr] != null) {
    entries[_Pr] = input[_Pr];
  }
  return entries;
}, "se_RulePriorityPair");
var se_SecurityGroups = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_SecurityGroups");
var se_SetIpAddressTypeInput = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  if (input[_IAT] != null) {
    entries[_IAT] = input[_IAT];
  }
  return entries;
}, "se_SetIpAddressTypeInput");
var se_SetRulePrioritiesInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_RP] != null) {
    const memberEntries = se_RulePriorityList(input[_RP], context);
    if (((_a = input[_RP]) == null ? void 0 : _a.length) === 0) {
      entries.RulePriorities = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RulePriorities.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_SetRulePrioritiesInput");
var se_SetSecurityGroupsInput = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  if (input[_SG] != null) {
    const memberEntries = se_SecurityGroups(input[_SG], context);
    if (((_a = input[_SG]) == null ? void 0 : _a.length) === 0) {
      entries.SecurityGroups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroups.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ESGIROPLT] != null) {
    entries[_ESGIROPLT] = input[_ESGIROPLT];
  }
  return entries;
}, "se_SetSecurityGroupsInput");
var se_SetSubnetsInput = /* @__PURE__ */ __name((input, context) => {
  var _a, _b;
  const entries = {};
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  if (input[_Su] != null) {
    const memberEntries = se_Subnets(input[_Su], context);
    if (((_a = input[_Su]) == null ? void 0 : _a.length) === 0) {
      entries.Subnets = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Subnets.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SM] != null) {
    const memberEntries = se_SubnetMappings(input[_SM], context);
    if (((_b = input[_SM]) == null ? void 0 : _b.length) === 0) {
      entries.SubnetMappings = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetMappings.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IAT] != null) {
    entries[_IAT] = input[_IAT];
  }
  return entries;
}, "se_SetSubnetsInput");
var se_SourceIpConditionConfig = /* @__PURE__ */ __name((input, context) => {
  var _a;
  const entries = {};
  if (input[_Va] != null) {
    const memberEntries = se_ListOfString(input[_Va], context);
    if (((_a = input[_Va]) == null ? void 0 : _a.length) === 0) {
      entries.Values = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Values.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
}, "se_SourceIpConditionConfig");
var se_SslPolicyNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_SslPolicyNames");
var se_SubnetMapping = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_SI] != null) {
    entries[_SI] = input[_SI];
  }
  if (input[_AI] != null) {
    entries[_AI] = input[_AI];
  }
  if (input[_PIPA] != null) {
    entries[_PIPA] = input[_PIPA];
  }
  if (input[_IPA] != null) {
    entries[_IPA] = input[_IPA];
  }
  return entries;
}, "se_SubnetMapping");
var se_SubnetMappings = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SubnetMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_SubnetMappings");
var se_Subnets = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_Subnets");
var se_Tag = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_K] != null) {
    entries[_K] = input[_K];
  }
  if (input[_Val] != null) {
    entries[_Val] = input[_Val];
  }
  return entries;
}, "se_Tag");
var se_TagKeys = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_TagKeys");
var se_TagList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Tag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_TagList");
var se_TargetDescription = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_Id] != null) {
    entries[_Id] = input[_Id];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  return entries;
}, "se_TargetDescription");
var se_TargetDescriptions = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TargetDescription(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_TargetDescriptions");
var se_TargetGroupArns = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_TargetGroupArns");
var se_TargetGroupAttribute = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_K] != null) {
    entries[_K] = input[_K];
  }
  if (input[_Val] != null) {
    entries[_Val] = input[_Val];
  }
  return entries;
}, "se_TargetGroupAttribute");
var se_TargetGroupAttributes = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TargetGroupAttribute(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_TargetGroupAttributes");
var se_TargetGroupList = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TargetGroupTuple(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
}, "se_TargetGroupList");
var se_TargetGroupNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_TargetGroupNames");
var se_TargetGroupStickinessConfig = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_E] != null) {
    entries[_E] = input[_E];
  }
  if (input[_DS] != null) {
    entries[_DS] = input[_DS];
  }
  return entries;
}, "se_TargetGroupStickinessConfig");
var se_TargetGroupTuple = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  if (input[_W] != null) {
    entries[_W] = input[_W];
  }
  return entries;
}, "se_TargetGroupTuple");
var se_TrustStoreArns = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_TrustStoreArns");
var se_TrustStoreNames = /* @__PURE__ */ __name((input, context) => {
  const entries = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`member.${counter}`] = entry;
    counter++;
  }
  return entries;
}, "se_TrustStoreNames");
var de_Action = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_T] != null) {
    contents[_T] = (0, import_smithy_client.expectString)(output[_T]);
  }
  if (output[_TGA] != null) {
    contents[_TGA] = (0, import_smithy_client.expectString)(output[_TGA]);
  }
  if (output[_AOC] != null) {
    contents[_AOC] = de_AuthenticateOidcActionConfig(output[_AOC], context);
  }
  if (output[_ACC] != null) {
    contents[_ACC] = de_AuthenticateCognitoActionConfig(output[_ACC], context);
  }
  if (output[_O] != null) {
    contents[_O] = (0, import_smithy_client.strictParseInt32)(output[_O]);
  }
  if (output[_RC] != null) {
    contents[_RC] = de_RedirectActionConfig(output[_RC], context);
  }
  if (output[_FRC] != null) {
    contents[_FRC] = de_FixedResponseActionConfig(output[_FRC], context);
  }
  if (output[_FC] != null) {
    contents[_FC] = de_ForwardActionConfig(output[_FC], context);
  }
  return contents;
}, "de_Action");
var de_Actions = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Action(entry, context);
  });
}, "de_Actions");
var de_AddListenerCertificatesOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Certificates === "") {
    contents[_C] = [];
  } else if (output[_C] != null && output[_C][_m] != null) {
    contents[_C] = de_CertificateList((0, import_smithy_client.getArrayIfSingleItem)(output[_C][_m]), context);
  }
  return contents;
}, "de_AddListenerCertificatesOutput");
var de_AddTagsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_AddTagsOutput");
var de_AddTrustStoreRevocationsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TrustStoreRevocations === "") {
    contents[_TSR] = [];
  } else if (output[_TSR] != null && output[_TSR][_m] != null) {
    contents[_TSR] = de_TrustStoreRevocations((0, import_smithy_client.getArrayIfSingleItem)(output[_TSR][_m]), context);
  }
  return contents;
}, "de_AddTrustStoreRevocationsOutput");
var de_AllocationIdNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_AllocationIdNotFoundException");
var de_AlpnPolicyName = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_AlpnPolicyName");
var de_ALPNPolicyNotSupportedException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_ALPNPolicyNotSupportedException");
var de_AnomalyDetection = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_R] != null) {
    contents[_R] = (0, import_smithy_client.expectString)(output[_R]);
  }
  if (output[_MIE] != null) {
    contents[_MIE] = (0, import_smithy_client.expectString)(output[_MIE]);
  }
  return contents;
}, "de_AnomalyDetection");
var de_AuthenticateCognitoActionAuthenticationRequestExtraParams = /* @__PURE__ */ __name((output, context) => {
  return output.reduce((acc, pair) => {
    if (pair["value"] === null) {
      return acc;
    }
    acc[pair["key"]] = (0, import_smithy_client.expectString)(pair["value"]);
    return acc;
  }, {});
}, "de_AuthenticateCognitoActionAuthenticationRequestExtraParams");
var de_AuthenticateCognitoActionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_UPA] != null) {
    contents[_UPA] = (0, import_smithy_client.expectString)(output[_UPA]);
  }
  if (output[_UPCI] != null) {
    contents[_UPCI] = (0, import_smithy_client.expectString)(output[_UPCI]);
  }
  if (output[_UPD] != null) {
    contents[_UPD] = (0, import_smithy_client.expectString)(output[_UPD]);
  }
  if (output[_SCN] != null) {
    contents[_SCN] = (0, import_smithy_client.expectString)(output[_SCN]);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.strictParseLong)(output[_ST]);
  }
  if (output.AuthenticationRequestExtraParams === "") {
    contents[_AREP] = {};
  } else if (output[_AREP] != null && output[_AREP][_e] != null) {
    contents[_AREP] = de_AuthenticateCognitoActionAuthenticationRequestExtraParams(
      (0, import_smithy_client.getArrayIfSingleItem)(output[_AREP][_e]),
      context
    );
  }
  if (output[_OUR] != null) {
    contents[_OUR] = (0, import_smithy_client.expectString)(output[_OUR]);
  }
  return contents;
}, "de_AuthenticateCognitoActionConfig");
var de_AuthenticateOidcActionAuthenticationRequestExtraParams = /* @__PURE__ */ __name((output, context) => {
  return output.reduce((acc, pair) => {
    if (pair["value"] === null) {
      return acc;
    }
    acc[pair["key"]] = (0, import_smithy_client.expectString)(pair["value"]);
    return acc;
  }, {});
}, "de_AuthenticateOidcActionAuthenticationRequestExtraParams");
var de_AuthenticateOidcActionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_I] != null) {
    contents[_I] = (0, import_smithy_client.expectString)(output[_I]);
  }
  if (output[_AE] != null) {
    contents[_AE] = (0, import_smithy_client.expectString)(output[_AE]);
  }
  if (output[_TE] != null) {
    contents[_TE] = (0, import_smithy_client.expectString)(output[_TE]);
  }
  if (output[_UIE] != null) {
    contents[_UIE] = (0, import_smithy_client.expectString)(output[_UIE]);
  }
  if (output[_CI] != null) {
    contents[_CI] = (0, import_smithy_client.expectString)(output[_CI]);
  }
  if (output[_CS] != null) {
    contents[_CS] = (0, import_smithy_client.expectString)(output[_CS]);
  }
  if (output[_SCN] != null) {
    contents[_SCN] = (0, import_smithy_client.expectString)(output[_SCN]);
  }
  if (output[_S] != null) {
    contents[_S] = (0, import_smithy_client.expectString)(output[_S]);
  }
  if (output[_ST] != null) {
    contents[_ST] = (0, import_smithy_client.strictParseLong)(output[_ST]);
  }
  if (output.AuthenticationRequestExtraParams === "") {
    contents[_AREP] = {};
  } else if (output[_AREP] != null && output[_AREP][_e] != null) {
    contents[_AREP] = de_AuthenticateOidcActionAuthenticationRequestExtraParams(
      (0, import_smithy_client.getArrayIfSingleItem)(output[_AREP][_e]),
      context
    );
  }
  if (output[_OUR] != null) {
    contents[_OUR] = (0, import_smithy_client.expectString)(output[_OUR]);
  }
  if (output[_UECS] != null) {
    contents[_UECS] = (0, import_smithy_client.parseBoolean)(output[_UECS]);
  }
  return contents;
}, "de_AuthenticateOidcActionConfig");
var de_AvailabilityZone = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_ZN] != null) {
    contents[_ZN] = (0, import_smithy_client.expectString)(output[_ZN]);
  }
  if (output[_SI] != null) {
    contents[_SI] = (0, import_smithy_client.expectString)(output[_SI]);
  }
  if (output[_OI] != null) {
    contents[_OI] = (0, import_smithy_client.expectString)(output[_OI]);
  }
  if (output.LoadBalancerAddresses === "") {
    contents[_LBAoa] = [];
  } else if (output[_LBAoa] != null && output[_LBAoa][_m] != null) {
    contents[_LBAoa] = de_LoadBalancerAddresses((0, import_smithy_client.getArrayIfSingleItem)(output[_LBAoa][_m]), context);
  }
  return contents;
}, "de_AvailabilityZone");
var de_AvailabilityZoneNotSupportedException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_AvailabilityZoneNotSupportedException");
var de_AvailabilityZones = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_AvailabilityZone(entry, context);
  });
}, "de_AvailabilityZones");
var de_CaCertificatesBundleNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_CaCertificatesBundleNotFoundException");
var de_Certificate = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_CA] != null) {
    contents[_CA] = (0, import_smithy_client.expectString)(output[_CA]);
  }
  if (output[_ID] != null) {
    contents[_ID] = (0, import_smithy_client.parseBoolean)(output[_ID]);
  }
  return contents;
}, "de_Certificate");
var de_CertificateList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Certificate(entry, context);
  });
}, "de_CertificateList");
var de_CertificateNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_CertificateNotFoundException");
var de_Cipher = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_Pr] != null) {
    contents[_Pr] = (0, import_smithy_client.strictParseInt32)(output[_Pr]);
  }
  return contents;
}, "de_Cipher");
var de_Ciphers = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Cipher(entry, context);
  });
}, "de_Ciphers");
var de_CreateListenerOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Listeners === "") {
    contents[_L] = [];
  } else if (output[_L] != null && output[_L][_m] != null) {
    contents[_L] = de_Listeners((0, import_smithy_client.getArrayIfSingleItem)(output[_L][_m]), context);
  }
  return contents;
}, "de_CreateListenerOutput");
var de_CreateLoadBalancerOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.LoadBalancers === "") {
    contents[_LB] = [];
  } else if (output[_LB] != null && output[_LB][_m] != null) {
    contents[_LB] = de_LoadBalancers((0, import_smithy_client.getArrayIfSingleItem)(output[_LB][_m]), context);
  }
  return contents;
}, "de_CreateLoadBalancerOutput");
var de_CreateRuleOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Rules === "") {
    contents[_Ru] = [];
  } else if (output[_Ru] != null && output[_Ru][_m] != null) {
    contents[_Ru] = de_Rules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru][_m]), context);
  }
  return contents;
}, "de_CreateRuleOutput");
var de_CreateTargetGroupOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TargetGroups === "") {
    contents[_TG] = [];
  } else if (output[_TG] != null && output[_TG][_m] != null) {
    contents[_TG] = de_TargetGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_TG][_m]), context);
  }
  return contents;
}, "de_CreateTargetGroupOutput");
var de_CreateTrustStoreOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TrustStores === "") {
    contents[_TS] = [];
  } else if (output[_TS] != null && output[_TS][_m] != null) {
    contents[_TS] = de_TrustStores((0, import_smithy_client.getArrayIfSingleItem)(output[_TS][_m]), context);
  }
  return contents;
}, "de_CreateTrustStoreOutput");
var de_DeleteListenerOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DeleteListenerOutput");
var de_DeleteLoadBalancerOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DeleteLoadBalancerOutput");
var de_DeleteRuleOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DeleteRuleOutput");
var de_DeleteTargetGroupOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DeleteTargetGroupOutput");
var de_DeleteTrustStoreOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DeleteTrustStoreOutput");
var de_DeregisterTargetsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_DeregisterTargetsOutput");
var de_DescribeAccountLimitsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Limits === "") {
    contents[_Li] = [];
  } else if (output[_Li] != null && output[_Li][_m] != null) {
    contents[_Li] = de_Limits((0, import_smithy_client.getArrayIfSingleItem)(output[_Li][_m]), context);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  return contents;
}, "de_DescribeAccountLimitsOutput");
var de_DescribeListenerCertificatesOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Certificates === "") {
    contents[_C] = [];
  } else if (output[_C] != null && output[_C][_m] != null) {
    contents[_C] = de_CertificateList((0, import_smithy_client.getArrayIfSingleItem)(output[_C][_m]), context);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  return contents;
}, "de_DescribeListenerCertificatesOutput");
var de_DescribeListenersOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Listeners === "") {
    contents[_L] = [];
  } else if (output[_L] != null && output[_L][_m] != null) {
    contents[_L] = de_Listeners((0, import_smithy_client.getArrayIfSingleItem)(output[_L][_m]), context);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  return contents;
}, "de_DescribeListenersOutput");
var de_DescribeLoadBalancerAttributesOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Attributes === "") {
    contents[_At] = [];
  } else if (output[_At] != null && output[_At][_m] != null) {
    contents[_At] = de_LoadBalancerAttributes((0, import_smithy_client.getArrayIfSingleItem)(output[_At][_m]), context);
  }
  return contents;
}, "de_DescribeLoadBalancerAttributesOutput");
var de_DescribeLoadBalancersOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.LoadBalancers === "") {
    contents[_LB] = [];
  } else if (output[_LB] != null && output[_LB][_m] != null) {
    contents[_LB] = de_LoadBalancers((0, import_smithy_client.getArrayIfSingleItem)(output[_LB][_m]), context);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  return contents;
}, "de_DescribeLoadBalancersOutput");
var de_DescribeRulesOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Rules === "") {
    contents[_Ru] = [];
  } else if (output[_Ru] != null && output[_Ru][_m] != null) {
    contents[_Ru] = de_Rules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru][_m]), context);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  return contents;
}, "de_DescribeRulesOutput");
var de_DescribeSSLPoliciesOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.SslPolicies === "") {
    contents[_SPs] = [];
  } else if (output[_SPs] != null && output[_SPs][_m] != null) {
    contents[_SPs] = de_SslPolicies((0, import_smithy_client.getArrayIfSingleItem)(output[_SPs][_m]), context);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  return contents;
}, "de_DescribeSSLPoliciesOutput");
var de_DescribeTagsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TagDescriptions === "") {
    contents[_TD] = [];
  } else if (output[_TD] != null && output[_TD][_m] != null) {
    contents[_TD] = de_TagDescriptions((0, import_smithy_client.getArrayIfSingleItem)(output[_TD][_m]), context);
  }
  return contents;
}, "de_DescribeTagsOutput");
var de_DescribeTargetGroupAttributesOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Attributes === "") {
    contents[_At] = [];
  } else if (output[_At] != null && output[_At][_m] != null) {
    contents[_At] = de_TargetGroupAttributes((0, import_smithy_client.getArrayIfSingleItem)(output[_At][_m]), context);
  }
  return contents;
}, "de_DescribeTargetGroupAttributesOutput");
var de_DescribeTargetGroupsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TargetGroups === "") {
    contents[_TG] = [];
  } else if (output[_TG] != null && output[_TG][_m] != null) {
    contents[_TG] = de_TargetGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_TG][_m]), context);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  return contents;
}, "de_DescribeTargetGroupsOutput");
var de_DescribeTargetHealthOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TargetHealthDescriptions === "") {
    contents[_THD] = [];
  } else if (output[_THD] != null && output[_THD][_m] != null) {
    contents[_THD] = de_TargetHealthDescriptions((0, import_smithy_client.getArrayIfSingleItem)(output[_THD][_m]), context);
  }
  return contents;
}, "de_DescribeTargetHealthOutput");
var de_DescribeTrustStoreAssociationsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TrustStoreAssociations === "") {
    contents[_TSAru] = [];
  } else if (output[_TSAru] != null && output[_TSAru][_m] != null) {
    contents[_TSAru] = de_TrustStoreAssociations((0, import_smithy_client.getArrayIfSingleItem)(output[_TSAru][_m]), context);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  return contents;
}, "de_DescribeTrustStoreAssociationsOutput");
var de_DescribeTrustStoreRevocation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TSA] != null) {
    contents[_TSA] = (0, import_smithy_client.expectString)(output[_TSA]);
  }
  if (output[_RIe] != null) {
    contents[_RIe] = (0, import_smithy_client.strictParseLong)(output[_RIe]);
  }
  if (output[_RTev] != null) {
    contents[_RTev] = (0, import_smithy_client.expectString)(output[_RTev]);
  }
  if (output[_NORE] != null) {
    contents[_NORE] = (0, import_smithy_client.strictParseLong)(output[_NORE]);
  }
  return contents;
}, "de_DescribeTrustStoreRevocation");
var de_DescribeTrustStoreRevocationResponse = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_DescribeTrustStoreRevocation(entry, context);
  });
}, "de_DescribeTrustStoreRevocationResponse");
var de_DescribeTrustStoreRevocationsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TrustStoreRevocations === "") {
    contents[_TSR] = [];
  } else if (output[_TSR] != null && output[_TSR][_m] != null) {
    contents[_TSR] = de_DescribeTrustStoreRevocationResponse((0, import_smithy_client.getArrayIfSingleItem)(output[_TSR][_m]), context);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  return contents;
}, "de_DescribeTrustStoreRevocationsOutput");
var de_DescribeTrustStoresOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TrustStores === "") {
    contents[_TS] = [];
  } else if (output[_TS] != null && output[_TS][_m] != null) {
    contents[_TS] = de_TrustStores((0, import_smithy_client.getArrayIfSingleItem)(output[_TS][_m]), context);
  }
  if (output[_NM] != null) {
    contents[_NM] = (0, import_smithy_client.expectString)(output[_NM]);
  }
  return contents;
}, "de_DescribeTrustStoresOutput");
var de_DuplicateListenerException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_DuplicateListenerException");
var de_DuplicateLoadBalancerNameException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_DuplicateLoadBalancerNameException");
var de_DuplicateTagKeysException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_DuplicateTagKeysException");
var de_DuplicateTargetGroupNameException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_DuplicateTargetGroupNameException");
var de_DuplicateTrustStoreNameException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_DuplicateTrustStoreNameException");
var de_FixedResponseActionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_MB] != null) {
    contents[_MB] = (0, import_smithy_client.expectString)(output[_MB]);
  }
  if (output[_SC] != null) {
    contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
  }
  if (output[_CT] != null) {
    contents[_CT] = (0, import_smithy_client.expectString)(output[_CT]);
  }
  return contents;
}, "de_FixedResponseActionConfig");
var de_ForwardActionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TargetGroups === "") {
    contents[_TG] = [];
  } else if (output[_TG] != null && output[_TG][_m] != null) {
    contents[_TG] = de_TargetGroupList((0, import_smithy_client.getArrayIfSingleItem)(output[_TG][_m]), context);
  }
  if (output[_TGSC] != null) {
    contents[_TGSC] = de_TargetGroupStickinessConfig(output[_TGSC], context);
  }
  return contents;
}, "de_ForwardActionConfig");
var de_GetTrustStoreCaCertificatesBundleOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Lo] != null) {
    contents[_Lo] = (0, import_smithy_client.expectString)(output[_Lo]);
  }
  return contents;
}, "de_GetTrustStoreCaCertificatesBundleOutput");
var de_GetTrustStoreRevocationContentOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Lo] != null) {
    contents[_Lo] = (0, import_smithy_client.expectString)(output[_Lo]);
  }
  return contents;
}, "de_GetTrustStoreRevocationContentOutput");
var de_HealthUnavailableException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_HealthUnavailableException");
var de_HostHeaderConditionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Values === "") {
    contents[_Va] = [];
  } else if (output[_Va] != null && output[_Va][_m] != null) {
    contents[_Va] = de_ListOfString((0, import_smithy_client.getArrayIfSingleItem)(output[_Va][_m]), context);
  }
  return contents;
}, "de_HostHeaderConditionConfig");
var de_HttpHeaderConditionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_HHN] != null) {
    contents[_HHN] = (0, import_smithy_client.expectString)(output[_HHN]);
  }
  if (output.Values === "") {
    contents[_Va] = [];
  } else if (output[_Va] != null && output[_Va][_m] != null) {
    contents[_Va] = de_ListOfString((0, import_smithy_client.getArrayIfSingleItem)(output[_Va][_m]), context);
  }
  return contents;
}, "de_HttpHeaderConditionConfig");
var de_HttpRequestMethodConditionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Values === "") {
    contents[_Va] = [];
  } else if (output[_Va] != null && output[_Va][_m] != null) {
    contents[_Va] = de_ListOfString((0, import_smithy_client.getArrayIfSingleItem)(output[_Va][_m]), context);
  }
  return contents;
}, "de_HttpRequestMethodConditionConfig");
var de_IncompatibleProtocolsException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_IncompatibleProtocolsException");
var de_InvalidCaCertificatesBundleException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_InvalidCaCertificatesBundleException");
var de_InvalidConfigurationRequestException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_InvalidConfigurationRequestException");
var de_InvalidLoadBalancerActionException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_InvalidLoadBalancerActionException");
var de_InvalidRevocationContentException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_InvalidRevocationContentException");
var de_InvalidSchemeException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_InvalidSchemeException");
var de_InvalidSecurityGroupException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_InvalidSecurityGroupException");
var de_InvalidSubnetException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_InvalidSubnetException");
var de_InvalidTargetException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_InvalidTargetException");
var de_Limit = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_Max] != null) {
    contents[_Max] = (0, import_smithy_client.expectString)(output[_Max]);
  }
  return contents;
}, "de_Limit");
var de_Limits = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Limit(entry, context);
  });
}, "de_Limits");
var de_Listener = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LA] != null) {
    contents[_LA] = (0, import_smithy_client.expectString)(output[_LA]);
  }
  if (output[_LBA] != null) {
    contents[_LBA] = (0, import_smithy_client.expectString)(output[_LBA]);
  }
  if (output[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.strictParseInt32)(output[_Po]);
  }
  if (output[_P] != null) {
    contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
  }
  if (output.Certificates === "") {
    contents[_C] = [];
  } else if (output[_C] != null && output[_C][_m] != null) {
    contents[_C] = de_CertificateList((0, import_smithy_client.getArrayIfSingleItem)(output[_C][_m]), context);
  }
  if (output[_SP] != null) {
    contents[_SP] = (0, import_smithy_client.expectString)(output[_SP]);
  }
  if (output.DefaultActions === "") {
    contents[_DA] = [];
  } else if (output[_DA] != null && output[_DA][_m] != null) {
    contents[_DA] = de_Actions((0, import_smithy_client.getArrayIfSingleItem)(output[_DA][_m]), context);
  }
  if (output.AlpnPolicy === "") {
    contents[_AP] = [];
  } else if (output[_AP] != null && output[_AP][_m] != null) {
    contents[_AP] = de_AlpnPolicyName((0, import_smithy_client.getArrayIfSingleItem)(output[_AP][_m]), context);
  }
  if (output[_MA] != null) {
    contents[_MA] = de_MutualAuthenticationAttributes(output[_MA], context);
  }
  return contents;
}, "de_Listener");
var de_ListenerNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_ListenerNotFoundException");
var de_Listeners = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Listener(entry, context);
  });
}, "de_Listeners");
var de_ListOfString = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_ListOfString");
var de_LoadBalancer = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_LBA] != null) {
    contents[_LBA] = (0, import_smithy_client.expectString)(output[_LBA]);
  }
  if (output[_DNSN] != null) {
    contents[_DNSN] = (0, import_smithy_client.expectString)(output[_DNSN]);
  }
  if (output[_CHZI] != null) {
    contents[_CHZI] = (0, import_smithy_client.expectString)(output[_CHZI]);
  }
  if (output[_CTr] != null) {
    contents[_CTr] = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseRfc3339DateTimeWithOffset)(output[_CTr]));
  }
  if (output[_LBN] != null) {
    contents[_LBN] = (0, import_smithy_client.expectString)(output[_LBN]);
  }
  if (output[_Sc] != null) {
    contents[_Sc] = (0, import_smithy_client.expectString)(output[_Sc]);
  }
  if (output[_VI] != null) {
    contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
  }
  if (output[_St] != null) {
    contents[_St] = de_LoadBalancerState(output[_St], context);
  }
  if (output[_T] != null) {
    contents[_T] = (0, import_smithy_client.expectString)(output[_T]);
  }
  if (output.AvailabilityZones === "") {
    contents[_AZv] = [];
  } else if (output[_AZv] != null && output[_AZv][_m] != null) {
    contents[_AZv] = de_AvailabilityZones((0, import_smithy_client.getArrayIfSingleItem)(output[_AZv][_m]), context);
  }
  if (output.SecurityGroups === "") {
    contents[_SG] = [];
  } else if (output[_SG] != null && output[_SG][_m] != null) {
    contents[_SG] = de_SecurityGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_SG][_m]), context);
  }
  if (output[_IAT] != null) {
    contents[_IAT] = (0, import_smithy_client.expectString)(output[_IAT]);
  }
  if (output[_COIP] != null) {
    contents[_COIP] = (0, import_smithy_client.expectString)(output[_COIP]);
  }
  if (output[_ESGIROPLT] != null) {
    contents[_ESGIROPLT] = (0, import_smithy_client.expectString)(output[_ESGIROPLT]);
  }
  return contents;
}, "de_LoadBalancer");
var de_LoadBalancerAddress = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IA] != null) {
    contents[_IA] = (0, import_smithy_client.expectString)(output[_IA]);
  }
  if (output[_AI] != null) {
    contents[_AI] = (0, import_smithy_client.expectString)(output[_AI]);
  }
  if (output[_PIPA] != null) {
    contents[_PIPA] = (0, import_smithy_client.expectString)(output[_PIPA]);
  }
  if (output[_IPA] != null) {
    contents[_IPA] = (0, import_smithy_client.expectString)(output[_IPA]);
  }
  return contents;
}, "de_LoadBalancerAddress");
var de_LoadBalancerAddresses = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LoadBalancerAddress(entry, context);
  });
}, "de_LoadBalancerAddresses");
var de_LoadBalancerArns = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_LoadBalancerArns");
var de_LoadBalancerAttribute = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
  }
  if (output[_Val] != null) {
    contents[_Val] = (0, import_smithy_client.expectString)(output[_Val]);
  }
  return contents;
}, "de_LoadBalancerAttribute");
var de_LoadBalancerAttributes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LoadBalancerAttribute(entry, context);
  });
}, "de_LoadBalancerAttributes");
var de_LoadBalancerNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_LoadBalancerNotFoundException");
var de_LoadBalancers = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_LoadBalancer(entry, context);
  });
}, "de_LoadBalancers");
var de_LoadBalancerState = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Cod] != null) {
    contents[_Cod] = (0, import_smithy_client.expectString)(output[_Cod]);
  }
  if (output[_Re] != null) {
    contents[_Re] = (0, import_smithy_client.expectString)(output[_Re]);
  }
  return contents;
}, "de_LoadBalancerState");
var de_Matcher = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_HC] != null) {
    contents[_HC] = (0, import_smithy_client.expectString)(output[_HC]);
  }
  if (output[_GC] != null) {
    contents[_GC] = (0, import_smithy_client.expectString)(output[_GC]);
  }
  return contents;
}, "de_Matcher");
var de_ModifyListenerOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Listeners === "") {
    contents[_L] = [];
  } else if (output[_L] != null && output[_L][_m] != null) {
    contents[_L] = de_Listeners((0, import_smithy_client.getArrayIfSingleItem)(output[_L][_m]), context);
  }
  return contents;
}, "de_ModifyListenerOutput");
var de_ModifyLoadBalancerAttributesOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Attributes === "") {
    contents[_At] = [];
  } else if (output[_At] != null && output[_At][_m] != null) {
    contents[_At] = de_LoadBalancerAttributes((0, import_smithy_client.getArrayIfSingleItem)(output[_At][_m]), context);
  }
  return contents;
}, "de_ModifyLoadBalancerAttributesOutput");
var de_ModifyRuleOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Rules === "") {
    contents[_Ru] = [];
  } else if (output[_Ru] != null && output[_Ru][_m] != null) {
    contents[_Ru] = de_Rules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru][_m]), context);
  }
  return contents;
}, "de_ModifyRuleOutput");
var de_ModifyTargetGroupAttributesOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Attributes === "") {
    contents[_At] = [];
  } else if (output[_At] != null && output[_At][_m] != null) {
    contents[_At] = de_TargetGroupAttributes((0, import_smithy_client.getArrayIfSingleItem)(output[_At][_m]), context);
  }
  return contents;
}, "de_ModifyTargetGroupAttributesOutput");
var de_ModifyTargetGroupOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TargetGroups === "") {
    contents[_TG] = [];
  } else if (output[_TG] != null && output[_TG][_m] != null) {
    contents[_TG] = de_TargetGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_TG][_m]), context);
  }
  return contents;
}, "de_ModifyTargetGroupOutput");
var de_ModifyTrustStoreOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.TrustStores === "") {
    contents[_TS] = [];
  } else if (output[_TS] != null && output[_TS][_m] != null) {
    contents[_TS] = de_TrustStores((0, import_smithy_client.getArrayIfSingleItem)(output[_TS][_m]), context);
  }
  return contents;
}, "de_ModifyTrustStoreOutput");
var de_MutualAuthenticationAttributes = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Mo] != null) {
    contents[_Mo] = (0, import_smithy_client.expectString)(output[_Mo]);
  }
  if (output[_TSA] != null) {
    contents[_TSA] = (0, import_smithy_client.expectString)(output[_TSA]);
  }
  if (output[_ICCE] != null) {
    contents[_ICCE] = (0, import_smithy_client.parseBoolean)(output[_ICCE]);
  }
  return contents;
}, "de_MutualAuthenticationAttributes");
var de_OperationNotPermittedException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_OperationNotPermittedException");
var de_PathPatternConditionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Values === "") {
    contents[_Va] = [];
  } else if (output[_Va] != null && output[_Va][_m] != null) {
    contents[_Va] = de_ListOfString((0, import_smithy_client.getArrayIfSingleItem)(output[_Va][_m]), context);
  }
  return contents;
}, "de_PathPatternConditionConfig");
var de_PriorityInUseException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_PriorityInUseException");
var de_QueryStringConditionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Values === "") {
    contents[_Va] = [];
  } else if (output[_Va] != null && output[_Va][_m] != null) {
    contents[_Va] = de_QueryStringKeyValuePairList((0, import_smithy_client.getArrayIfSingleItem)(output[_Va][_m]), context);
  }
  return contents;
}, "de_QueryStringConditionConfig");
var de_QueryStringKeyValuePair = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
  }
  if (output[_Val] != null) {
    contents[_Val] = (0, import_smithy_client.expectString)(output[_Val]);
  }
  return contents;
}, "de_QueryStringKeyValuePair");
var de_QueryStringKeyValuePairList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_QueryStringKeyValuePair(entry, context);
  });
}, "de_QueryStringKeyValuePairList");
var de_RedirectActionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_P] != null) {
    contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
  }
  if (output[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.expectString)(output[_Po]);
  }
  if (output[_H] != null) {
    contents[_H] = (0, import_smithy_client.expectString)(output[_H]);
  }
  if (output[_Pa] != null) {
    contents[_Pa] = (0, import_smithy_client.expectString)(output[_Pa]);
  }
  if (output[_Q] != null) {
    contents[_Q] = (0, import_smithy_client.expectString)(output[_Q]);
  }
  if (output[_SC] != null) {
    contents[_SC] = (0, import_smithy_client.expectString)(output[_SC]);
  }
  return contents;
}, "de_RedirectActionConfig");
var de_RegisterTargetsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_RegisterTargetsOutput");
var de_RemoveListenerCertificatesOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_RemoveListenerCertificatesOutput");
var de_RemoveTagsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_RemoveTagsOutput");
var de_RemoveTrustStoreRevocationsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  return contents;
}, "de_RemoveTrustStoreRevocationsOutput");
var de_ResourceInUseException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_ResourceInUseException");
var de_RevocationContentNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_RevocationContentNotFoundException");
var de_RevocationIdNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_RevocationIdNotFoundException");
var de_Rule = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RAu] != null) {
    contents[_RAu] = (0, import_smithy_client.expectString)(output[_RAu]);
  }
  if (output[_Pr] != null) {
    contents[_Pr] = (0, import_smithy_client.expectString)(output[_Pr]);
  }
  if (output.Conditions === "") {
    contents[_Co] = [];
  } else if (output[_Co] != null && output[_Co][_m] != null) {
    contents[_Co] = de_RuleConditionList((0, import_smithy_client.getArrayIfSingleItem)(output[_Co][_m]), context);
  }
  if (output.Actions === "") {
    contents[_Ac] = [];
  } else if (output[_Ac] != null && output[_Ac][_m] != null) {
    contents[_Ac] = de_Actions((0, import_smithy_client.getArrayIfSingleItem)(output[_Ac][_m]), context);
  }
  if (output[_ID] != null) {
    contents[_ID] = (0, import_smithy_client.parseBoolean)(output[_ID]);
  }
  return contents;
}, "de_Rule");
var de_RuleCondition = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_F] != null) {
    contents[_F] = (0, import_smithy_client.expectString)(output[_F]);
  }
  if (output.Values === "") {
    contents[_Va] = [];
  } else if (output[_Va] != null && output[_Va][_m] != null) {
    contents[_Va] = de_ListOfString((0, import_smithy_client.getArrayIfSingleItem)(output[_Va][_m]), context);
  }
  if (output[_HHC] != null) {
    contents[_HHC] = de_HostHeaderConditionConfig(output[_HHC], context);
  }
  if (output[_PPC] != null) {
    contents[_PPC] = de_PathPatternConditionConfig(output[_PPC], context);
  }
  if (output[_HHCt] != null) {
    contents[_HHCt] = de_HttpHeaderConditionConfig(output[_HHCt], context);
  }
  if (output[_QSC] != null) {
    contents[_QSC] = de_QueryStringConditionConfig(output[_QSC], context);
  }
  if (output[_HRMC] != null) {
    contents[_HRMC] = de_HttpRequestMethodConditionConfig(output[_HRMC], context);
  }
  if (output[_SIC] != null) {
    contents[_SIC] = de_SourceIpConditionConfig(output[_SIC], context);
  }
  return contents;
}, "de_RuleCondition");
var de_RuleConditionList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_RuleCondition(entry, context);
  });
}, "de_RuleConditionList");
var de_RuleNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_RuleNotFoundException");
var de_Rules = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Rule(entry, context);
  });
}, "de_Rules");
var de_SecurityGroups = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_SecurityGroups");
var de_SetIpAddressTypeOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_IAT] != null) {
    contents[_IAT] = (0, import_smithy_client.expectString)(output[_IAT]);
  }
  return contents;
}, "de_SetIpAddressTypeOutput");
var de_SetRulePrioritiesOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Rules === "") {
    contents[_Ru] = [];
  } else if (output[_Ru] != null && output[_Ru][_m] != null) {
    contents[_Ru] = de_Rules((0, import_smithy_client.getArrayIfSingleItem)(output[_Ru][_m]), context);
  }
  return contents;
}, "de_SetRulePrioritiesOutput");
var de_SetSecurityGroupsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.SecurityGroupIds === "") {
    contents[_SGI] = [];
  } else if (output[_SGI] != null && output[_SGI][_m] != null) {
    contents[_SGI] = de_SecurityGroups((0, import_smithy_client.getArrayIfSingleItem)(output[_SGI][_m]), context);
  }
  if (output[_ESGIROPLT] != null) {
    contents[_ESGIROPLT] = (0, import_smithy_client.expectString)(output[_ESGIROPLT]);
  }
  return contents;
}, "de_SetSecurityGroupsOutput");
var de_SetSubnetsOutput = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.AvailabilityZones === "") {
    contents[_AZv] = [];
  } else if (output[_AZv] != null && output[_AZv][_m] != null) {
    contents[_AZv] = de_AvailabilityZones((0, import_smithy_client.getArrayIfSingleItem)(output[_AZv][_m]), context);
  }
  if (output[_IAT] != null) {
    contents[_IAT] = (0, import_smithy_client.expectString)(output[_IAT]);
  }
  return contents;
}, "de_SetSubnetsOutput");
var de_SourceIpConditionConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.Values === "") {
    contents[_Va] = [];
  } else if (output[_Va] != null && output[_Va][_m] != null) {
    contents[_Va] = de_ListOfString((0, import_smithy_client.getArrayIfSingleItem)(output[_Va][_m]), context);
  }
  return contents;
}, "de_SourceIpConditionConfig");
var de_SslPolicies = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_SslPolicy(entry, context);
  });
}, "de_SslPolicies");
var de_SslPolicy = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output.SslProtocols === "") {
    contents[_SPsl] = [];
  } else if (output[_SPsl] != null && output[_SPsl][_m] != null) {
    contents[_SPsl] = de_SslProtocols((0, import_smithy_client.getArrayIfSingleItem)(output[_SPsl][_m]), context);
  }
  if (output.Ciphers === "") {
    contents[_Ci] = [];
  } else if (output[_Ci] != null && output[_Ci][_m] != null) {
    contents[_Ci] = de_Ciphers((0, import_smithy_client.getArrayIfSingleItem)(output[_Ci][_m]), context);
  }
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output.SupportedLoadBalancerTypes === "") {
    contents[_SLBT] = [];
  } else if (output[_SLBT] != null && output[_SLBT][_m] != null) {
    contents[_SLBT] = de_ListOfString((0, import_smithy_client.getArrayIfSingleItem)(output[_SLBT][_m]), context);
  }
  return contents;
}, "de_SslPolicy");
var de_SSLPolicyNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_SSLPolicyNotFoundException");
var de_SslProtocols = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.expectString)(entry);
  });
}, "de_SslProtocols");
var de_SubnetNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_SubnetNotFoundException");
var de_Tag = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
  }
  if (output[_Val] != null) {
    contents[_Val] = (0, import_smithy_client.expectString)(output[_Val]);
  }
  return contents;
}, "de_Tag");
var de_TagDescription = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RAe] != null) {
    contents[_RAe] = (0, import_smithy_client.expectString)(output[_RAe]);
  }
  if (output.Tags === "") {
    contents[_Ta] = [];
  } else if (output[_Ta] != null && output[_Ta][_m] != null) {
    contents[_Ta] = de_TagList((0, import_smithy_client.getArrayIfSingleItem)(output[_Ta][_m]), context);
  }
  return contents;
}, "de_TagDescription");
var de_TagDescriptions = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TagDescription(entry, context);
  });
}, "de_TagDescriptions");
var de_TagList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_Tag(entry, context);
  });
}, "de_TagList");
var de_TargetDescription = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Id] != null) {
    contents[_Id] = (0, import_smithy_client.expectString)(output[_Id]);
  }
  if (output[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.strictParseInt32)(output[_Po]);
  }
  if (output[_AZ] != null) {
    contents[_AZ] = (0, import_smithy_client.expectString)(output[_AZ]);
  }
  return contents;
}, "de_TargetDescription");
var de_TargetGroup = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TGA] != null) {
    contents[_TGA] = (0, import_smithy_client.expectString)(output[_TGA]);
  }
  if (output[_TGN] != null) {
    contents[_TGN] = (0, import_smithy_client.expectString)(output[_TGN]);
  }
  if (output[_P] != null) {
    contents[_P] = (0, import_smithy_client.expectString)(output[_P]);
  }
  if (output[_Po] != null) {
    contents[_Po] = (0, import_smithy_client.strictParseInt32)(output[_Po]);
  }
  if (output[_VI] != null) {
    contents[_VI] = (0, import_smithy_client.expectString)(output[_VI]);
  }
  if (output[_HCP] != null) {
    contents[_HCP] = (0, import_smithy_client.expectString)(output[_HCP]);
  }
  if (output[_HCPe] != null) {
    contents[_HCPe] = (0, import_smithy_client.expectString)(output[_HCPe]);
  }
  if (output[_HCE] != null) {
    contents[_HCE] = (0, import_smithy_client.parseBoolean)(output[_HCE]);
  }
  if (output[_HCIS] != null) {
    contents[_HCIS] = (0, import_smithy_client.strictParseInt32)(output[_HCIS]);
  }
  if (output[_HCTS] != null) {
    contents[_HCTS] = (0, import_smithy_client.strictParseInt32)(output[_HCTS]);
  }
  if (output[_HTC] != null) {
    contents[_HTC] = (0, import_smithy_client.strictParseInt32)(output[_HTC]);
  }
  if (output[_UTC] != null) {
    contents[_UTC] = (0, import_smithy_client.strictParseInt32)(output[_UTC]);
  }
  if (output[_HCPea] != null) {
    contents[_HCPea] = (0, import_smithy_client.expectString)(output[_HCPea]);
  }
  if (output[_M] != null) {
    contents[_M] = de_Matcher(output[_M], context);
  }
  if (output.LoadBalancerArns === "") {
    contents[_LBAo] = [];
  } else if (output[_LBAo] != null && output[_LBAo][_m] != null) {
    contents[_LBAo] = de_LoadBalancerArns((0, import_smithy_client.getArrayIfSingleItem)(output[_LBAo][_m]), context);
  }
  if (output[_TT] != null) {
    contents[_TT] = (0, import_smithy_client.expectString)(output[_TT]);
  }
  if (output[_PV] != null) {
    contents[_PV] = (0, import_smithy_client.expectString)(output[_PV]);
  }
  if (output[_IAT] != null) {
    contents[_IAT] = (0, import_smithy_client.expectString)(output[_IAT]);
  }
  return contents;
}, "de_TargetGroup");
var de_TargetGroupAssociationLimitException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TargetGroupAssociationLimitException");
var de_TargetGroupAttribute = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_K] != null) {
    contents[_K] = (0, import_smithy_client.expectString)(output[_K]);
  }
  if (output[_Val] != null) {
    contents[_Val] = (0, import_smithy_client.expectString)(output[_Val]);
  }
  return contents;
}, "de_TargetGroupAttribute");
var de_TargetGroupAttributes = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TargetGroupAttribute(entry, context);
  });
}, "de_TargetGroupAttributes");
var de_TargetGroupList = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TargetGroupTuple(entry, context);
  });
}, "de_TargetGroupList");
var de_TargetGroupNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TargetGroupNotFoundException");
var de_TargetGroups = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TargetGroup(entry, context);
  });
}, "de_TargetGroups");
var de_TargetGroupStickinessConfig = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_E] != null) {
    contents[_E] = (0, import_smithy_client.parseBoolean)(output[_E]);
  }
  if (output[_DS] != null) {
    contents[_DS] = (0, import_smithy_client.strictParseInt32)(output[_DS]);
  }
  return contents;
}, "de_TargetGroupStickinessConfig");
var de_TargetGroupTuple = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TGA] != null) {
    contents[_TGA] = (0, import_smithy_client.expectString)(output[_TGA]);
  }
  if (output[_W] != null) {
    contents[_W] = (0, import_smithy_client.strictParseInt32)(output[_W]);
  }
  return contents;
}, "de_TargetGroupTuple");
var de_TargetHealth = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_St] != null) {
    contents[_St] = (0, import_smithy_client.expectString)(output[_St]);
  }
  if (output[_Re] != null) {
    contents[_Re] = (0, import_smithy_client.expectString)(output[_Re]);
  }
  if (output[_D] != null) {
    contents[_D] = (0, import_smithy_client.expectString)(output[_D]);
  }
  return contents;
}, "de_TargetHealth");
var de_TargetHealthDescription = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Targ] != null) {
    contents[_Targ] = de_TargetDescription(output[_Targ], context);
  }
  if (output[_HCPe] != null) {
    contents[_HCPe] = (0, import_smithy_client.expectString)(output[_HCPe]);
  }
  if (output[_TH] != null) {
    contents[_TH] = de_TargetHealth(output[_TH], context);
  }
  if (output[_AD] != null) {
    contents[_AD] = de_AnomalyDetection(output[_AD], context);
  }
  return contents;
}, "de_TargetHealthDescription");
var de_TargetHealthDescriptions = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TargetHealthDescription(entry, context);
  });
}, "de_TargetHealthDescriptions");
var de_TooManyActionsException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyActionsException");
var de_TooManyCertificatesException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyCertificatesException");
var de_TooManyListenersException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyListenersException");
var de_TooManyLoadBalancersException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyLoadBalancersException");
var de_TooManyRegistrationsForTargetIdException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyRegistrationsForTargetIdException");
var de_TooManyRulesException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyRulesException");
var de_TooManyTagsException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyTagsException");
var de_TooManyTargetGroupsException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyTargetGroupsException");
var de_TooManyTargetsException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyTargetsException");
var de_TooManyTrustStoreRevocationEntriesException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyTrustStoreRevocationEntriesException");
var de_TooManyTrustStoresException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyTrustStoresException");
var de_TooManyUniqueTargetGroupsPerLoadBalancerException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TooManyUniqueTargetGroupsPerLoadBalancerException");
var de_TrustStore = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_N] != null) {
    contents[_N] = (0, import_smithy_client.expectString)(output[_N]);
  }
  if (output[_TSA] != null) {
    contents[_TSA] = (0, import_smithy_client.expectString)(output[_TSA]);
  }
  if (output[_Sta] != null) {
    contents[_Sta] = (0, import_smithy_client.expectString)(output[_Sta]);
  }
  if (output[_NOCC] != null) {
    contents[_NOCC] = (0, import_smithy_client.strictParseInt32)(output[_NOCC]);
  }
  if (output[_TRE] != null) {
    contents[_TRE] = (0, import_smithy_client.strictParseLong)(output[_TRE]);
  }
  return contents;
}, "de_TrustStore");
var de_TrustStoreAssociation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_RAe] != null) {
    contents[_RAe] = (0, import_smithy_client.expectString)(output[_RAe]);
  }
  return contents;
}, "de_TrustStoreAssociation");
var de_TrustStoreAssociations = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TrustStoreAssociation(entry, context);
  });
}, "de_TrustStoreAssociations");
var de_TrustStoreInUseException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TrustStoreInUseException");
var de_TrustStoreNotFoundException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TrustStoreNotFoundException");
var de_TrustStoreNotReadyException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_TrustStoreNotReadyException");
var de_TrustStoreRevocation = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_TSA] != null) {
    contents[_TSA] = (0, import_smithy_client.expectString)(output[_TSA]);
  }
  if (output[_RIe] != null) {
    contents[_RIe] = (0, import_smithy_client.strictParseLong)(output[_RIe]);
  }
  if (output[_RTev] != null) {
    contents[_RTev] = (0, import_smithy_client.expectString)(output[_RTev]);
  }
  if (output[_NORE] != null) {
    contents[_NORE] = (0, import_smithy_client.strictParseLong)(output[_NORE]);
  }
  return contents;
}, "de_TrustStoreRevocation");
var de_TrustStoreRevocations = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TrustStoreRevocation(entry, context);
  });
}, "de_TrustStoreRevocations");
var de_TrustStores = /* @__PURE__ */ __name((output, context) => {
  return (output || []).filter((e) => e != null).map((entry) => {
    return de_TrustStore(entry, context);
  });
}, "de_TrustStores");
var de_UnsupportedProtocolException = /* @__PURE__ */ __name((output, context) => {
  const contents = {};
  if (output[_Me] != null) {
    contents[_Me] = (0, import_smithy_client.expectString)(output[_Me]);
  }
  return contents;
}, "de_UnsupportedProtocolException");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var throwDefaultError = (0, import_smithy_client.withBaseException)(ElasticLoadBalancingV2ServiceException);
var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new import_protocol_http.HttpRequest(contents);
}, "buildHttpRpcRequest");
var SHARED_HEADERS = {
  "content-type": "application/x-www-form-urlencoded"
};
var _ = "2015-12-01";
var _A = "Action";
var _ACC = "AuthenticateCognitoConfig";
var _AD = "AnomalyDetection";
var _AE = "AuthorizationEndpoint";
var _AI = "AllocationId";
var _ALC = "AddListenerCertificates";
var _AOC = "AuthenticateOidcConfig";
var _AP = "AlpnPolicy";
var _AREP = "AuthenticationRequestExtraParams";
var _AT = "AddTags";
var _ATSR = "AddTrustStoreRevocations";
var _AZ = "AvailabilityZone";
var _AZv = "AvailabilityZones";
var _Ac = "Actions";
var _At = "Attributes";
var _C = "Certificates";
var _CA = "CertificateArn";
var _CCBSB = "CaCertificatesBundleS3Bucket";
var _CCBSK = "CaCertificatesBundleS3Key";
var _CCBSOV = "CaCertificatesBundleS3ObjectVersion";
var _CHZI = "CanonicalHostedZoneId";
var _CI = "ClientId";
var _CL = "CreateListener";
var _CLB = "CreateLoadBalancer";
var _COIP = "CustomerOwnedIpv4Pool";
var _CR = "CreateRule";
var _CS = "ClientSecret";
var _CT = "ContentType";
var _CTG = "CreateTargetGroup";
var _CTS = "CreateTrustStore";
var _CTr = "CreatedTime";
var _Ci = "Ciphers";
var _Co = "Conditions";
var _Cod = "Code";
var _D = "Description";
var _DA = "DefaultActions";
var _DAL = "DescribeAccountLimits";
var _DL = "DeleteListener";
var _DLB = "DeleteLoadBalancer";
var _DLBA = "DescribeLoadBalancerAttributes";
var _DLBe = "DescribeLoadBalancers";
var _DLC = "DescribeListenerCertificates";
var _DLe = "DescribeListeners";
var _DNSN = "DNSName";
var _DR = "DeleteRule";
var _DRe = "DescribeRules";
var _DS = "DurationSeconds";
var _DSSLP = "DescribeSSLPolicies";
var _DT = "DeregisterTargets";
var _DTG = "DeleteTargetGroup";
var _DTGA = "DescribeTargetGroupAttributes";
var _DTGe = "DescribeTargetGroups";
var _DTH = "DescribeTargetHealth";
var _DTS = "DeleteTrustStore";
var _DTSA = "DescribeTrustStoreAssociations";
var _DTSR = "DescribeTrustStoreRevocations";
var _DTSe = "DescribeTrustStores";
var _DTe = "DescribeTags";
var _E = "Enabled";
var _ESGIROPLT = "EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic";
var _F = "Field";
var _FC = "ForwardConfig";
var _FRC = "FixedResponseConfig";
var _GC = "GrpcCode";
var _GTSCCB = "GetTrustStoreCaCertificatesBundle";
var _GTSRC = "GetTrustStoreRevocationContent";
var _H = "Host";
var _HC = "HttpCode";
var _HCE = "HealthCheckEnabled";
var _HCIS = "HealthCheckIntervalSeconds";
var _HCP = "HealthCheckProtocol";
var _HCPe = "HealthCheckPort";
var _HCPea = "HealthCheckPath";
var _HCTS = "HealthCheckTimeoutSeconds";
var _HHC = "HostHeaderConfig";
var _HHCt = "HttpHeaderConfig";
var _HHN = "HttpHeaderName";
var _HRMC = "HttpRequestMethodConfig";
var _HTC = "HealthyThresholdCount";
var _I = "Issuer";
var _IA = "IpAddress";
var _IAT = "IpAddressType";
var _ICCE = "IgnoreClientCertificateExpiry";
var _ID = "IsDefault";
var _IPA = "IPv6Address";
var _Id = "Id";
var _In = "Include";
var _K = "Key";
var _L = "Listeners";
var _LA = "ListenerArn";
var _LAi = "ListenerArns";
var _LB = "LoadBalancers";
var _LBA = "LoadBalancerArn";
var _LBAo = "LoadBalancerArns";
var _LBAoa = "LoadBalancerAddresses";
var _LBN = "LoadBalancerName";
var _LBT = "LoadBalancerType";
var _Li = "Limits";
var _Lo = "Location";
var _M = "Matcher";
var _MA = "MutualAuthentication";
var _MB = "MessageBody";
var _MIE = "MitigationInEffect";
var _ML = "ModifyListener";
var _MLBA = "ModifyLoadBalancerAttributes";
var _MR = "ModifyRule";
var _MTG = "ModifyTargetGroup";
var _MTGA = "ModifyTargetGroupAttributes";
var _MTS = "ModifyTrustStore";
var _Ma = "Marker";
var _Max = "Max";
var _Me = "Message";
var _Mo = "Mode";
var _N = "Name";
var _NM = "NextMarker";
var _NOCC = "NumberOfCaCertificates";
var _NORE = "NumberOfRevokedEntries";
var _Na = "Names";
var _O = "Order";
var _OI = "OutpostId";
var _OUR = "OnUnauthenticatedRequest";
var _P = "Protocol";
var _PIPA = "PrivateIPv4Address";
var _PPC = "PathPatternConfig";
var _PS = "PageSize";
var _PV = "ProtocolVersion";
var _Pa = "Path";
var _Po = "Port";
var _Pr = "Priority";
var _Q = "Query";
var _QSC = "QueryStringConfig";
var _R = "Result";
var _RA = "ResourceArns";
var _RAe = "ResourceArn";
var _RAu = "RuleArn";
var _RAul = "RuleArns";
var _RC = "RedirectConfig";
var _RCe = "RevocationContents";
var _RI = "RevocationIds";
var _RIe = "RevocationId";
var _RLC = "RemoveListenerCertificates";
var _RP = "RulePriorities";
var _RT = "RegisterTargets";
var _RTSR = "RemoveTrustStoreRevocations";
var _RTe = "RemoveTags";
var _RTev = "RevocationType";
var _Re = "Reason";
var _Ru = "Rules";
var _S = "Scope";
var _SB = "S3Bucket";
var _SC = "StatusCode";
var _SCN = "SessionCookieName";
var _SG = "SecurityGroups";
var _SGI = "SecurityGroupIds";
var _SI = "SubnetId";
var _SIAT = "SetIpAddressType";
var _SIC = "SourceIpConfig";
var _SK = "S3Key";
var _SLBT = "SupportedLoadBalancerTypes";
var _SM = "SubnetMappings";
var _SOV = "S3ObjectVersion";
var _SP = "SslPolicy";
var _SPs = "SslPolicies";
var _SPsl = "SslProtocols";
var _SRP = "SetRulePriorities";
var _SS = "SetSubnets";
var _SSG = "SetSecurityGroups";
var _ST = "SessionTimeout";
var _Sc = "Scheme";
var _St = "State";
var _Sta = "Status";
var _Su = "Subnets";
var _T = "Type";
var _TD = "TagDescriptions";
var _TE = "TokenEndpoint";
var _TG = "TargetGroups";
var _TGA = "TargetGroupArn";
var _TGAa = "TargetGroupArns";
var _TGN = "TargetGroupName";
var _TGSC = "TargetGroupStickinessConfig";
var _TH = "TargetHealth";
var _THD = "TargetHealthDescriptions";
var _TK = "TagKeys";
var _TRE = "TotalRevokedEntries";
var _TS = "TrustStores";
var _TSA = "TrustStoreArn";
var _TSAr = "TrustStoreArns";
var _TSAru = "TrustStoreAssociations";
var _TSR = "TrustStoreRevocations";
var _TT = "TargetType";
var _Ta = "Tags";
var _Tar = "Targets";
var _Targ = "Target";
var _UECS = "UseExistingClientSecret";
var _UIE = "UserInfoEndpoint";
var _UPA = "UserPoolArn";
var _UPCI = "UserPoolClientId";
var _UPD = "UserPoolDomain";
var _UTC = "UnhealthyThresholdCount";
var _V = "Version";
var _VI = "VpcId";
var _Va = "Values";
var _Val = "Value";
var _W = "Weight";
var _ZN = "ZoneName";
var _e = "entry";
var _m = "member";
var buildFormUrlencodedString = /* @__PURE__ */ __name((formEntries) => Object.entries(formEntries).map(([key, value]) => (0, import_smithy_client.extendedEncodeURIComponent)(key) + "=" + (0, import_smithy_client.extendedEncodeURIComponent)(value)).join("&"), "buildFormUrlencodedString");
var loadQueryErrorCode = /* @__PURE__ */ __name((output, data) => {
  var _a;
  if (((_a = data.Error) == null ? void 0 : _a.Code) !== void 0) {
    return data.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
}, "loadQueryErrorCode");

// src/commands/AddListenerCertificatesCommand.ts
var _AddListenerCertificatesCommand = class _AddListenerCertificatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "AddListenerCertificates", {}).n("ElasticLoadBalancingV2Client", "AddListenerCertificatesCommand").f(void 0, void 0).ser(se_AddListenerCertificatesCommand).de(de_AddListenerCertificatesCommand).build() {
};
__name(_AddListenerCertificatesCommand, "AddListenerCertificatesCommand");
var AddListenerCertificatesCommand = _AddListenerCertificatesCommand;

// src/commands/AddTagsCommand.ts




var _AddTagsCommand = class _AddTagsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "AddTags", {}).n("ElasticLoadBalancingV2Client", "AddTagsCommand").f(void 0, void 0).ser(se_AddTagsCommand).de(de_AddTagsCommand).build() {
};
__name(_AddTagsCommand, "AddTagsCommand");
var AddTagsCommand = _AddTagsCommand;

// src/commands/AddTrustStoreRevocationsCommand.ts




var _AddTrustStoreRevocationsCommand = class _AddTrustStoreRevocationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "AddTrustStoreRevocations", {}).n("ElasticLoadBalancingV2Client", "AddTrustStoreRevocationsCommand").f(void 0, void 0).ser(se_AddTrustStoreRevocationsCommand).de(de_AddTrustStoreRevocationsCommand).build() {
};
__name(_AddTrustStoreRevocationsCommand, "AddTrustStoreRevocationsCommand");
var AddTrustStoreRevocationsCommand = _AddTrustStoreRevocationsCommand;

// src/commands/CreateListenerCommand.ts




var _CreateListenerCommand = class _CreateListenerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "CreateListener", {}).n("ElasticLoadBalancingV2Client", "CreateListenerCommand").f(void 0, void 0).ser(se_CreateListenerCommand).de(de_CreateListenerCommand).build() {
};
__name(_CreateListenerCommand, "CreateListenerCommand");
var CreateListenerCommand = _CreateListenerCommand;

// src/commands/CreateLoadBalancerCommand.ts




var _CreateLoadBalancerCommand = class _CreateLoadBalancerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "CreateLoadBalancer", {}).n("ElasticLoadBalancingV2Client", "CreateLoadBalancerCommand").f(void 0, void 0).ser(se_CreateLoadBalancerCommand).de(de_CreateLoadBalancerCommand).build() {
};
__name(_CreateLoadBalancerCommand, "CreateLoadBalancerCommand");
var CreateLoadBalancerCommand = _CreateLoadBalancerCommand;

// src/commands/CreateRuleCommand.ts




var _CreateRuleCommand = class _CreateRuleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "CreateRule", {}).n("ElasticLoadBalancingV2Client", "CreateRuleCommand").f(void 0, void 0).ser(se_CreateRuleCommand).de(de_CreateRuleCommand).build() {
};
__name(_CreateRuleCommand, "CreateRuleCommand");
var CreateRuleCommand = _CreateRuleCommand;

// src/commands/CreateTargetGroupCommand.ts




var _CreateTargetGroupCommand = class _CreateTargetGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "CreateTargetGroup", {}).n("ElasticLoadBalancingV2Client", "CreateTargetGroupCommand").f(void 0, void 0).ser(se_CreateTargetGroupCommand).de(de_CreateTargetGroupCommand).build() {
};
__name(_CreateTargetGroupCommand, "CreateTargetGroupCommand");
var CreateTargetGroupCommand = _CreateTargetGroupCommand;

// src/commands/CreateTrustStoreCommand.ts




var _CreateTrustStoreCommand = class _CreateTrustStoreCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "CreateTrustStore", {}).n("ElasticLoadBalancingV2Client", "CreateTrustStoreCommand").f(void 0, void 0).ser(se_CreateTrustStoreCommand).de(de_CreateTrustStoreCommand).build() {
};
__name(_CreateTrustStoreCommand, "CreateTrustStoreCommand");
var CreateTrustStoreCommand = _CreateTrustStoreCommand;

// src/commands/DeleteListenerCommand.ts




var _DeleteListenerCommand = class _DeleteListenerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DeleteListener", {}).n("ElasticLoadBalancingV2Client", "DeleteListenerCommand").f(void 0, void 0).ser(se_DeleteListenerCommand).de(de_DeleteListenerCommand).build() {
};
__name(_DeleteListenerCommand, "DeleteListenerCommand");
var DeleteListenerCommand = _DeleteListenerCommand;

// src/commands/DeleteLoadBalancerCommand.ts




var _DeleteLoadBalancerCommand = class _DeleteLoadBalancerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DeleteLoadBalancer", {}).n("ElasticLoadBalancingV2Client", "DeleteLoadBalancerCommand").f(void 0, void 0).ser(se_DeleteLoadBalancerCommand).de(de_DeleteLoadBalancerCommand).build() {
};
__name(_DeleteLoadBalancerCommand, "DeleteLoadBalancerCommand");
var DeleteLoadBalancerCommand = _DeleteLoadBalancerCommand;

// src/commands/DeleteRuleCommand.ts




var _DeleteRuleCommand = class _DeleteRuleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DeleteRule", {}).n("ElasticLoadBalancingV2Client", "DeleteRuleCommand").f(void 0, void 0).ser(se_DeleteRuleCommand).de(de_DeleteRuleCommand).build() {
};
__name(_DeleteRuleCommand, "DeleteRuleCommand");
var DeleteRuleCommand = _DeleteRuleCommand;

// src/commands/DeleteTargetGroupCommand.ts




var _DeleteTargetGroupCommand = class _DeleteTargetGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DeleteTargetGroup", {}).n("ElasticLoadBalancingV2Client", "DeleteTargetGroupCommand").f(void 0, void 0).ser(se_DeleteTargetGroupCommand).de(de_DeleteTargetGroupCommand).build() {
};
__name(_DeleteTargetGroupCommand, "DeleteTargetGroupCommand");
var DeleteTargetGroupCommand = _DeleteTargetGroupCommand;

// src/commands/DeleteTrustStoreCommand.ts




var _DeleteTrustStoreCommand = class _DeleteTrustStoreCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DeleteTrustStore", {}).n("ElasticLoadBalancingV2Client", "DeleteTrustStoreCommand").f(void 0, void 0).ser(se_DeleteTrustStoreCommand).de(de_DeleteTrustStoreCommand).build() {
};
__name(_DeleteTrustStoreCommand, "DeleteTrustStoreCommand");
var DeleteTrustStoreCommand = _DeleteTrustStoreCommand;

// src/commands/DeregisterTargetsCommand.ts




var _DeregisterTargetsCommand = class _DeregisterTargetsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DeregisterTargets", {}).n("ElasticLoadBalancingV2Client", "DeregisterTargetsCommand").f(void 0, void 0).ser(se_DeregisterTargetsCommand).de(de_DeregisterTargetsCommand).build() {
};
__name(_DeregisterTargetsCommand, "DeregisterTargetsCommand");
var DeregisterTargetsCommand = _DeregisterTargetsCommand;

// src/commands/DescribeAccountLimitsCommand.ts




var _DescribeAccountLimitsCommand = class _DescribeAccountLimitsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeAccountLimits", {}).n("ElasticLoadBalancingV2Client", "DescribeAccountLimitsCommand").f(void 0, void 0).ser(se_DescribeAccountLimitsCommand).de(de_DescribeAccountLimitsCommand).build() {
};
__name(_DescribeAccountLimitsCommand, "DescribeAccountLimitsCommand");
var DescribeAccountLimitsCommand = _DescribeAccountLimitsCommand;

// src/commands/DescribeListenerCertificatesCommand.ts




var _DescribeListenerCertificatesCommand = class _DescribeListenerCertificatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeListenerCertificates", {}).n("ElasticLoadBalancingV2Client", "DescribeListenerCertificatesCommand").f(void 0, void 0).ser(se_DescribeListenerCertificatesCommand).de(de_DescribeListenerCertificatesCommand).build() {
};
__name(_DescribeListenerCertificatesCommand, "DescribeListenerCertificatesCommand");
var DescribeListenerCertificatesCommand = _DescribeListenerCertificatesCommand;

// src/commands/DescribeListenersCommand.ts




var _DescribeListenersCommand = class _DescribeListenersCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeListeners", {}).n("ElasticLoadBalancingV2Client", "DescribeListenersCommand").f(void 0, void 0).ser(se_DescribeListenersCommand).de(de_DescribeListenersCommand).build() {
};
__name(_DescribeListenersCommand, "DescribeListenersCommand");
var DescribeListenersCommand = _DescribeListenersCommand;

// src/commands/DescribeLoadBalancerAttributesCommand.ts




var _DescribeLoadBalancerAttributesCommand = class _DescribeLoadBalancerAttributesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeLoadBalancerAttributes", {}).n("ElasticLoadBalancingV2Client", "DescribeLoadBalancerAttributesCommand").f(void 0, void 0).ser(se_DescribeLoadBalancerAttributesCommand).de(de_DescribeLoadBalancerAttributesCommand).build() {
};
__name(_DescribeLoadBalancerAttributesCommand, "DescribeLoadBalancerAttributesCommand");
var DescribeLoadBalancerAttributesCommand = _DescribeLoadBalancerAttributesCommand;

// src/commands/DescribeLoadBalancersCommand.ts




var _DescribeLoadBalancersCommand = class _DescribeLoadBalancersCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeLoadBalancers", {}).n("ElasticLoadBalancingV2Client", "DescribeLoadBalancersCommand").f(void 0, void 0).ser(se_DescribeLoadBalancersCommand).de(de_DescribeLoadBalancersCommand).build() {
};
__name(_DescribeLoadBalancersCommand, "DescribeLoadBalancersCommand");
var DescribeLoadBalancersCommand = _DescribeLoadBalancersCommand;

// src/commands/DescribeRulesCommand.ts




var _DescribeRulesCommand = class _DescribeRulesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeRules", {}).n("ElasticLoadBalancingV2Client", "DescribeRulesCommand").f(void 0, void 0).ser(se_DescribeRulesCommand).de(de_DescribeRulesCommand).build() {
};
__name(_DescribeRulesCommand, "DescribeRulesCommand");
var DescribeRulesCommand = _DescribeRulesCommand;

// src/commands/DescribeSSLPoliciesCommand.ts




var _DescribeSSLPoliciesCommand = class _DescribeSSLPoliciesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeSSLPolicies", {}).n("ElasticLoadBalancingV2Client", "DescribeSSLPoliciesCommand").f(void 0, void 0).ser(se_DescribeSSLPoliciesCommand).de(de_DescribeSSLPoliciesCommand).build() {
};
__name(_DescribeSSLPoliciesCommand, "DescribeSSLPoliciesCommand");
var DescribeSSLPoliciesCommand = _DescribeSSLPoliciesCommand;

// src/commands/DescribeTagsCommand.ts




var _DescribeTagsCommand = class _DescribeTagsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeTags", {}).n("ElasticLoadBalancingV2Client", "DescribeTagsCommand").f(void 0, void 0).ser(se_DescribeTagsCommand).de(de_DescribeTagsCommand).build() {
};
__name(_DescribeTagsCommand, "DescribeTagsCommand");
var DescribeTagsCommand = _DescribeTagsCommand;

// src/commands/DescribeTargetGroupAttributesCommand.ts




var _DescribeTargetGroupAttributesCommand = class _DescribeTargetGroupAttributesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeTargetGroupAttributes", {}).n("ElasticLoadBalancingV2Client", "DescribeTargetGroupAttributesCommand").f(void 0, void 0).ser(se_DescribeTargetGroupAttributesCommand).de(de_DescribeTargetGroupAttributesCommand).build() {
};
__name(_DescribeTargetGroupAttributesCommand, "DescribeTargetGroupAttributesCommand");
var DescribeTargetGroupAttributesCommand = _DescribeTargetGroupAttributesCommand;

// src/commands/DescribeTargetGroupsCommand.ts




var _DescribeTargetGroupsCommand = class _DescribeTargetGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeTargetGroups", {}).n("ElasticLoadBalancingV2Client", "DescribeTargetGroupsCommand").f(void 0, void 0).ser(se_DescribeTargetGroupsCommand).de(de_DescribeTargetGroupsCommand).build() {
};
__name(_DescribeTargetGroupsCommand, "DescribeTargetGroupsCommand");
var DescribeTargetGroupsCommand = _DescribeTargetGroupsCommand;

// src/commands/DescribeTargetHealthCommand.ts




var _DescribeTargetHealthCommand = class _DescribeTargetHealthCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeTargetHealth", {}).n("ElasticLoadBalancingV2Client", "DescribeTargetHealthCommand").f(void 0, void 0).ser(se_DescribeTargetHealthCommand).de(de_DescribeTargetHealthCommand).build() {
};
__name(_DescribeTargetHealthCommand, "DescribeTargetHealthCommand");
var DescribeTargetHealthCommand = _DescribeTargetHealthCommand;

// src/commands/DescribeTrustStoreAssociationsCommand.ts




var _DescribeTrustStoreAssociationsCommand = class _DescribeTrustStoreAssociationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeTrustStoreAssociations", {}).n("ElasticLoadBalancingV2Client", "DescribeTrustStoreAssociationsCommand").f(void 0, void 0).ser(se_DescribeTrustStoreAssociationsCommand).de(de_DescribeTrustStoreAssociationsCommand).build() {
};
__name(_DescribeTrustStoreAssociationsCommand, "DescribeTrustStoreAssociationsCommand");
var DescribeTrustStoreAssociationsCommand = _DescribeTrustStoreAssociationsCommand;

// src/commands/DescribeTrustStoreRevocationsCommand.ts




var _DescribeTrustStoreRevocationsCommand = class _DescribeTrustStoreRevocationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeTrustStoreRevocations", {}).n("ElasticLoadBalancingV2Client", "DescribeTrustStoreRevocationsCommand").f(void 0, void 0).ser(se_DescribeTrustStoreRevocationsCommand).de(de_DescribeTrustStoreRevocationsCommand).build() {
};
__name(_DescribeTrustStoreRevocationsCommand, "DescribeTrustStoreRevocationsCommand");
var DescribeTrustStoreRevocationsCommand = _DescribeTrustStoreRevocationsCommand;

// src/commands/DescribeTrustStoresCommand.ts




var _DescribeTrustStoresCommand = class _DescribeTrustStoresCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "DescribeTrustStores", {}).n("ElasticLoadBalancingV2Client", "DescribeTrustStoresCommand").f(void 0, void 0).ser(se_DescribeTrustStoresCommand).de(de_DescribeTrustStoresCommand).build() {
};
__name(_DescribeTrustStoresCommand, "DescribeTrustStoresCommand");
var DescribeTrustStoresCommand = _DescribeTrustStoresCommand;

// src/commands/GetTrustStoreCaCertificatesBundleCommand.ts




var _GetTrustStoreCaCertificatesBundleCommand = class _GetTrustStoreCaCertificatesBundleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "GetTrustStoreCaCertificatesBundle", {}).n("ElasticLoadBalancingV2Client", "GetTrustStoreCaCertificatesBundleCommand").f(void 0, void 0).ser(se_GetTrustStoreCaCertificatesBundleCommand).de(de_GetTrustStoreCaCertificatesBundleCommand).build() {
};
__name(_GetTrustStoreCaCertificatesBundleCommand, "GetTrustStoreCaCertificatesBundleCommand");
var GetTrustStoreCaCertificatesBundleCommand = _GetTrustStoreCaCertificatesBundleCommand;

// src/commands/GetTrustStoreRevocationContentCommand.ts




var _GetTrustStoreRevocationContentCommand = class _GetTrustStoreRevocationContentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "GetTrustStoreRevocationContent", {}).n("ElasticLoadBalancingV2Client", "GetTrustStoreRevocationContentCommand").f(void 0, void 0).ser(se_GetTrustStoreRevocationContentCommand).de(de_GetTrustStoreRevocationContentCommand).build() {
};
__name(_GetTrustStoreRevocationContentCommand, "GetTrustStoreRevocationContentCommand");
var GetTrustStoreRevocationContentCommand = _GetTrustStoreRevocationContentCommand;

// src/commands/ModifyListenerCommand.ts




var _ModifyListenerCommand = class _ModifyListenerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "ModifyListener", {}).n("ElasticLoadBalancingV2Client", "ModifyListenerCommand").f(void 0, void 0).ser(se_ModifyListenerCommand).de(de_ModifyListenerCommand).build() {
};
__name(_ModifyListenerCommand, "ModifyListenerCommand");
var ModifyListenerCommand = _ModifyListenerCommand;

// src/commands/ModifyLoadBalancerAttributesCommand.ts




var _ModifyLoadBalancerAttributesCommand = class _ModifyLoadBalancerAttributesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "ModifyLoadBalancerAttributes", {}).n("ElasticLoadBalancingV2Client", "ModifyLoadBalancerAttributesCommand").f(void 0, void 0).ser(se_ModifyLoadBalancerAttributesCommand).de(de_ModifyLoadBalancerAttributesCommand).build() {
};
__name(_ModifyLoadBalancerAttributesCommand, "ModifyLoadBalancerAttributesCommand");
var ModifyLoadBalancerAttributesCommand = _ModifyLoadBalancerAttributesCommand;

// src/commands/ModifyRuleCommand.ts




var _ModifyRuleCommand = class _ModifyRuleCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "ModifyRule", {}).n("ElasticLoadBalancingV2Client", "ModifyRuleCommand").f(void 0, void 0).ser(se_ModifyRuleCommand).de(de_ModifyRuleCommand).build() {
};
__name(_ModifyRuleCommand, "ModifyRuleCommand");
var ModifyRuleCommand = _ModifyRuleCommand;

// src/commands/ModifyTargetGroupAttributesCommand.ts




var _ModifyTargetGroupAttributesCommand = class _ModifyTargetGroupAttributesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "ModifyTargetGroupAttributes", {}).n("ElasticLoadBalancingV2Client", "ModifyTargetGroupAttributesCommand").f(void 0, void 0).ser(se_ModifyTargetGroupAttributesCommand).de(de_ModifyTargetGroupAttributesCommand).build() {
};
__name(_ModifyTargetGroupAttributesCommand, "ModifyTargetGroupAttributesCommand");
var ModifyTargetGroupAttributesCommand = _ModifyTargetGroupAttributesCommand;

// src/commands/ModifyTargetGroupCommand.ts




var _ModifyTargetGroupCommand = class _ModifyTargetGroupCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "ModifyTargetGroup", {}).n("ElasticLoadBalancingV2Client", "ModifyTargetGroupCommand").f(void 0, void 0).ser(se_ModifyTargetGroupCommand).de(de_ModifyTargetGroupCommand).build() {
};
__name(_ModifyTargetGroupCommand, "ModifyTargetGroupCommand");
var ModifyTargetGroupCommand = _ModifyTargetGroupCommand;

// src/commands/ModifyTrustStoreCommand.ts




var _ModifyTrustStoreCommand = class _ModifyTrustStoreCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "ModifyTrustStore", {}).n("ElasticLoadBalancingV2Client", "ModifyTrustStoreCommand").f(void 0, void 0).ser(se_ModifyTrustStoreCommand).de(de_ModifyTrustStoreCommand).build() {
};
__name(_ModifyTrustStoreCommand, "ModifyTrustStoreCommand");
var ModifyTrustStoreCommand = _ModifyTrustStoreCommand;

// src/commands/RegisterTargetsCommand.ts




var _RegisterTargetsCommand = class _RegisterTargetsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "RegisterTargets", {}).n("ElasticLoadBalancingV2Client", "RegisterTargetsCommand").f(void 0, void 0).ser(se_RegisterTargetsCommand).de(de_RegisterTargetsCommand).build() {
};
__name(_RegisterTargetsCommand, "RegisterTargetsCommand");
var RegisterTargetsCommand = _RegisterTargetsCommand;

// src/commands/RemoveListenerCertificatesCommand.ts




var _RemoveListenerCertificatesCommand = class _RemoveListenerCertificatesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "RemoveListenerCertificates", {}).n("ElasticLoadBalancingV2Client", "RemoveListenerCertificatesCommand").f(void 0, void 0).ser(se_RemoveListenerCertificatesCommand).de(de_RemoveListenerCertificatesCommand).build() {
};
__name(_RemoveListenerCertificatesCommand, "RemoveListenerCertificatesCommand");
var RemoveListenerCertificatesCommand = _RemoveListenerCertificatesCommand;

// src/commands/RemoveTagsCommand.ts




var _RemoveTagsCommand = class _RemoveTagsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "RemoveTags", {}).n("ElasticLoadBalancingV2Client", "RemoveTagsCommand").f(void 0, void 0).ser(se_RemoveTagsCommand).de(de_RemoveTagsCommand).build() {
};
__name(_RemoveTagsCommand, "RemoveTagsCommand");
var RemoveTagsCommand = _RemoveTagsCommand;

// src/commands/RemoveTrustStoreRevocationsCommand.ts




var _RemoveTrustStoreRevocationsCommand = class _RemoveTrustStoreRevocationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "RemoveTrustStoreRevocations", {}).n("ElasticLoadBalancingV2Client", "RemoveTrustStoreRevocationsCommand").f(void 0, void 0).ser(se_RemoveTrustStoreRevocationsCommand).de(de_RemoveTrustStoreRevocationsCommand).build() {
};
__name(_RemoveTrustStoreRevocationsCommand, "RemoveTrustStoreRevocationsCommand");
var RemoveTrustStoreRevocationsCommand = _RemoveTrustStoreRevocationsCommand;

// src/commands/SetIpAddressTypeCommand.ts




var _SetIpAddressTypeCommand = class _SetIpAddressTypeCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "SetIpAddressType", {}).n("ElasticLoadBalancingV2Client", "SetIpAddressTypeCommand").f(void 0, void 0).ser(se_SetIpAddressTypeCommand).de(de_SetIpAddressTypeCommand).build() {
};
__name(_SetIpAddressTypeCommand, "SetIpAddressTypeCommand");
var SetIpAddressTypeCommand = _SetIpAddressTypeCommand;

// src/commands/SetRulePrioritiesCommand.ts




var _SetRulePrioritiesCommand = class _SetRulePrioritiesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "SetRulePriorities", {}).n("ElasticLoadBalancingV2Client", "SetRulePrioritiesCommand").f(void 0, void 0).ser(se_SetRulePrioritiesCommand).de(de_SetRulePrioritiesCommand).build() {
};
__name(_SetRulePrioritiesCommand, "SetRulePrioritiesCommand");
var SetRulePrioritiesCommand = _SetRulePrioritiesCommand;

// src/commands/SetSecurityGroupsCommand.ts




var _SetSecurityGroupsCommand = class _SetSecurityGroupsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "SetSecurityGroups", {}).n("ElasticLoadBalancingV2Client", "SetSecurityGroupsCommand").f(void 0, void 0).ser(se_SetSecurityGroupsCommand).de(de_SetSecurityGroupsCommand).build() {
};
__name(_SetSecurityGroupsCommand, "SetSecurityGroupsCommand");
var SetSecurityGroupsCommand = _SetSecurityGroupsCommand;

// src/commands/SetSubnetsCommand.ts




var _SetSubnetsCommand = class _SetSubnetsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("ElasticLoadBalancing_v10", "SetSubnets", {}).n("ElasticLoadBalancingV2Client", "SetSubnetsCommand").f(void 0, void 0).ser(se_SetSubnetsCommand).de(de_SetSubnetsCommand).build() {
};
__name(_SetSubnetsCommand, "SetSubnetsCommand");
var SetSubnetsCommand = _SetSubnetsCommand;

// src/ElasticLoadBalancingV2.ts
var commands = {
  AddListenerCertificatesCommand,
  AddTagsCommand,
  AddTrustStoreRevocationsCommand,
  CreateListenerCommand,
  CreateLoadBalancerCommand,
  CreateRuleCommand,
  CreateTargetGroupCommand,
  CreateTrustStoreCommand,
  DeleteListenerCommand,
  DeleteLoadBalancerCommand,
  DeleteRuleCommand,
  DeleteTargetGroupCommand,
  DeleteTrustStoreCommand,
  DeregisterTargetsCommand,
  DescribeAccountLimitsCommand,
  DescribeListenerCertificatesCommand,
  DescribeListenersCommand,
  DescribeLoadBalancerAttributesCommand,
  DescribeLoadBalancersCommand,
  DescribeRulesCommand,
  DescribeSSLPoliciesCommand,
  DescribeTagsCommand,
  DescribeTargetGroupAttributesCommand,
  DescribeTargetGroupsCommand,
  DescribeTargetHealthCommand,
  DescribeTrustStoreAssociationsCommand,
  DescribeTrustStoreRevocationsCommand,
  DescribeTrustStoresCommand,
  GetTrustStoreCaCertificatesBundleCommand,
  GetTrustStoreRevocationContentCommand,
  ModifyListenerCommand,
  ModifyLoadBalancerAttributesCommand,
  ModifyRuleCommand,
  ModifyTargetGroupCommand,
  ModifyTargetGroupAttributesCommand,
  ModifyTrustStoreCommand,
  RegisterTargetsCommand,
  RemoveListenerCertificatesCommand,
  RemoveTagsCommand,
  RemoveTrustStoreRevocationsCommand,
  SetIpAddressTypeCommand,
  SetRulePrioritiesCommand,
  SetSecurityGroupsCommand,
  SetSubnetsCommand
};
var _ElasticLoadBalancingV2 = class _ElasticLoadBalancingV2 extends ElasticLoadBalancingV2Client {
};
__name(_ElasticLoadBalancingV2, "ElasticLoadBalancingV2");
var ElasticLoadBalancingV2 = _ElasticLoadBalancingV2;
(0, import_smithy_client.createAggregatedClient)(commands, ElasticLoadBalancingV2);

// src/pagination/DescribeListenersPaginator.ts

var paginateDescribeListeners = (0, import_core.createPaginator)(ElasticLoadBalancingV2Client, DescribeListenersCommand, "Marker", "NextMarker", "");

// src/pagination/DescribeLoadBalancersPaginator.ts

var paginateDescribeLoadBalancers = (0, import_core.createPaginator)(ElasticLoadBalancingV2Client, DescribeLoadBalancersCommand, "Marker", "NextMarker", "");

// src/pagination/DescribeTargetGroupsPaginator.ts

var paginateDescribeTargetGroups = (0, import_core.createPaginator)(ElasticLoadBalancingV2Client, DescribeTargetGroupsCommand, "Marker", "NextMarker", "");

// src/pagination/DescribeTrustStoreAssociationsPaginator.ts

var paginateDescribeTrustStoreAssociations = (0, import_core.createPaginator)(ElasticLoadBalancingV2Client, DescribeTrustStoreAssociationsCommand, "Marker", "NextMarker", "PageSize");

// src/pagination/DescribeTrustStoreRevocationsPaginator.ts

var paginateDescribeTrustStoreRevocations = (0, import_core.createPaginator)(ElasticLoadBalancingV2Client, DescribeTrustStoreRevocationsCommand, "Marker", "NextMarker", "PageSize");

// src/pagination/DescribeTrustStoresPaginator.ts

var paginateDescribeTrustStores = (0, import_core.createPaginator)(ElasticLoadBalancingV2Client, DescribeTrustStoresCommand, "Marker", "NextMarker", "PageSize");

// src/waiters/waitForLoadBalancerAvailable.ts
var import_util_waiter = require("@smithy/util-waiter");
var checkState = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeLoadBalancersCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.LoadBalancers);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State.Code;
        });
        return projection_3;
      }, "returnComparator");
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "active";
      }
      if (allStringEq_5) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.LoadBalancers);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State.Code;
        });
        return projection_3;
      }, "returnComparator");
      for (const anyStringEq_4 of returnComparator()) {
        if (anyStringEq_4 == "provisioning") {
          return { state: import_util_waiter.WaiterState.RETRY, reason };
        }
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "LoadBalancerNotFound") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForLoadBalancerAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
}, "waitForLoadBalancerAvailable");
var waitUntilLoadBalancerAvailable = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilLoadBalancerAvailable");

// src/waiters/waitForLoadBalancerExists.ts

var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeLoadBalancersCommand(input));
    reason = result;
    return { state: import_util_waiter.WaiterState.SUCCESS, reason };
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "LoadBalancerNotFound") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForLoadBalancerExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
}, "waitForLoadBalancerExists");
var waitUntilLoadBalancerExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilLoadBalancerExists");

// src/waiters/waitForLoadBalancersDeleted.ts

var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeLoadBalancersCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.LoadBalancers);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.State.Code;
        });
        return projection_3;
      }, "returnComparator");
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "active";
      }
      if (allStringEq_5) {
        return { state: import_util_waiter.WaiterState.RETRY, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "LoadBalancerNotFound") {
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForLoadBalancersDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
}, "waitForLoadBalancersDeleted");
var waitUntilLoadBalancersDeleted = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilLoadBalancersDeleted");

// src/waiters/waitForTargetDeregistered.ts

var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeTargetHealthCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.TargetHealthDescriptions);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.TargetHealth.State;
        });
        return projection_3;
      }, "returnComparator");
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "unused";
      }
      if (allStringEq_5) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidTarget") {
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForTargetDeregistered = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
}, "waitForTargetDeregistered");
var waitUntilTargetDeregistered = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilTargetDeregistered");

// src/waiters/waitForTargetInService.ts

var checkState5 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeTargetHealthCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        const flat_1 = [].concat(...result.TargetHealthDescriptions);
        const projection_3 = flat_1.map((element_2) => {
          return element_2.TargetHealth.State;
        });
        return projection_3;
      }, "returnComparator");
      let allStringEq_5 = returnComparator().length > 0;
      for (const element_4 of returnComparator()) {
        allStringEq_5 = allStringEq_5 && element_4 == "healthy";
      }
      if (allStringEq_5) {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "InvalidInstance") {
      return { state: import_util_waiter.WaiterState.RETRY, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForTargetInService = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
}, "waitForTargetInService");
var waitUntilTargetInService = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 15, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilTargetInService");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  ElasticLoadBalancingV2ServiceException,
  __Client,
  ElasticLoadBalancingV2Client,
  ElasticLoadBalancingV2,
  $Command,
  AddListenerCertificatesCommand,
  AddTagsCommand,
  AddTrustStoreRevocationsCommand,
  CreateListenerCommand,
  CreateLoadBalancerCommand,
  CreateRuleCommand,
  CreateTargetGroupCommand,
  CreateTrustStoreCommand,
  DeleteListenerCommand,
  DeleteLoadBalancerCommand,
  DeleteRuleCommand,
  DeleteTargetGroupCommand,
  DeleteTrustStoreCommand,
  DeregisterTargetsCommand,
  DescribeAccountLimitsCommand,
  DescribeListenerCertificatesCommand,
  DescribeListenersCommand,
  DescribeLoadBalancerAttributesCommand,
  DescribeLoadBalancersCommand,
  DescribeRulesCommand,
  DescribeSSLPoliciesCommand,
  DescribeTagsCommand,
  DescribeTargetGroupAttributesCommand,
  DescribeTargetGroupsCommand,
  DescribeTargetHealthCommand,
  DescribeTrustStoreAssociationsCommand,
  DescribeTrustStoreRevocationsCommand,
  DescribeTrustStoresCommand,
  GetTrustStoreCaCertificatesBundleCommand,
  GetTrustStoreRevocationContentCommand,
  ModifyListenerCommand,
  ModifyLoadBalancerAttributesCommand,
  ModifyRuleCommand,
  ModifyTargetGroupAttributesCommand,
  ModifyTargetGroupCommand,
  ModifyTrustStoreCommand,
  RegisterTargetsCommand,
  RemoveListenerCertificatesCommand,
  RemoveTagsCommand,
  RemoveTrustStoreRevocationsCommand,
  SetIpAddressTypeCommand,
  SetRulePrioritiesCommand,
  SetSecurityGroupsCommand,
  SetSubnetsCommand,
  paginateDescribeListeners,
  paginateDescribeLoadBalancers,
  paginateDescribeTargetGroups,
  paginateDescribeTrustStoreAssociations,
  paginateDescribeTrustStoreRevocations,
  paginateDescribeTrustStores,
  waitForLoadBalancerAvailable,
  waitUntilLoadBalancerAvailable,
  waitForLoadBalancerExists,
  waitUntilLoadBalancerExists,
  waitForLoadBalancersDeleted,
  waitUntilLoadBalancersDeleted,
  waitForTargetDeregistered,
  waitUntilTargetDeregistered,
  waitForTargetInService,
  waitUntilTargetInService,
  AuthenticateCognitoActionConditionalBehaviorEnum,
  AuthenticateOidcActionConditionalBehaviorEnum,
  RedirectActionStatusCodeEnum,
  ActionTypeEnum,
  CertificateNotFoundException,
  ListenerNotFoundException,
  TooManyCertificatesException,
  DuplicateTagKeysException,
  LoadBalancerNotFoundException,
  RuleNotFoundException,
  TargetGroupNotFoundException,
  TooManyTagsException,
  TrustStoreNotFoundException,
  RevocationType,
  InvalidRevocationContentException,
  RevocationContentNotFoundException,
  TooManyTrustStoreRevocationEntriesException,
  AllocationIdNotFoundException,
  ALPNPolicyNotSupportedException,
  MitigationInEffectEnum,
  AnomalyResultEnum,
  AvailabilityZoneNotSupportedException,
  CaCertificatesBundleNotFoundException,
  ProtocolEnum,
  DuplicateListenerException,
  IncompatibleProtocolsException,
  InvalidConfigurationRequestException,
  InvalidLoadBalancerActionException,
  SSLPolicyNotFoundException,
  TargetGroupAssociationLimitException,
  TooManyActionsException,
  TooManyListenersException,
  TooManyRegistrationsForTargetIdException,
  TooManyTargetsException,
  TooManyUniqueTargetGroupsPerLoadBalancerException,
  TrustStoreNotReadyException,
  UnsupportedProtocolException,
  IpAddressType,
  LoadBalancerSchemeEnum,
  LoadBalancerTypeEnum,
  LoadBalancerStateEnum,
  DuplicateLoadBalancerNameException,
  InvalidSchemeException,
  InvalidSecurityGroupException,
  InvalidSubnetException,
  OperationNotPermittedException,
  ResourceInUseException,
  SubnetNotFoundException,
  TooManyLoadBalancersException,
  PriorityInUseException,
  TooManyRulesException,
  TooManyTargetGroupsException,
  TargetGroupIpAddressTypeEnum,
  TargetTypeEnum,
  DuplicateTargetGroupNameException,
  TrustStoreStatus,
  DuplicateTrustStoreNameException,
  InvalidCaCertificatesBundleException,
  TooManyTrustStoresException,
  TrustStoreInUseException,
  InvalidTargetException,
  DescribeTargetHealthInputIncludeEnum,
  TargetHealthReasonEnum,
  TargetHealthStateEnum,
  HealthUnavailableException,
  RevocationIdNotFoundException,
  EnforceSecurityGroupInboundRulesOnPrivateLinkTrafficEnum
});

