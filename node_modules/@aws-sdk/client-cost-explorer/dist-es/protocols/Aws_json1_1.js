import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectString as __expectString, limitedParseDouble as __limitedParseDouble, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { CostExplorerServiceException as __BaseException } from "../models/CostExplorerServiceException";
import { BackfillLimitExceededException, BillExpirationException, DataUnavailableException, GenerationExistsException, InvalidNextTokenException, LimitExceededException, RequestChangedException, ResourceNotFoundException, ServiceQuotaExceededException, TooManyTagsException, UnknownMonitorException, UnknownSubscriptionException, UnresolvableUsageUnitException, } from "../models/models_0";
export const se_CreateAnomalyMonitorCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAnomalyMonitor");
    let body;
    body = JSON.stringify(se_CreateAnomalyMonitorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAnomalySubscriptionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAnomalySubscription");
    let body;
    body = JSON.stringify(se_CreateAnomalySubscriptionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCostCategoryDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCostCategoryDefinition");
    let body;
    body = JSON.stringify(se_CreateCostCategoryDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAnomalyMonitorCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAnomalyMonitor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAnomalySubscriptionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAnomalySubscription");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCostCategoryDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCostCategoryDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCostCategoryDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCostCategoryDefinition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAnomaliesCommand = async (input, context) => {
    const headers = sharedHeaders("GetAnomalies");
    let body;
    body = JSON.stringify(se_GetAnomaliesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAnomalyMonitorsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAnomalyMonitors");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetAnomalySubscriptionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetAnomalySubscriptions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetApproximateUsageRecordsCommand = async (input, context) => {
    const headers = sharedHeaders("GetApproximateUsageRecords");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCostAndUsageCommand = async (input, context) => {
    const headers = sharedHeaders("GetCostAndUsage");
    let body;
    body = JSON.stringify(se_GetCostAndUsageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCostAndUsageWithResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("GetCostAndUsageWithResources");
    let body;
    body = JSON.stringify(se_GetCostAndUsageWithResourcesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCostCategoriesCommand = async (input, context) => {
    const headers = sharedHeaders("GetCostCategories");
    let body;
    body = JSON.stringify(se_GetCostCategoriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCostForecastCommand = async (input, context) => {
    const headers = sharedHeaders("GetCostForecast");
    let body;
    body = JSON.stringify(se_GetCostForecastRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDimensionValuesCommand = async (input, context) => {
    const headers = sharedHeaders("GetDimensionValues");
    let body;
    body = JSON.stringify(se_GetDimensionValuesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetReservationCoverageCommand = async (input, context) => {
    const headers = sharedHeaders("GetReservationCoverage");
    let body;
    body = JSON.stringify(se_GetReservationCoverageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetReservationPurchaseRecommendationCommand = async (input, context) => {
    const headers = sharedHeaders("GetReservationPurchaseRecommendation");
    let body;
    body = JSON.stringify(se_GetReservationPurchaseRecommendationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetReservationUtilizationCommand = async (input, context) => {
    const headers = sharedHeaders("GetReservationUtilization");
    let body;
    body = JSON.stringify(se_GetReservationUtilizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRightsizingRecommendationCommand = async (input, context) => {
    const headers = sharedHeaders("GetRightsizingRecommendation");
    let body;
    body = JSON.stringify(se_GetRightsizingRecommendationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSavingsPlanPurchaseRecommendationDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetSavingsPlanPurchaseRecommendationDetails");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSavingsPlansCoverageCommand = async (input, context) => {
    const headers = sharedHeaders("GetSavingsPlansCoverage");
    let body;
    body = JSON.stringify(se_GetSavingsPlansCoverageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSavingsPlansPurchaseRecommendationCommand = async (input, context) => {
    const headers = sharedHeaders("GetSavingsPlansPurchaseRecommendation");
    let body;
    body = JSON.stringify(se_GetSavingsPlansPurchaseRecommendationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSavingsPlansUtilizationCommand = async (input, context) => {
    const headers = sharedHeaders("GetSavingsPlansUtilization");
    let body;
    body = JSON.stringify(se_GetSavingsPlansUtilizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSavingsPlansUtilizationDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("GetSavingsPlansUtilizationDetails");
    let body;
    body = JSON.stringify(se_GetSavingsPlansUtilizationDetailsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTagsCommand = async (input, context) => {
    const headers = sharedHeaders("GetTags");
    let body;
    body = JSON.stringify(se_GetTagsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetUsageForecastCommand = async (input, context) => {
    const headers = sharedHeaders("GetUsageForecast");
    let body;
    body = JSON.stringify(se_GetUsageForecastRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCostAllocationTagBackfillHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("ListCostAllocationTagBackfillHistory");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCostAllocationTagsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCostAllocationTags");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCostCategoryDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCostCategoryDefinitions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSavingsPlansPurchaseRecommendationGenerationCommand = async (input, context) => {
    const headers = sharedHeaders("ListSavingsPlansPurchaseRecommendationGeneration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ProvideAnomalyFeedbackCommand = async (input, context) => {
    const headers = sharedHeaders("ProvideAnomalyFeedback");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartCostAllocationTagBackfillCommand = async (input, context) => {
    const headers = sharedHeaders("StartCostAllocationTagBackfill");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartSavingsPlansPurchaseRecommendationGenerationCommand = async (input, context) => {
    const headers = sharedHeaders("StartSavingsPlansPurchaseRecommendationGeneration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAnomalyMonitorCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAnomalyMonitor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateAnomalySubscriptionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAnomalySubscription");
    let body;
    body = JSON.stringify(se_UpdateAnomalySubscriptionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCostAllocationTagsStatusCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCostAllocationTagsStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateCostCategoryDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCostCategoryDefinition");
    let body;
    body = JSON.stringify(se_UpdateCostCategoryDefinitionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CreateAnomalyMonitorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAnomalySubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCostCategoryDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAnomalyMonitorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAnomalySubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteCostCategoryDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCostCategoryDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCostCategoryDefinitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAnomaliesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAnomaliesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAnomalyMonitorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAnomalyMonitorsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetAnomalySubscriptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetAnomalySubscriptionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetApproximateUsageRecordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCostAndUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCostAndUsageWithResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCostCategoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCostForecastCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDimensionValuesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetReservationCoverageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetReservationPurchaseRecommendationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetReservationUtilizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRightsizingRecommendationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSavingsPlanPurchaseRecommendationDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSavingsPlansCoverageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSavingsPlansPurchaseRecommendationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSavingsPlansUtilizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSavingsPlansUtilizationDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetUsageForecastCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCostAllocationTagBackfillHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCostAllocationTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCostCategoryDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSavingsPlansPurchaseRecommendationGenerationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ProvideAnomalyFeedbackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartCostAllocationTagBackfillCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartSavingsPlansPurchaseRecommendationGenerationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAnomalyMonitorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateAnomalySubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCostAllocationTagsStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateCostCategoryDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "LimitExceededException":
        case "com.amazonaws.costexplorer#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "UnknownMonitorException":
        case "com.amazonaws.costexplorer#UnknownMonitorException":
            throw await de_UnknownMonitorExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.costexplorer#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "UnknownSubscriptionException":
        case "com.amazonaws.costexplorer#UnknownSubscriptionException":
            throw await de_UnknownSubscriptionExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.costexplorer#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "InvalidNextTokenException":
        case "com.amazonaws.costexplorer#InvalidNextTokenException":
            throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
        case "DataUnavailableException":
        case "com.amazonaws.costexplorer#DataUnavailableException":
            throw await de_DataUnavailableExceptionRes(parsedOutput, context);
        case "BillExpirationException":
        case "com.amazonaws.costexplorer#BillExpirationException":
            throw await de_BillExpirationExceptionRes(parsedOutput, context);
        case "RequestChangedException":
        case "com.amazonaws.costexplorer#RequestChangedException":
            throw await de_RequestChangedExceptionRes(parsedOutput, context);
        case "UnresolvableUsageUnitException":
        case "com.amazonaws.costexplorer#UnresolvableUsageUnitException":
            throw await de_UnresolvableUsageUnitExceptionRes(parsedOutput, context);
        case "BackfillLimitExceededException":
        case "com.amazonaws.costexplorer#BackfillLimitExceededException":
            throw await de_BackfillLimitExceededExceptionRes(parsedOutput, context);
        case "GenerationExistsException":
        case "com.amazonaws.costexplorer#GenerationExistsException":
            throw await de_GenerationExistsExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.costexplorer#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_BackfillLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new BackfillLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_BillExpirationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new BillExpirationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_DataUnavailableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new DataUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_GenerationExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new GenerationExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidNextTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidNextTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_RequestChangedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new RequestChangedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnknownMonitorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnknownMonitorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnknownSubscriptionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnknownSubscriptionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnresolvableUsageUnitExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnresolvableUsageUnitException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AnomalyMonitor = (input, context) => {
    return take(input, {
        CreationDate: [],
        DimensionalValueCount: [],
        LastEvaluatedDate: [],
        LastUpdatedDate: [],
        MonitorArn: [],
        MonitorDimension: [],
        MonitorName: [],
        MonitorSpecification: (_) => se_Expression(_, context),
        MonitorType: [],
    });
};
const se_AnomalySubscription = (input, context) => {
    return take(input, {
        AccountId: [],
        Frequency: [],
        MonitorArnList: _json,
        Subscribers: _json,
        SubscriptionArn: [],
        SubscriptionName: [],
        Threshold: __serializeFloat,
        ThresholdExpression: (_) => se_Expression(_, context),
    });
};
const se_CostCategoryRule = (input, context) => {
    return take(input, {
        InheritedValue: _json,
        Rule: (_) => se_Expression(_, context),
        Type: [],
        Value: [],
    });
};
const se_CostCategoryRulesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CostCategoryRule(entry, context);
    });
};
const se_CreateAnomalyMonitorRequest = (input, context) => {
    return take(input, {
        AnomalyMonitor: (_) => se_AnomalyMonitor(_, context),
        ResourceTags: _json,
    });
};
const se_CreateAnomalySubscriptionRequest = (input, context) => {
    return take(input, {
        AnomalySubscription: (_) => se_AnomalySubscription(_, context),
        ResourceTags: _json,
    });
};
const se_CreateCostCategoryDefinitionRequest = (input, context) => {
    return take(input, {
        DefaultValue: [],
        EffectiveStart: [],
        Name: [],
        ResourceTags: _json,
        RuleVersion: [],
        Rules: (_) => se_CostCategoryRulesList(_, context),
        SplitChargeRules: _json,
    });
};
const se_Expression = (input, context) => {
    return take(input, {
        And: (_) => se_Expressions(_, context),
        CostCategories: _json,
        Dimensions: _json,
        Not: (_) => se_Expression(_, context),
        Or: (_) => se_Expressions(_, context),
        Tags: _json,
    });
};
const se_Expressions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Expression(entry, context);
    });
};
const se_GetAnomaliesRequest = (input, context) => {
    return take(input, {
        DateInterval: _json,
        Feedback: [],
        MaxResults: [],
        MonitorArn: [],
        NextPageToken: [],
        TotalImpact: (_) => se_TotalImpactFilter(_, context),
    });
};
const se_GetCostAndUsageRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_Expression(_, context),
        Granularity: [],
        GroupBy: _json,
        Metrics: _json,
        NextPageToken: [],
        TimePeriod: _json,
    });
};
const se_GetCostAndUsageWithResourcesRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_Expression(_, context),
        Granularity: [],
        GroupBy: _json,
        Metrics: _json,
        NextPageToken: [],
        TimePeriod: _json,
    });
};
const se_GetCostCategoriesRequest = (input, context) => {
    return take(input, {
        CostCategoryName: [],
        Filter: (_) => se_Expression(_, context),
        MaxResults: [],
        NextPageToken: [],
        SearchString: [],
        SortBy: _json,
        TimePeriod: _json,
    });
};
const se_GetCostForecastRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_Expression(_, context),
        Granularity: [],
        Metric: [],
        PredictionIntervalLevel: [],
        TimePeriod: _json,
    });
};
const se_GetDimensionValuesRequest = (input, context) => {
    return take(input, {
        Context: [],
        Dimension: [],
        Filter: (_) => se_Expression(_, context),
        MaxResults: [],
        NextPageToken: [],
        SearchString: [],
        SortBy: _json,
        TimePeriod: _json,
    });
};
const se_GetReservationCoverageRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_Expression(_, context),
        Granularity: [],
        GroupBy: _json,
        MaxResults: [],
        Metrics: _json,
        NextPageToken: [],
        SortBy: _json,
        TimePeriod: _json,
    });
};
const se_GetReservationPurchaseRecommendationRequest = (input, context) => {
    return take(input, {
        AccountId: [],
        AccountScope: [],
        Filter: (_) => se_Expression(_, context),
        LookbackPeriodInDays: [],
        NextPageToken: [],
        PageSize: [],
        PaymentOption: [],
        Service: [],
        ServiceSpecification: _json,
        TermInYears: [],
    });
};
const se_GetReservationUtilizationRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_Expression(_, context),
        Granularity: [],
        GroupBy: _json,
        MaxResults: [],
        NextPageToken: [],
        SortBy: _json,
        TimePeriod: _json,
    });
};
const se_GetRightsizingRecommendationRequest = (input, context) => {
    return take(input, {
        Configuration: _json,
        Filter: (_) => se_Expression(_, context),
        NextPageToken: [],
        PageSize: [],
        Service: [],
    });
};
const se_GetSavingsPlansCoverageRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_Expression(_, context),
        Granularity: [],
        GroupBy: _json,
        MaxResults: [],
        Metrics: _json,
        NextToken: [],
        SortBy: _json,
        TimePeriod: _json,
    });
};
const se_GetSavingsPlansPurchaseRecommendationRequest = (input, context) => {
    return take(input, {
        AccountScope: [],
        Filter: (_) => se_Expression(_, context),
        LookbackPeriodInDays: [],
        NextPageToken: [],
        PageSize: [],
        PaymentOption: [],
        SavingsPlansType: [],
        TermInYears: [],
    });
};
const se_GetSavingsPlansUtilizationDetailsRequest = (input, context) => {
    return take(input, {
        DataType: _json,
        Filter: (_) => se_Expression(_, context),
        MaxResults: [],
        NextToken: [],
        SortBy: _json,
        TimePeriod: _json,
    });
};
const se_GetSavingsPlansUtilizationRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_Expression(_, context),
        Granularity: [],
        SortBy: _json,
        TimePeriod: _json,
    });
};
const se_GetTagsRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_Expression(_, context),
        MaxResults: [],
        NextPageToken: [],
        SearchString: [],
        SortBy: _json,
        TagKey: [],
        TimePeriod: _json,
    });
};
const se_GetUsageForecastRequest = (input, context) => {
    return take(input, {
        Filter: (_) => se_Expression(_, context),
        Granularity: [],
        Metric: [],
        PredictionIntervalLevel: [],
        TimePeriod: _json,
    });
};
const se_TotalImpactFilter = (input, context) => {
    return take(input, {
        EndValue: __serializeFloat,
        NumericOperator: [],
        StartValue: __serializeFloat,
    });
};
const se_UpdateAnomalySubscriptionRequest = (input, context) => {
    return take(input, {
        Frequency: [],
        MonitorArnList: _json,
        Subscribers: _json,
        SubscriptionArn: [],
        SubscriptionName: [],
        Threshold: __serializeFloat,
        ThresholdExpression: (_) => se_Expression(_, context),
    });
};
const se_UpdateCostCategoryDefinitionRequest = (input, context) => {
    return take(input, {
        CostCategoryArn: [],
        DefaultValue: [],
        EffectiveStart: [],
        RuleVersion: [],
        Rules: (_) => se_CostCategoryRulesList(_, context),
        SplitChargeRules: _json,
    });
};
const de_Anomalies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Anomaly(entry, context);
    });
    return retVal;
};
const de_Anomaly = (output, context) => {
    return take(output, {
        AnomalyEndDate: __expectString,
        AnomalyId: __expectString,
        AnomalyScore: (_) => de_AnomalyScore(_, context),
        AnomalyStartDate: __expectString,
        DimensionValue: __expectString,
        Feedback: __expectString,
        Impact: (_) => de_Impact(_, context),
        MonitorArn: __expectString,
        RootCauses: _json,
    });
};
const de_AnomalyMonitor = (output, context) => {
    return take(output, {
        CreationDate: __expectString,
        DimensionalValueCount: __expectInt32,
        LastEvaluatedDate: __expectString,
        LastUpdatedDate: __expectString,
        MonitorArn: __expectString,
        MonitorDimension: __expectString,
        MonitorName: __expectString,
        MonitorSpecification: (_) => de_Expression(_, context),
        MonitorType: __expectString,
    });
};
const de_AnomalyMonitors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnomalyMonitor(entry, context);
    });
    return retVal;
};
const de_AnomalyScore = (output, context) => {
    return take(output, {
        CurrentScore: __limitedParseDouble,
        MaxScore: __limitedParseDouble,
    });
};
const de_AnomalySubscription = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Frequency: __expectString,
        MonitorArnList: _json,
        Subscribers: _json,
        SubscriptionArn: __expectString,
        SubscriptionName: __expectString,
        Threshold: __limitedParseDouble,
        ThresholdExpression: (_) => de_Expression(_, context),
    });
};
const de_AnomalySubscriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnomalySubscription(entry, context);
    });
    return retVal;
};
const de_CostCategory = (output, context) => {
    return take(output, {
        CostCategoryArn: __expectString,
        DefaultValue: __expectString,
        EffectiveEnd: __expectString,
        EffectiveStart: __expectString,
        Name: __expectString,
        ProcessingStatus: _json,
        RuleVersion: __expectString,
        Rules: (_) => de_CostCategoryRulesList(_, context),
        SplitChargeRules: _json,
    });
};
const de_CostCategoryRule = (output, context) => {
    return take(output, {
        InheritedValue: _json,
        Rule: (_) => de_Expression(_, context),
        Type: __expectString,
        Value: __expectString,
    });
};
const de_CostCategoryRulesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CostCategoryRule(entry, context);
    });
    return retVal;
};
const de_DescribeCostCategoryDefinitionResponse = (output, context) => {
    return take(output, {
        CostCategory: (_) => de_CostCategory(_, context),
    });
};
const de_Expression = (output, context) => {
    return take(output, {
        And: (_) => de_Expressions(_, context),
        CostCategories: _json,
        Dimensions: _json,
        Not: (_) => de_Expression(_, context),
        Or: (_) => de_Expressions(_, context),
        Tags: _json,
    });
};
const de_Expressions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Expression(entry, context);
    });
    return retVal;
};
const de_GetAnomaliesResponse = (output, context) => {
    return take(output, {
        Anomalies: (_) => de_Anomalies(_, context),
        NextPageToken: __expectString,
    });
};
const de_GetAnomalyMonitorsResponse = (output, context) => {
    return take(output, {
        AnomalyMonitors: (_) => de_AnomalyMonitors(_, context),
        NextPageToken: __expectString,
    });
};
const de_GetAnomalySubscriptionsResponse = (output, context) => {
    return take(output, {
        AnomalySubscriptions: (_) => de_AnomalySubscriptions(_, context),
        NextPageToken: __expectString,
    });
};
const de_Impact = (output, context) => {
    return take(output, {
        MaxImpact: __limitedParseDouble,
        TotalActualSpend: __limitedParseDouble,
        TotalExpectedSpend: __limitedParseDouble,
        TotalImpact: __limitedParseDouble,
        TotalImpactPercentage: __limitedParseDouble,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSInsightsIndexService.${operation}`,
    };
}
