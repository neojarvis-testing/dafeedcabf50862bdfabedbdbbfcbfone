import { CostExplorerServiceException as __BaseException } from "./CostExplorerServiceException";
export const AccountScope = {
    LINKED: "LINKED",
    PAYER: "PAYER",
};
export const AnomalyFeedbackType = {
    NO: "NO",
    PLANNED_ACTIVITY: "PLANNED_ACTIVITY",
    YES: "YES",
};
export const MonitorDimension = {
    SERVICE: "SERVICE",
};
export const MatchOption = {
    ABSENT: "ABSENT",
    CASE_INSENSITIVE: "CASE_INSENSITIVE",
    CASE_SENSITIVE: "CASE_SENSITIVE",
    CONTAINS: "CONTAINS",
    ENDS_WITH: "ENDS_WITH",
    EQUALS: "EQUALS",
    GREATER_THAN_OR_EQUAL: "GREATER_THAN_OR_EQUAL",
    STARTS_WITH: "STARTS_WITH",
};
export const Dimension = {
    AGREEMENT_END_DATE_TIME_AFTER: "AGREEMENT_END_DATE_TIME_AFTER",
    AGREEMENT_END_DATE_TIME_BEFORE: "AGREEMENT_END_DATE_TIME_BEFORE",
    ANOMALY_TOTAL_IMPACT_ABSOLUTE: "ANOMALY_TOTAL_IMPACT_ABSOLUTE",
    ANOMALY_TOTAL_IMPACT_PERCENTAGE: "ANOMALY_TOTAL_IMPACT_PERCENTAGE",
    AZ: "AZ",
    BILLING_ENTITY: "BILLING_ENTITY",
    CACHE_ENGINE: "CACHE_ENGINE",
    DATABASE_ENGINE: "DATABASE_ENGINE",
    DEPLOYMENT_OPTION: "DEPLOYMENT_OPTION",
    INSTANCE_TYPE: "INSTANCE_TYPE",
    INSTANCE_TYPE_FAMILY: "INSTANCE_TYPE_FAMILY",
    INVOICING_ENTITY: "INVOICING_ENTITY",
    LEGAL_ENTITY_NAME: "LEGAL_ENTITY_NAME",
    LINKED_ACCOUNT: "LINKED_ACCOUNT",
    LINKED_ACCOUNT_NAME: "LINKED_ACCOUNT_NAME",
    OPERATING_SYSTEM: "OPERATING_SYSTEM",
    OPERATION: "OPERATION",
    PAYMENT_OPTION: "PAYMENT_OPTION",
    PLATFORM: "PLATFORM",
    PURCHASE_TYPE: "PURCHASE_TYPE",
    RECORD_TYPE: "RECORD_TYPE",
    REGION: "REGION",
    RESERVATION_ID: "RESERVATION_ID",
    RESOURCE_ID: "RESOURCE_ID",
    RIGHTSIZING_TYPE: "RIGHTSIZING_TYPE",
    SAVINGS_PLANS_TYPE: "SAVINGS_PLANS_TYPE",
    SAVINGS_PLAN_ARN: "SAVINGS_PLAN_ARN",
    SCOPE: "SCOPE",
    SERVICE: "SERVICE",
    SERVICE_CODE: "SERVICE_CODE",
    SUBSCRIPTION_ID: "SUBSCRIPTION_ID",
    TENANCY: "TENANCY",
    USAGE_TYPE: "USAGE_TYPE",
    USAGE_TYPE_GROUP: "USAGE_TYPE_GROUP",
};
export const MonitorType = {
    CUSTOM: "CUSTOM",
    DIMENSIONAL: "DIMENSIONAL",
};
export const AnomalySubscriptionFrequency = {
    DAILY: "DAILY",
    IMMEDIATE: "IMMEDIATE",
    WEEKLY: "WEEKLY",
};
export const SubscriberStatus = {
    CONFIRMED: "CONFIRMED",
    DECLINED: "DECLINED",
};
export const SubscriberType = {
    EMAIL: "EMAIL",
    SNS: "SNS",
};
export const ApproximationDimension = {
    RESOURCE: "RESOURCE",
    SERVICE: "SERVICE",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class UnknownMonitorException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnknownMonitorException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnknownMonitorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnknownMonitorException.prototype);
        this.Message = opts.Message;
    }
}
export const CostCategoryInheritedValueDimensionName = {
    LINKED_ACCOUNT_NAME: "LINKED_ACCOUNT_NAME",
    TAG: "TAG",
};
export const CostCategoryRuleType = {
    INHERITED_VALUE: "INHERITED_VALUE",
    REGULAR: "REGULAR",
};
export const CostCategoryRuleVersion = {
    CostCategoryExpressionV1: "CostCategoryExpression.v1",
};
export const CostCategorySplitChargeMethod = {
    EVEN: "EVEN",
    FIXED: "FIXED",
    PROPORTIONAL: "PROPORTIONAL",
};
export const CostCategorySplitChargeRuleParameterType = {
    ALLOCATION_PERCENTAGES: "ALLOCATION_PERCENTAGES",
};
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class UnknownSubscriptionException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnknownSubscriptionException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnknownSubscriptionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnknownSubscriptionException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceName = opts.ResourceName;
    }
}
export const CostCategoryStatusComponent = {
    COST_EXPLORER: "COST_EXPLORER",
};
export const CostCategoryStatus = {
    APPLIED: "APPLIED",
    PROCESSING: "PROCESSING",
};
export const NumericOperator = {
    BETWEEN: "BETWEEN",
    EQUAL: "EQUAL",
    GREATER_THAN: "GREATER_THAN",
    GREATER_THAN_OR_EQUAL: "GREATER_THAN_OR_EQUAL",
    LESS_THAN: "LESS_THAN",
    LESS_THAN_OR_EQUAL: "LESS_THAN_OR_EQUAL",
};
export class InvalidNextTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
export class DataUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "DataUnavailableException",
            $fault: "client",
            ...opts,
        });
        this.name = "DataUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DataUnavailableException.prototype);
        this.Message = opts.Message;
    }
}
export const Granularity = {
    DAILY: "DAILY",
    HOURLY: "HOURLY",
    MONTHLY: "MONTHLY",
};
export class BillExpirationException extends __BaseException {
    constructor(opts) {
        super({
            name: "BillExpirationException",
            $fault: "client",
            ...opts,
        });
        this.name = "BillExpirationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BillExpirationException.prototype);
        this.Message = opts.Message;
    }
}
export const GroupDefinitionType = {
    COST_CATEGORY: "COST_CATEGORY",
    DIMENSION: "DIMENSION",
    TAG: "TAG",
};
export class RequestChangedException extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestChangedException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestChangedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestChangedException.prototype);
        this.Message = opts.Message;
    }
}
export const SortOrder = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const Metric = {
    AMORTIZED_COST: "AMORTIZED_COST",
    BLENDED_COST: "BLENDED_COST",
    NET_AMORTIZED_COST: "NET_AMORTIZED_COST",
    NET_UNBLENDED_COST: "NET_UNBLENDED_COST",
    NORMALIZED_USAGE_AMOUNT: "NORMALIZED_USAGE_AMOUNT",
    UNBLENDED_COST: "UNBLENDED_COST",
    USAGE_QUANTITY: "USAGE_QUANTITY",
};
export const Context = {
    COST_AND_USAGE: "COST_AND_USAGE",
    RESERVATIONS: "RESERVATIONS",
    SAVINGS_PLANS: "SAVINGS_PLANS",
};
export const LookbackPeriodInDays = {
    SEVEN_DAYS: "SEVEN_DAYS",
    SIXTY_DAYS: "SIXTY_DAYS",
    THIRTY_DAYS: "THIRTY_DAYS",
};
export const PaymentOption = {
    ALL_UPFRONT: "ALL_UPFRONT",
    HEAVY_UTILIZATION: "HEAVY_UTILIZATION",
    LIGHT_UTILIZATION: "LIGHT_UTILIZATION",
    MEDIUM_UTILIZATION: "MEDIUM_UTILIZATION",
    NO_UPFRONT: "NO_UPFRONT",
    PARTIAL_UPFRONT: "PARTIAL_UPFRONT",
};
export const OfferingClass = {
    CONVERTIBLE: "CONVERTIBLE",
    STANDARD: "STANDARD",
};
export const TermInYears = {
    ONE_YEAR: "ONE_YEAR",
    THREE_YEARS: "THREE_YEARS",
};
export const RecommendationTarget = {
    CROSS_INSTANCE_FAMILY: "CROSS_INSTANCE_FAMILY",
    SAME_INSTANCE_FAMILY: "SAME_INSTANCE_FAMILY",
};
export const FindingReasonCode = {
    CPU_OVER_PROVISIONED: "CPU_OVER_PROVISIONED",
    CPU_UNDER_PROVISIONED: "CPU_UNDER_PROVISIONED",
    DISK_IOPS_OVER_PROVISIONED: "DISK_IOPS_OVER_PROVISIONED",
    DISK_IOPS_UNDER_PROVISIONED: "DISK_IOPS_UNDER_PROVISIONED",
    DISK_THROUGHPUT_OVER_PROVISIONED: "DISK_THROUGHPUT_OVER_PROVISIONED",
    DISK_THROUGHPUT_UNDER_PROVISIONED: "DISK_THROUGHPUT_UNDER_PROVISIONED",
    EBS_IOPS_OVER_PROVISIONED: "EBS_IOPS_OVER_PROVISIONED",
    EBS_IOPS_UNDER_PROVISIONED: "EBS_IOPS_UNDER_PROVISIONED",
    EBS_THROUGHPUT_OVER_PROVISIONED: "EBS_THROUGHPUT_OVER_PROVISIONED",
    EBS_THROUGHPUT_UNDER_PROVISIONED: "EBS_THROUGHPUT_UNDER_PROVISIONED",
    MEMORY_OVER_PROVISIONED: "MEMORY_OVER_PROVISIONED",
    MEMORY_UNDER_PROVISIONED: "MEMORY_UNDER_PROVISIONED",
    NETWORK_BANDWIDTH_OVER_PROVISIONED: "NETWORK_BANDWIDTH_OVER_PROVISIONED",
    NETWORK_BANDWIDTH_UNDER_PROVISIONED: "NETWORK_BANDWIDTH_UNDER_PROVISIONED",
    NETWORK_PPS_OVER_PROVISIONED: "NETWORK_PPS_OVER_PROVISIONED",
    NETWORK_PPS_UNDER_PROVISIONED: "NETWORK_PPS_UNDER_PROVISIONED",
};
export const PlatformDifference = {
    HYPERVISOR: "HYPERVISOR",
    INSTANCE_STORE_AVAILABILITY: "INSTANCE_STORE_AVAILABILITY",
    NETWORK_INTERFACE: "NETWORK_INTERFACE",
    STORAGE_INTERFACE: "STORAGE_INTERFACE",
    VIRTUALIZATION_TYPE: "VIRTUALIZATION_TYPE",
};
export const RightsizingType = {
    MODIFY: "MODIFY",
    TERMINATE: "TERMINATE",
};
export const SupportedSavingsPlansType = {
    COMPUTE_SP: "COMPUTE_SP",
    EC2_INSTANCE_SP: "EC2_INSTANCE_SP",
    SAGEMAKER_SP: "SAGEMAKER_SP",
};
export const SavingsPlansDataType = {
    AMORTIZED_COMMITMENT: "AMORTIZED_COMMITMENT",
    ATTRIBUTES: "ATTRIBUTES",
    SAVINGS: "SAVINGS",
    UTILIZATION: "UTILIZATION",
};
export class UnresolvableUsageUnitException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnresolvableUsageUnitException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnresolvableUsageUnitException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnresolvableUsageUnitException.prototype);
        this.Message = opts.Message;
    }
}
export const CostAllocationTagBackfillStatus = {
    FAILED: "FAILED",
    PROCESSING: "PROCESSING",
    SUCCEEDED: "SUCCEEDED",
};
export const CostAllocationTagStatus = {
    ACTIVE: "Active",
    INACTIVE: "Inactive",
};
export const CostAllocationTagType = {
    AWS_GENERATED: "AWSGenerated",
    USER_DEFINED: "UserDefined",
};
export const GenerationStatus = {
    FAILED: "FAILED",
    PROCESSING: "PROCESSING",
    SUCCEEDED: "SUCCEEDED",
};
export class BackfillLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "BackfillLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "BackfillLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackfillLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class GenerationExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "GenerationExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "GenerationExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GenerationExistsException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
        this.Message = opts.Message;
        this.ResourceName = opts.ResourceName;
    }
}
