import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { CostExplorerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CostExplorerClient";
import { GetApproximateUsageRecordsRequest, GetApproximateUsageRecordsResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link GetApproximateUsageRecordsCommand}.
 */
export interface GetApproximateUsageRecordsCommandInput extends GetApproximateUsageRecordsRequest {
}
/**
 * @public
 *
 * The output of {@link GetApproximateUsageRecordsCommand}.
 */
export interface GetApproximateUsageRecordsCommandOutput extends GetApproximateUsageRecordsResponse, __MetadataBearer {
}
declare const GetApproximateUsageRecordsCommand_base: {
    new (input: GetApproximateUsageRecordsCommandInput): import("@smithy/smithy-client").CommandImpl<GetApproximateUsageRecordsCommandInput, GetApproximateUsageRecordsCommandOutput, CostExplorerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (__0_0: GetApproximateUsageRecordsCommandInput): import("@smithy/smithy-client").CommandImpl<GetApproximateUsageRecordsCommandInput, GetApproximateUsageRecordsCommandOutput, CostExplorerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Retrieves estimated usage records for hourly granularity or resource-level data at daily
 *       granularity.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CostExplorerClient, GetApproximateUsageRecordsCommand } from "@aws-sdk/client-cost-explorer"; // ES Modules import
 * // const { CostExplorerClient, GetApproximateUsageRecordsCommand } = require("@aws-sdk/client-cost-explorer"); // CommonJS import
 * const client = new CostExplorerClient(config);
 * const input = { // GetApproximateUsageRecordsRequest
 *   Granularity: "DAILY" || "MONTHLY" || "HOURLY", // required
 *   Services: [ // UsageServices
 *     "STRING_VALUE",
 *   ],
 *   ApproximationDimension: "SERVICE" || "RESOURCE", // required
 * };
 * const command = new GetApproximateUsageRecordsCommand(input);
 * const response = await client.send(command);
 * // { // GetApproximateUsageRecordsResponse
 * //   Services: { // ApproximateUsageRecordsPerService
 * //     "<keys>": Number("long"),
 * //   },
 * //   TotalRecords: Number("long"),
 * //   LookbackPeriod: { // DateInterval
 * //     Start: "STRING_VALUE", // required
 * //     End: "STRING_VALUE", // required
 * //   },
 * // };
 *
 * ```
 *
 * @param GetApproximateUsageRecordsCommandInput - {@link GetApproximateUsageRecordsCommandInput}
 * @returns {@link GetApproximateUsageRecordsCommandOutput}
 * @see {@link GetApproximateUsageRecordsCommandInput} for command's `input` shape.
 * @see {@link GetApproximateUsageRecordsCommandOutput} for command's `response` shape.
 * @see {@link CostExplorerClientResolvedConfig | config} for CostExplorerClient's `config` shape.
 *
 * @throws {@link DataUnavailableException} (client fault)
 *  <p>The requested data is unavailable.</p>
 *
 * @throws {@link LimitExceededException} (client fault)
 *  <p>You made too many calls in a short period of time. Try again later.</p>
 *
 * @throws {@link CostExplorerServiceException}
 * <p>Base exception class for all service exceptions from CostExplorer service.</p>
 *
 * @public
 */
export declare class GetApproximateUsageRecordsCommand extends GetApproximateUsageRecordsCommand_base {
}
