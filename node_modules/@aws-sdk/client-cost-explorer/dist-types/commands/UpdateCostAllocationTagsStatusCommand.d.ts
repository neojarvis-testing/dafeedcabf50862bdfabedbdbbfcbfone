import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { CostExplorerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../CostExplorerClient";
import { UpdateCostAllocationTagsStatusRequest, UpdateCostAllocationTagsStatusResponse } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link UpdateCostAllocationTagsStatusCommand}.
 */
export interface UpdateCostAllocationTagsStatusCommandInput extends UpdateCostAllocationTagsStatusRequest {
}
/**
 * @public
 *
 * The output of {@link UpdateCostAllocationTagsStatusCommand}.
 */
export interface UpdateCostAllocationTagsStatusCommandOutput extends UpdateCostAllocationTagsStatusResponse, __MetadataBearer {
}
declare const UpdateCostAllocationTagsStatusCommand_base: {
    new (input: UpdateCostAllocationTagsStatusCommandInput): import("@smithy/smithy-client").CommandImpl<UpdateCostAllocationTagsStatusCommandInput, UpdateCostAllocationTagsStatusCommandOutput, CostExplorerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (__0_0: UpdateCostAllocationTagsStatusCommandInput): import("@smithy/smithy-client").CommandImpl<UpdateCostAllocationTagsStatusCommandInput, UpdateCostAllocationTagsStatusCommandOutput, CostExplorerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Updates status for cost allocation tags in bulk, with maximum batch size of 20. If the tag
 *       status that's updated is the same as the existing tag status, the request doesn't fail.
 *       Instead, it doesn't have any effect on the tag status (for example, activating the active
 *       tag). </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { CostExplorerClient, UpdateCostAllocationTagsStatusCommand } from "@aws-sdk/client-cost-explorer"; // ES Modules import
 * // const { CostExplorerClient, UpdateCostAllocationTagsStatusCommand } = require("@aws-sdk/client-cost-explorer"); // CommonJS import
 * const client = new CostExplorerClient(config);
 * const input = { // UpdateCostAllocationTagsStatusRequest
 *   CostAllocationTagsStatus: [ // CostAllocationTagStatusList // required
 *     { // CostAllocationTagStatusEntry
 *       TagKey: "STRING_VALUE", // required
 *       Status: "Active" || "Inactive", // required
 *     },
 *   ],
 * };
 * const command = new UpdateCostAllocationTagsStatusCommand(input);
 * const response = await client.send(command);
 * // { // UpdateCostAllocationTagsStatusResponse
 * //   Errors: [ // UpdateCostAllocationTagsStatusErrors
 * //     { // UpdateCostAllocationTagsStatusError
 * //       TagKey: "STRING_VALUE",
 * //       Code: "STRING_VALUE",
 * //       Message: "STRING_VALUE",
 * //     },
 * //   ],
 * // };
 *
 * ```
 *
 * @param UpdateCostAllocationTagsStatusCommandInput - {@link UpdateCostAllocationTagsStatusCommandInput}
 * @returns {@link UpdateCostAllocationTagsStatusCommandOutput}
 * @see {@link UpdateCostAllocationTagsStatusCommandInput} for command's `input` shape.
 * @see {@link UpdateCostAllocationTagsStatusCommandOutput} for command's `response` shape.
 * @see {@link CostExplorerClientResolvedConfig | config} for CostExplorerClient's `config` shape.
 *
 * @throws {@link LimitExceededException} (client fault)
 *  <p>You made too many calls in a short period of time. Try again later.</p>
 *
 * @throws {@link CostExplorerServiceException}
 * <p>Base exception class for all service exceptions from CostExplorer service.</p>
 *
 * @public
 */
export declare class UpdateCostAllocationTagsStatusCommand extends UpdateCostAllocationTagsStatusCommand_base {
}
