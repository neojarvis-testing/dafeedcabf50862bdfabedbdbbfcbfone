"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  BatchCheckLayerAvailabilityCommand: () => BatchCheckLayerAvailabilityCommand,
  BatchDeleteImageCommand: () => BatchDeleteImageCommand,
  CompleteLayerUploadCommand: () => CompleteLayerUploadCommand,
  CreateRepositoryCommand: () => CreateRepositoryCommand,
  DeleteRepositoryCommand: () => DeleteRepositoryCommand,
  DeleteRepositoryPolicyCommand: () => DeleteRepositoryPolicyCommand,
  DescribeImageTagsCommand: () => DescribeImageTagsCommand,
  DescribeImagesCommand: () => DescribeImagesCommand,
  DescribeRegistriesCommand: () => DescribeRegistriesCommand,
  DescribeRepositoriesCommand: () => DescribeRepositoriesCommand,
  ECRPUBLIC: () => ECRPUBLIC,
  ECRPUBLICClient: () => ECRPUBLICClient,
  ECRPUBLICServiceException: () => ECRPUBLICServiceException,
  EmptyUploadException: () => EmptyUploadException,
  GetAuthorizationTokenCommand: () => GetAuthorizationTokenCommand,
  GetRegistryCatalogDataCommand: () => GetRegistryCatalogDataCommand,
  GetRepositoryCatalogDataCommand: () => GetRepositoryCatalogDataCommand,
  GetRepositoryPolicyCommand: () => GetRepositoryPolicyCommand,
  ImageAlreadyExistsException: () => ImageAlreadyExistsException,
  ImageDigestDoesNotMatchException: () => ImageDigestDoesNotMatchException,
  ImageFailureCode: () => ImageFailureCode,
  ImageNotFoundException: () => ImageNotFoundException,
  ImageTagAlreadyExistsException: () => ImageTagAlreadyExistsException,
  InitiateLayerUploadCommand: () => InitiateLayerUploadCommand,
  InvalidLayerException: () => InvalidLayerException,
  InvalidLayerPartException: () => InvalidLayerPartException,
  InvalidParameterException: () => InvalidParameterException,
  InvalidTagParameterException: () => InvalidTagParameterException,
  LayerAlreadyExistsException: () => LayerAlreadyExistsException,
  LayerAvailability: () => LayerAvailability,
  LayerFailureCode: () => LayerFailureCode,
  LayerPartTooSmallException: () => LayerPartTooSmallException,
  LayersNotFoundException: () => LayersNotFoundException,
  LimitExceededException: () => LimitExceededException,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  PutImageCommand: () => PutImageCommand,
  PutRegistryCatalogDataCommand: () => PutRegistryCatalogDataCommand,
  PutRepositoryCatalogDataCommand: () => PutRepositoryCatalogDataCommand,
  ReferencedImagesNotFoundException: () => ReferencedImagesNotFoundException,
  RegistryAliasStatus: () => RegistryAliasStatus,
  RegistryNotFoundException: () => RegistryNotFoundException,
  RepositoryAlreadyExistsException: () => RepositoryAlreadyExistsException,
  RepositoryCatalogDataNotFoundException: () => RepositoryCatalogDataNotFoundException,
  RepositoryNotEmptyException: () => RepositoryNotEmptyException,
  RepositoryNotFoundException: () => RepositoryNotFoundException,
  RepositoryPolicyNotFoundException: () => RepositoryPolicyNotFoundException,
  ServerException: () => ServerException,
  SetRepositoryPolicyCommand: () => SetRepositoryPolicyCommand,
  TagResourceCommand: () => TagResourceCommand,
  TooManyTagsException: () => TooManyTagsException,
  UnsupportedCommandException: () => UnsupportedCommandException,
  UntagResourceCommand: () => UntagResourceCommand,
  UploadLayerPartCommand: () => UploadLayerPartCommand,
  UploadNotFoundException: () => UploadNotFoundException,
  __Client: () => import_smithy_client.Client,
  paginateDescribeImageTags: () => paginateDescribeImageTags,
  paginateDescribeImages: () => paginateDescribeImages,
  paginateDescribeRegistries: () => paginateDescribeRegistries,
  paginateDescribeRepositories: () => paginateDescribeRepositories
});
module.exports = __toCommonJS(src_exports);

// src/ECRPUBLICClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "ecr-public"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/ECRPUBLICClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/ECRPUBLICClient.ts
var _ECRPUBLICClient = class _ECRPUBLICClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultECRPUBLICHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_ECRPUBLICClient, "ECRPUBLICClient");
var ECRPUBLICClient = _ECRPUBLICClient;

// src/ECRPUBLIC.ts


// src/commands/BatchCheckLayerAvailabilityCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_json1_1.ts
var import_core2 = require("@aws-sdk/core");



// src/models/ECRPUBLICServiceException.ts

var _ECRPUBLICServiceException = class _ECRPUBLICServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _ECRPUBLICServiceException.prototype);
  }
};
__name(_ECRPUBLICServiceException, "ECRPUBLICServiceException");
var ECRPUBLICServiceException = _ECRPUBLICServiceException;

// src/models/models_0.ts
var LayerFailureCode = {
  InvalidLayerDigest: "InvalidLayerDigest",
  MissingLayerDigest: "MissingLayerDigest"
};
var LayerAvailability = {
  AVAILABLE: "AVAILABLE",
  UNAVAILABLE: "UNAVAILABLE"
};
var _InvalidParameterException = class _InvalidParameterException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidParameterException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidParameterException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidParameterException.prototype);
  }
};
__name(_InvalidParameterException, "InvalidParameterException");
var InvalidParameterException = _InvalidParameterException;
var _RegistryNotFoundException = class _RegistryNotFoundException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RegistryNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "RegistryNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RegistryNotFoundException.prototype);
  }
};
__name(_RegistryNotFoundException, "RegistryNotFoundException");
var RegistryNotFoundException = _RegistryNotFoundException;
var _RepositoryNotFoundException = class _RepositoryNotFoundException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RepositoryNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "RepositoryNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RepositoryNotFoundException.prototype);
  }
};
__name(_RepositoryNotFoundException, "RepositoryNotFoundException");
var RepositoryNotFoundException = _RepositoryNotFoundException;
var _ServerException = class _ServerException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServerException",
      $fault: "server",
      ...opts
    });
    this.name = "ServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _ServerException.prototype);
  }
};
__name(_ServerException, "ServerException");
var ServerException = _ServerException;
var _UnsupportedCommandException = class _UnsupportedCommandException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnsupportedCommandException",
      $fault: "client",
      ...opts
    });
    this.name = "UnsupportedCommandException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _UnsupportedCommandException.prototype);
  }
};
__name(_UnsupportedCommandException, "UnsupportedCommandException");
var UnsupportedCommandException = _UnsupportedCommandException;
var ImageFailureCode = {
  ImageNotFound: "ImageNotFound",
  ImageReferencedByManifestList: "ImageReferencedByManifestList",
  ImageTagDoesNotMatchDigest: "ImageTagDoesNotMatchDigest",
  InvalidImageDigest: "InvalidImageDigest",
  InvalidImageTag: "InvalidImageTag",
  KmsError: "KmsError",
  MissingDigestAndTag: "MissingDigestAndTag"
};
var _EmptyUploadException = class _EmptyUploadException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "EmptyUploadException",
      $fault: "client",
      ...opts
    });
    this.name = "EmptyUploadException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _EmptyUploadException.prototype);
  }
};
__name(_EmptyUploadException, "EmptyUploadException");
var EmptyUploadException = _EmptyUploadException;
var _InvalidLayerException = class _InvalidLayerException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidLayerException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidLayerException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidLayerException.prototype);
  }
};
__name(_InvalidLayerException, "InvalidLayerException");
var InvalidLayerException = _InvalidLayerException;
var _LayerAlreadyExistsException = class _LayerAlreadyExistsException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LayerAlreadyExistsException",
      $fault: "client",
      ...opts
    });
    this.name = "LayerAlreadyExistsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _LayerAlreadyExistsException.prototype);
  }
};
__name(_LayerAlreadyExistsException, "LayerAlreadyExistsException");
var LayerAlreadyExistsException = _LayerAlreadyExistsException;
var _LayerPartTooSmallException = class _LayerPartTooSmallException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LayerPartTooSmallException",
      $fault: "client",
      ...opts
    });
    this.name = "LayerPartTooSmallException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _LayerPartTooSmallException.prototype);
  }
};
__name(_LayerPartTooSmallException, "LayerPartTooSmallException");
var LayerPartTooSmallException = _LayerPartTooSmallException;
var _UploadNotFoundException = class _UploadNotFoundException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UploadNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "UploadNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _UploadNotFoundException.prototype);
  }
};
__name(_UploadNotFoundException, "UploadNotFoundException");
var UploadNotFoundException = _UploadNotFoundException;
var _InvalidTagParameterException = class _InvalidTagParameterException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidTagParameterException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidTagParameterException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidTagParameterException.prototype);
  }
};
__name(_InvalidTagParameterException, "InvalidTagParameterException");
var InvalidTagParameterException = _InvalidTagParameterException;
var _LimitExceededException = class _LimitExceededException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "LimitExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _LimitExceededException.prototype);
  }
};
__name(_LimitExceededException, "LimitExceededException");
var LimitExceededException = _LimitExceededException;
var _RepositoryAlreadyExistsException = class _RepositoryAlreadyExistsException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RepositoryAlreadyExistsException",
      $fault: "client",
      ...opts
    });
    this.name = "RepositoryAlreadyExistsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RepositoryAlreadyExistsException.prototype);
  }
};
__name(_RepositoryAlreadyExistsException, "RepositoryAlreadyExistsException");
var RepositoryAlreadyExistsException = _RepositoryAlreadyExistsException;
var _TooManyTagsException = class _TooManyTagsException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyTagsException",
      $fault: "client",
      ...opts
    });
    this.name = "TooManyTagsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _TooManyTagsException.prototype);
  }
};
__name(_TooManyTagsException, "TooManyTagsException");
var TooManyTagsException = _TooManyTagsException;
var _RepositoryNotEmptyException = class _RepositoryNotEmptyException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RepositoryNotEmptyException",
      $fault: "client",
      ...opts
    });
    this.name = "RepositoryNotEmptyException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RepositoryNotEmptyException.prototype);
  }
};
__name(_RepositoryNotEmptyException, "RepositoryNotEmptyException");
var RepositoryNotEmptyException = _RepositoryNotEmptyException;
var _RepositoryPolicyNotFoundException = class _RepositoryPolicyNotFoundException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RepositoryPolicyNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "RepositoryPolicyNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RepositoryPolicyNotFoundException.prototype);
  }
};
__name(_RepositoryPolicyNotFoundException, "RepositoryPolicyNotFoundException");
var RepositoryPolicyNotFoundException = _RepositoryPolicyNotFoundException;
var _ImageNotFoundException = class _ImageNotFoundException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ImageNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ImageNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ImageNotFoundException.prototype);
  }
};
__name(_ImageNotFoundException, "ImageNotFoundException");
var ImageNotFoundException = _ImageNotFoundException;
var RegistryAliasStatus = {
  ACTIVE: "ACTIVE",
  PENDING: "PENDING",
  REJECTED: "REJECTED"
};
var _RepositoryCatalogDataNotFoundException = class _RepositoryCatalogDataNotFoundException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "RepositoryCatalogDataNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "RepositoryCatalogDataNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _RepositoryCatalogDataNotFoundException.prototype);
  }
};
__name(_RepositoryCatalogDataNotFoundException, "RepositoryCatalogDataNotFoundException");
var RepositoryCatalogDataNotFoundException = _RepositoryCatalogDataNotFoundException;
var _ImageAlreadyExistsException = class _ImageAlreadyExistsException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ImageAlreadyExistsException",
      $fault: "client",
      ...opts
    });
    this.name = "ImageAlreadyExistsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ImageAlreadyExistsException.prototype);
  }
};
__name(_ImageAlreadyExistsException, "ImageAlreadyExistsException");
var ImageAlreadyExistsException = _ImageAlreadyExistsException;
var _ImageDigestDoesNotMatchException = class _ImageDigestDoesNotMatchException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ImageDigestDoesNotMatchException",
      $fault: "client",
      ...opts
    });
    this.name = "ImageDigestDoesNotMatchException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ImageDigestDoesNotMatchException.prototype);
  }
};
__name(_ImageDigestDoesNotMatchException, "ImageDigestDoesNotMatchException");
var ImageDigestDoesNotMatchException = _ImageDigestDoesNotMatchException;
var _ImageTagAlreadyExistsException = class _ImageTagAlreadyExistsException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ImageTagAlreadyExistsException",
      $fault: "client",
      ...opts
    });
    this.name = "ImageTagAlreadyExistsException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ImageTagAlreadyExistsException.prototype);
  }
};
__name(_ImageTagAlreadyExistsException, "ImageTagAlreadyExistsException");
var ImageTagAlreadyExistsException = _ImageTagAlreadyExistsException;
var _InvalidLayerPartException = class _InvalidLayerPartException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidLayerPartException",
      $fault: "client",
      ...opts
    });
    this.name = "InvalidLayerPartException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _InvalidLayerPartException.prototype);
    this.registryId = opts.registryId;
    this.repositoryName = opts.repositoryName;
    this.uploadId = opts.uploadId;
    this.lastValidByteReceived = opts.lastValidByteReceived;
  }
};
__name(_InvalidLayerPartException, "InvalidLayerPartException");
var InvalidLayerPartException = _InvalidLayerPartException;
var _LayersNotFoundException = class _LayersNotFoundException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LayersNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "LayersNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _LayersNotFoundException.prototype);
  }
};
__name(_LayersNotFoundException, "LayersNotFoundException");
var LayersNotFoundException = _LayersNotFoundException;
var _ReferencedImagesNotFoundException = class _ReferencedImagesNotFoundException extends ECRPUBLICServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ReferencedImagesNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ReferencedImagesNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ReferencedImagesNotFoundException.prototype);
  }
};
__name(_ReferencedImagesNotFoundException, "ReferencedImagesNotFoundException");
var ReferencedImagesNotFoundException = _ReferencedImagesNotFoundException;

// src/protocols/Aws_json1_1.ts
var se_BatchCheckLayerAvailabilityCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("BatchCheckLayerAvailability");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_BatchCheckLayerAvailabilityCommand");
var se_BatchDeleteImageCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("BatchDeleteImage");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_BatchDeleteImageCommand");
var se_CompleteLayerUploadCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("CompleteLayerUpload");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CompleteLayerUploadCommand");
var se_CreateRepositoryCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("CreateRepository");
  let body;
  body = JSON.stringify(se_CreateRepositoryRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_CreateRepositoryCommand");
var se_DeleteRepositoryCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("DeleteRepository");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteRepositoryCommand");
var se_DeleteRepositoryPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("DeleteRepositoryPolicy");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DeleteRepositoryPolicyCommand");
var se_DescribeImagesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("DescribeImages");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeImagesCommand");
var se_DescribeImageTagsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("DescribeImageTags");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeImageTagsCommand");
var se_DescribeRegistriesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("DescribeRegistries");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeRegistriesCommand");
var se_DescribeRepositoriesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("DescribeRepositories");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_DescribeRepositoriesCommand");
var se_GetAuthorizationTokenCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("GetAuthorizationToken");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetAuthorizationTokenCommand");
var se_GetRegistryCatalogDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("GetRegistryCatalogData");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetRegistryCatalogDataCommand");
var se_GetRepositoryCatalogDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("GetRepositoryCatalogData");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetRepositoryCatalogDataCommand");
var se_GetRepositoryPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("GetRepositoryPolicy");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_GetRepositoryPolicyCommand");
var se_InitiateLayerUploadCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("InitiateLayerUpload");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_InitiateLayerUploadCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("ListTagsForResource");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_ListTagsForResourceCommand");
var se_PutImageCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("PutImage");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_PutImageCommand");
var se_PutRegistryCatalogDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("PutRegistryCatalogData");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_PutRegistryCatalogDataCommand");
var se_PutRepositoryCatalogDataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("PutRepositoryCatalogData");
  let body;
  body = JSON.stringify(se_PutRepositoryCatalogDataRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_PutRepositoryCatalogDataCommand");
var se_SetRepositoryPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("SetRepositoryPolicy");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_SetRepositoryPolicyCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("TagResource");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("UntagResource");
  let body;
  body = JSON.stringify((0, import_smithy_client._json)(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_UntagResourceCommand");
var se_UploadLayerPartCommand = /* @__PURE__ */ __name(async (input, context) => {
  const headers = sharedHeaders("UploadLayerPart");
  let body;
  body = JSON.stringify(se_UploadLayerPartRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
}, "se_UploadLayerPartCommand");
var de_BatchCheckLayerAvailabilityCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_BatchCheckLayerAvailabilityCommand");
var de_BatchDeleteImageCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_BatchDeleteImageCommand");
var de_CompleteLayerUploadCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CompleteLayerUploadCommand");
var de_CreateRepositoryCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_CreateRepositoryResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_CreateRepositoryCommand");
var de_DeleteRepositoryCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_DeleteRepositoryResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteRepositoryCommand");
var de_DeleteRepositoryPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DeleteRepositoryPolicyCommand");
var de_DescribeImagesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_DescribeImagesResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeImagesCommand");
var de_DescribeImageTagsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_DescribeImageTagsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeImageTagsCommand");
var de_DescribeRegistriesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeRegistriesCommand");
var de_DescribeRepositoriesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_DescribeRepositoriesResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_DescribeRepositoriesCommand");
var de_GetAuthorizationTokenCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = de_GetAuthorizationTokenResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetAuthorizationTokenCommand");
var de_GetRegistryCatalogDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetRegistryCatalogDataCommand");
var de_GetRepositoryCatalogDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetRepositoryCatalogDataCommand");
var de_GetRepositoryPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_GetRepositoryPolicyCommand");
var de_InitiateLayerUploadCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_InitiateLayerUploadCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_ListTagsForResourceCommand");
var de_PutImageCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_PutImageCommand");
var de_PutRegistryCatalogDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_PutRegistryCatalogDataCommand");
var de_PutRepositoryCatalogDataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_PutRepositoryCatalogDataCommand");
var de_SetRepositoryPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_SetRepositoryPolicyCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_UntagResourceCommand");
var de_UploadLayerPartCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  let contents = {};
  contents = (0, import_smithy_client._json)(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
}, "de_UploadLayerPartCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidParameterException":
    case "com.amazonaws.ecrpublic#InvalidParameterException":
      throw await de_InvalidParameterExceptionRes(parsedOutput, context);
    case "RegistryNotFoundException":
    case "com.amazonaws.ecrpublic#RegistryNotFoundException":
      throw await de_RegistryNotFoundExceptionRes(parsedOutput, context);
    case "RepositoryNotFoundException":
    case "com.amazonaws.ecrpublic#RepositoryNotFoundException":
      throw await de_RepositoryNotFoundExceptionRes(parsedOutput, context);
    case "ServerException":
    case "com.amazonaws.ecrpublic#ServerException":
      throw await de_ServerExceptionRes(parsedOutput, context);
    case "UnsupportedCommandException":
    case "com.amazonaws.ecrpublic#UnsupportedCommandException":
      throw await de_UnsupportedCommandExceptionRes(parsedOutput, context);
    case "EmptyUploadException":
    case "com.amazonaws.ecrpublic#EmptyUploadException":
      throw await de_EmptyUploadExceptionRes(parsedOutput, context);
    case "InvalidLayerException":
    case "com.amazonaws.ecrpublic#InvalidLayerException":
      throw await de_InvalidLayerExceptionRes(parsedOutput, context);
    case "LayerAlreadyExistsException":
    case "com.amazonaws.ecrpublic#LayerAlreadyExistsException":
      throw await de_LayerAlreadyExistsExceptionRes(parsedOutput, context);
    case "LayerPartTooSmallException":
    case "com.amazonaws.ecrpublic#LayerPartTooSmallException":
      throw await de_LayerPartTooSmallExceptionRes(parsedOutput, context);
    case "UploadNotFoundException":
    case "com.amazonaws.ecrpublic#UploadNotFoundException":
      throw await de_UploadNotFoundExceptionRes(parsedOutput, context);
    case "InvalidTagParameterException":
    case "com.amazonaws.ecrpublic#InvalidTagParameterException":
      throw await de_InvalidTagParameterExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.ecrpublic#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "RepositoryAlreadyExistsException":
    case "com.amazonaws.ecrpublic#RepositoryAlreadyExistsException":
      throw await de_RepositoryAlreadyExistsExceptionRes(parsedOutput, context);
    case "TooManyTagsException":
    case "com.amazonaws.ecrpublic#TooManyTagsException":
      throw await de_TooManyTagsExceptionRes(parsedOutput, context);
    case "RepositoryNotEmptyException":
    case "com.amazonaws.ecrpublic#RepositoryNotEmptyException":
      throw await de_RepositoryNotEmptyExceptionRes(parsedOutput, context);
    case "RepositoryPolicyNotFoundException":
    case "com.amazonaws.ecrpublic#RepositoryPolicyNotFoundException":
      throw await de_RepositoryPolicyNotFoundExceptionRes(parsedOutput, context);
    case "ImageNotFoundException":
    case "com.amazonaws.ecrpublic#ImageNotFoundException":
      throw await de_ImageNotFoundExceptionRes(parsedOutput, context);
    case "RepositoryCatalogDataNotFoundException":
    case "com.amazonaws.ecrpublic#RepositoryCatalogDataNotFoundException":
      throw await de_RepositoryCatalogDataNotFoundExceptionRes(parsedOutput, context);
    case "ImageAlreadyExistsException":
    case "com.amazonaws.ecrpublic#ImageAlreadyExistsException":
      throw await de_ImageAlreadyExistsExceptionRes(parsedOutput, context);
    case "ImageDigestDoesNotMatchException":
    case "com.amazonaws.ecrpublic#ImageDigestDoesNotMatchException":
      throw await de_ImageDigestDoesNotMatchExceptionRes(parsedOutput, context);
    case "ImageTagAlreadyExistsException":
    case "com.amazonaws.ecrpublic#ImageTagAlreadyExistsException":
      throw await de_ImageTagAlreadyExistsExceptionRes(parsedOutput, context);
    case "LayersNotFoundException":
    case "com.amazonaws.ecrpublic#LayersNotFoundException":
      throw await de_LayersNotFoundExceptionRes(parsedOutput, context);
    case "ReferencedImagesNotFoundException":
    case "com.amazonaws.ecrpublic#ReferencedImagesNotFoundException":
      throw await de_ReferencedImagesNotFoundExceptionRes(parsedOutput, context);
    case "InvalidLayerPartException":
    case "com.amazonaws.ecrpublic#InvalidLayerPartException":
      throw await de_InvalidLayerPartExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var de_EmptyUploadExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new EmptyUploadException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_EmptyUploadExceptionRes");
var de_ImageAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ImageAlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ImageAlreadyExistsExceptionRes");
var de_ImageDigestDoesNotMatchExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ImageDigestDoesNotMatchException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ImageDigestDoesNotMatchExceptionRes");
var de_ImageNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ImageNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ImageNotFoundExceptionRes");
var de_ImageTagAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ImageTagAlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ImageTagAlreadyExistsExceptionRes");
var de_InvalidLayerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InvalidLayerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidLayerExceptionRes");
var de_InvalidLayerPartExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InvalidLayerPartException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidLayerPartExceptionRes");
var de_InvalidParameterExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InvalidParameterException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidParameterExceptionRes");
var de_InvalidTagParameterExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new InvalidTagParameterException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_InvalidTagParameterExceptionRes");
var de_LayerAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new LayerAlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_LayerAlreadyExistsExceptionRes");
var de_LayerPartTooSmallExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new LayerPartTooSmallException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_LayerPartTooSmallExceptionRes");
var de_LayersNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new LayersNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_LayersNotFoundExceptionRes");
var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_LimitExceededExceptionRes");
var de_ReferencedImagesNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ReferencedImagesNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ReferencedImagesNotFoundExceptionRes");
var de_RegistryNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new RegistryNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_RegistryNotFoundExceptionRes");
var de_RepositoryAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new RepositoryAlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_RepositoryAlreadyExistsExceptionRes");
var de_RepositoryCatalogDataNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new RepositoryCatalogDataNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_RepositoryCatalogDataNotFoundExceptionRes");
var de_RepositoryNotEmptyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new RepositoryNotEmptyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_RepositoryNotEmptyExceptionRes");
var de_RepositoryNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new RepositoryNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_RepositoryNotFoundExceptionRes");
var de_RepositoryPolicyNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new RepositoryPolicyNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_RepositoryPolicyNotFoundExceptionRes");
var de_ServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new ServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_ServerExceptionRes");
var de_TooManyTagsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new TooManyTagsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_TooManyTagsExceptionRes");
var de_UnsupportedCommandExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new UnsupportedCommandException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UnsupportedCommandExceptionRes");
var de_UploadNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = (0, import_smithy_client._json)(body);
  const exception = new UploadNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return (0, import_smithy_client.decorateServiceException)(exception, body);
}, "de_UploadNotFoundExceptionRes");
var se_CreateRepositoryRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    catalogData: (_) => se_RepositoryCatalogDataInput(_, context),
    repositoryName: [],
    tags: import_smithy_client._json
  });
}, "se_CreateRepositoryRequest");
var se_PutRepositoryCatalogDataRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    catalogData: (_) => se_RepositoryCatalogDataInput(_, context),
    registryId: [],
    repositoryName: []
  });
}, "se_PutRepositoryCatalogDataRequest");
var se_RepositoryCatalogDataInput = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    aboutText: [],
    architectures: import_smithy_client._json,
    description: [],
    logoImageBlob: context.base64Encoder,
    operatingSystems: import_smithy_client._json,
    usageText: []
  });
}, "se_RepositoryCatalogDataInput");
var se_UploadLayerPartRequest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    layerPartBlob: context.base64Encoder,
    partFirstByte: [],
    partLastByte: [],
    registryId: [],
    repositoryName: [],
    uploadId: []
  });
}, "se_UploadLayerPartRequest");
var de_AuthorizationData = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    authorizationToken: import_smithy_client.expectString,
    expiresAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_AuthorizationData");
var de_CreateRepositoryResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    catalogData: import_smithy_client._json,
    repository: (_) => de_Repository(_, context)
  });
}, "de_CreateRepositoryResponse");
var de_DeleteRepositoryResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    repository: (_) => de_Repository(_, context)
  });
}, "de_DeleteRepositoryResponse");
var de_DescribeImagesResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    imageDetails: (_) => de_ImageDetailList(_, context),
    nextToken: import_smithy_client.expectString
  });
}, "de_DescribeImagesResponse");
var de_DescribeImageTagsResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    imageTagDetails: (_) => de_ImageTagDetailList(_, context),
    nextToken: import_smithy_client.expectString
  });
}, "de_DescribeImageTagsResponse");
var de_DescribeRepositoriesResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    nextToken: import_smithy_client.expectString,
    repositories: (_) => de_RepositoryList(_, context)
  });
}, "de_DescribeRepositoriesResponse");
var de_GetAuthorizationTokenResponse = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    authorizationData: (_) => de_AuthorizationData(_, context)
  });
}, "de_GetAuthorizationTokenResponse");
var de_ImageDetail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    artifactMediaType: import_smithy_client.expectString,
    imageDigest: import_smithy_client.expectString,
    imageManifestMediaType: import_smithy_client.expectString,
    imagePushedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    imageSizeInBytes: import_smithy_client.expectLong,
    imageTags: import_smithy_client._json,
    registryId: import_smithy_client.expectString,
    repositoryName: import_smithy_client.expectString
  });
}, "de_ImageDetail");
var de_ImageDetailList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ImageDetail(entry, context);
  });
  return retVal;
}, "de_ImageDetailList");
var de_ImageTagDetail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    imageDetail: (_) => de_ReferencedImageDetail(_, context),
    imageTag: import_smithy_client.expectString
  });
}, "de_ImageTagDetail");
var de_ImageTagDetailList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ImageTagDetail(entry, context);
  });
  return retVal;
}, "de_ImageTagDetailList");
var de_ReferencedImageDetail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    artifactMediaType: import_smithy_client.expectString,
    imageDigest: import_smithy_client.expectString,
    imageManifestMediaType: import_smithy_client.expectString,
    imagePushedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    imageSizeInBytes: import_smithy_client.expectLong
  });
}, "de_ReferencedImageDetail");
var de_Repository = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    createdAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    registryId: import_smithy_client.expectString,
    repositoryArn: import_smithy_client.expectString,
    repositoryName: import_smithy_client.expectString,
    repositoryUri: import_smithy_client.expectString
  });
}, "de_Repository");
var de_RepositoryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Repository(entry, context);
  });
  return retVal;
}, "de_RepositoryList");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var throwDefaultError = (0, import_smithy_client.withBaseException)(ECRPUBLICServiceException);
var buildHttpRpcRequest = /* @__PURE__ */ __name(async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new import_protocol_http.HttpRequest(contents);
}, "buildHttpRpcRequest");
function sharedHeaders(operation) {
  return {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": `SpencerFrontendService.${operation}`
  };
}
__name(sharedHeaders, "sharedHeaders");

// src/commands/BatchCheckLayerAvailabilityCommand.ts
var _BatchCheckLayerAvailabilityCommand = class _BatchCheckLayerAvailabilityCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "BatchCheckLayerAvailability", {}).n("ECRPUBLICClient", "BatchCheckLayerAvailabilityCommand").f(void 0, void 0).ser(se_BatchCheckLayerAvailabilityCommand).de(de_BatchCheckLayerAvailabilityCommand).build() {
};
__name(_BatchCheckLayerAvailabilityCommand, "BatchCheckLayerAvailabilityCommand");
var BatchCheckLayerAvailabilityCommand = _BatchCheckLayerAvailabilityCommand;

// src/commands/BatchDeleteImageCommand.ts




var _BatchDeleteImageCommand = class _BatchDeleteImageCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "BatchDeleteImage", {}).n("ECRPUBLICClient", "BatchDeleteImageCommand").f(void 0, void 0).ser(se_BatchDeleteImageCommand).de(de_BatchDeleteImageCommand).build() {
};
__name(_BatchDeleteImageCommand, "BatchDeleteImageCommand");
var BatchDeleteImageCommand = _BatchDeleteImageCommand;

// src/commands/CompleteLayerUploadCommand.ts




var _CompleteLayerUploadCommand = class _CompleteLayerUploadCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "CompleteLayerUpload", {}).n("ECRPUBLICClient", "CompleteLayerUploadCommand").f(void 0, void 0).ser(se_CompleteLayerUploadCommand).de(de_CompleteLayerUploadCommand).build() {
};
__name(_CompleteLayerUploadCommand, "CompleteLayerUploadCommand");
var CompleteLayerUploadCommand = _CompleteLayerUploadCommand;

// src/commands/CreateRepositoryCommand.ts




var _CreateRepositoryCommand = class _CreateRepositoryCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "CreateRepository", {}).n("ECRPUBLICClient", "CreateRepositoryCommand").f(void 0, void 0).ser(se_CreateRepositoryCommand).de(de_CreateRepositoryCommand).build() {
};
__name(_CreateRepositoryCommand, "CreateRepositoryCommand");
var CreateRepositoryCommand = _CreateRepositoryCommand;

// src/commands/DeleteRepositoryCommand.ts




var _DeleteRepositoryCommand = class _DeleteRepositoryCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "DeleteRepository", {}).n("ECRPUBLICClient", "DeleteRepositoryCommand").f(void 0, void 0).ser(se_DeleteRepositoryCommand).de(de_DeleteRepositoryCommand).build() {
};
__name(_DeleteRepositoryCommand, "DeleteRepositoryCommand");
var DeleteRepositoryCommand = _DeleteRepositoryCommand;

// src/commands/DeleteRepositoryPolicyCommand.ts




var _DeleteRepositoryPolicyCommand = class _DeleteRepositoryPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "DeleteRepositoryPolicy", {}).n("ECRPUBLICClient", "DeleteRepositoryPolicyCommand").f(void 0, void 0).ser(se_DeleteRepositoryPolicyCommand).de(de_DeleteRepositoryPolicyCommand).build() {
};
__name(_DeleteRepositoryPolicyCommand, "DeleteRepositoryPolicyCommand");
var DeleteRepositoryPolicyCommand = _DeleteRepositoryPolicyCommand;

// src/commands/DescribeImagesCommand.ts




var _DescribeImagesCommand = class _DescribeImagesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "DescribeImages", {}).n("ECRPUBLICClient", "DescribeImagesCommand").f(void 0, void 0).ser(se_DescribeImagesCommand).de(de_DescribeImagesCommand).build() {
};
__name(_DescribeImagesCommand, "DescribeImagesCommand");
var DescribeImagesCommand = _DescribeImagesCommand;

// src/commands/DescribeImageTagsCommand.ts




var _DescribeImageTagsCommand = class _DescribeImageTagsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "DescribeImageTags", {}).n("ECRPUBLICClient", "DescribeImageTagsCommand").f(void 0, void 0).ser(se_DescribeImageTagsCommand).de(de_DescribeImageTagsCommand).build() {
};
__name(_DescribeImageTagsCommand, "DescribeImageTagsCommand");
var DescribeImageTagsCommand = _DescribeImageTagsCommand;

// src/commands/DescribeRegistriesCommand.ts




var _DescribeRegistriesCommand = class _DescribeRegistriesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "DescribeRegistries", {}).n("ECRPUBLICClient", "DescribeRegistriesCommand").f(void 0, void 0).ser(se_DescribeRegistriesCommand).de(de_DescribeRegistriesCommand).build() {
};
__name(_DescribeRegistriesCommand, "DescribeRegistriesCommand");
var DescribeRegistriesCommand = _DescribeRegistriesCommand;

// src/commands/DescribeRepositoriesCommand.ts




var _DescribeRepositoriesCommand = class _DescribeRepositoriesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "DescribeRepositories", {}).n("ECRPUBLICClient", "DescribeRepositoriesCommand").f(void 0, void 0).ser(se_DescribeRepositoriesCommand).de(de_DescribeRepositoriesCommand).build() {
};
__name(_DescribeRepositoriesCommand, "DescribeRepositoriesCommand");
var DescribeRepositoriesCommand = _DescribeRepositoriesCommand;

// src/commands/GetAuthorizationTokenCommand.ts




var _GetAuthorizationTokenCommand = class _GetAuthorizationTokenCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "GetAuthorizationToken", {}).n("ECRPUBLICClient", "GetAuthorizationTokenCommand").f(void 0, void 0).ser(se_GetAuthorizationTokenCommand).de(de_GetAuthorizationTokenCommand).build() {
};
__name(_GetAuthorizationTokenCommand, "GetAuthorizationTokenCommand");
var GetAuthorizationTokenCommand = _GetAuthorizationTokenCommand;

// src/commands/GetRegistryCatalogDataCommand.ts




var _GetRegistryCatalogDataCommand = class _GetRegistryCatalogDataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "GetRegistryCatalogData", {}).n("ECRPUBLICClient", "GetRegistryCatalogDataCommand").f(void 0, void 0).ser(se_GetRegistryCatalogDataCommand).de(de_GetRegistryCatalogDataCommand).build() {
};
__name(_GetRegistryCatalogDataCommand, "GetRegistryCatalogDataCommand");
var GetRegistryCatalogDataCommand = _GetRegistryCatalogDataCommand;

// src/commands/GetRepositoryCatalogDataCommand.ts




var _GetRepositoryCatalogDataCommand = class _GetRepositoryCatalogDataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "GetRepositoryCatalogData", {}).n("ECRPUBLICClient", "GetRepositoryCatalogDataCommand").f(void 0, void 0).ser(se_GetRepositoryCatalogDataCommand).de(de_GetRepositoryCatalogDataCommand).build() {
};
__name(_GetRepositoryCatalogDataCommand, "GetRepositoryCatalogDataCommand");
var GetRepositoryCatalogDataCommand = _GetRepositoryCatalogDataCommand;

// src/commands/GetRepositoryPolicyCommand.ts




var _GetRepositoryPolicyCommand = class _GetRepositoryPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "GetRepositoryPolicy", {}).n("ECRPUBLICClient", "GetRepositoryPolicyCommand").f(void 0, void 0).ser(se_GetRepositoryPolicyCommand).de(de_GetRepositoryPolicyCommand).build() {
};
__name(_GetRepositoryPolicyCommand, "GetRepositoryPolicyCommand");
var GetRepositoryPolicyCommand = _GetRepositoryPolicyCommand;

// src/commands/InitiateLayerUploadCommand.ts




var _InitiateLayerUploadCommand = class _InitiateLayerUploadCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "InitiateLayerUpload", {}).n("ECRPUBLICClient", "InitiateLayerUploadCommand").f(void 0, void 0).ser(se_InitiateLayerUploadCommand).de(de_InitiateLayerUploadCommand).build() {
};
__name(_InitiateLayerUploadCommand, "InitiateLayerUploadCommand");
var InitiateLayerUploadCommand = _InitiateLayerUploadCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "ListTagsForResource", {}).n("ECRPUBLICClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/PutImageCommand.ts




var _PutImageCommand = class _PutImageCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "PutImage", {}).n("ECRPUBLICClient", "PutImageCommand").f(void 0, void 0).ser(se_PutImageCommand).de(de_PutImageCommand).build() {
};
__name(_PutImageCommand, "PutImageCommand");
var PutImageCommand = _PutImageCommand;

// src/commands/PutRegistryCatalogDataCommand.ts




var _PutRegistryCatalogDataCommand = class _PutRegistryCatalogDataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "PutRegistryCatalogData", {}).n("ECRPUBLICClient", "PutRegistryCatalogDataCommand").f(void 0, void 0).ser(se_PutRegistryCatalogDataCommand).de(de_PutRegistryCatalogDataCommand).build() {
};
__name(_PutRegistryCatalogDataCommand, "PutRegistryCatalogDataCommand");
var PutRegistryCatalogDataCommand = _PutRegistryCatalogDataCommand;

// src/commands/PutRepositoryCatalogDataCommand.ts




var _PutRepositoryCatalogDataCommand = class _PutRepositoryCatalogDataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "PutRepositoryCatalogData", {}).n("ECRPUBLICClient", "PutRepositoryCatalogDataCommand").f(void 0, void 0).ser(se_PutRepositoryCatalogDataCommand).de(de_PutRepositoryCatalogDataCommand).build() {
};
__name(_PutRepositoryCatalogDataCommand, "PutRepositoryCatalogDataCommand");
var PutRepositoryCatalogDataCommand = _PutRepositoryCatalogDataCommand;

// src/commands/SetRepositoryPolicyCommand.ts




var _SetRepositoryPolicyCommand = class _SetRepositoryPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "SetRepositoryPolicy", {}).n("ECRPUBLICClient", "SetRepositoryPolicyCommand").f(void 0, void 0).ser(se_SetRepositoryPolicyCommand).de(de_SetRepositoryPolicyCommand).build() {
};
__name(_SetRepositoryPolicyCommand, "SetRepositoryPolicyCommand");
var SetRepositoryPolicyCommand = _SetRepositoryPolicyCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "TagResource", {}).n("ECRPUBLICClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "UntagResource", {}).n("ECRPUBLICClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UploadLayerPartCommand.ts




var _UploadLayerPartCommand = class _UploadLayerPartCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("SpencerFrontendService", "UploadLayerPart", {}).n("ECRPUBLICClient", "UploadLayerPartCommand").f(void 0, void 0).ser(se_UploadLayerPartCommand).de(de_UploadLayerPartCommand).build() {
};
__name(_UploadLayerPartCommand, "UploadLayerPartCommand");
var UploadLayerPartCommand = _UploadLayerPartCommand;

// src/ECRPUBLIC.ts
var commands = {
  BatchCheckLayerAvailabilityCommand,
  BatchDeleteImageCommand,
  CompleteLayerUploadCommand,
  CreateRepositoryCommand,
  DeleteRepositoryCommand,
  DeleteRepositoryPolicyCommand,
  DescribeImagesCommand,
  DescribeImageTagsCommand,
  DescribeRegistriesCommand,
  DescribeRepositoriesCommand,
  GetAuthorizationTokenCommand,
  GetRegistryCatalogDataCommand,
  GetRepositoryCatalogDataCommand,
  GetRepositoryPolicyCommand,
  InitiateLayerUploadCommand,
  ListTagsForResourceCommand,
  PutImageCommand,
  PutRegistryCatalogDataCommand,
  PutRepositoryCatalogDataCommand,
  SetRepositoryPolicyCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UploadLayerPartCommand
};
var _ECRPUBLIC = class _ECRPUBLIC extends ECRPUBLICClient {
};
__name(_ECRPUBLIC, "ECRPUBLIC");
var ECRPUBLIC = _ECRPUBLIC;
(0, import_smithy_client.createAggregatedClient)(commands, ECRPUBLIC);

// src/pagination/DescribeImageTagsPaginator.ts

var paginateDescribeImageTags = (0, import_core.createPaginator)(ECRPUBLICClient, DescribeImageTagsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/DescribeImagesPaginator.ts

var paginateDescribeImages = (0, import_core.createPaginator)(ECRPUBLICClient, DescribeImagesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/DescribeRegistriesPaginator.ts

var paginateDescribeRegistries = (0, import_core.createPaginator)(ECRPUBLICClient, DescribeRegistriesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/DescribeRepositoriesPaginator.ts

var paginateDescribeRepositories = (0, import_core.createPaginator)(ECRPUBLICClient, DescribeRepositoriesCommand, "nextToken", "nextToken", "maxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  ECRPUBLICServiceException,
  __Client,
  ECRPUBLICClient,
  ECRPUBLIC,
  $Command,
  BatchCheckLayerAvailabilityCommand,
  BatchDeleteImageCommand,
  CompleteLayerUploadCommand,
  CreateRepositoryCommand,
  DeleteRepositoryCommand,
  DeleteRepositoryPolicyCommand,
  DescribeImageTagsCommand,
  DescribeImagesCommand,
  DescribeRegistriesCommand,
  DescribeRepositoriesCommand,
  GetAuthorizationTokenCommand,
  GetRegistryCatalogDataCommand,
  GetRepositoryCatalogDataCommand,
  GetRepositoryPolicyCommand,
  InitiateLayerUploadCommand,
  ListTagsForResourceCommand,
  PutImageCommand,
  PutRegistryCatalogDataCommand,
  PutRepositoryCatalogDataCommand,
  SetRepositoryPolicyCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UploadLayerPartCommand,
  paginateDescribeImageTags,
  paginateDescribeImages,
  paginateDescribeRegistries,
  paginateDescribeRepositories,
  LayerFailureCode,
  LayerAvailability,
  InvalidParameterException,
  RegistryNotFoundException,
  RepositoryNotFoundException,
  ServerException,
  UnsupportedCommandException,
  ImageFailureCode,
  EmptyUploadException,
  InvalidLayerException,
  LayerAlreadyExistsException,
  LayerPartTooSmallException,
  UploadNotFoundException,
  InvalidTagParameterException,
  LimitExceededException,
  RepositoryAlreadyExistsException,
  TooManyTagsException,
  RepositoryNotEmptyException,
  RepositoryPolicyNotFoundException,
  ImageNotFoundException,
  RegistryAliasStatus,
  RepositoryCatalogDataNotFoundException,
  ImageAlreadyExistsException,
  ImageDigestDoesNotMatchException,
  ImageTagAlreadyExistsException,
  InvalidLayerPartException,
  LayersNotFoundException,
  ReferencedImagesNotFoundException
});

