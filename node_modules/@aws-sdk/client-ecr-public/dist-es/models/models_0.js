import { ECRPUBLICServiceException as __BaseException } from "./ECRPUBLICServiceException";
export const LayerFailureCode = {
    InvalidLayerDigest: "InvalidLayerDigest",
    MissingLayerDigest: "MissingLayerDigest",
};
export const LayerAvailability = {
    AVAILABLE: "AVAILABLE",
    UNAVAILABLE: "UNAVAILABLE",
};
export class InvalidParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
export class RegistryNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "RegistryNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "RegistryNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegistryNotFoundException.prototype);
    }
}
export class RepositoryNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "RepositoryNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryNotFoundException.prototype);
    }
}
export class ServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServerException.prototype);
    }
}
export class UnsupportedCommandException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedCommandException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedCommandException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedCommandException.prototype);
    }
}
export const ImageFailureCode = {
    ImageNotFound: "ImageNotFound",
    ImageReferencedByManifestList: "ImageReferencedByManifestList",
    ImageTagDoesNotMatchDigest: "ImageTagDoesNotMatchDigest",
    InvalidImageDigest: "InvalidImageDigest",
    InvalidImageTag: "InvalidImageTag",
    KmsError: "KmsError",
    MissingDigestAndTag: "MissingDigestAndTag",
};
export class EmptyUploadException extends __BaseException {
    constructor(opts) {
        super({
            name: "EmptyUploadException",
            $fault: "client",
            ...opts,
        });
        this.name = "EmptyUploadException";
        this.$fault = "client";
        Object.setPrototypeOf(this, EmptyUploadException.prototype);
    }
}
export class InvalidLayerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidLayerException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLayerException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLayerException.prototype);
    }
}
export class LayerAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "LayerAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "LayerAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LayerAlreadyExistsException.prototype);
    }
}
export class LayerPartTooSmallException extends __BaseException {
    constructor(opts) {
        super({
            name: "LayerPartTooSmallException",
            $fault: "client",
            ...opts,
        });
        this.name = "LayerPartTooSmallException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LayerPartTooSmallException.prototype);
    }
}
export class UploadNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "UploadNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "UploadNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UploadNotFoundException.prototype);
    }
}
export class InvalidTagParameterException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidTagParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTagParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTagParameterException.prototype);
    }
}
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class RepositoryAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "RepositoryAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryAlreadyExistsException.prototype);
    }
}
export class TooManyTagsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TooManyTagsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TooManyTagsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyTagsException.prototype);
    }
}
export class RepositoryNotEmptyException extends __BaseException {
    constructor(opts) {
        super({
            name: "RepositoryNotEmptyException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryNotEmptyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryNotEmptyException.prototype);
    }
}
export class RepositoryPolicyNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "RepositoryPolicyNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryPolicyNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryPolicyNotFoundException.prototype);
    }
}
export class ImageNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ImageNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImageNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImageNotFoundException.prototype);
    }
}
export const RegistryAliasStatus = {
    ACTIVE: "ACTIVE",
    PENDING: "PENDING",
    REJECTED: "REJECTED",
};
export class RepositoryCatalogDataNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "RepositoryCatalogDataNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "RepositoryCatalogDataNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RepositoryCatalogDataNotFoundException.prototype);
    }
}
export class ImageAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ImageAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImageAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImageAlreadyExistsException.prototype);
    }
}
export class ImageDigestDoesNotMatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "ImageDigestDoesNotMatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImageDigestDoesNotMatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImageDigestDoesNotMatchException.prototype);
    }
}
export class ImageTagAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ImageTagAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImageTagAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImageTagAlreadyExistsException.prototype);
    }
}
export class InvalidLayerPartException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidLayerPartException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidLayerPartException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidLayerPartException.prototype);
        this.registryId = opts.registryId;
        this.repositoryName = opts.repositoryName;
        this.uploadId = opts.uploadId;
        this.lastValidByteReceived = opts.lastValidByteReceived;
    }
}
export class LayersNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "LayersNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "LayersNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LayersNotFoundException.prototype);
    }
}
export class ReferencedImagesNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ReferencedImagesNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReferencedImagesNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReferencedImagesNotFoundException.prototype);
    }
}
