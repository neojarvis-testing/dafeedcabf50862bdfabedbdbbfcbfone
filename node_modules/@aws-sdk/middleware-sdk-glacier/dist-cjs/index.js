"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  accountIdDefaultMiddleware: () => accountIdDefaultMiddleware,
  accountIdDefaultMiddlewareOptions: () => accountIdDefaultMiddlewareOptions,
  addChecksumHeadersMiddleware: () => addChecksumHeadersMiddleware,
  addChecksumHeadersMiddlewareOptions: () => addChecksumHeadersMiddlewareOptions,
  addGlacierApiVersionMiddleware: () => addGlacierApiVersionMiddleware,
  addGlacierApiVersionMiddlewareOptions: () => addGlacierApiVersionMiddlewareOptions,
  getGlacierPlugin: () => getGlacierPlugin
});
module.exports = __toCommonJS(src_exports);

// src/account-id-default.ts
function accountIdDefaultMiddleware() {
  return (next) => async (args) => {
    const { input } = args;
    if (input.accountId === void 0) {
      input.accountId = "-";
    }
    return next({ ...args, input });
  };
}
__name(accountIdDefaultMiddleware, "accountIdDefaultMiddleware");
var accountIdDefaultMiddlewareOptions = {
  step: "initialize",
  tags: ["ACCOUNT_ID_DEFAULT"],
  name: "accountIdDefaultMiddleware",
  override: true
};

// src/add-checksum-headers.ts
var import_protocol_http = require("@smithy/protocol-http");
function addChecksumHeadersMiddleware(options) {
  return (next) => async (args) => {
    const request = args.request;
    if (import_protocol_http.HttpRequest.isInstance(request)) {
      let headers = request.headers;
      const body = request.body;
      if (body) {
        const [contentHash, treeHash] = await options.bodyChecksumGenerator(request, options);
        for (const [headerName, hash] of [
          ["x-amz-content-sha256", contentHash],
          ["x-amz-sha256-tree-hash", treeHash]
        ]) {
          if (!(headerName in headers) && hash) {
            headers = {
              ...headers,
              [headerName]: hash
            };
          }
        }
        request.headers = headers;
      }
    }
    return next({
      ...args,
      request
    });
  };
}
__name(addChecksumHeadersMiddleware, "addChecksumHeadersMiddleware");
var addChecksumHeadersMiddlewareOptions = {
  step: "build",
  tags: ["SET_CHECKSUM_HEADERS"],
  name: "addChecksumHeadersMiddleware",
  override: true
};

// src/add-glacier-api-version.ts

function addGlacierApiVersionMiddleware(options) {
  return (next) => async (args) => {
    const request = args.request;
    if (import_protocol_http.HttpRequest.isInstance(request)) {
      request.headers["x-amz-glacier-version"] = options.apiVersion;
    }
    return next({
      ...args,
      request
    });
  };
}
__name(addGlacierApiVersionMiddleware, "addGlacierApiVersionMiddleware");
var addGlacierApiVersionMiddlewareOptions = {
  step: "build",
  tags: ["SET_GLACIER_VERSION"],
  name: "addGlacierApiVersionMiddleware",
  override: true
};

// src/configurations.ts
var getGlacierPlugin = /* @__PURE__ */ __name((config) => ({
  applyToStack: (clientStack) => {
    clientStack.add(accountIdDefaultMiddleware(), accountIdDefaultMiddlewareOptions);
    clientStack.add(addGlacierApiVersionMiddleware(config), addGlacierApiVersionMiddlewareOptions);
    clientStack.add(addChecksumHeadersMiddleware(config), addChecksumHeadersMiddlewareOptions);
  }
}), "getGlacierPlugin");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  accountIdDefaultMiddleware,
  accountIdDefaultMiddlewareOptions,
  addChecksumHeadersMiddleware,
  addChecksumHeadersMiddlewareOptions,
  addGlacierApiVersionMiddleware,
  addGlacierApiVersionMiddlewareOptions,
  getGlacierPlugin
});

