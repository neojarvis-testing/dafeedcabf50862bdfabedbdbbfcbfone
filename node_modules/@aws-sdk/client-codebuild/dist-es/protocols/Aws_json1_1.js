import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { CodeBuildServiceException as __BaseException } from "../models/CodeBuildServiceException";
import { AccountLimitExceededException, InvalidInputException, OAuthProviderException, ResourceAlreadyExistsException, ResourceNotFoundException, } from "../models/models_0";
export const se_BatchDeleteBuildsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteBuilds");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetBuildBatchesCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetBuildBatches");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetBuildsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetBuilds");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetFleetsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetFleets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetProjects");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetReportGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetReportGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_BatchGetReportsCommand = async (input, context) => {
    const headers = sharedHeaders("BatchGetReports");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFleetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFleet");
    let body;
    body = JSON.stringify(se_CreateFleetInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateReportGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWebhook");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteBuildBatch");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFleetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFleet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteReportCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteReport");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteReportGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteSourceCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSourceCredentials");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWebhook");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCodeCoveragesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCodeCoverages");
    let body;
    body = JSON.stringify(se_DescribeCodeCoveragesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTestCasesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTestCases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetReportGroupTrendCommand = async (input, context) => {
    const headers = sharedHeaders("GetReportGroupTrend");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ImportSourceCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("ImportSourceCredentials");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_InvalidateProjectCacheCommand = async (input, context) => {
    const headers = sharedHeaders("InvalidateProjectCache");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListBuildBatchesCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuildBatches");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListBuildBatchesForProjectCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuildBatchesForProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListBuildsCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuilds");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListBuildsForProjectCommand = async (input, context) => {
    const headers = sharedHeaders("ListBuildsForProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCuratedEnvironmentImagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCuratedEnvironmentImages");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFleetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFleets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("ListProjects");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListReportGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListReportGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListReportsCommand = async (input, context) => {
    const headers = sharedHeaders("ListReports");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListReportsForReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("ListReportsForReportGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSharedProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSharedProjects");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSharedReportGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSharedReportGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListSourceCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSourceCredentials");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RetryBuildCommand = async (input, context) => {
    const headers = sharedHeaders("RetryBuild");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RetryBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("RetryBuildBatch");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartBuildCommand = async (input, context) => {
    const headers = sharedHeaders("StartBuild");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("StartBuildBatch");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopBuildCommand = async (input, context) => {
    const headers = sharedHeaders("StopBuild");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopBuildBatchCommand = async (input, context) => {
    const headers = sharedHeaders("StopBuildBatch");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFleetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFleet");
    let body;
    body = JSON.stringify(se_UpdateFleetInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateProjectVisibilityCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProjectVisibility");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateReportGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateReportGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateWebhookCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWebhook");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_BatchDeleteBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetBuildBatchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetBuildBatchesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetBuildsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetFleetsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetProjectsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetReportGroupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_BatchGetReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_BatchGetReportsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateFleetOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateReportGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateWebhookOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCodeCoveragesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCodeCoveragesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeTestCasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTestCasesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetReportGroupTrendCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ImportSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_InvalidateProjectCacheCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListBuildBatchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListBuildBatchesForProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListBuildsForProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCuratedEnvironmentImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListReportsForReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSharedProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSharedReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RetryBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RetryBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RetryBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RetryBuildBatchOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StartBuildBatchOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_StopBuildBatchOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateFleetOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateProjectVisibilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateReportGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateWebhookOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await de_InvalidInputExceptionRes(parsedOutput, context);
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await de_AccountLimitExceededExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.codebuild#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "OAuthProviderException":
        case "com.amazonaws.codebuild#OAuthProviderException":
            throw await de_OAuthProviderExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccountLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidInputExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OAuthProviderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new OAuthProviderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateFleetInput = (input, context) => {
    return take(input, {
        baseCapacity: [],
        computeType: [],
        environmentType: [],
        fleetServiceRole: [],
        name: [],
        overflowBehavior: [],
        scalingConfiguration: (_) => se_ScalingConfigurationInput(_, context),
        tags: _json,
        vpcConfig: _json,
    });
};
const se_DescribeCodeCoveragesInput = (input, context) => {
    return take(input, {
        maxLineCoveragePercentage: __serializeFloat,
        maxResults: [],
        minLineCoveragePercentage: __serializeFloat,
        nextToken: [],
        reportArn: [],
        sortBy: [],
        sortOrder: [],
    });
};
const se_ScalingConfigurationInput = (input, context) => {
    return take(input, {
        maxCapacity: [],
        scalingType: [],
        targetTrackingScalingConfigs: (_) => se_TargetTrackingScalingConfigurations(_, context),
    });
};
const se_TargetTrackingScalingConfiguration = (input, context) => {
    return take(input, {
        metricType: [],
        targetValue: __serializeFloat,
    });
};
const se_TargetTrackingScalingConfigurations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_TargetTrackingScalingConfiguration(entry, context);
    });
};
const se_UpdateFleetInput = (input, context) => {
    return take(input, {
        arn: [],
        baseCapacity: [],
        computeType: [],
        environmentType: [],
        fleetServiceRole: [],
        overflowBehavior: [],
        scalingConfiguration: (_) => se_ScalingConfigurationInput(_, context),
        tags: _json,
        vpcConfig: _json,
    });
};
const de_BatchGetBuildBatchesOutput = (output, context) => {
    return take(output, {
        buildBatches: (_) => de_BuildBatches(_, context),
        buildBatchesNotFound: _json,
    });
};
const de_BatchGetBuildsOutput = (output, context) => {
    return take(output, {
        builds: (_) => de_Builds(_, context),
        buildsNotFound: _json,
    });
};
const de_BatchGetFleetsOutput = (output, context) => {
    return take(output, {
        fleets: (_) => de_Fleets(_, context),
        fleetsNotFound: _json,
    });
};
const de_BatchGetProjectsOutput = (output, context) => {
    return take(output, {
        projects: (_) => de_Projects(_, context),
        projectsNotFound: _json,
    });
};
const de_BatchGetReportGroupsOutput = (output, context) => {
    return take(output, {
        reportGroups: (_) => de_ReportGroups(_, context),
        reportGroupsNotFound: _json,
    });
};
const de_BatchGetReportsOutput = (output, context) => {
    return take(output, {
        reports: (_) => de_Reports(_, context),
        reportsNotFound: _json,
    });
};
const de_Build = (output, context) => {
    return take(output, {
        arn: __expectString,
        artifacts: _json,
        buildBatchArn: __expectString,
        buildComplete: __expectBoolean,
        buildNumber: __expectLong,
        buildStatus: __expectString,
        cache: _json,
        currentPhase: __expectString,
        debugSession: _json,
        encryptionKey: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        environment: _json,
        exportedEnvironmentVariables: _json,
        fileSystemLocations: _json,
        id: __expectString,
        initiator: __expectString,
        logs: _json,
        networkInterface: _json,
        phases: (_) => de_BuildPhases(_, context),
        projectName: __expectString,
        queuedTimeoutInMinutes: __expectInt32,
        reportArns: _json,
        resolvedSourceVersion: __expectString,
        secondaryArtifacts: _json,
        secondarySourceVersions: _json,
        secondarySources: _json,
        serviceRole: __expectString,
        source: _json,
        sourceVersion: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        timeoutInMinutes: __expectInt32,
        vpcConfig: _json,
    });
};
const de_BuildBatch = (output, context) => {
    return take(output, {
        arn: __expectString,
        artifacts: _json,
        buildBatchConfig: _json,
        buildBatchNumber: __expectLong,
        buildBatchStatus: __expectString,
        buildGroups: (_) => de_BuildGroups(_, context),
        buildTimeoutInMinutes: __expectInt32,
        cache: _json,
        complete: __expectBoolean,
        currentPhase: __expectString,
        debugSessionEnabled: __expectBoolean,
        encryptionKey: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        environment: _json,
        fileSystemLocations: _json,
        id: __expectString,
        initiator: __expectString,
        logConfig: _json,
        phases: (_) => de_BuildBatchPhases(_, context),
        projectName: __expectString,
        queuedTimeoutInMinutes: __expectInt32,
        resolvedSourceVersion: __expectString,
        secondaryArtifacts: _json,
        secondarySourceVersions: _json,
        secondarySources: _json,
        serviceRole: __expectString,
        source: _json,
        sourceVersion: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        vpcConfig: _json,
    });
};
const de_BuildBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildBatch(entry, context);
    });
    return retVal;
};
const de_BuildBatchPhase = (output, context) => {
    return take(output, {
        contexts: _json,
        durationInSeconds: __expectLong,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        phaseStatus: __expectString,
        phaseType: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_BuildBatchPhases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildBatchPhase(entry, context);
    });
    return retVal;
};
const de_BuildGroup = (output, context) => {
    return take(output, {
        currentBuildSummary: (_) => de_BuildSummary(_, context),
        dependsOn: _json,
        identifier: __expectString,
        ignoreFailure: __expectBoolean,
        priorBuildSummaryList: (_) => de_BuildSummaries(_, context),
    });
};
const de_BuildGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildGroup(entry, context);
    });
    return retVal;
};
const de_BuildPhase = (output, context) => {
    return take(output, {
        contexts: _json,
        durationInSeconds: __expectLong,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        phaseStatus: __expectString,
        phaseType: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_BuildPhases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildPhase(entry, context);
    });
    return retVal;
};
const de_Builds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Build(entry, context);
    });
    return retVal;
};
const de_BuildSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BuildSummary(entry, context);
    });
    return retVal;
};
const de_BuildSummary = (output, context) => {
    return take(output, {
        arn: __expectString,
        buildStatus: __expectString,
        primaryArtifact: _json,
        requestedOn: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        secondaryArtifacts: _json,
    });
};
const de_CodeCoverage = (output, context) => {
    return take(output, {
        branchCoveragePercentage: __limitedParseDouble,
        branchesCovered: __expectInt32,
        branchesMissed: __expectInt32,
        expired: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        filePath: __expectString,
        id: __expectString,
        lineCoveragePercentage: __limitedParseDouble,
        linesCovered: __expectInt32,
        linesMissed: __expectInt32,
        reportARN: __expectString,
    });
};
const de_CodeCoverageReportSummary = (output, context) => {
    return take(output, {
        branchCoveragePercentage: __limitedParseDouble,
        branchesCovered: __expectInt32,
        branchesMissed: __expectInt32,
        lineCoveragePercentage: __limitedParseDouble,
        linesCovered: __expectInt32,
        linesMissed: __expectInt32,
    });
};
const de_CodeCoverages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CodeCoverage(entry, context);
    });
    return retVal;
};
const de_CreateFleetOutput = (output, context) => {
    return take(output, {
        fleet: (_) => de_Fleet(_, context),
    });
};
const de_CreateProjectOutput = (output, context) => {
    return take(output, {
        project: (_) => de_Project(_, context),
    });
};
const de_CreateReportGroupOutput = (output, context) => {
    return take(output, {
        reportGroup: (_) => de_ReportGroup(_, context),
    });
};
const de_CreateWebhookOutput = (output, context) => {
    return take(output, {
        webhook: (_) => de_Webhook(_, context),
    });
};
const de_DescribeCodeCoveragesOutput = (output, context) => {
    return take(output, {
        codeCoverages: (_) => de_CodeCoverages(_, context),
        nextToken: __expectString,
    });
};
const de_DescribeTestCasesOutput = (output, context) => {
    return take(output, {
        nextToken: __expectString,
        testCases: (_) => de_TestCases(_, context),
    });
};
const de_Fleet = (output, context) => {
    return take(output, {
        arn: __expectString,
        baseCapacity: __expectInt32,
        computeType: __expectString,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        environmentType: __expectString,
        fleetServiceRole: __expectString,
        id: __expectString,
        lastModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        overflowBehavior: __expectString,
        scalingConfiguration: (_) => de_ScalingConfigurationOutput(_, context),
        status: _json,
        tags: _json,
        vpcConfig: _json,
    });
};
const de_Fleets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Fleet(entry, context);
    });
    return retVal;
};
const de_Project = (output, context) => {
    return take(output, {
        arn: __expectString,
        artifacts: _json,
        badge: _json,
        buildBatchConfig: _json,
        cache: _json,
        concurrentBuildLimit: __expectInt32,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        encryptionKey: __expectString,
        environment: _json,
        fileSystemLocations: _json,
        lastModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        logsConfig: _json,
        name: __expectString,
        projectVisibility: __expectString,
        publicProjectAlias: __expectString,
        queuedTimeoutInMinutes: __expectInt32,
        resourceAccessRole: __expectString,
        secondaryArtifacts: _json,
        secondarySourceVersions: _json,
        secondarySources: _json,
        serviceRole: __expectString,
        source: _json,
        sourceVersion: __expectString,
        tags: _json,
        timeoutInMinutes: __expectInt32,
        vpcConfig: _json,
        webhook: (_) => de_Webhook(_, context),
    });
};
const de_Projects = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Project(entry, context);
    });
    return retVal;
};
const de_Report = (output, context) => {
    return take(output, {
        arn: __expectString,
        codeCoverageSummary: (_) => de_CodeCoverageReportSummary(_, context),
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        executionId: __expectString,
        expired: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        exportConfig: _json,
        name: __expectString,
        reportGroupArn: __expectString,
        status: __expectString,
        testSummary: _json,
        truncated: __expectBoolean,
        type: __expectString,
    });
};
const de_ReportGroup = (output, context) => {
    return take(output, {
        arn: __expectString,
        created: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        exportConfig: _json,
        lastModified: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        name: __expectString,
        status: __expectString,
        tags: _json,
        type: __expectString,
    });
};
const de_ReportGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReportGroup(entry, context);
    });
    return retVal;
};
const de_Reports = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Report(entry, context);
    });
    return retVal;
};
const de_RetryBuildBatchOutput = (output, context) => {
    return take(output, {
        buildBatch: (_) => de_BuildBatch(_, context),
    });
};
const de_RetryBuildOutput = (output, context) => {
    return take(output, {
        build: (_) => de_Build(_, context),
    });
};
const de_ScalingConfigurationOutput = (output, context) => {
    return take(output, {
        desiredCapacity: __expectInt32,
        maxCapacity: __expectInt32,
        scalingType: __expectString,
        targetTrackingScalingConfigs: (_) => de_TargetTrackingScalingConfigurations(_, context),
    });
};
const de_StartBuildBatchOutput = (output, context) => {
    return take(output, {
        buildBatch: (_) => de_BuildBatch(_, context),
    });
};
const de_StartBuildOutput = (output, context) => {
    return take(output, {
        build: (_) => de_Build(_, context),
    });
};
const de_StopBuildBatchOutput = (output, context) => {
    return take(output, {
        buildBatch: (_) => de_BuildBatch(_, context),
    });
};
const de_StopBuildOutput = (output, context) => {
    return take(output, {
        build: (_) => de_Build(_, context),
    });
};
const de_TargetTrackingScalingConfiguration = (output, context) => {
    return take(output, {
        metricType: __expectString,
        targetValue: __limitedParseDouble,
    });
};
const de_TargetTrackingScalingConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetTrackingScalingConfiguration(entry, context);
    });
    return retVal;
};
const de_TestCase = (output, context) => {
    return take(output, {
        durationInNanoSeconds: __expectLong,
        expired: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        message: __expectString,
        name: __expectString,
        prefix: __expectString,
        reportArn: __expectString,
        status: __expectString,
        testRawDataPath: __expectString,
    });
};
const de_TestCases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TestCase(entry, context);
    });
    return retVal;
};
const de_UpdateFleetOutput = (output, context) => {
    return take(output, {
        fleet: (_) => de_Fleet(_, context),
    });
};
const de_UpdateProjectOutput = (output, context) => {
    return take(output, {
        project: (_) => de_Project(_, context),
    });
};
const de_UpdateReportGroupOutput = (output, context) => {
    return take(output, {
        reportGroup: (_) => de_ReportGroup(_, context),
    });
};
const de_UpdateWebhookOutput = (output, context) => {
    return take(output, {
        webhook: (_) => de_Webhook(_, context),
    });
};
const de_Webhook = (output, context) => {
    return take(output, {
        branchFilter: __expectString,
        buildType: __expectString,
        filterGroups: _json,
        lastModifiedSecret: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        manualCreation: __expectBoolean,
        payloadUrl: __expectString,
        secret: __expectString,
        url: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `CodeBuild_20161006.${operation}`,
    };
}
