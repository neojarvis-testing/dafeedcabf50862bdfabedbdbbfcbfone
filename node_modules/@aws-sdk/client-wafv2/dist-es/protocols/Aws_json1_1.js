import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { WAFAssociatedItemException, WAFConfigurationWarningException, WAFDuplicateItemException, WAFExpiredManagedRuleGroupVersionException, WAFInternalErrorException, WAFInvalidOperationException, WAFInvalidParameterException, WAFInvalidPermissionPolicyException, WAFInvalidResourceException, WAFLimitsExceededException, WAFLogDestinationPermissionIssueException, WAFNonexistentItemException, WAFOptimisticLockException, WAFServiceLinkedRoleErrorException, WAFSubscriptionNotFoundException, WAFTagOperationException, WAFTagOperationInternalErrorException, WAFUnavailableEntityException, WAFUnsupportedAggregateKeyTypeException, } from "../models/models_0";
import { WAFV2ServiceException as __BaseException } from "../models/WAFV2ServiceException";
export const se_AssociateWebACLCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateWebACL");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CheckCapacityCommand = async (input, context) => {
    const headers = sharedHeaders("CheckCapacity");
    let body;
    body = JSON.stringify(se_CheckCapacityRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateAPIKeyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAPIKey");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateIPSetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateIPSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRegexPatternSetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRegexPatternSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRuleGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRuleGroup");
    let body;
    body = JSON.stringify(se_CreateRuleGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateWebACLCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWebACL");
    let body;
    body = JSON.stringify(se_CreateWebACLRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAPIKeyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAPIKey");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFirewallManagerRuleGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFirewallManagerRuleGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteIPSetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteIPSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteLoggingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteLoggingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePermissionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePermissionPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRegexPatternSetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRegexPatternSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRuleGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRuleGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteWebACLCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWebACL");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAllManagedProductsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAllManagedProducts");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeManagedProductsByVendorCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeManagedProductsByVendor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeManagedRuleGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeManagedRuleGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateWebACLCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateWebACL");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GenerateMobileSdkReleaseUrlCommand = async (input, context) => {
    const headers = sharedHeaders("GenerateMobileSdkReleaseUrl");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetDecryptedAPIKeyCommand = async (input, context) => {
    const headers = sharedHeaders("GetDecryptedAPIKey");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetIPSetCommand = async (input, context) => {
    const headers = sharedHeaders("GetIPSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLoggingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetLoggingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetManagedRuleSetCommand = async (input, context) => {
    const headers = sharedHeaders("GetManagedRuleSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMobileSdkReleaseCommand = async (input, context) => {
    const headers = sharedHeaders("GetMobileSdkRelease");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPermissionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetPermissionPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRateBasedStatementManagedKeysCommand = async (input, context) => {
    const headers = sharedHeaders("GetRateBasedStatementManagedKeys");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRegexPatternSetCommand = async (input, context) => {
    const headers = sharedHeaders("GetRegexPatternSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetRuleGroupCommand = async (input, context) => {
    const headers = sharedHeaders("GetRuleGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSampledRequestsCommand = async (input, context) => {
    const headers = sharedHeaders("GetSampledRequests");
    let body;
    body = JSON.stringify(se_GetSampledRequestsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetWebACLCommand = async (input, context) => {
    const headers = sharedHeaders("GetWebACL");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetWebACLForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("GetWebACLForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAPIKeysCommand = async (input, context) => {
    const headers = sharedHeaders("ListAPIKeys");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAvailableManagedRuleGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAvailableManagedRuleGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAvailableManagedRuleGroupVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAvailableManagedRuleGroupVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListIPSetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListIPSets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListLoggingConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLoggingConfigurations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListManagedRuleSetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListManagedRuleSets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMobileSdkReleasesCommand = async (input, context) => {
    const headers = sharedHeaders("ListMobileSdkReleases");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRegexPatternSetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRegexPatternSets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListResourcesForWebACLCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourcesForWebACL");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRuleGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRuleGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListWebACLsCommand = async (input, context) => {
    const headers = sharedHeaders("ListWebACLs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutLoggingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("PutLoggingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutManagedRuleSetVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("PutManagedRuleSetVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutPermissionPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutPermissionPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateIPSetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateIPSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateManagedRuleSetVersionExpiryDateCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateManagedRuleSetVersionExpiryDate");
    let body;
    body = JSON.stringify(se_UpdateManagedRuleSetVersionExpiryDateRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRegexPatternSetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRegexPatternSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRuleGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRuleGroup");
    let body;
    body = JSON.stringify(se_UpdateRuleGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateWebACLCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWebACL");
    let body;
    body = JSON.stringify(se_UpdateWebACLRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AssociateWebACLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CheckCapacityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateAPIKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateIPSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRegexPatternSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRuleGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateWebACLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAPIKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteFirewallManagerRuleGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteIPSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeletePermissionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRegexPatternSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRuleGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteWebACLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAllManagedProductsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeManagedProductsByVendorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeManagedRuleGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateWebACLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GenerateMobileSdkReleaseUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetDecryptedAPIKeyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetDecryptedAPIKeyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetIPSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetManagedRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetManagedRuleSetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMobileSdkReleaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMobileSdkReleaseResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetPermissionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRateBasedStatementManagedKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRegexPatternSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetRuleGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetRuleGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSampledRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSampledRequestsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetWebACLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetWebACLResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetWebACLForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetWebACLForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAPIKeysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAPIKeysResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAvailableManagedRuleGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListAvailableManagedRuleGroupVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAvailableManagedRuleGroupVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListIPSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListLoggingConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListManagedRuleSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMobileSdkReleasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMobileSdkReleasesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRegexPatternSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListResourcesForWebACLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRuleGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListWebACLsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutManagedRuleSetVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutPermissionPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateIPSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateManagedRuleSetVersionExpiryDateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateManagedRuleSetVersionExpiryDateResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateRegexPatternSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateRuleGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateWebACLCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "WAFInternalErrorException":
        case "com.amazonaws.wafv2#WAFInternalErrorException":
            throw await de_WAFInternalErrorExceptionRes(parsedOutput, context);
        case "WAFInvalidOperationException":
        case "com.amazonaws.wafv2#WAFInvalidOperationException":
            throw await de_WAFInvalidOperationExceptionRes(parsedOutput, context);
        case "WAFInvalidParameterException":
        case "com.amazonaws.wafv2#WAFInvalidParameterException":
            throw await de_WAFInvalidParameterExceptionRes(parsedOutput, context);
        case "WAFNonexistentItemException":
        case "com.amazonaws.wafv2#WAFNonexistentItemException":
            throw await de_WAFNonexistentItemExceptionRes(parsedOutput, context);
        case "WAFUnavailableEntityException":
        case "com.amazonaws.wafv2#WAFUnavailableEntityException":
            throw await de_WAFUnavailableEntityExceptionRes(parsedOutput, context);
        case "WAFExpiredManagedRuleGroupVersionException":
        case "com.amazonaws.wafv2#WAFExpiredManagedRuleGroupVersionException":
            throw await de_WAFExpiredManagedRuleGroupVersionExceptionRes(parsedOutput, context);
        case "WAFInvalidResourceException":
        case "com.amazonaws.wafv2#WAFInvalidResourceException":
            throw await de_WAFInvalidResourceExceptionRes(parsedOutput, context);
        case "WAFLimitsExceededException":
        case "com.amazonaws.wafv2#WAFLimitsExceededException":
            throw await de_WAFLimitsExceededExceptionRes(parsedOutput, context);
        case "WAFSubscriptionNotFoundException":
        case "com.amazonaws.wafv2#WAFSubscriptionNotFoundException":
            throw await de_WAFSubscriptionNotFoundExceptionRes(parsedOutput, context);
        case "WAFDuplicateItemException":
        case "com.amazonaws.wafv2#WAFDuplicateItemException":
            throw await de_WAFDuplicateItemExceptionRes(parsedOutput, context);
        case "WAFOptimisticLockException":
        case "com.amazonaws.wafv2#WAFOptimisticLockException":
            throw await de_WAFOptimisticLockExceptionRes(parsedOutput, context);
        case "WAFTagOperationException":
        case "com.amazonaws.wafv2#WAFTagOperationException":
            throw await de_WAFTagOperationExceptionRes(parsedOutput, context);
        case "WAFTagOperationInternalErrorException":
        case "com.amazonaws.wafv2#WAFTagOperationInternalErrorException":
            throw await de_WAFTagOperationInternalErrorExceptionRes(parsedOutput, context);
        case "WAFConfigurationWarningException":
        case "com.amazonaws.wafv2#WAFConfigurationWarningException":
            throw await de_WAFConfigurationWarningExceptionRes(parsedOutput, context);
        case "WAFAssociatedItemException":
        case "com.amazonaws.wafv2#WAFAssociatedItemException":
            throw await de_WAFAssociatedItemExceptionRes(parsedOutput, context);
        case "WAFUnsupportedAggregateKeyTypeException":
        case "com.amazonaws.wafv2#WAFUnsupportedAggregateKeyTypeException":
            throw await de_WAFUnsupportedAggregateKeyTypeExceptionRes(parsedOutput, context);
        case "WAFLogDestinationPermissionIssueException":
        case "com.amazonaws.wafv2#WAFLogDestinationPermissionIssueException":
            throw await de_WAFLogDestinationPermissionIssueExceptionRes(parsedOutput, context);
        case "WAFServiceLinkedRoleErrorException":
        case "com.amazonaws.wafv2#WAFServiceLinkedRoleErrorException":
            throw await de_WAFServiceLinkedRoleErrorExceptionRes(parsedOutput, context);
        case "WAFInvalidPermissionPolicyException":
        case "com.amazonaws.wafv2#WAFInvalidPermissionPolicyException":
            throw await de_WAFInvalidPermissionPolicyExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_WAFAssociatedItemExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFAssociatedItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFConfigurationWarningExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFConfigurationWarningException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFDuplicateItemExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFDuplicateItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFExpiredManagedRuleGroupVersionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFExpiredManagedRuleGroupVersionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFInternalErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFInternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFInvalidOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFInvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFInvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFInvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFInvalidPermissionPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFInvalidPermissionPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFInvalidResourceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFInvalidResourceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFLimitsExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFLimitsExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFLogDestinationPermissionIssueExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFLogDestinationPermissionIssueException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFNonexistentItemExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFNonexistentItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFOptimisticLockExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFOptimisticLockException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFServiceLinkedRoleErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFServiceLinkedRoleErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFSubscriptionNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFSubscriptionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFTagOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFTagOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFTagOperationInternalErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFTagOperationInternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFUnavailableEntityExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFUnavailableEntityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_WAFUnsupportedAggregateKeyTypeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new WAFUnsupportedAggregateKeyTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AndStatement = (input, context) => {
    return take(input, {
        Statements: (_) => se_Statements(_, context),
    });
};
const se_ByteMatchStatement = (input, context) => {
    return take(input, {
        FieldToMatch: _json,
        PositionalConstraint: [],
        SearchString: context.base64Encoder,
        TextTransformations: _json,
    });
};
const se_CheckCapacityRequest = (input, context) => {
    return take(input, {
        Rules: (_) => se_Rules(_, context),
        Scope: [],
    });
};
const se_CreateRuleGroupRequest = (input, context) => {
    return take(input, {
        Capacity: [],
        CustomResponseBodies: _json,
        Description: [],
        Name: [],
        Rules: (_) => se_Rules(_, context),
        Scope: [],
        Tags: _json,
        VisibilityConfig: _json,
    });
};
const se_CreateWebACLRequest = (input, context) => {
    return take(input, {
        AssociationConfig: _json,
        CaptchaConfig: _json,
        ChallengeConfig: _json,
        CustomResponseBodies: _json,
        DefaultAction: _json,
        Description: [],
        Name: [],
        Rules: (_) => se_Rules(_, context),
        Scope: [],
        Tags: _json,
        TokenDomains: _json,
        VisibilityConfig: _json,
    });
};
const se_GetSampledRequestsRequest = (input, context) => {
    return take(input, {
        MaxItems: [],
        RuleMetricName: [],
        Scope: [],
        TimeWindow: (_) => se_TimeWindow(_, context),
        WebAclArn: [],
    });
};
const se_ManagedRuleGroupStatement = (input, context) => {
    return take(input, {
        ExcludedRules: _json,
        ManagedRuleGroupConfigs: _json,
        Name: [],
        RuleActionOverrides: _json,
        ScopeDownStatement: (_) => se_Statement(_, context),
        VendorName: [],
        Version: [],
    });
};
const se_NotStatement = (input, context) => {
    return take(input, {
        Statement: (_) => se_Statement(_, context),
    });
};
const se_OrStatement = (input, context) => {
    return take(input, {
        Statements: (_) => se_Statements(_, context),
    });
};
const se_RateBasedStatement = (input, context) => {
    return take(input, {
        AggregateKeyType: [],
        CustomKeys: _json,
        EvaluationWindowSec: [],
        ForwardedIPConfig: _json,
        Limit: [],
        ScopeDownStatement: (_) => se_Statement(_, context),
    });
};
const se_Rule = (input, context) => {
    return take(input, {
        Action: _json,
        CaptchaConfig: _json,
        ChallengeConfig: _json,
        Name: [],
        OverrideAction: _json,
        Priority: [],
        RuleLabels: _json,
        Statement: (_) => se_Statement(_, context),
        VisibilityConfig: _json,
    });
};
const se_Rules = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Rule(entry, context);
    });
};
const se_Statement = (input, context) => {
    return take(input, {
        AndStatement: (_) => se_AndStatement(_, context),
        ByteMatchStatement: (_) => se_ByteMatchStatement(_, context),
        GeoMatchStatement: _json,
        IPSetReferenceStatement: _json,
        LabelMatchStatement: _json,
        ManagedRuleGroupStatement: (_) => se_ManagedRuleGroupStatement(_, context),
        NotStatement: (_) => se_NotStatement(_, context),
        OrStatement: (_) => se_OrStatement(_, context),
        RateBasedStatement: (_) => se_RateBasedStatement(_, context),
        RegexMatchStatement: _json,
        RegexPatternSetReferenceStatement: _json,
        RuleGroupReferenceStatement: _json,
        SizeConstraintStatement: _json,
        SqliMatchStatement: _json,
        XssMatchStatement: _json,
    });
};
const se_Statements = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Statement(entry, context);
    });
};
const se_TimeWindow = (input, context) => {
    return take(input, {
        EndTime: (_) => _.getTime() / 1000,
        StartTime: (_) => _.getTime() / 1000,
    });
};
const se_UpdateManagedRuleSetVersionExpiryDateRequest = (input, context) => {
    return take(input, {
        ExpiryTimestamp: (_) => _.getTime() / 1000,
        Id: [],
        LockToken: [],
        Name: [],
        Scope: [],
        VersionToExpire: [],
    });
};
const se_UpdateRuleGroupRequest = (input, context) => {
    return take(input, {
        CustomResponseBodies: _json,
        Description: [],
        Id: [],
        LockToken: [],
        Name: [],
        Rules: (_) => se_Rules(_, context),
        Scope: [],
        VisibilityConfig: _json,
    });
};
const se_UpdateWebACLRequest = (input, context) => {
    return take(input, {
        AssociationConfig: _json,
        CaptchaConfig: _json,
        ChallengeConfig: _json,
        CustomResponseBodies: _json,
        DefaultAction: _json,
        Description: [],
        Id: [],
        LockToken: [],
        Name: [],
        Rules: (_) => se_Rules(_, context),
        Scope: [],
        TokenDomains: _json,
        VisibilityConfig: _json,
    });
};
const de_AndStatement = (output, context) => {
    return take(output, {
        Statements: (_) => de_Statements(_, context),
    });
};
const de_APIKeySummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_APIKeySummary(entry, context);
    });
    return retVal;
};
const de_APIKeySummary = (output, context) => {
    return take(output, {
        APIKey: __expectString,
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TokenDomains: _json,
        Version: __expectInt32,
    });
};
const de_ByteMatchStatement = (output, context) => {
    return take(output, {
        FieldToMatch: _json,
        PositionalConstraint: __expectString,
        SearchString: context.base64Decoder,
        TextTransformations: _json,
    });
};
const de_FirewallManagerRuleGroup = (output, context) => {
    return take(output, {
        FirewallManagerStatement: (_) => de_FirewallManagerStatement(_, context),
        Name: __expectString,
        OverrideAction: _json,
        Priority: __expectInt32,
        VisibilityConfig: _json,
    });
};
const de_FirewallManagerRuleGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FirewallManagerRuleGroup(entry, context);
    });
    return retVal;
};
const de_FirewallManagerStatement = (output, context) => {
    return take(output, {
        ManagedRuleGroupStatement: (_) => de_ManagedRuleGroupStatement(_, context),
        RuleGroupReferenceStatement: _json,
    });
};
const de_GetDecryptedAPIKeyResponse = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        TokenDomains: _json,
    });
};
const de_GetManagedRuleSetResponse = (output, context) => {
    return take(output, {
        LockToken: __expectString,
        ManagedRuleSet: (_) => de_ManagedRuleSet(_, context),
    });
};
const de_GetMobileSdkReleaseResponse = (output, context) => {
    return take(output, {
        MobileSdkRelease: (_) => de_MobileSdkRelease(_, context),
    });
};
const de_GetRuleGroupResponse = (output, context) => {
    return take(output, {
        LockToken: __expectString,
        RuleGroup: (_) => de_RuleGroup(_, context),
    });
};
const de_GetSampledRequestsResponse = (output, context) => {
    return take(output, {
        PopulationSize: __expectLong,
        SampledRequests: (_) => de_SampledHTTPRequests(_, context),
        TimeWindow: (_) => de_TimeWindow(_, context),
    });
};
const de_GetWebACLForResourceResponse = (output, context) => {
    return take(output, {
        WebACL: (_) => de_WebACL(_, context),
    });
};
const de_GetWebACLResponse = (output, context) => {
    return take(output, {
        ApplicationIntegrationURL: __expectString,
        LockToken: __expectString,
        WebACL: (_) => de_WebACL(_, context),
    });
};
const de_ListAPIKeysResponse = (output, context) => {
    return take(output, {
        APIKeySummaries: (_) => de_APIKeySummaries(_, context),
        ApplicationIntegrationURL: __expectString,
        NextMarker: __expectString,
    });
};
const de_ListAvailableManagedRuleGroupVersionsResponse = (output, context) => {
    return take(output, {
        CurrentDefaultVersion: __expectString,
        NextMarker: __expectString,
        Versions: (_) => de_ManagedRuleGroupVersions(_, context),
    });
};
const de_ListMobileSdkReleasesResponse = (output, context) => {
    return take(output, {
        NextMarker: __expectString,
        ReleaseSummaries: (_) => de_ReleaseSummaries(_, context),
    });
};
const de_ManagedRuleGroupStatement = (output, context) => {
    return take(output, {
        ExcludedRules: _json,
        ManagedRuleGroupConfigs: _json,
        Name: __expectString,
        RuleActionOverrides: _json,
        ScopeDownStatement: (_) => de_Statement(_, context),
        VendorName: __expectString,
        Version: __expectString,
    });
};
const de_ManagedRuleGroupVersion = (output, context) => {
    return take(output, {
        LastUpdateTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
    });
};
const de_ManagedRuleGroupVersions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedRuleGroupVersion(entry, context);
    });
    return retVal;
};
const de_ManagedRuleSet = (output, context) => {
    return take(output, {
        ARN: __expectString,
        Description: __expectString,
        Id: __expectString,
        LabelNamespace: __expectString,
        Name: __expectString,
        PublishedVersions: (_) => de_PublishedVersions(_, context),
        RecommendedVersion: __expectString,
    });
};
const de_ManagedRuleSetVersion = (output, context) => {
    return take(output, {
        AssociatedRuleGroupArn: __expectString,
        Capacity: __expectLong,
        ExpiryTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ForecastedLifetime: __expectInt32,
        LastUpdateTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PublishTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_MobileSdkRelease = (output, context) => {
    return take(output, {
        ReleaseNotes: __expectString,
        ReleaseVersion: __expectString,
        Tags: _json,
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_NotStatement = (output, context) => {
    return take(output, {
        Statement: (_) => de_Statement(_, context),
    });
};
const de_OrStatement = (output, context) => {
    return take(output, {
        Statements: (_) => de_Statements(_, context),
    });
};
const de_PublishedVersions = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ManagedRuleSetVersion(value, context);
        return acc;
    }, {});
};
const de_RateBasedStatement = (output, context) => {
    return take(output, {
        AggregateKeyType: __expectString,
        CustomKeys: _json,
        EvaluationWindowSec: __expectLong,
        ForwardedIPConfig: _json,
        Limit: __expectLong,
        ScopeDownStatement: (_) => de_Statement(_, context),
    });
};
const de_ReleaseSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReleaseSummary(entry, context);
    });
    return retVal;
};
const de_ReleaseSummary = (output, context) => {
    return take(output, {
        ReleaseVersion: __expectString,
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_Rule = (output, context) => {
    return take(output, {
        Action: _json,
        CaptchaConfig: _json,
        ChallengeConfig: _json,
        Name: __expectString,
        OverrideAction: _json,
        Priority: __expectInt32,
        RuleLabels: _json,
        Statement: (_) => de_Statement(_, context),
        VisibilityConfig: _json,
    });
};
const de_RuleGroup = (output, context) => {
    return take(output, {
        ARN: __expectString,
        AvailableLabels: _json,
        Capacity: __expectLong,
        ConsumedLabels: _json,
        CustomResponseBodies: _json,
        Description: __expectString,
        Id: __expectString,
        LabelNamespace: __expectString,
        Name: __expectString,
        Rules: (_) => de_Rules(_, context),
        VisibilityConfig: _json,
    });
};
const de_Rules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Rule(entry, context);
    });
    return retVal;
};
const de_SampledHTTPRequest = (output, context) => {
    return take(output, {
        Action: __expectString,
        CaptchaResponse: _json,
        ChallengeResponse: _json,
        Labels: _json,
        OverriddenAction: __expectString,
        Request: _json,
        RequestHeadersInserted: _json,
        ResponseCodeSent: __expectInt32,
        RuleNameWithinRuleGroup: __expectString,
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Weight: __expectLong,
    });
};
const de_SampledHTTPRequests = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SampledHTTPRequest(entry, context);
    });
    return retVal;
};
const de_Statement = (output, context) => {
    return take(output, {
        AndStatement: (_) => de_AndStatement(_, context),
        ByteMatchStatement: (_) => de_ByteMatchStatement(_, context),
        GeoMatchStatement: _json,
        IPSetReferenceStatement: _json,
        LabelMatchStatement: _json,
        ManagedRuleGroupStatement: (_) => de_ManagedRuleGroupStatement(_, context),
        NotStatement: (_) => de_NotStatement(_, context),
        OrStatement: (_) => de_OrStatement(_, context),
        RateBasedStatement: (_) => de_RateBasedStatement(_, context),
        RegexMatchStatement: _json,
        RegexPatternSetReferenceStatement: _json,
        RuleGroupReferenceStatement: _json,
        SizeConstraintStatement: _json,
        SqliMatchStatement: _json,
        XssMatchStatement: _json,
    });
};
const de_Statements = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Statement(entry, context);
    });
    return retVal;
};
const de_TimeWindow = (output, context) => {
    return take(output, {
        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_UpdateManagedRuleSetVersionExpiryDateResponse = (output, context) => {
    return take(output, {
        ExpiringVersion: __expectString,
        ExpiryTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NextLockToken: __expectString,
    });
};
const de_WebACL = (output, context) => {
    return take(output, {
        ARN: __expectString,
        AssociationConfig: _json,
        Capacity: __expectLong,
        CaptchaConfig: _json,
        ChallengeConfig: _json,
        CustomResponseBodies: _json,
        DefaultAction: _json,
        Description: __expectString,
        Id: __expectString,
        LabelNamespace: __expectString,
        ManagedByFirewallManager: __expectBoolean,
        Name: __expectString,
        PostProcessFirewallManagerRuleGroups: (_) => de_FirewallManagerRuleGroups(_, context),
        PreProcessFirewallManagerRuleGroups: (_) => de_FirewallManagerRuleGroups(_, context),
        Rules: (_) => de_Rules(_, context),
        TokenDomains: _json,
        VisibilityConfig: _json,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSWAF_20190729.${operation}`,
    };
}
