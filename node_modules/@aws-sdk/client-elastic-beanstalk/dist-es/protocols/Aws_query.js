import { parseXmlBody as parseBody, parseXmlErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, parseBoolean as __parseBoolean, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, serializeDateTime as __serializeDateTime, strictParseFloat as __strictParseFloat, strictParseInt32 as __strictParseInt32, strictParseLong as __strictParseLong, withBaseException, } from "@smithy/smithy-client";
import { ElasticBeanstalkServiceException as __BaseException } from "../models/ElasticBeanstalkServiceException";
import { CodeBuildNotInServiceRegionException, ElasticBeanstalkServiceException, InsufficientPrivilegesException, InvalidRequestException, ManagedActionInvalidStateException, OperationInProgressException, PlatformVersionStillReferencedException, ResourceNotFoundException, ResourceTypeNotSupportedException, S3LocationNotInServiceRegionException, S3SubscriptionRequiredException, SourceBundleDeletionException, TooManyApplicationsException, TooManyApplicationVersionsException, TooManyBucketsException, TooManyConfigurationTemplatesException, TooManyEnvironmentsException, TooManyPlatformsException, TooManyTagsException, } from "../models/models_0";
export const se_AbortEnvironmentUpdateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AbortEnvironmentUpdateMessage(input, context),
        [_A]: _AEU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ApplyEnvironmentManagedActionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ApplyEnvironmentManagedActionRequest(input, context),
        [_A]: _AEMA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateEnvironmentOperationsRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateEnvironmentOperationsRoleMessage(input, context),
        [_A]: _AEOR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CheckDNSAvailabilityCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CheckDNSAvailabilityMessage(input, context),
        [_A]: _CDNSA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ComposeEnvironmentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ComposeEnvironmentsMessage(input, context),
        [_A]: _CE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateApplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateApplicationMessage(input, context),
        [_A]: _CA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateApplicationVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateApplicationVersionMessage(input, context),
        [_A]: _CAV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateConfigurationTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateConfigurationTemplateMessage(input, context),
        [_A]: _CCT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEnvironmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateEnvironmentMessage(input, context),
        [_A]: _CEr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePlatformVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreatePlatformVersionRequest(input, context),
        [_A]: _CPV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateStorageLocationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        [_A]: _CSL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteApplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteApplicationMessage(input, context),
        [_A]: _DA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteApplicationVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteApplicationVersionMessage(input, context),
        [_A]: _DAV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteConfigurationTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteConfigurationTemplateMessage(input, context),
        [_A]: _DCT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEnvironmentConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteEnvironmentConfigurationMessage(input, context),
        [_A]: _DEC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePlatformVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeletePlatformVersionRequest(input, context),
        [_A]: _DPV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAccountAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        [_A]: _DAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeApplicationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeApplicationsMessage(input, context),
        [_A]: _DAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeApplicationVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeApplicationVersionsMessage(input, context),
        [_A]: _DAVe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeConfigurationOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeConfigurationOptionsMessage(input, context),
        [_A]: _DCO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeConfigurationSettingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeConfigurationSettingsMessage(input, context),
        [_A]: _DCS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEnvironmentHealthCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEnvironmentHealthRequest(input, context),
        [_A]: _DEH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEnvironmentManagedActionHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEnvironmentManagedActionHistoryRequest(input, context),
        [_A]: _DEMAH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEnvironmentManagedActionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEnvironmentManagedActionsRequest(input, context),
        [_A]: _DEMA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEnvironmentResourcesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEnvironmentResourcesMessage(input, context),
        [_A]: _DER,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEnvironmentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEnvironmentsMessage(input, context),
        [_A]: _DE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEventsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEventsMessage(input, context),
        [_A]: _DEe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeInstancesHealthCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstancesHealthRequest(input, context),
        [_A]: _DIH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePlatformVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePlatformVersionRequest(input, context),
        [_A]: _DPVe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateEnvironmentOperationsRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateEnvironmentOperationsRoleMessage(input, context),
        [_A]: _DEOR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListAvailableSolutionStacksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    const body = buildFormUrlencodedString({
        [_A]: _LASS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPlatformBranchesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListPlatformBranchesRequest(input, context),
        [_A]: _LPB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPlatformVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListPlatformVersionsRequest(input, context),
        [_A]: _LPV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListTagsForResourceMessage(input, context),
        [_A]: _LTFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RebuildEnvironmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RebuildEnvironmentMessage(input, context),
        [_A]: _RE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RequestEnvironmentInfoCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RequestEnvironmentInfoMessage(input, context),
        [_A]: _REI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RestartAppServerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestartAppServerMessage(input, context),
        [_A]: _RAS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RetrieveEnvironmentInfoCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RetrieveEnvironmentInfoMessage(input, context),
        [_A]: _REIe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SwapEnvironmentCNAMEsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SwapEnvironmentCNAMEsMessage(input, context),
        [_A]: _SECNAME,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TerminateEnvironmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TerminateEnvironmentMessage(input, context),
        [_A]: _TE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateApplicationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateApplicationMessage(input, context),
        [_A]: _UA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateApplicationResourceLifecycleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateApplicationResourceLifecycleMessage(input, context),
        [_A]: _UARL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateApplicationVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateApplicationVersionMessage(input, context),
        [_A]: _UAV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateConfigurationTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateConfigurationTemplateMessage(input, context),
        [_A]: _UCT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEnvironmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateEnvironmentMessage(input, context),
        [_A]: _UE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTagsForResourceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateTagsForResourceMessage(input, context),
        [_A]: _UTFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ValidateConfigurationSettingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ValidateConfigurationSettingsMessage(input, context),
        [_A]: _VCS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AbortEnvironmentUpdateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_ApplyEnvironmentManagedActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplyEnvironmentManagedActionResult(data.ApplyEnvironmentManagedActionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateEnvironmentOperationsRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_CheckDNSAvailabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CheckDNSAvailabilityResultMessage(data.CheckDNSAvailabilityResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ComposeEnvironmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentDescriptionsMessage(data.ComposeEnvironmentsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationDescriptionMessage(data.CreateApplicationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateApplicationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationVersionDescriptionMessage(data.CreateApplicationVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfigurationSettingsDescription(data.CreateConfigurationTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentDescription(data.CreateEnvironmentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePlatformVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreatePlatformVersionResult(data.CreatePlatformVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateStorageLocationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateStorageLocationResultMessage(data.CreateStorageLocationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteApplicationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeleteEnvironmentConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_DeletePlatformVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeletePlatformVersionResult(data.DeletePlatformVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAccountAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAccountAttributesResult(data.DescribeAccountAttributesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeApplicationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationDescriptionsMessage(data.DescribeApplicationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeApplicationVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationVersionDescriptionsMessage(data.DescribeApplicationVersionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeConfigurationOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfigurationOptionsDescription(data.DescribeConfigurationOptionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeConfigurationSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfigurationSettingsDescriptions(data.DescribeConfigurationSettingsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEnvironmentHealthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEnvironmentHealthResult(data.DescribeEnvironmentHealthResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEnvironmentManagedActionHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEnvironmentManagedActionHistoryResult(data.DescribeEnvironmentManagedActionHistoryResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEnvironmentManagedActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEnvironmentManagedActionsResult(data.DescribeEnvironmentManagedActionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEnvironmentResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentResourceDescriptionsMessage(data.DescribeEnvironmentResourcesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEnvironmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentDescriptionsMessage(data.DescribeEnvironmentsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EventDescriptionsMessage(data.DescribeEventsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeInstancesHealthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancesHealthResult(data.DescribeInstancesHealthResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribePlatformVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePlatformVersionResult(data.DescribePlatformVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateEnvironmentOperationsRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_ListAvailableSolutionStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListAvailableSolutionStacksResultMessage(data.ListAvailableSolutionStacksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPlatformBranchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPlatformBranchesResult(data.ListPlatformBranchesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPlatformVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListPlatformVersionsResult(data.ListPlatformVersionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ResourceTagsDescriptionMessage(data.ListTagsForResourceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RebuildEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RequestEnvironmentInfoCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RestartAppServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_RetrieveEnvironmentInfoCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RetrieveEnvironmentInfoResultMessage(data.RetrieveEnvironmentInfoResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SwapEnvironmentCNAMEsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_TerminateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentDescription(data.TerminateEnvironmentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationDescriptionMessage(data.UpdateApplicationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateApplicationResourceLifecycleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationResourceLifecycleDescriptionMessage(data.UpdateApplicationResourceLifecycleResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateApplicationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ApplicationVersionDescriptionMessage(data.UpdateApplicationVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateConfigurationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfigurationSettingsDescription(data.UpdateConfigurationTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEnvironmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_EnvironmentDescription(data.UpdateEnvironmentResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_ValidateConfigurationSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ConfigurationSettingsValidationMessages(data.ValidateConfigurationSettingsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientPrivilegesException":
        case "com.amazonaws.elasticbeanstalk#InsufficientPrivilegesException":
            throw await de_InsufficientPrivilegesExceptionRes(parsedOutput, context);
        case "ElasticBeanstalkServiceException":
        case "com.amazonaws.elasticbeanstalk#ElasticBeanstalkServiceException":
            throw await de_ElasticBeanstalkServiceExceptionRes(parsedOutput, context);
        case "ManagedActionInvalidStateException":
        case "com.amazonaws.elasticbeanstalk#ManagedActionInvalidStateException":
            throw await de_ManagedActionInvalidStateExceptionRes(parsedOutput, context);
        case "TooManyEnvironmentsException":
        case "com.amazonaws.elasticbeanstalk#TooManyEnvironmentsException":
            throw await de_TooManyEnvironmentsExceptionRes(parsedOutput, context);
        case "TooManyApplicationsException":
        case "com.amazonaws.elasticbeanstalk#TooManyApplicationsException":
            throw await de_TooManyApplicationsExceptionRes(parsedOutput, context);
        case "CodeBuildNotInServiceRegionException":
        case "com.amazonaws.elasticbeanstalk#CodeBuildNotInServiceRegionException":
            throw await de_CodeBuildNotInServiceRegionExceptionRes(parsedOutput, context);
        case "S3LocationNotInServiceRegionException":
        case "com.amazonaws.elasticbeanstalk#S3LocationNotInServiceRegionException":
            throw await de_S3LocationNotInServiceRegionExceptionRes(parsedOutput, context);
        case "TooManyApplicationVersionsException":
        case "com.amazonaws.elasticbeanstalk#TooManyApplicationVersionsException":
            throw await de_TooManyApplicationVersionsExceptionRes(parsedOutput, context);
        case "TooManyBucketsException":
        case "com.amazonaws.elasticbeanstalk#TooManyBucketsException":
            throw await de_TooManyBucketsExceptionRes(parsedOutput, context);
        case "TooManyConfigurationTemplatesException":
        case "com.amazonaws.elasticbeanstalk#TooManyConfigurationTemplatesException":
            throw await de_TooManyConfigurationTemplatesExceptionRes(parsedOutput, context);
        case "TooManyPlatformsException":
        case "com.amazonaws.elasticbeanstalk#TooManyPlatformsException":
            throw await de_TooManyPlatformsExceptionRes(parsedOutput, context);
        case "S3SubscriptionRequiredException":
        case "com.amazonaws.elasticbeanstalk#S3SubscriptionRequiredException":
            throw await de_S3SubscriptionRequiredExceptionRes(parsedOutput, context);
        case "OperationInProgressFailure":
        case "com.amazonaws.elasticbeanstalk#OperationInProgressException":
            throw await de_OperationInProgressExceptionRes(parsedOutput, context);
        case "SourceBundleDeletionFailure":
        case "com.amazonaws.elasticbeanstalk#SourceBundleDeletionException":
            throw await de_SourceBundleDeletionExceptionRes(parsedOutput, context);
        case "PlatformVersionStillReferencedException":
        case "com.amazonaws.elasticbeanstalk#PlatformVersionStillReferencedException":
            throw await de_PlatformVersionStillReferencedExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.elasticbeanstalk#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.elasticbeanstalk#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ResourceTypeNotSupportedException":
        case "com.amazonaws.elasticbeanstalk#ResourceTypeNotSupportedException":
            throw await de_ResourceTypeNotSupportedExceptionRes(parsedOutput, context);
        case "TooManyTagsException":
        case "com.amazonaws.elasticbeanstalk#TooManyTagsException":
            throw await de_TooManyTagsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                errorCode,
            });
    }
};
const de_CodeBuildNotInServiceRegionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_CodeBuildNotInServiceRegionException(body.Error, context);
    const exception = new CodeBuildNotInServiceRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ElasticBeanstalkServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ElasticBeanstalkServiceException(body.Error, context);
    const exception = new ElasticBeanstalkServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InsufficientPrivilegesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InsufficientPrivilegesException(body.Error, context);
    const exception = new InsufficientPrivilegesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_InvalidRequestException(body.Error, context);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ManagedActionInvalidStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ManagedActionInvalidStateException(body.Error, context);
    const exception = new ManagedActionInvalidStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_OperationInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_OperationInProgressException(body.Error, context);
    const exception = new OperationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_PlatformVersionStillReferencedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_PlatformVersionStillReferencedException(body.Error, context);
    const exception = new PlatformVersionStillReferencedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceNotFoundException(body.Error, context);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceTypeNotSupportedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_ResourceTypeNotSupportedException(body.Error, context);
    const exception = new ResourceTypeNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_S3LocationNotInServiceRegionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_S3LocationNotInServiceRegionException(body.Error, context);
    const exception = new S3LocationNotInServiceRegionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_S3SubscriptionRequiredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_S3SubscriptionRequiredException(body.Error, context);
    const exception = new S3SubscriptionRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_SourceBundleDeletionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_SourceBundleDeletionException(body.Error, context);
    const exception = new SourceBundleDeletionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyApplicationsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyApplicationsException(body.Error, context);
    const exception = new TooManyApplicationsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyApplicationVersionsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyApplicationVersionsException(body.Error, context);
    const exception = new TooManyApplicationVersionsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyBucketsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyBucketsException(body.Error, context);
    const exception = new TooManyBucketsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyConfigurationTemplatesExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyConfigurationTemplatesException(body.Error, context);
    const exception = new TooManyConfigurationTemplatesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyEnvironmentsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyEnvironmentsException(body.Error, context);
    const exception = new TooManyEnvironmentsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyPlatformsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyPlatformsException(body.Error, context);
    const exception = new TooManyPlatformsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TooManyTagsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = de_TooManyTagsException(body.Error, context);
    const exception = new TooManyTagsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AbortEnvironmentUpdateMessage = (input, context) => {
    const entries = {};
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    return entries;
};
const se_ApplicationNamesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ApplicationResourceLifecycleConfig = (input, context) => {
    const entries = {};
    if (input[_SR] != null) {
        entries[_SR] = input[_SR];
    }
    if (input[_VLC] != null) {
        const memberEntries = se_ApplicationVersionLifecycleConfig(input[_VLC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VersionLifecycleConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ApplicationVersionLifecycleConfig = (input, context) => {
    const entries = {};
    if (input[_MCR] != null) {
        const memberEntries = se_MaxCountRule(input[_MCR], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaxCountRule.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MAR] != null) {
        const memberEntries = se_MaxAgeRule(input[_MAR], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaxAgeRule.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ApplyEnvironmentManagedActionRequest = (input, context) => {
    const entries = {};
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_AI] != null) {
        entries[_AI] = input[_AI];
    }
    return entries;
};
const se_AssociateEnvironmentOperationsRoleMessage = (input, context) => {
    const entries = {};
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_OR] != null) {
        entries[_OR] = input[_OR];
    }
    return entries;
};
const se_BuildConfiguration = (input, context) => {
    const entries = {};
    if (input[_AN] != null) {
        entries[_AN] = input[_AN];
    }
    if (input[_CBSR] != null) {
        entries[_CBSR] = input[_CBSR];
    }
    if (input[_CT] != null) {
        entries[_CT] = input[_CT];
    }
    if (input[_I] != null) {
        entries[_I] = input[_I];
    }
    if (input[_TIM] != null) {
        entries[_TIM] = input[_TIM];
    }
    return entries;
};
const se_CheckDNSAvailabilityMessage = (input, context) => {
    const entries = {};
    if (input[_CNAMEP] != null) {
        entries[_CNAMEP] = input[_CNAMEP];
    }
    return entries;
};
const se_ComposeEnvironmentsMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_VL] != null) {
        const memberEntries = se_VersionLabels(input[_VL], context);
        if (input[_VL]?.length === 0) {
            entries.VersionLabels = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VersionLabels.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ConfigurationOptionSetting = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_ON] != null) {
        entries[_ON] = input[_ON];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_ConfigurationOptionSettingsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ConfigurationOptionSetting(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_CreateApplicationMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_RLC] != null) {
        const memberEntries = se_ApplicationResourceLifecycleConfig(input[_RLC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceLifecycleConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_T] != null) {
        const memberEntries = se_Tags(input[_T], context);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateApplicationVersionMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_VLe] != null) {
        entries[_VLe] = input[_VLe];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_SBI] != null) {
        const memberEntries = se_SourceBuildInformation(input[_SBI], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceBuildInformation.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SB] != null) {
        const memberEntries = se_S3Location(input[_SB], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceBundle.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_BC] != null) {
        const memberEntries = se_BuildConfiguration(input[_BC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BuildConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ACA] != null) {
        entries[_ACA] = input[_ACA];
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_T] != null) {
        const memberEntries = se_Tags(input[_T], context);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateConfigurationTemplateMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_SC] != null) {
        const memberEntries = se_SourceConfiguration(input[_SC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_OS] != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input[_OS], context);
        if (input[_OS]?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_T] != null) {
        const memberEntries = se_Tags(input[_T], context);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_CNAMEP] != null) {
        entries[_CNAMEP] = input[_CNAMEP];
    }
    if (input[_Ti] != null) {
        const memberEntries = se_EnvironmentTier(input[_Ti], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tier.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_T] != null) {
        const memberEntries = se_Tags(input[_T], context);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_VLe] != null) {
        entries[_VLe] = input[_VLe];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_OS] != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input[_OS], context);
        if (input[_OS]?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OTR] != null) {
        const memberEntries = se_OptionsSpecifierList(input[_OTR], context);
        if (input[_OTR]?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OR] != null) {
        entries[_OR] = input[_OR];
    }
    return entries;
};
const se_CreatePlatformVersionRequest = (input, context) => {
    const entries = {};
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_PV] != null) {
        entries[_PV] = input[_PV];
    }
    if (input[_PDB] != null) {
        const memberEntries = se_S3Location(input[_PDB], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PlatformDefinitionBundle.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_OS] != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input[_OS], context);
        if (input[_OS]?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_T] != null) {
        const memberEntries = se_Tags(input[_T], context);
        if (input[_T]?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteApplicationMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_TEBF] != null) {
        entries[_TEBF] = input[_TEBF];
    }
    return entries;
};
const se_DeleteApplicationVersionMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_VLe] != null) {
        entries[_VLe] = input[_VLe];
    }
    if (input[_DSB] != null) {
        entries[_DSB] = input[_DSB];
    }
    return entries;
};
const se_DeleteConfigurationTemplateMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    return entries;
};
const se_DeleteEnvironmentConfigurationMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    return entries;
};
const se_DeletePlatformVersionRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    return entries;
};
const se_DescribeApplicationsMessage = (input, context) => {
    const entries = {};
    if (input[_ANpp] != null) {
        const memberEntries = se_ApplicationNamesList(input[_ANpp], context);
        if (input[_ANpp]?.length === 0) {
            entries.ApplicationNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ApplicationNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeApplicationVersionsMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_VL] != null) {
        const memberEntries = se_VersionLabelsList(input[_VL], context);
        if (input[_VL]?.length === 0) {
            entries.VersionLabels = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VersionLabels.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeConfigurationOptionsMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_O] != null) {
        const memberEntries = se_OptionsSpecifierList(input[_O], context);
        if (input[_O]?.length === 0) {
            entries.Options = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeConfigurationSettingsMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    return entries;
};
const se_DescribeEnvironmentHealthRequest = (input, context) => {
    const entries = {};
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_ANt] != null) {
        const memberEntries = se_EnvironmentHealthAttributes(input[_ANt], context);
        if (input[_ANt]?.length === 0) {
            entries.AttributeNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AttributeNames.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeEnvironmentManagedActionHistoryRequest = (input, context) => {
    const entries = {};
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MI] != null) {
        entries[_MI] = input[_MI];
    }
    return entries;
};
const se_DescribeEnvironmentManagedActionsRequest = (input, context) => {
    const entries = {};
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    return entries;
};
const se_DescribeEnvironmentResourcesMessage = (input, context) => {
    const entries = {};
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    return entries;
};
const se_DescribeEnvironmentsMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_VLe] != null) {
        entries[_VLe] = input[_VLe];
    }
    if (input[_EIn] != null) {
        const memberEntries = se_EnvironmentIdList(input[_EIn], context);
        if (input[_EIn]?.length === 0) {
            entries.EnvironmentIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnvironmentIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ENn] != null) {
        const memberEntries = se_EnvironmentNamesList(input[_ENn], context);
        if (input[_ENn]?.length === 0) {
            entries.EnvironmentNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnvironmentNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ID] != null) {
        entries[_ID] = input[_ID];
    }
    if (input[_IDBT] != null) {
        entries[_IDBT] = __serializeDateTime(input[_IDBT]);
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeEventsMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_VLe] != null) {
        entries[_VLe] = input[_VLe];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_RI] != null) {
        entries[_RI] = input[_RI];
    }
    if (input[_Se] != null) {
        entries[_Se] = input[_Se];
    }
    if (input[_ST] != null) {
        entries[_ST] = __serializeDateTime(input[_ST]);
    }
    if (input[_ET] != null) {
        entries[_ET] = __serializeDateTime(input[_ET]);
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeInstancesHealthRequest = (input, context) => {
    const entries = {};
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_ANt] != null) {
        const memberEntries = se_InstancesHealthAttributes(input[_ANt], context);
        if (input[_ANt]?.length === 0) {
            entries.AttributeNames = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AttributeNames.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribePlatformVersionRequest = (input, context) => {
    const entries = {};
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    return entries;
};
const se_DisassociateEnvironmentOperationsRoleMessage = (input, context) => {
    const entries = {};
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    return entries;
};
const se_EnvironmentHealthAttributes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_EnvironmentIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_EnvironmentNamesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_EnvironmentTier = (input, context) => {
    const entries = {};
    if (input[_Na] != null) {
        entries[_Na] = input[_Na];
    }
    if (input[_Ty] != null) {
        entries[_Ty] = input[_Ty];
    }
    if (input[_V] != null) {
        entries[_V] = input[_V];
    }
    return entries;
};
const se_InstancesHealthAttributes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ListPlatformBranchesRequest = (input, context) => {
    const entries = {};
    if (input[_F] != null) {
        const memberEntries = se_SearchFilters(input[_F], context);
        if (input[_F]?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListPlatformVersionsRequest = (input, context) => {
    const entries = {};
    if (input[_F] != null) {
        const memberEntries = se_PlatformFilters(input[_F], context);
        if (input[_F]?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_ListTagsForResourceMessage = (input, context) => {
    const entries = {};
    if (input[_RA] != null) {
        entries[_RA] = input[_RA];
    }
    return entries;
};
const se_MaxAgeRule = (input, context) => {
    const entries = {};
    if (input[_E] != null) {
        entries[_E] = input[_E];
    }
    if (input[_MAID] != null) {
        entries[_MAID] = input[_MAID];
    }
    if (input[_DSFS] != null) {
        entries[_DSFS] = input[_DSFS];
    }
    return entries;
};
const se_MaxCountRule = (input, context) => {
    const entries = {};
    if (input[_E] != null) {
        entries[_E] = input[_E];
    }
    if (input[_MC] != null) {
        entries[_MC] = input[_MC];
    }
    if (input[_DSFS] != null) {
        entries[_DSFS] = input[_DSFS];
    }
    return entries;
};
const se_OptionSpecification = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_ON] != null) {
        entries[_ON] = input[_ON];
    }
    return entries;
};
const se_OptionsSpecifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_OptionSpecification(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PlatformFilter = (input, context) => {
    const entries = {};
    if (input[_Ty] != null) {
        entries[_Ty] = input[_Ty];
    }
    if (input[_Op] != null) {
        entries[_Op] = input[_Op];
    }
    if (input[_Val] != null) {
        const memberEntries = se_PlatformFilterValueList(input[_Val], context);
        if (input[_Val]?.length === 0) {
            entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PlatformFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PlatformFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PlatformFilterValueList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RebuildEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    return entries;
};
const se_RequestEnvironmentInfoMessage = (input, context) => {
    const entries = {};
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    return entries;
};
const se_RestartAppServerMessage = (input, context) => {
    const entries = {};
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    return entries;
};
const se_RetrieveEnvironmentInfoMessage = (input, context) => {
    const entries = {};
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    return entries;
};
const se_S3Location = (input, context) => {
    const entries = {};
    if (input[_SBu] != null) {
        entries[_SBu] = input[_SBu];
    }
    if (input[_SK] != null) {
        entries[_SK] = input[_SK];
    }
    return entries;
};
const se_SearchFilter = (input, context) => {
    const entries = {};
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_Op] != null) {
        entries[_Op] = input[_Op];
    }
    if (input[_Val] != null) {
        const memberEntries = se_SearchFilterValues(input[_Val], context);
        if (input[_Val]?.length === 0) {
            entries.Values = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Values.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SearchFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SearchFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_SearchFilterValues = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SourceBuildInformation = (input, context) => {
    const entries = {};
    if (input[_STo] != null) {
        entries[_STo] = input[_STo];
    }
    if (input[_SRo] != null) {
        entries[_SRo] = input[_SRo];
    }
    if (input[_SL] != null) {
        entries[_SL] = input[_SL];
    }
    return entries;
};
const se_SourceConfiguration = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    return entries;
};
const se_SwapEnvironmentCNAMEsMessage = (input, context) => {
    const entries = {};
    if (input[_SEI] != null) {
        entries[_SEI] = input[_SEI];
    }
    if (input[_SEN] != null) {
        entries[_SEN] = input[_SEN];
    }
    if (input[_DEI] != null) {
        entries[_DEI] = input[_DEI];
    }
    if (input[_DEN] != null) {
        entries[_DEN] = input[_DEN];
    }
    return entries;
};
const se_Tag = (input, context) => {
    const entries = {};
    if (input[_K] != null) {
        entries[_K] = input[_K];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_TagKeyList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Tags = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TerminateEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_TR] != null) {
        entries[_TR] = input[_TR];
    }
    if (input[_FT] != null) {
        entries[_FT] = input[_FT];
    }
    return entries;
};
const se_UpdateApplicationMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    return entries;
};
const se_UpdateApplicationResourceLifecycleMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_RLC] != null) {
        const memberEntries = se_ApplicationResourceLifecycleConfig(input[_RLC], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceLifecycleConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateApplicationVersionMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_VLe] != null) {
        entries[_VLe] = input[_VLe];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    return entries;
};
const se_UpdateConfigurationTemplateMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_OS] != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input[_OS], context);
        if (input[_OS]?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OTR] != null) {
        const memberEntries = se_OptionsSpecifierList(input[_OTR], context);
        if (input[_OTR]?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateEnvironmentMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_EI] != null) {
        entries[_EI] = input[_EI];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_Ti] != null) {
        const memberEntries = se_EnvironmentTier(input[_Ti], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tier.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_VLe] != null) {
        entries[_VLe] = input[_VLe];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_SSN] != null) {
        entries[_SSN] = input[_SSN];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_OS] != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input[_OS], context);
        if (input[_OS]?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OTR] != null) {
        const memberEntries = se_OptionsSpecifierList(input[_OTR], context);
        if (input[_OTR]?.length === 0) {
            entries.OptionsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateTagsForResourceMessage = (input, context) => {
    const entries = {};
    if (input[_RA] != null) {
        entries[_RA] = input[_RA];
    }
    if (input[_TTA] != null) {
        const memberEntries = se_TagList(input[_TTA], context);
        if (input[_TTA]?.length === 0) {
            entries.TagsToAdd = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagsToAdd.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TTR] != null) {
        const memberEntries = se_TagKeyList(input[_TTR], context);
        if (input[_TTR]?.length === 0) {
            entries.TagsToRemove = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagsToRemove.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ValidateConfigurationSettingsMessage = (input, context) => {
    const entries = {};
    if (input[_ANp] != null) {
        entries[_ANp] = input[_ANp];
    }
    if (input[_TN] != null) {
        entries[_TN] = input[_TN];
    }
    if (input[_EN] != null) {
        entries[_EN] = input[_EN];
    }
    if (input[_OS] != null) {
        const memberEntries = se_ConfigurationOptionSettingsList(input[_OS], context);
        if (input[_OS]?.length === 0) {
            entries.OptionSettings = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionSettings.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_VersionLabels = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VersionLabelsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const de_ApplicationDescription = (output, context) => {
    const contents = {};
    if (output[_AA] != null) {
        contents[_AA] = __expectString(output[_AA]);
    }
    if (output[_ANp] != null) {
        contents[_ANp] = __expectString(output[_ANp]);
    }
    if (output[_D] != null) {
        contents[_D] = __expectString(output[_D]);
    }
    if (output[_DC] != null) {
        contents[_DC] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DC]));
    }
    if (output[_DU] != null) {
        contents[_DU] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DU]));
    }
    if (output.Versions === "") {
        contents[_Ve] = [];
    }
    else if (output[_Ve] != null && output[_Ve][_m] != null) {
        contents[_Ve] = de_VersionLabelsList(__getArrayIfSingleItem(output[_Ve][_m]), context);
    }
    if (output.ConfigurationTemplates === "") {
        contents[_CTo] = [];
    }
    else if (output[_CTo] != null && output[_CTo][_m] != null) {
        contents[_CTo] = de_ConfigurationTemplateNamesList(__getArrayIfSingleItem(output[_CTo][_m]), context);
    }
    if (output[_RLC] != null) {
        contents[_RLC] = de_ApplicationResourceLifecycleConfig(output[_RLC], context);
    }
    return contents;
};
const de_ApplicationDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationDescription(entry, context);
    });
};
const de_ApplicationDescriptionMessage = (output, context) => {
    const contents = {};
    if (output[_Ap] != null) {
        contents[_Ap] = de_ApplicationDescription(output[_Ap], context);
    }
    return contents;
};
const de_ApplicationDescriptionsMessage = (output, context) => {
    const contents = {};
    if (output.Applications === "") {
        contents[_App] = [];
    }
    else if (output[_App] != null && output[_App][_m] != null) {
        contents[_App] = de_ApplicationDescriptionList(__getArrayIfSingleItem(output[_App][_m]), context);
    }
    return contents;
};
const de_ApplicationMetrics = (output, context) => {
    const contents = {};
    if (output[_Du] != null) {
        contents[_Du] = __strictParseInt32(output[_Du]);
    }
    if (output[_RC] != null) {
        contents[_RC] = __strictParseInt32(output[_RC]);
    }
    if (output[_SCt] != null) {
        contents[_SCt] = de_StatusCodes(output[_SCt], context);
    }
    if (output[_L] != null) {
        contents[_L] = de_Latency(output[_L], context);
    }
    return contents;
};
const de_ApplicationResourceLifecycleConfig = (output, context) => {
    const contents = {};
    if (output[_SR] != null) {
        contents[_SR] = __expectString(output[_SR]);
    }
    if (output[_VLC] != null) {
        contents[_VLC] = de_ApplicationVersionLifecycleConfig(output[_VLC], context);
    }
    return contents;
};
const de_ApplicationResourceLifecycleDescriptionMessage = (output, context) => {
    const contents = {};
    if (output[_ANp] != null) {
        contents[_ANp] = __expectString(output[_ANp]);
    }
    if (output[_RLC] != null) {
        contents[_RLC] = de_ApplicationResourceLifecycleConfig(output[_RLC], context);
    }
    return contents;
};
const de_ApplicationVersionDescription = (output, context) => {
    const contents = {};
    if (output[_AVA] != null) {
        contents[_AVA] = __expectString(output[_AVA]);
    }
    if (output[_ANp] != null) {
        contents[_ANp] = __expectString(output[_ANp]);
    }
    if (output[_D] != null) {
        contents[_D] = __expectString(output[_D]);
    }
    if (output[_VLe] != null) {
        contents[_VLe] = __expectString(output[_VLe]);
    }
    if (output[_SBI] != null) {
        contents[_SBI] = de_SourceBuildInformation(output[_SBI], context);
    }
    if (output[_BA] != null) {
        contents[_BA] = __expectString(output[_BA]);
    }
    if (output[_SB] != null) {
        contents[_SB] = de_S3Location(output[_SB], context);
    }
    if (output[_DC] != null) {
        contents[_DC] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DC]));
    }
    if (output[_DU] != null) {
        contents[_DU] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DU]));
    }
    if (output[_S] != null) {
        contents[_S] = __expectString(output[_S]);
    }
    return contents;
};
const de_ApplicationVersionDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ApplicationVersionDescription(entry, context);
    });
};
const de_ApplicationVersionDescriptionMessage = (output, context) => {
    const contents = {};
    if (output[_AV] != null) {
        contents[_AV] = de_ApplicationVersionDescription(output[_AV], context);
    }
    return contents;
};
const de_ApplicationVersionDescriptionsMessage = (output, context) => {
    const contents = {};
    if (output.ApplicationVersions === "") {
        contents[_AVp] = [];
    }
    else if (output[_AVp] != null && output[_AVp][_m] != null) {
        contents[_AVp] = de_ApplicationVersionDescriptionList(__getArrayIfSingleItem(output[_AVp][_m]), context);
    }
    if (output[_NT] != null) {
        contents[_NT] = __expectString(output[_NT]);
    }
    return contents;
};
const de_ApplicationVersionLifecycleConfig = (output, context) => {
    const contents = {};
    if (output[_MCR] != null) {
        contents[_MCR] = de_MaxCountRule(output[_MCR], context);
    }
    if (output[_MAR] != null) {
        contents[_MAR] = de_MaxAgeRule(output[_MAR], context);
    }
    return contents;
};
const de_ApplyEnvironmentManagedActionResult = (output, context) => {
    const contents = {};
    if (output[_AI] != null) {
        contents[_AI] = __expectString(output[_AI]);
    }
    if (output[_AD] != null) {
        contents[_AD] = __expectString(output[_AD]);
    }
    if (output[_AT] != null) {
        contents[_AT] = __expectString(output[_AT]);
    }
    if (output[_S] != null) {
        contents[_S] = __expectString(output[_S]);
    }
    return contents;
};
const de_AutoScalingGroup = (output, context) => {
    const contents = {};
    if (output[_Na] != null) {
        contents[_Na] = __expectString(output[_Na]);
    }
    return contents;
};
const de_AutoScalingGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoScalingGroup(entry, context);
    });
};
const de_AvailableSolutionStackDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SolutionStackDescription(entry, context);
    });
};
const de_AvailableSolutionStackNamesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_Builder = (output, context) => {
    const contents = {};
    if (output[_ARN] != null) {
        contents[_ARN] = __expectString(output[_ARN]);
    }
    return contents;
};
const de_Causes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_CheckDNSAvailabilityResultMessage = (output, context) => {
    const contents = {};
    if (output[_Av] != null) {
        contents[_Av] = __parseBoolean(output[_Av]);
    }
    if (output[_FQCNAME] != null) {
        contents[_FQCNAME] = __expectString(output[_FQCNAME]);
    }
    return contents;
};
const de_CodeBuildNotInServiceRegionException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_ConfigurationOptionDescription = (output, context) => {
    const contents = {};
    if (output[_N] != null) {
        contents[_N] = __expectString(output[_N]);
    }
    if (output[_Na] != null) {
        contents[_Na] = __expectString(output[_Na]);
    }
    if (output[_DV] != null) {
        contents[_DV] = __expectString(output[_DV]);
    }
    if (output[_CS] != null) {
        contents[_CS] = __expectString(output[_CS]);
    }
    if (output[_UD] != null) {
        contents[_UD] = __parseBoolean(output[_UD]);
    }
    if (output[_VT] != null) {
        contents[_VT] = __expectString(output[_VT]);
    }
    if (output.ValueOptions === "") {
        contents[_VO] = [];
    }
    else if (output[_VO] != null && output[_VO][_m] != null) {
        contents[_VO] = de_ConfigurationOptionPossibleValues(__getArrayIfSingleItem(output[_VO][_m]), context);
    }
    if (output[_MV] != null) {
        contents[_MV] = __strictParseInt32(output[_MV]);
    }
    if (output[_MVa] != null) {
        contents[_MVa] = __strictParseInt32(output[_MVa]);
    }
    if (output[_ML] != null) {
        contents[_ML] = __strictParseInt32(output[_ML]);
    }
    if (output[_R] != null) {
        contents[_R] = de_OptionRestrictionRegex(output[_R], context);
    }
    return contents;
};
const de_ConfigurationOptionDescriptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationOptionDescription(entry, context);
    });
};
const de_ConfigurationOptionPossibleValues = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_ConfigurationOptionsDescription = (output, context) => {
    const contents = {};
    if (output[_SSN] != null) {
        contents[_SSN] = __expectString(output[_SSN]);
    }
    if (output[_PA] != null) {
        contents[_PA] = __expectString(output[_PA]);
    }
    if (output.Options === "") {
        contents[_O] = [];
    }
    else if (output[_O] != null && output[_O][_m] != null) {
        contents[_O] = de_ConfigurationOptionDescriptionsList(__getArrayIfSingleItem(output[_O][_m]), context);
    }
    return contents;
};
const de_ConfigurationOptionSetting = (output, context) => {
    const contents = {};
    if (output[_RN] != null) {
        contents[_RN] = __expectString(output[_RN]);
    }
    if (output[_N] != null) {
        contents[_N] = __expectString(output[_N]);
    }
    if (output[_ON] != null) {
        contents[_ON] = __expectString(output[_ON]);
    }
    if (output[_Va] != null) {
        contents[_Va] = __expectString(output[_Va]);
    }
    return contents;
};
const de_ConfigurationOptionSettingsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationOptionSetting(entry, context);
    });
};
const de_ConfigurationSettingsDescription = (output, context) => {
    const contents = {};
    if (output[_SSN] != null) {
        contents[_SSN] = __expectString(output[_SSN]);
    }
    if (output[_PA] != null) {
        contents[_PA] = __expectString(output[_PA]);
    }
    if (output[_ANp] != null) {
        contents[_ANp] = __expectString(output[_ANp]);
    }
    if (output[_TN] != null) {
        contents[_TN] = __expectString(output[_TN]);
    }
    if (output[_D] != null) {
        contents[_D] = __expectString(output[_D]);
    }
    if (output[_EN] != null) {
        contents[_EN] = __expectString(output[_EN]);
    }
    if (output[_DS] != null) {
        contents[_DS] = __expectString(output[_DS]);
    }
    if (output[_DC] != null) {
        contents[_DC] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DC]));
    }
    if (output[_DU] != null) {
        contents[_DU] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DU]));
    }
    if (output.OptionSettings === "") {
        contents[_OS] = [];
    }
    else if (output[_OS] != null && output[_OS][_m] != null) {
        contents[_OS] = de_ConfigurationOptionSettingsList(__getArrayIfSingleItem(output[_OS][_m]), context);
    }
    return contents;
};
const de_ConfigurationSettingsDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationSettingsDescription(entry, context);
    });
};
const de_ConfigurationSettingsDescriptions = (output, context) => {
    const contents = {};
    if (output.ConfigurationSettings === "") {
        contents[_CSo] = [];
    }
    else if (output[_CSo] != null && output[_CSo][_m] != null) {
        contents[_CSo] = de_ConfigurationSettingsDescriptionList(__getArrayIfSingleItem(output[_CSo][_m]), context);
    }
    return contents;
};
const de_ConfigurationSettingsValidationMessages = (output, context) => {
    const contents = {};
    if (output.Messages === "") {
        contents[_M] = [];
    }
    else if (output[_M] != null && output[_M][_m] != null) {
        contents[_M] = de_ValidationMessagesList(__getArrayIfSingleItem(output[_M][_m]), context);
    }
    return contents;
};
const de_ConfigurationTemplateNamesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_CPUUtilization = (output, context) => {
    const contents = {};
    if (output[_U] != null) {
        contents[_U] = __strictParseFloat(output[_U]);
    }
    if (output[_Ni] != null) {
        contents[_Ni] = __strictParseFloat(output[_Ni]);
    }
    if (output[_Sy] != null) {
        contents[_Sy] = __strictParseFloat(output[_Sy]);
    }
    if (output[_Id] != null) {
        contents[_Id] = __strictParseFloat(output[_Id]);
    }
    if (output[_IOW] != null) {
        contents[_IOW] = __strictParseFloat(output[_IOW]);
    }
    if (output[_IRQ] != null) {
        contents[_IRQ] = __strictParseFloat(output[_IRQ]);
    }
    if (output[_SIRQ] != null) {
        contents[_SIRQ] = __strictParseFloat(output[_SIRQ]);
    }
    if (output[_Pr] != null) {
        contents[_Pr] = __strictParseFloat(output[_Pr]);
    }
    return contents;
};
const de_CreatePlatformVersionResult = (output, context) => {
    const contents = {};
    if (output[_PS] != null) {
        contents[_PS] = de_PlatformSummary(output[_PS], context);
    }
    if (output[_B] != null) {
        contents[_B] = de_Builder(output[_B], context);
    }
    return contents;
};
const de_CreateStorageLocationResultMessage = (output, context) => {
    const contents = {};
    if (output[_SBu] != null) {
        contents[_SBu] = __expectString(output[_SBu]);
    }
    return contents;
};
const de_CustomAmi = (output, context) => {
    const contents = {};
    if (output[_VTi] != null) {
        contents[_VTi] = __expectString(output[_VTi]);
    }
    if (output[_II] != null) {
        contents[_II] = __expectString(output[_II]);
    }
    return contents;
};
const de_CustomAmiList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomAmi(entry, context);
    });
};
const de_DeletePlatformVersionResult = (output, context) => {
    const contents = {};
    if (output[_PS] != null) {
        contents[_PS] = de_PlatformSummary(output[_PS], context);
    }
    return contents;
};
const de_Deployment = (output, context) => {
    const contents = {};
    if (output[_VLe] != null) {
        contents[_VLe] = __expectString(output[_VLe]);
    }
    if (output[_DI] != null) {
        contents[_DI] = __strictParseLong(output[_DI]);
    }
    if (output[_S] != null) {
        contents[_S] = __expectString(output[_S]);
    }
    if (output[_DT] != null) {
        contents[_DT] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DT]));
    }
    return contents;
};
const de_DescribeAccountAttributesResult = (output, context) => {
    const contents = {};
    if (output[_RQ] != null) {
        contents[_RQ] = de_ResourceQuotas(output[_RQ], context);
    }
    return contents;
};
const de_DescribeEnvironmentHealthResult = (output, context) => {
    const contents = {};
    if (output[_EN] != null) {
        contents[_EN] = __expectString(output[_EN]);
    }
    if (output[_HS] != null) {
        contents[_HS] = __expectString(output[_HS]);
    }
    if (output[_S] != null) {
        contents[_S] = __expectString(output[_S]);
    }
    if (output[_C] != null) {
        contents[_C] = __expectString(output[_C]);
    }
    if (output.Causes === "") {
        contents[_Ca] = [];
    }
    else if (output[_Ca] != null && output[_Ca][_m] != null) {
        contents[_Ca] = de_Causes(__getArrayIfSingleItem(output[_Ca][_m]), context);
    }
    if (output[_AM] != null) {
        contents[_AM] = de_ApplicationMetrics(output[_AM], context);
    }
    if (output[_IH] != null) {
        contents[_IH] = de_InstanceHealthSummary(output[_IH], context);
    }
    if (output[_RAe] != null) {
        contents[_RAe] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_RAe]));
    }
    return contents;
};
const de_DescribeEnvironmentManagedActionHistoryResult = (output, context) => {
    const contents = {};
    if (output.ManagedActionHistoryItems === "") {
        contents[_MAHI] = [];
    }
    else if (output[_MAHI] != null && output[_MAHI][_m] != null) {
        contents[_MAHI] = de_ManagedActionHistoryItems(__getArrayIfSingleItem(output[_MAHI][_m]), context);
    }
    if (output[_NT] != null) {
        contents[_NT] = __expectString(output[_NT]);
    }
    return contents;
};
const de_DescribeEnvironmentManagedActionsResult = (output, context) => {
    const contents = {};
    if (output.ManagedActions === "") {
        contents[_MA] = [];
    }
    else if (output[_MA] != null && output[_MA][_m] != null) {
        contents[_MA] = de_ManagedActions(__getArrayIfSingleItem(output[_MA][_m]), context);
    }
    return contents;
};
const de_DescribeInstancesHealthResult = (output, context) => {
    const contents = {};
    if (output.InstanceHealthList === "") {
        contents[_IHL] = [];
    }
    else if (output[_IHL] != null && output[_IHL][_m] != null) {
        contents[_IHL] = de_InstanceHealthList(__getArrayIfSingleItem(output[_IHL][_m]), context);
    }
    if (output[_RAe] != null) {
        contents[_RAe] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_RAe]));
    }
    if (output[_NT] != null) {
        contents[_NT] = __expectString(output[_NT]);
    }
    return contents;
};
const de_DescribePlatformVersionResult = (output, context) => {
    const contents = {};
    if (output[_PD] != null) {
        contents[_PD] = de_PlatformDescription(output[_PD], context);
    }
    return contents;
};
const de_ElasticBeanstalkServiceException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_EnvironmentDescription = (output, context) => {
    const contents = {};
    if (output[_EN] != null) {
        contents[_EN] = __expectString(output[_EN]);
    }
    if (output[_EI] != null) {
        contents[_EI] = __expectString(output[_EI]);
    }
    if (output[_ANp] != null) {
        contents[_ANp] = __expectString(output[_ANp]);
    }
    if (output[_VLe] != null) {
        contents[_VLe] = __expectString(output[_VLe]);
    }
    if (output[_SSN] != null) {
        contents[_SSN] = __expectString(output[_SSN]);
    }
    if (output[_PA] != null) {
        contents[_PA] = __expectString(output[_PA]);
    }
    if (output[_TN] != null) {
        contents[_TN] = __expectString(output[_TN]);
    }
    if (output[_D] != null) {
        contents[_D] = __expectString(output[_D]);
    }
    if (output[_EURL] != null) {
        contents[_EURL] = __expectString(output[_EURL]);
    }
    if (output[_CNAME] != null) {
        contents[_CNAME] = __expectString(output[_CNAME]);
    }
    if (output[_DC] != null) {
        contents[_DC] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DC]));
    }
    if (output[_DU] != null) {
        contents[_DU] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DU]));
    }
    if (output[_S] != null) {
        contents[_S] = __expectString(output[_S]);
    }
    if (output[_AOIP] != null) {
        contents[_AOIP] = __parseBoolean(output[_AOIP]);
    }
    if (output[_H] != null) {
        contents[_H] = __expectString(output[_H]);
    }
    if (output[_HS] != null) {
        contents[_HS] = __expectString(output[_HS]);
    }
    if (output[_Re] != null) {
        contents[_Re] = de_EnvironmentResourcesDescription(output[_Re], context);
    }
    if (output[_Ti] != null) {
        contents[_Ti] = de_EnvironmentTier(output[_Ti], context);
    }
    if (output.EnvironmentLinks === "") {
        contents[_EL] = [];
    }
    else if (output[_EL] != null && output[_EL][_m] != null) {
        contents[_EL] = de_EnvironmentLinks(__getArrayIfSingleItem(output[_EL][_m]), context);
    }
    if (output[_EA] != null) {
        contents[_EA] = __expectString(output[_EA]);
    }
    if (output[_OR] != null) {
        contents[_OR] = __expectString(output[_OR]);
    }
    return contents;
};
const de_EnvironmentDescriptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentDescription(entry, context);
    });
};
const de_EnvironmentDescriptionsMessage = (output, context) => {
    const contents = {};
    if (output.Environments === "") {
        contents[_En] = [];
    }
    else if (output[_En] != null && output[_En][_m] != null) {
        contents[_En] = de_EnvironmentDescriptionsList(__getArrayIfSingleItem(output[_En][_m]), context);
    }
    if (output[_NT] != null) {
        contents[_NT] = __expectString(output[_NT]);
    }
    return contents;
};
const de_EnvironmentInfoDescription = (output, context) => {
    const contents = {};
    if (output[_IT] != null) {
        contents[_IT] = __expectString(output[_IT]);
    }
    if (output[_EII] != null) {
        contents[_EII] = __expectString(output[_EII]);
    }
    if (output[_STa] != null) {
        contents[_STa] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_STa]));
    }
    if (output[_Me] != null) {
        contents[_Me] = __expectString(output[_Me]);
    }
    return contents;
};
const de_EnvironmentInfoDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentInfoDescription(entry, context);
    });
};
const de_EnvironmentLink = (output, context) => {
    const contents = {};
    if (output[_LN] != null) {
        contents[_LN] = __expectString(output[_LN]);
    }
    if (output[_EN] != null) {
        contents[_EN] = __expectString(output[_EN]);
    }
    return contents;
};
const de_EnvironmentLinks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentLink(entry, context);
    });
};
const de_EnvironmentResourceDescription = (output, context) => {
    const contents = {};
    if (output[_EN] != null) {
        contents[_EN] = __expectString(output[_EN]);
    }
    if (output.AutoScalingGroups === "") {
        contents[_ASG] = [];
    }
    else if (output[_ASG] != null && output[_ASG][_m] != null) {
        contents[_ASG] = de_AutoScalingGroupList(__getArrayIfSingleItem(output[_ASG][_m]), context);
    }
    if (output.Instances === "") {
        contents[_In] = [];
    }
    else if (output[_In] != null && output[_In][_m] != null) {
        contents[_In] = de_InstanceList(__getArrayIfSingleItem(output[_In][_m]), context);
    }
    if (output.LaunchConfigurations === "") {
        contents[_LC] = [];
    }
    else if (output[_LC] != null && output[_LC][_m] != null) {
        contents[_LC] = de_LaunchConfigurationList(__getArrayIfSingleItem(output[_LC][_m]), context);
    }
    if (output.LaunchTemplates === "") {
        contents[_LT] = [];
    }
    else if (output[_LT] != null && output[_LT][_m] != null) {
        contents[_LT] = de_LaunchTemplateList(__getArrayIfSingleItem(output[_LT][_m]), context);
    }
    if (output.LoadBalancers === "") {
        contents[_LB] = [];
    }
    else if (output[_LB] != null && output[_LB][_m] != null) {
        contents[_LB] = de_LoadBalancerList(__getArrayIfSingleItem(output[_LB][_m]), context);
    }
    if (output.Triggers === "") {
        contents[_Tr] = [];
    }
    else if (output[_Tr] != null && output[_Tr][_m] != null) {
        contents[_Tr] = de_TriggerList(__getArrayIfSingleItem(output[_Tr][_m]), context);
    }
    if (output.Queues === "") {
        contents[_Q] = [];
    }
    else if (output[_Q] != null && output[_Q][_m] != null) {
        contents[_Q] = de_QueueList(__getArrayIfSingleItem(output[_Q][_m]), context);
    }
    return contents;
};
const de_EnvironmentResourceDescriptionsMessage = (output, context) => {
    const contents = {};
    if (output[_ER] != null) {
        contents[_ER] = de_EnvironmentResourceDescription(output[_ER], context);
    }
    return contents;
};
const de_EnvironmentResourcesDescription = (output, context) => {
    const contents = {};
    if (output[_LBo] != null) {
        contents[_LBo] = de_LoadBalancerDescription(output[_LBo], context);
    }
    return contents;
};
const de_EnvironmentTier = (output, context) => {
    const contents = {};
    if (output[_Na] != null) {
        contents[_Na] = __expectString(output[_Na]);
    }
    if (output[_Ty] != null) {
        contents[_Ty] = __expectString(output[_Ty]);
    }
    if (output[_V] != null) {
        contents[_V] = __expectString(output[_V]);
    }
    return contents;
};
const de_EventDescription = (output, context) => {
    const contents = {};
    if (output[_ED] != null) {
        contents[_ED] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_ED]));
    }
    if (output[_Me] != null) {
        contents[_Me] = __expectString(output[_Me]);
    }
    if (output[_ANp] != null) {
        contents[_ANp] = __expectString(output[_ANp]);
    }
    if (output[_VLe] != null) {
        contents[_VLe] = __expectString(output[_VLe]);
    }
    if (output[_TN] != null) {
        contents[_TN] = __expectString(output[_TN]);
    }
    if (output[_EN] != null) {
        contents[_EN] = __expectString(output[_EN]);
    }
    if (output[_PA] != null) {
        contents[_PA] = __expectString(output[_PA]);
    }
    if (output[_RI] != null) {
        contents[_RI] = __expectString(output[_RI]);
    }
    if (output[_Se] != null) {
        contents[_Se] = __expectString(output[_Se]);
    }
    return contents;
};
const de_EventDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventDescription(entry, context);
    });
};
const de_EventDescriptionsMessage = (output, context) => {
    const contents = {};
    if (output.Events === "") {
        contents[_Ev] = [];
    }
    else if (output[_Ev] != null && output[_Ev][_m] != null) {
        contents[_Ev] = de_EventDescriptionList(__getArrayIfSingleItem(output[_Ev][_m]), context);
    }
    if (output[_NT] != null) {
        contents[_NT] = __expectString(output[_NT]);
    }
    return contents;
};
const de_Instance = (output, context) => {
    const contents = {};
    if (output[_Id_] != null) {
        contents[_Id_] = __expectString(output[_Id_]);
    }
    return contents;
};
const de_InstanceHealthList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SingleInstanceHealth(entry, context);
    });
};
const de_InstanceHealthSummary = (output, context) => {
    const contents = {};
    if (output[_ND] != null) {
        contents[_ND] = __strictParseInt32(output[_ND]);
    }
    if (output[_Un] != null) {
        contents[_Un] = __strictParseInt32(output[_Un]);
    }
    if (output[_Pe] != null) {
        contents[_Pe] = __strictParseInt32(output[_Pe]);
    }
    if (output[_Ok] != null) {
        contents[_Ok] = __strictParseInt32(output[_Ok]);
    }
    if (output[_Inf] != null) {
        contents[_Inf] = __strictParseInt32(output[_Inf]);
    }
    if (output[_W] != null) {
        contents[_W] = __strictParseInt32(output[_W]);
    }
    if (output[_De] != null) {
        contents[_De] = __strictParseInt32(output[_De]);
    }
    if (output[_Sev] != null) {
        contents[_Sev] = __strictParseInt32(output[_Sev]);
    }
    return contents;
};
const de_InstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Instance(entry, context);
    });
};
const de_InsufficientPrivilegesException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_InvalidRequestException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_Latency = (output, context) => {
    const contents = {};
    if (output[_P_] != null) {
        contents[_P_] = __strictParseFloat(output[_P_]);
    }
    if (output[_P__] != null) {
        contents[_P__] = __strictParseFloat(output[_P__]);
    }
    if (output[_P___] != null) {
        contents[_P___] = __strictParseFloat(output[_P___]);
    }
    if (output[_P____] != null) {
        contents[_P____] = __strictParseFloat(output[_P____]);
    }
    if (output[_P_____] != null) {
        contents[_P_____] = __strictParseFloat(output[_P_____]);
    }
    if (output[_P______] != null) {
        contents[_P______] = __strictParseFloat(output[_P______]);
    }
    if (output[_P_______] != null) {
        contents[_P_______] = __strictParseFloat(output[_P_______]);
    }
    if (output[_P________] != null) {
        contents[_P________] = __strictParseFloat(output[_P________]);
    }
    return contents;
};
const de_LaunchConfiguration = (output, context) => {
    const contents = {};
    if (output[_Na] != null) {
        contents[_Na] = __expectString(output[_Na]);
    }
    return contents;
};
const de_LaunchConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchConfiguration(entry, context);
    });
};
const de_LaunchTemplate = (output, context) => {
    const contents = {};
    if (output[_Id_] != null) {
        contents[_Id_] = __expectString(output[_Id_]);
    }
    return contents;
};
const de_LaunchTemplateList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplate(entry, context);
    });
};
const de_ListAvailableSolutionStacksResultMessage = (output, context) => {
    const contents = {};
    if (output.SolutionStacks === "") {
        contents[_SS] = [];
    }
    else if (output[_SS] != null && output[_SS][_m] != null) {
        contents[_SS] = de_AvailableSolutionStackNamesList(__getArrayIfSingleItem(output[_SS][_m]), context);
    }
    if (output.SolutionStackDetails === "") {
        contents[_SSD] = [];
    }
    else if (output[_SSD] != null && output[_SSD][_m] != null) {
        contents[_SSD] = de_AvailableSolutionStackDetailsList(__getArrayIfSingleItem(output[_SSD][_m]), context);
    }
    return contents;
};
const de_Listener = (output, context) => {
    const contents = {};
    if (output[_Pro] != null) {
        contents[_Pro] = __expectString(output[_Pro]);
    }
    if (output[_Po] != null) {
        contents[_Po] = __strictParseInt32(output[_Po]);
    }
    return contents;
};
const de_ListPlatformBranchesResult = (output, context) => {
    const contents = {};
    if (output.PlatformBranchSummaryList === "") {
        contents[_PBSL] = [];
    }
    else if (output[_PBSL] != null && output[_PBSL][_m] != null) {
        contents[_PBSL] = de_PlatformBranchSummaryList(__getArrayIfSingleItem(output[_PBSL][_m]), context);
    }
    if (output[_NT] != null) {
        contents[_NT] = __expectString(output[_NT]);
    }
    return contents;
};
const de_ListPlatformVersionsResult = (output, context) => {
    const contents = {};
    if (output.PlatformSummaryList === "") {
        contents[_PSL] = [];
    }
    else if (output[_PSL] != null && output[_PSL][_m] != null) {
        contents[_PSL] = de_PlatformSummaryList(__getArrayIfSingleItem(output[_PSL][_m]), context);
    }
    if (output[_NT] != null) {
        contents[_NT] = __expectString(output[_NT]);
    }
    return contents;
};
const de_LoadAverage = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __strictParseFloat(entry);
    });
};
const de_LoadBalancer = (output, context) => {
    const contents = {};
    if (output[_Na] != null) {
        contents[_Na] = __expectString(output[_Na]);
    }
    return contents;
};
const de_LoadBalancerDescription = (output, context) => {
    const contents = {};
    if (output[_LBN] != null) {
        contents[_LBN] = __expectString(output[_LBN]);
    }
    if (output[_Do] != null) {
        contents[_Do] = __expectString(output[_Do]);
    }
    if (output.Listeners === "") {
        contents[_Li] = [];
    }
    else if (output[_Li] != null && output[_Li][_m] != null) {
        contents[_Li] = de_LoadBalancerListenersDescription(__getArrayIfSingleItem(output[_Li][_m]), context);
    }
    return contents;
};
const de_LoadBalancerList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoadBalancer(entry, context);
    });
};
const de_LoadBalancerListenersDescription = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Listener(entry, context);
    });
};
const de_ManagedAction = (output, context) => {
    const contents = {};
    if (output[_AI] != null) {
        contents[_AI] = __expectString(output[_AI]);
    }
    if (output[_AD] != null) {
        contents[_AD] = __expectString(output[_AD]);
    }
    if (output[_AT] != null) {
        contents[_AT] = __expectString(output[_AT]);
    }
    if (output[_S] != null) {
        contents[_S] = __expectString(output[_S]);
    }
    if (output[_WST] != null) {
        contents[_WST] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_WST]));
    }
    return contents;
};
const de_ManagedActionHistoryItem = (output, context) => {
    const contents = {};
    if (output[_AI] != null) {
        contents[_AI] = __expectString(output[_AI]);
    }
    if (output[_AT] != null) {
        contents[_AT] = __expectString(output[_AT]);
    }
    if (output[_AD] != null) {
        contents[_AD] = __expectString(output[_AD]);
    }
    if (output[_FTa] != null) {
        contents[_FTa] = __expectString(output[_FTa]);
    }
    if (output[_S] != null) {
        contents[_S] = __expectString(output[_S]);
    }
    if (output[_FD] != null) {
        contents[_FD] = __expectString(output[_FD]);
    }
    if (output[_ETx] != null) {
        contents[_ETx] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_ETx]));
    }
    if (output[_FTi] != null) {
        contents[_FTi] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_FTi]));
    }
    return contents;
};
const de_ManagedActionHistoryItems = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedActionHistoryItem(entry, context);
    });
};
const de_ManagedActionInvalidStateException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_ManagedActions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedAction(entry, context);
    });
};
const de_MaxAgeRule = (output, context) => {
    const contents = {};
    if (output[_E] != null) {
        contents[_E] = __parseBoolean(output[_E]);
    }
    if (output[_MAID] != null) {
        contents[_MAID] = __strictParseInt32(output[_MAID]);
    }
    if (output[_DSFS] != null) {
        contents[_DSFS] = __parseBoolean(output[_DSFS]);
    }
    return contents;
};
const de_MaxCountRule = (output, context) => {
    const contents = {};
    if (output[_E] != null) {
        contents[_E] = __parseBoolean(output[_E]);
    }
    if (output[_MC] != null) {
        contents[_MC] = __strictParseInt32(output[_MC]);
    }
    if (output[_DSFS] != null) {
        contents[_DSFS] = __parseBoolean(output[_DSFS]);
    }
    return contents;
};
const de_OperationInProgressException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_OptionRestrictionRegex = (output, context) => {
    const contents = {};
    if (output[_Pa] != null) {
        contents[_Pa] = __expectString(output[_Pa]);
    }
    if (output[_La] != null) {
        contents[_La] = __expectString(output[_La]);
    }
    return contents;
};
const de_PlatformBranchSummary = (output, context) => {
    const contents = {};
    if (output[_PN] != null) {
        contents[_PN] = __expectString(output[_PN]);
    }
    if (output[_BN] != null) {
        contents[_BN] = __expectString(output[_BN]);
    }
    if (output[_LS] != null) {
        contents[_LS] = __expectString(output[_LS]);
    }
    if (output[_BO] != null) {
        contents[_BO] = __strictParseInt32(output[_BO]);
    }
    if (output.SupportedTierList === "") {
        contents[_STL] = [];
    }
    else if (output[_STL] != null && output[_STL][_m] != null) {
        contents[_STL] = de_SupportedTierList(__getArrayIfSingleItem(output[_STL][_m]), context);
    }
    return contents;
};
const de_PlatformBranchSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlatformBranchSummary(entry, context);
    });
};
const de_PlatformDescription = (output, context) => {
    const contents = {};
    if (output[_PA] != null) {
        contents[_PA] = __expectString(output[_PA]);
    }
    if (output[_PO] != null) {
        contents[_PO] = __expectString(output[_PO]);
    }
    if (output[_PN] != null) {
        contents[_PN] = __expectString(output[_PN]);
    }
    if (output[_PV] != null) {
        contents[_PV] = __expectString(output[_PV]);
    }
    if (output[_SSN] != null) {
        contents[_SSN] = __expectString(output[_SSN]);
    }
    if (output[_PSl] != null) {
        contents[_PSl] = __expectString(output[_PSl]);
    }
    if (output[_DC] != null) {
        contents[_DC] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DC]));
    }
    if (output[_DU] != null) {
        contents[_DU] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_DU]));
    }
    if (output[_PC] != null) {
        contents[_PC] = __expectString(output[_PC]);
    }
    if (output[_D] != null) {
        contents[_D] = __expectString(output[_D]);
    }
    if (output[_Ma] != null) {
        contents[_Ma] = __expectString(output[_Ma]);
    }
    if (output[_OSN] != null) {
        contents[_OSN] = __expectString(output[_OSN]);
    }
    if (output[_OSV] != null) {
        contents[_OSV] = __expectString(output[_OSV]);
    }
    if (output.ProgrammingLanguages === "") {
        contents[_PL] = [];
    }
    else if (output[_PL] != null && output[_PL][_m] != null) {
        contents[_PL] = de_PlatformProgrammingLanguages(__getArrayIfSingleItem(output[_PL][_m]), context);
    }
    if (output.Frameworks === "") {
        contents[_Fr] = [];
    }
    else if (output[_Fr] != null && output[_Fr][_m] != null) {
        contents[_Fr] = de_PlatformFrameworks(__getArrayIfSingleItem(output[_Fr][_m]), context);
    }
    if (output.CustomAmiList === "") {
        contents[_CAL] = [];
    }
    else if (output[_CAL] != null && output[_CAL][_m] != null) {
        contents[_CAL] = de_CustomAmiList(__getArrayIfSingleItem(output[_CAL][_m]), context);
    }
    if (output.SupportedTierList === "") {
        contents[_STL] = [];
    }
    else if (output[_STL] != null && output[_STL][_m] != null) {
        contents[_STL] = de_SupportedTierList(__getArrayIfSingleItem(output[_STL][_m]), context);
    }
    if (output.SupportedAddonList === "") {
        contents[_SAL] = [];
    }
    else if (output[_SAL] != null && output[_SAL][_m] != null) {
        contents[_SAL] = de_SupportedAddonList(__getArrayIfSingleItem(output[_SAL][_m]), context);
    }
    if (output[_PLS] != null) {
        contents[_PLS] = __expectString(output[_PLS]);
    }
    if (output[_PBN] != null) {
        contents[_PBN] = __expectString(output[_PBN]);
    }
    if (output[_PBLS] != null) {
        contents[_PBLS] = __expectString(output[_PBLS]);
    }
    return contents;
};
const de_PlatformFramework = (output, context) => {
    const contents = {};
    if (output[_Na] != null) {
        contents[_Na] = __expectString(output[_Na]);
    }
    if (output[_V] != null) {
        contents[_V] = __expectString(output[_V]);
    }
    return contents;
};
const de_PlatformFrameworks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlatformFramework(entry, context);
    });
};
const de_PlatformProgrammingLanguage = (output, context) => {
    const contents = {};
    if (output[_Na] != null) {
        contents[_Na] = __expectString(output[_Na]);
    }
    if (output[_V] != null) {
        contents[_V] = __expectString(output[_V]);
    }
    return contents;
};
const de_PlatformProgrammingLanguages = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlatformProgrammingLanguage(entry, context);
    });
};
const de_PlatformSummary = (output, context) => {
    const contents = {};
    if (output[_PA] != null) {
        contents[_PA] = __expectString(output[_PA]);
    }
    if (output[_PO] != null) {
        contents[_PO] = __expectString(output[_PO]);
    }
    if (output[_PSl] != null) {
        contents[_PSl] = __expectString(output[_PSl]);
    }
    if (output[_PC] != null) {
        contents[_PC] = __expectString(output[_PC]);
    }
    if (output[_OSN] != null) {
        contents[_OSN] = __expectString(output[_OSN]);
    }
    if (output[_OSV] != null) {
        contents[_OSV] = __expectString(output[_OSV]);
    }
    if (output.SupportedTierList === "") {
        contents[_STL] = [];
    }
    else if (output[_STL] != null && output[_STL][_m] != null) {
        contents[_STL] = de_SupportedTierList(__getArrayIfSingleItem(output[_STL][_m]), context);
    }
    if (output.SupportedAddonList === "") {
        contents[_SAL] = [];
    }
    else if (output[_SAL] != null && output[_SAL][_m] != null) {
        contents[_SAL] = de_SupportedAddonList(__getArrayIfSingleItem(output[_SAL][_m]), context);
    }
    if (output[_PLS] != null) {
        contents[_PLS] = __expectString(output[_PLS]);
    }
    if (output[_PV] != null) {
        contents[_PV] = __expectString(output[_PV]);
    }
    if (output[_PBN] != null) {
        contents[_PBN] = __expectString(output[_PBN]);
    }
    if (output[_PBLS] != null) {
        contents[_PBLS] = __expectString(output[_PBLS]);
    }
    return contents;
};
const de_PlatformSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlatformSummary(entry, context);
    });
};
const de_PlatformVersionStillReferencedException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_Queue = (output, context) => {
    const contents = {};
    if (output[_Na] != null) {
        contents[_Na] = __expectString(output[_Na]);
    }
    if (output[_URL] != null) {
        contents[_URL] = __expectString(output[_URL]);
    }
    return contents;
};
const de_QueueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Queue(entry, context);
    });
};
const de_ResourceNotFoundException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_ResourceQuota = (output, context) => {
    const contents = {};
    if (output[_Max] != null) {
        contents[_Max] = __strictParseInt32(output[_Max]);
    }
    return contents;
};
const de_ResourceQuotas = (output, context) => {
    const contents = {};
    if (output[_AQ] != null) {
        contents[_AQ] = de_ResourceQuota(output[_AQ], context);
    }
    if (output[_AVQ] != null) {
        contents[_AVQ] = de_ResourceQuota(output[_AVQ], context);
    }
    if (output[_EQ] != null) {
        contents[_EQ] = de_ResourceQuota(output[_EQ], context);
    }
    if (output[_CTQ] != null) {
        contents[_CTQ] = de_ResourceQuota(output[_CTQ], context);
    }
    if (output[_CPQ] != null) {
        contents[_CPQ] = de_ResourceQuota(output[_CPQ], context);
    }
    return contents;
};
const de_ResourceTagsDescriptionMessage = (output, context) => {
    const contents = {};
    if (output[_RA] != null) {
        contents[_RA] = __expectString(output[_RA]);
    }
    if (output.ResourceTags === "") {
        contents[_RT] = [];
    }
    else if (output[_RT] != null && output[_RT][_m] != null) {
        contents[_RT] = de_TagList(__getArrayIfSingleItem(output[_RT][_m]), context);
    }
    return contents;
};
const de_ResourceTypeNotSupportedException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_RetrieveEnvironmentInfoResultMessage = (output, context) => {
    const contents = {};
    if (output.EnvironmentInfo === "") {
        contents[_EInv] = [];
    }
    else if (output[_EInv] != null && output[_EInv][_m] != null) {
        contents[_EInv] = de_EnvironmentInfoDescriptionList(__getArrayIfSingleItem(output[_EInv][_m]), context);
    }
    return contents;
};
const de_S3Location = (output, context) => {
    const contents = {};
    if (output[_SBu] != null) {
        contents[_SBu] = __expectString(output[_SBu]);
    }
    if (output[_SK] != null) {
        contents[_SK] = __expectString(output[_SK]);
    }
    return contents;
};
const de_S3LocationNotInServiceRegionException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_S3SubscriptionRequiredException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_SingleInstanceHealth = (output, context) => {
    const contents = {};
    if (output[_IIn] != null) {
        contents[_IIn] = __expectString(output[_IIn]);
    }
    if (output[_HS] != null) {
        contents[_HS] = __expectString(output[_HS]);
    }
    if (output[_C] != null) {
        contents[_C] = __expectString(output[_C]);
    }
    if (output.Causes === "") {
        contents[_Ca] = [];
    }
    else if (output[_Ca] != null && output[_Ca][_m] != null) {
        contents[_Ca] = de_Causes(__getArrayIfSingleItem(output[_Ca][_m]), context);
    }
    if (output[_LA] != null) {
        contents[_LA] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_LA]));
    }
    if (output[_AM] != null) {
        contents[_AM] = de_ApplicationMetrics(output[_AM], context);
    }
    if (output[_Sy] != null) {
        contents[_Sy] = de_SystemStatus(output[_Sy], context);
    }
    if (output[_Dep] != null) {
        contents[_Dep] = de_Deployment(output[_Dep], context);
    }
    if (output[_AZ] != null) {
        contents[_AZ] = __expectString(output[_AZ]);
    }
    if (output[_ITn] != null) {
        contents[_ITn] = __expectString(output[_ITn]);
    }
    return contents;
};
const de_SolutionStackDescription = (output, context) => {
    const contents = {};
    if (output[_SSN] != null) {
        contents[_SSN] = __expectString(output[_SSN]);
    }
    if (output.PermittedFileTypes === "") {
        contents[_PFT] = [];
    }
    else if (output[_PFT] != null && output[_PFT][_m] != null) {
        contents[_PFT] = de_SolutionStackFileTypeList(__getArrayIfSingleItem(output[_PFT][_m]), context);
    }
    return contents;
};
const de_SolutionStackFileTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_SourceBuildInformation = (output, context) => {
    const contents = {};
    if (output[_STo] != null) {
        contents[_STo] = __expectString(output[_STo]);
    }
    if (output[_SRo] != null) {
        contents[_SRo] = __expectString(output[_SRo]);
    }
    if (output[_SL] != null) {
        contents[_SL] = __expectString(output[_SL]);
    }
    return contents;
};
const de_SourceBundleDeletionException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_StatusCodes = (output, context) => {
    const contents = {};
    if (output[_St] != null) {
        contents[_St] = __strictParseInt32(output[_St]);
    }
    if (output[_Sta] != null) {
        contents[_Sta] = __strictParseInt32(output[_Sta]);
    }
    if (output[_Stat] != null) {
        contents[_Stat] = __strictParseInt32(output[_Stat]);
    }
    if (output[_Statu] != null) {
        contents[_Statu] = __strictParseInt32(output[_Statu]);
    }
    return contents;
};
const de_SupportedAddonList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_SupportedTierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const de_SystemStatus = (output, context) => {
    const contents = {};
    if (output[_CPUU] != null) {
        contents[_CPUU] = de_CPUUtilization(output[_CPUU], context);
    }
    if (output.LoadAverage === "") {
        contents[_LAo] = [];
    }
    else if (output[_LAo] != null && output[_LAo][_m] != null) {
        contents[_LAo] = de_LoadAverage(__getArrayIfSingleItem(output[_LAo][_m]), context);
    }
    return contents;
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output[_K] != null) {
        contents[_K] = __expectString(output[_K]);
    }
    if (output[_Va] != null) {
        contents[_Va] = __expectString(output[_Va]);
    }
    return contents;
};
const de_TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry, context);
    });
};
const de_TooManyApplicationsException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_TooManyApplicationVersionsException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_TooManyBucketsException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_TooManyConfigurationTemplatesException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_TooManyEnvironmentsException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_TooManyPlatformsException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_TooManyTagsException = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_me] = __expectString(output[_me]);
    }
    return contents;
};
const de_Trigger = (output, context) => {
    const contents = {};
    if (output[_Na] != null) {
        contents[_Na] = __expectString(output[_Na]);
    }
    return contents;
};
const de_TriggerList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Trigger(entry, context);
    });
};
const de_ValidationMessage = (output, context) => {
    const contents = {};
    if (output[_Me] != null) {
        contents[_Me] = __expectString(output[_Me]);
    }
    if (output[_Se] != null) {
        contents[_Se] = __expectString(output[_Se]);
    }
    if (output[_N] != null) {
        contents[_N] = __expectString(output[_N]);
    }
    if (output[_ON] != null) {
        contents[_ON] = __expectString(output[_ON]);
    }
    return contents;
};
const de_ValidationMessagesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidationMessage(entry, context);
    });
};
const de_VersionLabelsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded",
};
const _ = "2010-12-01";
const _A = "Action";
const _AA = "ApplicationArn";
const _ACA = "AutoCreateApplication";
const _AD = "ActionDescription";
const _AEMA = "ApplyEnvironmentManagedAction";
const _AEOR = "AssociateEnvironmentOperationsRole";
const _AEU = "AbortEnvironmentUpdate";
const _AI = "ActionId";
const _AM = "ApplicationMetrics";
const _AN = "ArtifactName";
const _ANp = "ApplicationName";
const _ANpp = "ApplicationNames";
const _ANt = "AttributeNames";
const _AOIP = "AbortableOperationInProgress";
const _AQ = "ApplicationQuota";
const _ARN = "ARN";
const _ASG = "AutoScalingGroups";
const _AT = "ActionType";
const _AV = "ApplicationVersion";
const _AVA = "ApplicationVersionArn";
const _AVQ = "ApplicationVersionQuota";
const _AVp = "ApplicationVersions";
const _AZ = "AvailabilityZone";
const _Ap = "Application";
const _App = "Applications";
const _At = "Attribute";
const _Av = "Available";
const _B = "Builder";
const _BA = "BuildArn";
const _BC = "BuildConfiguration";
const _BN = "BranchName";
const _BO = "BranchOrder";
const _C = "Color";
const _CA = "CreateApplication";
const _CAL = "CustomAmiList";
const _CAV = "CreateApplicationVersion";
const _CBSR = "CodeBuildServiceRole";
const _CCT = "CreateConfigurationTemplate";
const _CDNSA = "CheckDNSAvailability";
const _CE = "ComposeEnvironments";
const _CEr = "CreateEnvironment";
const _CNAME = "CNAME";
const _CNAMEP = "CNAMEPrefix";
const _CPQ = "CustomPlatformQuota";
const _CPUU = "CPUUtilization";
const _CPV = "CreatePlatformVersion";
const _CS = "ChangeSeverity";
const _CSL = "CreateStorageLocation";
const _CSo = "ConfigurationSettings";
const _CT = "ComputeType";
const _CTQ = "ConfigurationTemplateQuota";
const _CTo = "ConfigurationTemplates";
const _Ca = "Causes";
const _D = "Description";
const _DA = "DeleteApplication";
const _DAA = "DescribeAccountAttributes";
const _DAV = "DeleteApplicationVersion";
const _DAVe = "DescribeApplicationVersions";
const _DAe = "DescribeApplications";
const _DC = "DateCreated";
const _DCO = "DescribeConfigurationOptions";
const _DCS = "DescribeConfigurationSettings";
const _DCT = "DeleteConfigurationTemplate";
const _DE = "DescribeEnvironments";
const _DEC = "DeleteEnvironmentConfiguration";
const _DEH = "DescribeEnvironmentHealth";
const _DEI = "DestinationEnvironmentId";
const _DEMA = "DescribeEnvironmentManagedActions";
const _DEMAH = "DescribeEnvironmentManagedActionHistory";
const _DEN = "DestinationEnvironmentName";
const _DEOR = "DisassociateEnvironmentOperationsRole";
const _DER = "DescribeEnvironmentResources";
const _DEe = "DescribeEvents";
const _DI = "DeploymentId";
const _DIH = "DescribeInstancesHealth";
const _DPV = "DeletePlatformVersion";
const _DPVe = "DescribePlatformVersion";
const _DS = "DeploymentStatus";
const _DSB = "DeleteSourceBundle";
const _DSFS = "DeleteSourceFromS3";
const _DT = "DeploymentTime";
const _DU = "DateUpdated";
const _DV = "DefaultValue";
const _De = "Degraded";
const _Dep = "Deployment";
const _Do = "Domain";
const _Du = "Duration";
const _E = "Enabled";
const _EA = "EnvironmentArn";
const _ED = "EventDate";
const _EI = "EnvironmentId";
const _EII = "Ec2InstanceId";
const _EIn = "EnvironmentIds";
const _EInv = "EnvironmentInfo";
const _EL = "EnvironmentLinks";
const _EN = "EnvironmentName";
const _ENn = "EnvironmentNames";
const _EQ = "EnvironmentQuota";
const _ER = "EnvironmentResources";
const _ET = "EndTime";
const _ETx = "ExecutedTime";
const _EURL = "EndpointURL";
const _En = "Environments";
const _Ev = "Events";
const _F = "Filters";
const _FD = "FailureDescription";
const _FQCNAME = "FullyQualifiedCNAME";
const _FT = "ForceTerminate";
const _FTa = "FailureType";
const _FTi = "FinishedTime";
const _Fr = "Frameworks";
const _GN = "GroupName";
const _H = "Health";
const _HS = "HealthStatus";
const _I = "Image";
const _ID = "IncludeDeleted";
const _IDBT = "IncludedDeletedBackTo";
const _IH = "InstancesHealth";
const _IHL = "InstanceHealthList";
const _II = "ImageId";
const _IIn = "InstanceId";
const _IOW = "IOWait";
const _IRQ = "IRQ";
const _IT = "InfoType";
const _ITn = "InstanceType";
const _Id = "Idle";
const _Id_ = "Id";
const _In = "Instances";
const _Inf = "Info";
const _K = "Key";
const _L = "Latency";
const _LA = "LaunchedAt";
const _LASS = "ListAvailableSolutionStacks";
const _LAo = "LoadAverage";
const _LB = "LoadBalancers";
const _LBN = "LoadBalancerName";
const _LBo = "LoadBalancer";
const _LC = "LaunchConfigurations";
const _LN = "LinkName";
const _LPB = "ListPlatformBranches";
const _LPV = "ListPlatformVersions";
const _LS = "LifecycleState";
const _LT = "LaunchTemplates";
const _LTFR = "ListTagsForResource";
const _La = "Label";
const _Li = "Listeners";
const _M = "Messages";
const _MA = "ManagedActions";
const _MAHI = "ManagedActionHistoryItems";
const _MAID = "MaxAgeInDays";
const _MAR = "MaxAgeRule";
const _MC = "MaxCount";
const _MCR = "MaxCountRule";
const _MI = "MaxItems";
const _ML = "MaxLength";
const _MR = "MaxRecords";
const _MV = "MinValue";
const _MVa = "MaxValue";
const _Ma = "Maintainer";
const _Max = "Maximum";
const _Me = "Message";
const _N = "Namespace";
const _ND = "NoData";
const _NT = "NextToken";
const _Na = "Name";
const _Ni = "Nice";
const _O = "Options";
const _ON = "OptionName";
const _OR = "OperationsRole";
const _OS = "OptionSettings";
const _OSN = "OperatingSystemName";
const _OSV = "OperatingSystemVersion";
const _OTR = "OptionsToRemove";
const _Ok = "Ok";
const _Op = "Operator";
const _P = "Process";
const _PA = "PlatformArn";
const _PBLS = "PlatformBranchLifecycleState";
const _PBN = "PlatformBranchName";
const _PBSL = "PlatformBranchSummaryList";
const _PC = "PlatformCategory";
const _PD = "PlatformDescription";
const _PDB = "PlatformDefinitionBundle";
const _PFT = "PermittedFileTypes";
const _PL = "ProgrammingLanguages";
const _PLS = "PlatformLifecycleState";
const _PN = "PlatformName";
const _PO = "PlatformOwner";
const _PS = "PlatformSummary";
const _PSL = "PlatformSummaryList";
const _PSl = "PlatformStatus";
const _PV = "PlatformVersion";
const _P_ = "P999";
const _P__ = "P99";
const _P___ = "P95";
const _P____ = "P90";
const _P_____ = "P85";
const _P______ = "P75";
const _P_______ = "P50";
const _P________ = "P10";
const _Pa = "Pattern";
const _Pe = "Pending";
const _Po = "Port";
const _Pr = "Privileged";
const _Pro = "Protocol";
const _Q = "Queues";
const _R = "Regex";
const _RA = "ResourceArn";
const _RAS = "RestartAppServer";
const _RAe = "RefreshedAt";
const _RC = "RequestCount";
const _RE = "RebuildEnvironment";
const _REI = "RequestEnvironmentInfo";
const _REIe = "RetrieveEnvironmentInfo";
const _RI = "RequestId";
const _RLC = "ResourceLifecycleConfig";
const _RN = "ResourceName";
const _RQ = "ResourceQuotas";
const _RT = "ResourceTags";
const _Re = "Resources";
const _S = "Status";
const _SAL = "SupportedAddonList";
const _SB = "SourceBundle";
const _SBI = "SourceBuildInformation";
const _SBu = "S3Bucket";
const _SC = "SourceConfiguration";
const _SCt = "StatusCodes";
const _SECNAME = "SwapEnvironmentCNAMEs";
const _SEI = "SourceEnvironmentId";
const _SEN = "SourceEnvironmentName";
const _SIRQ = "SoftIRQ";
const _SK = "S3Key";
const _SL = "SourceLocation";
const _SR = "ServiceRole";
const _SRo = "SourceRepository";
const _SS = "SolutionStacks";
const _SSD = "SolutionStackDetails";
const _SSN = "SolutionStackName";
const _ST = "StartTime";
const _STL = "SupportedTierList";
const _STa = "SampleTimestamp";
const _STo = "SourceType";
const _Se = "Severity";
const _Sev = "Severe";
const _St = "Status2xx";
const _Sta = "Status3xx";
const _Stat = "Status4xx";
const _Statu = "Status5xx";
const _Sy = "System";
const _T = "Tags";
const _TE = "TerminateEnvironment";
const _TEBF = "TerminateEnvByForce";
const _TIM = "TimeoutInMinutes";
const _TN = "TemplateName";
const _TR = "TerminateResources";
const _TTA = "TagsToAdd";
const _TTR = "TagsToRemove";
const _Ti = "Tier";
const _Tr = "Triggers";
const _Ty = "Type";
const _U = "User";
const _UA = "UpdateApplication";
const _UARL = "UpdateApplicationResourceLifecycle";
const _UAV = "UpdateApplicationVersion";
const _UCT = "UpdateConfigurationTemplate";
const _UD = "UserDefined";
const _UE = "UpdateEnvironment";
const _URL = "URL";
const _UTFR = "UpdateTagsForResource";
const _Un = "Unknown";
const _V = "Version";
const _VCS = "ValidateConfigurationSettings";
const _VL = "VersionLabels";
const _VLC = "VersionLifecycleConfig";
const _VLe = "VersionLabel";
const _VO = "ValueOptions";
const _VT = "ValueType";
const _VTi = "VirtualizationType";
const _Va = "Value";
const _Val = "Values";
const _Ve = "Versions";
const _W = "Warning";
const _WST = "WindowStartTime";
const _m = "member";
const _me = "message";
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error?.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
