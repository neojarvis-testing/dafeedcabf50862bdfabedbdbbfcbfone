import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";
import { ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ElasticBeanstalkClient";
import { AbortEnvironmentUpdateMessage } from "../models/models_0";
/**
 * @public
 */
export { __MetadataBearer, $Command };
/**
 * @public
 *
 * The input for {@link AbortEnvironmentUpdateCommand}.
 */
export interface AbortEnvironmentUpdateCommandInput extends AbortEnvironmentUpdateMessage {
}
/**
 * @public
 *
 * The output of {@link AbortEnvironmentUpdateCommand}.
 */
export interface AbortEnvironmentUpdateCommandOutput extends __MetadataBearer {
}
declare const AbortEnvironmentUpdateCommand_base: {
    new (input: AbortEnvironmentUpdateCommandInput): import("@smithy/smithy-client").CommandImpl<AbortEnvironmentUpdateCommandInput, AbortEnvironmentUpdateCommandOutput, ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    new (...[input]: [] | [AbortEnvironmentUpdateCommandInput]): import("@smithy/smithy-client").CommandImpl<AbortEnvironmentUpdateCommandInput, AbortEnvironmentUpdateCommandOutput, ElasticBeanstalkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes>;
    getEndpointParameterInstructions(): import("@smithy/middleware-endpoint").EndpointParameterInstructions;
};
/**
 * <p>Cancels in-progress environment configuration update or application version
 *       deployment.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ElasticBeanstalkClient, AbortEnvironmentUpdateCommand } from "@aws-sdk/client-elastic-beanstalk"; // ES Modules import
 * // const { ElasticBeanstalkClient, AbortEnvironmentUpdateCommand } = require("@aws-sdk/client-elastic-beanstalk"); // CommonJS import
 * const client = new ElasticBeanstalkClient(config);
 * const input = { // AbortEnvironmentUpdateMessage
 *   EnvironmentId: "STRING_VALUE",
 *   EnvironmentName: "STRING_VALUE",
 * };
 * const command = new AbortEnvironmentUpdateCommand(input);
 * const response = await client.send(command);
 * // {};
 *
 * ```
 *
 * @param AbortEnvironmentUpdateCommandInput - {@link AbortEnvironmentUpdateCommandInput}
 * @returns {@link AbortEnvironmentUpdateCommandOutput}
 * @see {@link AbortEnvironmentUpdateCommandInput} for command's `input` shape.
 * @see {@link AbortEnvironmentUpdateCommandOutput} for command's `response` shape.
 * @see {@link ElasticBeanstalkClientResolvedConfig | config} for ElasticBeanstalkClient's `config` shape.
 *
 * @throws {@link InsufficientPrivilegesException} (client fault)
 *  <p>The specified account does not have sufficient privileges for one or more AWS
 *       services.</p>
 *
 * @throws {@link ElasticBeanstalkServiceException}
 * <p>Base exception class for all service exceptions from ElasticBeanstalk service.</p>
 *
 * @public
 * @example To abort a deployment
 * ```javascript
 * // The following code aborts a running application version deployment for an environment named my-env:
 * const input = {
 *   "EnvironmentName": "my-env"
 * };
 * const command = new AbortEnvironmentUpdateCommand(input);
 * await client.send(command);
 * // example id: to-abort-a-deployment-1456267848227
 * ```
 *
 */
export declare class AbortEnvironmentUpdateCommand extends AbortEnvironmentUpdateCommand_base {
}
