"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AcceptAttachmentCommand: () => AcceptAttachmentCommand,
  AccessDeniedException: () => AccessDeniedException,
  AssociateConnectPeerCommand: () => AssociateConnectPeerCommand,
  AssociateCustomerGatewayCommand: () => AssociateCustomerGatewayCommand,
  AssociateLinkCommand: () => AssociateLinkCommand,
  AssociateTransitGatewayConnectPeerCommand: () => AssociateTransitGatewayConnectPeerCommand,
  AttachmentState: () => AttachmentState,
  AttachmentType: () => AttachmentType,
  ChangeAction: () => ChangeAction,
  ChangeSetState: () => ChangeSetState,
  ChangeStatus: () => ChangeStatus,
  ChangeType: () => ChangeType,
  ConflictException: () => ConflictException,
  ConnectPeerAssociationState: () => ConnectPeerAssociationState,
  ConnectPeerState: () => ConnectPeerState,
  ConnectionState: () => ConnectionState,
  ConnectionStatus: () => ConnectionStatus,
  ConnectionType: () => ConnectionType,
  CoreNetworkPolicyAlias: () => CoreNetworkPolicyAlias,
  CoreNetworkPolicyException: () => CoreNetworkPolicyException,
  CoreNetworkState: () => CoreNetworkState,
  CreateConnectAttachmentCommand: () => CreateConnectAttachmentCommand,
  CreateConnectPeerCommand: () => CreateConnectPeerCommand,
  CreateConnectionCommand: () => CreateConnectionCommand,
  CreateCoreNetworkCommand: () => CreateCoreNetworkCommand,
  CreateDeviceCommand: () => CreateDeviceCommand,
  CreateDeviceRequestFilterSensitiveLog: () => CreateDeviceRequestFilterSensitiveLog,
  CreateDeviceResponseFilterSensitiveLog: () => CreateDeviceResponseFilterSensitiveLog,
  CreateGlobalNetworkCommand: () => CreateGlobalNetworkCommand,
  CreateLinkCommand: () => CreateLinkCommand,
  CreateSiteCommand: () => CreateSiteCommand,
  CreateSiteRequestFilterSensitiveLog: () => CreateSiteRequestFilterSensitiveLog,
  CreateSiteResponseFilterSensitiveLog: () => CreateSiteResponseFilterSensitiveLog,
  CreateSiteToSiteVpnAttachmentCommand: () => CreateSiteToSiteVpnAttachmentCommand,
  CreateTransitGatewayPeeringCommand: () => CreateTransitGatewayPeeringCommand,
  CreateTransitGatewayRouteTableAttachmentCommand: () => CreateTransitGatewayRouteTableAttachmentCommand,
  CreateVpcAttachmentCommand: () => CreateVpcAttachmentCommand,
  CustomerGatewayAssociationState: () => CustomerGatewayAssociationState,
  DeleteAttachmentCommand: () => DeleteAttachmentCommand,
  DeleteConnectPeerCommand: () => DeleteConnectPeerCommand,
  DeleteConnectionCommand: () => DeleteConnectionCommand,
  DeleteCoreNetworkCommand: () => DeleteCoreNetworkCommand,
  DeleteCoreNetworkPolicyVersionCommand: () => DeleteCoreNetworkPolicyVersionCommand,
  DeleteDeviceCommand: () => DeleteDeviceCommand,
  DeleteDeviceResponseFilterSensitiveLog: () => DeleteDeviceResponseFilterSensitiveLog,
  DeleteGlobalNetworkCommand: () => DeleteGlobalNetworkCommand,
  DeleteLinkCommand: () => DeleteLinkCommand,
  DeletePeeringCommand: () => DeletePeeringCommand,
  DeleteResourcePolicyCommand: () => DeleteResourcePolicyCommand,
  DeleteSiteCommand: () => DeleteSiteCommand,
  DeleteSiteResponseFilterSensitiveLog: () => DeleteSiteResponseFilterSensitiveLog,
  DeregisterTransitGatewayCommand: () => DeregisterTransitGatewayCommand,
  DescribeGlobalNetworksCommand: () => DescribeGlobalNetworksCommand,
  DeviceFilterSensitiveLog: () => DeviceFilterSensitiveLog,
  DeviceState: () => DeviceState,
  DisassociateConnectPeerCommand: () => DisassociateConnectPeerCommand,
  DisassociateCustomerGatewayCommand: () => DisassociateCustomerGatewayCommand,
  DisassociateLinkCommand: () => DisassociateLinkCommand,
  DisassociateTransitGatewayConnectPeerCommand: () => DisassociateTransitGatewayConnectPeerCommand,
  ExecuteCoreNetworkChangeSetCommand: () => ExecuteCoreNetworkChangeSetCommand,
  GetConnectAttachmentCommand: () => GetConnectAttachmentCommand,
  GetConnectPeerAssociationsCommand: () => GetConnectPeerAssociationsCommand,
  GetConnectPeerCommand: () => GetConnectPeerCommand,
  GetConnectionsCommand: () => GetConnectionsCommand,
  GetCoreNetworkChangeEventsCommand: () => GetCoreNetworkChangeEventsCommand,
  GetCoreNetworkChangeSetCommand: () => GetCoreNetworkChangeSetCommand,
  GetCoreNetworkCommand: () => GetCoreNetworkCommand,
  GetCoreNetworkPolicyCommand: () => GetCoreNetworkPolicyCommand,
  GetCustomerGatewayAssociationsCommand: () => GetCustomerGatewayAssociationsCommand,
  GetDevicesCommand: () => GetDevicesCommand,
  GetDevicesResponseFilterSensitiveLog: () => GetDevicesResponseFilterSensitiveLog,
  GetLinkAssociationsCommand: () => GetLinkAssociationsCommand,
  GetLinksCommand: () => GetLinksCommand,
  GetNetworkResourceCountsCommand: () => GetNetworkResourceCountsCommand,
  GetNetworkResourceRelationshipsCommand: () => GetNetworkResourceRelationshipsCommand,
  GetNetworkResourcesCommand: () => GetNetworkResourcesCommand,
  GetNetworkRoutesCommand: () => GetNetworkRoutesCommand,
  GetNetworkTelemetryCommand: () => GetNetworkTelemetryCommand,
  GetResourcePolicyCommand: () => GetResourcePolicyCommand,
  GetRouteAnalysisCommand: () => GetRouteAnalysisCommand,
  GetSiteToSiteVpnAttachmentCommand: () => GetSiteToSiteVpnAttachmentCommand,
  GetSitesCommand: () => GetSitesCommand,
  GetSitesResponseFilterSensitiveLog: () => GetSitesResponseFilterSensitiveLog,
  GetTransitGatewayConnectPeerAssociationsCommand: () => GetTransitGatewayConnectPeerAssociationsCommand,
  GetTransitGatewayPeeringCommand: () => GetTransitGatewayPeeringCommand,
  GetTransitGatewayRegistrationsCommand: () => GetTransitGatewayRegistrationsCommand,
  GetTransitGatewayRouteTableAttachmentCommand: () => GetTransitGatewayRouteTableAttachmentCommand,
  GetVpcAttachmentCommand: () => GetVpcAttachmentCommand,
  GlobalNetworkState: () => GlobalNetworkState,
  InternalServerException: () => InternalServerException,
  LinkAssociationState: () => LinkAssociationState,
  LinkState: () => LinkState,
  ListAttachmentsCommand: () => ListAttachmentsCommand,
  ListConnectPeersCommand: () => ListConnectPeersCommand,
  ListCoreNetworkPolicyVersionsCommand: () => ListCoreNetworkPolicyVersionsCommand,
  ListCoreNetworksCommand: () => ListCoreNetworksCommand,
  ListOrganizationServiceAccessStatusCommand: () => ListOrganizationServiceAccessStatusCommand,
  ListPeeringsCommand: () => ListPeeringsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  LocationFilterSensitiveLog: () => LocationFilterSensitiveLog,
  NetworkManager: () => NetworkManager,
  NetworkManagerClient: () => NetworkManagerClient,
  NetworkManagerServiceException: () => NetworkManagerServiceException,
  PeeringState: () => PeeringState,
  PeeringType: () => PeeringType,
  PutCoreNetworkPolicyCommand: () => PutCoreNetworkPolicyCommand,
  PutResourcePolicyCommand: () => PutResourcePolicyCommand,
  RegisterTransitGatewayCommand: () => RegisterTransitGatewayCommand,
  RejectAttachmentCommand: () => RejectAttachmentCommand,
  ResourceNotFoundException: () => ResourceNotFoundException,
  RestoreCoreNetworkPolicyVersionCommand: () => RestoreCoreNetworkPolicyVersionCommand,
  RouteAnalysisCompletionReasonCode: () => RouteAnalysisCompletionReasonCode,
  RouteAnalysisCompletionResultCode: () => RouteAnalysisCompletionResultCode,
  RouteAnalysisStatus: () => RouteAnalysisStatus,
  RouteState: () => RouteState,
  RouteTableType: () => RouteTableType,
  RouteType: () => RouteType,
  ServiceQuotaExceededException: () => ServiceQuotaExceededException,
  SiteFilterSensitiveLog: () => SiteFilterSensitiveLog,
  SiteState: () => SiteState,
  StartOrganizationServiceAccessUpdateCommand: () => StartOrganizationServiceAccessUpdateCommand,
  StartRouteAnalysisCommand: () => StartRouteAnalysisCommand,
  TagResourceCommand: () => TagResourceCommand,
  ThrottlingException: () => ThrottlingException,
  TransitGatewayConnectPeerAssociationState: () => TransitGatewayConnectPeerAssociationState,
  TransitGatewayRegistrationState: () => TransitGatewayRegistrationState,
  TunnelProtocol: () => TunnelProtocol,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateConnectionCommand: () => UpdateConnectionCommand,
  UpdateCoreNetworkCommand: () => UpdateCoreNetworkCommand,
  UpdateDeviceCommand: () => UpdateDeviceCommand,
  UpdateDeviceRequestFilterSensitiveLog: () => UpdateDeviceRequestFilterSensitiveLog,
  UpdateDeviceResponseFilterSensitiveLog: () => UpdateDeviceResponseFilterSensitiveLog,
  UpdateGlobalNetworkCommand: () => UpdateGlobalNetworkCommand,
  UpdateLinkCommand: () => UpdateLinkCommand,
  UpdateNetworkResourceMetadataCommand: () => UpdateNetworkResourceMetadataCommand,
  UpdateSiteCommand: () => UpdateSiteCommand,
  UpdateSiteRequestFilterSensitiveLog: () => UpdateSiteRequestFilterSensitiveLog,
  UpdateSiteResponseFilterSensitiveLog: () => UpdateSiteResponseFilterSensitiveLog,
  UpdateVpcAttachmentCommand: () => UpdateVpcAttachmentCommand,
  ValidationException: () => ValidationException,
  ValidationExceptionReason: () => ValidationExceptionReason,
  __Client: () => import_smithy_client.Client,
  paginateDescribeGlobalNetworks: () => paginateDescribeGlobalNetworks,
  paginateGetConnectPeerAssociations: () => paginateGetConnectPeerAssociations,
  paginateGetConnections: () => paginateGetConnections,
  paginateGetCoreNetworkChangeEvents: () => paginateGetCoreNetworkChangeEvents,
  paginateGetCoreNetworkChangeSet: () => paginateGetCoreNetworkChangeSet,
  paginateGetCustomerGatewayAssociations: () => paginateGetCustomerGatewayAssociations,
  paginateGetDevices: () => paginateGetDevices,
  paginateGetLinkAssociations: () => paginateGetLinkAssociations,
  paginateGetLinks: () => paginateGetLinks,
  paginateGetNetworkResourceCounts: () => paginateGetNetworkResourceCounts,
  paginateGetNetworkResourceRelationships: () => paginateGetNetworkResourceRelationships,
  paginateGetNetworkResources: () => paginateGetNetworkResources,
  paginateGetNetworkTelemetry: () => paginateGetNetworkTelemetry,
  paginateGetSites: () => paginateGetSites,
  paginateGetTransitGatewayConnectPeerAssociations: () => paginateGetTransitGatewayConnectPeerAssociations,
  paginateGetTransitGatewayRegistrations: () => paginateGetTransitGatewayRegistrations,
  paginateListAttachments: () => paginateListAttachments,
  paginateListConnectPeers: () => paginateListConnectPeers,
  paginateListCoreNetworkPolicyVersions: () => paginateListCoreNetworkPolicyVersions,
  paginateListCoreNetworks: () => paginateListCoreNetworks,
  paginateListPeerings: () => paginateListPeerings
});
module.exports = __toCommonJS(src_exports);

// src/NetworkManagerClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "networkmanager"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/NetworkManagerClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/NetworkManagerClient.ts
var _NetworkManagerClient = class _NetworkManagerClient extends import_smithy_client.Client {
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_config_resolver.resolveRegionConfig)(_config_1);
    const _config_3 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_2);
    const _config_4 = (0, import_middleware_retry.resolveRetryConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    super(_config_8);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: this.getDefaultHttpAuthSchemeParametersProvider(),
        identityProviderConfigProvider: this.getIdentityProviderConfigProvider()
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
  getDefaultHttpAuthSchemeParametersProvider() {
    return import_httpAuthSchemeProvider.defaultNetworkManagerHttpAuthSchemeParametersProvider;
  }
  getIdentityProviderConfigProvider() {
    return async (config) => new import_core.DefaultIdentityProviderConfig({
      "aws.auth#sigv4": config.credentials
    });
  }
};
__name(_NetworkManagerClient, "NetworkManagerClient");
var NetworkManagerClient = _NetworkManagerClient;

// src/NetworkManager.ts


// src/commands/AcceptAttachmentCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");

var import_types = require("@smithy/types");

// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");


var import_uuid = require("uuid");

// src/models/models_0.ts


// src/models/NetworkManagerServiceException.ts

var _NetworkManagerServiceException = class _NetworkManagerServiceException extends import_smithy_client.ServiceException {
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _NetworkManagerServiceException.prototype);
  }
};
__name(_NetworkManagerServiceException, "NetworkManagerServiceException");
var NetworkManagerServiceException = _NetworkManagerServiceException;

// src/models/models_0.ts
var AttachmentType = {
  CONNECT: "CONNECT",
  SITE_TO_SITE_VPN: "SITE_TO_SITE_VPN",
  TRANSIT_GATEWAY_ROUTE_TABLE: "TRANSIT_GATEWAY_ROUTE_TABLE",
  VPC: "VPC"
};
var AttachmentState = {
  AVAILABLE: "AVAILABLE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  PENDING_ATTACHMENT_ACCEPTANCE: "PENDING_ATTACHMENT_ACCEPTANCE",
  PENDING_NETWORK_UPDATE: "PENDING_NETWORK_UPDATE",
  PENDING_TAG_ACCEPTANCE: "PENDING_TAG_ACCEPTANCE",
  REJECTED: "REJECTED",
  UPDATING: "UPDATING"
};
var _AccessDeniedException = class _AccessDeniedException extends NetworkManagerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    this.name = "AccessDeniedException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
    this.Message = opts.Message;
  }
};
__name(_AccessDeniedException, "AccessDeniedException");
var AccessDeniedException = _AccessDeniedException;
var _ConflictException = class _ConflictException extends NetworkManagerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    this.name = "ConflictException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.Message = opts.Message;
    this.ResourceId = opts.ResourceId;
    this.ResourceType = opts.ResourceType;
  }
};
__name(_ConflictException, "ConflictException");
var ConflictException = _ConflictException;
var _InternalServerException = class _InternalServerException extends NetworkManagerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts
    });
    this.name = "InternalServerException";
    this.$fault = "server";
    Object.setPrototypeOf(this, _InternalServerException.prototype);
    this.Message = opts.Message;
    this.RetryAfterSeconds = opts.RetryAfterSeconds;
  }
};
__name(_InternalServerException, "InternalServerException");
var InternalServerException = _InternalServerException;
var _ResourceNotFoundException = class _ResourceNotFoundException extends NetworkManagerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    this.name = "ResourceNotFoundException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
    this.Message = opts.Message;
    this.ResourceId = opts.ResourceId;
    this.ResourceType = opts.ResourceType;
    this.Context = opts.Context;
  }
};
__name(_ResourceNotFoundException, "ResourceNotFoundException");
var ResourceNotFoundException = _ResourceNotFoundException;
var _ThrottlingException = class _ThrottlingException extends NetworkManagerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    this.name = "ThrottlingException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
    this.Message = opts.Message;
    this.RetryAfterSeconds = opts.RetryAfterSeconds;
  }
};
__name(_ThrottlingException, "ThrottlingException");
var ThrottlingException = _ThrottlingException;
var ValidationExceptionReason = {
  CANNOT_PARSE: "CannotParse",
  FIELD_VALIDATION_FAILED: "FieldValidationFailed",
  OTHER: "Other",
  UNKNOWN_OPERATION: "UnknownOperation"
};
var _ValidationException = class _ValidationException extends NetworkManagerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    this.name = "ValidationException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ValidationException.prototype);
    this.Message = opts.Message;
    this.Reason = opts.Reason;
    this.Fields = opts.Fields;
  }
};
__name(_ValidationException, "ValidationException");
var ValidationException = _ValidationException;
var ConnectPeerAssociationState = {
  available: "AVAILABLE",
  deleted: "DELETED",
  deleting: "DELETING",
  pending: "PENDING"
};
var _ServiceQuotaExceededException = class _ServiceQuotaExceededException extends NetworkManagerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts
    });
    this.name = "ServiceQuotaExceededException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _ServiceQuotaExceededException.prototype);
    this.Message = opts.Message;
    this.ResourceId = opts.ResourceId;
    this.ResourceType = opts.ResourceType;
    this.LimitCode = opts.LimitCode;
    this.ServiceCode = opts.ServiceCode;
  }
};
__name(_ServiceQuotaExceededException, "ServiceQuotaExceededException");
var ServiceQuotaExceededException = _ServiceQuotaExceededException;
var CustomerGatewayAssociationState = {
  available: "AVAILABLE",
  deleted: "DELETED",
  deleting: "DELETING",
  pending: "PENDING"
};
var LinkAssociationState = {
  available: "AVAILABLE",
  deleted: "DELETED",
  deleting: "DELETING",
  pending: "PENDING"
};
var TransitGatewayConnectPeerAssociationState = {
  available: "AVAILABLE",
  deleted: "DELETED",
  deleting: "DELETING",
  pending: "PENDING"
};
var ChangeAction = {
  ADD: "ADD",
  MODIFY: "MODIFY",
  REMOVE: "REMOVE"
};
var ChangeSetState = {
  EXECUTING: "EXECUTING",
  EXECUTION_SUCCEEDED: "EXECUTION_SUCCEEDED",
  FAILED_GENERATION: "FAILED_GENERATION",
  OUT_OF_DATE: "OUT_OF_DATE",
  PENDING_GENERATION: "PENDING_GENERATION",
  READY_TO_EXECUTE: "READY_TO_EXECUTE"
};
var ChangeStatus = {
  COMPLETE: "COMPLETE",
  FAILED: "FAILED",
  IN_PROGRESS: "IN_PROGRESS",
  NOT_STARTED: "NOT_STARTED"
};
var ChangeType = {
  ATTACHMENT_MAPPING: "ATTACHMENT_MAPPING",
  ATTACHMENT_POLICIES_CONFIGURATION: "ATTACHMENT_POLICIES_CONFIGURATION",
  ATTACHMENT_ROUTE_PROPAGATION: "ATTACHMENT_ROUTE_PROPAGATION",
  ATTACHMENT_ROUTE_STATIC: "ATTACHMENT_ROUTE_STATIC",
  CORE_NETWORK_CONFIGURATION: "CORE_NETWORK_CONFIGURATION",
  CORE_NETWORK_EDGE: "CORE_NETWORK_EDGE",
  CORE_NETWORK_SEGMENT: "CORE_NETWORK_SEGMENT",
  SEGMENTS_CONFIGURATION: "SEGMENTS_CONFIGURATION",
  SEGMENT_ACTIONS_CONFIGURATION: "SEGMENT_ACTIONS_CONFIGURATION"
};
var TunnelProtocol = {
  GRE: "GRE",
  NO_ENCAP: "NO_ENCAP"
};
var ConnectionState = {
  available: "AVAILABLE",
  deleting: "DELETING",
  pending: "PENDING",
  updating: "UPDATING"
};
var ConnectionStatus = {
  DOWN: "DOWN",
  UP: "UP"
};
var ConnectionType = {
  BGP: "BGP",
  IPSEC: "IPSEC"
};
var ConnectPeerState = {
  AVAILABLE: "AVAILABLE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED"
};
var CoreNetworkState = {
  AVAILABLE: "AVAILABLE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  UPDATING: "UPDATING"
};
var CoreNetworkPolicyAlias = {
  LATEST: "LATEST",
  LIVE: "LIVE"
};
var _CoreNetworkPolicyException = class _CoreNetworkPolicyException extends NetworkManagerServiceException {
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "CoreNetworkPolicyException",
      $fault: "client",
      ...opts
    });
    this.name = "CoreNetworkPolicyException";
    this.$fault = "client";
    Object.setPrototypeOf(this, _CoreNetworkPolicyException.prototype);
    this.Message = opts.Message;
    this.Errors = opts.Errors;
  }
};
__name(_CoreNetworkPolicyException, "CoreNetworkPolicyException");
var CoreNetworkPolicyException = _CoreNetworkPolicyException;
var DeviceState = {
  available: "AVAILABLE",
  deleting: "DELETING",
  pending: "PENDING",
  updating: "UPDATING"
};
var GlobalNetworkState = {
  available: "AVAILABLE",
  deleting: "DELETING",
  pending: "PENDING",
  updating: "UPDATING"
};
var LinkState = {
  available: "AVAILABLE",
  deleting: "DELETING",
  pending: "PENDING",
  updating: "UPDATING"
};
var SiteState = {
  available: "AVAILABLE",
  deleting: "DELETING",
  pending: "PENDING",
  updating: "UPDATING"
};
var PeeringType = {
  TRANSIT_GATEWAY: "TRANSIT_GATEWAY"
};
var PeeringState = {
  AVAILABLE: "AVAILABLE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED"
};
var TransitGatewayRegistrationState = {
  available: "AVAILABLE",
  deleted: "DELETED",
  deleting: "DELETING",
  failed: "FAILED",
  pending: "PENDING"
};
var RouteState = {
  ACTIVE: "ACTIVE",
  BLACKHOLE: "BLACKHOLE"
};
var RouteType = {
  PROPAGATED: "PROPAGATED",
  STATIC: "STATIC"
};
var RouteTableType = {
  CORE_NETWORK_SEGMENT: "CORE_NETWORK_SEGMENT",
  TRANSIT_GATEWAY_ROUTE_TABLE: "TRANSIT_GATEWAY_ROUTE_TABLE"
};
var RouteAnalysisCompletionReasonCode = {
  BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND: "BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND",
  CYCLIC_PATH_DETECTED: "CYCLIC_PATH_DETECTED",
  INACTIVE_ROUTE_FOR_DESTINATION_FOUND: "INACTIVE_ROUTE_FOR_DESTINATION_FOUND",
  MAX_HOPS_EXCEEDED: "MAX_HOPS_EXCEEDED",
  NO_DESTINATION_ARN_PROVIDED: "NO_DESTINATION_ARN_PROVIDED",
  POSSIBLE_MIDDLEBOX: "POSSIBLE_MIDDLEBOX",
  ROUTE_NOT_FOUND: "ROUTE_NOT_FOUND",
  TRANSIT_GATEWAY_ATTACHMENT: "TRANSIT_GATEWAY_ATTACHMENT_ATTACH_ARN_NO_MATCH",
  TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND: "TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND",
  TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY: "TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY",
  TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND: "TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND"
};
var RouteAnalysisCompletionResultCode = {
  CONNECTED: "CONNECTED",
  NOT_CONNECTED: "NOT_CONNECTED"
};
var RouteAnalysisStatus = {
  completed: "COMPLETED",
  failed: "FAILED",
  running: "RUNNING"
};
var LocationFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj
}), "LocationFilterSensitiveLog");
var CreateDeviceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Location && { Location: import_smithy_client.SENSITIVE_STRING }
}), "CreateDeviceRequestFilterSensitiveLog");
var DeviceFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Location && { Location: import_smithy_client.SENSITIVE_STRING }
}), "DeviceFilterSensitiveLog");
var CreateDeviceResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Device && { Device: DeviceFilterSensitiveLog(obj.Device) }
}), "CreateDeviceResponseFilterSensitiveLog");
var CreateSiteRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Location && { Location: import_smithy_client.SENSITIVE_STRING }
}), "CreateSiteRequestFilterSensitiveLog");
var SiteFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Location && { Location: import_smithy_client.SENSITIVE_STRING }
}), "SiteFilterSensitiveLog");
var CreateSiteResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Site && { Site: SiteFilterSensitiveLog(obj.Site) }
}), "CreateSiteResponseFilterSensitiveLog");
var DeleteDeviceResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Device && { Device: DeviceFilterSensitiveLog(obj.Device) }
}), "DeleteDeviceResponseFilterSensitiveLog");
var DeleteSiteResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Site && { Site: SiteFilterSensitiveLog(obj.Site) }
}), "DeleteSiteResponseFilterSensitiveLog");
var GetDevicesResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Devices && { Devices: obj.Devices.map((item) => DeviceFilterSensitiveLog(item)) }
}), "GetDevicesResponseFilterSensitiveLog");
var GetSitesResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Sites && { Sites: obj.Sites.map((item) => SiteFilterSensitiveLog(item)) }
}), "GetSitesResponseFilterSensitiveLog");
var UpdateDeviceRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Location && { Location: import_smithy_client.SENSITIVE_STRING }
}), "UpdateDeviceRequestFilterSensitiveLog");
var UpdateDeviceResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Device && { Device: DeviceFilterSensitiveLog(obj.Device) }
}), "UpdateDeviceResponseFilterSensitiveLog");
var UpdateSiteRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Location && { Location: import_smithy_client.SENSITIVE_STRING }
}), "UpdateSiteRequestFilterSensitiveLog");
var UpdateSiteResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.Site && { Site: SiteFilterSensitiveLog(obj.Site) }
}), "UpdateSiteResponseFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts
var se_AcceptAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/attachments/{AttachmentId}/accept");
  b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AcceptAttachmentCommand");
var se_AssociateConnectPeerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/connect-peer-associations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ConnectPeerId: [],
      DeviceId: [],
      LinkId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AssociateConnectPeerCommand");
var se_AssociateCustomerGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/customer-gateway-associations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      CustomerGatewayArn: [],
      DeviceId: [],
      LinkId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AssociateCustomerGatewayCommand");
var se_AssociateLinkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/link-associations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DeviceId: [],
      LinkId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AssociateLinkCommand");
var se_AssociateTransitGatewayConnectPeerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-connect-peer-associations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DeviceId: [],
      LinkId: [],
      TransitGatewayConnectPeerArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AssociateTransitGatewayConnectPeerCommand");
var se_CreateConnectAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/connect-attachments");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      CoreNetworkId: [],
      EdgeLocation: [],
      Options: (_) => (0, import_smithy_client._json)(_),
      Tags: (_) => (0, import_smithy_client._json)(_),
      TransportAttachmentId: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateConnectAttachmentCommand");
var se_CreateConnectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/connections");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ConnectedDeviceId: [],
      ConnectedLinkId: [],
      Description: [],
      DeviceId: [],
      LinkId: [],
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateConnectionCommand");
var se_CreateConnectPeerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/connect-peers");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      BgpOptions: (_) => (0, import_smithy_client._json)(_),
      ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      ConnectAttachmentId: [],
      CoreNetworkAddress: [],
      InsideCidrBlocks: (_) => (0, import_smithy_client._json)(_),
      PeerAddress: [],
      SubnetArn: [],
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateConnectPeerCommand");
var se_CreateCoreNetworkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/core-networks");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      Description: [],
      GlobalNetworkId: [],
      PolicyDocument: [],
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateCoreNetworkCommand");
var se_CreateDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/devices");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AWSLocation: (_) => (0, import_smithy_client._json)(_),
      Description: [],
      Location: (_) => (0, import_smithy_client._json)(_),
      Model: [],
      SerialNumber: [],
      SiteId: [],
      Tags: (_) => (0, import_smithy_client._json)(_),
      Type: [],
      Vendor: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateDeviceCommand");
var se_CreateGlobalNetworkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: [],
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateGlobalNetworkCommand");
var se_CreateLinkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/links");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Bandwidth: (_) => (0, import_smithy_client._json)(_),
      Description: [],
      Provider: [],
      SiteId: [],
      Tags: (_) => (0, import_smithy_client._json)(_),
      Type: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateLinkCommand");
var se_CreateSiteCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/sites");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: [],
      Location: (_) => (0, import_smithy_client._json)(_),
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateSiteCommand");
var se_CreateSiteToSiteVpnAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/site-to-site-vpn-attachments");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      CoreNetworkId: [],
      Tags: (_) => (0, import_smithy_client._json)(_),
      VpnConnectionArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateSiteToSiteVpnAttachmentCommand");
var se_CreateTransitGatewayPeeringCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/transit-gateway-peerings");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      CoreNetworkId: [],
      Tags: (_) => (0, import_smithy_client._json)(_),
      TransitGatewayArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateTransitGatewayPeeringCommand");
var se_CreateTransitGatewayRouteTableAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/transit-gateway-route-table-attachments");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      PeeringId: [],
      Tags: (_) => (0, import_smithy_client._json)(_),
      TransitGatewayRouteTableArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateTransitGatewayRouteTableAttachmentCommand");
var se_CreateVpcAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/vpc-attachments");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      CoreNetworkId: [],
      Options: (_) => (0, import_smithy_client._json)(_),
      SubnetArns: (_) => (0, import_smithy_client._json)(_),
      Tags: (_) => (0, import_smithy_client._json)(_),
      VpcArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateVpcAttachmentCommand");
var se_DeleteAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/attachments/{AttachmentId}");
  b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteAttachmentCommand");
var se_DeleteConnectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/connections/{ConnectionId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("ConnectionId", () => input.ConnectionId, "{ConnectionId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteConnectionCommand");
var se_DeleteConnectPeerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/connect-peers/{ConnectPeerId}");
  b.p("ConnectPeerId", () => input.ConnectPeerId, "{ConnectPeerId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteConnectPeerCommand");
var se_DeleteCoreNetworkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/core-networks/{CoreNetworkId}");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteCoreNetworkCommand");
var se_DeleteCoreNetworkPolicyVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/core-networks/{CoreNetworkId}/core-network-policy-versions/{PolicyVersionId}");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  b.p("PolicyVersionId", () => input.PolicyVersionId.toString(), "{PolicyVersionId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteCoreNetworkPolicyVersionCommand");
var se_DeleteDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/devices/{DeviceId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteDeviceCommand");
var se_DeleteGlobalNetworkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteGlobalNetworkCommand");
var se_DeleteLinkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/links/{LinkId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("LinkId", () => input.LinkId, "{LinkId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteLinkCommand");
var se_DeletePeeringCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/peerings/{PeeringId}");
  b.p("PeeringId", () => input.PeeringId, "{PeeringId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeletePeeringCommand");
var se_DeleteResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/resource-policy/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteResourcePolicyCommand");
var se_DeleteSiteCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/sites/{SiteId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("SiteId", () => input.SiteId, "{SiteId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteSiteCommand");
var se_DeregisterTransitGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-registrations/{TransitGatewayArn}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("TransitGatewayArn", () => input.TransitGatewayArn, "{TransitGatewayArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeregisterTransitGatewayCommand");
var se_DescribeGlobalNetworksCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks");
  const query = (0, import_smithy_client.map)({
    [_gNI]: [() => input.GlobalNetworkIds !== void 0, () => (input[_GNI] || []).map((_entry) => _entry)],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeGlobalNetworksCommand");
var se_DisassociateConnectPeerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/connect-peer-associations/{ConnectPeerId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("ConnectPeerId", () => input.ConnectPeerId, "{ConnectPeerId}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DisassociateConnectPeerCommand");
var se_DisassociateCustomerGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/customer-gateway-associations/{CustomerGatewayArn}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("CustomerGatewayArn", () => input.CustomerGatewayArn, "{CustomerGatewayArn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DisassociateCustomerGatewayCommand");
var se_DisassociateLinkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/link-associations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_dI]: [, (0, import_smithy_client.expectNonNull)(input[_DI], `DeviceId`)],
    [_lI]: [, (0, import_smithy_client.expectNonNull)(input[_LI], `LinkId`)]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DisassociateLinkCommand");
var se_DisassociateTransitGatewayConnectPeerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-connect-peer-associations/{TransitGatewayConnectPeerArn}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p(
    "TransitGatewayConnectPeerArn",
    () => input.TransitGatewayConnectPeerArn,
    "{TransitGatewayConnectPeerArn}",
    false
  );
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DisassociateTransitGatewayConnectPeerCommand");
var se_ExecuteCoreNetworkChangeSetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/core-networks/{CoreNetworkId}/core-network-change-sets/{PolicyVersionId}/execute");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  b.p("PolicyVersionId", () => input.PolicyVersionId.toString(), "{PolicyVersionId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ExecuteCoreNetworkChangeSetCommand");
var se_GetConnectAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/connect-attachments/{AttachmentId}");
  b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetConnectAttachmentCommand");
var se_GetConnectionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/connections");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_cI]: [() => input.ConnectionIds !== void 0, () => (input[_CI] || []).map((_entry) => _entry)],
    [_dI]: [, input[_DI]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetConnectionsCommand");
var se_GetConnectPeerCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/connect-peers/{ConnectPeerId}");
  b.p("ConnectPeerId", () => input.ConnectPeerId, "{ConnectPeerId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetConnectPeerCommand");
var se_GetConnectPeerAssociationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/connect-peer-associations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_cPI]: [() => input.ConnectPeerIds !== void 0, () => (input[_CPI] || []).map((_entry) => _entry)],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetConnectPeerAssociationsCommand");
var se_GetCoreNetworkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/core-networks/{CoreNetworkId}");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetCoreNetworkCommand");
var se_GetCoreNetworkChangeEventsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/core-networks/{CoreNetworkId}/core-network-change-events/{PolicyVersionId}");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  b.p("PolicyVersionId", () => input.PolicyVersionId.toString(), "{PolicyVersionId}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetCoreNetworkChangeEventsCommand");
var se_GetCoreNetworkChangeSetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/core-networks/{CoreNetworkId}/core-network-change-sets/{PolicyVersionId}");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  b.p("PolicyVersionId", () => input.PolicyVersionId.toString(), "{PolicyVersionId}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetCoreNetworkChangeSetCommand");
var se_GetCoreNetworkPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/core-networks/{CoreNetworkId}/core-network-policy");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_pVI]: [() => input.PolicyVersionId !== void 0, () => input[_PVI].toString()],
    [_a]: [, input[_A]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetCoreNetworkPolicyCommand");
var se_GetCustomerGatewayAssociationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/customer-gateway-associations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_cGA]: [() => input.CustomerGatewayArns !== void 0, () => (input[_CGA] || []).map((_entry) => _entry)],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetCustomerGatewayAssociationsCommand");
var se_GetDevicesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/devices");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_dIe]: [() => input.DeviceIds !== void 0, () => (input[_DIe] || []).map((_entry) => _entry)],
    [_sI]: [, input[_SI]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetDevicesCommand");
var se_GetLinkAssociationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/link-associations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_dI]: [, input[_DI]],
    [_lI]: [, input[_LI]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetLinkAssociationsCommand");
var se_GetLinksCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/links");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_lIi]: [() => input.LinkIds !== void 0, () => (input[_LIi] || []).map((_entry) => _entry)],
    [_sI]: [, input[_SI]],
    [_t]: [, input[_T]],
    [_p]: [, input[_P]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetLinksCommand");
var se_GetNetworkResourceCountsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/network-resource-count");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_rT]: [, input[_RT]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetNetworkResourceCountsCommand");
var se_GetNetworkResourceRelationshipsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/network-resource-relationships");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_cNI]: [, input[_CNI]],
    [_rGA]: [, input[_RGA]],
    [_aR]: [, input[_AR]],
    [_aI]: [, input[_AI]],
    [_rT]: [, input[_RT]],
    [_rA]: [, input[_RA]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetNetworkResourceRelationshipsCommand");
var se_GetNetworkResourcesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/network-resources");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_cNI]: [, input[_CNI]],
    [_rGA]: [, input[_RGA]],
    [_aR]: [, input[_AR]],
    [_aI]: [, input[_AI]],
    [_rT]: [, input[_RT]],
    [_rA]: [, input[_RA]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetNetworkResourcesCommand");
var se_GetNetworkRoutesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/network-routes");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      DestinationFilters: (_) => (0, import_smithy_client._json)(_),
      ExactCidrMatches: (_) => (0, import_smithy_client._json)(_),
      LongestPrefixMatches: (_) => (0, import_smithy_client._json)(_),
      PrefixListIds: (_) => (0, import_smithy_client._json)(_),
      RouteTableIdentifier: (_) => (0, import_smithy_client._json)(_),
      States: (_) => (0, import_smithy_client._json)(_),
      SubnetOfMatches: (_) => (0, import_smithy_client._json)(_),
      SupernetOfMatches: (_) => (0, import_smithy_client._json)(_),
      Types: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_GetNetworkRoutesCommand");
var se_GetNetworkTelemetryCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/network-telemetry");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_cNI]: [, input[_CNI]],
    [_rGA]: [, input[_RGA]],
    [_aR]: [, input[_AR]],
    [_aI]: [, input[_AI]],
    [_rT]: [, input[_RT]],
    [_rA]: [, input[_RA]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetNetworkTelemetryCommand");
var se_GetResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/resource-policy/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetResourcePolicyCommand");
var se_GetRouteAnalysisCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/route-analyses/{RouteAnalysisId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("RouteAnalysisId", () => input.RouteAnalysisId, "{RouteAnalysisId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetRouteAnalysisCommand");
var se_GetSitesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/sites");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_sIi]: [() => input.SiteIds !== void 0, () => (input[_SIi] || []).map((_entry) => _entry)],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetSitesCommand");
var se_GetSiteToSiteVpnAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/site-to-site-vpn-attachments/{AttachmentId}");
  b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetSiteToSiteVpnAttachmentCommand");
var se_GetTransitGatewayConnectPeerAssociationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-connect-peer-associations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_tGCPA]: [
      () => input.TransitGatewayConnectPeerArns !== void 0,
      () => (input[_TGCPA] || []).map((_entry) => _entry)
    ],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetTransitGatewayConnectPeerAssociationsCommand");
var se_GetTransitGatewayPeeringCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/transit-gateway-peerings/{PeeringId}");
  b.p("PeeringId", () => input.PeeringId, "{PeeringId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetTransitGatewayPeeringCommand");
var se_GetTransitGatewayRegistrationsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-registrations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_tGA]: [() => input.TransitGatewayArns !== void 0, () => (input[_TGA] || []).map((_entry) => _entry)],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetTransitGatewayRegistrationsCommand");
var se_GetTransitGatewayRouteTableAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/transit-gateway-route-table-attachments/{AttachmentId}");
  b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetTransitGatewayRouteTableAttachmentCommand");
var se_GetVpcAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/vpc-attachments/{AttachmentId}");
  b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetVpcAttachmentCommand");
var se_ListAttachmentsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/attachments");
  const query = (0, import_smithy_client.map)({
    [_cNI]: [, input[_CNI]],
    [_aT]: [, input[_AT]],
    [_eL]: [, input[_EL]],
    [_s]: [, input[_S]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAttachmentsCommand");
var se_ListConnectPeersCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/connect-peers");
  const query = (0, import_smithy_client.map)({
    [_cNI]: [, input[_CNI]],
    [_cAI]: [, input[_CAI]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListConnectPeersCommand");
var se_ListCoreNetworkPolicyVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/core-networks/{CoreNetworkId}/core-network-policy-versions");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCoreNetworkPolicyVersionsCommand");
var se_ListCoreNetworksCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/core-networks");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCoreNetworksCommand");
var se_ListOrganizationServiceAccessStatusCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/organizations/service-access");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListOrganizationServiceAccessStatusCommand");
var se_ListPeeringsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/peerings");
  const query = (0, import_smithy_client.map)({
    [_cNI]: [, input[_CNI]],
    [_pT]: [, input[_PT]],
    [_eL]: [, input[_EL]],
    [_s]: [, input[_S]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPeeringsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_PutCoreNetworkPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/core-networks/{CoreNetworkId}/core-network-policy");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ClientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      Description: [],
      LatestVersionId: [],
      PolicyDocument: (_) => import_smithy_client.LazyJsonString.fromObject(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PutCoreNetworkPolicyCommand");
var se_PutResourcePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/resource-policy/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      PolicyDocument: (_) => import_smithy_client.LazyJsonString.fromObject(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PutResourcePolicyCommand");
var se_RegisterTransitGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-registrations");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      TransitGatewayArn: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_RegisterTransitGatewayCommand");
var se_RejectAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/attachments/{AttachmentId}/reject");
  b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_RejectAttachmentCommand");
var se_RestoreCoreNetworkPolicyVersionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/core-networks/{CoreNetworkId}/core-network-policy-versions/{PolicyVersionId}/restore");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  b.p("PolicyVersionId", () => input.PolicyVersionId.toString(), "{PolicyVersionId}", false);
  let body;
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_RestoreCoreNetworkPolicyVersionCommand");
var se_StartOrganizationServiceAccessUpdateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/organizations/service-access");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Action: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartOrganizationServiceAccessUpdateCommand");
var se_StartRouteAnalysisCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/route-analyses");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Destination: (_) => (0, import_smithy_client._json)(_),
      IncludeReturnPath: [],
      Source: (_) => (0, import_smithy_client._json)(_),
      UseMiddleboxes: []
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_StartRouteAnalysisCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags/{ResourceArn}");
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  const query = (0, import_smithy_client.map)({
    [_tK]: [
      (0, import_smithy_client.expectNonNull)(input.TagKeys, `TagKeys`) != null,
      () => (input[_TK] || []).map((_entry) => _entry)
    ]
  });
  let body;
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateConnectionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/connections/{ConnectionId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("ConnectionId", () => input.ConnectionId, "{ConnectionId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      ConnectedLinkId: [],
      Description: [],
      LinkId: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateConnectionCommand");
var se_UpdateCoreNetworkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/core-networks/{CoreNetworkId}");
  b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateCoreNetworkCommand");
var se_UpdateDeviceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/devices/{DeviceId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AWSLocation: (_) => (0, import_smithy_client._json)(_),
      Description: [],
      Location: (_) => (0, import_smithy_client._json)(_),
      Model: [],
      SerialNumber: [],
      SiteId: [],
      Type: [],
      Vendor: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateDeviceCommand");
var se_UpdateGlobalNetworkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateGlobalNetworkCommand");
var se_UpdateLinkCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/links/{LinkId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("LinkId", () => input.LinkId, "{LinkId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Bandwidth: (_) => (0, import_smithy_client._json)(_),
      Description: [],
      Provider: [],
      Type: []
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateLinkCommand");
var se_UpdateNetworkResourceMetadataCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/network-resources/{ResourceArn}/metadata");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Metadata: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateNetworkResourceMetadataCommand");
var se_UpdateSiteCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/global-networks/{GlobalNetworkId}/sites/{SiteId}");
  b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
  b.p("SiteId", () => input.SiteId, "{SiteId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      Description: [],
      Location: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateSiteCommand");
var se_UpdateVpcAttachmentCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/vpc-attachments/{AttachmentId}");
  b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      AddSubnetArns: (_) => (0, import_smithy_client._json)(_),
      Options: (_) => (0, import_smithy_client._json)(_),
      RemoveSubnetArns: (_) => (0, import_smithy_client._json)(_)
    })
  );
  b.m("PATCH").h(headers).b(body);
  return b.build();
}, "se_UpdateVpcAttachmentCommand");
var de_AcceptAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Attachment: (_) => de_Attachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AcceptAttachmentCommand");
var de_AssociateConnectPeerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ConnectPeerAssociation: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AssociateConnectPeerCommand");
var de_AssociateCustomerGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CustomerGatewayAssociation: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AssociateCustomerGatewayCommand");
var de_AssociateLinkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    LinkAssociation: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AssociateLinkCommand");
var de_AssociateTransitGatewayConnectPeerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TransitGatewayConnectPeerAssociation: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_AssociateTransitGatewayConnectPeerCommand");
var de_CreateConnectAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ConnectAttachment: (_) => de_ConnectAttachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateConnectAttachmentCommand");
var de_CreateConnectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Connection: (_) => de_Connection(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateConnectionCommand");
var de_CreateConnectPeerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ConnectPeer: (_) => de_ConnectPeer(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateConnectPeerCommand");
var de_CreateCoreNetworkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetwork: (_) => de_CoreNetwork(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateCoreNetworkCommand");
var de_CreateDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Device: (_) => de_Device(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateDeviceCommand");
var de_CreateGlobalNetworkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    GlobalNetwork: (_) => de_GlobalNetwork(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateGlobalNetworkCommand");
var de_CreateLinkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Link: (_) => de_Link(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateLinkCommand");
var de_CreateSiteCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Site: (_) => de_Site(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateSiteCommand");
var de_CreateSiteToSiteVpnAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    SiteToSiteVpnAttachment: (_) => de_SiteToSiteVpnAttachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateSiteToSiteVpnAttachmentCommand");
var de_CreateTransitGatewayPeeringCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TransitGatewayPeering: (_) => de_TransitGatewayPeering(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateTransitGatewayPeeringCommand");
var de_CreateTransitGatewayRouteTableAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TransitGatewayRouteTableAttachment: (_) => de_TransitGatewayRouteTableAttachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateTransitGatewayRouteTableAttachmentCommand");
var de_CreateVpcAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    VpcAttachment: (_) => de_VpcAttachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateVpcAttachmentCommand");
var de_DeleteAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Attachment: (_) => de_Attachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteAttachmentCommand");
var de_DeleteConnectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Connection: (_) => de_Connection(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteConnectionCommand");
var de_DeleteConnectPeerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ConnectPeer: (_) => de_ConnectPeer(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteConnectPeerCommand");
var de_DeleteCoreNetworkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetwork: (_) => de_CoreNetwork(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteCoreNetworkCommand");
var de_DeleteCoreNetworkPolicyVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetworkPolicy: (_) => de_CoreNetworkPolicy(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteCoreNetworkPolicyVersionCommand");
var de_DeleteDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Device: (_) => de_Device(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteDeviceCommand");
var de_DeleteGlobalNetworkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    GlobalNetwork: (_) => de_GlobalNetwork(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteGlobalNetworkCommand");
var de_DeleteLinkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Link: (_) => de_Link(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteLinkCommand");
var de_DeletePeeringCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Peering: (_) => de_Peering(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeletePeeringCommand");
var de_DeleteResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteResourcePolicyCommand");
var de_DeleteSiteCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Site: (_) => de_Site(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteSiteCommand");
var de_DeregisterTransitGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TransitGatewayRegistration: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeregisterTransitGatewayCommand");
var de_DescribeGlobalNetworksCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    GlobalNetworks: (_) => de_GlobalNetworkList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeGlobalNetworksCommand");
var de_DisassociateConnectPeerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ConnectPeerAssociation: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DisassociateConnectPeerCommand");
var de_DisassociateCustomerGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CustomerGatewayAssociation: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DisassociateCustomerGatewayCommand");
var de_DisassociateLinkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    LinkAssociation: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DisassociateLinkCommand");
var de_DisassociateTransitGatewayConnectPeerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TransitGatewayConnectPeerAssociation: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DisassociateTransitGatewayConnectPeerCommand");
var de_ExecuteCoreNetworkChangeSetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_ExecuteCoreNetworkChangeSetCommand");
var de_GetConnectAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ConnectAttachment: (_) => de_ConnectAttachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetConnectAttachmentCommand");
var de_GetConnectionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Connections: (_) => de_ConnectionList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetConnectionsCommand");
var de_GetConnectPeerCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ConnectPeer: (_) => de_ConnectPeer(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetConnectPeerCommand");
var de_GetConnectPeerAssociationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ConnectPeerAssociations: import_smithy_client._json,
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetConnectPeerAssociationsCommand");
var de_GetCoreNetworkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetwork: (_) => de_CoreNetwork(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetCoreNetworkCommand");
var de_GetCoreNetworkChangeEventsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetworkChangeEvents: (_) => de_CoreNetworkChangeEventList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetCoreNetworkChangeEventsCommand");
var de_GetCoreNetworkChangeSetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetworkChanges: import_smithy_client._json,
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetCoreNetworkChangeSetCommand");
var de_GetCoreNetworkPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetworkPolicy: (_) => de_CoreNetworkPolicy(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetCoreNetworkPolicyCommand");
var de_GetCustomerGatewayAssociationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CustomerGatewayAssociations: import_smithy_client._json,
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetCustomerGatewayAssociationsCommand");
var de_GetDevicesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Devices: (_) => de_DeviceList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetDevicesCommand");
var de_GetLinkAssociationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    LinkAssociations: import_smithy_client._json,
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetLinkAssociationsCommand");
var de_GetLinksCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Links: (_) => de_LinkList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetLinksCommand");
var de_GetNetworkResourceCountsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NetworkResourceCounts: import_smithy_client._json,
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetNetworkResourceCountsCommand");
var de_GetNetworkResourceRelationshipsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: import_smithy_client.expectString,
    Relationships: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetNetworkResourceRelationshipsCommand");
var de_GetNetworkResourcesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NetworkResources: (_) => de_NetworkResourceList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetNetworkResourcesCommand");
var de_GetNetworkRoutesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetworkSegmentEdge: import_smithy_client._json,
    NetworkRoutes: import_smithy_client._json,
    RouteTableArn: import_smithy_client.expectString,
    RouteTableTimestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    RouteTableType: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetNetworkRoutesCommand");
var de_GetNetworkTelemetryCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NetworkTelemetry: (_) => de_NetworkTelemetryList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetNetworkTelemetryCommand");
var de_GetResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    PolicyDocument: (_) => new import_smithy_client.LazyJsonString(_)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetResourcePolicyCommand");
var de_GetRouteAnalysisCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    RouteAnalysis: (_) => de_RouteAnalysis(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetRouteAnalysisCommand");
var de_GetSitesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: import_smithy_client.expectString,
    Sites: (_) => de_SiteList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetSitesCommand");
var de_GetSiteToSiteVpnAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    SiteToSiteVpnAttachment: (_) => de_SiteToSiteVpnAttachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetSiteToSiteVpnAttachmentCommand");
var de_GetTransitGatewayConnectPeerAssociationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: import_smithy_client.expectString,
    TransitGatewayConnectPeerAssociations: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetTransitGatewayConnectPeerAssociationsCommand");
var de_GetTransitGatewayPeeringCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TransitGatewayPeering: (_) => de_TransitGatewayPeering(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetTransitGatewayPeeringCommand");
var de_GetTransitGatewayRegistrationsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: import_smithy_client.expectString,
    TransitGatewayRegistrations: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetTransitGatewayRegistrationsCommand");
var de_GetTransitGatewayRouteTableAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TransitGatewayRouteTableAttachment: (_) => de_TransitGatewayRouteTableAttachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetTransitGatewayRouteTableAttachmentCommand");
var de_GetVpcAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    VpcAttachment: (_) => de_VpcAttachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetVpcAttachmentCommand");
var de_ListAttachmentsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Attachments: (_) => de_AttachmentList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAttachmentsCommand");
var de_ListConnectPeersCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ConnectPeers: (_) => de_ConnectPeerSummaryList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListConnectPeersCommand");
var de_ListCoreNetworkPolicyVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetworkPolicyVersions: (_) => de_CoreNetworkPolicyVersionList(_, context),
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCoreNetworkPolicyVersionsCommand");
var de_ListCoreNetworksCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetworks: import_smithy_client._json,
    NextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCoreNetworksCommand");
var de_ListOrganizationServiceAccessStatusCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: import_smithy_client.expectString,
    OrganizationStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListOrganizationServiceAccessStatusCommand");
var de_ListPeeringsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: import_smithy_client.expectString,
    Peerings: (_) => de_PeeringList(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPeeringsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TagList: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_PutCoreNetworkPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetworkPolicy: (_) => de_CoreNetworkPolicy(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_PutCoreNetworkPolicyCommand");
var de_PutResourcePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutResourcePolicyCommand");
var de_RegisterTransitGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TransitGatewayRegistration: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RegisterTransitGatewayCommand");
var de_RejectAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Attachment: (_) => de_Attachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RejectAttachmentCommand");
var de_RestoreCoreNetworkPolicyVersionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetworkPolicy: (_) => de_CoreNetworkPolicy(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_RestoreCoreNetworkPolicyVersionCommand");
var de_StartOrganizationServiceAccessUpdateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    OrganizationStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartOrganizationServiceAccessUpdateCommand");
var de_StartRouteAnalysisCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    RouteAnalysis: (_) => de_RouteAnalysis(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_StartRouteAnalysisCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateConnectionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Connection: (_) => de_Connection(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateConnectionCommand");
var de_UpdateCoreNetworkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    CoreNetwork: (_) => de_CoreNetwork(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateCoreNetworkCommand");
var de_UpdateDeviceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Device: (_) => de_Device(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateDeviceCommand");
var de_UpdateGlobalNetworkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    GlobalNetwork: (_) => de_GlobalNetwork(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateGlobalNetworkCommand");
var de_UpdateLinkCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Link: (_) => de_Link(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateLinkCommand");
var de_UpdateNetworkResourceMetadataCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Metadata: import_smithy_client._json,
    ResourceArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateNetworkResourceMetadataCommand");
var de_UpdateSiteCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Site: (_) => de_Site(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateSiteCommand");
var de_UpdateVpcAttachmentCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    VpcAttachment: (_) => de_VpcAttachment(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateVpcAttachmentCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.networkmanager#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.networkmanager#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalServerException":
    case "com.amazonaws.networkmanager#InternalServerException":
      throw await de_InternalServerExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.networkmanager#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.networkmanager#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.networkmanager#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    case "ServiceQuotaExceededException":
    case "com.amazonaws.networkmanager#ServiceQuotaExceededException":
      throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
    case "CoreNetworkPolicyException":
    case "com.amazonaws.networkmanager#CoreNetworkPolicyException":
      throw await de_CoreNetworkPolicyExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(NetworkManagerServiceException);
var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AccessDeniedExceptionRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString,
    ResourceId: import_smithy_client.expectString,
    ResourceType: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_CoreNetworkPolicyExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Errors: import_smithy_client._json,
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new CoreNetworkPolicyException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_CoreNetworkPolicyExceptionRes");
var de_InternalServerExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({
    [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => (0, import_smithy_client.strictParseInt32)(parsedOutput.headers[_ra])]
  });
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalServerException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Context: import_smithy_client._json,
    Message: import_smithy_client.expectString,
    ResourceId: import_smithy_client.expectString,
    ResourceType: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_ServiceQuotaExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    LimitCode: import_smithy_client.expectString,
    Message: import_smithy_client.expectString,
    ResourceId: import_smithy_client.expectString,
    ResourceType: import_smithy_client.expectString,
    ServiceCode: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceQuotaExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceQuotaExceededExceptionRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({
    [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => (0, import_smithy_client.strictParseInt32)(parsedOutput.headers[_ra])]
  });
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ThrottlingExceptionRes");
var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Fields: import_smithy_client._json,
    Message: import_smithy_client.expectString,
    Reason: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationExceptionRes");
var de_Attachment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AttachmentId: import_smithy_client.expectString,
    AttachmentPolicyRuleNumber: import_smithy_client.expectInt32,
    AttachmentType: import_smithy_client.expectString,
    CoreNetworkArn: import_smithy_client.expectString,
    CoreNetworkId: import_smithy_client.expectString,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    EdgeLocation: import_smithy_client.expectString,
    OwnerAccountId: import_smithy_client.expectString,
    ProposedSegmentChange: import_smithy_client._json,
    ResourceArn: import_smithy_client.expectString,
    SegmentName: import_smithy_client.expectString,
    State: import_smithy_client.expectString,
    Tags: import_smithy_client._json,
    UpdatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_Attachment");
var de_AttachmentList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Attachment(entry, context);
  });
  return retVal;
}, "de_AttachmentList");
var de_ConnectAttachment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Attachment: (_) => de_Attachment(_, context),
    Options: import_smithy_client._json,
    TransportAttachmentId: import_smithy_client.expectString
  });
}, "de_ConnectAttachment");
var de_Connection = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConnectedDeviceId: import_smithy_client.expectString,
    ConnectedLinkId: import_smithy_client.expectString,
    ConnectionArn: import_smithy_client.expectString,
    ConnectionId: import_smithy_client.expectString,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Description: import_smithy_client.expectString,
    DeviceId: import_smithy_client.expectString,
    GlobalNetworkId: import_smithy_client.expectString,
    LinkId: import_smithy_client.expectString,
    State: import_smithy_client.expectString,
    Tags: import_smithy_client._json
  });
}, "de_Connection");
var de_ConnectionHealth = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Status: import_smithy_client.expectString,
    Timestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Type: import_smithy_client.expectString
  });
}, "de_ConnectionHealth");
var de_ConnectionList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Connection(entry, context);
  });
  return retVal;
}, "de_ConnectionList");
var de_ConnectPeer = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Configuration: import_smithy_client._json,
    ConnectAttachmentId: import_smithy_client.expectString,
    ConnectPeerId: import_smithy_client.expectString,
    CoreNetworkId: import_smithy_client.expectString,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    EdgeLocation: import_smithy_client.expectString,
    State: import_smithy_client.expectString,
    SubnetArn: import_smithy_client.expectString,
    Tags: import_smithy_client._json
  });
}, "de_ConnectPeer");
var de_ConnectPeerSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConnectAttachmentId: import_smithy_client.expectString,
    ConnectPeerId: import_smithy_client.expectString,
    ConnectPeerState: import_smithy_client.expectString,
    CoreNetworkId: import_smithy_client.expectString,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    EdgeLocation: import_smithy_client.expectString,
    SubnetArn: import_smithy_client.expectString,
    Tags: import_smithy_client._json
  });
}, "de_ConnectPeerSummary");
var de_ConnectPeerSummaryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ConnectPeerSummary(entry, context);
  });
  return retVal;
}, "de_ConnectPeerSummaryList");
var de_CoreNetwork = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CoreNetworkArn: import_smithy_client.expectString,
    CoreNetworkId: import_smithy_client.expectString,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Description: import_smithy_client.expectString,
    Edges: import_smithy_client._json,
    GlobalNetworkId: import_smithy_client.expectString,
    Segments: import_smithy_client._json,
    State: import_smithy_client.expectString,
    Tags: import_smithy_client._json
  });
}, "de_CoreNetwork");
var de_CoreNetworkChangeEvent = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Action: import_smithy_client.expectString,
    EventTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    IdentifierPath: import_smithy_client.expectString,
    Status: import_smithy_client.expectString,
    Type: import_smithy_client.expectString,
    Values: import_smithy_client._json
  });
}, "de_CoreNetworkChangeEvent");
var de_CoreNetworkChangeEventList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CoreNetworkChangeEvent(entry, context);
  });
  return retVal;
}, "de_CoreNetworkChangeEventList");
var de_CoreNetworkPolicy = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Alias: import_smithy_client.expectString,
    ChangeSetState: import_smithy_client.expectString,
    CoreNetworkId: import_smithy_client.expectString,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Description: import_smithy_client.expectString,
    PolicyDocument: (_) => new import_smithy_client.LazyJsonString(_),
    PolicyErrors: import_smithy_client._json,
    PolicyVersionId: import_smithy_client.expectInt32
  });
}, "de_CoreNetworkPolicy");
var de_CoreNetworkPolicyVersion = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Alias: import_smithy_client.expectString,
    ChangeSetState: import_smithy_client.expectString,
    CoreNetworkId: import_smithy_client.expectString,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Description: import_smithy_client.expectString,
    PolicyVersionId: import_smithy_client.expectInt32
  });
}, "de_CoreNetworkPolicyVersion");
var de_CoreNetworkPolicyVersionList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CoreNetworkPolicyVersion(entry, context);
  });
  return retVal;
}, "de_CoreNetworkPolicyVersionList");
var de_Device = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AWSLocation: import_smithy_client._json,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Description: import_smithy_client.expectString,
    DeviceArn: import_smithy_client.expectString,
    DeviceId: import_smithy_client.expectString,
    GlobalNetworkId: import_smithy_client.expectString,
    Location: import_smithy_client._json,
    Model: import_smithy_client.expectString,
    SerialNumber: import_smithy_client.expectString,
    SiteId: import_smithy_client.expectString,
    State: import_smithy_client.expectString,
    Tags: import_smithy_client._json,
    Type: import_smithy_client.expectString,
    Vendor: import_smithy_client.expectString
  });
}, "de_Device");
var de_DeviceList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Device(entry, context);
  });
  return retVal;
}, "de_DeviceList");
var de_GlobalNetwork = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Description: import_smithy_client.expectString,
    GlobalNetworkArn: import_smithy_client.expectString,
    GlobalNetworkId: import_smithy_client.expectString,
    State: import_smithy_client.expectString,
    Tags: import_smithy_client._json
  });
}, "de_GlobalNetwork");
var de_GlobalNetworkList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_GlobalNetwork(entry, context);
  });
  return retVal;
}, "de_GlobalNetworkList");
var de_Link = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bandwidth: import_smithy_client._json,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Description: import_smithy_client.expectString,
    GlobalNetworkId: import_smithy_client.expectString,
    LinkArn: import_smithy_client.expectString,
    LinkId: import_smithy_client.expectString,
    Provider: import_smithy_client.expectString,
    SiteId: import_smithy_client.expectString,
    State: import_smithy_client.expectString,
    Tags: import_smithy_client._json,
    Type: import_smithy_client.expectString
  });
}, "de_Link");
var de_LinkList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Link(entry, context);
  });
  return retVal;
}, "de_LinkList");
var de_NetworkResource = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AccountId: import_smithy_client.expectString,
    AwsRegion: import_smithy_client.expectString,
    CoreNetworkId: import_smithy_client.expectString,
    Definition: import_smithy_client.expectString,
    DefinitionTimestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Metadata: import_smithy_client._json,
    RegisteredGatewayArn: import_smithy_client.expectString,
    ResourceArn: import_smithy_client.expectString,
    ResourceId: import_smithy_client.expectString,
    ResourceType: import_smithy_client.expectString,
    Tags: import_smithy_client._json
  });
}, "de_NetworkResource");
var de_NetworkResourceList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_NetworkResource(entry, context);
  });
  return retVal;
}, "de_NetworkResourceList");
var de_NetworkTelemetry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AccountId: import_smithy_client.expectString,
    Address: import_smithy_client.expectString,
    AwsRegion: import_smithy_client.expectString,
    CoreNetworkId: import_smithy_client.expectString,
    Health: (_) => de_ConnectionHealth(_, context),
    RegisteredGatewayArn: import_smithy_client.expectString,
    ResourceArn: import_smithy_client.expectString,
    ResourceId: import_smithy_client.expectString,
    ResourceType: import_smithy_client.expectString
  });
}, "de_NetworkTelemetry");
var de_NetworkTelemetryList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_NetworkTelemetry(entry, context);
  });
  return retVal;
}, "de_NetworkTelemetryList");
var de_Peering = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CoreNetworkArn: import_smithy_client.expectString,
    CoreNetworkId: import_smithy_client.expectString,
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    EdgeLocation: import_smithy_client.expectString,
    OwnerAccountId: import_smithy_client.expectString,
    PeeringId: import_smithy_client.expectString,
    PeeringType: import_smithy_client.expectString,
    ResourceArn: import_smithy_client.expectString,
    State: import_smithy_client.expectString,
    Tags: import_smithy_client._json
  });
}, "de_Peering");
var de_PeeringList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Peering(entry, context);
  });
  return retVal;
}, "de_PeeringList");
var de_RouteAnalysis = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Destination: import_smithy_client._json,
    ForwardPath: import_smithy_client._json,
    GlobalNetworkId: import_smithy_client.expectString,
    IncludeReturnPath: import_smithy_client.expectBoolean,
    OwnerAccountId: import_smithy_client.expectString,
    ReturnPath: import_smithy_client._json,
    RouteAnalysisId: import_smithy_client.expectString,
    Source: import_smithy_client._json,
    StartTimestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Status: import_smithy_client.expectString,
    UseMiddleboxes: import_smithy_client.expectBoolean
  });
}, "de_RouteAnalysis");
var de_Site = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CreatedAt: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    Description: import_smithy_client.expectString,
    GlobalNetworkId: import_smithy_client.expectString,
    Location: import_smithy_client._json,
    SiteArn: import_smithy_client.expectString,
    SiteId: import_smithy_client.expectString,
    State: import_smithy_client.expectString,
    Tags: import_smithy_client._json
  });
}, "de_Site");
var de_SiteList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Site(entry, context);
  });
  return retVal;
}, "de_SiteList");
var de_SiteToSiteVpnAttachment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Attachment: (_) => de_Attachment(_, context),
    VpnConnectionArn: import_smithy_client.expectString
  });
}, "de_SiteToSiteVpnAttachment");
var de_TransitGatewayPeering = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Peering: (_) => de_Peering(_, context),
    TransitGatewayArn: import_smithy_client.expectString,
    TransitGatewayPeeringAttachmentId: import_smithy_client.expectString
  });
}, "de_TransitGatewayPeering");
var de_TransitGatewayRouteTableAttachment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Attachment: (_) => de_Attachment(_, context),
    PeeringId: import_smithy_client.expectString,
    TransitGatewayRouteTableArn: import_smithy_client.expectString
  });
}, "de_TransitGatewayRouteTableAttachment");
var de_VpcAttachment = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Attachment: (_) => de_Attachment(_, context),
    Options: import_smithy_client._json,
    SubnetArns: import_smithy_client._json
  });
}, "de_VpcAttachment");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _A = "Alias";
var _AI = "AccountId";
var _AR = "AwsRegion";
var _AT = "AttachmentType";
var _CAI = "ConnectAttachmentId";
var _CGA = "CustomerGatewayArns";
var _CI = "ConnectionIds";
var _CNI = "CoreNetworkId";
var _CPI = "ConnectPeerIds";
var _DI = "DeviceId";
var _DIe = "DeviceIds";
var _EL = "EdgeLocation";
var _GNI = "GlobalNetworkIds";
var _LI = "LinkId";
var _LIi = "LinkIds";
var _MR = "MaxResults";
var _NT = "NextToken";
var _P = "Provider";
var _PT = "PeeringType";
var _PVI = "PolicyVersionId";
var _RA = "ResourceArn";
var _RAS = "RetryAfterSeconds";
var _RGA = "RegisteredGatewayArn";
var _RT = "ResourceType";
var _S = "State";
var _SI = "SiteId";
var _SIi = "SiteIds";
var _T = "Type";
var _TGA = "TransitGatewayArns";
var _TGCPA = "TransitGatewayConnectPeerArns";
var _TK = "TagKeys";
var _a = "alias";
var _aI = "accountId";
var _aR = "awsRegion";
var _aT = "attachmentType";
var _cAI = "connectAttachmentId";
var _cGA = "customerGatewayArns";
var _cI = "connectionIds";
var _cNI = "coreNetworkId";
var _cPI = "connectPeerIds";
var _dI = "deviceId";
var _dIe = "deviceIds";
var _eL = "edgeLocation";
var _gNI = "globalNetworkIds";
var _lI = "linkId";
var _lIi = "linkIds";
var _mR = "maxResults";
var _nT = "nextToken";
var _p = "provider";
var _pT = "peeringType";
var _pVI = "policyVersionId";
var _rA = "resourceArn";
var _rGA = "registeredGatewayArn";
var _rT = "resourceType";
var _ra = "retry-after";
var _s = "state";
var _sI = "siteId";
var _sIi = "siteIds";
var _t = "type";
var _tGA = "transitGatewayArns";
var _tGCPA = "transitGatewayConnectPeerArns";
var _tK = "tagKeys";

// src/commands/AcceptAttachmentCommand.ts
var _AcceptAttachmentCommand = class _AcceptAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "AcceptAttachment", {}).n("NetworkManagerClient", "AcceptAttachmentCommand").f(void 0, void 0).ser(se_AcceptAttachmentCommand).de(de_AcceptAttachmentCommand).build() {
};
__name(_AcceptAttachmentCommand, "AcceptAttachmentCommand");
var AcceptAttachmentCommand = _AcceptAttachmentCommand;

// src/commands/AssociateConnectPeerCommand.ts




var _AssociateConnectPeerCommand = class _AssociateConnectPeerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "AssociateConnectPeer", {}).n("NetworkManagerClient", "AssociateConnectPeerCommand").f(void 0, void 0).ser(se_AssociateConnectPeerCommand).de(de_AssociateConnectPeerCommand).build() {
};
__name(_AssociateConnectPeerCommand, "AssociateConnectPeerCommand");
var AssociateConnectPeerCommand = _AssociateConnectPeerCommand;

// src/commands/AssociateCustomerGatewayCommand.ts




var _AssociateCustomerGatewayCommand = class _AssociateCustomerGatewayCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "AssociateCustomerGateway", {}).n("NetworkManagerClient", "AssociateCustomerGatewayCommand").f(void 0, void 0).ser(se_AssociateCustomerGatewayCommand).de(de_AssociateCustomerGatewayCommand).build() {
};
__name(_AssociateCustomerGatewayCommand, "AssociateCustomerGatewayCommand");
var AssociateCustomerGatewayCommand = _AssociateCustomerGatewayCommand;

// src/commands/AssociateLinkCommand.ts




var _AssociateLinkCommand = class _AssociateLinkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "AssociateLink", {}).n("NetworkManagerClient", "AssociateLinkCommand").f(void 0, void 0).ser(se_AssociateLinkCommand).de(de_AssociateLinkCommand).build() {
};
__name(_AssociateLinkCommand, "AssociateLinkCommand");
var AssociateLinkCommand = _AssociateLinkCommand;

// src/commands/AssociateTransitGatewayConnectPeerCommand.ts




var _AssociateTransitGatewayConnectPeerCommand = class _AssociateTransitGatewayConnectPeerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "AssociateTransitGatewayConnectPeer", {}).n("NetworkManagerClient", "AssociateTransitGatewayConnectPeerCommand").f(void 0, void 0).ser(se_AssociateTransitGatewayConnectPeerCommand).de(de_AssociateTransitGatewayConnectPeerCommand).build() {
};
__name(_AssociateTransitGatewayConnectPeerCommand, "AssociateTransitGatewayConnectPeerCommand");
var AssociateTransitGatewayConnectPeerCommand = _AssociateTransitGatewayConnectPeerCommand;

// src/commands/CreateConnectAttachmentCommand.ts




var _CreateConnectAttachmentCommand = class _CreateConnectAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateConnectAttachment", {}).n("NetworkManagerClient", "CreateConnectAttachmentCommand").f(void 0, void 0).ser(se_CreateConnectAttachmentCommand).de(de_CreateConnectAttachmentCommand).build() {
};
__name(_CreateConnectAttachmentCommand, "CreateConnectAttachmentCommand");
var CreateConnectAttachmentCommand = _CreateConnectAttachmentCommand;

// src/commands/CreateConnectionCommand.ts




var _CreateConnectionCommand = class _CreateConnectionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateConnection", {}).n("NetworkManagerClient", "CreateConnectionCommand").f(void 0, void 0).ser(se_CreateConnectionCommand).de(de_CreateConnectionCommand).build() {
};
__name(_CreateConnectionCommand, "CreateConnectionCommand");
var CreateConnectionCommand = _CreateConnectionCommand;

// src/commands/CreateConnectPeerCommand.ts




var _CreateConnectPeerCommand = class _CreateConnectPeerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateConnectPeer", {}).n("NetworkManagerClient", "CreateConnectPeerCommand").f(void 0, void 0).ser(se_CreateConnectPeerCommand).de(de_CreateConnectPeerCommand).build() {
};
__name(_CreateConnectPeerCommand, "CreateConnectPeerCommand");
var CreateConnectPeerCommand = _CreateConnectPeerCommand;

// src/commands/CreateCoreNetworkCommand.ts




var _CreateCoreNetworkCommand = class _CreateCoreNetworkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateCoreNetwork", {}).n("NetworkManagerClient", "CreateCoreNetworkCommand").f(void 0, void 0).ser(se_CreateCoreNetworkCommand).de(de_CreateCoreNetworkCommand).build() {
};
__name(_CreateCoreNetworkCommand, "CreateCoreNetworkCommand");
var CreateCoreNetworkCommand = _CreateCoreNetworkCommand;

// src/commands/CreateDeviceCommand.ts




var _CreateDeviceCommand = class _CreateDeviceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateDevice", {}).n("NetworkManagerClient", "CreateDeviceCommand").f(CreateDeviceRequestFilterSensitiveLog, CreateDeviceResponseFilterSensitiveLog).ser(se_CreateDeviceCommand).de(de_CreateDeviceCommand).build() {
};
__name(_CreateDeviceCommand, "CreateDeviceCommand");
var CreateDeviceCommand = _CreateDeviceCommand;

// src/commands/CreateGlobalNetworkCommand.ts




var _CreateGlobalNetworkCommand = class _CreateGlobalNetworkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateGlobalNetwork", {}).n("NetworkManagerClient", "CreateGlobalNetworkCommand").f(void 0, void 0).ser(se_CreateGlobalNetworkCommand).de(de_CreateGlobalNetworkCommand).build() {
};
__name(_CreateGlobalNetworkCommand, "CreateGlobalNetworkCommand");
var CreateGlobalNetworkCommand = _CreateGlobalNetworkCommand;

// src/commands/CreateLinkCommand.ts




var _CreateLinkCommand = class _CreateLinkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateLink", {}).n("NetworkManagerClient", "CreateLinkCommand").f(void 0, void 0).ser(se_CreateLinkCommand).de(de_CreateLinkCommand).build() {
};
__name(_CreateLinkCommand, "CreateLinkCommand");
var CreateLinkCommand = _CreateLinkCommand;

// src/commands/CreateSiteCommand.ts




var _CreateSiteCommand = class _CreateSiteCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateSite", {}).n("NetworkManagerClient", "CreateSiteCommand").f(CreateSiteRequestFilterSensitiveLog, CreateSiteResponseFilterSensitiveLog).ser(se_CreateSiteCommand).de(de_CreateSiteCommand).build() {
};
__name(_CreateSiteCommand, "CreateSiteCommand");
var CreateSiteCommand = _CreateSiteCommand;

// src/commands/CreateSiteToSiteVpnAttachmentCommand.ts




var _CreateSiteToSiteVpnAttachmentCommand = class _CreateSiteToSiteVpnAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateSiteToSiteVpnAttachment", {}).n("NetworkManagerClient", "CreateSiteToSiteVpnAttachmentCommand").f(void 0, void 0).ser(se_CreateSiteToSiteVpnAttachmentCommand).de(de_CreateSiteToSiteVpnAttachmentCommand).build() {
};
__name(_CreateSiteToSiteVpnAttachmentCommand, "CreateSiteToSiteVpnAttachmentCommand");
var CreateSiteToSiteVpnAttachmentCommand = _CreateSiteToSiteVpnAttachmentCommand;

// src/commands/CreateTransitGatewayPeeringCommand.ts




var _CreateTransitGatewayPeeringCommand = class _CreateTransitGatewayPeeringCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateTransitGatewayPeering", {}).n("NetworkManagerClient", "CreateTransitGatewayPeeringCommand").f(void 0, void 0).ser(se_CreateTransitGatewayPeeringCommand).de(de_CreateTransitGatewayPeeringCommand).build() {
};
__name(_CreateTransitGatewayPeeringCommand, "CreateTransitGatewayPeeringCommand");
var CreateTransitGatewayPeeringCommand = _CreateTransitGatewayPeeringCommand;

// src/commands/CreateTransitGatewayRouteTableAttachmentCommand.ts




var _CreateTransitGatewayRouteTableAttachmentCommand = class _CreateTransitGatewayRouteTableAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateTransitGatewayRouteTableAttachment", {}).n("NetworkManagerClient", "CreateTransitGatewayRouteTableAttachmentCommand").f(void 0, void 0).ser(se_CreateTransitGatewayRouteTableAttachmentCommand).de(de_CreateTransitGatewayRouteTableAttachmentCommand).build() {
};
__name(_CreateTransitGatewayRouteTableAttachmentCommand, "CreateTransitGatewayRouteTableAttachmentCommand");
var CreateTransitGatewayRouteTableAttachmentCommand = _CreateTransitGatewayRouteTableAttachmentCommand;

// src/commands/CreateVpcAttachmentCommand.ts




var _CreateVpcAttachmentCommand = class _CreateVpcAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "CreateVpcAttachment", {}).n("NetworkManagerClient", "CreateVpcAttachmentCommand").f(void 0, void 0).ser(se_CreateVpcAttachmentCommand).de(de_CreateVpcAttachmentCommand).build() {
};
__name(_CreateVpcAttachmentCommand, "CreateVpcAttachmentCommand");
var CreateVpcAttachmentCommand = _CreateVpcAttachmentCommand;

// src/commands/DeleteAttachmentCommand.ts




var _DeleteAttachmentCommand = class _DeleteAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeleteAttachment", {}).n("NetworkManagerClient", "DeleteAttachmentCommand").f(void 0, void 0).ser(se_DeleteAttachmentCommand).de(de_DeleteAttachmentCommand).build() {
};
__name(_DeleteAttachmentCommand, "DeleteAttachmentCommand");
var DeleteAttachmentCommand = _DeleteAttachmentCommand;

// src/commands/DeleteConnectionCommand.ts




var _DeleteConnectionCommand = class _DeleteConnectionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeleteConnection", {}).n("NetworkManagerClient", "DeleteConnectionCommand").f(void 0, void 0).ser(se_DeleteConnectionCommand).de(de_DeleteConnectionCommand).build() {
};
__name(_DeleteConnectionCommand, "DeleteConnectionCommand");
var DeleteConnectionCommand = _DeleteConnectionCommand;

// src/commands/DeleteConnectPeerCommand.ts




var _DeleteConnectPeerCommand = class _DeleteConnectPeerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeleteConnectPeer", {}).n("NetworkManagerClient", "DeleteConnectPeerCommand").f(void 0, void 0).ser(se_DeleteConnectPeerCommand).de(de_DeleteConnectPeerCommand).build() {
};
__name(_DeleteConnectPeerCommand, "DeleteConnectPeerCommand");
var DeleteConnectPeerCommand = _DeleteConnectPeerCommand;

// src/commands/DeleteCoreNetworkCommand.ts




var _DeleteCoreNetworkCommand = class _DeleteCoreNetworkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeleteCoreNetwork", {}).n("NetworkManagerClient", "DeleteCoreNetworkCommand").f(void 0, void 0).ser(se_DeleteCoreNetworkCommand).de(de_DeleteCoreNetworkCommand).build() {
};
__name(_DeleteCoreNetworkCommand, "DeleteCoreNetworkCommand");
var DeleteCoreNetworkCommand = _DeleteCoreNetworkCommand;

// src/commands/DeleteCoreNetworkPolicyVersionCommand.ts




var _DeleteCoreNetworkPolicyVersionCommand = class _DeleteCoreNetworkPolicyVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeleteCoreNetworkPolicyVersion", {}).n("NetworkManagerClient", "DeleteCoreNetworkPolicyVersionCommand").f(void 0, void 0).ser(se_DeleteCoreNetworkPolicyVersionCommand).de(de_DeleteCoreNetworkPolicyVersionCommand).build() {
};
__name(_DeleteCoreNetworkPolicyVersionCommand, "DeleteCoreNetworkPolicyVersionCommand");
var DeleteCoreNetworkPolicyVersionCommand = _DeleteCoreNetworkPolicyVersionCommand;

// src/commands/DeleteDeviceCommand.ts




var _DeleteDeviceCommand = class _DeleteDeviceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeleteDevice", {}).n("NetworkManagerClient", "DeleteDeviceCommand").f(void 0, DeleteDeviceResponseFilterSensitiveLog).ser(se_DeleteDeviceCommand).de(de_DeleteDeviceCommand).build() {
};
__name(_DeleteDeviceCommand, "DeleteDeviceCommand");
var DeleteDeviceCommand = _DeleteDeviceCommand;

// src/commands/DeleteGlobalNetworkCommand.ts




var _DeleteGlobalNetworkCommand = class _DeleteGlobalNetworkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeleteGlobalNetwork", {}).n("NetworkManagerClient", "DeleteGlobalNetworkCommand").f(void 0, void 0).ser(se_DeleteGlobalNetworkCommand).de(de_DeleteGlobalNetworkCommand).build() {
};
__name(_DeleteGlobalNetworkCommand, "DeleteGlobalNetworkCommand");
var DeleteGlobalNetworkCommand = _DeleteGlobalNetworkCommand;

// src/commands/DeleteLinkCommand.ts




var _DeleteLinkCommand = class _DeleteLinkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeleteLink", {}).n("NetworkManagerClient", "DeleteLinkCommand").f(void 0, void 0).ser(se_DeleteLinkCommand).de(de_DeleteLinkCommand).build() {
};
__name(_DeleteLinkCommand, "DeleteLinkCommand");
var DeleteLinkCommand = _DeleteLinkCommand;

// src/commands/DeletePeeringCommand.ts




var _DeletePeeringCommand = class _DeletePeeringCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeletePeering", {}).n("NetworkManagerClient", "DeletePeeringCommand").f(void 0, void 0).ser(se_DeletePeeringCommand).de(de_DeletePeeringCommand).build() {
};
__name(_DeletePeeringCommand, "DeletePeeringCommand");
var DeletePeeringCommand = _DeletePeeringCommand;

// src/commands/DeleteResourcePolicyCommand.ts




var _DeleteResourcePolicyCommand = class _DeleteResourcePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeleteResourcePolicy", {}).n("NetworkManagerClient", "DeleteResourcePolicyCommand").f(void 0, void 0).ser(se_DeleteResourcePolicyCommand).de(de_DeleteResourcePolicyCommand).build() {
};
__name(_DeleteResourcePolicyCommand, "DeleteResourcePolicyCommand");
var DeleteResourcePolicyCommand = _DeleteResourcePolicyCommand;

// src/commands/DeleteSiteCommand.ts




var _DeleteSiteCommand = class _DeleteSiteCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeleteSite", {}).n("NetworkManagerClient", "DeleteSiteCommand").f(void 0, DeleteSiteResponseFilterSensitiveLog).ser(se_DeleteSiteCommand).de(de_DeleteSiteCommand).build() {
};
__name(_DeleteSiteCommand, "DeleteSiteCommand");
var DeleteSiteCommand = _DeleteSiteCommand;

// src/commands/DeregisterTransitGatewayCommand.ts




var _DeregisterTransitGatewayCommand = class _DeregisterTransitGatewayCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DeregisterTransitGateway", {}).n("NetworkManagerClient", "DeregisterTransitGatewayCommand").f(void 0, void 0).ser(se_DeregisterTransitGatewayCommand).de(de_DeregisterTransitGatewayCommand).build() {
};
__name(_DeregisterTransitGatewayCommand, "DeregisterTransitGatewayCommand");
var DeregisterTransitGatewayCommand = _DeregisterTransitGatewayCommand;

// src/commands/DescribeGlobalNetworksCommand.ts




var _DescribeGlobalNetworksCommand = class _DescribeGlobalNetworksCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DescribeGlobalNetworks", {}).n("NetworkManagerClient", "DescribeGlobalNetworksCommand").f(void 0, void 0).ser(se_DescribeGlobalNetworksCommand).de(de_DescribeGlobalNetworksCommand).build() {
};
__name(_DescribeGlobalNetworksCommand, "DescribeGlobalNetworksCommand");
var DescribeGlobalNetworksCommand = _DescribeGlobalNetworksCommand;

// src/commands/DisassociateConnectPeerCommand.ts




var _DisassociateConnectPeerCommand = class _DisassociateConnectPeerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DisassociateConnectPeer", {}).n("NetworkManagerClient", "DisassociateConnectPeerCommand").f(void 0, void 0).ser(se_DisassociateConnectPeerCommand).de(de_DisassociateConnectPeerCommand).build() {
};
__name(_DisassociateConnectPeerCommand, "DisassociateConnectPeerCommand");
var DisassociateConnectPeerCommand = _DisassociateConnectPeerCommand;

// src/commands/DisassociateCustomerGatewayCommand.ts




var _DisassociateCustomerGatewayCommand = class _DisassociateCustomerGatewayCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DisassociateCustomerGateway", {}).n("NetworkManagerClient", "DisassociateCustomerGatewayCommand").f(void 0, void 0).ser(se_DisassociateCustomerGatewayCommand).de(de_DisassociateCustomerGatewayCommand).build() {
};
__name(_DisassociateCustomerGatewayCommand, "DisassociateCustomerGatewayCommand");
var DisassociateCustomerGatewayCommand = _DisassociateCustomerGatewayCommand;

// src/commands/DisassociateLinkCommand.ts




var _DisassociateLinkCommand = class _DisassociateLinkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DisassociateLink", {}).n("NetworkManagerClient", "DisassociateLinkCommand").f(void 0, void 0).ser(se_DisassociateLinkCommand).de(de_DisassociateLinkCommand).build() {
};
__name(_DisassociateLinkCommand, "DisassociateLinkCommand");
var DisassociateLinkCommand = _DisassociateLinkCommand;

// src/commands/DisassociateTransitGatewayConnectPeerCommand.ts




var _DisassociateTransitGatewayConnectPeerCommand = class _DisassociateTransitGatewayConnectPeerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "DisassociateTransitGatewayConnectPeer", {}).n("NetworkManagerClient", "DisassociateTransitGatewayConnectPeerCommand").f(void 0, void 0).ser(se_DisassociateTransitGatewayConnectPeerCommand).de(de_DisassociateTransitGatewayConnectPeerCommand).build() {
};
__name(_DisassociateTransitGatewayConnectPeerCommand, "DisassociateTransitGatewayConnectPeerCommand");
var DisassociateTransitGatewayConnectPeerCommand = _DisassociateTransitGatewayConnectPeerCommand;

// src/commands/ExecuteCoreNetworkChangeSetCommand.ts




var _ExecuteCoreNetworkChangeSetCommand = class _ExecuteCoreNetworkChangeSetCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "ExecuteCoreNetworkChangeSet", {}).n("NetworkManagerClient", "ExecuteCoreNetworkChangeSetCommand").f(void 0, void 0).ser(se_ExecuteCoreNetworkChangeSetCommand).de(de_ExecuteCoreNetworkChangeSetCommand).build() {
};
__name(_ExecuteCoreNetworkChangeSetCommand, "ExecuteCoreNetworkChangeSetCommand");
var ExecuteCoreNetworkChangeSetCommand = _ExecuteCoreNetworkChangeSetCommand;

// src/commands/GetConnectAttachmentCommand.ts




var _GetConnectAttachmentCommand = class _GetConnectAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetConnectAttachment", {}).n("NetworkManagerClient", "GetConnectAttachmentCommand").f(void 0, void 0).ser(se_GetConnectAttachmentCommand).de(de_GetConnectAttachmentCommand).build() {
};
__name(_GetConnectAttachmentCommand, "GetConnectAttachmentCommand");
var GetConnectAttachmentCommand = _GetConnectAttachmentCommand;

// src/commands/GetConnectionsCommand.ts




var _GetConnectionsCommand = class _GetConnectionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetConnections", {}).n("NetworkManagerClient", "GetConnectionsCommand").f(void 0, void 0).ser(se_GetConnectionsCommand).de(de_GetConnectionsCommand).build() {
};
__name(_GetConnectionsCommand, "GetConnectionsCommand");
var GetConnectionsCommand = _GetConnectionsCommand;

// src/commands/GetConnectPeerAssociationsCommand.ts




var _GetConnectPeerAssociationsCommand = class _GetConnectPeerAssociationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetConnectPeerAssociations", {}).n("NetworkManagerClient", "GetConnectPeerAssociationsCommand").f(void 0, void 0).ser(se_GetConnectPeerAssociationsCommand).de(de_GetConnectPeerAssociationsCommand).build() {
};
__name(_GetConnectPeerAssociationsCommand, "GetConnectPeerAssociationsCommand");
var GetConnectPeerAssociationsCommand = _GetConnectPeerAssociationsCommand;

// src/commands/GetConnectPeerCommand.ts




var _GetConnectPeerCommand = class _GetConnectPeerCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetConnectPeer", {}).n("NetworkManagerClient", "GetConnectPeerCommand").f(void 0, void 0).ser(se_GetConnectPeerCommand).de(de_GetConnectPeerCommand).build() {
};
__name(_GetConnectPeerCommand, "GetConnectPeerCommand");
var GetConnectPeerCommand = _GetConnectPeerCommand;

// src/commands/GetCoreNetworkChangeEventsCommand.ts




var _GetCoreNetworkChangeEventsCommand = class _GetCoreNetworkChangeEventsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetCoreNetworkChangeEvents", {}).n("NetworkManagerClient", "GetCoreNetworkChangeEventsCommand").f(void 0, void 0).ser(se_GetCoreNetworkChangeEventsCommand).de(de_GetCoreNetworkChangeEventsCommand).build() {
};
__name(_GetCoreNetworkChangeEventsCommand, "GetCoreNetworkChangeEventsCommand");
var GetCoreNetworkChangeEventsCommand = _GetCoreNetworkChangeEventsCommand;

// src/commands/GetCoreNetworkChangeSetCommand.ts




var _GetCoreNetworkChangeSetCommand = class _GetCoreNetworkChangeSetCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetCoreNetworkChangeSet", {}).n("NetworkManagerClient", "GetCoreNetworkChangeSetCommand").f(void 0, void 0).ser(se_GetCoreNetworkChangeSetCommand).de(de_GetCoreNetworkChangeSetCommand).build() {
};
__name(_GetCoreNetworkChangeSetCommand, "GetCoreNetworkChangeSetCommand");
var GetCoreNetworkChangeSetCommand = _GetCoreNetworkChangeSetCommand;

// src/commands/GetCoreNetworkCommand.ts




var _GetCoreNetworkCommand = class _GetCoreNetworkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetCoreNetwork", {}).n("NetworkManagerClient", "GetCoreNetworkCommand").f(void 0, void 0).ser(se_GetCoreNetworkCommand).de(de_GetCoreNetworkCommand).build() {
};
__name(_GetCoreNetworkCommand, "GetCoreNetworkCommand");
var GetCoreNetworkCommand = _GetCoreNetworkCommand;

// src/commands/GetCoreNetworkPolicyCommand.ts




var _GetCoreNetworkPolicyCommand = class _GetCoreNetworkPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetCoreNetworkPolicy", {}).n("NetworkManagerClient", "GetCoreNetworkPolicyCommand").f(void 0, void 0).ser(se_GetCoreNetworkPolicyCommand).de(de_GetCoreNetworkPolicyCommand).build() {
};
__name(_GetCoreNetworkPolicyCommand, "GetCoreNetworkPolicyCommand");
var GetCoreNetworkPolicyCommand = _GetCoreNetworkPolicyCommand;

// src/commands/GetCustomerGatewayAssociationsCommand.ts




var _GetCustomerGatewayAssociationsCommand = class _GetCustomerGatewayAssociationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetCustomerGatewayAssociations", {}).n("NetworkManagerClient", "GetCustomerGatewayAssociationsCommand").f(void 0, void 0).ser(se_GetCustomerGatewayAssociationsCommand).de(de_GetCustomerGatewayAssociationsCommand).build() {
};
__name(_GetCustomerGatewayAssociationsCommand, "GetCustomerGatewayAssociationsCommand");
var GetCustomerGatewayAssociationsCommand = _GetCustomerGatewayAssociationsCommand;

// src/commands/GetDevicesCommand.ts




var _GetDevicesCommand = class _GetDevicesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetDevices", {}).n("NetworkManagerClient", "GetDevicesCommand").f(void 0, GetDevicesResponseFilterSensitiveLog).ser(se_GetDevicesCommand).de(de_GetDevicesCommand).build() {
};
__name(_GetDevicesCommand, "GetDevicesCommand");
var GetDevicesCommand = _GetDevicesCommand;

// src/commands/GetLinkAssociationsCommand.ts




var _GetLinkAssociationsCommand = class _GetLinkAssociationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetLinkAssociations", {}).n("NetworkManagerClient", "GetLinkAssociationsCommand").f(void 0, void 0).ser(se_GetLinkAssociationsCommand).de(de_GetLinkAssociationsCommand).build() {
};
__name(_GetLinkAssociationsCommand, "GetLinkAssociationsCommand");
var GetLinkAssociationsCommand = _GetLinkAssociationsCommand;

// src/commands/GetLinksCommand.ts




var _GetLinksCommand = class _GetLinksCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetLinks", {}).n("NetworkManagerClient", "GetLinksCommand").f(void 0, void 0).ser(se_GetLinksCommand).de(de_GetLinksCommand).build() {
};
__name(_GetLinksCommand, "GetLinksCommand");
var GetLinksCommand = _GetLinksCommand;

// src/commands/GetNetworkResourceCountsCommand.ts




var _GetNetworkResourceCountsCommand = class _GetNetworkResourceCountsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetNetworkResourceCounts", {}).n("NetworkManagerClient", "GetNetworkResourceCountsCommand").f(void 0, void 0).ser(se_GetNetworkResourceCountsCommand).de(de_GetNetworkResourceCountsCommand).build() {
};
__name(_GetNetworkResourceCountsCommand, "GetNetworkResourceCountsCommand");
var GetNetworkResourceCountsCommand = _GetNetworkResourceCountsCommand;

// src/commands/GetNetworkResourceRelationshipsCommand.ts




var _GetNetworkResourceRelationshipsCommand = class _GetNetworkResourceRelationshipsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetNetworkResourceRelationships", {}).n("NetworkManagerClient", "GetNetworkResourceRelationshipsCommand").f(void 0, void 0).ser(se_GetNetworkResourceRelationshipsCommand).de(de_GetNetworkResourceRelationshipsCommand).build() {
};
__name(_GetNetworkResourceRelationshipsCommand, "GetNetworkResourceRelationshipsCommand");
var GetNetworkResourceRelationshipsCommand = _GetNetworkResourceRelationshipsCommand;

// src/commands/GetNetworkResourcesCommand.ts




var _GetNetworkResourcesCommand = class _GetNetworkResourcesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetNetworkResources", {}).n("NetworkManagerClient", "GetNetworkResourcesCommand").f(void 0, void 0).ser(se_GetNetworkResourcesCommand).de(de_GetNetworkResourcesCommand).build() {
};
__name(_GetNetworkResourcesCommand, "GetNetworkResourcesCommand");
var GetNetworkResourcesCommand = _GetNetworkResourcesCommand;

// src/commands/GetNetworkRoutesCommand.ts




var _GetNetworkRoutesCommand = class _GetNetworkRoutesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetNetworkRoutes", {}).n("NetworkManagerClient", "GetNetworkRoutesCommand").f(void 0, void 0).ser(se_GetNetworkRoutesCommand).de(de_GetNetworkRoutesCommand).build() {
};
__name(_GetNetworkRoutesCommand, "GetNetworkRoutesCommand");
var GetNetworkRoutesCommand = _GetNetworkRoutesCommand;

// src/commands/GetNetworkTelemetryCommand.ts




var _GetNetworkTelemetryCommand = class _GetNetworkTelemetryCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetNetworkTelemetry", {}).n("NetworkManagerClient", "GetNetworkTelemetryCommand").f(void 0, void 0).ser(se_GetNetworkTelemetryCommand).de(de_GetNetworkTelemetryCommand).build() {
};
__name(_GetNetworkTelemetryCommand, "GetNetworkTelemetryCommand");
var GetNetworkTelemetryCommand = _GetNetworkTelemetryCommand;

// src/commands/GetResourcePolicyCommand.ts




var _GetResourcePolicyCommand = class _GetResourcePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetResourcePolicy", {}).n("NetworkManagerClient", "GetResourcePolicyCommand").f(void 0, void 0).ser(se_GetResourcePolicyCommand).de(de_GetResourcePolicyCommand).build() {
};
__name(_GetResourcePolicyCommand, "GetResourcePolicyCommand");
var GetResourcePolicyCommand = _GetResourcePolicyCommand;

// src/commands/GetRouteAnalysisCommand.ts




var _GetRouteAnalysisCommand = class _GetRouteAnalysisCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetRouteAnalysis", {}).n("NetworkManagerClient", "GetRouteAnalysisCommand").f(void 0, void 0).ser(se_GetRouteAnalysisCommand).de(de_GetRouteAnalysisCommand).build() {
};
__name(_GetRouteAnalysisCommand, "GetRouteAnalysisCommand");
var GetRouteAnalysisCommand = _GetRouteAnalysisCommand;

// src/commands/GetSitesCommand.ts




var _GetSitesCommand = class _GetSitesCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetSites", {}).n("NetworkManagerClient", "GetSitesCommand").f(void 0, GetSitesResponseFilterSensitiveLog).ser(se_GetSitesCommand).de(de_GetSitesCommand).build() {
};
__name(_GetSitesCommand, "GetSitesCommand");
var GetSitesCommand = _GetSitesCommand;

// src/commands/GetSiteToSiteVpnAttachmentCommand.ts




var _GetSiteToSiteVpnAttachmentCommand = class _GetSiteToSiteVpnAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetSiteToSiteVpnAttachment", {}).n("NetworkManagerClient", "GetSiteToSiteVpnAttachmentCommand").f(void 0, void 0).ser(se_GetSiteToSiteVpnAttachmentCommand).de(de_GetSiteToSiteVpnAttachmentCommand).build() {
};
__name(_GetSiteToSiteVpnAttachmentCommand, "GetSiteToSiteVpnAttachmentCommand");
var GetSiteToSiteVpnAttachmentCommand = _GetSiteToSiteVpnAttachmentCommand;

// src/commands/GetTransitGatewayConnectPeerAssociationsCommand.ts




var _GetTransitGatewayConnectPeerAssociationsCommand = class _GetTransitGatewayConnectPeerAssociationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetTransitGatewayConnectPeerAssociations", {}).n("NetworkManagerClient", "GetTransitGatewayConnectPeerAssociationsCommand").f(void 0, void 0).ser(se_GetTransitGatewayConnectPeerAssociationsCommand).de(de_GetTransitGatewayConnectPeerAssociationsCommand).build() {
};
__name(_GetTransitGatewayConnectPeerAssociationsCommand, "GetTransitGatewayConnectPeerAssociationsCommand");
var GetTransitGatewayConnectPeerAssociationsCommand = _GetTransitGatewayConnectPeerAssociationsCommand;

// src/commands/GetTransitGatewayPeeringCommand.ts




var _GetTransitGatewayPeeringCommand = class _GetTransitGatewayPeeringCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetTransitGatewayPeering", {}).n("NetworkManagerClient", "GetTransitGatewayPeeringCommand").f(void 0, void 0).ser(se_GetTransitGatewayPeeringCommand).de(de_GetTransitGatewayPeeringCommand).build() {
};
__name(_GetTransitGatewayPeeringCommand, "GetTransitGatewayPeeringCommand");
var GetTransitGatewayPeeringCommand = _GetTransitGatewayPeeringCommand;

// src/commands/GetTransitGatewayRegistrationsCommand.ts




var _GetTransitGatewayRegistrationsCommand = class _GetTransitGatewayRegistrationsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetTransitGatewayRegistrations", {}).n("NetworkManagerClient", "GetTransitGatewayRegistrationsCommand").f(void 0, void 0).ser(se_GetTransitGatewayRegistrationsCommand).de(de_GetTransitGatewayRegistrationsCommand).build() {
};
__name(_GetTransitGatewayRegistrationsCommand, "GetTransitGatewayRegistrationsCommand");
var GetTransitGatewayRegistrationsCommand = _GetTransitGatewayRegistrationsCommand;

// src/commands/GetTransitGatewayRouteTableAttachmentCommand.ts




var _GetTransitGatewayRouteTableAttachmentCommand = class _GetTransitGatewayRouteTableAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetTransitGatewayRouteTableAttachment", {}).n("NetworkManagerClient", "GetTransitGatewayRouteTableAttachmentCommand").f(void 0, void 0).ser(se_GetTransitGatewayRouteTableAttachmentCommand).de(de_GetTransitGatewayRouteTableAttachmentCommand).build() {
};
__name(_GetTransitGatewayRouteTableAttachmentCommand, "GetTransitGatewayRouteTableAttachmentCommand");
var GetTransitGatewayRouteTableAttachmentCommand = _GetTransitGatewayRouteTableAttachmentCommand;

// src/commands/GetVpcAttachmentCommand.ts




var _GetVpcAttachmentCommand = class _GetVpcAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "GetVpcAttachment", {}).n("NetworkManagerClient", "GetVpcAttachmentCommand").f(void 0, void 0).ser(se_GetVpcAttachmentCommand).de(de_GetVpcAttachmentCommand).build() {
};
__name(_GetVpcAttachmentCommand, "GetVpcAttachmentCommand");
var GetVpcAttachmentCommand = _GetVpcAttachmentCommand;

// src/commands/ListAttachmentsCommand.ts




var _ListAttachmentsCommand = class _ListAttachmentsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "ListAttachments", {}).n("NetworkManagerClient", "ListAttachmentsCommand").f(void 0, void 0).ser(se_ListAttachmentsCommand).de(de_ListAttachmentsCommand).build() {
};
__name(_ListAttachmentsCommand, "ListAttachmentsCommand");
var ListAttachmentsCommand = _ListAttachmentsCommand;

// src/commands/ListConnectPeersCommand.ts




var _ListConnectPeersCommand = class _ListConnectPeersCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "ListConnectPeers", {}).n("NetworkManagerClient", "ListConnectPeersCommand").f(void 0, void 0).ser(se_ListConnectPeersCommand).de(de_ListConnectPeersCommand).build() {
};
__name(_ListConnectPeersCommand, "ListConnectPeersCommand");
var ListConnectPeersCommand = _ListConnectPeersCommand;

// src/commands/ListCoreNetworkPolicyVersionsCommand.ts




var _ListCoreNetworkPolicyVersionsCommand = class _ListCoreNetworkPolicyVersionsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "ListCoreNetworkPolicyVersions", {}).n("NetworkManagerClient", "ListCoreNetworkPolicyVersionsCommand").f(void 0, void 0).ser(se_ListCoreNetworkPolicyVersionsCommand).de(de_ListCoreNetworkPolicyVersionsCommand).build() {
};
__name(_ListCoreNetworkPolicyVersionsCommand, "ListCoreNetworkPolicyVersionsCommand");
var ListCoreNetworkPolicyVersionsCommand = _ListCoreNetworkPolicyVersionsCommand;

// src/commands/ListCoreNetworksCommand.ts




var _ListCoreNetworksCommand = class _ListCoreNetworksCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "ListCoreNetworks", {}).n("NetworkManagerClient", "ListCoreNetworksCommand").f(void 0, void 0).ser(se_ListCoreNetworksCommand).de(de_ListCoreNetworksCommand).build() {
};
__name(_ListCoreNetworksCommand, "ListCoreNetworksCommand");
var ListCoreNetworksCommand = _ListCoreNetworksCommand;

// src/commands/ListOrganizationServiceAccessStatusCommand.ts




var _ListOrganizationServiceAccessStatusCommand = class _ListOrganizationServiceAccessStatusCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "ListOrganizationServiceAccessStatus", {}).n("NetworkManagerClient", "ListOrganizationServiceAccessStatusCommand").f(void 0, void 0).ser(se_ListOrganizationServiceAccessStatusCommand).de(de_ListOrganizationServiceAccessStatusCommand).build() {
};
__name(_ListOrganizationServiceAccessStatusCommand, "ListOrganizationServiceAccessStatusCommand");
var ListOrganizationServiceAccessStatusCommand = _ListOrganizationServiceAccessStatusCommand;

// src/commands/ListPeeringsCommand.ts




var _ListPeeringsCommand = class _ListPeeringsCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "ListPeerings", {}).n("NetworkManagerClient", "ListPeeringsCommand").f(void 0, void 0).ser(se_ListPeeringsCommand).de(de_ListPeeringsCommand).build() {
};
__name(_ListPeeringsCommand, "ListPeeringsCommand");
var ListPeeringsCommand = _ListPeeringsCommand;

// src/commands/ListTagsForResourceCommand.ts




var _ListTagsForResourceCommand = class _ListTagsForResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "ListTagsForResource", {}).n("NetworkManagerClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
};
__name(_ListTagsForResourceCommand, "ListTagsForResourceCommand");
var ListTagsForResourceCommand = _ListTagsForResourceCommand;

// src/commands/PutCoreNetworkPolicyCommand.ts




var _PutCoreNetworkPolicyCommand = class _PutCoreNetworkPolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "PutCoreNetworkPolicy", {}).n("NetworkManagerClient", "PutCoreNetworkPolicyCommand").f(void 0, void 0).ser(se_PutCoreNetworkPolicyCommand).de(de_PutCoreNetworkPolicyCommand).build() {
};
__name(_PutCoreNetworkPolicyCommand, "PutCoreNetworkPolicyCommand");
var PutCoreNetworkPolicyCommand = _PutCoreNetworkPolicyCommand;

// src/commands/PutResourcePolicyCommand.ts




var _PutResourcePolicyCommand = class _PutResourcePolicyCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "PutResourcePolicy", {}).n("NetworkManagerClient", "PutResourcePolicyCommand").f(void 0, void 0).ser(se_PutResourcePolicyCommand).de(de_PutResourcePolicyCommand).build() {
};
__name(_PutResourcePolicyCommand, "PutResourcePolicyCommand");
var PutResourcePolicyCommand = _PutResourcePolicyCommand;

// src/commands/RegisterTransitGatewayCommand.ts




var _RegisterTransitGatewayCommand = class _RegisterTransitGatewayCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "RegisterTransitGateway", {}).n("NetworkManagerClient", "RegisterTransitGatewayCommand").f(void 0, void 0).ser(se_RegisterTransitGatewayCommand).de(de_RegisterTransitGatewayCommand).build() {
};
__name(_RegisterTransitGatewayCommand, "RegisterTransitGatewayCommand");
var RegisterTransitGatewayCommand = _RegisterTransitGatewayCommand;

// src/commands/RejectAttachmentCommand.ts




var _RejectAttachmentCommand = class _RejectAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "RejectAttachment", {}).n("NetworkManagerClient", "RejectAttachmentCommand").f(void 0, void 0).ser(se_RejectAttachmentCommand).de(de_RejectAttachmentCommand).build() {
};
__name(_RejectAttachmentCommand, "RejectAttachmentCommand");
var RejectAttachmentCommand = _RejectAttachmentCommand;

// src/commands/RestoreCoreNetworkPolicyVersionCommand.ts




var _RestoreCoreNetworkPolicyVersionCommand = class _RestoreCoreNetworkPolicyVersionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "RestoreCoreNetworkPolicyVersion", {}).n("NetworkManagerClient", "RestoreCoreNetworkPolicyVersionCommand").f(void 0, void 0).ser(se_RestoreCoreNetworkPolicyVersionCommand).de(de_RestoreCoreNetworkPolicyVersionCommand).build() {
};
__name(_RestoreCoreNetworkPolicyVersionCommand, "RestoreCoreNetworkPolicyVersionCommand");
var RestoreCoreNetworkPolicyVersionCommand = _RestoreCoreNetworkPolicyVersionCommand;

// src/commands/StartOrganizationServiceAccessUpdateCommand.ts




var _StartOrganizationServiceAccessUpdateCommand = class _StartOrganizationServiceAccessUpdateCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "StartOrganizationServiceAccessUpdate", {}).n("NetworkManagerClient", "StartOrganizationServiceAccessUpdateCommand").f(void 0, void 0).ser(se_StartOrganizationServiceAccessUpdateCommand).de(de_StartOrganizationServiceAccessUpdateCommand).build() {
};
__name(_StartOrganizationServiceAccessUpdateCommand, "StartOrganizationServiceAccessUpdateCommand");
var StartOrganizationServiceAccessUpdateCommand = _StartOrganizationServiceAccessUpdateCommand;

// src/commands/StartRouteAnalysisCommand.ts




var _StartRouteAnalysisCommand = class _StartRouteAnalysisCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "StartRouteAnalysis", {}).n("NetworkManagerClient", "StartRouteAnalysisCommand").f(void 0, void 0).ser(se_StartRouteAnalysisCommand).de(de_StartRouteAnalysisCommand).build() {
};
__name(_StartRouteAnalysisCommand, "StartRouteAnalysisCommand");
var StartRouteAnalysisCommand = _StartRouteAnalysisCommand;

// src/commands/TagResourceCommand.ts




var _TagResourceCommand = class _TagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "TagResource", {}).n("NetworkManagerClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
};
__name(_TagResourceCommand, "TagResourceCommand");
var TagResourceCommand = _TagResourceCommand;

// src/commands/UntagResourceCommand.ts




var _UntagResourceCommand = class _UntagResourceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "UntagResource", {}).n("NetworkManagerClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
};
__name(_UntagResourceCommand, "UntagResourceCommand");
var UntagResourceCommand = _UntagResourceCommand;

// src/commands/UpdateConnectionCommand.ts




var _UpdateConnectionCommand = class _UpdateConnectionCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "UpdateConnection", {}).n("NetworkManagerClient", "UpdateConnectionCommand").f(void 0, void 0).ser(se_UpdateConnectionCommand).de(de_UpdateConnectionCommand).build() {
};
__name(_UpdateConnectionCommand, "UpdateConnectionCommand");
var UpdateConnectionCommand = _UpdateConnectionCommand;

// src/commands/UpdateCoreNetworkCommand.ts




var _UpdateCoreNetworkCommand = class _UpdateCoreNetworkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "UpdateCoreNetwork", {}).n("NetworkManagerClient", "UpdateCoreNetworkCommand").f(void 0, void 0).ser(se_UpdateCoreNetworkCommand).de(de_UpdateCoreNetworkCommand).build() {
};
__name(_UpdateCoreNetworkCommand, "UpdateCoreNetworkCommand");
var UpdateCoreNetworkCommand = _UpdateCoreNetworkCommand;

// src/commands/UpdateDeviceCommand.ts




var _UpdateDeviceCommand = class _UpdateDeviceCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "UpdateDevice", {}).n("NetworkManagerClient", "UpdateDeviceCommand").f(UpdateDeviceRequestFilterSensitiveLog, UpdateDeviceResponseFilterSensitiveLog).ser(se_UpdateDeviceCommand).de(de_UpdateDeviceCommand).build() {
};
__name(_UpdateDeviceCommand, "UpdateDeviceCommand");
var UpdateDeviceCommand = _UpdateDeviceCommand;

// src/commands/UpdateGlobalNetworkCommand.ts




var _UpdateGlobalNetworkCommand = class _UpdateGlobalNetworkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "UpdateGlobalNetwork", {}).n("NetworkManagerClient", "UpdateGlobalNetworkCommand").f(void 0, void 0).ser(se_UpdateGlobalNetworkCommand).de(de_UpdateGlobalNetworkCommand).build() {
};
__name(_UpdateGlobalNetworkCommand, "UpdateGlobalNetworkCommand");
var UpdateGlobalNetworkCommand = _UpdateGlobalNetworkCommand;

// src/commands/UpdateLinkCommand.ts




var _UpdateLinkCommand = class _UpdateLinkCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "UpdateLink", {}).n("NetworkManagerClient", "UpdateLinkCommand").f(void 0, void 0).ser(se_UpdateLinkCommand).de(de_UpdateLinkCommand).build() {
};
__name(_UpdateLinkCommand, "UpdateLinkCommand");
var UpdateLinkCommand = _UpdateLinkCommand;

// src/commands/UpdateNetworkResourceMetadataCommand.ts




var _UpdateNetworkResourceMetadataCommand = class _UpdateNetworkResourceMetadataCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "UpdateNetworkResourceMetadata", {}).n("NetworkManagerClient", "UpdateNetworkResourceMetadataCommand").f(void 0, void 0).ser(se_UpdateNetworkResourceMetadataCommand).de(de_UpdateNetworkResourceMetadataCommand).build() {
};
__name(_UpdateNetworkResourceMetadataCommand, "UpdateNetworkResourceMetadataCommand");
var UpdateNetworkResourceMetadataCommand = _UpdateNetworkResourceMetadataCommand;

// src/commands/UpdateSiteCommand.ts




var _UpdateSiteCommand = class _UpdateSiteCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "UpdateSite", {}).n("NetworkManagerClient", "UpdateSiteCommand").f(UpdateSiteRequestFilterSensitiveLog, UpdateSiteResponseFilterSensitiveLog).ser(se_UpdateSiteCommand).de(de_UpdateSiteCommand).build() {
};
__name(_UpdateSiteCommand, "UpdateSiteCommand");
var UpdateSiteCommand = _UpdateSiteCommand;

// src/commands/UpdateVpcAttachmentCommand.ts




var _UpdateVpcAttachmentCommand = class _UpdateVpcAttachmentCommand extends import_smithy_client.Command.classBuilder().ep({
  ...commonParams
}).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("NetworkManager", "UpdateVpcAttachment", {}).n("NetworkManagerClient", "UpdateVpcAttachmentCommand").f(void 0, void 0).ser(se_UpdateVpcAttachmentCommand).de(de_UpdateVpcAttachmentCommand).build() {
};
__name(_UpdateVpcAttachmentCommand, "UpdateVpcAttachmentCommand");
var UpdateVpcAttachmentCommand = _UpdateVpcAttachmentCommand;

// src/NetworkManager.ts
var commands = {
  AcceptAttachmentCommand,
  AssociateConnectPeerCommand,
  AssociateCustomerGatewayCommand,
  AssociateLinkCommand,
  AssociateTransitGatewayConnectPeerCommand,
  CreateConnectAttachmentCommand,
  CreateConnectionCommand,
  CreateConnectPeerCommand,
  CreateCoreNetworkCommand,
  CreateDeviceCommand,
  CreateGlobalNetworkCommand,
  CreateLinkCommand,
  CreateSiteCommand,
  CreateSiteToSiteVpnAttachmentCommand,
  CreateTransitGatewayPeeringCommand,
  CreateTransitGatewayRouteTableAttachmentCommand,
  CreateVpcAttachmentCommand,
  DeleteAttachmentCommand,
  DeleteConnectionCommand,
  DeleteConnectPeerCommand,
  DeleteCoreNetworkCommand,
  DeleteCoreNetworkPolicyVersionCommand,
  DeleteDeviceCommand,
  DeleteGlobalNetworkCommand,
  DeleteLinkCommand,
  DeletePeeringCommand,
  DeleteResourcePolicyCommand,
  DeleteSiteCommand,
  DeregisterTransitGatewayCommand,
  DescribeGlobalNetworksCommand,
  DisassociateConnectPeerCommand,
  DisassociateCustomerGatewayCommand,
  DisassociateLinkCommand,
  DisassociateTransitGatewayConnectPeerCommand,
  ExecuteCoreNetworkChangeSetCommand,
  GetConnectAttachmentCommand,
  GetConnectionsCommand,
  GetConnectPeerCommand,
  GetConnectPeerAssociationsCommand,
  GetCoreNetworkCommand,
  GetCoreNetworkChangeEventsCommand,
  GetCoreNetworkChangeSetCommand,
  GetCoreNetworkPolicyCommand,
  GetCustomerGatewayAssociationsCommand,
  GetDevicesCommand,
  GetLinkAssociationsCommand,
  GetLinksCommand,
  GetNetworkResourceCountsCommand,
  GetNetworkResourceRelationshipsCommand,
  GetNetworkResourcesCommand,
  GetNetworkRoutesCommand,
  GetNetworkTelemetryCommand,
  GetResourcePolicyCommand,
  GetRouteAnalysisCommand,
  GetSitesCommand,
  GetSiteToSiteVpnAttachmentCommand,
  GetTransitGatewayConnectPeerAssociationsCommand,
  GetTransitGatewayPeeringCommand,
  GetTransitGatewayRegistrationsCommand,
  GetTransitGatewayRouteTableAttachmentCommand,
  GetVpcAttachmentCommand,
  ListAttachmentsCommand,
  ListConnectPeersCommand,
  ListCoreNetworkPolicyVersionsCommand,
  ListCoreNetworksCommand,
  ListOrganizationServiceAccessStatusCommand,
  ListPeeringsCommand,
  ListTagsForResourceCommand,
  PutCoreNetworkPolicyCommand,
  PutResourcePolicyCommand,
  RegisterTransitGatewayCommand,
  RejectAttachmentCommand,
  RestoreCoreNetworkPolicyVersionCommand,
  StartOrganizationServiceAccessUpdateCommand,
  StartRouteAnalysisCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateConnectionCommand,
  UpdateCoreNetworkCommand,
  UpdateDeviceCommand,
  UpdateGlobalNetworkCommand,
  UpdateLinkCommand,
  UpdateNetworkResourceMetadataCommand,
  UpdateSiteCommand,
  UpdateVpcAttachmentCommand
};
var _NetworkManager = class _NetworkManager extends NetworkManagerClient {
};
__name(_NetworkManager, "NetworkManager");
var NetworkManager = _NetworkManager;
(0, import_smithy_client.createAggregatedClient)(commands, NetworkManager);

// src/pagination/DescribeGlobalNetworksPaginator.ts

var paginateDescribeGlobalNetworks = (0, import_core.createPaginator)(NetworkManagerClient, DescribeGlobalNetworksCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetConnectPeerAssociationsPaginator.ts

var paginateGetConnectPeerAssociations = (0, import_core.createPaginator)(NetworkManagerClient, GetConnectPeerAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetConnectionsPaginator.ts

var paginateGetConnections = (0, import_core.createPaginator)(NetworkManagerClient, GetConnectionsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetCoreNetworkChangeEventsPaginator.ts

var paginateGetCoreNetworkChangeEvents = (0, import_core.createPaginator)(NetworkManagerClient, GetCoreNetworkChangeEventsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetCoreNetworkChangeSetPaginator.ts

var paginateGetCoreNetworkChangeSet = (0, import_core.createPaginator)(NetworkManagerClient, GetCoreNetworkChangeSetCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetCustomerGatewayAssociationsPaginator.ts

var paginateGetCustomerGatewayAssociations = (0, import_core.createPaginator)(NetworkManagerClient, GetCustomerGatewayAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetDevicesPaginator.ts

var paginateGetDevices = (0, import_core.createPaginator)(NetworkManagerClient, GetDevicesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetLinkAssociationsPaginator.ts

var paginateGetLinkAssociations = (0, import_core.createPaginator)(NetworkManagerClient, GetLinkAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetLinksPaginator.ts

var paginateGetLinks = (0, import_core.createPaginator)(NetworkManagerClient, GetLinksCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetNetworkResourceCountsPaginator.ts

var paginateGetNetworkResourceCounts = (0, import_core.createPaginator)(NetworkManagerClient, GetNetworkResourceCountsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetNetworkResourceRelationshipsPaginator.ts

var paginateGetNetworkResourceRelationships = (0, import_core.createPaginator)(NetworkManagerClient, GetNetworkResourceRelationshipsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetNetworkResourcesPaginator.ts

var paginateGetNetworkResources = (0, import_core.createPaginator)(NetworkManagerClient, GetNetworkResourcesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetNetworkTelemetryPaginator.ts

var paginateGetNetworkTelemetry = (0, import_core.createPaginator)(NetworkManagerClient, GetNetworkTelemetryCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetSitesPaginator.ts

var paginateGetSites = (0, import_core.createPaginator)(NetworkManagerClient, GetSitesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetTransitGatewayConnectPeerAssociationsPaginator.ts

var paginateGetTransitGatewayConnectPeerAssociations = (0, import_core.createPaginator)(NetworkManagerClient, GetTransitGatewayConnectPeerAssociationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/GetTransitGatewayRegistrationsPaginator.ts

var paginateGetTransitGatewayRegistrations = (0, import_core.createPaginator)(NetworkManagerClient, GetTransitGatewayRegistrationsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListAttachmentsPaginator.ts

var paginateListAttachments = (0, import_core.createPaginator)(NetworkManagerClient, ListAttachmentsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListConnectPeersPaginator.ts

var paginateListConnectPeers = (0, import_core.createPaginator)(NetworkManagerClient, ListConnectPeersCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListCoreNetworkPolicyVersionsPaginator.ts

var paginateListCoreNetworkPolicyVersions = (0, import_core.createPaginator)(NetworkManagerClient, ListCoreNetworkPolicyVersionsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListCoreNetworksPaginator.ts

var paginateListCoreNetworks = (0, import_core.createPaginator)(NetworkManagerClient, ListCoreNetworksCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListPeeringsPaginator.ts

var paginateListPeerings = (0, import_core.createPaginator)(NetworkManagerClient, ListPeeringsCommand, "NextToken", "NextToken", "MaxResults");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  NetworkManagerServiceException,
  __Client,
  NetworkManagerClient,
  NetworkManager,
  $Command,
  AcceptAttachmentCommand,
  AssociateConnectPeerCommand,
  AssociateCustomerGatewayCommand,
  AssociateLinkCommand,
  AssociateTransitGatewayConnectPeerCommand,
  CreateConnectAttachmentCommand,
  CreateConnectPeerCommand,
  CreateConnectionCommand,
  CreateCoreNetworkCommand,
  CreateDeviceCommand,
  CreateGlobalNetworkCommand,
  CreateLinkCommand,
  CreateSiteCommand,
  CreateSiteToSiteVpnAttachmentCommand,
  CreateTransitGatewayPeeringCommand,
  CreateTransitGatewayRouteTableAttachmentCommand,
  CreateVpcAttachmentCommand,
  DeleteAttachmentCommand,
  DeleteConnectPeerCommand,
  DeleteConnectionCommand,
  DeleteCoreNetworkCommand,
  DeleteCoreNetworkPolicyVersionCommand,
  DeleteDeviceCommand,
  DeleteGlobalNetworkCommand,
  DeleteLinkCommand,
  DeletePeeringCommand,
  DeleteResourcePolicyCommand,
  DeleteSiteCommand,
  DeregisterTransitGatewayCommand,
  DescribeGlobalNetworksCommand,
  DisassociateConnectPeerCommand,
  DisassociateCustomerGatewayCommand,
  DisassociateLinkCommand,
  DisassociateTransitGatewayConnectPeerCommand,
  ExecuteCoreNetworkChangeSetCommand,
  GetConnectAttachmentCommand,
  GetConnectPeerAssociationsCommand,
  GetConnectPeerCommand,
  GetConnectionsCommand,
  GetCoreNetworkChangeEventsCommand,
  GetCoreNetworkChangeSetCommand,
  GetCoreNetworkCommand,
  GetCoreNetworkPolicyCommand,
  GetCustomerGatewayAssociationsCommand,
  GetDevicesCommand,
  GetLinkAssociationsCommand,
  GetLinksCommand,
  GetNetworkResourceCountsCommand,
  GetNetworkResourceRelationshipsCommand,
  GetNetworkResourcesCommand,
  GetNetworkRoutesCommand,
  GetNetworkTelemetryCommand,
  GetResourcePolicyCommand,
  GetRouteAnalysisCommand,
  GetSiteToSiteVpnAttachmentCommand,
  GetSitesCommand,
  GetTransitGatewayConnectPeerAssociationsCommand,
  GetTransitGatewayPeeringCommand,
  GetTransitGatewayRegistrationsCommand,
  GetTransitGatewayRouteTableAttachmentCommand,
  GetVpcAttachmentCommand,
  ListAttachmentsCommand,
  ListConnectPeersCommand,
  ListCoreNetworkPolicyVersionsCommand,
  ListCoreNetworksCommand,
  ListOrganizationServiceAccessStatusCommand,
  ListPeeringsCommand,
  ListTagsForResourceCommand,
  PutCoreNetworkPolicyCommand,
  PutResourcePolicyCommand,
  RegisterTransitGatewayCommand,
  RejectAttachmentCommand,
  RestoreCoreNetworkPolicyVersionCommand,
  StartOrganizationServiceAccessUpdateCommand,
  StartRouteAnalysisCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateConnectionCommand,
  UpdateCoreNetworkCommand,
  UpdateDeviceCommand,
  UpdateGlobalNetworkCommand,
  UpdateLinkCommand,
  UpdateNetworkResourceMetadataCommand,
  UpdateSiteCommand,
  UpdateVpcAttachmentCommand,
  paginateDescribeGlobalNetworks,
  paginateGetConnectPeerAssociations,
  paginateGetConnections,
  paginateGetCoreNetworkChangeEvents,
  paginateGetCoreNetworkChangeSet,
  paginateGetCustomerGatewayAssociations,
  paginateGetDevices,
  paginateGetLinkAssociations,
  paginateGetLinks,
  paginateGetNetworkResourceCounts,
  paginateGetNetworkResourceRelationships,
  paginateGetNetworkResources,
  paginateGetNetworkTelemetry,
  paginateGetSites,
  paginateGetTransitGatewayConnectPeerAssociations,
  paginateGetTransitGatewayRegistrations,
  paginateListAttachments,
  paginateListConnectPeers,
  paginateListCoreNetworkPolicyVersions,
  paginateListCoreNetworks,
  paginateListPeerings,
  AttachmentType,
  AttachmentState,
  AccessDeniedException,
  ConflictException,
  InternalServerException,
  ResourceNotFoundException,
  ThrottlingException,
  ValidationExceptionReason,
  ValidationException,
  ConnectPeerAssociationState,
  ServiceQuotaExceededException,
  CustomerGatewayAssociationState,
  LinkAssociationState,
  TransitGatewayConnectPeerAssociationState,
  ChangeAction,
  ChangeSetState,
  ChangeStatus,
  ChangeType,
  TunnelProtocol,
  ConnectionState,
  ConnectionStatus,
  ConnectionType,
  ConnectPeerState,
  CoreNetworkState,
  CoreNetworkPolicyAlias,
  CoreNetworkPolicyException,
  DeviceState,
  GlobalNetworkState,
  LinkState,
  SiteState,
  PeeringType,
  PeeringState,
  TransitGatewayRegistrationState,
  RouteState,
  RouteType,
  RouteTableType,
  RouteAnalysisCompletionReasonCode,
  RouteAnalysisCompletionResultCode,
  RouteAnalysisStatus,
  LocationFilterSensitiveLog,
  CreateDeviceRequestFilterSensitiveLog,
  DeviceFilterSensitiveLog,
  CreateDeviceResponseFilterSensitiveLog,
  CreateSiteRequestFilterSensitiveLog,
  SiteFilterSensitiveLog,
  CreateSiteResponseFilterSensitiveLog,
  DeleteDeviceResponseFilterSensitiveLog,
  DeleteSiteResponseFilterSensitiveLog,
  GetDevicesResponseFilterSensitiveLog,
  GetSitesResponseFilterSensitiveLog,
  UpdateDeviceRequestFilterSensitiveLog,
  UpdateDeviceResponseFilterSensitiveLog,
  UpdateSiteRequestFilterSensitiveLog,
  UpdateSiteResponseFilterSensitiveLog
});

