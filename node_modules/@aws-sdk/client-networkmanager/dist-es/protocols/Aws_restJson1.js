import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, LazyJsonString as __LazyJsonString, map, parseEpochTimestamp as __parseEpochTimestamp, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, CoreNetworkPolicyException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { NetworkManagerServiceException as __BaseException } from "../models/NetworkManagerServiceException";
export const se_AcceptAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/attachments/{AttachmentId}/accept");
    b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateConnectPeerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/connect-peer-associations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ConnectPeerId: [],
        DeviceId: [],
        LinkId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateCustomerGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/customer-gateway-associations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        CustomerGatewayArn: [],
        DeviceId: [],
        LinkId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateLinkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/link-associations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DeviceId: [],
        LinkId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_AssociateTransitGatewayConnectPeerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-connect-peer-associations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DeviceId: [],
        LinkId: [],
        TransitGatewayConnectPeerArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateConnectAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/connect-attachments");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CoreNetworkId: [],
        EdgeLocation: [],
        Options: (_) => _json(_),
        Tags: (_) => _json(_),
        TransportAttachmentId: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateConnectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/connections");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ConnectedDeviceId: [],
        ConnectedLinkId: [],
        Description: [],
        DeviceId: [],
        LinkId: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateConnectPeerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/connect-peers");
    let body;
    body = JSON.stringify(take(input, {
        BgpOptions: (_) => _json(_),
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ConnectAttachmentId: [],
        CoreNetworkAddress: [],
        InsideCidrBlocks: (_) => _json(_),
        PeerAddress: [],
        SubnetArn: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateCoreNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/core-networks");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        GlobalNetworkId: [],
        PolicyDocument: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/devices");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AWSLocation: (_) => _json(_),
        Description: [],
        Location: (_) => _json(_),
        Model: [],
        SerialNumber: [],
        SiteId: [],
        Tags: (_) => _json(_),
        Type: [],
        Vendor: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateGlobalNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks");
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateLinkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/links");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Bandwidth: (_) => _json(_),
        Description: [],
        Provider: [],
        SiteId: [],
        Tags: (_) => _json(_),
        Type: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSiteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/sites");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Location: (_) => _json(_),
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateSiteToSiteVpnAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/site-to-site-vpn-attachments");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CoreNetworkId: [],
        Tags: (_) => _json(_),
        VpnConnectionArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTransitGatewayPeeringCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/transit-gateway-peerings");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CoreNetworkId: [],
        Tags: (_) => _json(_),
        TransitGatewayArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateTransitGatewayRouteTableAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/transit-gateway-route-table-attachments");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        PeeringId: [],
        Tags: (_) => _json(_),
        TransitGatewayRouteTableArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateVpcAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/vpc-attachments");
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CoreNetworkId: [],
        Options: (_) => _json(_),
        SubnetArns: (_) => _json(_),
        Tags: (_) => _json(_),
        VpcArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/attachments/{AttachmentId}");
    b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteConnectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/connections/{ConnectionId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("ConnectionId", () => input.ConnectionId, "{ConnectionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteConnectPeerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/connect-peers/{ConnectPeerId}");
    b.p("ConnectPeerId", () => input.ConnectPeerId, "{ConnectPeerId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteCoreNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/core-networks/{CoreNetworkId}");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteCoreNetworkPolicyVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/core-networks/{CoreNetworkId}/core-network-policy-versions/{PolicyVersionId}");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    b.p("PolicyVersionId", () => input.PolicyVersionId.toString(), "{PolicyVersionId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/devices/{DeviceId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteGlobalNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteLinkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/links/{LinkId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("LinkId", () => input.LinkId, "{LinkId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePeeringCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/peerings/{PeeringId}");
    b.p("PeeringId", () => input.PeeringId, "{PeeringId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resource-policy/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteSiteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/sites/{SiteId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("SiteId", () => input.SiteId, "{SiteId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeregisterTransitGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-registrations/{TransitGatewayArn}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("TransitGatewayArn", () => input.TransitGatewayArn, "{TransitGatewayArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeGlobalNetworksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks");
    const query = map({
        [_gNI]: [() => input.GlobalNetworkIds !== void 0, () => (input[_GNI] || []).map((_entry) => _entry)],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateConnectPeerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/connect-peer-associations/{ConnectPeerId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("ConnectPeerId", () => input.ConnectPeerId, "{ConnectPeerId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateCustomerGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/customer-gateway-associations/{CustomerGatewayArn}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("CustomerGatewayArn", () => input.CustomerGatewayArn, "{CustomerGatewayArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DisassociateLinkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/link-associations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_dI]: [, __expectNonNull(input[_DI], `DeviceId`)],
        [_lI]: [, __expectNonNull(input[_LI], `LinkId`)],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_DisassociateTransitGatewayConnectPeerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-connect-peer-associations/{TransitGatewayConnectPeerArn}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("TransitGatewayConnectPeerArn", () => input.TransitGatewayConnectPeerArn, "{TransitGatewayConnectPeerArn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_ExecuteCoreNetworkChangeSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/core-networks/{CoreNetworkId}/core-network-change-sets/{PolicyVersionId}/execute");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    b.p("PolicyVersionId", () => input.PolicyVersionId.toString(), "{PolicyVersionId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetConnectAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/connect-attachments/{AttachmentId}");
    b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConnectionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/connections");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_cI]: [() => input.ConnectionIds !== void 0, () => (input[_CI] || []).map((_entry) => _entry)],
        [_dI]: [, input[_DI]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetConnectPeerCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/connect-peers/{ConnectPeerId}");
    b.p("ConnectPeerId", () => input.ConnectPeerId, "{ConnectPeerId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetConnectPeerAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/connect-peer-associations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_cPI]: [() => input.ConnectPeerIds !== void 0, () => (input[_CPI] || []).map((_entry) => _entry)],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCoreNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/core-networks/{CoreNetworkId}");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCoreNetworkChangeEventsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/core-networks/{CoreNetworkId}/core-network-change-events/{PolicyVersionId}");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    b.p("PolicyVersionId", () => input.PolicyVersionId.toString(), "{PolicyVersionId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCoreNetworkChangeSetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/core-networks/{CoreNetworkId}/core-network-change-sets/{PolicyVersionId}");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    b.p("PolicyVersionId", () => input.PolicyVersionId.toString(), "{PolicyVersionId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCoreNetworkPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/core-networks/{CoreNetworkId}/core-network-policy");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    const query = map({
        [_pVI]: [() => input.PolicyVersionId !== void 0, () => input[_PVI].toString()],
        [_a]: [, input[_A]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetCustomerGatewayAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/customer-gateway-associations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_cGA]: [() => input.CustomerGatewayArns !== void 0, () => (input[_CGA] || []).map((_entry) => _entry)],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetDevicesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/devices");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_dIe]: [() => input.DeviceIds !== void 0, () => (input[_DIe] || []).map((_entry) => _entry)],
        [_sI]: [, input[_SI]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetLinkAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/link-associations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_dI]: [, input[_DI]],
        [_lI]: [, input[_LI]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetLinksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/links");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_lIi]: [() => input.LinkIds !== void 0, () => (input[_LIi] || []).map((_entry) => _entry)],
        [_sI]: [, input[_SI]],
        [_t]: [, input[_T]],
        [_p]: [, input[_P]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetNetworkResourceCountsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/network-resource-count");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_rT]: [, input[_RT]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetNetworkResourceRelationshipsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/network-resource-relationships");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_cNI]: [, input[_CNI]],
        [_rGA]: [, input[_RGA]],
        [_aR]: [, input[_AR]],
        [_aI]: [, input[_AI]],
        [_rT]: [, input[_RT]],
        [_rA]: [, input[_RA]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetNetworkResourcesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/network-resources");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_cNI]: [, input[_CNI]],
        [_rGA]: [, input[_RGA]],
        [_aR]: [, input[_AR]],
        [_aI]: [, input[_AI]],
        [_rT]: [, input[_RT]],
        [_rA]: [, input[_RA]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetNetworkRoutesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/network-routes");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        DestinationFilters: (_) => _json(_),
        ExactCidrMatches: (_) => _json(_),
        LongestPrefixMatches: (_) => _json(_),
        PrefixListIds: (_) => _json(_),
        RouteTableIdentifier: (_) => _json(_),
        States: (_) => _json(_),
        SubnetOfMatches: (_) => _json(_),
        SupernetOfMatches: (_) => _json(_),
        Types: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_GetNetworkTelemetryCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/network-telemetry");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_cNI]: [, input[_CNI]],
        [_rGA]: [, input[_RGA]],
        [_aR]: [, input[_AR]],
        [_aI]: [, input[_AI]],
        [_rT]: [, input[_RT]],
        [_rA]: [, input[_RA]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/resource-policy/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetRouteAnalysisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/route-analyses/{RouteAnalysisId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("RouteAnalysisId", () => input.RouteAnalysisId, "{RouteAnalysisId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetSitesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/sites");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_sIi]: [() => input.SiteIds !== void 0, () => (input[_SIi] || []).map((_entry) => _entry)],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetSiteToSiteVpnAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/site-to-site-vpn-attachments/{AttachmentId}");
    b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetTransitGatewayConnectPeerAssociationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-connect-peer-associations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_tGCPA]: [
            () => input.TransitGatewayConnectPeerArns !== void 0,
            () => (input[_TGCPA] || []).map((_entry) => _entry),
        ],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetTransitGatewayPeeringCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/transit-gateway-peerings/{PeeringId}");
    b.p("PeeringId", () => input.PeeringId, "{PeeringId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetTransitGatewayRegistrationsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-registrations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    const query = map({
        [_tGA]: [() => input.TransitGatewayArns !== void 0, () => (input[_TGA] || []).map((_entry) => _entry)],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetTransitGatewayRouteTableAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/transit-gateway-route-table-attachments/{AttachmentId}");
    b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetVpcAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/vpc-attachments/{AttachmentId}");
    b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListAttachmentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/attachments");
    const query = map({
        [_cNI]: [, input[_CNI]],
        [_aT]: [, input[_AT]],
        [_eL]: [, input[_EL]],
        [_s]: [, input[_S]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListConnectPeersCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/connect-peers");
    const query = map({
        [_cNI]: [, input[_CNI]],
        [_cAI]: [, input[_CAI]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCoreNetworkPolicyVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/core-networks/{CoreNetworkId}/core-network-policy-versions");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCoreNetworksCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/core-networks");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListOrganizationServiceAccessStatusCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/organizations/service-access");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPeeringsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/peerings");
    const query = map({
        [_cNI]: [, input[_CNI]],
        [_pT]: [, input[_PT]],
        [_eL]: [, input[_EL]],
        [_s]: [, input[_S]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_PutCoreNetworkPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/core-networks/{CoreNetworkId}/core-network-policy");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Description: [],
        LatestVersionId: [],
        PolicyDocument: (_) => __LazyJsonString.fromObject(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/resource-policy/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        PolicyDocument: (_) => __LazyJsonString.fromObject(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RegisterTransitGatewayCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/transit-gateway-registrations");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        TransitGatewayArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RejectAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/attachments/{AttachmentId}/reject");
    b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_RestoreCoreNetworkPolicyVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/core-networks/{CoreNetworkId}/core-network-policy-versions/{PolicyVersionId}/restore");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    b.p("PolicyVersionId", () => input.PolicyVersionId.toString(), "{PolicyVersionId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartOrganizationServiceAccessUpdateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/organizations/service-access");
    let body;
    body = JSON.stringify(take(input, {
        Action: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_StartRouteAnalysisCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/route-analyses");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Destination: (_) => _json(_),
        IncludeReturnPath: [],
        Source: (_) => _json(_),
        UseMiddleboxes: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{ResourceArn}");
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    const query = map({
        [_tK]: [
            __expectNonNull(input.TagKeys, `TagKeys`) != null,
            () => (input[_TK] || []).map((_entry) => _entry),
        ],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateConnectionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/connections/{ConnectionId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("ConnectionId", () => input.ConnectionId, "{ConnectionId}", false);
    let body;
    body = JSON.stringify(take(input, {
        ConnectedLinkId: [],
        Description: [],
        LinkId: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateCoreNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/core-networks/{CoreNetworkId}");
    b.p("CoreNetworkId", () => input.CoreNetworkId, "{CoreNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/devices/{DeviceId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("DeviceId", () => input.DeviceId, "{DeviceId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AWSLocation: (_) => _json(_),
        Description: [],
        Location: (_) => _json(_),
        Model: [],
        SerialNumber: [],
        SiteId: [],
        Type: [],
        Vendor: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateGlobalNetworkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateLinkCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/links/{LinkId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("LinkId", () => input.LinkId, "{LinkId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Bandwidth: (_) => _json(_),
        Description: [],
        Provider: [],
        Type: [],
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateNetworkResourceMetadataCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/network-resources/{ResourceArn}/metadata");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("ResourceArn", () => input.ResourceArn, "{ResourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        Metadata: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateSiteCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/global-networks/{GlobalNetworkId}/sites/{SiteId}");
    b.p("GlobalNetworkId", () => input.GlobalNetworkId, "{GlobalNetworkId}", false);
    b.p("SiteId", () => input.SiteId, "{SiteId}", false);
    let body;
    body = JSON.stringify(take(input, {
        Description: [],
        Location: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const se_UpdateVpcAttachmentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/vpc-attachments/{AttachmentId}");
    b.p("AttachmentId", () => input.AttachmentId, "{AttachmentId}", false);
    let body;
    body = JSON.stringify(take(input, {
        AddSubnetArns: (_) => _json(_),
        Options: (_) => _json(_),
        RemoveSubnetArns: (_) => _json(_),
    }));
    b.m("PATCH").h(headers).b(body);
    return b.build();
};
export const de_AcceptAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attachment: (_) => de_Attachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateConnectPeerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectPeerAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateCustomerGatewayCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CustomerGatewayAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateLinkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LinkAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_AssociateTransitGatewayConnectPeerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TransitGatewayConnectPeerAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateConnectAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectAttachment: (_) => de_ConnectAttachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateConnectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Connection: (_) => de_Connection(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateConnectPeerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectPeer: (_) => de_ConnectPeer(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateCoreNetworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetwork: (_) => de_CoreNetwork(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Device: (_) => de_Device(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateGlobalNetworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GlobalNetwork: (_) => de_GlobalNetwork(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateLinkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Link: (_) => de_Link(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Site: (_) => de_Site(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateSiteToSiteVpnAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SiteToSiteVpnAttachment: (_) => de_SiteToSiteVpnAttachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTransitGatewayPeeringCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TransitGatewayPeering: (_) => de_TransitGatewayPeering(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateTransitGatewayRouteTableAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TransitGatewayRouteTableAttachment: (_) => de_TransitGatewayRouteTableAttachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        VpcAttachment: (_) => de_VpcAttachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attachment: (_) => de_Attachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteConnectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Connection: (_) => de_Connection(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteConnectPeerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectPeer: (_) => de_ConnectPeer(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteCoreNetworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetwork: (_) => de_CoreNetwork(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteCoreNetworkPolicyVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetworkPolicy: (_) => de_CoreNetworkPolicy(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Device: (_) => de_Device(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteGlobalNetworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GlobalNetwork: (_) => de_GlobalNetwork(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteLinkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Link: (_) => de_Link(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeletePeeringCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Peering: (_) => de_Peering(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteSiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Site: (_) => de_Site(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeregisterTransitGatewayCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TransitGatewayRegistration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DescribeGlobalNetworksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GlobalNetworks: (_) => de_GlobalNetworkList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateConnectPeerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectPeerAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateCustomerGatewayCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CustomerGatewayAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateLinkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LinkAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateTransitGatewayConnectPeerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TransitGatewayConnectPeerAssociation: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ExecuteCoreNetworkChangeSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetConnectAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectAttachment: (_) => de_ConnectAttachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConnectionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Connections: (_) => de_ConnectionList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConnectPeerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectPeer: (_) => de_ConnectPeer(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConnectPeerAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectPeerAssociations: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCoreNetworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetwork: (_) => de_CoreNetwork(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCoreNetworkChangeEventsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetworkChangeEvents: (_) => de_CoreNetworkChangeEventList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCoreNetworkChangeSetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetworkChanges: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCoreNetworkPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetworkPolicy: (_) => de_CoreNetworkPolicy(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCustomerGatewayAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CustomerGatewayAssociations: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDevicesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Devices: (_) => de_DeviceList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLinkAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        LinkAssociations: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetLinksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Links: (_) => de_LinkList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetNetworkResourceCountsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NetworkResourceCounts: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetNetworkResourceRelationshipsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Relationships: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetNetworkResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NetworkResources: (_) => de_NetworkResourceList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetNetworkRoutesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetworkSegmentEdge: _json,
        NetworkRoutes: _json,
        RouteTableArn: __expectString,
        RouteTableTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RouteTableType: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetNetworkTelemetryCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NetworkTelemetry: (_) => de_NetworkTelemetryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        PolicyDocument: (_) => new __LazyJsonString(_),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetRouteAnalysisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RouteAnalysis: (_) => de_RouteAnalysis(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSitesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Sites: (_) => de_SiteList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetSiteToSiteVpnAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        SiteToSiteVpnAttachment: (_) => de_SiteToSiteVpnAttachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTransitGatewayConnectPeerAssociationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        TransitGatewayConnectPeerAssociations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTransitGatewayPeeringCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TransitGatewayPeering: (_) => de_TransitGatewayPeering(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTransitGatewayRegistrationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        TransitGatewayRegistrations: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetTransitGatewayRouteTableAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TransitGatewayRouteTableAttachment: (_) => de_TransitGatewayRouteTableAttachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        VpcAttachment: (_) => de_VpcAttachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListAttachmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attachments: (_) => de_AttachmentList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListConnectPeersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ConnectPeers: (_) => de_ConnectPeerSummaryList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCoreNetworkPolicyVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetworkPolicyVersions: (_) => de_CoreNetworkPolicyVersionList(_, context),
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCoreNetworksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetworks: _json,
        NextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListOrganizationServiceAccessStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        OrganizationStatus: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPeeringsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: __expectString,
        Peerings: (_) => de_PeeringList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TagList: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutCoreNetworkPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetworkPolicy: (_) => de_CoreNetworkPolicy(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_RegisterTransitGatewayCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        TransitGatewayRegistration: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RejectAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Attachment: (_) => de_Attachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_RestoreCoreNetworkPolicyVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetworkPolicy: (_) => de_CoreNetworkPolicy(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartOrganizationServiceAccessUpdateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        OrganizationStatus: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_StartRouteAnalysisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        RouteAnalysis: (_) => de_RouteAnalysis(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateConnectionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Connection: (_) => de_Connection(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateCoreNetworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        CoreNetwork: (_) => de_CoreNetwork(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Device: (_) => de_Device(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateGlobalNetworkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        GlobalNetwork: (_) => de_GlobalNetwork(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateLinkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Link: (_) => de_Link(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateNetworkResourceMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Metadata: _json,
        ResourceArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateSiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Site: (_) => de_Site(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        VpcAttachment: (_) => de_VpcAttachment(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.networkmanager#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.networkmanager#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.networkmanager#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.networkmanager#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.networkmanager#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.networkmanager#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.networkmanager#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "CoreNetworkPolicyException":
        case "com.amazonaws.networkmanager#CoreNetworkPolicyException":
            throw await de_CoreNetworkPolicyExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_CoreNetworkPolicyExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Errors: _json,
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new CoreNetworkPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Context: _json,
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        LimitCode: __expectString,
        Message: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
        ServiceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_RAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Fields: _json,
        Message: __expectString,
        Reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_Attachment = (output, context) => {
    return take(output, {
        AttachmentId: __expectString,
        AttachmentPolicyRuleNumber: __expectInt32,
        AttachmentType: __expectString,
        CoreNetworkArn: __expectString,
        CoreNetworkId: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EdgeLocation: __expectString,
        OwnerAccountId: __expectString,
        ProposedSegmentChange: _json,
        ResourceArn: __expectString,
        SegmentName: __expectString,
        State: __expectString,
        Tags: _json,
        UpdatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_AttachmentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Attachment(entry, context);
    });
    return retVal;
};
const de_ConnectAttachment = (output, context) => {
    return take(output, {
        Attachment: (_) => de_Attachment(_, context),
        Options: _json,
        TransportAttachmentId: __expectString,
    });
};
const de_Connection = (output, context) => {
    return take(output, {
        ConnectedDeviceId: __expectString,
        ConnectedLinkId: __expectString,
        ConnectionArn: __expectString,
        ConnectionId: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DeviceId: __expectString,
        GlobalNetworkId: __expectString,
        LinkId: __expectString,
        State: __expectString,
        Tags: _json,
    });
};
const de_ConnectionHealth = (output, context) => {
    return take(output, {
        Status: __expectString,
        Timestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Type: __expectString,
    });
};
const de_ConnectionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Connection(entry, context);
    });
    return retVal;
};
const de_ConnectPeer = (output, context) => {
    return take(output, {
        Configuration: _json,
        ConnectAttachmentId: __expectString,
        ConnectPeerId: __expectString,
        CoreNetworkId: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EdgeLocation: __expectString,
        State: __expectString,
        SubnetArn: __expectString,
        Tags: _json,
    });
};
const de_ConnectPeerSummary = (output, context) => {
    return take(output, {
        ConnectAttachmentId: __expectString,
        ConnectPeerId: __expectString,
        ConnectPeerState: __expectString,
        CoreNetworkId: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EdgeLocation: __expectString,
        SubnetArn: __expectString,
        Tags: _json,
    });
};
const de_ConnectPeerSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConnectPeerSummary(entry, context);
    });
    return retVal;
};
const de_CoreNetwork = (output, context) => {
    return take(output, {
        CoreNetworkArn: __expectString,
        CoreNetworkId: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        Edges: _json,
        GlobalNetworkId: __expectString,
        Segments: _json,
        State: __expectString,
        Tags: _json,
    });
};
const de_CoreNetworkChangeEvent = (output, context) => {
    return take(output, {
        Action: __expectString,
        EventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IdentifierPath: __expectString,
        Status: __expectString,
        Type: __expectString,
        Values: _json,
    });
};
const de_CoreNetworkChangeEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CoreNetworkChangeEvent(entry, context);
    });
    return retVal;
};
const de_CoreNetworkPolicy = (output, context) => {
    return take(output, {
        Alias: __expectString,
        ChangeSetState: __expectString,
        CoreNetworkId: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        PolicyDocument: (_) => new __LazyJsonString(_),
        PolicyErrors: _json,
        PolicyVersionId: __expectInt32,
    });
};
const de_CoreNetworkPolicyVersion = (output, context) => {
    return take(output, {
        Alias: __expectString,
        ChangeSetState: __expectString,
        CoreNetworkId: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        PolicyVersionId: __expectInt32,
    });
};
const de_CoreNetworkPolicyVersionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CoreNetworkPolicyVersion(entry, context);
    });
    return retVal;
};
const de_Device = (output, context) => {
    return take(output, {
        AWSLocation: _json,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        DeviceArn: __expectString,
        DeviceId: __expectString,
        GlobalNetworkId: __expectString,
        Location: _json,
        Model: __expectString,
        SerialNumber: __expectString,
        SiteId: __expectString,
        State: __expectString,
        Tags: _json,
        Type: __expectString,
        Vendor: __expectString,
    });
};
const de_DeviceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Device(entry, context);
    });
    return retVal;
};
const de_GlobalNetwork = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        GlobalNetworkArn: __expectString,
        GlobalNetworkId: __expectString,
        State: __expectString,
        Tags: _json,
    });
};
const de_GlobalNetworkList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GlobalNetwork(entry, context);
    });
    return retVal;
};
const de_Link = (output, context) => {
    return take(output, {
        Bandwidth: _json,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        GlobalNetworkId: __expectString,
        LinkArn: __expectString,
        LinkId: __expectString,
        Provider: __expectString,
        SiteId: __expectString,
        State: __expectString,
        Tags: _json,
        Type: __expectString,
    });
};
const de_LinkList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Link(entry, context);
    });
    return retVal;
};
const de_NetworkResource = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        AwsRegion: __expectString,
        CoreNetworkId: __expectString,
        Definition: __expectString,
        DefinitionTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Metadata: _json,
        RegisteredGatewayArn: __expectString,
        ResourceArn: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
        Tags: _json,
    });
};
const de_NetworkResourceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkResource(entry, context);
    });
    return retVal;
};
const de_NetworkTelemetry = (output, context) => {
    return take(output, {
        AccountId: __expectString,
        Address: __expectString,
        AwsRegion: __expectString,
        CoreNetworkId: __expectString,
        Health: (_) => de_ConnectionHealth(_, context),
        RegisteredGatewayArn: __expectString,
        ResourceArn: __expectString,
        ResourceId: __expectString,
        ResourceType: __expectString,
    });
};
const de_NetworkTelemetryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkTelemetry(entry, context);
    });
    return retVal;
};
const de_Peering = (output, context) => {
    return take(output, {
        CoreNetworkArn: __expectString,
        CoreNetworkId: __expectString,
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EdgeLocation: __expectString,
        OwnerAccountId: __expectString,
        PeeringId: __expectString,
        PeeringType: __expectString,
        ResourceArn: __expectString,
        State: __expectString,
        Tags: _json,
    });
};
const de_PeeringList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Peering(entry, context);
    });
    return retVal;
};
const de_RouteAnalysis = (output, context) => {
    return take(output, {
        Destination: _json,
        ForwardPath: _json,
        GlobalNetworkId: __expectString,
        IncludeReturnPath: __expectBoolean,
        OwnerAccountId: __expectString,
        ReturnPath: _json,
        RouteAnalysisId: __expectString,
        Source: _json,
        StartTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        UseMiddleboxes: __expectBoolean,
    });
};
const de_Site = (output, context) => {
    return take(output, {
        CreatedAt: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Description: __expectString,
        GlobalNetworkId: __expectString,
        Location: _json,
        SiteArn: __expectString,
        SiteId: __expectString,
        State: __expectString,
        Tags: _json,
    });
};
const de_SiteList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Site(entry, context);
    });
    return retVal;
};
const de_SiteToSiteVpnAttachment = (output, context) => {
    return take(output, {
        Attachment: (_) => de_Attachment(_, context),
        VpnConnectionArn: __expectString,
    });
};
const de_TransitGatewayPeering = (output, context) => {
    return take(output, {
        Peering: (_) => de_Peering(_, context),
        TransitGatewayArn: __expectString,
        TransitGatewayPeeringAttachmentId: __expectString,
    });
};
const de_TransitGatewayRouteTableAttachment = (output, context) => {
    return take(output, {
        Attachment: (_) => de_Attachment(_, context),
        PeeringId: __expectString,
        TransitGatewayRouteTableArn: __expectString,
    });
};
const de_VpcAttachment = (output, context) => {
    return take(output, {
        Attachment: (_) => de_Attachment(_, context),
        Options: _json,
        SubnetArns: _json,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const _A = "Alias";
const _AI = "AccountId";
const _AR = "AwsRegion";
const _AT = "AttachmentType";
const _CAI = "ConnectAttachmentId";
const _CGA = "CustomerGatewayArns";
const _CI = "ConnectionIds";
const _CNI = "CoreNetworkId";
const _CPI = "ConnectPeerIds";
const _DI = "DeviceId";
const _DIe = "DeviceIds";
const _EL = "EdgeLocation";
const _GNI = "GlobalNetworkIds";
const _LI = "LinkId";
const _LIi = "LinkIds";
const _MR = "MaxResults";
const _NT = "NextToken";
const _P = "Provider";
const _PT = "PeeringType";
const _PVI = "PolicyVersionId";
const _RA = "ResourceArn";
const _RAS = "RetryAfterSeconds";
const _RGA = "RegisteredGatewayArn";
const _RT = "ResourceType";
const _S = "State";
const _SI = "SiteId";
const _SIi = "SiteIds";
const _T = "Type";
const _TGA = "TransitGatewayArns";
const _TGCPA = "TransitGatewayConnectPeerArns";
const _TK = "TagKeys";
const _a = "alias";
const _aI = "accountId";
const _aR = "awsRegion";
const _aT = "attachmentType";
const _cAI = "connectAttachmentId";
const _cGA = "customerGatewayArns";
const _cI = "connectionIds";
const _cNI = "coreNetworkId";
const _cPI = "connectPeerIds";
const _dI = "deviceId";
const _dIe = "deviceIds";
const _eL = "edgeLocation";
const _gNI = "globalNetworkIds";
const _lI = "linkId";
const _lIi = "linkIds";
const _mR = "maxResults";
const _nT = "nextToken";
const _p = "provider";
const _pT = "peeringType";
const _pVI = "policyVersionId";
const _rA = "resourceArn";
const _rGA = "registeredGatewayArn";
const _rT = "resourceType";
const _ra = "retry-after";
const _s = "state";
const _sI = "siteId";
const _sIi = "siteIds";
const _t = "type";
const _tGA = "transitGatewayArns";
const _tGCPA = "transitGatewayConnectPeerArns";
const _tK = "tagKeys";
