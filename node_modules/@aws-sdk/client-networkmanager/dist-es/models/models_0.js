import { SENSITIVE_STRING, } from "@smithy/smithy-client";
import { NetworkManagerServiceException as __BaseException } from "./NetworkManagerServiceException";
export const AttachmentType = {
    CONNECT: "CONNECT",
    SITE_TO_SITE_VPN: "SITE_TO_SITE_VPN",
    TRANSIT_GATEWAY_ROUTE_TABLE: "TRANSIT_GATEWAY_ROUTE_TABLE",
    VPC: "VPC",
};
export const AttachmentState = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    PENDING_ATTACHMENT_ACCEPTANCE: "PENDING_ATTACHMENT_ACCEPTANCE",
    PENDING_NETWORK_UPDATE: "PENDING_NETWORK_UPDATE",
    PENDING_TAG_ACCEPTANCE: "PENDING_TAG_ACCEPTANCE",
    REJECTED: "REJECTED",
    UPDATING: "UPDATING",
};
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
        this.Context = opts.Context;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
        this.RetryAfterSeconds = opts.RetryAfterSeconds;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "CannotParse",
    FIELD_VALIDATION_FAILED: "FieldValidationFailed",
    OTHER: "Other",
    UNKNOWN_OPERATION: "UnknownOperation",
};
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
        this.Reason = opts.Reason;
        this.Fields = opts.Fields;
    }
}
export const ConnectPeerAssociationState = {
    available: "AVAILABLE",
    deleted: "DELETED",
    deleting: "DELETING",
    pending: "PENDING",
};
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
        this.ResourceId = opts.ResourceId;
        this.ResourceType = opts.ResourceType;
        this.LimitCode = opts.LimitCode;
        this.ServiceCode = opts.ServiceCode;
    }
}
export const CustomerGatewayAssociationState = {
    available: "AVAILABLE",
    deleted: "DELETED",
    deleting: "DELETING",
    pending: "PENDING",
};
export const LinkAssociationState = {
    available: "AVAILABLE",
    deleted: "DELETED",
    deleting: "DELETING",
    pending: "PENDING",
};
export const TransitGatewayConnectPeerAssociationState = {
    available: "AVAILABLE",
    deleted: "DELETED",
    deleting: "DELETING",
    pending: "PENDING",
};
export const ChangeAction = {
    ADD: "ADD",
    MODIFY: "MODIFY",
    REMOVE: "REMOVE",
};
export const ChangeSetState = {
    EXECUTING: "EXECUTING",
    EXECUTION_SUCCEEDED: "EXECUTION_SUCCEEDED",
    FAILED_GENERATION: "FAILED_GENERATION",
    OUT_OF_DATE: "OUT_OF_DATE",
    PENDING_GENERATION: "PENDING_GENERATION",
    READY_TO_EXECUTE: "READY_TO_EXECUTE",
};
export const ChangeStatus = {
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_STARTED: "NOT_STARTED",
};
export const ChangeType = {
    ATTACHMENT_MAPPING: "ATTACHMENT_MAPPING",
    ATTACHMENT_POLICIES_CONFIGURATION: "ATTACHMENT_POLICIES_CONFIGURATION",
    ATTACHMENT_ROUTE_PROPAGATION: "ATTACHMENT_ROUTE_PROPAGATION",
    ATTACHMENT_ROUTE_STATIC: "ATTACHMENT_ROUTE_STATIC",
    CORE_NETWORK_CONFIGURATION: "CORE_NETWORK_CONFIGURATION",
    CORE_NETWORK_EDGE: "CORE_NETWORK_EDGE",
    CORE_NETWORK_SEGMENT: "CORE_NETWORK_SEGMENT",
    SEGMENTS_CONFIGURATION: "SEGMENTS_CONFIGURATION",
    SEGMENT_ACTIONS_CONFIGURATION: "SEGMENT_ACTIONS_CONFIGURATION",
};
export const TunnelProtocol = {
    GRE: "GRE",
    NO_ENCAP: "NO_ENCAP",
};
export const ConnectionState = {
    available: "AVAILABLE",
    deleting: "DELETING",
    pending: "PENDING",
    updating: "UPDATING",
};
export const ConnectionStatus = {
    DOWN: "DOWN",
    UP: "UP",
};
export const ConnectionType = {
    BGP: "BGP",
    IPSEC: "IPSEC",
};
export const ConnectPeerState = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
};
export const CoreNetworkState = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    UPDATING: "UPDATING",
};
export const CoreNetworkPolicyAlias = {
    LATEST: "LATEST",
    LIVE: "LIVE",
};
export class CoreNetworkPolicyException extends __BaseException {
    constructor(opts) {
        super({
            name: "CoreNetworkPolicyException",
            $fault: "client",
            ...opts,
        });
        this.name = "CoreNetworkPolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CoreNetworkPolicyException.prototype);
        this.Message = opts.Message;
        this.Errors = opts.Errors;
    }
}
export const DeviceState = {
    available: "AVAILABLE",
    deleting: "DELETING",
    pending: "PENDING",
    updating: "UPDATING",
};
export const GlobalNetworkState = {
    available: "AVAILABLE",
    deleting: "DELETING",
    pending: "PENDING",
    updating: "UPDATING",
};
export const LinkState = {
    available: "AVAILABLE",
    deleting: "DELETING",
    pending: "PENDING",
    updating: "UPDATING",
};
export const SiteState = {
    available: "AVAILABLE",
    deleting: "DELETING",
    pending: "PENDING",
    updating: "UPDATING",
};
export const PeeringType = {
    TRANSIT_GATEWAY: "TRANSIT_GATEWAY",
};
export const PeeringState = {
    AVAILABLE: "AVAILABLE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
};
export const TransitGatewayRegistrationState = {
    available: "AVAILABLE",
    deleted: "DELETED",
    deleting: "DELETING",
    failed: "FAILED",
    pending: "PENDING",
};
export const RouteState = {
    ACTIVE: "ACTIVE",
    BLACKHOLE: "BLACKHOLE",
};
export const RouteType = {
    PROPAGATED: "PROPAGATED",
    STATIC: "STATIC",
};
export const RouteTableType = {
    CORE_NETWORK_SEGMENT: "CORE_NETWORK_SEGMENT",
    TRANSIT_GATEWAY_ROUTE_TABLE: "TRANSIT_GATEWAY_ROUTE_TABLE",
};
export const RouteAnalysisCompletionReasonCode = {
    BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND: "BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND",
    CYCLIC_PATH_DETECTED: "CYCLIC_PATH_DETECTED",
    INACTIVE_ROUTE_FOR_DESTINATION_FOUND: "INACTIVE_ROUTE_FOR_DESTINATION_FOUND",
    MAX_HOPS_EXCEEDED: "MAX_HOPS_EXCEEDED",
    NO_DESTINATION_ARN_PROVIDED: "NO_DESTINATION_ARN_PROVIDED",
    POSSIBLE_MIDDLEBOX: "POSSIBLE_MIDDLEBOX",
    ROUTE_NOT_FOUND: "ROUTE_NOT_FOUND",
    TRANSIT_GATEWAY_ATTACHMENT: "TRANSIT_GATEWAY_ATTACHMENT_ATTACH_ARN_NO_MATCH",
    TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND: "TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND",
    TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY: "TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY",
    TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND: "TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND",
};
export const RouteAnalysisCompletionResultCode = {
    CONNECTED: "CONNECTED",
    NOT_CONNECTED: "NOT_CONNECTED",
};
export const RouteAnalysisStatus = {
    completed: "COMPLETED",
    failed: "FAILED",
    running: "RUNNING",
};
export const LocationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Location && { Location: SENSITIVE_STRING }),
});
export const DeviceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Location && { Location: SENSITIVE_STRING }),
});
export const CreateDeviceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Device && { Device: DeviceFilterSensitiveLog(obj.Device) }),
});
export const CreateSiteRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Location && { Location: SENSITIVE_STRING }),
});
export const SiteFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Location && { Location: SENSITIVE_STRING }),
});
export const CreateSiteResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Site && { Site: SiteFilterSensitiveLog(obj.Site) }),
});
export const DeleteDeviceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Device && { Device: DeviceFilterSensitiveLog(obj.Device) }),
});
export const DeleteSiteResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Site && { Site: SiteFilterSensitiveLog(obj.Site) }),
});
export const GetDevicesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Devices && { Devices: obj.Devices.map((item) => DeviceFilterSensitiveLog(item)) }),
});
export const GetSitesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Sites && { Sites: obj.Sites.map((item) => SiteFilterSensitiveLog(item)) }),
});
export const UpdateDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Location && { Location: SENSITIVE_STRING }),
});
export const UpdateDeviceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Device && { Device: DeviceFilterSensitiveLog(obj.Device) }),
});
export const UpdateSiteRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Location && { Location: SENSITIVE_STRING }),
});
export const UpdateSiteResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Site && { Site: SiteFilterSensitiveLog(obj.Site) }),
});
