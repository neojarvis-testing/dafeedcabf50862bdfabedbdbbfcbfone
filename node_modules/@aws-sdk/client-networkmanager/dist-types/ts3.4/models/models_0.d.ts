import {
  ExceptionOptionType as __ExceptionOptionType,
  LazyJsonString as __LazyJsonString,
} from "@smithy/smithy-client";
import { NetworkManagerServiceException as __BaseException } from "./NetworkManagerServiceException";
export interface AcceptAttachmentRequest {
  AttachmentId: string | undefined;
}
export declare const AttachmentType: {
  readonly CONNECT: "CONNECT";
  readonly SITE_TO_SITE_VPN: "SITE_TO_SITE_VPN";
  readonly TRANSIT_GATEWAY_ROUTE_TABLE: "TRANSIT_GATEWAY_ROUTE_TABLE";
  readonly VPC: "VPC";
};
export type AttachmentType =
  (typeof AttachmentType)[keyof typeof AttachmentType];
export interface Tag {
  Key?: string;
  Value?: string;
}
export interface ProposedSegmentChange {
  Tags?: Tag[];
  AttachmentPolicyRuleNumber?: number;
  SegmentName?: string;
}
export declare const AttachmentState: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly PENDING_ATTACHMENT_ACCEPTANCE: "PENDING_ATTACHMENT_ACCEPTANCE";
  readonly PENDING_NETWORK_UPDATE: "PENDING_NETWORK_UPDATE";
  readonly PENDING_TAG_ACCEPTANCE: "PENDING_TAG_ACCEPTANCE";
  readonly REJECTED: "REJECTED";
  readonly UPDATING: "UPDATING";
};
export type AttachmentState =
  (typeof AttachmentState)[keyof typeof AttachmentState];
export interface Attachment {
  CoreNetworkId?: string;
  CoreNetworkArn?: string;
  AttachmentId?: string;
  OwnerAccountId?: string;
  AttachmentType?: AttachmentType;
  State?: AttachmentState;
  EdgeLocation?: string;
  ResourceArn?: string;
  AttachmentPolicyRuleNumber?: number;
  SegmentName?: string;
  Tags?: Tag[];
  ProposedSegmentChange?: ProposedSegmentChange;
  CreatedAt?: Date;
  UpdatedAt?: Date;
}
export interface AcceptAttachmentResponse {
  Attachment?: Attachment;
}
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message: string | undefined;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  Message: string | undefined;
  RetryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId: string | undefined;
  ResourceType: string | undefined;
  Context?: Record<string, string>;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message: string | undefined;
  RetryAfterSeconds?: number;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  Name: string | undefined;
  Message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "CannotParse";
  readonly FIELD_VALIDATION_FAILED: "FieldValidationFailed";
  readonly OTHER: "Other";
  readonly UNKNOWN_OPERATION: "UnknownOperation";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  Message: string | undefined;
  Reason?: ValidationExceptionReason;
  Fields?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface AccountStatus {
  AccountId?: string;
  SLRDeploymentStatus?: string;
}
export interface AssociateConnectPeerRequest {
  GlobalNetworkId: string | undefined;
  ConnectPeerId: string | undefined;
  DeviceId: string | undefined;
  LinkId?: string;
}
export declare const ConnectPeerAssociationState: {
  readonly available: "AVAILABLE";
  readonly deleted: "DELETED";
  readonly deleting: "DELETING";
  readonly pending: "PENDING";
};
export type ConnectPeerAssociationState =
  (typeof ConnectPeerAssociationState)[keyof typeof ConnectPeerAssociationState];
export interface ConnectPeerAssociation {
  ConnectPeerId?: string;
  GlobalNetworkId?: string;
  DeviceId?: string;
  LinkId?: string;
  State?: ConnectPeerAssociationState;
}
export interface AssociateConnectPeerResponse {
  ConnectPeerAssociation?: ConnectPeerAssociation;
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  Message: string | undefined;
  ResourceId?: string;
  ResourceType?: string;
  LimitCode: string | undefined;
  ServiceCode: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export interface AssociateCustomerGatewayRequest {
  CustomerGatewayArn: string | undefined;
  GlobalNetworkId: string | undefined;
  DeviceId: string | undefined;
  LinkId?: string;
}
export declare const CustomerGatewayAssociationState: {
  readonly available: "AVAILABLE";
  readonly deleted: "DELETED";
  readonly deleting: "DELETING";
  readonly pending: "PENDING";
};
export type CustomerGatewayAssociationState =
  (typeof CustomerGatewayAssociationState)[keyof typeof CustomerGatewayAssociationState];
export interface CustomerGatewayAssociation {
  CustomerGatewayArn?: string;
  GlobalNetworkId?: string;
  DeviceId?: string;
  LinkId?: string;
  State?: CustomerGatewayAssociationState;
}
export interface AssociateCustomerGatewayResponse {
  CustomerGatewayAssociation?: CustomerGatewayAssociation;
}
export interface AssociateLinkRequest {
  GlobalNetworkId: string | undefined;
  DeviceId: string | undefined;
  LinkId: string | undefined;
}
export declare const LinkAssociationState: {
  readonly available: "AVAILABLE";
  readonly deleted: "DELETED";
  readonly deleting: "DELETING";
  readonly pending: "PENDING";
};
export type LinkAssociationState =
  (typeof LinkAssociationState)[keyof typeof LinkAssociationState];
export interface LinkAssociation {
  GlobalNetworkId?: string;
  DeviceId?: string;
  LinkId?: string;
  LinkAssociationState?: LinkAssociationState;
}
export interface AssociateLinkResponse {
  LinkAssociation?: LinkAssociation;
}
export interface AssociateTransitGatewayConnectPeerRequest {
  GlobalNetworkId: string | undefined;
  TransitGatewayConnectPeerArn: string | undefined;
  DeviceId: string | undefined;
  LinkId?: string;
}
export declare const TransitGatewayConnectPeerAssociationState: {
  readonly available: "AVAILABLE";
  readonly deleted: "DELETED";
  readonly deleting: "DELETING";
  readonly pending: "PENDING";
};
export type TransitGatewayConnectPeerAssociationState =
  (typeof TransitGatewayConnectPeerAssociationState)[keyof typeof TransitGatewayConnectPeerAssociationState];
export interface TransitGatewayConnectPeerAssociation {
  TransitGatewayConnectPeerArn?: string;
  GlobalNetworkId?: string;
  DeviceId?: string;
  LinkId?: string;
  State?: TransitGatewayConnectPeerAssociationState;
}
export interface AssociateTransitGatewayConnectPeerResponse {
  TransitGatewayConnectPeerAssociation?: TransitGatewayConnectPeerAssociation;
}
export interface AWSLocation {
  Zone?: string;
  SubnetArn?: string;
}
export interface Bandwidth {
  UploadSpeed?: number;
  DownloadSpeed?: number;
}
export interface BgpOptions {
  PeerAsn?: number;
}
export declare const ChangeAction: {
  readonly ADD: "ADD";
  readonly MODIFY: "MODIFY";
  readonly REMOVE: "REMOVE";
};
export type ChangeAction = (typeof ChangeAction)[keyof typeof ChangeAction];
export declare const ChangeSetState: {
  readonly EXECUTING: "EXECUTING";
  readonly EXECUTION_SUCCEEDED: "EXECUTION_SUCCEEDED";
  readonly FAILED_GENERATION: "FAILED_GENERATION";
  readonly OUT_OF_DATE: "OUT_OF_DATE";
  readonly PENDING_GENERATION: "PENDING_GENERATION";
  readonly READY_TO_EXECUTE: "READY_TO_EXECUTE";
};
export type ChangeSetState =
  (typeof ChangeSetState)[keyof typeof ChangeSetState];
export declare const ChangeStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly NOT_STARTED: "NOT_STARTED";
};
export type ChangeStatus = (typeof ChangeStatus)[keyof typeof ChangeStatus];
export declare const ChangeType: {
  readonly ATTACHMENT_MAPPING: "ATTACHMENT_MAPPING";
  readonly ATTACHMENT_POLICIES_CONFIGURATION: "ATTACHMENT_POLICIES_CONFIGURATION";
  readonly ATTACHMENT_ROUTE_PROPAGATION: "ATTACHMENT_ROUTE_PROPAGATION";
  readonly ATTACHMENT_ROUTE_STATIC: "ATTACHMENT_ROUTE_STATIC";
  readonly CORE_NETWORK_CONFIGURATION: "CORE_NETWORK_CONFIGURATION";
  readonly CORE_NETWORK_EDGE: "CORE_NETWORK_EDGE";
  readonly CORE_NETWORK_SEGMENT: "CORE_NETWORK_SEGMENT";
  readonly SEGMENTS_CONFIGURATION: "SEGMENTS_CONFIGURATION";
  readonly SEGMENT_ACTIONS_CONFIGURATION: "SEGMENT_ACTIONS_CONFIGURATION";
};
export type ChangeType = (typeof ChangeType)[keyof typeof ChangeType];
export declare const TunnelProtocol: {
  readonly GRE: "GRE";
  readonly NO_ENCAP: "NO_ENCAP";
};
export type TunnelProtocol =
  (typeof TunnelProtocol)[keyof typeof TunnelProtocol];
export interface ConnectAttachmentOptions {
  Protocol?: TunnelProtocol;
}
export interface ConnectAttachment {
  Attachment?: Attachment;
  TransportAttachmentId?: string;
  Options?: ConnectAttachmentOptions;
}
export declare const ConnectionState: {
  readonly available: "AVAILABLE";
  readonly deleting: "DELETING";
  readonly pending: "PENDING";
  readonly updating: "UPDATING";
};
export type ConnectionState =
  (typeof ConnectionState)[keyof typeof ConnectionState];
export interface Connection {
  ConnectionId?: string;
  ConnectionArn?: string;
  GlobalNetworkId?: string;
  DeviceId?: string;
  ConnectedDeviceId?: string;
  LinkId?: string;
  ConnectedLinkId?: string;
  Description?: string;
  CreatedAt?: Date;
  State?: ConnectionState;
  Tags?: Tag[];
}
export declare const ConnectionStatus: {
  readonly DOWN: "DOWN";
  readonly UP: "UP";
};
export type ConnectionStatus =
  (typeof ConnectionStatus)[keyof typeof ConnectionStatus];
export declare const ConnectionType: {
  readonly BGP: "BGP";
  readonly IPSEC: "IPSEC";
};
export type ConnectionType =
  (typeof ConnectionType)[keyof typeof ConnectionType];
export interface ConnectionHealth {
  Type?: ConnectionType;
  Status?: ConnectionStatus;
  Timestamp?: Date;
}
export interface ConnectPeerBgpConfiguration {
  CoreNetworkAsn?: number;
  PeerAsn?: number;
  CoreNetworkAddress?: string;
  PeerAddress?: string;
}
export interface ConnectPeerConfiguration {
  CoreNetworkAddress?: string;
  PeerAddress?: string;
  InsideCidrBlocks?: string[];
  Protocol?: TunnelProtocol;
  BgpConfigurations?: ConnectPeerBgpConfiguration[];
}
export declare const ConnectPeerState: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
};
export type ConnectPeerState =
  (typeof ConnectPeerState)[keyof typeof ConnectPeerState];
export interface ConnectPeer {
  CoreNetworkId?: string;
  ConnectAttachmentId?: string;
  ConnectPeerId?: string;
  EdgeLocation?: string;
  State?: ConnectPeerState;
  CreatedAt?: Date;
  Configuration?: ConnectPeerConfiguration;
  Tags?: Tag[];
  SubnetArn?: string;
}
export interface ConnectPeerSummary {
  CoreNetworkId?: string;
  ConnectAttachmentId?: string;
  ConnectPeerId?: string;
  EdgeLocation?: string;
  ConnectPeerState?: ConnectPeerState;
  CreatedAt?: Date;
  Tags?: Tag[];
  SubnetArn?: string;
}
export interface CoreNetworkEdge {
  EdgeLocation?: string;
  Asn?: number;
  InsideCidrBlocks?: string[];
}
export interface CoreNetworkSegment {
  Name?: string;
  EdgeLocations?: string[];
  SharedSegments?: string[];
}
export declare const CoreNetworkState: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly UPDATING: "UPDATING";
};
export type CoreNetworkState =
  (typeof CoreNetworkState)[keyof typeof CoreNetworkState];
export interface CoreNetwork {
  GlobalNetworkId?: string;
  CoreNetworkId?: string;
  CoreNetworkArn?: string;
  Description?: string;
  CreatedAt?: Date;
  State?: CoreNetworkState;
  Segments?: CoreNetworkSegment[];
  Edges?: CoreNetworkEdge[];
  Tags?: Tag[];
}
export interface CoreNetworkChangeValues {
  SegmentName?: string;
  EdgeLocations?: string[];
  Asn?: number;
  Cidr?: string;
  DestinationIdentifier?: string;
  InsideCidrBlocks?: string[];
  SharedSegments?: string[];
}
export interface CoreNetworkChange {
  Type?: ChangeType;
  Action?: ChangeAction;
  Identifier?: string;
  PreviousValues?: CoreNetworkChangeValues;
  NewValues?: CoreNetworkChangeValues;
  IdentifierPath?: string;
}
export interface CoreNetworkChangeEventValues {
  EdgeLocation?: string;
  SegmentName?: string;
  AttachmentId?: string;
  Cidr?: string;
}
export interface CoreNetworkChangeEvent {
  Type?: ChangeType;
  Action?: ChangeAction;
  IdentifierPath?: string;
  EventTime?: Date;
  Status?: ChangeStatus;
  Values?: CoreNetworkChangeEventValues;
}
export declare const CoreNetworkPolicyAlias: {
  readonly LATEST: "LATEST";
  readonly LIVE: "LIVE";
};
export type CoreNetworkPolicyAlias =
  (typeof CoreNetworkPolicyAlias)[keyof typeof CoreNetworkPolicyAlias];
export interface CoreNetworkPolicyError {
  ErrorCode: string | undefined;
  Message: string | undefined;
  Path?: string;
}
export interface CoreNetworkPolicy {
  CoreNetworkId?: string;
  PolicyVersionId?: number;
  Alias?: CoreNetworkPolicyAlias;
  Description?: string;
  CreatedAt?: Date;
  ChangeSetState?: ChangeSetState;
  PolicyErrors?: CoreNetworkPolicyError[];
  PolicyDocument?: __LazyJsonString | string;
}
export declare class CoreNetworkPolicyException extends __BaseException {
  readonly name: "CoreNetworkPolicyException";
  readonly $fault: "client";
  Message: string | undefined;
  Errors?: CoreNetworkPolicyError[];
  constructor(
    opts: __ExceptionOptionType<CoreNetworkPolicyException, __BaseException>
  );
}
export interface CoreNetworkPolicyVersion {
  CoreNetworkId?: string;
  PolicyVersionId?: number;
  Alias?: CoreNetworkPolicyAlias;
  Description?: string;
  CreatedAt?: Date;
  ChangeSetState?: ChangeSetState;
}
export interface CoreNetworkSegmentEdgeIdentifier {
  CoreNetworkId?: string;
  SegmentName?: string;
  EdgeLocation?: string;
}
export interface CoreNetworkSummary {
  CoreNetworkId?: string;
  CoreNetworkArn?: string;
  GlobalNetworkId?: string;
  OwnerAccountId?: string;
  State?: CoreNetworkState;
  Description?: string;
  Tags?: Tag[];
}
export interface CreateConnectAttachmentRequest {
  CoreNetworkId: string | undefined;
  EdgeLocation: string | undefined;
  TransportAttachmentId: string | undefined;
  Options: ConnectAttachmentOptions | undefined;
  Tags?: Tag[];
  ClientToken?: string;
}
export interface CreateConnectAttachmentResponse {
  ConnectAttachment?: ConnectAttachment;
}
export interface CreateConnectionRequest {
  GlobalNetworkId: string | undefined;
  DeviceId: string | undefined;
  ConnectedDeviceId: string | undefined;
  LinkId?: string;
  ConnectedLinkId?: string;
  Description?: string;
  Tags?: Tag[];
}
export interface CreateConnectionResponse {
  Connection?: Connection;
}
export interface CreateConnectPeerRequest {
  ConnectAttachmentId: string | undefined;
  CoreNetworkAddress?: string;
  PeerAddress: string | undefined;
  BgpOptions?: BgpOptions;
  InsideCidrBlocks?: string[];
  Tags?: Tag[];
  ClientToken?: string;
  SubnetArn?: string;
}
export interface CreateConnectPeerResponse {
  ConnectPeer?: ConnectPeer;
}
export interface CreateCoreNetworkRequest {
  GlobalNetworkId: string | undefined;
  Description?: string;
  Tags?: Tag[];
  PolicyDocument?: string;
  ClientToken?: string;
}
export interface CreateCoreNetworkResponse {
  CoreNetwork?: CoreNetwork;
}
export interface Location {
  Address?: string;
  Latitude?: string;
  Longitude?: string;
}
export interface CreateDeviceRequest {
  GlobalNetworkId: string | undefined;
  AWSLocation?: AWSLocation;
  Description?: string;
  Type?: string;
  Vendor?: string;
  Model?: string;
  SerialNumber?: string;
  Location?: Location;
  SiteId?: string;
  Tags?: Tag[];
}
export declare const DeviceState: {
  readonly available: "AVAILABLE";
  readonly deleting: "DELETING";
  readonly pending: "PENDING";
  readonly updating: "UPDATING";
};
export type DeviceState = (typeof DeviceState)[keyof typeof DeviceState];
export interface Device {
  DeviceId?: string;
  DeviceArn?: string;
  GlobalNetworkId?: string;
  AWSLocation?: AWSLocation;
  Description?: string;
  Type?: string;
  Vendor?: string;
  Model?: string;
  SerialNumber?: string;
  Location?: Location;
  SiteId?: string;
  CreatedAt?: Date;
  State?: DeviceState;
  Tags?: Tag[];
}
export interface CreateDeviceResponse {
  Device?: Device;
}
export interface CreateGlobalNetworkRequest {
  Description?: string;
  Tags?: Tag[];
}
export declare const GlobalNetworkState: {
  readonly available: "AVAILABLE";
  readonly deleting: "DELETING";
  readonly pending: "PENDING";
  readonly updating: "UPDATING";
};
export type GlobalNetworkState =
  (typeof GlobalNetworkState)[keyof typeof GlobalNetworkState];
export interface GlobalNetwork {
  GlobalNetworkId?: string;
  GlobalNetworkArn?: string;
  Description?: string;
  CreatedAt?: Date;
  State?: GlobalNetworkState;
  Tags?: Tag[];
}
export interface CreateGlobalNetworkResponse {
  GlobalNetwork?: GlobalNetwork;
}
export interface CreateLinkRequest {
  GlobalNetworkId: string | undefined;
  Description?: string;
  Type?: string;
  Bandwidth: Bandwidth | undefined;
  Provider?: string;
  SiteId: string | undefined;
  Tags?: Tag[];
}
export declare const LinkState: {
  readonly available: "AVAILABLE";
  readonly deleting: "DELETING";
  readonly pending: "PENDING";
  readonly updating: "UPDATING";
};
export type LinkState = (typeof LinkState)[keyof typeof LinkState];
export interface Link {
  LinkId?: string;
  LinkArn?: string;
  GlobalNetworkId?: string;
  SiteId?: string;
  Description?: string;
  Type?: string;
  Bandwidth?: Bandwidth;
  Provider?: string;
  CreatedAt?: Date;
  State?: LinkState;
  Tags?: Tag[];
}
export interface CreateLinkResponse {
  Link?: Link;
}
export interface CreateSiteRequest {
  GlobalNetworkId: string | undefined;
  Description?: string;
  Location?: Location;
  Tags?: Tag[];
}
export declare const SiteState: {
  readonly available: "AVAILABLE";
  readonly deleting: "DELETING";
  readonly pending: "PENDING";
  readonly updating: "UPDATING";
};
export type SiteState = (typeof SiteState)[keyof typeof SiteState];
export interface Site {
  SiteId?: string;
  SiteArn?: string;
  GlobalNetworkId?: string;
  Description?: string;
  Location?: Location;
  CreatedAt?: Date;
  State?: SiteState;
  Tags?: Tag[];
}
export interface CreateSiteResponse {
  Site?: Site;
}
export interface CreateSiteToSiteVpnAttachmentRequest {
  CoreNetworkId: string | undefined;
  VpnConnectionArn: string | undefined;
  Tags?: Tag[];
  ClientToken?: string;
}
export interface SiteToSiteVpnAttachment {
  Attachment?: Attachment;
  VpnConnectionArn?: string;
}
export interface CreateSiteToSiteVpnAttachmentResponse {
  SiteToSiteVpnAttachment?: SiteToSiteVpnAttachment;
}
export interface CreateTransitGatewayPeeringRequest {
  CoreNetworkId: string | undefined;
  TransitGatewayArn: string | undefined;
  Tags?: Tag[];
  ClientToken?: string;
}
export declare const PeeringType: {
  readonly TRANSIT_GATEWAY: "TRANSIT_GATEWAY";
};
export type PeeringType = (typeof PeeringType)[keyof typeof PeeringType];
export declare const PeeringState: {
  readonly AVAILABLE: "AVAILABLE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
};
export type PeeringState = (typeof PeeringState)[keyof typeof PeeringState];
export interface Peering {
  CoreNetworkId?: string;
  CoreNetworkArn?: string;
  PeeringId?: string;
  OwnerAccountId?: string;
  PeeringType?: PeeringType;
  State?: PeeringState;
  EdgeLocation?: string;
  ResourceArn?: string;
  Tags?: Tag[];
  CreatedAt?: Date;
}
export interface TransitGatewayPeering {
  Peering?: Peering;
  TransitGatewayArn?: string;
  TransitGatewayPeeringAttachmentId?: string;
}
export interface CreateTransitGatewayPeeringResponse {
  TransitGatewayPeering?: TransitGatewayPeering;
}
export interface CreateTransitGatewayRouteTableAttachmentRequest {
  PeeringId: string | undefined;
  TransitGatewayRouteTableArn: string | undefined;
  Tags?: Tag[];
  ClientToken?: string;
}
export interface TransitGatewayRouteTableAttachment {
  Attachment?: Attachment;
  PeeringId?: string;
  TransitGatewayRouteTableArn?: string;
}
export interface CreateTransitGatewayRouteTableAttachmentResponse {
  TransitGatewayRouteTableAttachment?: TransitGatewayRouteTableAttachment;
}
export interface VpcOptions {
  Ipv6Support?: boolean;
  ApplianceModeSupport?: boolean;
}
export interface CreateVpcAttachmentRequest {
  CoreNetworkId: string | undefined;
  VpcArn: string | undefined;
  SubnetArns: string[] | undefined;
  Options?: VpcOptions;
  Tags?: Tag[];
  ClientToken?: string;
}
export interface VpcAttachment {
  Attachment?: Attachment;
  SubnetArns?: string[];
  Options?: VpcOptions;
}
export interface CreateVpcAttachmentResponse {
  VpcAttachment?: VpcAttachment;
}
export interface DeleteAttachmentRequest {
  AttachmentId: string | undefined;
}
export interface DeleteAttachmentResponse {
  Attachment?: Attachment;
}
export interface DeleteConnectionRequest {
  GlobalNetworkId: string | undefined;
  ConnectionId: string | undefined;
}
export interface DeleteConnectionResponse {
  Connection?: Connection;
}
export interface DeleteConnectPeerRequest {
  ConnectPeerId: string | undefined;
}
export interface DeleteConnectPeerResponse {
  ConnectPeer?: ConnectPeer;
}
export interface DeleteCoreNetworkRequest {
  CoreNetworkId: string | undefined;
}
export interface DeleteCoreNetworkResponse {
  CoreNetwork?: CoreNetwork;
}
export interface DeleteCoreNetworkPolicyVersionRequest {
  CoreNetworkId: string | undefined;
  PolicyVersionId: number | undefined;
}
export interface DeleteCoreNetworkPolicyVersionResponse {
  CoreNetworkPolicy?: CoreNetworkPolicy;
}
export interface DeleteDeviceRequest {
  GlobalNetworkId: string | undefined;
  DeviceId: string | undefined;
}
export interface DeleteDeviceResponse {
  Device?: Device;
}
export interface DeleteGlobalNetworkRequest {
  GlobalNetworkId: string | undefined;
}
export interface DeleteGlobalNetworkResponse {
  GlobalNetwork?: GlobalNetwork;
}
export interface DeleteLinkRequest {
  GlobalNetworkId: string | undefined;
  LinkId: string | undefined;
}
export interface DeleteLinkResponse {
  Link?: Link;
}
export interface DeletePeeringRequest {
  PeeringId: string | undefined;
}
export interface DeletePeeringResponse {
  Peering?: Peering;
}
export interface DeleteResourcePolicyRequest {
  ResourceArn: string | undefined;
}
export interface DeleteResourcePolicyResponse {}
export interface DeleteSiteRequest {
  GlobalNetworkId: string | undefined;
  SiteId: string | undefined;
}
export interface DeleteSiteResponse {
  Site?: Site;
}
export interface DeregisterTransitGatewayRequest {
  GlobalNetworkId: string | undefined;
  TransitGatewayArn: string | undefined;
}
export declare const TransitGatewayRegistrationState: {
  readonly available: "AVAILABLE";
  readonly deleted: "DELETED";
  readonly deleting: "DELETING";
  readonly failed: "FAILED";
  readonly pending: "PENDING";
};
export type TransitGatewayRegistrationState =
  (typeof TransitGatewayRegistrationState)[keyof typeof TransitGatewayRegistrationState];
export interface TransitGatewayRegistrationStateReason {
  Code?: TransitGatewayRegistrationState;
  Message?: string;
}
export interface TransitGatewayRegistration {
  GlobalNetworkId?: string;
  TransitGatewayArn?: string;
  State?: TransitGatewayRegistrationStateReason;
}
export interface DeregisterTransitGatewayResponse {
  TransitGatewayRegistration?: TransitGatewayRegistration;
}
export interface DescribeGlobalNetworksRequest {
  GlobalNetworkIds?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface DescribeGlobalNetworksResponse {
  GlobalNetworks?: GlobalNetwork[];
  NextToken?: string;
}
export interface DisassociateConnectPeerRequest {
  GlobalNetworkId: string | undefined;
  ConnectPeerId: string | undefined;
}
export interface DisassociateConnectPeerResponse {
  ConnectPeerAssociation?: ConnectPeerAssociation;
}
export interface DisassociateCustomerGatewayRequest {
  GlobalNetworkId: string | undefined;
  CustomerGatewayArn: string | undefined;
}
export interface DisassociateCustomerGatewayResponse {
  CustomerGatewayAssociation?: CustomerGatewayAssociation;
}
export interface DisassociateLinkRequest {
  GlobalNetworkId: string | undefined;
  DeviceId: string | undefined;
  LinkId: string | undefined;
}
export interface DisassociateLinkResponse {
  LinkAssociation?: LinkAssociation;
}
export interface DisassociateTransitGatewayConnectPeerRequest {
  GlobalNetworkId: string | undefined;
  TransitGatewayConnectPeerArn: string | undefined;
}
export interface DisassociateTransitGatewayConnectPeerResponse {
  TransitGatewayConnectPeerAssociation?: TransitGatewayConnectPeerAssociation;
}
export interface ExecuteCoreNetworkChangeSetRequest {
  CoreNetworkId: string | undefined;
  PolicyVersionId: number | undefined;
}
export interface ExecuteCoreNetworkChangeSetResponse {}
export interface GetConnectAttachmentRequest {
  AttachmentId: string | undefined;
}
export interface GetConnectAttachmentResponse {
  ConnectAttachment?: ConnectAttachment;
}
export interface GetConnectionsRequest {
  GlobalNetworkId: string | undefined;
  ConnectionIds?: string[];
  DeviceId?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface GetConnectionsResponse {
  Connections?: Connection[];
  NextToken?: string;
}
export interface GetConnectPeerRequest {
  ConnectPeerId: string | undefined;
}
export interface GetConnectPeerResponse {
  ConnectPeer?: ConnectPeer;
}
export interface GetConnectPeerAssociationsRequest {
  GlobalNetworkId: string | undefined;
  ConnectPeerIds?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface GetConnectPeerAssociationsResponse {
  ConnectPeerAssociations?: ConnectPeerAssociation[];
  NextToken?: string;
}
export interface GetCoreNetworkRequest {
  CoreNetworkId: string | undefined;
}
export interface GetCoreNetworkResponse {
  CoreNetwork?: CoreNetwork;
}
export interface GetCoreNetworkChangeEventsRequest {
  CoreNetworkId: string | undefined;
  PolicyVersionId: number | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface GetCoreNetworkChangeEventsResponse {
  CoreNetworkChangeEvents?: CoreNetworkChangeEvent[];
  NextToken?: string;
}
export interface GetCoreNetworkChangeSetRequest {
  CoreNetworkId: string | undefined;
  PolicyVersionId: number | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface GetCoreNetworkChangeSetResponse {
  CoreNetworkChanges?: CoreNetworkChange[];
  NextToken?: string;
}
export interface GetCoreNetworkPolicyRequest {
  CoreNetworkId: string | undefined;
  PolicyVersionId?: number;
  Alias?: CoreNetworkPolicyAlias;
}
export interface GetCoreNetworkPolicyResponse {
  CoreNetworkPolicy?: CoreNetworkPolicy;
}
export interface GetCustomerGatewayAssociationsRequest {
  GlobalNetworkId: string | undefined;
  CustomerGatewayArns?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface GetCustomerGatewayAssociationsResponse {
  CustomerGatewayAssociations?: CustomerGatewayAssociation[];
  NextToken?: string;
}
export interface GetDevicesRequest {
  GlobalNetworkId: string | undefined;
  DeviceIds?: string[];
  SiteId?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface GetDevicesResponse {
  Devices?: Device[];
  NextToken?: string;
}
export interface GetLinkAssociationsRequest {
  GlobalNetworkId: string | undefined;
  DeviceId?: string;
  LinkId?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface GetLinkAssociationsResponse {
  LinkAssociations?: LinkAssociation[];
  NextToken?: string;
}
export interface GetLinksRequest {
  GlobalNetworkId: string | undefined;
  LinkIds?: string[];
  SiteId?: string;
  Type?: string;
  Provider?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface GetLinksResponse {
  Links?: Link[];
  NextToken?: string;
}
export interface GetNetworkResourceCountsRequest {
  GlobalNetworkId: string | undefined;
  ResourceType?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface NetworkResourceCount {
  ResourceType?: string;
  Count?: number;
}
export interface GetNetworkResourceCountsResponse {
  NetworkResourceCounts?: NetworkResourceCount[];
  NextToken?: string;
}
export interface GetNetworkResourceRelationshipsRequest {
  GlobalNetworkId: string | undefined;
  CoreNetworkId?: string;
  RegisteredGatewayArn?: string;
  AwsRegion?: string;
  AccountId?: string;
  ResourceType?: string;
  ResourceArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface Relationship {
  From?: string;
  To?: string;
}
export interface GetNetworkResourceRelationshipsResponse {
  Relationships?: Relationship[];
  NextToken?: string;
}
export interface GetNetworkResourcesRequest {
  GlobalNetworkId: string | undefined;
  CoreNetworkId?: string;
  RegisteredGatewayArn?: string;
  AwsRegion?: string;
  AccountId?: string;
  ResourceType?: string;
  ResourceArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface NetworkResource {
  RegisteredGatewayArn?: string;
  CoreNetworkId?: string;
  AwsRegion?: string;
  AccountId?: string;
  ResourceType?: string;
  ResourceId?: string;
  ResourceArn?: string;
  Definition?: string;
  DefinitionTimestamp?: Date;
  Tags?: Tag[];
  Metadata?: Record<string, string>;
}
export interface GetNetworkResourcesResponse {
  NetworkResources?: NetworkResource[];
  NextToken?: string;
}
export interface RouteTableIdentifier {
  TransitGatewayRouteTableArn?: string;
  CoreNetworkSegmentEdge?: CoreNetworkSegmentEdgeIdentifier;
}
export declare const RouteState: {
  readonly ACTIVE: "ACTIVE";
  readonly BLACKHOLE: "BLACKHOLE";
};
export type RouteState = (typeof RouteState)[keyof typeof RouteState];
export declare const RouteType: {
  readonly PROPAGATED: "PROPAGATED";
  readonly STATIC: "STATIC";
};
export type RouteType = (typeof RouteType)[keyof typeof RouteType];
export interface GetNetworkRoutesRequest {
  GlobalNetworkId: string | undefined;
  RouteTableIdentifier: RouteTableIdentifier | undefined;
  ExactCidrMatches?: string[];
  LongestPrefixMatches?: string[];
  SubnetOfMatches?: string[];
  SupernetOfMatches?: string[];
  PrefixListIds?: string[];
  States?: RouteState[];
  Types?: RouteType[];
  DestinationFilters?: Record<string, string[]>;
}
export interface NetworkRouteDestination {
  CoreNetworkAttachmentId?: string;
  TransitGatewayAttachmentId?: string;
  SegmentName?: string;
  EdgeLocation?: string;
  ResourceType?: string;
  ResourceId?: string;
}
export interface NetworkRoute {
  DestinationCidrBlock?: string;
  Destinations?: NetworkRouteDestination[];
  PrefixListId?: string;
  State?: RouteState;
  Type?: RouteType;
}
export declare const RouteTableType: {
  readonly CORE_NETWORK_SEGMENT: "CORE_NETWORK_SEGMENT";
  readonly TRANSIT_GATEWAY_ROUTE_TABLE: "TRANSIT_GATEWAY_ROUTE_TABLE";
};
export type RouteTableType =
  (typeof RouteTableType)[keyof typeof RouteTableType];
export interface GetNetworkRoutesResponse {
  RouteTableArn?: string;
  CoreNetworkSegmentEdge?: CoreNetworkSegmentEdgeIdentifier;
  RouteTableType?: RouteTableType;
  RouteTableTimestamp?: Date;
  NetworkRoutes?: NetworkRoute[];
}
export interface GetNetworkTelemetryRequest {
  GlobalNetworkId: string | undefined;
  CoreNetworkId?: string;
  RegisteredGatewayArn?: string;
  AwsRegion?: string;
  AccountId?: string;
  ResourceType?: string;
  ResourceArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface NetworkTelemetry {
  RegisteredGatewayArn?: string;
  CoreNetworkId?: string;
  AwsRegion?: string;
  AccountId?: string;
  ResourceType?: string;
  ResourceId?: string;
  ResourceArn?: string;
  Address?: string;
  Health?: ConnectionHealth;
}
export interface GetNetworkTelemetryResponse {
  NetworkTelemetry?: NetworkTelemetry[];
  NextToken?: string;
}
export interface GetResourcePolicyRequest {
  ResourceArn: string | undefined;
}
export interface GetResourcePolicyResponse {
  PolicyDocument?: __LazyJsonString | string;
}
export interface GetRouteAnalysisRequest {
  GlobalNetworkId: string | undefined;
  RouteAnalysisId: string | undefined;
}
export interface RouteAnalysisEndpointOptions {
  TransitGatewayAttachmentArn?: string;
  TransitGatewayArn?: string;
  IpAddress?: string;
}
export declare const RouteAnalysisCompletionReasonCode: {
  readonly BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND: "BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND";
  readonly CYCLIC_PATH_DETECTED: "CYCLIC_PATH_DETECTED";
  readonly INACTIVE_ROUTE_FOR_DESTINATION_FOUND: "INACTIVE_ROUTE_FOR_DESTINATION_FOUND";
  readonly MAX_HOPS_EXCEEDED: "MAX_HOPS_EXCEEDED";
  readonly NO_DESTINATION_ARN_PROVIDED: "NO_DESTINATION_ARN_PROVIDED";
  readonly POSSIBLE_MIDDLEBOX: "POSSIBLE_MIDDLEBOX";
  readonly ROUTE_NOT_FOUND: "ROUTE_NOT_FOUND";
  readonly TRANSIT_GATEWAY_ATTACHMENT: "TRANSIT_GATEWAY_ATTACHMENT_ATTACH_ARN_NO_MATCH";
  readonly TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND: "TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND";
  readonly TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY: "TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY";
  readonly TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND: "TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND";
};
export type RouteAnalysisCompletionReasonCode =
  (typeof RouteAnalysisCompletionReasonCode)[keyof typeof RouteAnalysisCompletionReasonCode];
export declare const RouteAnalysisCompletionResultCode: {
  readonly CONNECTED: "CONNECTED";
  readonly NOT_CONNECTED: "NOT_CONNECTED";
};
export type RouteAnalysisCompletionResultCode =
  (typeof RouteAnalysisCompletionResultCode)[keyof typeof RouteAnalysisCompletionResultCode];
export interface RouteAnalysisCompletion {
  ResultCode?: RouteAnalysisCompletionResultCode;
  ReasonCode?: RouteAnalysisCompletionReasonCode;
  ReasonContext?: Record<string, string>;
}
export interface NetworkResourceSummary {
  RegisteredGatewayArn?: string;
  ResourceArn?: string;
  ResourceType?: string;
  Definition?: string;
  NameTag?: string;
  IsMiddlebox?: boolean;
}
export interface PathComponent {
  Sequence?: number;
  Resource?: NetworkResourceSummary;
  DestinationCidrBlock?: string;
}
export interface RouteAnalysisPath {
  CompletionStatus?: RouteAnalysisCompletion;
  Path?: PathComponent[];
}
export declare const RouteAnalysisStatus: {
  readonly completed: "COMPLETED";
  readonly failed: "FAILED";
  readonly running: "RUNNING";
};
export type RouteAnalysisStatus =
  (typeof RouteAnalysisStatus)[keyof typeof RouteAnalysisStatus];
export interface RouteAnalysis {
  GlobalNetworkId?: string;
  OwnerAccountId?: string;
  RouteAnalysisId?: string;
  StartTimestamp?: Date;
  Status?: RouteAnalysisStatus;
  Source?: RouteAnalysisEndpointOptions;
  Destination?: RouteAnalysisEndpointOptions;
  IncludeReturnPath?: boolean;
  UseMiddleboxes?: boolean;
  ForwardPath?: RouteAnalysisPath;
  ReturnPath?: RouteAnalysisPath;
}
export interface GetRouteAnalysisResponse {
  RouteAnalysis?: RouteAnalysis;
}
export interface GetSitesRequest {
  GlobalNetworkId: string | undefined;
  SiteIds?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface GetSitesResponse {
  Sites?: Site[];
  NextToken?: string;
}
export interface GetSiteToSiteVpnAttachmentRequest {
  AttachmentId: string | undefined;
}
export interface GetSiteToSiteVpnAttachmentResponse {
  SiteToSiteVpnAttachment?: SiteToSiteVpnAttachment;
}
export interface GetTransitGatewayConnectPeerAssociationsRequest {
  GlobalNetworkId: string | undefined;
  TransitGatewayConnectPeerArns?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface GetTransitGatewayConnectPeerAssociationsResponse {
  TransitGatewayConnectPeerAssociations?: TransitGatewayConnectPeerAssociation[];
  NextToken?: string;
}
export interface GetTransitGatewayPeeringRequest {
  PeeringId: string | undefined;
}
export interface GetTransitGatewayPeeringResponse {
  TransitGatewayPeering?: TransitGatewayPeering;
}
export interface GetTransitGatewayRegistrationsRequest {
  GlobalNetworkId: string | undefined;
  TransitGatewayArns?: string[];
  MaxResults?: number;
  NextToken?: string;
}
export interface GetTransitGatewayRegistrationsResponse {
  TransitGatewayRegistrations?: TransitGatewayRegistration[];
  NextToken?: string;
}
export interface GetTransitGatewayRouteTableAttachmentRequest {
  AttachmentId: string | undefined;
}
export interface GetTransitGatewayRouteTableAttachmentResponse {
  TransitGatewayRouteTableAttachment?: TransitGatewayRouteTableAttachment;
}
export interface GetVpcAttachmentRequest {
  AttachmentId: string | undefined;
}
export interface GetVpcAttachmentResponse {
  VpcAttachment?: VpcAttachment;
}
export interface ListAttachmentsRequest {
  CoreNetworkId?: string;
  AttachmentType?: AttachmentType;
  EdgeLocation?: string;
  State?: AttachmentState;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListAttachmentsResponse {
  Attachments?: Attachment[];
  NextToken?: string;
}
export interface ListConnectPeersRequest {
  CoreNetworkId?: string;
  ConnectAttachmentId?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListConnectPeersResponse {
  ConnectPeers?: ConnectPeerSummary[];
  NextToken?: string;
}
export interface ListCoreNetworkPolicyVersionsRequest {
  CoreNetworkId: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListCoreNetworkPolicyVersionsResponse {
  CoreNetworkPolicyVersions?: CoreNetworkPolicyVersion[];
  NextToken?: string;
}
export interface ListCoreNetworksRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface ListCoreNetworksResponse {
  CoreNetworks?: CoreNetworkSummary[];
  NextToken?: string;
}
export interface ListOrganizationServiceAccessStatusRequest {
  MaxResults?: number;
  NextToken?: string;
}
export interface OrganizationStatus {
  OrganizationId?: string;
  OrganizationAwsServiceAccessStatus?: string;
  SLRDeploymentStatus?: string;
  AccountStatusList?: AccountStatus[];
}
export interface ListOrganizationServiceAccessStatusResponse {
  OrganizationStatus?: OrganizationStatus;
  NextToken?: string;
}
export interface ListPeeringsRequest {
  CoreNetworkId?: string;
  PeeringType?: PeeringType;
  EdgeLocation?: string;
  State?: PeeringState;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListPeeringsResponse {
  Peerings?: Peering[];
  NextToken?: string;
}
export interface ListTagsForResourceRequest {
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  TagList?: Tag[];
}
export interface PutCoreNetworkPolicyRequest {
  CoreNetworkId: string | undefined;
  PolicyDocument: __LazyJsonString | string | undefined;
  Description?: string;
  LatestVersionId?: number;
  ClientToken?: string;
}
export interface PutCoreNetworkPolicyResponse {
  CoreNetworkPolicy?: CoreNetworkPolicy;
}
export interface PutResourcePolicyRequest {
  PolicyDocument: __LazyJsonString | string | undefined;
  ResourceArn: string | undefined;
}
export interface PutResourcePolicyResponse {}
export interface RegisterTransitGatewayRequest {
  GlobalNetworkId: string | undefined;
  TransitGatewayArn: string | undefined;
}
export interface RegisterTransitGatewayResponse {
  TransitGatewayRegistration?: TransitGatewayRegistration;
}
export interface RejectAttachmentRequest {
  AttachmentId: string | undefined;
}
export interface RejectAttachmentResponse {
  Attachment?: Attachment;
}
export interface RestoreCoreNetworkPolicyVersionRequest {
  CoreNetworkId: string | undefined;
  PolicyVersionId: number | undefined;
}
export interface RestoreCoreNetworkPolicyVersionResponse {
  CoreNetworkPolicy?: CoreNetworkPolicy;
}
export interface StartOrganizationServiceAccessUpdateRequest {
  Action: string | undefined;
}
export interface StartOrganizationServiceAccessUpdateResponse {
  OrganizationStatus?: OrganizationStatus;
}
export interface RouteAnalysisEndpointOptionsSpecification {
  TransitGatewayAttachmentArn?: string;
  IpAddress?: string;
}
export interface StartRouteAnalysisRequest {
  GlobalNetworkId: string | undefined;
  Source: RouteAnalysisEndpointOptionsSpecification | undefined;
  Destination: RouteAnalysisEndpointOptionsSpecification | undefined;
  IncludeReturnPath?: boolean;
  UseMiddleboxes?: boolean;
}
export interface StartRouteAnalysisResponse {
  RouteAnalysis?: RouteAnalysis;
}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateConnectionRequest {
  GlobalNetworkId: string | undefined;
  ConnectionId: string | undefined;
  LinkId?: string;
  ConnectedLinkId?: string;
  Description?: string;
}
export interface UpdateConnectionResponse {
  Connection?: Connection;
}
export interface UpdateCoreNetworkRequest {
  CoreNetworkId: string | undefined;
  Description?: string;
}
export interface UpdateCoreNetworkResponse {
  CoreNetwork?: CoreNetwork;
}
export interface UpdateDeviceRequest {
  GlobalNetworkId: string | undefined;
  DeviceId: string | undefined;
  AWSLocation?: AWSLocation;
  Description?: string;
  Type?: string;
  Vendor?: string;
  Model?: string;
  SerialNumber?: string;
  Location?: Location;
  SiteId?: string;
}
export interface UpdateDeviceResponse {
  Device?: Device;
}
export interface UpdateGlobalNetworkRequest {
  GlobalNetworkId: string | undefined;
  Description?: string;
}
export interface UpdateGlobalNetworkResponse {
  GlobalNetwork?: GlobalNetwork;
}
export interface UpdateLinkRequest {
  GlobalNetworkId: string | undefined;
  LinkId: string | undefined;
  Description?: string;
  Type?: string;
  Bandwidth?: Bandwidth;
  Provider?: string;
}
export interface UpdateLinkResponse {
  Link?: Link;
}
export interface UpdateNetworkResourceMetadataRequest {
  GlobalNetworkId: string | undefined;
  ResourceArn: string | undefined;
  Metadata: Record<string, string> | undefined;
}
export interface UpdateNetworkResourceMetadataResponse {
  ResourceArn?: string;
  Metadata?: Record<string, string>;
}
export interface UpdateSiteRequest {
  GlobalNetworkId: string | undefined;
  SiteId: string | undefined;
  Description?: string;
  Location?: Location;
}
export interface UpdateSiteResponse {
  Site?: Site;
}
export interface UpdateVpcAttachmentRequest {
  AttachmentId: string | undefined;
  AddSubnetArns?: string[];
  RemoveSubnetArns?: string[];
  Options?: VpcOptions;
}
export interface UpdateVpcAttachmentResponse {
  VpcAttachment?: VpcAttachment;
}
export declare const LocationFilterSensitiveLog: (obj: Location) => any;
export declare const CreateDeviceRequestFilterSensitiveLog: (
  obj: CreateDeviceRequest
) => any;
export declare const DeviceFilterSensitiveLog: (obj: Device) => any;
export declare const CreateDeviceResponseFilterSensitiveLog: (
  obj: CreateDeviceResponse
) => any;
export declare const CreateSiteRequestFilterSensitiveLog: (
  obj: CreateSiteRequest
) => any;
export declare const SiteFilterSensitiveLog: (obj: Site) => any;
export declare const CreateSiteResponseFilterSensitiveLog: (
  obj: CreateSiteResponse
) => any;
export declare const DeleteDeviceResponseFilterSensitiveLog: (
  obj: DeleteDeviceResponse
) => any;
export declare const DeleteSiteResponseFilterSensitiveLog: (
  obj: DeleteSiteResponse
) => any;
export declare const GetDevicesResponseFilterSensitiveLog: (
  obj: GetDevicesResponse
) => any;
export declare const GetSitesResponseFilterSensitiveLog: (
  obj: GetSitesResponse
) => any;
export declare const UpdateDeviceRequestFilterSensitiveLog: (
  obj: UpdateDeviceRequest
) => any;
export declare const UpdateDeviceResponseFilterSensitiveLog: (
  obj: UpdateDeviceResponse
) => any;
export declare const UpdateSiteRequestFilterSensitiveLog: (
  obj: UpdateSiteRequest
) => any;
export declare const UpdateSiteResponseFilterSensitiveLog: (
  obj: UpdateSiteResponse
) => any;
