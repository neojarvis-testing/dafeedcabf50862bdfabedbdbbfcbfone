import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { NetworkFirewallServiceException as __BaseException } from "./NetworkFirewallServiceException";
export interface Dimension {
  Value: string | undefined;
}
export interface PublishMetricAction {
  Dimensions: Dimension[] | undefined;
}
export interface ActionDefinition {
  PublishMetricAction?: PublishMetricAction;
}
export interface Address {
  AddressDefinition: string | undefined;
}
export declare const IdentifiedType: {
  readonly STATELESS_RULE_CONTAINS_TCP_FLAGS: "STATELESS_RULE_CONTAINS_TCP_FLAGS";
  readonly STATELESS_RULE_FORWARDING_ASYMMETRICALLY: "STATELESS_RULE_FORWARDING_ASYMMETRICALLY";
};
export type IdentifiedType =
  (typeof IdentifiedType)[keyof typeof IdentifiedType];
export interface AnalysisResult {
  IdentifiedRuleIds?: string[];
  IdentifiedType?: IdentifiedType;
  AnalysisDetail?: string;
}
export interface AssociateFirewallPolicyRequest {
  UpdateToken?: string;
  FirewallArn?: string;
  FirewallName?: string;
  FirewallPolicyArn: string | undefined;
}
export interface AssociateFirewallPolicyResponse {
  FirewallArn?: string;
  FirewallName?: string;
  FirewallPolicyArn?: string;
  UpdateToken?: string;
}
export declare class InternalServerError extends __BaseException {
  readonly name: "InternalServerError";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InternalServerError, __BaseException>
  );
}
export declare class InvalidOperationException extends __BaseException {
  readonly name: "InvalidOperationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidOperationException, __BaseException>
  );
}
export declare class InvalidRequestException extends __BaseException {
  readonly name: "InvalidRequestException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidRequestException, __BaseException>
  );
}
export declare class InvalidTokenException extends __BaseException {
  readonly name: "InvalidTokenException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidTokenException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export declare const IPAddressType: {
  readonly DUALSTACK: "DUALSTACK";
  readonly IPV4: "IPV4";
  readonly IPV6: "IPV6";
};
export type IPAddressType = (typeof IPAddressType)[keyof typeof IPAddressType];
export interface SubnetMapping {
  SubnetId: string | undefined;
  IPAddressType?: IPAddressType;
}
export interface AssociateSubnetsRequest {
  UpdateToken?: string;
  FirewallArn?: string;
  FirewallName?: string;
  SubnetMappings: SubnetMapping[] | undefined;
}
export interface AssociateSubnetsResponse {
  FirewallArn?: string;
  FirewallName?: string;
  SubnetMappings?: SubnetMapping[];
  UpdateToken?: string;
}
export declare class InsufficientCapacityException extends __BaseException {
  readonly name: "InsufficientCapacityException";
  readonly $fault: "server";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InsufficientCapacityException, __BaseException>
  );
}
export declare const AttachmentStatus: {
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly ERROR: "ERROR";
  readonly FAILED: "FAILED";
  readonly READY: "READY";
  readonly SCALING: "SCALING";
};
export type AttachmentStatus =
  (typeof AttachmentStatus)[keyof typeof AttachmentStatus];
export interface Attachment {
  SubnetId?: string;
  EndpointId?: string;
  Status?: AttachmentStatus;
  StatusMessage?: string;
}
export interface IPSetMetadata {
  ResolvedCIDRCount?: number;
}
export interface CIDRSummary {
  AvailableCIDRCount?: number;
  UtilizedCIDRCount?: number;
  IPSetReferences?: Record<string, IPSetMetadata>;
}
export interface CapacityUsageSummary {
  CIDRs?: CIDRSummary;
}
export interface TlsCertificateData {
  CertificateArn?: string;
  CertificateSerial?: string;
  Status?: string;
  StatusMessage?: string;
}
export declare const RevocationCheckAction: {
  readonly DROP: "DROP";
  readonly PASS: "PASS";
  readonly REJECT: "REJECT";
};
export type RevocationCheckAction =
  (typeof RevocationCheckAction)[keyof typeof RevocationCheckAction];
export interface CheckCertificateRevocationStatusActions {
  RevokedStatusAction?: RevocationCheckAction;
  UnknownStatusAction?: RevocationCheckAction;
}
export declare const ConfigurationSyncState: {
  readonly CAPACITY_CONSTRAINED: "CAPACITY_CONSTRAINED";
  readonly IN_SYNC: "IN_SYNC";
  readonly PENDING: "PENDING";
};
export type ConfigurationSyncState =
  (typeof ConfigurationSyncState)[keyof typeof ConfigurationSyncState];
export declare const EncryptionType: {
  readonly AWS_OWNED_KMS_KEY: "AWS_OWNED_KMS_KEY";
  readonly CUSTOMER_KMS: "CUSTOMER_KMS";
};
export type EncryptionType =
  (typeof EncryptionType)[keyof typeof EncryptionType];
export interface EncryptionConfiguration {
  KeyId?: string;
  Type: EncryptionType | undefined;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateFirewallRequest {
  FirewallName: string | undefined;
  FirewallPolicyArn: string | undefined;
  VpcId: string | undefined;
  SubnetMappings: SubnetMapping[] | undefined;
  DeleteProtection?: boolean;
  SubnetChangeProtection?: boolean;
  FirewallPolicyChangeProtection?: boolean;
  Description?: string;
  Tags?: Tag[];
  EncryptionConfiguration?: EncryptionConfiguration;
}
export interface Firewall {
  FirewallName?: string;
  FirewallArn?: string;
  FirewallPolicyArn: string | undefined;
  VpcId: string | undefined;
  SubnetMappings: SubnetMapping[] | undefined;
  DeleteProtection?: boolean;
  SubnetChangeProtection?: boolean;
  FirewallPolicyChangeProtection?: boolean;
  Description?: string;
  FirewallId: string | undefined;
  Tags?: Tag[];
  EncryptionConfiguration?: EncryptionConfiguration;
}
export declare const FirewallStatusValue: {
  readonly DELETING: "DELETING";
  readonly PROVISIONING: "PROVISIONING";
  readonly READY: "READY";
};
export type FirewallStatusValue =
  (typeof FirewallStatusValue)[keyof typeof FirewallStatusValue];
export declare const PerObjectSyncStatus: {
  readonly CAPACITY_CONSTRAINED: "CAPACITY_CONSTRAINED";
  readonly IN_SYNC: "IN_SYNC";
  readonly PENDING: "PENDING";
};
export type PerObjectSyncStatus =
  (typeof PerObjectSyncStatus)[keyof typeof PerObjectSyncStatus];
export interface PerObjectStatus {
  SyncStatus?: PerObjectSyncStatus;
  UpdateToken?: string;
}
export interface SyncState {
  Attachment?: Attachment;
  Config?: Record<string, PerObjectStatus>;
}
export interface FirewallStatus {
  Status: FirewallStatusValue | undefined;
  ConfigurationSyncStateSummary: ConfigurationSyncState | undefined;
  SyncStates?: Record<string, SyncState>;
  CapacityUsageSummary?: CapacityUsageSummary;
}
export interface CreateFirewallResponse {
  Firewall?: Firewall;
  FirewallStatus?: FirewallStatus;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export interface IPSet {
  Definition: string[] | undefined;
}
export interface PolicyVariables {
  RuleVariables?: Record<string, IPSet>;
}
export declare const RuleOrder: {
  readonly DEFAULT_ACTION_ORDER: "DEFAULT_ACTION_ORDER";
  readonly STRICT_ORDER: "STRICT_ORDER";
};
export type RuleOrder = (typeof RuleOrder)[keyof typeof RuleOrder];
export declare const StreamExceptionPolicy: {
  readonly CONTINUE: "CONTINUE";
  readonly DROP: "DROP";
  readonly REJECT: "REJECT";
};
export type StreamExceptionPolicy =
  (typeof StreamExceptionPolicy)[keyof typeof StreamExceptionPolicy];
export interface StatefulEngineOptions {
  RuleOrder?: RuleOrder;
  StreamExceptionPolicy?: StreamExceptionPolicy;
}
export declare const OverrideAction: {
  readonly DROP_TO_ALERT: "DROP_TO_ALERT";
};
export type OverrideAction =
  (typeof OverrideAction)[keyof typeof OverrideAction];
export interface StatefulRuleGroupOverride {
  Action?: OverrideAction;
}
export interface StatefulRuleGroupReference {
  ResourceArn: string | undefined;
  Priority?: number;
  Override?: StatefulRuleGroupOverride;
}
export interface CustomAction {
  ActionName: string | undefined;
  ActionDefinition: ActionDefinition | undefined;
}
export interface StatelessRuleGroupReference {
  ResourceArn: string | undefined;
  Priority: number | undefined;
}
export interface FirewallPolicy {
  StatelessRuleGroupReferences?: StatelessRuleGroupReference[];
  StatelessDefaultActions: string[] | undefined;
  StatelessFragmentDefaultActions: string[] | undefined;
  StatelessCustomActions?: CustomAction[];
  StatefulRuleGroupReferences?: StatefulRuleGroupReference[];
  StatefulDefaultActions?: string[];
  StatefulEngineOptions?: StatefulEngineOptions;
  TLSInspectionConfigurationArn?: string;
  PolicyVariables?: PolicyVariables;
}
export interface CreateFirewallPolicyRequest {
  FirewallPolicyName: string | undefined;
  FirewallPolicy: FirewallPolicy | undefined;
  Description?: string;
  Tags?: Tag[];
  DryRun?: boolean;
  EncryptionConfiguration?: EncryptionConfiguration;
}
export declare const ResourceStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETING: "DELETING";
  readonly ERROR: "ERROR";
};
export type ResourceStatus =
  (typeof ResourceStatus)[keyof typeof ResourceStatus];
export interface FirewallPolicyResponse {
  FirewallPolicyName: string | undefined;
  FirewallPolicyArn: string | undefined;
  FirewallPolicyId: string | undefined;
  Description?: string;
  FirewallPolicyStatus?: ResourceStatus;
  Tags?: Tag[];
  ConsumedStatelessRuleCapacity?: number;
  ConsumedStatefulRuleCapacity?: number;
  NumberOfAssociations?: number;
  EncryptionConfiguration?: EncryptionConfiguration;
  LastModifiedTime?: Date;
}
export interface CreateFirewallPolicyResponse {
  UpdateToken: string | undefined;
  FirewallPolicyResponse: FirewallPolicyResponse | undefined;
}
export interface IPSetReference {
  ReferenceArn?: string;
}
export interface ReferenceSets {
  IPSetReferences?: Record<string, IPSetReference>;
}
export declare const GeneratedRulesType: {
  readonly ALLOWLIST: "ALLOWLIST";
  readonly DENYLIST: "DENYLIST";
};
export type GeneratedRulesType =
  (typeof GeneratedRulesType)[keyof typeof GeneratedRulesType];
export declare const TargetType: {
  readonly HTTP_HOST: "HTTP_HOST";
  readonly TLS_SNI: "TLS_SNI";
};
export type TargetType = (typeof TargetType)[keyof typeof TargetType];
export interface RulesSourceList {
  Targets: string[] | undefined;
  TargetTypes: TargetType[] | undefined;
  GeneratedRulesType: GeneratedRulesType | undefined;
}
export declare const StatefulAction: {
  readonly ALERT: "ALERT";
  readonly DROP: "DROP";
  readonly PASS: "PASS";
  readonly REJECT: "REJECT";
};
export type StatefulAction =
  (typeof StatefulAction)[keyof typeof StatefulAction];
export declare const StatefulRuleDirection: {
  readonly ANY: "ANY";
  readonly FORWARD: "FORWARD";
};
export type StatefulRuleDirection =
  (typeof StatefulRuleDirection)[keyof typeof StatefulRuleDirection];
export declare const StatefulRuleProtocol: {
  readonly ANY: "IP";
  readonly DCERPC: "DCERPC";
  readonly DHCP: "DHCP";
  readonly DNS: "DNS";
  readonly FTP: "FTP";
  readonly HTTP: "HTTP";
  readonly ICMP: "ICMP";
  readonly IKEV2: "IKEV2";
  readonly IMAP: "IMAP";
  readonly KRB5: "KRB5";
  readonly MSN: "MSN";
  readonly NTP: "NTP";
  readonly SMB: "SMB";
  readonly SMTP: "SMTP";
  readonly SSH: "SSH";
  readonly TCP: "TCP";
  readonly TFTP: "TFTP";
  readonly TLS: "TLS";
  readonly UDP: "UDP";
};
export type StatefulRuleProtocol =
  (typeof StatefulRuleProtocol)[keyof typeof StatefulRuleProtocol];
export interface Header {
  Protocol: StatefulRuleProtocol | undefined;
  Source: string | undefined;
  SourcePort: string | undefined;
  Direction: StatefulRuleDirection | undefined;
  Destination: string | undefined;
  DestinationPort: string | undefined;
}
export interface RuleOption {
  Keyword: string | undefined;
  Settings?: string[];
}
export interface StatefulRule {
  Action: StatefulAction | undefined;
  Header: Header | undefined;
  RuleOptions: RuleOption[] | undefined;
}
export interface PortRange {
  FromPort: number | undefined;
  ToPort: number | undefined;
}
export declare const TCPFlag: {
  readonly ACK: "ACK";
  readonly CWR: "CWR";
  readonly ECE: "ECE";
  readonly FIN: "FIN";
  readonly PSH: "PSH";
  readonly RST: "RST";
  readonly SYN: "SYN";
  readonly URG: "URG";
};
export type TCPFlag = (typeof TCPFlag)[keyof typeof TCPFlag];
export interface TCPFlagField {
  Flags: TCPFlag[] | undefined;
  Masks?: TCPFlag[];
}
export interface MatchAttributes {
  Sources?: Address[];
  Destinations?: Address[];
  SourcePorts?: PortRange[];
  DestinationPorts?: PortRange[];
  Protocols?: number[];
  TCPFlags?: TCPFlagField[];
}
export interface RuleDefinition {
  MatchAttributes: MatchAttributes | undefined;
  Actions: string[] | undefined;
}
export interface StatelessRule {
  RuleDefinition: RuleDefinition | undefined;
  Priority: number | undefined;
}
export interface StatelessRulesAndCustomActions {
  StatelessRules: StatelessRule[] | undefined;
  CustomActions?: CustomAction[];
}
export interface RulesSource {
  RulesString?: string;
  RulesSourceList?: RulesSourceList;
  StatefulRules?: StatefulRule[];
  StatelessRulesAndCustomActions?: StatelessRulesAndCustomActions;
}
export interface PortSet {
  Definition?: string[];
}
export interface RuleVariables {
  IPSets?: Record<string, IPSet>;
  PortSets?: Record<string, PortSet>;
}
export interface StatefulRuleOptions {
  RuleOrder?: RuleOrder;
}
export interface RuleGroup {
  RuleVariables?: RuleVariables;
  ReferenceSets?: ReferenceSets;
  RulesSource: RulesSource | undefined;
  StatefulRuleOptions?: StatefulRuleOptions;
}
export interface SourceMetadata {
  SourceArn?: string;
  SourceUpdateToken?: string;
}
export declare const RuleGroupType: {
  readonly STATEFUL: "STATEFUL";
  readonly STATELESS: "STATELESS";
};
export type RuleGroupType = (typeof RuleGroupType)[keyof typeof RuleGroupType];
export interface CreateRuleGroupRequest {
  RuleGroupName: string | undefined;
  RuleGroup?: RuleGroup;
  Rules?: string;
  Type: RuleGroupType | undefined;
  Description?: string;
  Capacity: number | undefined;
  Tags?: Tag[];
  DryRun?: boolean;
  EncryptionConfiguration?: EncryptionConfiguration;
  SourceMetadata?: SourceMetadata;
  AnalyzeRuleGroup?: boolean;
}
export interface RuleGroupResponse {
  RuleGroupArn: string | undefined;
  RuleGroupName: string | undefined;
  RuleGroupId: string | undefined;
  Description?: string;
  Type?: RuleGroupType;
  Capacity?: number;
  RuleGroupStatus?: ResourceStatus;
  Tags?: Tag[];
  ConsumedCapacity?: number;
  NumberOfAssociations?: number;
  EncryptionConfiguration?: EncryptionConfiguration;
  SourceMetadata?: SourceMetadata;
  SnsTopic?: string;
  LastModifiedTime?: Date;
  AnalysisResults?: AnalysisResult[];
}
export interface CreateRuleGroupResponse {
  UpdateToken: string | undefined;
  RuleGroupResponse: RuleGroupResponse | undefined;
}
export interface ServerCertificateScope {
  Sources?: Address[];
  Destinations?: Address[];
  SourcePorts?: PortRange[];
  DestinationPorts?: PortRange[];
  Protocols?: number[];
}
export interface ServerCertificate {
  ResourceArn?: string;
}
export interface ServerCertificateConfiguration {
  ServerCertificates?: ServerCertificate[];
  Scopes?: ServerCertificateScope[];
  CertificateAuthorityArn?: string;
  CheckCertificateRevocationStatus?: CheckCertificateRevocationStatusActions;
}
export interface TLSInspectionConfiguration {
  ServerCertificateConfigurations?: ServerCertificateConfiguration[];
}
export interface CreateTLSInspectionConfigurationRequest {
  TLSInspectionConfigurationName: string | undefined;
  TLSInspectionConfiguration: TLSInspectionConfiguration | undefined;
  Description?: string;
  Tags?: Tag[];
  EncryptionConfiguration?: EncryptionConfiguration;
}
export interface TLSInspectionConfigurationResponse {
  TLSInspectionConfigurationArn: string | undefined;
  TLSInspectionConfigurationName: string | undefined;
  TLSInspectionConfigurationId: string | undefined;
  TLSInspectionConfigurationStatus?: ResourceStatus;
  Description?: string;
  Tags?: Tag[];
  LastModifiedTime?: Date;
  NumberOfAssociations?: number;
  EncryptionConfiguration?: EncryptionConfiguration;
  Certificates?: TlsCertificateData[];
  CertificateAuthority?: TlsCertificateData;
}
export interface CreateTLSInspectionConfigurationResponse {
  UpdateToken: string | undefined;
  TLSInspectionConfigurationResponse:
    | TLSInspectionConfigurationResponse
    | undefined;
}
export interface DeleteFirewallRequest {
  FirewallName?: string;
  FirewallArn?: string;
}
export interface DeleteFirewallResponse {
  Firewall?: Firewall;
  FirewallStatus?: FirewallStatus;
}
export declare class UnsupportedOperationException extends __BaseException {
  readonly name: "UnsupportedOperationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<UnsupportedOperationException, __BaseException>
  );
}
export interface DeleteFirewallPolicyRequest {
  FirewallPolicyName?: string;
  FirewallPolicyArn?: string;
}
export interface DeleteFirewallPolicyResponse {
  FirewallPolicyResponse: FirewallPolicyResponse | undefined;
}
export interface DeleteResourcePolicyRequest {
  ResourceArn: string | undefined;
}
export interface DeleteResourcePolicyResponse {}
export declare class InvalidResourcePolicyException extends __BaseException {
  readonly name: "InvalidResourcePolicyException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidResourcePolicyException, __BaseException>
  );
}
export interface DeleteRuleGroupRequest {
  RuleGroupName?: string;
  RuleGroupArn?: string;
  Type?: RuleGroupType;
}
export interface DeleteRuleGroupResponse {
  RuleGroupResponse: RuleGroupResponse | undefined;
}
export interface DeleteTLSInspectionConfigurationRequest {
  TLSInspectionConfigurationArn?: string;
  TLSInspectionConfigurationName?: string;
}
export interface DeleteTLSInspectionConfigurationResponse {
  TLSInspectionConfigurationResponse:
    | TLSInspectionConfigurationResponse
    | undefined;
}
export interface DescribeFirewallRequest {
  FirewallName?: string;
  FirewallArn?: string;
}
export interface DescribeFirewallResponse {
  UpdateToken?: string;
  Firewall?: Firewall;
  FirewallStatus?: FirewallStatus;
}
export interface DescribeFirewallPolicyRequest {
  FirewallPolicyName?: string;
  FirewallPolicyArn?: string;
}
export interface DescribeFirewallPolicyResponse {
  UpdateToken: string | undefined;
  FirewallPolicyResponse: FirewallPolicyResponse | undefined;
  FirewallPolicy?: FirewallPolicy;
}
export interface DescribeLoggingConfigurationRequest {
  FirewallArn?: string;
  FirewallName?: string;
}
export declare const LogDestinationType: {
  readonly CLOUDWATCH_LOGS: "CloudWatchLogs";
  readonly KINESIS_DATA_FIREHOSE: "KinesisDataFirehose";
  readonly S3: "S3";
};
export type LogDestinationType =
  (typeof LogDestinationType)[keyof typeof LogDestinationType];
export declare const LogType: {
  readonly ALERT: "ALERT";
  readonly FLOW: "FLOW";
};
export type LogType = (typeof LogType)[keyof typeof LogType];
export interface LogDestinationConfig {
  LogType: LogType | undefined;
  LogDestinationType: LogDestinationType | undefined;
  LogDestination: Record<string, string> | undefined;
}
export interface LoggingConfiguration {
  LogDestinationConfigs: LogDestinationConfig[] | undefined;
}
export interface DescribeLoggingConfigurationResponse {
  FirewallArn?: string;
  LoggingConfiguration?: LoggingConfiguration;
}
export interface DescribeResourcePolicyRequest {
  ResourceArn: string | undefined;
}
export interface DescribeResourcePolicyResponse {
  Policy?: string;
}
export interface DescribeRuleGroupRequest {
  RuleGroupName?: string;
  RuleGroupArn?: string;
  Type?: RuleGroupType;
  AnalyzeRuleGroup?: boolean;
}
export interface DescribeRuleGroupResponse {
  UpdateToken: string | undefined;
  RuleGroup?: RuleGroup;
  RuleGroupResponse: RuleGroupResponse | undefined;
}
export interface DescribeRuleGroupMetadataRequest {
  RuleGroupName?: string;
  RuleGroupArn?: string;
  Type?: RuleGroupType;
}
export interface DescribeRuleGroupMetadataResponse {
  RuleGroupArn: string | undefined;
  RuleGroupName: string | undefined;
  Description?: string;
  Type?: RuleGroupType;
  Capacity?: number;
  StatefulRuleOptions?: StatefulRuleOptions;
  LastModifiedTime?: Date;
}
export interface DescribeTLSInspectionConfigurationRequest {
  TLSInspectionConfigurationArn?: string;
  TLSInspectionConfigurationName?: string;
}
export interface DescribeTLSInspectionConfigurationResponse {
  UpdateToken: string | undefined;
  TLSInspectionConfiguration?: TLSInspectionConfiguration;
  TLSInspectionConfigurationResponse:
    | TLSInspectionConfigurationResponse
    | undefined;
}
export interface DisassociateSubnetsRequest {
  UpdateToken?: string;
  FirewallArn?: string;
  FirewallName?: string;
  SubnetIds: string[] | undefined;
}
export interface DisassociateSubnetsResponse {
  FirewallArn?: string;
  FirewallName?: string;
  SubnetMappings?: SubnetMapping[];
  UpdateToken?: string;
}
export interface FirewallMetadata {
  FirewallName?: string;
  FirewallArn?: string;
}
export interface FirewallPolicyMetadata {
  Name?: string;
  Arn?: string;
}
export interface ListFirewallPoliciesRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface ListFirewallPoliciesResponse {
  NextToken?: string;
  FirewallPolicies?: FirewallPolicyMetadata[];
}
export interface ListFirewallsRequest {
  NextToken?: string;
  VpcIds?: string[];
  MaxResults?: number;
}
export interface ListFirewallsResponse {
  NextToken?: string;
  Firewalls?: FirewallMetadata[];
}
export declare const ResourceManagedType: {
  readonly AWS_MANAGED_DOMAIN_LISTS: "AWS_MANAGED_DOMAIN_LISTS";
  readonly AWS_MANAGED_THREAT_SIGNATURES: "AWS_MANAGED_THREAT_SIGNATURES";
};
export type ResourceManagedType =
  (typeof ResourceManagedType)[keyof typeof ResourceManagedType];
export declare const ResourceManagedStatus: {
  readonly ACCOUNT: "ACCOUNT";
  readonly MANAGED: "MANAGED";
};
export type ResourceManagedStatus =
  (typeof ResourceManagedStatus)[keyof typeof ResourceManagedStatus];
export interface ListRuleGroupsRequest {
  NextToken?: string;
  MaxResults?: number;
  Scope?: ResourceManagedStatus;
  ManagedType?: ResourceManagedType;
  Type?: RuleGroupType;
}
export interface RuleGroupMetadata {
  Name?: string;
  Arn?: string;
}
export interface ListRuleGroupsResponse {
  NextToken?: string;
  RuleGroups?: RuleGroupMetadata[];
}
export interface ListTagsForResourceRequest {
  NextToken?: string;
  MaxResults?: number;
  ResourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  NextToken?: string;
  Tags?: Tag[];
}
export interface ListTLSInspectionConfigurationsRequest {
  NextToken?: string;
  MaxResults?: number;
}
export interface TLSInspectionConfigurationMetadata {
  Name?: string;
  Arn?: string;
}
export interface ListTLSInspectionConfigurationsResponse {
  NextToken?: string;
  TLSInspectionConfigurations?: TLSInspectionConfigurationMetadata[];
}
export declare class LogDestinationPermissionException extends __BaseException {
  readonly name: "LogDestinationPermissionException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      LogDestinationPermissionException,
      __BaseException
    >
  );
}
export interface PutResourcePolicyRequest {
  ResourceArn: string | undefined;
  Policy: string | undefined;
}
export interface PutResourcePolicyResponse {}
export interface TagResourceRequest {
  ResourceArn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export declare class ResourceOwnerCheckException extends __BaseException {
  readonly name: "ResourceOwnerCheckException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceOwnerCheckException, __BaseException>
  );
}
export interface UpdateFirewallDeleteProtectionRequest {
  UpdateToken?: string;
  FirewallArn?: string;
  FirewallName?: string;
  DeleteProtection: boolean | undefined;
}
export interface UpdateFirewallDeleteProtectionResponse {
  FirewallArn?: string;
  FirewallName?: string;
  DeleteProtection?: boolean;
  UpdateToken?: string;
}
export interface UpdateFirewallDescriptionRequest {
  UpdateToken?: string;
  FirewallArn?: string;
  FirewallName?: string;
  Description?: string;
}
export interface UpdateFirewallDescriptionResponse {
  FirewallArn?: string;
  FirewallName?: string;
  Description?: string;
  UpdateToken?: string;
}
export interface UpdateFirewallEncryptionConfigurationRequest {
  UpdateToken?: string;
  FirewallArn?: string;
  FirewallName?: string;
  EncryptionConfiguration?: EncryptionConfiguration;
}
export interface UpdateFirewallEncryptionConfigurationResponse {
  FirewallArn?: string;
  FirewallName?: string;
  UpdateToken?: string;
  EncryptionConfiguration?: EncryptionConfiguration;
}
export interface UpdateFirewallPolicyRequest {
  UpdateToken: string | undefined;
  FirewallPolicyArn?: string;
  FirewallPolicyName?: string;
  FirewallPolicy: FirewallPolicy | undefined;
  Description?: string;
  DryRun?: boolean;
  EncryptionConfiguration?: EncryptionConfiguration;
}
export interface UpdateFirewallPolicyResponse {
  UpdateToken: string | undefined;
  FirewallPolicyResponse: FirewallPolicyResponse | undefined;
}
export interface UpdateFirewallPolicyChangeProtectionRequest {
  UpdateToken?: string;
  FirewallArn?: string;
  FirewallName?: string;
  FirewallPolicyChangeProtection: boolean | undefined;
}
export interface UpdateFirewallPolicyChangeProtectionResponse {
  UpdateToken?: string;
  FirewallArn?: string;
  FirewallName?: string;
  FirewallPolicyChangeProtection?: boolean;
}
export interface UpdateLoggingConfigurationRequest {
  FirewallArn?: string;
  FirewallName?: string;
  LoggingConfiguration?: LoggingConfiguration;
}
export interface UpdateLoggingConfigurationResponse {
  FirewallArn?: string;
  FirewallName?: string;
  LoggingConfiguration?: LoggingConfiguration;
}
export interface UpdateRuleGroupRequest {
  UpdateToken: string | undefined;
  RuleGroupArn?: string;
  RuleGroupName?: string;
  RuleGroup?: RuleGroup;
  Rules?: string;
  Type?: RuleGroupType;
  Description?: string;
  DryRun?: boolean;
  EncryptionConfiguration?: EncryptionConfiguration;
  SourceMetadata?: SourceMetadata;
  AnalyzeRuleGroup?: boolean;
}
export interface UpdateRuleGroupResponse {
  UpdateToken: string | undefined;
  RuleGroupResponse: RuleGroupResponse | undefined;
}
export interface UpdateSubnetChangeProtectionRequest {
  UpdateToken?: string;
  FirewallArn?: string;
  FirewallName?: string;
  SubnetChangeProtection: boolean | undefined;
}
export interface UpdateSubnetChangeProtectionResponse {
  UpdateToken?: string;
  FirewallArn?: string;
  FirewallName?: string;
  SubnetChangeProtection?: boolean;
}
export interface UpdateTLSInspectionConfigurationRequest {
  TLSInspectionConfigurationArn?: string;
  TLSInspectionConfigurationName?: string;
  TLSInspectionConfiguration: TLSInspectionConfiguration | undefined;
  Description?: string;
  EncryptionConfiguration?: EncryptionConfiguration;
  UpdateToken: string | undefined;
}
export interface UpdateTLSInspectionConfigurationResponse {
  UpdateToken: string | undefined;
  TLSInspectionConfigurationResponse:
    | TLSInspectionConfigurationResponse
    | undefined;
}
