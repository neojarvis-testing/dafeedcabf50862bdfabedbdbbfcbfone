import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { InsufficientCapacityException, InternalServerError, InvalidOperationException, InvalidRequestException, InvalidResourcePolicyException, InvalidTokenException, LimitExceededException, LogDestinationPermissionException, ResourceNotFoundException, ResourceOwnerCheckException, ThrottlingException, UnsupportedOperationException, } from "../models/models_0";
import { NetworkFirewallServiceException as __BaseException } from "../models/NetworkFirewallServiceException";
export const se_AssociateFirewallPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateFirewallPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateSubnetsCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateSubnets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFirewallCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFirewall");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFirewallPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFirewallPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRuleGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRuleGroup");
    let body;
    body = JSON.stringify(se_CreateRuleGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateTLSInspectionConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTLSInspectionConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFirewallCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFirewall");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFirewallPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFirewallPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRuleGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRuleGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTLSInspectionConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTLSInspectionConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFirewallCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFirewall");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeFirewallPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFirewallPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeLoggingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLoggingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRuleGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRuleGroup");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRuleGroupMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRuleGroupMetadata");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeTLSInspectionConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTLSInspectionConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateSubnetsCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateSubnets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFirewallPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("ListFirewallPolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFirewallsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFirewalls");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRuleGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRuleGroups");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTLSInspectionConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTLSInspectionConfigurations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFirewallDeleteProtectionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFirewallDeleteProtection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFirewallDescriptionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFirewallDescription");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFirewallEncryptionConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFirewallEncryptionConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFirewallPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFirewallPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateFirewallPolicyChangeProtectionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFirewallPolicyChangeProtection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateLoggingConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateLoggingConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateRuleGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateRuleGroup");
    let body;
    body = JSON.stringify(se_UpdateRuleGroupRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSubnetChangeProtectionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSubnetChangeProtection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateTLSInspectionConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTLSInspectionConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AssociateFirewallPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateSubnetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateFirewallCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateFirewallPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateFirewallPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRuleGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRuleGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateTLSInspectionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateTLSInspectionConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteFirewallCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteFirewallPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteFirewallPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRuleGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRuleGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTLSInspectionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteTLSInspectionConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFirewallCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeFirewallPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeFirewallPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRuleGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRuleGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRuleGroupMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRuleGroupMetadataResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeTLSInspectionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeTLSInspectionConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateSubnetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFirewallPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFirewallsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRuleGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTLSInspectionConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateFirewallDeleteProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateFirewallDescriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateFirewallEncryptionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateFirewallPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateFirewallPolicyResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateFirewallPolicyChangeProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateRuleGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateRuleGroupResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateSubnetChangeProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateTLSInspectionConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateTLSInspectionConfigurationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerError":
        case "com.amazonaws.networkfirewall#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidOperationException":
        case "com.amazonaws.networkfirewall#InvalidOperationException":
            throw await de_InvalidOperationExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.networkfirewall#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "InvalidTokenException":
        case "com.amazonaws.networkfirewall#InvalidTokenException":
            throw await de_InvalidTokenExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.networkfirewall#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.networkfirewall#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "InsufficientCapacityException":
        case "com.amazonaws.networkfirewall#InsufficientCapacityException":
            throw await de_InsufficientCapacityExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.networkfirewall#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "UnsupportedOperationException":
        case "com.amazonaws.networkfirewall#UnsupportedOperationException":
            throw await de_UnsupportedOperationExceptionRes(parsedOutput, context);
        case "InvalidResourcePolicyException":
        case "com.amazonaws.networkfirewall#InvalidResourcePolicyException":
            throw await de_InvalidResourcePolicyExceptionRes(parsedOutput, context);
        case "ResourceOwnerCheckException":
        case "com.amazonaws.networkfirewall#ResourceOwnerCheckException":
            throw await de_ResourceOwnerCheckExceptionRes(parsedOutput, context);
        case "LogDestinationPermissionException":
        case "com.amazonaws.networkfirewall#LogDestinationPermissionException":
            throw await de_LogDestinationPermissionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_InsufficientCapacityExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InsufficientCapacityException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidResourcePolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidResourcePolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LogDestinationPermissionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LogDestinationPermissionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceOwnerCheckExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceOwnerCheckException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateRuleGroupRequest = (input, context) => {
    return take(input, {
        AnalyzeRuleGroup: [],
        Capacity: [],
        Description: [],
        DryRun: [],
        EncryptionConfiguration: _json,
        RuleGroup: _json,
        RuleGroupName: [],
        Rules: [],
        SourceMetadata: _json,
        Tags: _json,
        Type: [],
    });
};
const se_UpdateRuleGroupRequest = (input, context) => {
    return take(input, {
        AnalyzeRuleGroup: [],
        Description: [],
        DryRun: [],
        EncryptionConfiguration: _json,
        RuleGroup: _json,
        RuleGroupArn: [],
        RuleGroupName: [],
        Rules: [],
        SourceMetadata: _json,
        Type: [],
        UpdateToken: [],
    });
};
const de_CreateFirewallPolicyResponse = (output, context) => {
    return take(output, {
        FirewallPolicyResponse: (_) => de_FirewallPolicyResponse(_, context),
        UpdateToken: __expectString,
    });
};
const de_CreateRuleGroupResponse = (output, context) => {
    return take(output, {
        RuleGroupResponse: (_) => de_RuleGroupResponse(_, context),
        UpdateToken: __expectString,
    });
};
const de_CreateTLSInspectionConfigurationResponse = (output, context) => {
    return take(output, {
        TLSInspectionConfigurationResponse: (_) => de_TLSInspectionConfigurationResponse(_, context),
        UpdateToken: __expectString,
    });
};
const de_DeleteFirewallPolicyResponse = (output, context) => {
    return take(output, {
        FirewallPolicyResponse: (_) => de_FirewallPolicyResponse(_, context),
    });
};
const de_DeleteRuleGroupResponse = (output, context) => {
    return take(output, {
        RuleGroupResponse: (_) => de_RuleGroupResponse(_, context),
    });
};
const de_DeleteTLSInspectionConfigurationResponse = (output, context) => {
    return take(output, {
        TLSInspectionConfigurationResponse: (_) => de_TLSInspectionConfigurationResponse(_, context),
    });
};
const de_DescribeFirewallPolicyResponse = (output, context) => {
    return take(output, {
        FirewallPolicy: _json,
        FirewallPolicyResponse: (_) => de_FirewallPolicyResponse(_, context),
        UpdateToken: __expectString,
    });
};
const de_DescribeRuleGroupMetadataResponse = (output, context) => {
    return take(output, {
        Capacity: __expectInt32,
        Description: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RuleGroupArn: __expectString,
        RuleGroupName: __expectString,
        StatefulRuleOptions: _json,
        Type: __expectString,
    });
};
const de_DescribeRuleGroupResponse = (output, context) => {
    return take(output, {
        RuleGroup: _json,
        RuleGroupResponse: (_) => de_RuleGroupResponse(_, context),
        UpdateToken: __expectString,
    });
};
const de_DescribeTLSInspectionConfigurationResponse = (output, context) => {
    return take(output, {
        TLSInspectionConfiguration: _json,
        TLSInspectionConfigurationResponse: (_) => de_TLSInspectionConfigurationResponse(_, context),
        UpdateToken: __expectString,
    });
};
const de_FirewallPolicyResponse = (output, context) => {
    return take(output, {
        ConsumedStatefulRuleCapacity: __expectInt32,
        ConsumedStatelessRuleCapacity: __expectInt32,
        Description: __expectString,
        EncryptionConfiguration: _json,
        FirewallPolicyArn: __expectString,
        FirewallPolicyId: __expectString,
        FirewallPolicyName: __expectString,
        FirewallPolicyStatus: __expectString,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NumberOfAssociations: __expectInt32,
        Tags: _json,
    });
};
const de_RuleGroupResponse = (output, context) => {
    return take(output, {
        AnalysisResults: _json,
        Capacity: __expectInt32,
        ConsumedCapacity: __expectInt32,
        Description: __expectString,
        EncryptionConfiguration: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NumberOfAssociations: __expectInt32,
        RuleGroupArn: __expectString,
        RuleGroupId: __expectString,
        RuleGroupName: __expectString,
        RuleGroupStatus: __expectString,
        SnsTopic: __expectString,
        SourceMetadata: _json,
        Tags: _json,
        Type: __expectString,
    });
};
const de_TLSInspectionConfigurationResponse = (output, context) => {
    return take(output, {
        CertificateAuthority: _json,
        Certificates: _json,
        Description: __expectString,
        EncryptionConfiguration: _json,
        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        NumberOfAssociations: __expectInt32,
        TLSInspectionConfigurationArn: __expectString,
        TLSInspectionConfigurationId: __expectString,
        TLSInspectionConfigurationName: __expectString,
        TLSInspectionConfigurationStatus: __expectString,
        Tags: _json,
    });
};
const de_UpdateFirewallPolicyResponse = (output, context) => {
    return take(output, {
        FirewallPolicyResponse: (_) => de_FirewallPolicyResponse(_, context),
        UpdateToken: __expectString,
    });
};
const de_UpdateRuleGroupResponse = (output, context) => {
    return take(output, {
        RuleGroupResponse: (_) => de_RuleGroupResponse(_, context),
        UpdateToken: __expectString,
    });
};
const de_UpdateTLSInspectionConfigurationResponse = (output, context) => {
    return take(output, {
        TLSInspectionConfigurationResponse: (_) => de_TLSInspectionConfigurationResponse(_, context),
        UpdateToken: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `NetworkFirewall_20201112.${operation}`,
    };
}
