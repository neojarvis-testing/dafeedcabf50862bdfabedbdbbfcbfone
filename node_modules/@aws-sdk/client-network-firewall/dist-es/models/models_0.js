import { NetworkFirewallServiceException as __BaseException } from "./NetworkFirewallServiceException";
export const IdentifiedType = {
    STATELESS_RULE_CONTAINS_TCP_FLAGS: "STATELESS_RULE_CONTAINS_TCP_FLAGS",
    STATELESS_RULE_FORWARDING_ASYMMETRICALLY: "STATELESS_RULE_FORWARDING_ASYMMETRICALLY",
};
export class InternalServerError extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidOperationException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidOperationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOperationException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidRequestException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidTokenException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidTokenException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
export const IPAddressType = {
    DUALSTACK: "DUALSTACK",
    IPV4: "IPV4",
    IPV6: "IPV6",
};
export class InsufficientCapacityException extends __BaseException {
    constructor(opts) {
        super({
            name: "InsufficientCapacityException",
            $fault: "server",
            ...opts,
        });
        this.name = "InsufficientCapacityException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InsufficientCapacityException.prototype);
        this.Message = opts.Message;
    }
}
export const AttachmentStatus = {
    CREATING: "CREATING",
    DELETING: "DELETING",
    ERROR: "ERROR",
    FAILED: "FAILED",
    READY: "READY",
    SCALING: "SCALING",
};
export const RevocationCheckAction = {
    DROP: "DROP",
    PASS: "PASS",
    REJECT: "REJECT",
};
export const ConfigurationSyncState = {
    CAPACITY_CONSTRAINED: "CAPACITY_CONSTRAINED",
    IN_SYNC: "IN_SYNC",
    PENDING: "PENDING",
};
export const EncryptionType = {
    AWS_OWNED_KMS_KEY: "AWS_OWNED_KMS_KEY",
    CUSTOMER_KMS: "CUSTOMER_KMS",
};
export const FirewallStatusValue = {
    DELETING: "DELETING",
    PROVISIONING: "PROVISIONING",
    READY: "READY",
};
export const PerObjectSyncStatus = {
    CAPACITY_CONSTRAINED: "CAPACITY_CONSTRAINED",
    IN_SYNC: "IN_SYNC",
    PENDING: "PENDING",
};
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
export const RuleOrder = {
    DEFAULT_ACTION_ORDER: "DEFAULT_ACTION_ORDER",
    STRICT_ORDER: "STRICT_ORDER",
};
export const StreamExceptionPolicy = {
    CONTINUE: "CONTINUE",
    DROP: "DROP",
    REJECT: "REJECT",
};
export const OverrideAction = {
    DROP_TO_ALERT: "DROP_TO_ALERT",
};
export const ResourceStatus = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
    ERROR: "ERROR",
};
export const GeneratedRulesType = {
    ALLOWLIST: "ALLOWLIST",
    DENYLIST: "DENYLIST",
};
export const TargetType = {
    HTTP_HOST: "HTTP_HOST",
    TLS_SNI: "TLS_SNI",
};
export const StatefulAction = {
    ALERT: "ALERT",
    DROP: "DROP",
    PASS: "PASS",
    REJECT: "REJECT",
};
export const StatefulRuleDirection = {
    ANY: "ANY",
    FORWARD: "FORWARD",
};
export const StatefulRuleProtocol = {
    ANY: "IP",
    DCERPC: "DCERPC",
    DHCP: "DHCP",
    DNS: "DNS",
    FTP: "FTP",
    HTTP: "HTTP",
    ICMP: "ICMP",
    IKEV2: "IKEV2",
    IMAP: "IMAP",
    KRB5: "KRB5",
    MSN: "MSN",
    NTP: "NTP",
    SMB: "SMB",
    SMTP: "SMTP",
    SSH: "SSH",
    TCP: "TCP",
    TFTP: "TFTP",
    TLS: "TLS",
    UDP: "UDP",
};
export const TCPFlag = {
    ACK: "ACK",
    CWR: "CWR",
    ECE: "ECE",
    FIN: "FIN",
    PSH: "PSH",
    RST: "RST",
    SYN: "SYN",
    URG: "URG",
};
export const RuleGroupType = {
    STATEFUL: "STATEFUL",
    STATELESS: "STATELESS",
};
export class UnsupportedOperationException extends __BaseException {
    constructor(opts) {
        super({
            name: "UnsupportedOperationException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedOperationException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidResourcePolicyException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidResourcePolicyException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidResourcePolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourcePolicyException.prototype);
        this.Message = opts.Message;
    }
}
export const LogDestinationType = {
    CLOUDWATCH_LOGS: "CloudWatchLogs",
    KINESIS_DATA_FIREHOSE: "KinesisDataFirehose",
    S3: "S3",
};
export const LogType = {
    ALERT: "ALERT",
    FLOW: "FLOW",
};
export const ResourceManagedType = {
    AWS_MANAGED_DOMAIN_LISTS: "AWS_MANAGED_DOMAIN_LISTS",
    AWS_MANAGED_THREAT_SIGNATURES: "AWS_MANAGED_THREAT_SIGNATURES",
};
export const ResourceManagedStatus = {
    ACCOUNT: "ACCOUNT",
    MANAGED: "MANAGED",
};
export class LogDestinationPermissionException extends __BaseException {
    constructor(opts) {
        super({
            name: "LogDestinationPermissionException",
            $fault: "client",
            ...opts,
        });
        this.name = "LogDestinationPermissionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LogDestinationPermissionException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceOwnerCheckException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceOwnerCheckException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceOwnerCheckException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceOwnerCheckException.prototype);
        this.Message = opts.Message;
    }
}
