var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  streamReader: () => streamReader
});
module.exports = __toCommonJS(src_exports);
function streamReader(stream, onChunk, chunkSize = 1048576) {
  return new Promise((resolve, reject) => {
    let temporaryBuffer;
    stream.on("error", reject);
    stream.on("end", () => {
      if (temporaryBuffer == null ? void 0 : temporaryBuffer.byteLength) {
        for (let i = 0; i < temporaryBuffer.byteLength; i += chunkSize) {
          onChunk(temporaryBuffer.subarray(i, Math.min(i + chunkSize, temporaryBuffer.byteLength)));
        }
        temporaryBuffer = void 0;
      }
      resolve();
    });
    stream.on("data", (chunk) => {
      if (!temporaryBuffer) {
        temporaryBuffer = chunk;
      } else {
        temporaryBuffer = mergeUint8Arrays(temporaryBuffer, chunk);
      }
      let pointer = 0;
      while (temporaryBuffer.byteLength - pointer >= chunkSize) {
        onChunk(temporaryBuffer.subarray(pointer, pointer + chunkSize));
        pointer += chunkSize;
      }
      temporaryBuffer = temporaryBuffer.subarray(pointer);
    });
    stream.resume();
  });
}
__name(streamReader, "streamReader");
function mergeUint8Arrays(a, b) {
  const result = new Uint8Array(a.byteLength + b.byteLength);
  result.set(a);
  result.set(b, a.byteLength);
  return result;
}
__name(mergeUint8Arrays, "mergeUint8Arrays");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  streamReader
});

