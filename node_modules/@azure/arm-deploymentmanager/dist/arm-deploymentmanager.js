/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmDeploymentmanager = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var Identity = {
        serializedName: "Identity",
        type: {
            name: "Composite",
            className: "Identity",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                identityIds: {
                    required: true,
                    serializedName: "identityIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var PrePostStep = {
        serializedName: "PrePostStep",
        type: {
            name: "Composite",
            className: "PrePostStep",
            modelProperties: {
                stepId: {
                    required: true,
                    serializedName: "stepId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StepGroup = {
        serializedName: "StepGroup",
        type: {
            name: "Composite",
            className: "StepGroup",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                dependsOnStepGroups: {
                    serializedName: "dependsOnStepGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                preDeploymentSteps: {
                    serializedName: "preDeploymentSteps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrePostStep"
                            }
                        }
                    }
                },
                deploymentTargetId: {
                    required: true,
                    serializedName: "deploymentTargetId",
                    type: {
                        name: "String"
                    }
                },
                postDeploymentSteps: {
                    serializedName: "postDeploymentSteps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PrePostStep"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }, location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var RolloutRequest = {
        serializedName: "RolloutRequest",
        type: {
            name: "Composite",
            className: "RolloutRequest",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { identity: {
                    required: true,
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                }, buildVersion: {
                    required: true,
                    serializedName: "properties.buildVersion",
                    type: {
                        name: "String"
                    }
                }, artifactSourceId: {
                    serializedName: "properties.artifactSourceId",
                    type: {
                        name: "String"
                    }
                }, targetServiceTopologyId: {
                    required: true,
                    serializedName: "properties.targetServiceTopologyId",
                    type: {
                        name: "String"
                    }
                }, stepGroups: {
                    required: true,
                    serializedName: "properties.stepGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StepGroup"
                            }
                        }
                    }
                } })
        }
    };
    var ArtifactSource = {
        serializedName: "ArtifactSource",
        type: {
            name: "Composite",
            className: "ArtifactSource",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { sourceType: {
                    required: true,
                    serializedName: "properties.sourceType",
                    type: {
                        name: "String"
                    }
                }, artifactRoot: {
                    serializedName: "properties.artifactRoot",
                    type: {
                        name: "String"
                    }
                }, authentication: {
                    required: true,
                    serializedName: "properties.authentication",
                    type: {
                        name: "Composite",
                        className: "Authentication"
                    }
                } })
        }
    };
    var Authentication = {
        serializedName: "Authentication",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "Authentication",
            className: "Authentication",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ArtifactSourcePropertiesModel = {
        serializedName: "ArtifactSourceProperties",
        type: {
            name: "Composite",
            className: "ArtifactSourcePropertiesModel",
            modelProperties: {
                sourceType: {
                    required: true,
                    serializedName: "sourceType",
                    type: {
                        name: "String"
                    }
                },
                artifactRoot: {
                    serializedName: "artifactRoot",
                    type: {
                        name: "String"
                    }
                },
                authentication: {
                    required: true,
                    serializedName: "authentication",
                    type: {
                        name: "Composite",
                        className: "Authentication"
                    }
                }
            }
        }
    };
    var SasAuthentication = {
        serializedName: "Sas",
        type: {
            name: "Composite",
            polymorphicDiscriminator: Authentication.type.polymorphicDiscriminator,
            uberParent: "Authentication",
            className: "SasAuthentication",
            modelProperties: __assign(__assign({}, Authentication.type.modelProperties), { sasUri: {
                    required: true,
                    serializedName: "properties.sasUri",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var CloudErrorBody = {
        serializedName: "CloudErrorBody",
        type: {
            name: "Composite",
            className: "CloudErrorBody",
            modelProperties: {
                code: {
                    readOnly: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                },
                target: {
                    serializedName: "target",
                    type: {
                        name: "String"
                    }
                },
                details: {
                    serializedName: "details",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "CloudErrorBody"
                            }
                        }
                    }
                }
            }
        }
    };
    var RolloutOperationInfo = {
        serializedName: "RolloutOperationInfo",
        type: {
            name: "Composite",
            className: "RolloutOperationInfo",
            modelProperties: {
                retryAttempt: {
                    readOnly: true,
                    serializedName: "retryAttempt",
                    type: {
                        name: "Number"
                    }
                },
                skipSucceededOnRetry: {
                    readOnly: true,
                    serializedName: "skipSucceededOnRetry",
                    type: {
                        name: "Boolean"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                error: {
                    readOnly: true,
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "CloudErrorBody"
                    }
                }
            }
        }
    };
    var StepOperationInfo = {
        serializedName: "StepOperationInfo",
        type: {
            name: "Composite",
            className: "StepOperationInfo",
            modelProperties: {
                deploymentName: {
                    readOnly: true,
                    serializedName: "deploymentName",
                    type: {
                        name: "String"
                    }
                },
                correlationId: {
                    readOnly: true,
                    serializedName: "correlationId",
                    type: {
                        name: "String"
                    }
                },
                startTime: {
                    readOnly: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    readOnly: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                lastUpdatedTime: {
                    readOnly: true,
                    serializedName: "lastUpdatedTime",
                    type: {
                        name: "DateTime"
                    }
                },
                error: {
                    serializedName: "error",
                    type: {
                        name: "Composite",
                        className: "CloudErrorBody"
                    }
                }
            }
        }
    };
    var ResourceOperation = {
        serializedName: "ResourceOperation",
        type: {
            name: "Composite",
            className: "ResourceOperation",
            modelProperties: {
                resourceName: {
                    serializedName: "resourceName",
                    type: {
                        name: "String"
                    }
                },
                operationId: {
                    readOnly: true,
                    serializedName: "operationId",
                    type: {
                        name: "String"
                    }
                },
                resourceType: {
                    serializedName: "resourceType",
                    type: {
                        name: "String"
                    }
                },
                provisioningState: {
                    readOnly: true,
                    serializedName: "provisioningState",
                    type: {
                        name: "String"
                    }
                },
                statusMessage: {
                    readOnly: true,
                    serializedName: "statusMessage",
                    type: {
                        name: "String"
                    }
                },
                statusCode: {
                    readOnly: true,
                    serializedName: "statusCode",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Message = {
        serializedName: "Message",
        type: {
            name: "Composite",
            className: "Message",
            modelProperties: {
                timeStamp: {
                    readOnly: true,
                    serializedName: "timeStamp",
                    type: {
                        name: "DateTime"
                    }
                },
                message: {
                    readOnly: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RolloutStep = {
        serializedName: "RolloutStep",
        type: {
            name: "Composite",
            className: "RolloutStep",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                stepGroup: {
                    serializedName: "stepGroup",
                    type: {
                        name: "String"
                    }
                },
                operationInfo: {
                    readOnly: true,
                    serializedName: "operationInfo",
                    type: {
                        name: "Composite",
                        className: "StepOperationInfo"
                    }
                },
                resourceOperations: {
                    readOnly: true,
                    serializedName: "resourceOperations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ResourceOperation"
                            }
                        }
                    }
                },
                messages: {
                    readOnly: true,
                    serializedName: "messages",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Message"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceUnitProperties = {
        serializedName: "ServiceUnitProperties",
        type: {
            name: "Composite",
            className: "ServiceUnitProperties",
            modelProperties: {
                targetResourceGroup: {
                    required: true,
                    serializedName: "targetResourceGroup",
                    type: {
                        name: "String"
                    }
                },
                deploymentMode: {
                    required: true,
                    serializedName: "deploymentMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Incremental",
                            "Complete"
                        ]
                    }
                },
                artifacts: {
                    serializedName: "artifacts",
                    type: {
                        name: "Composite",
                        className: "ServiceUnitArtifacts"
                    }
                }
            }
        }
    };
    var ServiceUnit = {
        serializedName: "ServiceUnit",
        type: {
            name: "Composite",
            className: "ServiceUnit",
            modelProperties: __assign(__assign({}, ServiceUnitProperties.type.modelProperties), { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, steps: {
                    serializedName: "steps",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RolloutStep"
                            }
                        }
                    }
                } })
        }
    };
    var ServiceProperties = {
        serializedName: "ServiceProperties",
        type: {
            name: "Composite",
            className: "ServiceProperties",
            modelProperties: {
                targetLocation: {
                    required: true,
                    serializedName: "targetLocation",
                    type: {
                        name: "String"
                    }
                },
                targetSubscriptionId: {
                    required: true,
                    serializedName: "targetSubscriptionId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Service = {
        serializedName: "Service",
        type: {
            name: "Composite",
            className: "Service",
            modelProperties: __assign(__assign({}, ServiceProperties.type.modelProperties), { name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, serviceUnits: {
                    serializedName: "serviceUnits",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceUnit"
                            }
                        }
                    }
                } })
        }
    };
    var Rollout = {
        serializedName: "Rollout",
        type: {
            name: "Composite",
            className: "Rollout",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "Identity"
                    }
                }, buildVersion: {
                    required: true,
                    serializedName: "properties.buildVersion",
                    type: {
                        name: "String"
                    }
                }, artifactSourceId: {
                    serializedName: "properties.artifactSourceId",
                    type: {
                        name: "String"
                    }
                }, targetServiceTopologyId: {
                    required: true,
                    serializedName: "properties.targetServiceTopologyId",
                    type: {
                        name: "String"
                    }
                }, stepGroups: {
                    required: true,
                    serializedName: "properties.stepGroups",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StepGroup"
                            }
                        }
                    }
                }, status: {
                    readOnly: true,
                    serializedName: "properties.status",
                    type: {
                        name: "String"
                    }
                }, totalRetryAttempts: {
                    readOnly: true,
                    serializedName: "properties.totalRetryAttempts",
                    type: {
                        name: "Number"
                    }
                }, operationInfo: {
                    readOnly: true,
                    serializedName: "properties.operationInfo",
                    type: {
                        name: "Composite",
                        className: "RolloutOperationInfo"
                    }
                }, services: {
                    readOnly: true,
                    serializedName: "properties.services",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Service"
                            }
                        }
                    }
                } })
        }
    };
    var RolloutPropertiesModel = {
        serializedName: "RolloutProperties",
        type: {
            name: "Composite",
            className: "RolloutPropertiesModel",
            modelProperties: {
                status: {
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                totalRetryAttempts: {
                    readOnly: true,
                    serializedName: "totalRetryAttempts",
                    type: {
                        name: "Number"
                    }
                },
                operationInfo: {
                    readOnly: true,
                    serializedName: "operationInfo",
                    type: {
                        name: "Composite",
                        className: "RolloutOperationInfo"
                    }
                },
                services: {
                    readOnly: true,
                    serializedName: "services",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Service"
                            }
                        }
                    }
                }
            }
        }
    };
    var ServiceTopologyResource = {
        serializedName: "ServiceTopologyResource",
        type: {
            name: "Composite",
            className: "ServiceTopologyResource",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { artifactSourceId: {
                    serializedName: "properties.artifactSourceId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceTopologyProperties = {
        serializedName: "ServiceTopologyProperties",
        type: {
            name: "Composite",
            className: "ServiceTopologyProperties",
            modelProperties: {
                artifactSourceId: {
                    serializedName: "artifactSourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ServiceResource = {
        serializedName: "ServiceResource",
        type: {
            name: "Composite",
            className: "ServiceResource",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { targetLocation: {
                    required: true,
                    serializedName: "properties.targetLocation",
                    type: {
                        name: "String"
                    }
                }, targetSubscriptionId: {
                    required: true,
                    serializedName: "properties.targetSubscriptionId",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceUnitResource = {
        serializedName: "ServiceUnitResource",
        type: {
            name: "Composite",
            className: "ServiceUnitResource",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { targetResourceGroup: {
                    required: true,
                    serializedName: "properties.targetResourceGroup",
                    type: {
                        name: "String"
                    }
                }, deploymentMode: {
                    required: true,
                    serializedName: "properties.deploymentMode",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Incremental",
                            "Complete"
                        ]
                    }
                }, artifacts: {
                    serializedName: "properties.artifacts",
                    type: {
                        name: "Composite",
                        className: "ServiceUnitArtifacts"
                    }
                } })
        }
    };
    var ServiceUnitArtifacts = {
        serializedName: "ServiceUnitArtifacts",
        type: {
            name: "Composite",
            className: "ServiceUnitArtifacts",
            modelProperties: {
                templateUri: {
                    serializedName: "templateUri",
                    type: {
                        name: "String"
                    }
                },
                parametersUri: {
                    serializedName: "parametersUri",
                    type: {
                        name: "String"
                    }
                },
                templateArtifactSourceRelativePath: {
                    serializedName: "templateArtifactSourceRelativePath",
                    type: {
                        name: "String"
                    }
                },
                parametersArtifactSourceRelativePath: {
                    serializedName: "parametersArtifactSourceRelativePath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationDetail = {
        serializedName: "OperationDetail",
        type: {
            name: "Composite",
            className: "OperationDetail",
            modelProperties: {
                provider: {
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDetail"
                    }
                },
                origin: {
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    serializedName: "properties",
                    type: {
                        name: "Object"
                    }
                }
            }
        }
    };
    var OperationsList = {
        serializedName: "OperationsList",
        type: {
            name: "Composite",
            className: "OperationsList",
            modelProperties: {
                value: {
                    serializedName: "value",
                    type: {
                        name: "Composite",
                        className: "Operation"
                    }
                }
            }
        }
    };
    var StepProperties = {
        serializedName: "StepProperties",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "stepType",
                clientName: "stepType"
            },
            uberParent: "StepProperties",
            className: "StepProperties",
            modelProperties: {
                stepType: {
                    required: true,
                    serializedName: "stepType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StepResource = {
        serializedName: "StepResource",
        type: {
            name: "Composite",
            className: "StepResource",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { properties: {
                    required: true,
                    serializedName: "properties",
                    type: {
                        name: "Composite",
                        className: "StepProperties"
                    }
                } })
        }
    };
    var HealthCheckStepAttributes = {
        serializedName: "HealthCheckStepAttributes",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "HealthCheckStepAttributes",
            className: "HealthCheckStepAttributes",
            modelProperties: {
                waitDuration: {
                    serializedName: "waitDuration",
                    type: {
                        name: "String"
                    }
                },
                maxElasticDuration: {
                    serializedName: "maxElasticDuration",
                    type: {
                        name: "String"
                    }
                },
                healthyStateDuration: {
                    required: true,
                    serializedName: "healthyStateDuration",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var HealthCheckStepProperties = {
        serializedName: "HealthCheck",
        type: {
            name: "Composite",
            polymorphicDiscriminator: StepProperties.type.polymorphicDiscriminator,
            uberParent: "StepProperties",
            className: "HealthCheckStepProperties",
            modelProperties: __assign(__assign({}, StepProperties.type.modelProperties), { attributes: {
                    required: true,
                    serializedName: "attributes",
                    type: {
                        name: "Composite",
                        className: "HealthCheckStepAttributes"
                    }
                } })
        }
    };
    var RestRequestAuthentication = {
        serializedName: "RestRequestAuthentication",
        type: {
            name: "Composite",
            polymorphicDiscriminator: {
                serializedName: "type",
                clientName: "type"
            },
            uberParent: "RestRequestAuthentication",
            className: "RestRequestAuthentication",
            modelProperties: {
                type: {
                    required: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RestRequest = {
        serializedName: "RestRequest",
        type: {
            name: "Composite",
            className: "RestRequest",
            modelProperties: {
                method: {
                    required: true,
                    serializedName: "method",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "GET",
                            "POST"
                        ]
                    }
                },
                uri: {
                    required: true,
                    serializedName: "uri",
                    type: {
                        name: "String"
                    }
                },
                authentication: {
                    required: true,
                    serializedName: "authentication",
                    type: {
                        name: "Composite",
                        className: "RestRequestAuthentication"
                    }
                }
            }
        }
    };
    var RestResponseRegex = {
        serializedName: "RestResponse_regex",
        type: {
            name: "Composite",
            className: "RestResponseRegex",
            modelProperties: {
                matches: {
                    serializedName: "matches",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                matchQuantifier: {
                    serializedName: "matchQuantifier",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "All",
                            "Any"
                        ]
                    }
                }
            }
        }
    };
    var RestResponse = {
        serializedName: "RestResponse",
        type: {
            name: "Composite",
            className: "RestResponse",
            modelProperties: {
                successStatusCodes: {
                    serializedName: "successStatusCodes",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                regex: {
                    serializedName: "regex",
                    type: {
                        name: "Composite",
                        className: "RestResponseRegex"
                    }
                }
            }
        }
    };
    var RestHealthCheck = {
        serializedName: "RestHealthCheck",
        type: {
            name: "Composite",
            className: "RestHealthCheck",
            modelProperties: {
                name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                request: {
                    required: true,
                    serializedName: "request",
                    type: {
                        name: "Composite",
                        className: "RestRequest"
                    }
                },
                response: {
                    serializedName: "response",
                    type: {
                        name: "Composite",
                        className: "RestResponse"
                    }
                }
            }
        }
    };
    var RestHealthCheckStepAttributes = {
        serializedName: "REST",
        type: {
            name: "Composite",
            polymorphicDiscriminator: HealthCheckStepAttributes.type.polymorphicDiscriminator,
            uberParent: "HealthCheckStepAttributes",
            className: "RestHealthCheckStepAttributes",
            modelProperties: __assign(__assign({}, HealthCheckStepAttributes.type.modelProperties), { healthChecks: {
                    required: true,
                    serializedName: "properties.healthChecks",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RestHealthCheck"
                            }
                        }
                    }
                } })
        }
    };
    var RolloutIdentityAuthentication = {
        serializedName: "RolloutIdentity",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RestRequestAuthentication.type.polymorphicDiscriminator,
            uberParent: "RestRequestAuthentication",
            className: "RolloutIdentityAuthentication",
            modelProperties: __assign({}, RestRequestAuthentication.type.modelProperties)
        }
    };
    var ApiKeyAuthentication = {
        serializedName: "ApiKey",
        type: {
            name: "Composite",
            polymorphicDiscriminator: RestRequestAuthentication.type.polymorphicDiscriminator,
            uberParent: "RestRequestAuthentication",
            className: "ApiKeyAuthentication",
            modelProperties: __assign(__assign({}, RestRequestAuthentication.type.modelProperties), { name: {
                    required: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                }, inProperty: {
                    required: true,
                    serializedName: "in",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Query",
                            "Header"
                        ]
                    }
                }, value: {
                    required: true,
                    serializedName: "value",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var WaitStepAttributes = {
        serializedName: "WaitStepAttributes",
        type: {
            name: "Composite",
            className: "WaitStepAttributes",
            modelProperties: {
                duration: {
                    required: true,
                    serializedName: "duration",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var WaitStepProperties = {
        serializedName: "Wait",
        type: {
            name: "Composite",
            polymorphicDiscriminator: StepProperties.type.polymorphicDiscriminator,
            uberParent: "StepProperties",
            className: "WaitStepProperties",
            modelProperties: __assign(__assign({}, StepProperties.type.modelProperties), { attributes: {
                    required: true,
                    serializedName: "attributes",
                    type: {
                        name: "Composite",
                        className: "WaitStepAttributes"
                    }
                } })
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var AzureEntityResource = {
        serializedName: "AzureEntityResource",
        type: {
            name: "Composite",
            className: "AzureEntityResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { etag: {
                    readOnly: true,
                    serializedName: "etag",
                    type: {
                        name: "String"
                    }
                } })
        }
    };
    var ServiceUnitsCreateOrUpdateHeaders = {
        serializedName: "serviceunits-createorupdate-headers",
        type: {
            name: "Composite",
            className: "ServiceUnitsCreateOrUpdateHeaders",
            modelProperties: {
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var RolloutsCreateOrUpdateHeaders = {
        serializedName: "rollouts-createorupdate-headers",
        type: {
            name: "Composite",
            className: "RolloutsCreateOrUpdateHeaders",
            modelProperties: {
                azureAsyncOperation: {
                    serializedName: "azure-asyncoperation",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var discriminators = {
        'Authentication': Authentication,
        'Authentication.Sas': SasAuthentication,
        'StepProperties': StepProperties,
        'HealthCheckStepAttributes': HealthCheckStepAttributes,
        'StepProperties.HealthCheck': HealthCheckStepProperties,
        'RestRequestAuthentication': RestRequestAuthentication,
        'HealthCheckStepAttributes.REST': RestHealthCheckStepAttributes,
        'RestRequestAuthentication.RolloutIdentity': RolloutIdentityAuthentication,
        'RestRequestAuthentication.ApiKey': ApiKeyAuthentication,
        'StepProperties.Wait': WaitStepProperties
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        Identity: Identity,
        PrePostStep: PrePostStep,
        StepGroup: StepGroup,
        Resource: Resource,
        TrackedResource: TrackedResource,
        RolloutRequest: RolloutRequest,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        ArtifactSourcePropertiesModel: ArtifactSourcePropertiesModel,
        SasAuthentication: SasAuthentication,
        CloudErrorBody: CloudErrorBody,
        RolloutOperationInfo: RolloutOperationInfo,
        StepOperationInfo: StepOperationInfo,
        ResourceOperation: ResourceOperation,
        Message: Message,
        RolloutStep: RolloutStep,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnit: ServiceUnit,
        ServiceProperties: ServiceProperties,
        Service: Service,
        Rollout: Rollout,
        RolloutPropertiesModel: RolloutPropertiesModel,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceTopologyProperties: ServiceTopologyProperties,
        ServiceResource: ServiceResource,
        ServiceUnitResource: ServiceUnitResource,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        OperationDetail: OperationDetail,
        Operation: Operation,
        OperationsList: OperationsList,
        StepProperties: StepProperties,
        StepResource: StepResource,
        HealthCheckStepAttributes: HealthCheckStepAttributes,
        HealthCheckStepProperties: HealthCheckStepProperties,
        RestRequestAuthentication: RestRequestAuthentication,
        RestRequest: RestRequest,
        RestResponseRegex: RestResponseRegex,
        RestResponse: RestResponse,
        RestHealthCheck: RestHealthCheck,
        RestHealthCheckStepAttributes: RestHealthCheckStepAttributes,
        RolloutIdentityAuthentication: RolloutIdentityAuthentication,
        ApiKeyAuthentication: ApiKeyAuthentication,
        WaitStepAttributes: WaitStepAttributes,
        WaitStepProperties: WaitStepProperties,
        ProxyResource: ProxyResource,
        AzureEntityResource: AzureEntityResource,
        ServiceUnitsCreateOrUpdateHeaders: ServiceUnitsCreateOrUpdateHeaders,
        RolloutsCreateOrUpdateHeaders: RolloutsCreateOrUpdateHeaders,
        discriminators: discriminators
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiKeyAuthentication: ApiKeyAuthentication,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        HealthCheckStepAttributes: HealthCheckStepAttributes,
        HealthCheckStepProperties: HealthCheckStepProperties,
        Identity: Identity,
        Message: Message,
        PrePostStep: PrePostStep,
        ProxyResource: ProxyResource,
        Resource: Resource,
        ResourceOperation: ResourceOperation,
        RestHealthCheck: RestHealthCheck,
        RestHealthCheckStepAttributes: RestHealthCheckStepAttributes,
        RestRequest: RestRequest,
        RestRequestAuthentication: RestRequestAuthentication,
        RestResponse: RestResponse,
        RestResponseRegex: RestResponseRegex,
        Rollout: Rollout,
        RolloutIdentityAuthentication: RolloutIdentityAuthentication,
        RolloutOperationInfo: RolloutOperationInfo,
        RolloutRequest: RolloutRequest,
        RolloutStep: RolloutStep,
        SasAuthentication: SasAuthentication,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceResource: ServiceResource,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceUnit: ServiceUnit,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitResource: ServiceUnitResource,
        StepGroup: StepGroup,
        StepOperationInfo: StepOperationInfo,
        StepProperties: StepProperties,
        StepResource: StepResource,
        TrackedResource: TrackedResource,
        WaitStepAttributes: WaitStepAttributes,
        WaitStepProperties: WaitStepProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var artifactSourceName = {
        parameterPath: "artifactSourceName",
        mapper: {
            required: true,
            serializedName: "artifactSourceName",
            type: {
                name: "String"
            }
        }
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            constraints: {
                MaxLength: 90,
                MinLength: 1,
                Pattern: /^[-\w\._\(\)]+$/
            },
            type: {
                name: "String"
            }
        }
    };
    var retryAttempt = {
        parameterPath: [
            "options",
            "retryAttempt"
        ],
        mapper: {
            serializedName: "retryAttempt",
            type: {
                name: "Number"
            }
        }
    };
    var rolloutName = {
        parameterPath: "rolloutName",
        mapper: {
            required: true,
            serializedName: "rolloutName",
            type: {
                name: "String"
            }
        }
    };
    var serviceName = {
        parameterPath: "serviceName",
        mapper: {
            required: true,
            serializedName: "serviceName",
            type: {
                name: "String"
            }
        }
    };
    var serviceTopologyName = {
        parameterPath: "serviceTopologyName",
        mapper: {
            required: true,
            serializedName: "serviceTopologyName",
            type: {
                name: "String"
            }
        }
    };
    var serviceUnitName = {
        parameterPath: "serviceUnitName",
        mapper: {
            required: true,
            serializedName: "serviceUnitName",
            type: {
                name: "String"
            }
        }
    };
    var skipSucceeded = {
        parameterPath: [
            "options",
            "skipSucceeded"
        ],
        mapper: {
            serializedName: "skipSucceeded",
            type: {
                name: "Boolean"
            }
        }
    };
    var stepName = {
        parameterPath: "stepName",
        mapper: {
            required: true,
            serializedName: "stepName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceTopologies. */
    var ServiceTopologies = /** @class */ (function () {
        /**
         * Create a ServiceTopologies.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function ServiceTopologies(client) {
            this.client = client;
        }
        ServiceTopologies.prototype.createOrUpdate = function (serviceTopologyInfo, resourceGroupName, serviceTopologyName, options, callback) {
            return this.client.sendOperationRequest({
                serviceTopologyInfo: serviceTopologyInfo,
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                options: options
            }, createOrUpdateOperationSpec, callback);
        };
        ServiceTopologies.prototype.get = function (resourceGroupName, serviceTopologyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                options: options
            }, getOperationSpec, callback);
        };
        ServiceTopologies.prototype.deleteMethod = function (resourceGroupName, serviceTopologyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                options: options
            }, deleteMethodOperationSpec, callback);
        };
        ServiceTopologies.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec, callback);
        };
        return ServiceTopologies;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var createOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serviceTopologyInfo",
            mapper: __assign(__assign({}, ServiceTopologyResource), { required: true })
        },
        responses: {
            201: {
                bodyMapper: ServiceTopologyResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceTopologyResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var deleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceTopologyResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiKeyAuthentication: ApiKeyAuthentication,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        HealthCheckStepAttributes: HealthCheckStepAttributes,
        HealthCheckStepProperties: HealthCheckStepProperties,
        Identity: Identity,
        Message: Message,
        PrePostStep: PrePostStep,
        ProxyResource: ProxyResource,
        Resource: Resource,
        ResourceOperation: ResourceOperation,
        RestHealthCheck: RestHealthCheck,
        RestHealthCheckStepAttributes: RestHealthCheckStepAttributes,
        RestRequest: RestRequest,
        RestRequestAuthentication: RestRequestAuthentication,
        RestResponse: RestResponse,
        RestResponseRegex: RestResponseRegex,
        Rollout: Rollout,
        RolloutIdentityAuthentication: RolloutIdentityAuthentication,
        RolloutOperationInfo: RolloutOperationInfo,
        RolloutRequest: RolloutRequest,
        RolloutStep: RolloutStep,
        SasAuthentication: SasAuthentication,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceResource: ServiceResource,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceUnit: ServiceUnit,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitResource: ServiceUnitResource,
        StepGroup: StepGroup,
        StepOperationInfo: StepOperationInfo,
        StepProperties: StepProperties,
        StepResource: StepResource,
        TrackedResource: TrackedResource,
        WaitStepAttributes: WaitStepAttributes,
        WaitStepProperties: WaitStepProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Services. */
    var Services = /** @class */ (function () {
        /**
         * Create a Services.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function Services(client) {
            this.client = client;
        }
        Services.prototype.createOrUpdate = function (resourceGroupName, serviceTopologyName, serviceName, serviceInfo, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                serviceName: serviceName,
                serviceInfo: serviceInfo,
                options: options
            }, createOrUpdateOperationSpec$1, callback);
        };
        Services.prototype.get = function (resourceGroupName, serviceTopologyName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                serviceName: serviceName,
                options: options
            }, getOperationSpec$1, callback);
        };
        Services.prototype.deleteMethod = function (resourceGroupName, serviceTopologyName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                serviceName: serviceName,
                options: options
            }, deleteMethodOperationSpec$1, callback);
        };
        Services.prototype.list = function (resourceGroupName, serviceTopologyName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                options: options
            }, listOperationSpec$1, callback);
        };
        return Services;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var createOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serviceInfo",
            mapper: __assign(__assign({}, ServiceResource), { required: true })
        },
        responses: {
            201: {
                bodyMapper: ServiceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var deleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiKeyAuthentication: ApiKeyAuthentication,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        HealthCheckStepAttributes: HealthCheckStepAttributes,
        HealthCheckStepProperties: HealthCheckStepProperties,
        Identity: Identity,
        Message: Message,
        PrePostStep: PrePostStep,
        ProxyResource: ProxyResource,
        Resource: Resource,
        ResourceOperation: ResourceOperation,
        RestHealthCheck: RestHealthCheck,
        RestHealthCheckStepAttributes: RestHealthCheckStepAttributes,
        RestRequest: RestRequest,
        RestRequestAuthentication: RestRequestAuthentication,
        RestResponse: RestResponse,
        RestResponseRegex: RestResponseRegex,
        Rollout: Rollout,
        RolloutIdentityAuthentication: RolloutIdentityAuthentication,
        RolloutOperationInfo: RolloutOperationInfo,
        RolloutRequest: RolloutRequest,
        RolloutStep: RolloutStep,
        SasAuthentication: SasAuthentication,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceResource: ServiceResource,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceUnit: ServiceUnit,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitResource: ServiceUnitResource,
        ServiceUnitsCreateOrUpdateHeaders: ServiceUnitsCreateOrUpdateHeaders,
        StepGroup: StepGroup,
        StepOperationInfo: StepOperationInfo,
        StepProperties: StepProperties,
        StepResource: StepResource,
        TrackedResource: TrackedResource,
        WaitStepAttributes: WaitStepAttributes,
        WaitStepProperties: WaitStepProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ServiceUnits. */
    var ServiceUnits = /** @class */ (function () {
        /**
         * Create a ServiceUnits.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function ServiceUnits(client) {
            this.client = client;
        }
        /**
         * This is an asynchronous operation and can be polled to completion using the operation resource
         * returned by this operation.
         * @summary Creates or updates a service unit under the service in the service topology.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param serviceTopologyName The name of the service topology .
         * @param serviceName The name of the service resource.
         * @param serviceUnitName The name of the service unit resource.
         * @param serviceUnitInfo The service unit resource object.
         * @param [options] The optional parameters
         * @returns Promise<Models.ServiceUnitsCreateOrUpdateResponse>
         */
        ServiceUnits.prototype.createOrUpdate = function (resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, serviceUnitInfo, options) {
            return this.beginCreateOrUpdate(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, serviceUnitInfo, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        ServiceUnits.prototype.get = function (resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                serviceName: serviceName,
                serviceUnitName: serviceUnitName,
                options: options
            }, getOperationSpec$2, callback);
        };
        ServiceUnits.prototype.deleteMethod = function (resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                serviceName: serviceName,
                serviceUnitName: serviceUnitName,
                options: options
            }, deleteMethodOperationSpec$2, callback);
        };
        ServiceUnits.prototype.list = function (resourceGroupName, serviceTopologyName, serviceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                serviceName: serviceName,
                options: options
            }, listOperationSpec$2, callback);
        };
        /**
         * This is an asynchronous operation and can be polled to completion using the operation resource
         * returned by this operation.
         * @summary Creates or updates a service unit under the service in the service topology.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param serviceTopologyName The name of the service topology .
         * @param serviceName The name of the service resource.
         * @param serviceUnitName The name of the service unit resource.
         * @param serviceUnitInfo The service unit resource object.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        ServiceUnits.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, serviceUnitInfo, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                serviceTopologyName: serviceTopologyName,
                serviceName: serviceName,
                serviceUnitName: serviceUnitName,
                serviceUnitInfo: serviceUnitInfo,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        return ServiceUnits;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName,
            serviceUnitName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ServiceUnitResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var deleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName,
            serviceUnitName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ServiceUnitResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            serviceTopologyName,
            serviceName,
            serviceUnitName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "serviceUnitInfo",
            mapper: __assign(__assign({}, ServiceUnitResource), { required: true })
        },
        responses: {
            201: {
                bodyMapper: ServiceUnitResource,
                headersMapper: ServiceUnitsCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiKeyAuthentication: ApiKeyAuthentication,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        HealthCheckStepAttributes: HealthCheckStepAttributes,
        HealthCheckStepProperties: HealthCheckStepProperties,
        Identity: Identity,
        Message: Message,
        PrePostStep: PrePostStep,
        ProxyResource: ProxyResource,
        Resource: Resource,
        ResourceOperation: ResourceOperation,
        RestHealthCheck: RestHealthCheck,
        RestHealthCheckStepAttributes: RestHealthCheckStepAttributes,
        RestRequest: RestRequest,
        RestRequestAuthentication: RestRequestAuthentication,
        RestResponse: RestResponse,
        RestResponseRegex: RestResponseRegex,
        Rollout: Rollout,
        RolloutIdentityAuthentication: RolloutIdentityAuthentication,
        RolloutOperationInfo: RolloutOperationInfo,
        RolloutRequest: RolloutRequest,
        RolloutStep: RolloutStep,
        SasAuthentication: SasAuthentication,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceResource: ServiceResource,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceUnit: ServiceUnit,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitResource: ServiceUnitResource,
        StepGroup: StepGroup,
        StepOperationInfo: StepOperationInfo,
        StepProperties: StepProperties,
        StepResource: StepResource,
        TrackedResource: TrackedResource,
        WaitStepAttributes: WaitStepAttributes,
        WaitStepProperties: WaitStepProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Steps. */
    var Steps = /** @class */ (function () {
        /**
         * Create a Steps.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function Steps(client) {
            this.client = client;
        }
        Steps.prototype.createOrUpdate = function (resourceGroupName, stepName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                stepName: stepName,
                options: options
            }, createOrUpdateOperationSpec$2, callback);
        };
        Steps.prototype.get = function (resourceGroupName, stepName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                stepName: stepName,
                options: options
            }, getOperationSpec$3, callback);
        };
        Steps.prototype.deleteMethod = function (resourceGroupName, stepName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                stepName: stepName,
                options: options
            }, deleteMethodOperationSpec$3, callback);
        };
        Steps.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec$3, callback);
        };
        return Steps;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var createOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            stepName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "stepInfo"
            ],
            mapper: StepResource
        },
        responses: {
            201: {
                bodyMapper: StepResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            stepName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: StepResource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var deleteMethodOperationSpec$3 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            stepName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$3 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StepResource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$4 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiKeyAuthentication: ApiKeyAuthentication,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        HealthCheckStepAttributes: HealthCheckStepAttributes,
        HealthCheckStepProperties: HealthCheckStepProperties,
        Identity: Identity,
        Message: Message,
        PrePostStep: PrePostStep,
        ProxyResource: ProxyResource,
        Resource: Resource,
        ResourceOperation: ResourceOperation,
        RestHealthCheck: RestHealthCheck,
        RestHealthCheckStepAttributes: RestHealthCheckStepAttributes,
        RestRequest: RestRequest,
        RestRequestAuthentication: RestRequestAuthentication,
        RestResponse: RestResponse,
        RestResponseRegex: RestResponseRegex,
        Rollout: Rollout,
        RolloutIdentityAuthentication: RolloutIdentityAuthentication,
        RolloutOperationInfo: RolloutOperationInfo,
        RolloutRequest: RolloutRequest,
        RolloutsCreateOrUpdateHeaders: RolloutsCreateOrUpdateHeaders,
        RolloutStep: RolloutStep,
        SasAuthentication: SasAuthentication,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceResource: ServiceResource,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceUnit: ServiceUnit,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitResource: ServiceUnitResource,
        StepGroup: StepGroup,
        StepOperationInfo: StepOperationInfo,
        StepProperties: StepProperties,
        StepResource: StepResource,
        TrackedResource: TrackedResource,
        WaitStepAttributes: WaitStepAttributes,
        WaitStepProperties: WaitStepProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Rollouts. */
    var Rollouts = /** @class */ (function () {
        /**
         * Create a Rollouts.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function Rollouts(client) {
            this.client = client;
        }
        /**
         * This is an asynchronous operation and can be polled to completion using the location header
         * returned by this operation.
         * @summary Creates or updates a rollout.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param rolloutName The rollout name.
         * @param [options] The optional parameters
         * @returns Promise<Models.RolloutsCreateOrUpdateResponse>
         */
        Rollouts.prototype.createOrUpdate = function (resourceGroupName, rolloutName, options) {
            return this.beginCreateOrUpdate(resourceGroupName, rolloutName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        Rollouts.prototype.get = function (resourceGroupName, rolloutName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                rolloutName: rolloutName,
                options: options
            }, getOperationSpec$4, callback);
        };
        Rollouts.prototype.deleteMethod = function (resourceGroupName, rolloutName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                rolloutName: rolloutName,
                options: options
            }, deleteMethodOperationSpec$4, callback);
        };
        Rollouts.prototype.cancel = function (resourceGroupName, rolloutName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                rolloutName: rolloutName,
                options: options
            }, cancelOperationSpec, callback);
        };
        Rollouts.prototype.restart = function (resourceGroupName, rolloutName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                rolloutName: rolloutName,
                options: options
            }, restartOperationSpec, callback);
        };
        Rollouts.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec$4, callback);
        };
        /**
         * This is an asynchronous operation and can be polled to completion using the location header
         * returned by this operation.
         * @summary Creates or updates a rollout.
         * @param resourceGroupName The name of the resource group. The name is case insensitive.
         * @param rolloutName The rollout name.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        Rollouts.prototype.beginCreateOrUpdate = function (resourceGroupName, rolloutName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                rolloutName: rolloutName,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        return Rollouts;
    }());
    // Operation Specifications
    var serializer$4 = new msRest.Serializer(Mappers$4);
    var getOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            rolloutName
        ],
        queryParameters: [
            apiVersion,
            retryAttempt
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Rollout
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var deleteMethodOperationSpec$4 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            rolloutName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var cancelOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/cancel",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            rolloutName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Rollout
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var restartOperationSpec = {
        httpMethod: "POST",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/restart",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            rolloutName
        ],
        queryParameters: [
            skipSucceeded,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: Rollout
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var listOperationSpec$4 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Rollout"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            rolloutName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "rolloutRequest"
            ],
            mapper: RolloutRequest
        },
        responses: {
            201: {
                bodyMapper: RolloutRequest,
                headersMapper: RolloutsCreateOrUpdateHeaders
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$4
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        ApiKeyAuthentication: ApiKeyAuthentication,
        ArtifactSource: ArtifactSource,
        Authentication: Authentication,
        AzureEntityResource: AzureEntityResource,
        BaseResource: BaseResource,
        CloudError: CloudError,
        HealthCheckStepAttributes: HealthCheckStepAttributes,
        HealthCheckStepProperties: HealthCheckStepProperties,
        Identity: Identity,
        Message: Message,
        PrePostStep: PrePostStep,
        ProxyResource: ProxyResource,
        Resource: Resource,
        ResourceOperation: ResourceOperation,
        RestHealthCheck: RestHealthCheck,
        RestHealthCheckStepAttributes: RestHealthCheckStepAttributes,
        RestRequest: RestRequest,
        RestRequestAuthentication: RestRequestAuthentication,
        RestResponse: RestResponse,
        RestResponseRegex: RestResponseRegex,
        Rollout: Rollout,
        RolloutIdentityAuthentication: RolloutIdentityAuthentication,
        RolloutOperationInfo: RolloutOperationInfo,
        RolloutRequest: RolloutRequest,
        RolloutStep: RolloutStep,
        SasAuthentication: SasAuthentication,
        Service: Service,
        ServiceProperties: ServiceProperties,
        ServiceResource: ServiceResource,
        ServiceTopologyResource: ServiceTopologyResource,
        ServiceUnit: ServiceUnit,
        ServiceUnitArtifacts: ServiceUnitArtifacts,
        ServiceUnitProperties: ServiceUnitProperties,
        ServiceUnitResource: ServiceUnitResource,
        StepGroup: StepGroup,
        StepOperationInfo: StepOperationInfo,
        StepProperties: StepProperties,
        StepResource: StepResource,
        TrackedResource: TrackedResource,
        WaitStepAttributes: WaitStepAttributes,
        WaitStepProperties: WaitStepProperties
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a ArtifactSources. */
    var ArtifactSources = /** @class */ (function () {
        /**
         * Create a ArtifactSources.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function ArtifactSources(client) {
            this.client = client;
        }
        ArtifactSources.prototype.createOrUpdate = function (resourceGroupName, artifactSourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                artifactSourceName: artifactSourceName,
                options: options
            }, createOrUpdateOperationSpec$3, callback);
        };
        ArtifactSources.prototype.get = function (resourceGroupName, artifactSourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                artifactSourceName: artifactSourceName,
                options: options
            }, getOperationSpec$5, callback);
        };
        ArtifactSources.prototype.deleteMethod = function (resourceGroupName, artifactSourceName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                artifactSourceName: artifactSourceName,
                options: options
            }, deleteMethodOperationSpec$5, callback);
        };
        ArtifactSources.prototype.list = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listOperationSpec$5, callback);
        };
        return ArtifactSources;
    }());
    // Operation Specifications
    var serializer$5 = new msRest.Serializer(Mappers$5);
    var createOrUpdateOperationSpec$3 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            artifactSourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: [
                "options",
                "artifactSourceInfo"
            ],
            mapper: ArtifactSource
        },
        responses: {
            201: {
                bodyMapper: ArtifactSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var getOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            artifactSourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: ArtifactSource
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var deleteMethodOperationSpec$5 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}",
        urlParameters: [
            subscriptionId,
            resourceGroupName,
            artifactSourceName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };
    var listOperationSpec$5 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources",
        urlParameters: [
            subscriptionId,
            resourceGroupName
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ArtifactSource"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$5
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        discriminators: discriminators,
        CloudError: CloudError,
        Operation: Operation,
        OperationDetail: OperationDetail,
        OperationsList: OperationsList
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {AzureDeploymentManagerContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$6, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$6 = new msRest.Serializer(Mappers$6);
    var listOperationSpec$6 = {
        httpMethod: "GET",
        path: "providers/Microsoft.DeploymentManager/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationsList
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$6
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-deploymentmanager";
    var packageVersion = "3.1.1";
    var AzureDeploymentManagerContext = /** @class */ (function (_super) {
        __extends(AzureDeploymentManagerContext, _super);
        /**
         * Initializes a new instance of the AzureDeploymentManager class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function AzureDeploymentManagerContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2019-11-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return AzureDeploymentManagerContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var AzureDeploymentManager = /** @class */ (function (_super) {
        __extends(AzureDeploymentManager, _super);
        /**
         * Initializes a new instance of the AzureDeploymentManager class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure
         * subscription. The subscription ID forms part of the URI for every service call.
         * @param [options] The parameter options
         */
        function AzureDeploymentManager(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.serviceTopologies = new ServiceTopologies(_this);
            _this.services = new Services(_this);
            _this.serviceUnits = new ServiceUnits(_this);
            _this.steps = new Steps(_this);
            _this.rollouts = new Rollouts(_this);
            _this.artifactSources = new ArtifactSources(_this);
            _this.operations = new Operations(_this);
            return _this;
        }
        return AzureDeploymentManager;
    }(AzureDeploymentManagerContext));

    exports.ArtifactSources = ArtifactSources;
    exports.AzureDeploymentManager = AzureDeploymentManager;
    exports.AzureDeploymentManagerContext = AzureDeploymentManagerContext;
    exports.AzureDeploymentManagerMappers = mappers;
    exports.AzureDeploymentManagerModels = index;
    exports.Operations = Operations;
    exports.Rollouts = Rollouts;
    exports.ServiceTopologies = ServiceTopologies;
    exports.ServiceUnits = ServiceUnits;
    exports.Services = Services;
    exports.Steps = Steps;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-deploymentmanager.js.map
