import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { AzureDeploymentManagerContext } from "../azureDeploymentManagerContext";
/** Class representing a Rollouts. */
export declare class Rollouts {
    private readonly client;
    /**
     * Create a Rollouts.
     * @param {AzureDeploymentManagerContext} client Reference to the service client.
     */
    constructor(client: AzureDeploymentManagerContext);
    /**
     * This is an asynchronous operation and can be polled to completion using the location header
     * returned by this operation.
     * @summary Creates or updates a rollout.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param [options] The optional parameters
     * @returns Promise<Models.RolloutsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, rolloutName: string, options?: Models.RolloutsCreateOrUpdateOptionalParams): Promise<Models.RolloutsCreateOrUpdateResponse>;
    /**
     * @summary Gets detailed information of a rollout.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param [options] The optional parameters
     * @returns Promise<Models.RolloutsGetResponse>
     */
    get(resourceGroupName: string, rolloutName: string, options?: Models.RolloutsGetOptionalParams): Promise<Models.RolloutsGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param callback The callback
     */
    get(resourceGroupName: string, rolloutName: string, callback: msRest.ServiceCallback<Models.Rollout>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, rolloutName: string, options: Models.RolloutsGetOptionalParams, callback: msRest.ServiceCallback<Models.Rollout>): void;
    /**
     * Only rollouts in terminal state can be deleted.
     * @summary Deletes a rollout resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, rolloutName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, rolloutName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, rolloutName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Only running rollouts can be canceled.
     * @summary Stops a running rollout.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param [options] The optional parameters
     * @returns Promise<Models.RolloutsCancelResponse>
     */
    cancel(resourceGroupName: string, rolloutName: string, options?: msRest.RequestOptionsBase): Promise<Models.RolloutsCancelResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param callback The callback
     */
    cancel(resourceGroupName: string, rolloutName: string, callback: msRest.ServiceCallback<Models.Rollout>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param options The optional parameters
     * @param callback The callback
     */
    cancel(resourceGroupName: string, rolloutName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Rollout>): void;
    /**
     * Only failed rollouts can be restarted.
     * @summary Restarts a failed rollout and optionally skips all succeeded steps.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param [options] The optional parameters
     * @returns Promise<Models.RolloutsRestartResponse>
     */
    restart(resourceGroupName: string, rolloutName: string, options?: Models.RolloutsRestartOptionalParams): Promise<Models.RolloutsRestartResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param callback The callback
     */
    restart(resourceGroupName: string, rolloutName: string, callback: msRest.ServiceCallback<Models.Rollout>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param options The optional parameters
     * @param callback The callback
     */
    restart(resourceGroupName: string, rolloutName: string, options: Models.RolloutsRestartOptionalParams, callback: msRest.ServiceCallback<Models.Rollout>): void;
    /**
     * @summary Lists the rollouts in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param [options] The optional parameters
     * @returns Promise<Models.RolloutsListResponse>
     */
    list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.RolloutsListResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param callback The callback
     */
    list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.Rollout[]>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Rollout[]>): void;
    /**
     * This is an asynchronous operation and can be polled to completion using the location header
     * returned by this operation.
     * @summary Creates or updates a rollout.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, rolloutName: string, options?: Models.RolloutsBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller>;
}
//# sourceMappingURL=rollouts.d.ts.map