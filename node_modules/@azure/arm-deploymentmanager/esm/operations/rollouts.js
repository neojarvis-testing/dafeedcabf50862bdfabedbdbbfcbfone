/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/rolloutsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Rollouts. */
var Rollouts = /** @class */ (function () {
    /**
     * Create a Rollouts.
     * @param {AzureDeploymentManagerContext} client Reference to the service client.
     */
    function Rollouts(client) {
        this.client = client;
    }
    /**
     * This is an asynchronous operation and can be polled to completion using the location header
     * returned by this operation.
     * @summary Creates or updates a rollout.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param [options] The optional parameters
     * @returns Promise<Models.RolloutsCreateOrUpdateResponse>
     */
    Rollouts.prototype.createOrUpdate = function (resourceGroupName, rolloutName, options) {
        return this.beginCreateOrUpdate(resourceGroupName, rolloutName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Rollouts.prototype.get = function (resourceGroupName, rolloutName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            rolloutName: rolloutName,
            options: options
        }, getOperationSpec, callback);
    };
    Rollouts.prototype.deleteMethod = function (resourceGroupName, rolloutName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            rolloutName: rolloutName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    Rollouts.prototype.cancel = function (resourceGroupName, rolloutName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            rolloutName: rolloutName,
            options: options
        }, cancelOperationSpec, callback);
    };
    Rollouts.prototype.restart = function (resourceGroupName, rolloutName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            rolloutName: rolloutName,
            options: options
        }, restartOperationSpec, callback);
    };
    Rollouts.prototype.list = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * This is an asynchronous operation and can be polled to completion using the location header
     * returned by this operation.
     * @summary Creates or updates a rollout.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param rolloutName The rollout name.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Rollouts.prototype.beginCreateOrUpdate = function (resourceGroupName, rolloutName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            rolloutName: rolloutName,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    return Rollouts;
}());
export { Rollouts };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.rolloutName
    ],
    queryParameters: [
        Parameters.apiVersion,
        Parameters.retryAttempt
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Rollout
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.rolloutName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var cancelOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/cancel",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.rolloutName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Rollout
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var restartOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/restart",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.rolloutName
    ],
    queryParameters: [
        Parameters.skipSucceeded,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Rollout
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Rollout"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.rolloutName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: [
            "options",
            "rolloutRequest"
        ],
        mapper: Mappers.RolloutRequest
    },
    responses: {
        201: {
            bodyMapper: Mappers.RolloutRequest,
            headersMapper: Mappers.RolloutsCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=rollouts.js.map