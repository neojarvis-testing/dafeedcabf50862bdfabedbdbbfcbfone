/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/serviceUnitsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a ServiceUnits. */
var ServiceUnits = /** @class */ (function () {
    /**
     * Create a ServiceUnits.
     * @param {AzureDeploymentManagerContext} client Reference to the service client.
     */
    function ServiceUnits(client) {
        this.client = client;
    }
    /**
     * This is an asynchronous operation and can be polled to completion using the operation resource
     * returned by this operation.
     * @summary Creates or updates a service unit under the service in the service topology.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param serviceUnitName The name of the service unit resource.
     * @param serviceUnitInfo The service unit resource object.
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceUnitsCreateOrUpdateResponse>
     */
    ServiceUnits.prototype.createOrUpdate = function (resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, serviceUnitInfo, options) {
        return this.beginCreateOrUpdate(resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, serviceUnitInfo, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    ServiceUnits.prototype.get = function (resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceTopologyName: serviceTopologyName,
            serviceName: serviceName,
            serviceUnitName: serviceUnitName,
            options: options
        }, getOperationSpec, callback);
    };
    ServiceUnits.prototype.deleteMethod = function (resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceTopologyName: serviceTopologyName,
            serviceName: serviceName,
            serviceUnitName: serviceUnitName,
            options: options
        }, deleteMethodOperationSpec, callback);
    };
    ServiceUnits.prototype.list = function (resourceGroupName, serviceTopologyName, serviceName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            serviceTopologyName: serviceTopologyName,
            serviceName: serviceName,
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * This is an asynchronous operation and can be polled to completion using the operation resource
     * returned by this operation.
     * @summary Creates or updates a service unit under the service in the service topology.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param serviceUnitName The name of the service unit resource.
     * @param serviceUnitInfo The service unit resource object.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    ServiceUnits.prototype.beginCreateOrUpdate = function (resourceGroupName, serviceTopologyName, serviceName, serviceUnitName, serviceUnitInfo, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            serviceTopologyName: serviceTopologyName,
            serviceName: serviceName,
            serviceUnitName: serviceUnitName,
            serviceUnitInfo: serviceUnitInfo,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    return ServiceUnits;
}());
export { ServiceUnits };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceTopologyName,
        Parameters.serviceName,
        Parameters.serviceUnitName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ServiceUnitResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var deleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceTopologyName,
        Parameters.serviceName,
        Parameters.serviceUnitName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceTopologyName,
        Parameters.serviceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceUnitResource"
                        }
                    }
                }
            }
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.serviceTopologyName,
        Parameters.serviceName,
        Parameters.serviceUnitName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "serviceUnitInfo",
        mapper: __assign(__assign({}, Mappers.ServiceUnitResource), { required: true })
    },
    responses: {
        201: {
            bodyMapper: Mappers.ServiceUnitResource,
            headersMapper: Mappers.ServiceUnitsCreateOrUpdateHeaders
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=serviceUnits.js.map