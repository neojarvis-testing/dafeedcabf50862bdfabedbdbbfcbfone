import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { AzureDeploymentManagerContext } from "../azureDeploymentManagerContext";
/** Class representing a ServiceTopologies. */
export declare class ServiceTopologies {
    private readonly client;
    /**
     * Create a ServiceTopologies.
     * @param {AzureDeploymentManagerContext} client Reference to the service client.
     */
    constructor(client: AzureDeploymentManagerContext);
    /**
     * Synchronously creates a new service topology or updates an existing service topology.
     * @summary Creates or updates a service topology.
     * @param serviceTopologyInfo Source topology object defines the resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceTopologiesCreateOrUpdateResponse>
     */
    createOrUpdate(serviceTopologyInfo: Models.ServiceTopologyResource, resourceGroupName: string, serviceTopologyName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceTopologiesCreateOrUpdateResponse>;
    /**
     * @param serviceTopologyInfo Source topology object defines the resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param callback The callback
     */
    createOrUpdate(serviceTopologyInfo: Models.ServiceTopologyResource, resourceGroupName: string, serviceTopologyName: string, callback: msRest.ServiceCallback<Models.ServiceTopologyResource>): void;
    /**
     * @param serviceTopologyInfo Source topology object defines the resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param options The optional parameters
     * @param callback The callback
     */
    createOrUpdate(serviceTopologyInfo: Models.ServiceTopologyResource, resourceGroupName: string, serviceTopologyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceTopologyResource>): void;
    /**
     * @summary Gets the service topology.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceTopologiesGetResponse>
     */
    get(resourceGroupName: string, serviceTopologyName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceTopologiesGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceTopologyName: string, callback: msRest.ServiceCallback<Models.ServiceTopologyResource>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceTopologyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceTopologyResource>): void;
    /**
     * @summary Deletes the service topology.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Lists the service topologies in the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceTopologiesListResponse>
     */
    list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceTopologiesListResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param callback The callback
     */
    list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.ServiceTopologyResource[]>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceTopologyResource[]>): void;
}
//# sourceMappingURL=serviceTopologies.d.ts.map