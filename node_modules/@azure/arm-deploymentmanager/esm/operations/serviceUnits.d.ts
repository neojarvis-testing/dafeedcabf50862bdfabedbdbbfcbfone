import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import { AzureDeploymentManagerContext } from "../azureDeploymentManagerContext";
/** Class representing a ServiceUnits. */
export declare class ServiceUnits {
    private readonly client;
    /**
     * Create a ServiceUnits.
     * @param {AzureDeploymentManagerContext} client Reference to the service client.
     */
    constructor(client: AzureDeploymentManagerContext);
    /**
     * This is an asynchronous operation and can be polled to completion using the operation resource
     * returned by this operation.
     * @summary Creates or updates a service unit under the service in the service topology.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param serviceUnitName The name of the service unit resource.
     * @param serviceUnitInfo The service unit resource object.
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceUnitsCreateOrUpdateResponse>
     */
    createOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: Models.ServiceUnitResource, options?: msRest.RequestOptionsBase): Promise<Models.ServiceUnitsCreateOrUpdateResponse>;
    /**
     * @summary Gets the service unit.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param serviceUnitName The name of the service unit resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceUnitsGetResponse>
     */
    get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceUnitsGetResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param serviceUnitName The name of the service unit resource.
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, callback: msRest.ServiceCallback<Models.ServiceUnitResource>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param serviceUnitName The name of the service unit resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    get(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceUnitResource>): void;
    /**
     * @summary Deletes the service unit.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param serviceUnitName The name of the service unit resource.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param serviceUnitName The name of the service unit resource.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param serviceUnitName The name of the service unit resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Lists the service units under a service in the service topology.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param [options] The optional parameters
     * @returns Promise<Models.ServiceUnitsListResponse>
     */
    list(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options?: msRest.RequestOptionsBase): Promise<Models.ServiceUnitsListResponse>;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param callback The callback
     */
    list(resourceGroupName: string, serviceTopologyName: string, serviceName: string, callback: msRest.ServiceCallback<Models.ServiceUnitResource[]>): void;
    /**
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param options The optional parameters
     * @param callback The callback
     */
    list(resourceGroupName: string, serviceTopologyName: string, serviceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ServiceUnitResource[]>): void;
    /**
     * This is an asynchronous operation and can be polled to completion using the operation resource
     * returned by this operation.
     * @summary Creates or updates a service unit under the service in the service topology.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceTopologyName The name of the service topology .
     * @param serviceName The name of the service resource.
     * @param serviceUnitName The name of the service unit resource.
     * @param serviceUnitInfo The service unit resource object.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    beginCreateOrUpdate(resourceGroupName: string, serviceTopologyName: string, serviceName: string, serviceUnitName: string, serviceUnitInfo: Models.ServiceUnitResource, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller>;
}
//# sourceMappingURL=serviceUnits.d.ts.map