'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link AuthType} that the service accepts. */
exports.KnownAuthType = void 0;
(function (KnownAuthType) {
    /** Invalid */
    KnownAuthType["Invalid"] = "Invalid";
    /** ACS */
    KnownAuthType["ACS"] = "ACS";
    /** AAD */
    KnownAuthType["AAD"] = "AAD";
    /** AccessControlService */
    KnownAuthType["AccessControlService"] = "AccessControlService";
    /** AzureActiveDirectory */
    KnownAuthType["AzureActiveDirectory"] = "AzureActiveDirectory";
})(exports.KnownAuthType || (exports.KnownAuthType = {}));
/** Known values of {@link VaultSubResourceType} that the service accepts. */
exports.KnownVaultSubResourceType = void 0;
(function (KnownVaultSubResourceType) {
    /** AzureBackup */
    KnownVaultSubResourceType["AzureBackup"] = "AzureBackup";
    /** AzureBackupSecondary */
    KnownVaultSubResourceType["AzureBackupSecondary"] = "AzureBackup_secondary";
    /** AzureSiteRecovery */
    KnownVaultSubResourceType["AzureSiteRecovery"] = "AzureSiteRecovery";
})(exports.KnownVaultSubResourceType || (exports.KnownVaultSubResourceType = {}));
/** Known values of {@link ResourceIdentityType} that the service accepts. */
exports.KnownResourceIdentityType = void 0;
(function (KnownResourceIdentityType) {
    /** SystemAssigned */
    KnownResourceIdentityType["SystemAssigned"] = "SystemAssigned";
    /** None */
    KnownResourceIdentityType["None"] = "None";
    /** UserAssigned */
    KnownResourceIdentityType["UserAssigned"] = "UserAssigned";
    /** SystemAssignedUserAssigned */
    KnownResourceIdentityType["SystemAssignedUserAssigned"] = "SystemAssigned, UserAssigned";
})(exports.KnownResourceIdentityType || (exports.KnownResourceIdentityType = {}));
/** Known values of {@link VaultUpgradeState} that the service accepts. */
exports.KnownVaultUpgradeState = void 0;
(function (KnownVaultUpgradeState) {
    /** Unknown */
    KnownVaultUpgradeState["Unknown"] = "Unknown";
    /** InProgress */
    KnownVaultUpgradeState["InProgress"] = "InProgress";
    /** Upgraded */
    KnownVaultUpgradeState["Upgraded"] = "Upgraded";
    /** Failed */
    KnownVaultUpgradeState["Failed"] = "Failed";
})(exports.KnownVaultUpgradeState || (exports.KnownVaultUpgradeState = {}));
/** Known values of {@link TriggerType} that the service accepts. */
exports.KnownTriggerType = void 0;
(function (KnownTriggerType) {
    /** UserTriggered */
    KnownTriggerType["UserTriggered"] = "UserTriggered";
    /** ForcedUpgrade */
    KnownTriggerType["ForcedUpgrade"] = "ForcedUpgrade";
})(exports.KnownTriggerType || (exports.KnownTriggerType = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Pending */
    KnownProvisioningState["Pending"] = "Pending";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link PrivateEndpointConnectionStatus} that the service accepts. */
exports.KnownPrivateEndpointConnectionStatus = void 0;
(function (KnownPrivateEndpointConnectionStatus) {
    /** Pending */
    KnownPrivateEndpointConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateEndpointConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateEndpointConnectionStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownPrivateEndpointConnectionStatus["Disconnected"] = "Disconnected";
})(exports.KnownPrivateEndpointConnectionStatus || (exports.KnownPrivateEndpointConnectionStatus = {}));
/** Known values of {@link VaultPrivateEndpointState} that the service accepts. */
exports.KnownVaultPrivateEndpointState = void 0;
(function (KnownVaultPrivateEndpointState) {
    /** None */
    KnownVaultPrivateEndpointState["None"] = "None";
    /** Enabled */
    KnownVaultPrivateEndpointState["Enabled"] = "Enabled";
})(exports.KnownVaultPrivateEndpointState || (exports.KnownVaultPrivateEndpointState = {}));
/** Known values of {@link InfrastructureEncryptionState} that the service accepts. */
exports.KnownInfrastructureEncryptionState = void 0;
(function (KnownInfrastructureEncryptionState) {
    /** Enabled */
    KnownInfrastructureEncryptionState["Enabled"] = "Enabled";
    /** Disabled */
    KnownInfrastructureEncryptionState["Disabled"] = "Disabled";
})(exports.KnownInfrastructureEncryptionState || (exports.KnownInfrastructureEncryptionState = {}));
/** Known values of {@link ResourceMoveState} that the service accepts. */
exports.KnownResourceMoveState = void 0;
(function (KnownResourceMoveState) {
    /** Unknown */
    KnownResourceMoveState["Unknown"] = "Unknown";
    /** InProgress */
    KnownResourceMoveState["InProgress"] = "InProgress";
    /** PrepareFailed */
    KnownResourceMoveState["PrepareFailed"] = "PrepareFailed";
    /** CommitFailed */
    KnownResourceMoveState["CommitFailed"] = "CommitFailed";
    /** PrepareTimedout */
    KnownResourceMoveState["PrepareTimedout"] = "PrepareTimedout";
    /** CommitTimedout */
    KnownResourceMoveState["CommitTimedout"] = "CommitTimedout";
    /** MoveSucceeded */
    KnownResourceMoveState["MoveSucceeded"] = "MoveSucceeded";
    /** Failure */
    KnownResourceMoveState["Failure"] = "Failure";
    /** CriticalFailure */
    KnownResourceMoveState["CriticalFailure"] = "CriticalFailure";
    /** PartialSuccess */
    KnownResourceMoveState["PartialSuccess"] = "PartialSuccess";
})(exports.KnownResourceMoveState || (exports.KnownResourceMoveState = {}));
/** Known values of {@link BackupStorageVersion} that the service accepts. */
exports.KnownBackupStorageVersion = void 0;
(function (KnownBackupStorageVersion) {
    /** V1 */
    KnownBackupStorageVersion["V1"] = "V1";
    /** V2 */
    KnownBackupStorageVersion["V2"] = "V2";
    /** Unassigned */
    KnownBackupStorageVersion["Unassigned"] = "Unassigned";
})(exports.KnownBackupStorageVersion || (exports.KnownBackupStorageVersion = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link AlertsState} that the service accepts. */
exports.KnownAlertsState = void 0;
(function (KnownAlertsState) {
    /** Enabled */
    KnownAlertsState["Enabled"] = "Enabled";
    /** Disabled */
    KnownAlertsState["Disabled"] = "Disabled";
})(exports.KnownAlertsState || (exports.KnownAlertsState = {}));
/** Known values of {@link CrossSubscriptionRestoreState} that the service accepts. */
exports.KnownCrossSubscriptionRestoreState = void 0;
(function (KnownCrossSubscriptionRestoreState) {
    /** Enabled */
    KnownCrossSubscriptionRestoreState["Enabled"] = "Enabled";
    /** Disabled */
    KnownCrossSubscriptionRestoreState["Disabled"] = "Disabled";
    /** PermanentlyDisabled */
    KnownCrossSubscriptionRestoreState["PermanentlyDisabled"] = "PermanentlyDisabled";
})(exports.KnownCrossSubscriptionRestoreState || (exports.KnownCrossSubscriptionRestoreState = {}));
/** Known values of {@link StandardTierStorageRedundancy} that the service accepts. */
exports.KnownStandardTierStorageRedundancy = void 0;
(function (KnownStandardTierStorageRedundancy) {
    /** LocallyRedundant */
    KnownStandardTierStorageRedundancy["LocallyRedundant"] = "LocallyRedundant";
    /** GeoRedundant */
    KnownStandardTierStorageRedundancy["GeoRedundant"] = "GeoRedundant";
    /** ZoneRedundant */
    KnownStandardTierStorageRedundancy["ZoneRedundant"] = "ZoneRedundant";
})(exports.KnownStandardTierStorageRedundancy || (exports.KnownStandardTierStorageRedundancy = {}));
/** Known values of {@link CrossRegionRestore} that the service accepts. */
exports.KnownCrossRegionRestore = void 0;
(function (KnownCrossRegionRestore) {
    /** Enabled */
    KnownCrossRegionRestore["Enabled"] = "Enabled";
    /** Disabled */
    KnownCrossRegionRestore["Disabled"] = "Disabled";
})(exports.KnownCrossRegionRestore || (exports.KnownCrossRegionRestore = {}));
/** Known values of {@link ImmutabilityState} that the service accepts. */
exports.KnownImmutabilityState = void 0;
(function (KnownImmutabilityState) {
    /** Disabled */
    KnownImmutabilityState["Disabled"] = "Disabled";
    /** Unlocked */
    KnownImmutabilityState["Unlocked"] = "Unlocked";
    /** Locked */
    KnownImmutabilityState["Locked"] = "Locked";
})(exports.KnownImmutabilityState || (exports.KnownImmutabilityState = {}));
/** Known values of {@link SoftDeleteState} that the service accepts. */
exports.KnownSoftDeleteState = void 0;
(function (KnownSoftDeleteState) {
    /** Invalid */
    KnownSoftDeleteState["Invalid"] = "Invalid";
    /** Enabled */
    KnownSoftDeleteState["Enabled"] = "Enabled";
    /** Disabled */
    KnownSoftDeleteState["Disabled"] = "Disabled";
    /** AlwaysON */
    KnownSoftDeleteState["AlwaysON"] = "AlwaysON";
})(exports.KnownSoftDeleteState || (exports.KnownSoftDeleteState = {}));
/** Known values of {@link MultiUserAuthorization} that the service accepts. */
exports.KnownMultiUserAuthorization = void 0;
(function (KnownMultiUserAuthorization) {
    /** Invalid */
    KnownMultiUserAuthorization["Invalid"] = "Invalid";
    /** Enabled */
    KnownMultiUserAuthorization["Enabled"] = "Enabled";
    /** Disabled */
    KnownMultiUserAuthorization["Disabled"] = "Disabled";
})(exports.KnownMultiUserAuthorization || (exports.KnownMultiUserAuthorization = {}));
/** Known values of {@link SecureScoreLevel} that the service accepts. */
exports.KnownSecureScoreLevel = void 0;
(function (KnownSecureScoreLevel) {
    /** None */
    KnownSecureScoreLevel["None"] = "None";
    /** Minimum */
    KnownSecureScoreLevel["Minimum"] = "Minimum";
    /** Adequate */
    KnownSecureScoreLevel["Adequate"] = "Adequate";
    /** Maximum */
    KnownSecureScoreLevel["Maximum"] = "Maximum";
})(exports.KnownSecureScoreLevel || (exports.KnownSecureScoreLevel = {}));
/** Known values of {@link SkuName} that the service accepts. */
exports.KnownSkuName = void 0;
(function (KnownSkuName) {
    /** Standard */
    KnownSkuName["Standard"] = "Standard";
    /** RS0 */
    KnownSkuName["RS0"] = "RS0";
})(exports.KnownSkuName || (exports.KnownSkuName = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link UsagesUnit} that the service accepts. */
exports.KnownUsagesUnit = void 0;
(function (KnownUsagesUnit) {
    /** Count */
    KnownUsagesUnit["Count"] = "Count";
    /** Bytes */
    KnownUsagesUnit["Bytes"] = "Bytes";
    /** Seconds */
    KnownUsagesUnit["Seconds"] = "Seconds";
    /** Percent */
    KnownUsagesUnit["Percent"] = "Percent";
    /** CountPerSecond */
    KnownUsagesUnit["CountPerSecond"] = "CountPerSecond";
    /** BytesPerSecond */
    KnownUsagesUnit["BytesPerSecond"] = "BytesPerSecond";
})(exports.KnownUsagesUnit || (exports.KnownUsagesUnit = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const CertificateRequest = {
    type: {
        name: "Composite",
        className: "CertificateRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RawCertificateData"
                }
            }
        }
    }
};
const RawCertificateData = {
    type: {
        name: "Composite",
        className: "RawCertificateData",
        modelProperties: {
            authType: {
                serializedName: "authType",
                type: {
                    name: "String"
                }
            },
            certificate: {
                serializedName: "certificate",
                type: {
                    name: "ByteArray"
                }
            }
        }
    }
};
const VaultCertificateResponse = {
    type: {
        name: "Composite",
        className: "VaultCertificateResponse",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ResourceCertificateDetails"
                }
            }
        }
    }
};
const ResourceCertificateDetails = {
    type: {
        name: "Composite",
        className: "ResourceCertificateDetails",
        uberParent: "ResourceCertificateDetails",
        polymorphicDiscriminator: {
            serializedName: "authType",
            clientName: "authType"
        },
        modelProperties: {
            authType: {
                serializedName: "authType",
                required: true,
                type: {
                    name: "String"
                }
            },
            certificate: {
                serializedName: "certificate",
                type: {
                    name: "ByteArray"
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            },
            issuer: {
                serializedName: "issuer",
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "Number"
                }
            },
            subject: {
                serializedName: "subject",
                type: {
                    name: "String"
                }
            },
            thumbprint: {
                serializedName: "thumbprint",
                type: {
                    name: "String"
                }
            },
            validFrom: {
                serializedName: "validFrom",
                type: {
                    name: "DateTime"
                }
            },
            validTo: {
                serializedName: "validTo",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ReplicationUsageList = {
    type: {
        name: "Composite",
        className: "ReplicationUsageList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReplicationUsage"
                        }
                    }
                }
            }
        }
    }
};
const ReplicationUsage = {
    type: {
        name: "Composite",
        className: "ReplicationUsage",
        modelProperties: {
            monitoringSummary: {
                serializedName: "monitoringSummary",
                type: {
                    name: "Composite",
                    className: "MonitoringSummary"
                }
            },
            jobsSummary: {
                serializedName: "jobsSummary",
                type: {
                    name: "Composite",
                    className: "JobsSummary"
                }
            },
            protectedItemCount: {
                serializedName: "protectedItemCount",
                type: {
                    name: "Number"
                }
            },
            recoveryPlanCount: {
                serializedName: "recoveryPlanCount",
                type: {
                    name: "Number"
                }
            },
            registeredServersCount: {
                serializedName: "registeredServersCount",
                type: {
                    name: "Number"
                }
            },
            recoveryServicesProviderAuthType: {
                serializedName: "recoveryServicesProviderAuthType",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const MonitoringSummary = {
    type: {
        name: "Composite",
        className: "MonitoringSummary",
        modelProperties: {
            unHealthyVmCount: {
                serializedName: "unHealthyVmCount",
                type: {
                    name: "Number"
                }
            },
            unHealthyProviderCount: {
                serializedName: "unHealthyProviderCount",
                type: {
                    name: "Number"
                }
            },
            eventsCount: {
                serializedName: "eventsCount",
                type: {
                    name: "Number"
                }
            },
            deprecatedProviderCount: {
                serializedName: "deprecatedProviderCount",
                type: {
                    name: "Number"
                }
            },
            supportedProviderCount: {
                serializedName: "supportedProviderCount",
                type: {
                    name: "Number"
                }
            },
            unsupportedProviderCount: {
                serializedName: "unsupportedProviderCount",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const JobsSummary = {
    type: {
        name: "Composite",
        className: "JobsSummary",
        modelProperties: {
            failedJobs: {
                serializedName: "failedJobs",
                type: {
                    name: "Number"
                }
            },
            suspendedJobs: {
                serializedName: "suspendedJobs",
                type: {
                    name: "Number"
                }
            },
            inProgressJobs: {
                serializedName: "inProgressJobs",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const PrivateLinkResources = {
    type: {
        name: "Composite",
        className: "PrivateLinkResources",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            groupId: {
                serializedName: "properties.groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "properties.requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            }
        }
    }
};
const ErrorModel = {
    type: {
        name: "Composite",
        className: "ErrorModel",
        modelProperties: {
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            },
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorModel"
                        }
                    }
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityParameters = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityParameters",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityResult = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityResult",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CapabilitiesProperties = {
    type: {
        name: "Composite",
        className: "CapabilitiesProperties",
        modelProperties: {
            dnsZones: {
                serializedName: "dnsZones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DNSZone"
                        }
                    }
                }
            }
        }
    }
};
const DNSZone = {
    type: {
        name: "Composite",
        className: "DNSZone",
        modelProperties: {
            subResource: {
                serializedName: "subResource",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceCapabilitiesBase = {
    type: {
        name: "Composite",
        className: "ResourceCapabilitiesBase",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CapabilitiesResponseProperties = {
    type: {
        name: "Composite",
        className: "CapabilitiesResponseProperties",
        modelProperties: {
            dnsZones: {
                serializedName: "dnsZones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DNSZoneResponse"
                        }
                    }
                }
            }
        }
    }
};
const VaultList = {
    type: {
        name: "Composite",
        className: "VaultList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Vault"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IdentityData = {
    type: {
        name: "Composite",
        className: "IdentityData",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "UserIdentity" } }
                }
            }
        }
    }
};
const UserIdentity = {
    type: {
        name: "Composite",
        className: "UserIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VaultProperties = {
    type: {
        name: "Composite",
        className: "VaultProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            upgradeDetails: {
                serializedName: "upgradeDetails",
                type: {
                    name: "Composite",
                    className: "UpgradeDetails"
                }
            },
            privateEndpointConnections: {
                serializedName: "privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnectionVaultProperties"
                        }
                    }
                }
            },
            privateEndpointStateForBackup: {
                serializedName: "privateEndpointStateForBackup",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            privateEndpointStateForSiteRecovery: {
                serializedName: "privateEndpointStateForSiteRecovery",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            encryption: {
                serializedName: "encryption",
                type: {
                    name: "Composite",
                    className: "VaultPropertiesEncryption"
                }
            },
            moveDetails: {
                serializedName: "moveDetails",
                type: {
                    name: "Composite",
                    className: "VaultPropertiesMoveDetails"
                }
            },
            moveState: {
                serializedName: "moveState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            backupStorageVersion: {
                serializedName: "backupStorageVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            publicNetworkAccess: {
                serializedName: "publicNetworkAccess",
                type: {
                    name: "String"
                }
            },
            monitoringSettings: {
                serializedName: "monitoringSettings",
                type: {
                    name: "Composite",
                    className: "MonitoringSettings"
                }
            },
            restoreSettings: {
                serializedName: "restoreSettings",
                type: {
                    name: "Composite",
                    className: "RestoreSettings"
                }
            },
            redundancySettings: {
                serializedName: "redundancySettings",
                type: {
                    name: "Composite",
                    className: "VaultPropertiesRedundancySettings"
                }
            },
            securitySettings: {
                serializedName: "securitySettings",
                type: {
                    name: "Composite",
                    className: "SecuritySettings"
                }
            },
            secureScore: {
                serializedName: "secureScore",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UpgradeDetails = {
    type: {
        name: "Composite",
        className: "UpgradeDetails",
        modelProperties: {
            operationId: {
                serializedName: "operationId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTimeUtc: {
                serializedName: "startTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedTimeUtc: {
                serializedName: "lastUpdatedTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            endTimeUtc: {
                serializedName: "endTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            triggerType: {
                serializedName: "triggerType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            upgradedResourceId: {
                serializedName: "upgradedResourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            previousResourceId: {
                serializedName: "previousResourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionVaultProperties = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionVaultProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateEndpointConnection"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            privateEndpoint: {
                serializedName: "privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            },
            privateLinkServiceConnectionState: {
                serializedName: "privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            },
            groupIds: {
                serializedName: "groupIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VaultPropertiesEncryption = {
    type: {
        name: "Composite",
        className: "VaultPropertiesEncryption",
        modelProperties: {
            keyVaultProperties: {
                serializedName: "keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "CmkKeyVaultProperties"
                }
            },
            kekIdentity: {
                serializedName: "kekIdentity",
                type: {
                    name: "Composite",
                    className: "CmkKekIdentity"
                }
            },
            infrastructureEncryption: {
                serializedName: "infrastructureEncryption",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CmkKeyVaultProperties = {
    type: {
        name: "Composite",
        className: "CmkKeyVaultProperties",
        modelProperties: {
            keyUri: {
                serializedName: "keyUri",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CmkKekIdentity = {
    type: {
        name: "Composite",
        className: "CmkKekIdentity",
        modelProperties: {
            useSystemAssignedIdentity: {
                serializedName: "useSystemAssignedIdentity",
                type: {
                    name: "Boolean"
                }
            },
            userAssignedIdentity: {
                serializedName: "userAssignedIdentity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VaultPropertiesMoveDetails = {
    type: {
        name: "Composite",
        className: "VaultPropertiesMoveDetails",
        modelProperties: {
            operationId: {
                serializedName: "operationId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            startTimeUtc: {
                serializedName: "startTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            completionTimeUtc: {
                serializedName: "completionTimeUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            sourceResourceId: {
                serializedName: "sourceResourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            targetResourceId: {
                serializedName: "targetResourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitoringSettings = {
    type: {
        name: "Composite",
        className: "MonitoringSettings",
        modelProperties: {
            azureMonitorAlertSettings: {
                serializedName: "azureMonitorAlertSettings",
                type: {
                    name: "Composite",
                    className: "AzureMonitorAlertSettings"
                }
            },
            classicAlertSettings: {
                serializedName: "classicAlertSettings",
                type: {
                    name: "Composite",
                    className: "ClassicAlertSettings"
                }
            }
        }
    }
};
const AzureMonitorAlertSettings = {
    type: {
        name: "Composite",
        className: "AzureMonitorAlertSettings",
        modelProperties: {
            alertsForAllJobFailures: {
                serializedName: "alertsForAllJobFailures",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClassicAlertSettings = {
    type: {
        name: "Composite",
        className: "ClassicAlertSettings",
        modelProperties: {
            alertsForCriticalOperations: {
                serializedName: "alertsForCriticalOperations",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RestoreSettings = {
    type: {
        name: "Composite",
        className: "RestoreSettings",
        modelProperties: {
            crossSubscriptionRestoreSettings: {
                serializedName: "crossSubscriptionRestoreSettings",
                type: {
                    name: "Composite",
                    className: "CrossSubscriptionRestoreSettings"
                }
            }
        }
    }
};
const CrossSubscriptionRestoreSettings = {
    type: {
        name: "Composite",
        className: "CrossSubscriptionRestoreSettings",
        modelProperties: {
            crossSubscriptionRestoreState: {
                serializedName: "crossSubscriptionRestoreState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VaultPropertiesRedundancySettings = {
    type: {
        name: "Composite",
        className: "VaultPropertiesRedundancySettings",
        modelProperties: {
            standardTierStorageRedundancy: {
                serializedName: "standardTierStorageRedundancy",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            crossRegionRestore: {
                serializedName: "crossRegionRestore",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SecuritySettings = {
    type: {
        name: "Composite",
        className: "SecuritySettings",
        modelProperties: {
            immutabilitySettings: {
                serializedName: "immutabilitySettings",
                type: {
                    name: "Composite",
                    className: "ImmutabilitySettings"
                }
            },
            softDeleteSettings: {
                serializedName: "softDeleteSettings",
                type: {
                    name: "Composite",
                    className: "SoftDeleteSettings"
                }
            },
            multiUserAuthorization: {
                serializedName: "multiUserAuthorization",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImmutabilitySettings = {
    type: {
        name: "Composite",
        className: "ImmutabilitySettings",
        modelProperties: {
            state: {
                serializedName: "state",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SoftDeleteSettings = {
    type: {
        name: "Composite",
        className: "SoftDeleteSettings",
        modelProperties: {
            softDeleteState: {
                serializedName: "softDeleteState",
                type: {
                    name: "String"
                }
            },
            softDeleteRetentionPeriodInDays: {
                serializedName: "softDeleteRetentionPeriodInDays",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            family: {
                serializedName: "family",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClientDiscoveryResponse = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClientDiscoveryValueForSingleApi"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClientDiscoveryValueForSingleApi = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryValueForSingleApi",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "ClientDiscoveryDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ClientDiscoveryForProperties"
                }
            }
        }
    }
};
const ClientDiscoveryDisplay = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClientDiscoveryForProperties = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryForProperties",
        modelProperties: {
            serviceSpecification: {
                serializedName: "serviceSpecification",
                type: {
                    name: "Composite",
                    className: "ClientDiscoveryForServiceSpecification"
                }
            }
        }
    }
};
const ClientDiscoveryForServiceSpecification = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryForServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ClientDiscoveryForLogSpecification"
                        }
                    }
                }
            }
        }
    }
};
const ClientDiscoveryForLogSpecification = {
    type: {
        name: "Composite",
        className: "ClientDiscoveryForLogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResource = {
    type: {
        name: "Composite",
        className: "OperationResource",
        modelProperties: {
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorModel"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const VaultUsageList = {
    type: {
        name: "Composite",
        className: "VaultUsageList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VaultUsage"
                        }
                    }
                }
            }
        }
    }
};
const VaultUsage = {
    type: {
        name: "Composite",
        className: "VaultUsage",
        modelProperties: {
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            quotaPeriod: {
                serializedName: "quotaPeriod",
                type: {
                    name: "String"
                }
            },
            nextResetTime: {
                serializedName: "nextResetTime",
                type: {
                    name: "DateTime"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                type: {
                    name: "Number"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "NameInfo"
                }
            }
        }
    }
};
const NameInfo = {
    type: {
        name: "Composite",
        className: "NameInfo",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            localizedValue: {
                serializedName: "localizedValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceCertificateAndAadDetails = {
    serializedName: "AzureActiveDirectory",
    type: {
        name: "Composite",
        className: "ResourceCertificateAndAadDetails",
        uberParent: "ResourceCertificateDetails",
        polymorphicDiscriminator: ResourceCertificateDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceCertificateDetails.type.modelProperties), { aadAuthority: {
                serializedName: "aadAuthority",
                required: true,
                type: {
                    name: "String"
                }
            }, aadTenantId: {
                serializedName: "aadTenantId",
                required: true,
                type: {
                    name: "String"
                }
            }, servicePrincipalClientId: {
                serializedName: "servicePrincipalClientId",
                required: true,
                type: {
                    name: "String"
                }
            }, servicePrincipalObjectId: {
                serializedName: "servicePrincipalObjectId",
                required: true,
                type: {
                    name: "String"
                }
            }, azureManagementEndpointAudience: {
                serializedName: "azureManagementEndpointAudience",
                required: true,
                type: {
                    name: "String"
                }
            }, serviceResourceId: {
                serializedName: "serviceResourceId",
                type: {
                    name: "String"
                }
            }, aadAudience: {
                serializedName: "aadAudience",
                type: {
                    name: "String"
                }
            } })
    }
};
const ResourceCertificateAndAcsDetails = {
    serializedName: "AccessControlService",
    type: {
        name: "Composite",
        className: "ResourceCertificateAndAcsDetails",
        uberParent: "ResourceCertificateDetails",
        polymorphicDiscriminator: ResourceCertificateDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResourceCertificateDetails.type.modelProperties), { globalAcsNamespace: {
                serializedName: "globalAcsNamespace",
                required: true,
                type: {
                    name: "String"
                }
            }, globalAcsHostName: {
                serializedName: "globalAcsHostName",
                required: true,
                type: {
                    name: "String"
                }
            }, globalAcsRPRealm: {
                serializedName: "globalAcsRPRealm",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DNSZoneResponse = {
    type: {
        name: "Composite",
        className: "DNSZoneResponse",
        modelProperties: Object.assign(Object.assign({}, DNSZone.type.modelProperties), { requiredZoneNames: {
                serializedName: "requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ResourceCapabilities = {
    type: {
        name: "Composite",
        className: "ResourceCapabilities",
        modelProperties: Object.assign(Object.assign({}, ResourceCapabilitiesBase.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CapabilitiesProperties"
                }
            } })
    }
};
const CapabilitiesResponse = {
    type: {
        name: "Composite",
        className: "CapabilitiesResponse",
        modelProperties: Object.assign(Object.assign({}, ResourceCapabilitiesBase.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CapabilitiesResponseProperties"
                }
            } })
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const PatchTrackedResource = {
    type: {
        name: "Composite",
        className: "PatchTrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const VaultExtendedInfoResource = {
    type: {
        name: "Composite",
        className: "VaultExtendedInfoResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { integrityKey: {
                serializedName: "properties.integrityKey",
                type: {
                    name: "String"
                }
            }, encryptionKey: {
                serializedName: "properties.encryptionKey",
                type: {
                    name: "String"
                }
            }, encryptionKeyThumbprint: {
                serializedName: "properties.encryptionKeyThumbprint",
                type: {
                    name: "String"
                }
            }, algorithm: {
                serializedName: "properties.algorithm",
                type: {
                    name: "String"
                }
            } })
    }
};
const Vault = {
    type: {
        name: "Composite",
        className: "Vault",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityData"
                }
            }, properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "VaultProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            } })
    }
};
const PatchVault = {
    type: {
        name: "Composite",
        className: "PatchVault",
        modelProperties: Object.assign(Object.assign({}, PatchTrackedResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "VaultProperties"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityData"
                }
            } })
    }
};
let discriminators = {
    ResourceCertificateDetails: ResourceCertificateDetails,
    "ResourceCertificateDetails.AzureActiveDirectory": ResourceCertificateAndAadDetails,
    "ResourceCertificateDetails.AccessControlService": ResourceCertificateAndAcsDetails
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CertificateRequest: CertificateRequest,
    RawCertificateData: RawCertificateData,
    VaultCertificateResponse: VaultCertificateResponse,
    ResourceCertificateDetails: ResourceCertificateDetails,
    ReplicationUsageList: ReplicationUsageList,
    ReplicationUsage: ReplicationUsage,
    MonitoringSummary: MonitoringSummary,
    JobsSummary: JobsSummary,
    PrivateLinkResources: PrivateLinkResources,
    PrivateLinkResource: PrivateLinkResource,
    CloudError: CloudError,
    ErrorModel: ErrorModel,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    CheckNameAvailabilityParameters: CheckNameAvailabilityParameters,
    CheckNameAvailabilityResult: CheckNameAvailabilityResult,
    CapabilitiesProperties: CapabilitiesProperties,
    DNSZone: DNSZone,
    ResourceCapabilitiesBase: ResourceCapabilitiesBase,
    CapabilitiesResponseProperties: CapabilitiesResponseProperties,
    VaultList: VaultList,
    IdentityData: IdentityData,
    UserIdentity: UserIdentity,
    VaultProperties: VaultProperties,
    UpgradeDetails: UpgradeDetails,
    PrivateEndpointConnectionVaultProperties: PrivateEndpointConnectionVaultProperties,
    PrivateEndpointConnection: PrivateEndpointConnection,
    PrivateEndpoint: PrivateEndpoint,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    VaultPropertiesEncryption: VaultPropertiesEncryption,
    CmkKeyVaultProperties: CmkKeyVaultProperties,
    CmkKekIdentity: CmkKekIdentity,
    VaultPropertiesMoveDetails: VaultPropertiesMoveDetails,
    MonitoringSettings: MonitoringSettings,
    AzureMonitorAlertSettings: AzureMonitorAlertSettings,
    ClassicAlertSettings: ClassicAlertSettings,
    RestoreSettings: RestoreSettings,
    CrossSubscriptionRestoreSettings: CrossSubscriptionRestoreSettings,
    VaultPropertiesRedundancySettings: VaultPropertiesRedundancySettings,
    SecuritySettings: SecuritySettings,
    ImmutabilitySettings: ImmutabilitySettings,
    SoftDeleteSettings: SoftDeleteSettings,
    Sku: Sku,
    SystemData: SystemData,
    Resource: Resource,
    ClientDiscoveryResponse: ClientDiscoveryResponse,
    ClientDiscoveryValueForSingleApi: ClientDiscoveryValueForSingleApi,
    ClientDiscoveryDisplay: ClientDiscoveryDisplay,
    ClientDiscoveryForProperties: ClientDiscoveryForProperties,
    ClientDiscoveryForServiceSpecification: ClientDiscoveryForServiceSpecification,
    ClientDiscoveryForLogSpecification: ClientDiscoveryForLogSpecification,
    OperationResource: OperationResource,
    VaultUsageList: VaultUsageList,
    VaultUsage: VaultUsage,
    NameInfo: NameInfo,
    ResourceCertificateAndAadDetails: ResourceCertificateAndAadDetails,
    ResourceCertificateAndAcsDetails: ResourceCertificateAndAcsDetails,
    DNSZoneResponse: DNSZoneResponse,
    ResourceCapabilities: ResourceCapabilities,
    CapabilitiesResponse: CapabilitiesResponse,
    TrackedResource: TrackedResource,
    PatchTrackedResource: PatchTrackedResource,
    VaultExtendedInfoResource: VaultExtendedInfoResource,
    Vault: Vault,
    PatchVault: PatchVault,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const certificateRequest = {
    parameterPath: "certificateRequest",
    mapper: CertificateRequest
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const vaultName = {
    parameterPath: "vaultName",
    mapper: {
        serializedName: "vaultName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const certificateName = {
    parameterPath: "certificateName",
    mapper: {
        serializedName: "certificateName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const identityName = {
    parameterPath: "identityName",
    mapper: {
        serializedName: "identityName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const privateLinkResourceName = {
    parameterPath: "privateLinkResourceName",
    mapper: {
        serializedName: "privateLinkResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const input = {
    parameterPath: "input",
    mapper: CheckNameAvailabilityParameters
};
const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const input1 = {
    parameterPath: "input",
    mapper: ResourceCapabilities
};
const vault = {
    parameterPath: "vault",
    mapper: Vault
};
const vault1 = {
    parameterPath: "vault",
    mapper: PatchVault
};
const resourceExtendedInfoDetails = {
    parameterPath: "resourceExtendedInfoDetails",
    mapper: VaultExtendedInfoResource
};
const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing VaultCertificates operations. */
class VaultCertificatesImpl {
    /**
     * Initialize a new instance of the class VaultCertificates class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Uploads a certificate for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param certificateName Certificate friendly name.
     * @param certificateRequest Input parameters for uploading the vault certificate.
     * @param options The options parameters.
     */
    create(resourceGroupName, vaultName, certificateName, certificateRequest, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            vaultName,
            certificateName,
            certificateRequest,
            options
        }, createOperationSpec);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/certificates/{certificateName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: VaultCertificateResponse
        }
    },
    requestBody: certificateRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName,
        certificateName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing RegisteredIdentities operations. */
class RegisteredIdentitiesImpl {
    /**
     * Initialize a new instance of the class RegisteredIdentities class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Unregisters the given container from your Recovery Services vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param identityName Name of the protection container to unregister.
     * @param options The options parameters.
     */
    delete(resourceGroupName, vaultName, identityName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, identityName, options }, deleteOperationSpec$1);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const deleteOperationSpec$1 = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/registeredIdentities/{identityName}",
    httpMethod: "DELETE",
    responses: { 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName,
        identityName
    ],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationUsages operations. */
class ReplicationUsagesImpl {
    /**
     * Initialize a new instance of the class ReplicationUsages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches the replication usages of the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    list(resourceGroupName, vaultName, options) {
        const iter = this.listPagingAll(resourceGroupName, vaultName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, vaultName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, vaultName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(resourceGroupName, vaultName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, vaultName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, vaultName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Fetches the replication usages of the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    _list(resourceGroupName, vaultName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, options }, listOperationSpec$2);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/replicationUsages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationUsageList
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateLinkResourcesOperations operations. */
class PrivateLinkResourcesOperationsImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResourcesOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of private link resources that need to be created for Backup and SiteRecovery
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    list(resourceGroupName, vaultName, options) {
        const iter = this.listPagingAll(resourceGroupName, vaultName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, vaultName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, vaultName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, vaultName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, vaultName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, vaultName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, vaultName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the list of private link resources that need to be created for Backup and SiteRecovery
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    _list(resourceGroupName, vaultName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, options }, listOperationSpec$1);
    }
    /**
     * Returns a specified private link resource that need to be created for Backup and SiteRecovery
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param privateLinkResourceName
     * @param options The options parameters.
     */
    get(resourceGroupName, vaultName, privateLinkResourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, privateLinkResourceName, options }, getOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, vaultName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResources
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/privateLinkResources/{privateLinkResourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName,
        privateLinkResourceName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResources
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing RecoveryServices operations. */
class RecoveryServicesImpl {
    /**
     * Initialize a new instance of the class RecoveryServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * API to check for resource name availability.
     * A name is available if no other resource exists that has the same SubscriptionId, Resource Name and
     * Type
     * or if one or more such resources exist, each of these must be GC'd and their time of deletion be
     * more than 24 Hours Ago
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location Location of the resource
     * @param input Contains information about Resource type and Resource name
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, location, input, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, input, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * API to get details about capabilities provided by Microsoft.RecoveryServices RP
     * @param location Location of the resource
     * @param input Contains information about Resource type and properties to get capabilities
     * @param options The options parameters.
     */
    capabilities(location, input, options) {
        return this.client.sendOperationRequest({ location, input, options }, capabilitiesOperationSpec);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/locations/{location}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: input,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        location
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$5
};
const capabilitiesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/locations/{location}/capabilities",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CapabilitiesResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: input1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        location
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Vaults operations. */
class VaultsImpl {
    /**
     * Initialize a new instance of the class Vaults class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches all the resources of the specified type in the subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options) {
        const iter = this.listBySubscriptionIdPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionIdPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionIdPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionId(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionIdNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionIdPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionIdPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionIdPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Retrieve a list of Vaults.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Fetches all the resources of the specified type in the subscription.
     * @param options The options parameters.
     */
    _listBySubscriptionId(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionIdOperationSpec);
    }
    /**
     * Retrieve a list of Vaults.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Get the Vault details.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    get(resourceGroupName, vaultName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, options }, getOperationSpec$1);
    }
    /**
     * Creates or updates a Recovery Services vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, vaultName, vault, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, vaultName, vault, options },
                spec: createOrUpdateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a Recovery Services vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, vaultName, vault, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, vaultName, vault, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    delete(resourceGroupName, vaultName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, options }, deleteOperationSpec);
    }
    /**
     * Updates the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, vaultName, vault, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, vaultName, vault, options },
                spec: updateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, vaultName, vault, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, vaultName, vault, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListBySubscriptionIdNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
     * @param options The options parameters.
     */
    _listBySubscriptionIdNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionIdNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionIdOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/vaults",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Vault
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Vault
        },
        201: {
            bodyMapper: Vault
        },
        202: {
            bodyMapper: Vault
        },
        204: {
            bodyMapper: Vault
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: vault,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Vault
        },
        201: {
            bodyMapper: Vault
        },
        202: {
            bodyMapper: Vault
        },
        204: {
            bodyMapper: Vault
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: vault1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};
const listBySubscriptionIdNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the list of available operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the list of available operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.RecoveryServices/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClientDiscoveryResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClientDiscoveryResponse
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing VaultExtendedInfo operations. */
class VaultExtendedInfoImpl {
    /**
     * Initialize a new instance of the class VaultExtendedInfo class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the vault extended info.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    get(resourceGroupName, vaultName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, options }, getOperationSpec);
    }
    /**
     * Create vault extended info.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param resourceExtendedInfoDetails Details of ResourceExtendedInfo
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, vaultName, resourceExtendedInfoDetails, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, resourceExtendedInfoDetails, options }, createOrUpdateOperationSpec);
    }
    /**
     * Update vault extended info.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param resourceExtendedInfoDetails Details of ResourceExtendedInfo
     * @param options The options parameters.
     */
    update(resourceGroupName, vaultName, resourceExtendedInfoDetails, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, resourceExtendedInfoDetails, options }, updateOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/extendedInformation/vaultExtendedInfo",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultExtendedInfoResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/extendedInformation/vaultExtendedInfo",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: VaultExtendedInfoResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: resourceExtendedInfoDetails,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$2
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/extendedInformation/vaultExtendedInfo",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: VaultExtendedInfoResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: resourceExtendedInfoDetails,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Usages operations. */
class UsagesImpl {
    /**
     * Initialize a new instance of the class Usages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Fetches the usages of the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    listByVaults(resourceGroupName, vaultName, options) {
        const iter = this.listByVaultsPagingAll(resourceGroupName, vaultName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByVaultsPagingPage(resourceGroupName, vaultName, options, settings);
            }
        };
    }
    listByVaultsPagingPage(resourceGroupName, vaultName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByVaultsPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByVaults(resourceGroupName, vaultName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByVaultsPagingAll(resourceGroupName, vaultName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByVaultsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByVaultsPagingPage(resourceGroupName, vaultName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Fetches the usages of the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    _listByVaults(resourceGroupName, vaultName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, vaultName, options }, listByVaultsOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByVaultsOperationSpec = {
    path: "/Subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/usages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultUsageList
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class RecoveryServicesClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the RecoveryServicesClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-recoveryservices/5.4.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-04-01";
        this.vaultCertificates = new VaultCertificatesImpl(this);
        this.registeredIdentities = new RegisteredIdentitiesImpl(this);
        this.replicationUsages = new ReplicationUsagesImpl(this);
        this.privateLinkResourcesOperations = new PrivateLinkResourcesOperationsImpl(this);
        this.recoveryServices = new RecoveryServicesImpl(this);
        this.vaults = new VaultsImpl(this);
        this.operations = new OperationsImpl(this);
        this.vaultExtendedInfo = new VaultExtendedInfoImpl(this);
        this.usages = new UsagesImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
    /**
     * Gets the operation status for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param operationId
     * @param options The options parameters.
     */
    getOperationStatus(resourceGroupName, vaultName, operationId, options) {
        return this.sendOperationRequest({ resourceGroupName, vaultName, operationId, options }, getOperationStatusOperationSpec);
    }
    /**
     * Gets the operation result for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param operationId
     * @param options The options parameters.
     */
    getOperationResult(resourceGroupName, vaultName, operationId, options) {
        return this.sendOperationRequest({ resourceGroupName, vaultName, operationId, options }, getOperationResultOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/operationStatus/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationResource
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName,
        operationId
    ],
    headerParameters: [accept],
    serializer
};
const getOperationResultOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}/operationResults/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Vault
        },
        202: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        vaultName,
        operationId
    ],
    headerParameters: [accept],
    serializer
};

exports.RecoveryServicesClient = RecoveryServicesClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
