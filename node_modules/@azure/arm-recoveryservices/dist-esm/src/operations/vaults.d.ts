import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Vaults } from "../operationsInterfaces";
import { RecoveryServicesClient } from "../recoveryServicesClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { Vault, VaultsListBySubscriptionIdOptionalParams, VaultsListByResourceGroupOptionalParams, VaultsGetOptionalParams, VaultsGetResponse, VaultsCreateOrUpdateOptionalParams, VaultsCreateOrUpdateResponse, VaultsDeleteOptionalParams, PatchVault, VaultsUpdateOptionalParams, VaultsUpdateResponse } from "../models";
/** Class containing Vaults operations. */
export declare class VaultsImpl implements Vaults {
    private readonly client;
    /**
     * Initialize a new instance of the class Vaults class.
     * @param client Reference to the service client
     */
    constructor(client: RecoveryServicesClient);
    /**
     * Fetches all the resources of the specified type in the subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options?: VaultsListBySubscriptionIdOptionalParams): PagedAsyncIterableIterator<Vault>;
    private listBySubscriptionIdPagingPage;
    private listBySubscriptionIdPagingAll;
    /**
     * Retrieve a list of Vaults.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: VaultsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Vault>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Fetches all the resources of the specified type in the subscription.
     * @param options The options parameters.
     */
    private _listBySubscriptionId;
    /**
     * Retrieve a list of Vaults.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Get the Vault details.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vaultName: string, options?: VaultsGetOptionalParams): Promise<VaultsGetResponse>;
    /**
     * Creates or updates a Recovery Services vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vaultName: string, vault: Vault, options?: VaultsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<VaultsCreateOrUpdateResponse>, VaultsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a Recovery Services vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vaultName: string, vault: Vault, options?: VaultsCreateOrUpdateOptionalParams): Promise<VaultsCreateOrUpdateResponse>;
    /**
     * Deletes a vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, vaultName: string, options?: VaultsDeleteOptionalParams): Promise<void>;
    /**
     * Updates the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vaultName: string, vault: PatchVault, options?: VaultsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<VaultsUpdateResponse>, VaultsUpdateResponse>>;
    /**
     * Updates the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vaultName: string, vault: PatchVault, options?: VaultsUpdateOptionalParams): Promise<VaultsUpdateResponse>;
    /**
     * ListBySubscriptionIdNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptionId method.
     * @param options The options parameters.
     */
    private _listBySubscriptionIdNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=vaults.d.ts.map