import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { VaultCertificates, RegisteredIdentities, ReplicationUsages, PrivateLinkResourcesOperations, RecoveryServices, Vaults, Operations, VaultExtendedInfo, Usages } from "./operationsInterfaces";
import { RecoveryServicesClientOptionalParams, GetOperationStatusOptionalParams, GetOperationStatusResponse, GetOperationResultOptionalParams, GetOperationResultResponse } from "./models";
export declare class RecoveryServicesClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the RecoveryServicesClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: RecoveryServicesClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Gets the operation status for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param operationId
     * @param options The options parameters.
     */
    getOperationStatus(resourceGroupName: string, vaultName: string, operationId: string, options?: GetOperationStatusOptionalParams): Promise<GetOperationStatusResponse>;
    /**
     * Gets the operation result for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param operationId
     * @param options The options parameters.
     */
    getOperationResult(resourceGroupName: string, vaultName: string, operationId: string, options?: GetOperationResultOptionalParams): Promise<GetOperationResultResponse>;
    vaultCertificates: VaultCertificates;
    registeredIdentities: RegisteredIdentities;
    replicationUsages: ReplicationUsages;
    privateLinkResourcesOperations: PrivateLinkResourcesOperations;
    recoveryServices: RecoveryServices;
    vaults: Vaults;
    operations: Operations;
    vaultExtendedInfo: VaultExtendedInfo;
    usages: Usages;
}
//# sourceMappingURL=recoveryServicesClient.d.ts.map