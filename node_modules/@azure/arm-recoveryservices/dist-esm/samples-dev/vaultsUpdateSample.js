/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { RecoveryServicesClient } from "@azure/arm-recoveryservices";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Updates the vault.
 *
 * @summary Updates the vault.
 * x-ms-original-file: specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/stable/2023-04-01/examples/PATCHVault.json
 */
function updateResource() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["RECOVERYSERVICES_SUBSCRIPTION_ID"] ||
            "77777777-b0c6-47a2-b37c-d8e65a629c18";
        const resourceGroupName = process.env["RECOVERYSERVICES_RESOURCE_GROUP"] || "HelloWorld";
        const vaultName = "swaggerExample";
        const vault = { tags: { patchKey: "PatchKeyUpdated" } };
        const credential = new DefaultAzureCredential();
        const client = new RecoveryServicesClient(credential, subscriptionId);
        const result = yield client.vaults.beginUpdateAndWait(resourceGroupName, vaultName, vault);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates the vault.
 *
 * @summary Updates the vault.
 * x-ms-original-file: specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/stable/2023-04-01/examples/PATCHVault_WithCMK.json
 */
function updateResourceWithCustomerManagedKeys() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["RECOVERYSERVICES_SUBSCRIPTION_ID"] ||
            "77777777-b0c6-47a2-b37c-d8e65a629c18";
        const resourceGroupName = process.env["RECOVERYSERVICES_RESOURCE_GROUP"] || "HelloWorld";
        const vaultName = "swaggerExample";
        const vault = {
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/85bf5e8c30844f42Add2746ebb7e97b2/resourcegroups/defaultrg/providers/MicrosoftManagedIdentity/userAssignedIdentities/examplemsi": {}
                }
            },
            properties: {
                encryption: {
                    infrastructureEncryption: "Enabled",
                    kekIdentity: {
                        userAssignedIdentity: "/subscriptions/85bf5e8c-3084-4f42-add2-746ebb7e97b2/resourcegroups/defaultrg/providers/Microsoft.ManagedIdentity/userAssignedIdentities/examplemsi"
                    },
                    keyVaultProperties: {
                        keyUri: "https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"
                    }
                }
            },
            tags: { patchKey: "PatchKeyUpdated" }
        };
        const credential = new DefaultAzureCredential();
        const client = new RecoveryServicesClient(credential, subscriptionId);
        const result = yield client.vaults.beginUpdateAndWait(resourceGroupName, vaultName, vault);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates the vault.
 *
 * @summary Updates the vault.
 * x-ms-original-file: specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/stable/2023-04-01/examples/PatchVault_WithCMK2.json
 */
function updateResourceWithCustomerManagedKeys2() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["RECOVERYSERVICES_SUBSCRIPTION_ID"] ||
            "77777777-b0c6-47a2-b37c-d8e65a629c18";
        const resourceGroupName = process.env["RECOVERYSERVICES_RESOURCE_GROUP"] || "HelloWorld";
        const vaultName = "swaggerExample";
        const vault = {
            identity: { type: "SystemAssigned" },
            properties: {
                encryption: { kekIdentity: { useSystemAssignedIdentity: true } }
            },
            tags: { patchKey: "PatchKeyUpdated" }
        };
        const credential = new DefaultAzureCredential();
        const client = new RecoveryServicesClient(credential, subscriptionId);
        const result = yield client.vaults.beginUpdateAndWait(resourceGroupName, vaultName, vault);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates the vault.
 *
 * @summary Updates the vault.
 * x-ms-original-file: specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/stable/2023-04-01/examples/PATCHVault_WithCMK3.json
 */
function updateResourceWithCustomerManagedKeys3() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["RECOVERYSERVICES_SUBSCRIPTION_ID"] ||
            "77777777-b0c6-47a2-b37c-d8e65a629c18";
        const resourceGroupName = process.env["RECOVERYSERVICES_RESOURCE_GROUP"] || "HelloWorld";
        const vaultName = "swaggerExample";
        const vault = {
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/85bf5e8c30844f42Add2746ebb7e97b2/resourcegroups/defaultrg/providers/MicrosoftManagedIdentity/userAssignedIdentities/examplemsi": {}
                }
            },
            properties: {
                encryption: {
                    keyVaultProperties: {
                        keyUri: "https://cmk2xkv.vault.azure.net/keys/Key1/0767b348bb1a4c07baa6c4ec0055d2b3"
                    }
                }
            },
            tags: { patchKey: "PatchKeyUpdated" }
        };
        const credential = new DefaultAzureCredential();
        const client = new RecoveryServicesClient(credential, subscriptionId);
        const result = yield client.vaults.beginUpdateAndWait(resourceGroupName, vaultName, vault);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates the vault.
 *
 * @summary Updates the vault.
 * x-ms-original-file: specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/stable/2023-04-01/examples/PATCHVault_WithUserAssignedIdentity.json
 */
function updateResourceWithUserAssignedIdentity() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["RECOVERYSERVICES_SUBSCRIPTION_ID"] ||
            "77777777-b0c6-47a2-b37c-d8e65a629c18";
        const resourceGroupName = process.env["RECOVERYSERVICES_RESOURCE_GROUP"] || "HelloWorld";
        const vaultName = "swaggerExample";
        const vault = {
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/85bf5e8c30844f42Add2746ebb7e97b2/resourcegroups/defaultrg/providers/MicrosoftManagedIdentity/userAssignedIdentities/examplemsi": {}
                }
            },
            tags: { patchKey: "PatchKeyUpdated" }
        };
        const credential = new DefaultAzureCredential();
        const client = new RecoveryServicesClient(credential, subscriptionId);
        const result = yield client.vaults.beginUpdateAndWait(resourceGroupName, vaultName, vault);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates the vault.
 *
 * @summary Updates the vault.
 * x-ms-original-file: specification/recoveryservices/resource-manager/Microsoft.RecoveryServices/stable/2023-04-01/examples/PATCHVault_WithMonitoringSettings.json
 */
function updateVaultWithMonitoringSetting() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["RECOVERYSERVICES_SUBSCRIPTION_ID"] ||
            "77777777-b0c6-47a2-b37c-d8e65a629c18";
        const resourceGroupName = process.env["RECOVERYSERVICES_RESOURCE_GROUP"] || "HelloWorld";
        const vaultName = "swaggerExample";
        const vault = {
            properties: {
                monitoringSettings: {
                    azureMonitorAlertSettings: { alertsForAllJobFailures: "Enabled" },
                    classicAlertSettings: { alertsForCriticalOperations: "Disabled" }
                }
            },
            tags: { patchKey: "PatchKeyUpdated" }
        };
        const credential = new DefaultAzureCredential();
        const client = new RecoveryServicesClient(credential, subscriptionId);
        const result = yield client.vaults.beginUpdateAndWait(resourceGroupName, vaultName, vault);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        updateResource();
        updateResourceWithCustomerManagedKeys();
        updateResourceWithCustomerManagedKeys2();
        updateResourceWithCustomerManagedKeys3();
        updateResourceWithUserAssignedIdentity();
        updateVaultWithMonitoringSetting();
    });
}
main().catch(console.error);
//# sourceMappingURL=vaultsUpdateSample.js.map