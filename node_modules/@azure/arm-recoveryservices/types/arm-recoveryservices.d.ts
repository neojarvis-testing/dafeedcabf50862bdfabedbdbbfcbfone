import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Defines values for AlertsState. \
 * {@link KnownAlertsState} can be used interchangeably with AlertsState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type AlertsState = string;

/**
 * Defines values for AuthType. \
 * {@link KnownAuthType} can be used interchangeably with AuthType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **ACS** \
 * **AAD** \
 * **AccessControlService** \
 * **AzureActiveDirectory**
 */
export declare type AuthType = string;

/** Settings for Azure Monitor based alerts */
export declare interface AzureMonitorAlertSettings {
    alertsForAllJobFailures?: AlertsState;
}

/**
 * Defines values for BackupStorageVersion. \
 * {@link KnownBackupStorageVersion} can be used interchangeably with BackupStorageVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **V1** \
 * **V2** \
 * **Unassigned**
 */
export declare type BackupStorageVersion = string;

/** Capabilities information */
export declare interface CapabilitiesProperties {
    dnsZones?: DNSZone[];
}

/** Capabilities response for Microsoft.RecoveryServices */
export declare interface CapabilitiesResponse extends ResourceCapabilitiesBase {
    /** Capabilities properties in response */
    properties?: CapabilitiesResponseProperties;
}

/** Capabilities properties in response */
export declare interface CapabilitiesResponseProperties {
    dnsZones?: DNSZoneResponse[];
}

/** Details of the certificate to be uploaded to the vault. */
export declare interface CertificateRequest {
    /** Raw certificate data. */
    properties?: RawCertificateData;
}

/** Resource Name availability input parameters - Resource type and resource name */
export declare interface CheckNameAvailabilityParameters {
    /** Describes the Resource type: Microsoft.RecoveryServices/Vaults */
    type?: string;
    /** Resource name for which availability needs to be checked */
    name?: string;
}

/** Response for check name availability API. Resource provider will set availability as true | false. */
export declare interface CheckNameAvailabilityResult {
    nameAvailable?: boolean;
    reason?: string;
    message?: string;
}

/** Settings for classic alerts */
export declare interface ClassicAlertSettings {
    alertsForCriticalOperations?: AlertsState;
}

/** Localized display information of an operation. */
export declare interface ClientDiscoveryDisplay {
    /** Name of the provider for display purposes */
    provider?: string;
    /** ResourceType for which this Operation can be performed. */
    resource?: string;
    /** Operations Name itself. */
    operation?: string;
    /** Description of the operation having details of what operation is about. */
    description?: string;
}

/** Class to represent shoebox log specification in json client discovery. */
export declare interface ClientDiscoveryForLogSpecification {
    /** Name of the log. */
    name?: string;
    /** Localized display name */
    displayName?: string;
    /** Blobs created in customer storage account per hour */
    blobDuration?: string;
}

/** Class to represent shoebox properties in json client discovery. */
export declare interface ClientDiscoveryForProperties {
    /** Operation properties. */
    serviceSpecification?: ClientDiscoveryForServiceSpecification;
}

/** Class to represent shoebox service specification in json client discovery. */
export declare interface ClientDiscoveryForServiceSpecification {
    /** List of log specifications of this operation. */
    logSpecifications?: ClientDiscoveryForLogSpecification[];
}

/** Operations List response which contains list of available APIs. */
export declare interface ClientDiscoveryResponse {
    /** List of available operations. */
    value?: ClientDiscoveryValueForSingleApi[];
    /** Link to the next chunk of the response */
    nextLink?: string;
}

/** Available operation details. */
export declare interface ClientDiscoveryValueForSingleApi {
    /** Name of the Operation. */
    name?: string;
    /** Contains the localized display information for this particular operation */
    display?: ClientDiscoveryDisplay;
    /** The intended executor of the operation;governs the display of the operation in the RBAC UX and the audit logs UX */
    origin?: string;
    /** ShoeBox properties for the given operation. */
    properties?: ClientDiscoveryForProperties;
}

/** An error response from Azure Backup. */
export declare interface CloudError {
    /** The resource management error response. */
    error?: ErrorModel;
}

/** The details of the identity used for CMK */
export declare interface CmkKekIdentity {
    /** Indicate that system assigned identity should be used. Mutually exclusive with 'userAssignedIdentity' field */
    useSystemAssignedIdentity?: boolean;
    /** The user assigned identity to be used to grant permissions in case the type of identity used is UserAssigned */
    userAssignedIdentity?: string;
}

/** The properties of the Key Vault which hosts CMK */
export declare interface CmkKeyVaultProperties {
    /** The key uri of the Customer Managed Key */
    keyUri?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for CrossRegionRestore. \
 * {@link KnownCrossRegionRestore} can be used interchangeably with CrossRegionRestore,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type CrossRegionRestore = string;

/** Settings for Cross Subscription Restore Settings */
export declare interface CrossSubscriptionRestoreSettings {
    crossSubscriptionRestoreState?: CrossSubscriptionRestoreState;
}

/**
 * Defines values for CrossSubscriptionRestoreState. \
 * {@link KnownCrossSubscriptionRestoreState} can be used interchangeably with CrossSubscriptionRestoreState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled** \
 * **PermanentlyDisabled**
 */
export declare type CrossSubscriptionRestoreState = string;

/** DNSZone information */
export declare interface DNSZone {
    /** Subresource type for vault AzureBackup, AzureBackup_secondary or AzureSiteRecovery */
    subResource?: VaultSubResourceType;
}

/** DNSZone information for Microsoft.RecoveryServices */
export declare interface DNSZoneResponse extends DNSZone {
    /** The private link resource Private link DNS zone names. */
    requiredZoneNames?: string[];
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The resource management error response. */
export declare interface ErrorModel {
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorModel[];
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Optional parameters. */
export declare interface GetOperationResultOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getOperationResult operation. */
export declare type GetOperationResultResponse = Vault;

/** Optional parameters. */
export declare interface GetOperationStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getOperationStatus operation. */
export declare type GetOperationStatusResponse = OperationResource;

/** Identity for the resource. */
export declare interface IdentityData {
    /**
     * The principal ID of resource identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities. */
    type: ResourceIdentityType;
    /** The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
    userAssignedIdentities?: {
        [propertyName: string]: UserIdentity;
    };
}

/** Immutability Settings of vault */
export declare interface ImmutabilitySettings {
    state?: ImmutabilityState;
}

/**
 * Defines values for ImmutabilityState. \
 * {@link KnownImmutabilityState} can be used interchangeably with ImmutabilityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Unlocked** \
 * **Locked**
 */
export declare type ImmutabilityState = string;

/**
 * Defines values for InfrastructureEncryptionState. \
 * {@link KnownInfrastructureEncryptionState} can be used interchangeably with InfrastructureEncryptionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type InfrastructureEncryptionState = string;

/** Summary of the replication job data for this vault. */
export declare interface JobsSummary {
    /** Count of failed jobs. */
    failedJobs?: number;
    /** Count of suspended jobs. */
    suspendedJobs?: number;
    /** Count of in-progress jobs. */
    inProgressJobs?: number;
}

/** Known values of {@link AlertsState} that the service accepts. */
export declare enum KnownAlertsState {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link AuthType} that the service accepts. */
export declare enum KnownAuthType {
    /** Invalid */
    Invalid = "Invalid",
    /** ACS */
    ACS = "ACS",
    /** AAD */
    AAD = "AAD",
    /** AccessControlService */
    AccessControlService = "AccessControlService",
    /** AzureActiveDirectory */
    AzureActiveDirectory = "AzureActiveDirectory"
}

/** Known values of {@link BackupStorageVersion} that the service accepts. */
export declare enum KnownBackupStorageVersion {
    /** V1 */
    V1 = "V1",
    /** V2 */
    V2 = "V2",
    /** Unassigned */
    Unassigned = "Unassigned"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link CrossRegionRestore} that the service accepts. */
export declare enum KnownCrossRegionRestore {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link CrossSubscriptionRestoreState} that the service accepts. */
export declare enum KnownCrossSubscriptionRestoreState {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled",
    /** PermanentlyDisabled */
    PermanentlyDisabled = "PermanentlyDisabled"
}

/** Known values of {@link ImmutabilityState} that the service accepts. */
export declare enum KnownImmutabilityState {
    /** Disabled */
    Disabled = "Disabled",
    /** Unlocked */
    Unlocked = "Unlocked",
    /** Locked */
    Locked = "Locked"
}

/** Known values of {@link InfrastructureEncryptionState} that the service accepts. */
export declare enum KnownInfrastructureEncryptionState {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link MultiUserAuthorization} that the service accepts. */
export declare enum KnownMultiUserAuthorization {
    /** Invalid */
    Invalid = "Invalid",
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link PrivateEndpointConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed",
    /** Pending */
    Pending = "Pending"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link ResourceIdentityType} that the service accepts. */
export declare enum KnownResourceIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** None */
    None = "None",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned, UserAssigned"
}

/** Known values of {@link ResourceMoveState} that the service accepts. */
export declare enum KnownResourceMoveState {
    /** Unknown */
    Unknown = "Unknown",
    /** InProgress */
    InProgress = "InProgress",
    /** PrepareFailed */
    PrepareFailed = "PrepareFailed",
    /** CommitFailed */
    CommitFailed = "CommitFailed",
    /** PrepareTimedout */
    PrepareTimedout = "PrepareTimedout",
    /** CommitTimedout */
    CommitTimedout = "CommitTimedout",
    /** MoveSucceeded */
    MoveSucceeded = "MoveSucceeded",
    /** Failure */
    Failure = "Failure",
    /** CriticalFailure */
    CriticalFailure = "CriticalFailure",
    /** PartialSuccess */
    PartialSuccess = "PartialSuccess"
}

/** Known values of {@link SecureScoreLevel} that the service accepts. */
export declare enum KnownSecureScoreLevel {
    /** None */
    None = "None",
    /** Minimum */
    Minimum = "Minimum",
    /** Adequate */
    Adequate = "Adequate",
    /** Maximum */
    Maximum = "Maximum"
}

/** Known values of {@link SkuName} that the service accepts. */
export declare enum KnownSkuName {
    /** Standard */
    Standard = "Standard",
    /** RS0 */
    RS0 = "RS0"
}

/** Known values of {@link SoftDeleteState} that the service accepts. */
export declare enum KnownSoftDeleteState {
    /** Invalid */
    Invalid = "Invalid",
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled",
    /** AlwaysON */
    AlwaysON = "AlwaysON"
}

/** Known values of {@link StandardTierStorageRedundancy} that the service accepts. */
export declare enum KnownStandardTierStorageRedundancy {
    /** LocallyRedundant */
    LocallyRedundant = "LocallyRedundant",
    /** GeoRedundant */
    GeoRedundant = "GeoRedundant",
    /** ZoneRedundant */
    ZoneRedundant = "ZoneRedundant"
}

/** Known values of {@link TriggerType} that the service accepts. */
export declare enum KnownTriggerType {
    /** UserTriggered */
    UserTriggered = "UserTriggered",
    /** ForcedUpgrade */
    ForcedUpgrade = "ForcedUpgrade"
}

/** Known values of {@link UsagesUnit} that the service accepts. */
export declare enum KnownUsagesUnit {
    /** Count */
    Count = "Count",
    /** Bytes */
    Bytes = "Bytes",
    /** Seconds */
    Seconds = "Seconds",
    /** Percent */
    Percent = "Percent",
    /** CountPerSecond */
    CountPerSecond = "CountPerSecond",
    /** BytesPerSecond */
    BytesPerSecond = "BytesPerSecond"
}

/** Known values of {@link VaultPrivateEndpointState} that the service accepts. */
export declare enum KnownVaultPrivateEndpointState {
    /** None */
    None = "None",
    /** Enabled */
    Enabled = "Enabled"
}

/** Known values of {@link VaultSubResourceType} that the service accepts. */
export declare enum KnownVaultSubResourceType {
    /** AzureBackup */
    AzureBackup = "AzureBackup",
    /** AzureBackupSecondary */
    AzureBackupSecondary = "AzureBackup_secondary",
    /** AzureSiteRecovery */
    AzureSiteRecovery = "AzureSiteRecovery"
}

/** Known values of {@link VaultUpgradeState} that the service accepts. */
export declare enum KnownVaultUpgradeState {
    /** Unknown */
    Unknown = "Unknown",
    /** InProgress */
    InProgress = "InProgress",
    /** Upgraded */
    Upgraded = "Upgraded",
    /** Failed */
    Failed = "Failed"
}

/** Monitoring Settings of the vault */
export declare interface MonitoringSettings {
    /** Settings for Azure Monitor based alerts */
    azureMonitorAlertSettings?: AzureMonitorAlertSettings;
    /** Settings for classic alerts */
    classicAlertSettings?: ClassicAlertSettings;
}

/** Summary of the replication monitoring data for this vault. */
export declare interface MonitoringSummary {
    /** Count of unhealthy VMs. */
    unHealthyVmCount?: number;
    /** Count of unhealthy replication providers. */
    unHealthyProviderCount?: number;
    /** Count of all critical warnings. */
    eventsCount?: number;
    /** Count of all deprecated recovery service providers. */
    deprecatedProviderCount?: number;
    /** Count of all the supported recovery service providers. */
    supportedProviderCount?: number;
    /** Count of all the unsupported recovery service providers. */
    unsupportedProviderCount?: number;
}

/**
 * Defines values for MultiUserAuthorization. \
 * {@link KnownMultiUserAuthorization} can be used interchangeably with MultiUserAuthorization,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **Enabled** \
 * **Disabled**
 */
export declare type MultiUserAuthorization = string;

/** The name of usage. */
export declare interface NameInfo {
    /** Value of usage. */
    value?: string;
    /** Localized value of usage. */
    localizedValue?: string;
}

/** Operation Resource */
export declare interface OperationResource {
    /** End time of the operation */
    endTime?: Date;
    /** Required if status == failed or status == canceled. This is the OData v4 error format, used by the RPC and will go into the v2.2 Azure REST API guidelines. */
    error?: ErrorModel;
    /** It should match what is used to GET the operation result */
    id?: string;
    /** It must match the last segment of the "id" field, and will typically be a GUID / system generated value */
    name?: string;
    /** The status of the operation. (InProgress/Success/Failed/Cancelled) */
    status?: string;
    /** Start time of the operation */
    startTime?: Date;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Returns the list of available operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<ClientDiscoveryValueForSingleApi>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = ClientDiscoveryResponse;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = ClientDiscoveryResponse;

/** Tracked resource with location. */
export declare interface PatchTrackedResource extends Resource {
    /** Resource location. */
    location?: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Patch Resource information, as returned by the resource provider. */
export declare interface PatchVault extends PatchTrackedResource {
    /** Properties of the vault. */
    properties?: VaultProperties;
    /** Identifies the unique system identifier for each Azure resource. */
    sku?: Sku;
    /** Identity for the resource. */
    identity?: IdentityData;
}

/** The Private Endpoint network resource that is linked to the Private Endpoint connection. */
export declare interface PrivateEndpoint {
    /**
     * Gets or sets id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** Private Endpoint Connection Response Properties. */
export declare interface PrivateEndpointConnection {
    /**
     * Gets or sets provisioning state of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The Private Endpoint network resource that is linked to the Private Endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpoint?: PrivateEndpoint;
    /**
     * Gets or sets private link service connection state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /** Group Ids for the Private Endpoint */
    groupIds?: VaultSubResourceType[];
}

/**
 * Defines values for PrivateEndpointConnectionStatus. \
 * {@link KnownPrivateEndpointConnectionStatus} can be used interchangeably with PrivateEndpointConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export declare type PrivateEndpointConnectionStatus = string;

/** Information to be stored in Vault properties as an element of privateEndpointConnections List. */
export declare interface PrivateEndpointConnectionVaultProperties {
    /**
     * Format of id subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.[Service]/{resource}/{resourceName}/privateEndpointConnections/{connectionName}.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Private Endpoint Connection Response Properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: PrivateEndpointConnection;
    /**
     * The name of the private Endpoint Connection
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type, which will be of the format, Microsoft.RecoveryServices/vaults/privateEndpointConnections
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The location of the private Endpoint connection
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
}

/** Information of the private link resource. */
export declare interface PrivateLinkResource {
    /**
     * Fully qualified identifier of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * e.g. Microsoft.RecoveryServices/vaults/privateLinkResources
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * e.g. f9ad6492-33d4-4690-9999-6bfd52a0d081 (Backup) or f9ad6492-33d4-4690-9999-6bfd52a0d082 (SiteRecovery)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * [backup-ecs1, backup-prot1, backup-prot1b, backup-prot1c, backup-id1]
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /**
     * The private link resource Private link DNS zone name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredZoneNames?: string[];
}

/** Class which represent the stamps associated with the vault. */
export declare interface PrivateLinkResources {
    /** A collection of private link resources */
    value?: PrivateLinkResource[];
    /** Link to the next chunk of the response */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateLinkResourcesListNextResponse = PrivateLinkResources;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateLinkResourcesListResponse = PrivateLinkResources;

/** Interface representing a PrivateLinkResourcesOperations. */
export declare interface PrivateLinkResourcesOperations {
    /**
     * Returns the list of private link resources that need to be created for Backup and SiteRecovery
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, vaultName: string, options?: PrivateLinkResourcesListOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
    /**
     * Returns a specified private link resource that need to be created for Backup and SiteRecovery
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param privateLinkResourceName
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vaultName: string, privateLinkResourceName: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Gets or sets private link service connection state. */
export declare interface PrivateLinkServiceConnectionState {
    /**
     * Gets or sets the status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: PrivateEndpointConnectionStatus;
    /**
     * Gets or sets description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Gets or sets actions required.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionsRequired?: string;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Deleting** \
 * **Failed** \
 * **Pending**
 */
export declare type ProvisioningState = string;

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/** Raw certificate data. */
export declare interface RawCertificateData {
    /** Specifies the authentication type. */
    authType?: AuthType;
    /** The base64 encoded certificate raw data string */
    certificate?: Uint8Array;
}

/** Interface representing a RecoveryServices. */
export declare interface RecoveryServices {
    /**
     * API to check for resource name availability.
     * A name is available if no other resource exists that has the same SubscriptionId, Resource Name and
     * Type
     * or if one or more such resources exist, each of these must be GC'd and their time of deletion be
     * more than 24 Hours Ago
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location Location of the resource
     * @param input Contains information about Resource type and Resource name
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName: string, location: string, input: CheckNameAvailabilityParameters, options?: RecoveryServicesCheckNameAvailabilityOptionalParams): Promise<RecoveryServicesCheckNameAvailabilityResponse>;
    /**
     * API to get details about capabilities provided by Microsoft.RecoveryServices RP
     * @param location Location of the resource
     * @param input Contains information about Resource type and properties to get capabilities
     * @param options The options parameters.
     */
    capabilities(location: string, input: ResourceCapabilities, options?: RecoveryServicesCapabilitiesOptionalParams): Promise<RecoveryServicesCapabilitiesResponse>;
}

/** Optional parameters. */
export declare interface RecoveryServicesCapabilitiesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the capabilities operation. */
export declare type RecoveryServicesCapabilitiesResponse = CapabilitiesResponse;

/** Optional parameters. */
export declare interface RecoveryServicesCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type RecoveryServicesCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

export declare class RecoveryServicesClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the RecoveryServicesClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: RecoveryServicesClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Gets the operation status for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param operationId
     * @param options The options parameters.
     */
    getOperationStatus(resourceGroupName: string, vaultName: string, operationId: string, options?: GetOperationStatusOptionalParams): Promise<GetOperationStatusResponse>;
    /**
     * Gets the operation result for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param operationId
     * @param options The options parameters.
     */
    getOperationResult(resourceGroupName: string, vaultName: string, operationId: string, options?: GetOperationResultOptionalParams): Promise<GetOperationResultResponse>;
    vaultCertificates: VaultCertificates;
    registeredIdentities: RegisteredIdentities;
    replicationUsages: ReplicationUsages;
    privateLinkResourcesOperations: PrivateLinkResourcesOperations;
    recoveryServices: RecoveryServices;
    vaults: Vaults;
    operations: Operations;
    vaultExtendedInfo: VaultExtendedInfo;
    usages: Usages;
}

/** Optional parameters. */
export declare interface RecoveryServicesClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Interface representing a RegisteredIdentities. */
export declare interface RegisteredIdentities {
    /**
     * Unregisters the given container from your Recovery Services vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param identityName Name of the protection container to unregister.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, vaultName: string, identityName: string, options?: RegisteredIdentitiesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface RegisteredIdentitiesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Replication usages of a vault. */
export declare interface ReplicationUsage {
    /** Summary of the replication monitoring data for this vault. */
    monitoringSummary?: MonitoringSummary;
    /** Summary of the replication jobs data for this vault. */
    jobsSummary?: JobsSummary;
    /** Number of replication protected items for this vault. */
    protectedItemCount?: number;
    /** Number of replication recovery plans for this vault. */
    recoveryPlanCount?: number;
    /** Number of servers registered to this vault. */
    registeredServersCount?: number;
    /** The authentication type of recovery service providers in the vault. */
    recoveryServicesProviderAuthType?: number;
}

/** Replication usages for vault. */
export declare interface ReplicationUsageList {
    /** The list of replication usages for the given vault. */
    value?: ReplicationUsage[];
}

/** Interface representing a ReplicationUsages. */
export declare interface ReplicationUsages {
    /**
     * Fetches the replication usages of the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, vaultName: string, options?: ReplicationUsagesListOptionalParams): PagedAsyncIterableIterator<ReplicationUsage>;
}

/** Optional parameters. */
export declare interface ReplicationUsagesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ReplicationUsagesListResponse = ReplicationUsageList;

/** ARM Resource. */
export declare interface Resource {
    /**
     * Resource Id represents the complete path to the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name associated with the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Optional ETag. */
    etag?: string;
}

/** Input to get capabilities information for Microsoft.RecoveryServices */
export declare interface ResourceCapabilities extends ResourceCapabilitiesBase {
    /** Capabilities information */
    properties?: CapabilitiesProperties;
}

/** Base class for request and response capabilities information for Microsoft.RecoveryServices */
export declare interface ResourceCapabilitiesBase {
    /** Describes the Resource type: Microsoft.RecoveryServices/Vaults */
    type: string;
}

/** Certificate details representing the Vault credentials for AAD. */
export declare interface ResourceCertificateAndAadDetails extends ResourceCertificateDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "AzureActiveDirectory";
    /** AAD tenant authority. */
    aadAuthority: string;
    /** AAD tenant Id. */
    aadTenantId: string;
    /** AAD service principal clientId. */
    servicePrincipalClientId: string;
    /** AAD service principal ObjectId. */
    servicePrincipalObjectId: string;
    /** Azure Management Endpoint Audience. */
    azureManagementEndpointAudience: string;
    /** Service Resource Id. */
    serviceResourceId?: string;
    /** AAD audience for the resource */
    aadAudience?: string;
}

/** Certificate details representing the Vault credentials for ACS. */
export declare interface ResourceCertificateAndAcsDetails extends ResourceCertificateDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "AccessControlService";
    /** ACS namespace name - tenant for our service. */
    globalAcsNamespace: string;
    /** Acs mgmt host name to connect to. */
    globalAcsHostName: string;
    /** Global ACS namespace RP realm. */
    globalAcsRPRealm: string;
}

/** Certificate details representing the Vault credentials. */
export declare interface ResourceCertificateDetails {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authType: "AzureActiveDirectory" | "AccessControlService";
    /** The base64 encoded certificate raw data string. */
    certificate?: Uint8Array;
    /** Certificate friendly name. */
    friendlyName?: string;
    /** Certificate issuer. */
    issuer?: string;
    /** Resource ID of the vault. */
    resourceId?: number;
    /** Certificate Subject Name. */
    subject?: string;
    /** Certificate thumbprint. */
    thumbprint?: string;
    /** Certificate Validity start Date time. */
    validFrom?: Date;
    /** Certificate Validity End Date time. */
    validTo?: Date;
}

export declare type ResourceCertificateDetailsUnion = ResourceCertificateDetails | ResourceCertificateAndAadDetails | ResourceCertificateAndAcsDetails;

/**
 * Defines values for ResourceIdentityType. \
 * {@link KnownResourceIdentityType} can be used interchangeably with ResourceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **None** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export declare type ResourceIdentityType = string;

/**
 * Defines values for ResourceMoveState. \
 * {@link KnownResourceMoveState} can be used interchangeably with ResourceMoveState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **InProgress** \
 * **PrepareFailed** \
 * **CommitFailed** \
 * **PrepareTimedout** \
 * **CommitTimedout** \
 * **MoveSucceeded** \
 * **Failure** \
 * **CriticalFailure** \
 * **PartialSuccess**
 */
export declare type ResourceMoveState = string;

/** Restore Settings  of the vault */
export declare interface RestoreSettings {
    /** Settings for CrossSubscriptionRestore */
    crossSubscriptionRestoreSettings?: CrossSubscriptionRestoreSettings;
}

/**
 * Defines values for SecureScoreLevel. \
 * {@link KnownSecureScoreLevel} can be used interchangeably with SecureScoreLevel,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Minimum** \
 * **Adequate** \
 * **Maximum**
 */
export declare type SecureScoreLevel = string;

/** Security Settings of the vault */
export declare interface SecuritySettings {
    /** Immutability Settings of a vault */
    immutabilitySettings?: ImmutabilitySettings;
    /** Soft delete Settings of a vault */
    softDeleteSettings?: SoftDeleteSettings;
    /**
     * MUA Settings of a vault
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly multiUserAuthorization?: MultiUserAuthorization;
}

/** Identifies the unique system identifier for each Azure resource. */
export declare interface Sku {
    /** Name of SKU is RS0 (Recovery Services 0th version) and the tier is standard tier. They do not have affect on backend storage redundancy or any other vault settings. To manage storage redundancy, use the backupstorageconfig */
    name: SkuName;
    /** The Sku tier. */
    tier?: string;
    /** The sku family */
    family?: string;
    /** The sku size */
    size?: string;
    /** The sku capacity */
    capacity?: string;
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **RS0**
 */
export declare type SkuName = string;

/** Soft delete Settings of vault */
export declare interface SoftDeleteSettings {
    softDeleteState?: SoftDeleteState;
    /** Soft delete retention period in days */
    softDeleteRetentionPeriodInDays?: number;
}

/**
 * Defines values for SoftDeleteState. \
 * {@link KnownSoftDeleteState} can be used interchangeably with SoftDeleteState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **Enabled** \
 * **Disabled** \
 * **AlwaysON**
 */
export declare type SoftDeleteState = string;

/**
 * Defines values for StandardTierStorageRedundancy. \
 * {@link KnownStandardTierStorageRedundancy} can be used interchangeably with StandardTierStorageRedundancy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LocallyRedundant** \
 * **GeoRedundant** \
 * **ZoneRedundant**
 */
export declare type StandardTierStorageRedundancy = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The type of identity that last modified the resource. */
    lastModifiedAt?: Date;
}

/** Tracked resource with location. */
export declare interface TrackedResource extends Resource {
    /** Resource location. */
    location: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for TriggerType. \
 * {@link KnownTriggerType} can be used interchangeably with TriggerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UserTriggered** \
 * **ForcedUpgrade**
 */
export declare type TriggerType = string;

/** Details for upgrading vault. */
export declare interface UpgradeDetails {
    /**
     * ID of the vault upgrade operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationId?: string;
    /**
     * UTC time at which the upgrade operation has started.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTimeUtc?: Date;
    /**
     * UTC time at which the upgrade operation status was last updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTimeUtc?: Date;
    /**
     * UTC time at which the upgrade operation has ended.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTimeUtc?: Date;
    /**
     * Status of the vault upgrade operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: VaultUpgradeState;
    /**
     * Message to the user containing information about the upgrade operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The way the vault upgrade was triggered.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly triggerType?: TriggerType;
    /**
     * Resource ID of the upgraded vault.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly upgradedResourceId?: string;
    /**
     * Resource ID of the vault before the upgrade.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly previousResourceId?: string;
}

/** Interface representing a Usages. */
export declare interface Usages {
    /**
     * Fetches the usages of the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    listByVaults(resourceGroupName: string, vaultName: string, options?: UsagesListByVaultsOptionalParams): PagedAsyncIterableIterator<VaultUsage>;
}

/** Optional parameters. */
export declare interface UsagesListByVaultsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByVaults operation. */
export declare type UsagesListByVaultsResponse = VaultUsageList;

/**
 * Defines values for UsagesUnit. \
 * {@link KnownUsagesUnit} can be used interchangeably with UsagesUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count** \
 * **Bytes** \
 * **Seconds** \
 * **Percent** \
 * **CountPerSecond** \
 * **BytesPerSecond**
 */
export declare type UsagesUnit = string;

/** A resource identity that is managed by the user of the service. */
export declare interface UserIdentity {
    /**
     * The principal ID of the user-assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the user-assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** Resource information, as returned by the resource provider. */
export declare interface Vault extends TrackedResource {
    /** Identity for the resource. */
    identity?: IdentityData;
    /** Properties of the vault. */
    properties?: VaultProperties;
    /** Identifies the unique system identifier for each Azure resource. */
    sku?: Sku;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Certificate corresponding to a vault that can be used by clients to register themselves with the vault. */
export declare interface VaultCertificateResponse {
    /**
     * Resource name associated with the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type represents the complete path of the form Namespace/ResourceType/ResourceType/...
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Resource Id represents the complete path to the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /** Certificate details representing the Vault credentials. */
    properties?: ResourceCertificateDetailsUnion;
}

/** Interface representing a VaultCertificates. */
export declare interface VaultCertificates {
    /**
     * Uploads a certificate for a resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param certificateName Certificate friendly name.
     * @param certificateRequest Input parameters for uploading the vault certificate.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, vaultName: string, certificateName: string, certificateRequest: CertificateRequest, options?: VaultCertificatesCreateOptionalParams): Promise<VaultCertificatesCreateResponse>;
}

/** Optional parameters. */
export declare interface VaultCertificatesCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type VaultCertificatesCreateResponse = VaultCertificateResponse;

/** Interface representing a VaultExtendedInfo. */
export declare interface VaultExtendedInfo {
    /**
     * Get the vault extended info.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vaultName: string, options?: VaultExtendedInfoGetOptionalParams): Promise<VaultExtendedInfoGetResponse>;
    /**
     * Create vault extended info.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param resourceExtendedInfoDetails Details of ResourceExtendedInfo
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, vaultName: string, resourceExtendedInfoDetails: VaultExtendedInfoResource, options?: VaultExtendedInfoCreateOrUpdateOptionalParams): Promise<VaultExtendedInfoCreateOrUpdateResponse>;
    /**
     * Update vault extended info.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param resourceExtendedInfoDetails Details of ResourceExtendedInfo
     * @param options The options parameters.
     */
    update(resourceGroupName: string, vaultName: string, resourceExtendedInfoDetails: VaultExtendedInfoResource, options?: VaultExtendedInfoUpdateOptionalParams): Promise<VaultExtendedInfoUpdateResponse>;
}

/** Optional parameters. */
export declare interface VaultExtendedInfoCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type VaultExtendedInfoCreateOrUpdateResponse = VaultExtendedInfoResource;

/** Optional parameters. */
export declare interface VaultExtendedInfoGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VaultExtendedInfoGetResponse = VaultExtendedInfoResource;

/** Vault extended information. */
export declare interface VaultExtendedInfoResource extends Resource {
    /** Integrity key. */
    integrityKey?: string;
    /** Encryption key. */
    encryptionKey?: string;
    /** Encryption key thumbprint. */
    encryptionKeyThumbprint?: string;
    /** Algorithm for Vault ExtendedInfo */
    algorithm?: string;
}

/** Optional parameters. */
export declare interface VaultExtendedInfoUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type VaultExtendedInfoUpdateResponse = VaultExtendedInfoResource;

/** The response model for a list of Vaults. */
export declare interface VaultList {
    value?: Vault[];
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly nextLink?: string;
}

/**
 * Defines values for VaultPrivateEndpointState. \
 * {@link KnownVaultPrivateEndpointState} can be used interchangeably with VaultPrivateEndpointState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Enabled**
 */
export declare type VaultPrivateEndpointState = string;

/** Properties of the vault. */
export declare interface VaultProperties {
    /**
     * Provisioning State.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Details for upgrading vault. */
    upgradeDetails?: UpgradeDetails;
    /**
     * List of private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnectionVaultProperties[];
    /**
     * Private endpoint state for backup.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointStateForBackup?: VaultPrivateEndpointState;
    /**
     * Private endpoint state for site recovery.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointStateForSiteRecovery?: VaultPrivateEndpointState;
    /** Customer Managed Key details of the resource. */
    encryption?: VaultPropertiesEncryption;
    /** The details of the latest move operation performed on the Azure Resource */
    moveDetails?: VaultPropertiesMoveDetails;
    /**
     * The State of the Resource after the move operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly moveState?: ResourceMoveState;
    /**
     * Backup storage version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly backupStorageVersion?: BackupStorageVersion;
    /** property to enable or disable resource provider inbound network traffic from public clients */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Monitoring Settings of the vault */
    monitoringSettings?: MonitoringSettings;
    /** Restore Settings of the vault */
    restoreSettings?: RestoreSettings;
    /** The redundancy Settings of a Vault */
    redundancySettings?: VaultPropertiesRedundancySettings;
    /** Security Settings of the vault */
    securitySettings?: SecuritySettings;
    /**
     * Secure Score of Recovery Services Vault
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secureScore?: SecureScoreLevel;
}

/** Customer Managed Key details of the resource. */
export declare interface VaultPropertiesEncryption {
    /** The properties of the Key Vault which hosts CMK */
    keyVaultProperties?: CmkKeyVaultProperties;
    /** The details of the identity used for CMK */
    kekIdentity?: CmkKekIdentity;
    /** Enabling/Disabling the Double Encryption state */
    infrastructureEncryption?: InfrastructureEncryptionState;
}

/** The details of the latest move operation performed on the Azure Resource */
export declare interface VaultPropertiesMoveDetails {
    /**
     * OperationId of the Resource Move Operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationId?: string;
    /**
     * Start Time of the Resource Move Operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTimeUtc?: Date;
    /**
     * End Time of the Resource Move Operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly completionTimeUtc?: Date;
    /**
     * Source Resource of the Resource Move Operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceResourceId?: string;
    /**
     * Target Resource of the Resource Move Operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetResourceId?: string;
}

/** The redundancy Settings of a Vault */
export declare interface VaultPropertiesRedundancySettings {
    /**
     * The storage redundancy setting of a vault
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly standardTierStorageRedundancy?: StandardTierStorageRedundancy;
    /**
     * Flag to show if Cross Region Restore is enabled on the Vault or not
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly crossRegionRestore?: CrossRegionRestore;
}

/** Interface representing a Vaults. */
export declare interface Vaults {
    /**
     * Fetches all the resources of the specified type in the subscription.
     * @param options The options parameters.
     */
    listBySubscriptionId(options?: VaultsListBySubscriptionIdOptionalParams): PagedAsyncIterableIterator<Vault>;
    /**
     * Retrieve a list of Vaults.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: VaultsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Vault>;
    /**
     * Get the Vault details.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vaultName: string, options?: VaultsGetOptionalParams): Promise<VaultsGetResponse>;
    /**
     * Creates or updates a Recovery Services vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vaultName: string, vault: Vault, options?: VaultsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<VaultsCreateOrUpdateResponse>, VaultsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a Recovery Services vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vaultName: string, vault: Vault, options?: VaultsCreateOrUpdateOptionalParams): Promise<VaultsCreateOrUpdateResponse>;
    /**
     * Deletes a vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, vaultName: string, options?: VaultsDeleteOptionalParams): Promise<void>;
    /**
     * Updates the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vaultName: string, vault: PatchVault, options?: VaultsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<VaultsUpdateResponse>, VaultsUpdateResponse>>;
    /**
     * Updates the vault.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the recovery services vault.
     * @param vault Recovery Services Vault to be created.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vaultName: string, vault: PatchVault, options?: VaultsUpdateOptionalParams): Promise<VaultsUpdateResponse>;
}

/** Optional parameters. */
export declare interface VaultsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VaultsCreateOrUpdateResponse = Vault;

/** Optional parameters. */
export declare interface VaultsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface VaultsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VaultsGetResponse = Vault;

/** Optional parameters. */
export declare interface VaultsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type VaultsListByResourceGroupNextResponse = VaultList;

/** Optional parameters. */
export declare interface VaultsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type VaultsListByResourceGroupResponse = VaultList;

/** Optional parameters. */
export declare interface VaultsListBySubscriptionIdNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionIdNext operation. */
export declare type VaultsListBySubscriptionIdNextResponse = VaultList;

/** Optional parameters. */
export declare interface VaultsListBySubscriptionIdOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionId operation. */
export declare type VaultsListBySubscriptionIdResponse = VaultList;

/**
 * Defines values for VaultSubResourceType. \
 * {@link KnownVaultSubResourceType} can be used interchangeably with VaultSubResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureBackup** \
 * **AzureBackup_secondary** \
 * **AzureSiteRecovery**
 */
export declare type VaultSubResourceType = string;

/** Optional parameters. */
export declare interface VaultsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VaultsUpdateResponse = Vault;

/**
 * Defines values for VaultUpgradeState. \
 * {@link KnownVaultUpgradeState} can be used interchangeably with VaultUpgradeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **InProgress** \
 * **Upgraded** \
 * **Failed**
 */
export declare type VaultUpgradeState = string;

/** Usages of a vault. */
export declare interface VaultUsage {
    /** Unit of the usage. */
    unit?: UsagesUnit;
    /** Quota period of usage. */
    quotaPeriod?: string;
    /** Next reset time of usage. */
    nextResetTime?: Date;
    /** Current value of usage. */
    currentValue?: number;
    /** Limit of usage. */
    limit?: number;
    /** Name of usage. */
    name?: NameInfo;
}

/** Usage for vault. */
export declare interface VaultUsageList {
    /** The list of usages for the given vault. */
    value?: VaultUsage[];
}

export { }
