import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** The integration account agreement content. */
export declare interface AgreementContent {
    /** The AS2 agreement content. */
    aS2?: AS2AgreementContent;
    /** The X12 agreement content. */
    x12?: X12AgreementContent;
    /** The EDIFACT agreement content. */
    edifact?: EdifactAgreementContent;
}

/** Defines values for AgreementType. */
export declare type AgreementType = "NotSpecified" | "AS2" | "X12" | "Edifact";

/** The API deployment parameter metadata. */
export declare interface ApiDeploymentParameterMetadata {
    /** The type. */
    type?: string;
    /** Indicates whether its required. */
    isRequired?: boolean;
    /** The display name. */
    displayName?: string;
    /** The description. */
    description?: string;
    /** The visibility. */
    visibility?: ApiDeploymentParameterVisibility;
}

/** The API deployment parameters metadata. */
export declare interface ApiDeploymentParameterMetadataSet {
    /** The package content link parameter. */
    packageContentLink?: ApiDeploymentParameterMetadata;
    /** The package content link parameter. */
    redisCacheConnectionString?: ApiDeploymentParameterMetadata;
}

/**
 * Defines values for ApiDeploymentParameterVisibility. \
 * {@link KnownApiDeploymentParameterVisibility} can be used interchangeably with ApiDeploymentParameterVisibility,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Default** \
 * **Internal**
 */
export declare type ApiDeploymentParameterVisibility = string;

/** The api operation. */
export declare interface ApiOperation extends Resource {
    /** The api operations properties */
    properties?: ApiOperationPropertiesDefinition;
}

/** The Api Operation Annotation. */
export declare interface ApiOperationAnnotation {
    /** The status annotation. */
    status?: StatusAnnotation;
    /** The family. */
    family?: string;
    /** The revision. */
    revision?: number;
}

/** The list of managed API operations. */
export declare interface ApiOperationListResult {
    /** The api operation definitions for an API. */
    value?: ApiOperation[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** The api operations properties */
export declare interface ApiOperationPropertiesDefinition {
    /** The summary of the api operation. */
    summary?: string;
    /** The description of the api operation. */
    description?: string;
    /** The visibility of the api operation. */
    visibility?: string;
    /** The trigger type of api operation. */
    trigger?: string;
    /** The trigger hint for the api operation. */
    triggerHint?: string;
    /** Indicates whether the api operation is pageable. */
    pageable?: boolean;
    /** The annotation of api operation. */
    annotation?: ApiOperationAnnotation;
    /** The api reference. */
    api?: ApiReference;
    /** The operation inputs definition schema. */
    inputsDefinition?: SwaggerSchema;
    /** The operation responses definition schemas. */
    responsesDefinition?: {
        [propertyName: string]: SwaggerSchema;
    };
    /** Indicates whether the API operation is webhook or not. */
    isWebhook?: boolean;
    /** Indicates whether the API operation is notification or not. */
    isNotification?: boolean;
}

/** The Api reference. */
export declare interface ApiReference extends ResourceReference {
    /** The display name of the api. */
    displayName?: string;
    /** The description of the api. */
    description?: string;
    /** The icon uri of the api. */
    iconUri?: string;
    /** The swagger of the api. */
    swagger?: any;
    /** The brand color of the api. */
    brandColor?: string;
    /** The tier. */
    category?: ApiTier;
    /** The integration service environment reference. */
    integrationServiceEnvironment?: ResourceReference;
}

/** The API backend service. */
export declare interface ApiResourceBackendService {
    /** The service URL. */
    serviceUrl?: string;
}

/** The Api resource definition. */
export declare interface ApiResourceDefinitions {
    /** The original swagger url. */
    originalSwaggerUrl?: string;
    /** The modified swagger url. */
    modifiedSwaggerUrl?: string;
}

/** The API general information. */
export declare interface ApiResourceGeneralInformation {
    /** The icon url. */
    iconUrl?: string;
    /** The display name. */
    displayName?: string;
    /** The description. */
    description?: string;
    /** The terms of use url. */
    termsOfUseUrl?: string;
    /** The release tag. */
    releaseTag?: string;
    /** The tier. */
    tier?: ApiTier;
}

/** The api resource metadata. */
export declare interface ApiResourceMetadata {
    /** The source. */
    source?: string;
    /** The brand color. */
    brandColor?: string;
    /** The hide key. */
    hideKey?: string;
    /** The tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The api type. */
    apiType?: ApiType;
    /** The WSDL service. */
    wsdlService?: WsdlService;
    /** The WSDL import method. */
    wsdlImportMethod?: WsdlImportMethod;
    /** The connection type. */
    connectionType?: string;
    /** The provisioning state. */
    provisioningState?: WorkflowProvisioningState;
    /** The connector deployment parameters metadata. */
    deploymentParameters?: ApiDeploymentParameterMetadataSet;
}

/** The API resource policies. */
export declare interface ApiResourcePolicies {
    /** The API level only policies XML as embedded content. */
    content?: string;
    /** The content link to the policies. */
    contentLink?: string;
}

/** The API resource properties. */
export declare interface ApiResourceProperties {
    /**
     * The name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The connection parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectionParameters?: {
        [propertyName: string]: any;
    };
    /**
     * The metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadata?: ApiResourceMetadata;
    /**
     * The runtime urls.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runtimeUrls?: string[];
    /**
     * The api general information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly generalInformation?: ApiResourceGeneralInformation;
    /**
     * The capabilities.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: string[];
    /**
     * The backend service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly backendService?: ApiResourceBackendService;
    /**
     * The policies for the API.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policies?: ApiResourcePolicies;
    /**
     * The API definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiDefinitionUrl?: string;
    /**
     * The api definitions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiDefinitions?: ApiResourceDefinitions;
    /** The integration service environment reference. */
    integrationServiceEnvironment?: ResourceReference;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkflowProvisioningState;
    /**
     * The category.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: ApiTier;
}

/**
 * Defines values for ApiTier. \
 * {@link KnownApiTier} can be used interchangeably with ApiTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Enterprise** \
 * **Standard** \
 * **Premium**
 */
export declare type ApiTier = string;

/**
 * Defines values for ApiType. \
 * {@link KnownApiType} can be used interchangeably with ApiType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Rest** \
 * **Soap**
 */
export declare type ApiType = string;

/** The artifact content properties definition. */
export declare interface ArtifactContentPropertiesDefinition extends ArtifactProperties {
    /** Anything */
    content?: any;
    /** The content type. */
    contentType?: string;
    /** The content link. */
    contentLink?: ContentLink;
}

/** The artifact properties definition. */
export declare interface ArtifactProperties {
    /** The artifact creation time. */
    createdTime?: Date;
    /** The artifact changed time. */
    changedTime?: Date;
    /** Anything */
    metadata?: any;
}

/** The AS2 agreement acknowledgement connection settings. */
export declare interface AS2AcknowledgementConnectionSettings {
    /** Indicates whether to ignore mismatch in certificate name. */
    ignoreCertificateNameMismatch: boolean;
    /** Indicates whether to support HTTP status code 'CONTINUE'. */
    supportHttpStatusCodeContinue: boolean;
    /** Indicates whether to keep the connection alive. */
    keepHttpConnectionAlive: boolean;
    /** Indicates whether to unfold the HTTP headers. */
    unfoldHttpHeaders: boolean;
}

/** The integration account AS2 agreement content. */
export declare interface AS2AgreementContent {
    /** The AS2 one-way receive agreement. */
    receiveAgreement: AS2OneWayAgreement;
    /** The AS2 one-way send agreement. */
    sendAgreement: AS2OneWayAgreement;
}

/** The AS2 agreement envelope settings. */
export declare interface AS2EnvelopeSettings {
    /** The message content type. */
    messageContentType: string;
    /** The value indicating whether to transmit file name in mime header. */
    transmitFileNameInMimeHeader: boolean;
    /** The template for file name. */
    fileNameTemplate: string;
    /** The value indicating whether to suspend message on file name generation error. */
    suspendMessageOnFileNameGenerationError: boolean;
    /** The value indicating whether to auto generate file name. */
    autogenerateFileName: boolean;
}

/** The AS2 agreement error settings. */
export declare interface AS2ErrorSettings {
    /** The value indicating whether to suspend duplicate message. */
    suspendDuplicateMessage: boolean;
    /** The value indicating whether to resend message If MDN is not received. */
    resendIfMDNNotReceived: boolean;
}

/** The AS2 agreement mdn settings. */
export declare interface AS2MdnSettings {
    /** The value indicating whether to send or request a MDN. */
    needMDN: boolean;
    /** The value indicating whether the MDN needs to be signed or not. */
    signMDN: boolean;
    /** The value indicating whether to send the asynchronous MDN. */
    sendMDNAsynchronously: boolean;
    /** The receipt delivery URL. */
    receiptDeliveryUrl?: string;
    /** The disposition notification to header value. */
    dispositionNotificationTo?: string;
    /** The value indicating whether to sign the outbound MDN if optional. */
    signOutboundMDNIfOptional: boolean;
    /** The MDN text. */
    mdnText?: string;
    /** The value indicating whether to send inbound MDN to message box. */
    sendInboundMDNToMessageBox: boolean;
    /** The signing or hashing algorithm. */
    micHashingAlgorithm: HashingAlgorithm;
}

/** The AS2 agreement message connection settings. */
export declare interface AS2MessageConnectionSettings {
    /** The value indicating whether to ignore mismatch in certificate name. */
    ignoreCertificateNameMismatch: boolean;
    /** The value indicating whether to support HTTP status code 'CONTINUE'. */
    supportHttpStatusCodeContinue: boolean;
    /** The value indicating whether to keep the connection alive. */
    keepHttpConnectionAlive: boolean;
    /** The value indicating whether to unfold the HTTP headers. */
    unfoldHttpHeaders: boolean;
}

/** The integration account AS2 one-way agreement. */
export declare interface AS2OneWayAgreement {
    /** The sender business identity */
    senderBusinessIdentity: BusinessIdentity;
    /** The receiver business identity */
    receiverBusinessIdentity: BusinessIdentity;
    /** The AS2 protocol settings. */
    protocolSettings: AS2ProtocolSettings;
}

/** The AS2 agreement protocol settings. */
export declare interface AS2ProtocolSettings {
    /** The message connection settings. */
    messageConnectionSettings: AS2MessageConnectionSettings;
    /** The acknowledgement connection settings. */
    acknowledgementConnectionSettings: AS2AcknowledgementConnectionSettings;
    /** The MDN settings. */
    mdnSettings: AS2MdnSettings;
    /** The security settings. */
    securitySettings: AS2SecuritySettings;
    /** The validation settings. */
    validationSettings: AS2ValidationSettings;
    /** The envelope settings. */
    envelopeSettings: AS2EnvelopeSettings;
    /** The error settings. */
    errorSettings: AS2ErrorSettings;
}

/** The AS2 agreement security settings. */
export declare interface AS2SecuritySettings {
    /** The value indicating whether to send or request a MDN. */
    overrideGroupSigningCertificate: boolean;
    /** The name of the signing certificate. */
    signingCertificateName?: string;
    /** The name of the encryption certificate. */
    encryptionCertificateName?: string;
    /** The value indicating whether to enable NRR for inbound encoded messages. */
    enableNRRForInboundEncodedMessages: boolean;
    /** The value indicating whether to enable NRR for inbound decoded messages. */
    enableNRRForInboundDecodedMessages: boolean;
    /** The value indicating whether to enable NRR for outbound MDN. */
    enableNRRForOutboundMDN: boolean;
    /** The value indicating whether to enable NRR for outbound encoded messages. */
    enableNRRForOutboundEncodedMessages: boolean;
    /** The value indicating whether to enable NRR for outbound decoded messages. */
    enableNRRForOutboundDecodedMessages: boolean;
    /** The value indicating whether to enable NRR for inbound MDN. */
    enableNRRForInboundMDN: boolean;
    /** The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize. */
    sha2AlgorithmFormat?: string;
}

/** The AS2 agreement validation settings. */
export declare interface AS2ValidationSettings {
    /** The value indicating whether to override incoming message properties with those in agreement. */
    overrideMessageProperties: boolean;
    /** The value indicating whether the message has to be encrypted. */
    encryptMessage: boolean;
    /** The value indicating whether the message has to be signed. */
    signMessage: boolean;
    /** The value indicating whether the message has to be compressed. */
    compressMessage: boolean;
    /** The value indicating whether to check for duplicate message. */
    checkDuplicateMessage: boolean;
    /** The number of days to look back for duplicate interchange. */
    interchangeDuplicatesValidityDays: number;
    /** The value indicating whether to check for certificate revocation list on send. */
    checkCertificateRevocationListOnSend: boolean;
    /** The value indicating whether to check for certificate revocation list on receive. */
    checkCertificateRevocationListOnReceive: boolean;
    /** The encryption algorithm. */
    encryptionAlgorithm: EncryptionAlgorithm;
    /** The signing algorithm. */
    signingAlgorithm?: SigningAlgorithm;
}

/** A collection of assembly definitions. */
export declare interface AssemblyCollection {
    value?: AssemblyDefinition[];
}

/** The assembly definition. */
export declare interface AssemblyDefinition extends Resource {
    /** The assembly properties. */
    properties: AssemblyProperties;
}

/** The assembly properties definition. */
export declare interface AssemblyProperties extends ArtifactContentPropertiesDefinition {
    /** The assembly name. */
    assemblyName: string;
    /** The assembly version. */
    assemblyVersion?: string;
    /** The assembly culture. */
    assemblyCulture?: string;
    /** The assembly public key token. */
    assemblyPublicKeyToken?: string;
}

/**
 * Defines values for AzureAsyncOperationState. \
 * {@link KnownAzureAsyncOperationState} can be used interchangeably with AzureAsyncOperationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Failed** \
 * **Succeeded** \
 * **Pending** \
 * **Canceled**
 */
export declare type AzureAsyncOperationState = string;

/** The azure resource error info. */
export declare interface AzureResourceErrorInfo extends ErrorInfo {
    /** The error message. */
    message: string;
    /** The error details. */
    details?: AzureResourceErrorInfo[];
}

/** The B2B partner content. */
export declare interface B2BPartnerContent {
    /** The list of partner business identities. */
    businessIdentities?: BusinessIdentity[];
}

/** The batch configuration resource definition. */
export declare interface BatchConfiguration extends Resource {
    /** The batch configuration properties. */
    properties: BatchConfigurationProperties;
}

/** A collection of batch configurations. */
export declare interface BatchConfigurationCollection {
    value?: BatchConfiguration[];
}

/** The batch configuration properties definition. */
export declare interface BatchConfigurationProperties extends ArtifactProperties {
    /** The name of the batch group. */
    batchGroupName: string;
    /** The batch release criteria. */
    releaseCriteria: BatchReleaseCriteria;
}

/** The batch release criteria. */
export declare interface BatchReleaseCriteria {
    /** The message count. */
    messageCount?: number;
    /** The batch size in bytes. */
    batchSize?: number;
    /** The recurrence. */
    recurrence?: WorkflowTriggerRecurrence;
}

/** The integration account partner's business identity. */
export declare interface BusinessIdentity {
    /** The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32 */
    qualifier: string;
    /** The user defined business identity value. */
    value: string;
}

/** The callback url. */
export declare interface CallbackUrl {
    /** The URL value. */
    value?: string;
}

/** The content hash. */
export declare interface ContentHash {
    /** The algorithm of the content hash. */
    algorithm?: string;
    /** The value of the content hash. */
    value?: string;
}

/** The content link. */
export declare interface ContentLink {
    /** The content link URI. */
    uri?: string;
    /**
     * The content version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly contentVersion?: string;
    /**
     * The content size.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly contentSize?: number;
    /**
     * The content hash.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly contentHash?: ContentHash;
    /**
     * The metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadata?: any;
}

/** The correlation property. */
export declare interface Correlation {
    /** The client tracking id. */
    clientTrackingId?: string;
}

/** Defines values for DayOfWeek. */
export declare type DayOfWeek = "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday";

/** Defines values for DaysOfWeek. */
export declare type DaysOfWeek = "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday";

/** The Edifact agreement acknowledgement settings. */
export declare interface EdifactAcknowledgementSettings {
    /** The value indicating whether technical acknowledgement is needed. */
    needTechnicalAcknowledgement: boolean;
    /** The value indicating whether to batch the technical acknowledgements. */
    batchTechnicalAcknowledgements: boolean;
    /** The value indicating whether functional acknowledgement is needed. */
    needFunctionalAcknowledgement: boolean;
    /** The value indicating whether to batch functional acknowledgements. */
    batchFunctionalAcknowledgements: boolean;
    /** The value indicating whether a loop is needed for valid messages. */
    needLoopForValidMessages: boolean;
    /** The value indicating whether to send synchronous acknowledgement. */
    sendSynchronousAcknowledgement: boolean;
    /** The acknowledgement control number prefix. */
    acknowledgementControlNumberPrefix?: string;
    /** The acknowledgement control number suffix. */
    acknowledgementControlNumberSuffix?: string;
    /** The acknowledgement control number lower bound. */
    acknowledgementControlNumberLowerBound: number;
    /** The acknowledgement control number upper bound. */
    acknowledgementControlNumberUpperBound: number;
    /** The value indicating whether to rollover acknowledgement control number. */
    rolloverAcknowledgementControlNumber: boolean;
}

/** The Edifact agreement content. */
export declare interface EdifactAgreementContent {
    /** The EDIFACT one-way receive agreement. */
    receiveAgreement: EdifactOneWayAgreement;
    /** The EDIFACT one-way send agreement. */
    sendAgreement: EdifactOneWayAgreement;
}

/**
 * Defines values for EdifactCharacterSet. \
 * {@link KnownEdifactCharacterSet} can be used interchangeably with EdifactCharacterSet,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **UNOB** \
 * **UNOA** \
 * **UNOC** \
 * **UNOD** \
 * **UNOE** \
 * **UNOF** \
 * **UNOG** \
 * **UNOH** \
 * **UNOI** \
 * **UNOJ** \
 * **UNOK** \
 * **UNOX** \
 * **UNOY** \
 * **KECA**
 */
export declare type EdifactCharacterSet = string;

/** Defines values for EdifactDecimalIndicator. */
export declare type EdifactDecimalIndicator = "NotSpecified" | "Comma" | "Decimal";

/** The Edifact delimiter override settings. */
export declare interface EdifactDelimiterOverride {
    /** The message id. */
    messageId?: string;
    /** The message version. */
    messageVersion?: string;
    /** The message release. */
    messageRelease?: string;
    /** The data element separator. */
    dataElementSeparator: number;
    /** The component separator. */
    componentSeparator: number;
    /** The segment terminator. */
    segmentTerminator: number;
    /** The repetition separator. */
    repetitionSeparator: number;
    /** The segment terminator suffix. */
    segmentTerminatorSuffix: SegmentTerminatorSuffix;
    /** The decimal point indicator. */
    decimalPointIndicator: EdifactDecimalIndicator;
    /** The release indicator. */
    releaseIndicator: number;
    /** The message association assigned code. */
    messageAssociationAssignedCode?: string;
    /** The target namespace on which this delimiter settings has to be applied. */
    targetNamespace?: string;
}

/** The Edifact envelope override settings. */
export declare interface EdifactEnvelopeOverride {
    /** The message id on which this envelope settings has to be applied. */
    messageId?: string;
    /** The message version on which this envelope settings has to be applied. */
    messageVersion?: string;
    /** The message release version on which this envelope settings has to be applied. */
    messageRelease?: string;
    /** The message association assigned code. */
    messageAssociationAssignedCode?: string;
    /** The target namespace on which this envelope settings has to be applied. */
    targetNamespace?: string;
    /** The functional group id. */
    functionalGroupId?: string;
    /** The sender application qualifier. */
    senderApplicationQualifier?: string;
    /** The sender application id. */
    senderApplicationId?: string;
    /** The receiver application qualifier. */
    receiverApplicationQualifier?: string;
    /** The receiver application id. */
    receiverApplicationId?: string;
    /** The controlling agency code. */
    controllingAgencyCode?: string;
    /** The group header message version. */
    groupHeaderMessageVersion?: string;
    /** The group header message release. */
    groupHeaderMessageRelease?: string;
    /** The association assigned code. */
    associationAssignedCode?: string;
    /** The application password. */
    applicationPassword?: string;
}

/** The Edifact agreement envelope settings. */
export declare interface EdifactEnvelopeSettings {
    /** The group association assigned code. */
    groupAssociationAssignedCode?: string;
    /** The communication agreement id. */
    communicationAgreementId?: string;
    /** The value indicating whether to apply delimiter string advice. */
    applyDelimiterStringAdvice: boolean;
    /** The value indicating whether to create grouping segments. */
    createGroupingSegments: boolean;
    /** The value indicating whether to enable default group headers. */
    enableDefaultGroupHeaders: boolean;
    /** The recipient reference password value. */
    recipientReferencePasswordValue?: string;
    /** The recipient reference password qualifier. */
    recipientReferencePasswordQualifier?: string;
    /** The application reference id. */
    applicationReferenceId?: string;
    /** The processing priority code. */
    processingPriorityCode?: string;
    /** The interchange control number lower bound. */
    interchangeControlNumberLowerBound: number;
    /** The interchange control number upper bound. */
    interchangeControlNumberUpperBound: number;
    /** The value indicating whether to rollover interchange control number. */
    rolloverInterchangeControlNumber: boolean;
    /** The interchange control number prefix. */
    interchangeControlNumberPrefix?: string;
    /** The interchange control number suffix. */
    interchangeControlNumberSuffix?: string;
    /** The sender reverse routing address. */
    senderReverseRoutingAddress?: string;
    /** The receiver reverse routing address. */
    receiverReverseRoutingAddress?: string;
    /** The functional group id. */
    functionalGroupId?: string;
    /** The group controlling agency code. */
    groupControllingAgencyCode?: string;
    /** The group message version. */
    groupMessageVersion?: string;
    /** The group message release. */
    groupMessageRelease?: string;
    /** The group control number lower bound. */
    groupControlNumberLowerBound: number;
    /** The group control number upper bound. */
    groupControlNumberUpperBound: number;
    /** The value indicating whether to rollover group control number. */
    rolloverGroupControlNumber: boolean;
    /** The group control number prefix. */
    groupControlNumberPrefix?: string;
    /** The group control number suffix. */
    groupControlNumberSuffix?: string;
    /** The group application receiver qualifier. */
    groupApplicationReceiverQualifier?: string;
    /** The group application receiver id. */
    groupApplicationReceiverId?: string;
    /** The group application sender qualifier. */
    groupApplicationSenderQualifier?: string;
    /** The group application sender id. */
    groupApplicationSenderId?: string;
    /** The group application password. */
    groupApplicationPassword?: string;
    /** The value indicating whether to overwrite existing transaction set control number. */
    overwriteExistingTransactionSetControlNumber: boolean;
    /** The transaction set control number prefix. */
    transactionSetControlNumberPrefix?: string;
    /** The transaction set control number suffix. */
    transactionSetControlNumberSuffix?: string;
    /** The transaction set control number lower bound. */
    transactionSetControlNumberLowerBound: number;
    /** The transaction set control number upper bound. */
    transactionSetControlNumberUpperBound: number;
    /** The value indicating whether to rollover transaction set control number. */
    rolloverTransactionSetControlNumber: boolean;
    /** The value indicating whether the message is a test interchange. */
    isTestInterchange: boolean;
    /** The sender internal identification. */
    senderInternalIdentification?: string;
    /** The sender internal sub identification. */
    senderInternalSubIdentification?: string;
    /** The receiver internal identification. */
    receiverInternalIdentification?: string;
    /** The receiver internal sub identification. */
    receiverInternalSubIdentification?: string;
}

/** The Edifact agreement framing settings. */
export declare interface EdifactFramingSettings {
    /** The service code list directory version. */
    serviceCodeListDirectoryVersion?: string;
    /** The character encoding. */
    characterEncoding?: string;
    /** The protocol version. */
    protocolVersion: number;
    /** The data element separator. */
    dataElementSeparator: number;
    /** The component separator. */
    componentSeparator: number;
    /** The segment terminator. */
    segmentTerminator: number;
    /** The release indicator. */
    releaseIndicator: number;
    /** The repetition separator. */
    repetitionSeparator: number;
    /** The EDIFACT frame setting characterSet. */
    characterSet: EdifactCharacterSet;
    /** The EDIFACT frame setting decimal indicator. */
    decimalPointIndicator: EdifactDecimalIndicator;
    /** The EDIFACT frame setting segment terminator suffix. */
    segmentTerminatorSuffix: SegmentTerminatorSuffix;
}

/** The Edifact message filter for odata query. */
export declare interface EdifactMessageFilter {
    /** The message filter type. */
    messageFilterType: MessageFilterType;
}

/** The Edifact message identifier. */
export declare interface EdifactMessageIdentifier {
    /** The message id on which this envelope settings has to be applied. */
    messageId: string;
}

/** The Edifact one way agreement. */
export declare interface EdifactOneWayAgreement {
    /** The sender business identity */
    senderBusinessIdentity: BusinessIdentity;
    /** The receiver business identity */
    receiverBusinessIdentity: BusinessIdentity;
    /** The EDIFACT protocol settings. */
    protocolSettings: EdifactProtocolSettings;
}

/** The Edifact agreement protocol settings. */
export declare interface EdifactProcessingSettings {
    /** The value indicating whether to mask security information. */
    maskSecurityInfo: boolean;
    /** The value indicating whether to preserve interchange. */
    preserveInterchange: boolean;
    /** The value indicating whether to suspend interchange on error. */
    suspendInterchangeOnError: boolean;
    /** The value indicating whether to create empty xml tags for trailing separators. */
    createEmptyXmlTagsForTrailingSeparators: boolean;
    /** The value indicating whether to use dot as decimal separator. */
    useDotAsDecimalSeparator: boolean;
}

/** The Edifact agreement protocol settings. */
export declare interface EdifactProtocolSettings {
    /** The EDIFACT validation settings. */
    validationSettings: EdifactValidationSettings;
    /** The EDIFACT framing settings. */
    framingSettings: EdifactFramingSettings;
    /** The EDIFACT envelope settings. */
    envelopeSettings: EdifactEnvelopeSettings;
    /** The EDIFACT acknowledgement settings. */
    acknowledgementSettings: EdifactAcknowledgementSettings;
    /** The EDIFACT message filter. */
    messageFilter: EdifactMessageFilter;
    /** The EDIFACT processing Settings. */
    processingSettings: EdifactProcessingSettings;
    /** The EDIFACT envelope override settings. */
    envelopeOverrides?: EdifactEnvelopeOverride[];
    /** The EDIFACT message filter list. */
    messageFilterList?: EdifactMessageIdentifier[];
    /** The EDIFACT schema references. */
    schemaReferences: EdifactSchemaReference[];
    /** The EDIFACT validation override settings. */
    validationOverrides?: EdifactValidationOverride[];
    /** The EDIFACT delimiter override settings. */
    edifactDelimiterOverrides?: EdifactDelimiterOverride[];
}

/** The Edifact schema reference. */
export declare interface EdifactSchemaReference {
    /** The message id. */
    messageId: string;
    /** The message version. */
    messageVersion: string;
    /** The message release version. */
    messageRelease: string;
    /** The sender application id. */
    senderApplicationId?: string;
    /** The sender application qualifier. */
    senderApplicationQualifier?: string;
    /** The association assigned code. */
    associationAssignedCode?: string;
    /** The schema name. */
    schemaName: string;
}

/** The Edifact validation override settings. */
export declare interface EdifactValidationOverride {
    /** The message id on which the validation settings has to be applied. */
    messageId: string;
    /** The value indicating whether to validate character Set. */
    enforceCharacterSet: boolean;
    /** The value indicating whether to validate EDI types. */
    validateEDITypes: boolean;
    /** The value indicating whether to validate XSD types. */
    validateXSDTypes: boolean;
    /** The value indicating whether to allow leading and trailing spaces and zeroes. */
    allowLeadingAndTrailingSpacesAndZeroes: boolean;
    /** The trailing separator policy. */
    trailingSeparatorPolicy: TrailingSeparatorPolicy;
    /** The value indicating whether to trim leading and trailing spaces and zeroes. */
    trimLeadingAndTrailingSpacesAndZeroes: boolean;
}

/** The Edifact agreement validation settings. */
export declare interface EdifactValidationSettings {
    /** The value indicating whether to validate character set in the message. */
    validateCharacterSet: boolean;
    /** The value indicating whether to check for duplicate interchange control number. */
    checkDuplicateInterchangeControlNumber: boolean;
    /** The validity period of interchange control number. */
    interchangeControlNumberValidityDays: number;
    /** The value indicating whether to check for duplicate group control number. */
    checkDuplicateGroupControlNumber: boolean;
    /** The value indicating whether to check for duplicate transaction set control number. */
    checkDuplicateTransactionSetControlNumber: boolean;
    /** The value indicating whether to Whether to validate EDI types. */
    validateEDITypes: boolean;
    /** The value indicating whether to Whether to validate XSD types. */
    validateXSDTypes: boolean;
    /** The value indicating whether to allow leading and trailing spaces and zeroes. */
    allowLeadingAndTrailingSpacesAndZeroes: boolean;
    /** The value indicating whether to trim leading and trailing spaces and zeroes. */
    trimLeadingAndTrailingSpacesAndZeroes: boolean;
    /** The trailing separator policy. */
    trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/**
 * Defines values for EncryptionAlgorithm. \
 * {@link KnownEncryptionAlgorithm} can be used interchangeably with EncryptionAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **None** \
 * **DES3** \
 * **RC2** \
 * **AES128** \
 * **AES192** \
 * **AES256**
 */
export declare type EncryptionAlgorithm = string;

/** The error info. */
export declare interface ErrorInfo {
    /** The error code. */
    code: string;
}

/** Error properties indicate why the Logic service was not able to process the incoming request. The reason is provided in the error message. */
export declare interface ErrorProperties {
    /** Error code. */
    code?: string;
    /** Error message indicating why the operation failed. */
    message?: string;
}

/** Error response indicates Logic service is not able to process the incoming request. The error property contains the error details. */
export declare interface ErrorResponse {
    /** The error properties. */
    error?: ErrorProperties;
}

/**
 * Defines values for ErrorResponseCode. \
 * {@link KnownErrorResponseCode} can be used interchangeably with ErrorResponseCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **IntegrationServiceEnvironmentNotFound** \
 * **InternalServerError** \
 * **InvalidOperationId**
 */
export declare type ErrorResponseCode = string;

/** Defines values for EventLevel. */
export declare type EventLevel = "LogAlways" | "Critical" | "Error" | "Warning" | "Informational" | "Verbose";

/** The expression. */
export declare interface Expression {
    /** The text. */
    text?: string;
    /** Anything */
    value?: any;
    /** The sub expressions. */
    subexpressions?: Expression[];
    /** The azure resource error info. */
    error?: AzureResourceErrorInfo;
}

/** The expression root. */
export declare interface ExpressionRoot extends Expression {
    /** The path. */
    path?: string;
}

/** The expression traces. */
export declare interface ExpressionTraces {
    inputs?: ExpressionRoot[];
}

/** The extended error info. */
export declare interface ExtendedErrorInfo {
    /** The error code. */
    code: ErrorResponseCode;
    /** The error message. */
    message: string;
    /** The error message details. */
    details?: ExtendedErrorInfo[];
    /** The inner error. */
    innerError?: any;
}

/** The access control configuration. */
export declare interface FlowAccessControlConfiguration {
    /** The access control configuration for invoking workflow triggers. */
    triggers?: FlowAccessControlConfigurationPolicy;
    /** The access control configuration for accessing workflow run contents. */
    contents?: FlowAccessControlConfigurationPolicy;
    /** The access control configuration for workflow actions. */
    actions?: FlowAccessControlConfigurationPolicy;
    /** The access control configuration for workflow management. */
    workflowManagement?: FlowAccessControlConfigurationPolicy;
}

/** The access control configuration policy. */
export declare interface FlowAccessControlConfigurationPolicy {
    /** The allowed caller IP address ranges. */
    allowedCallerIpAddresses?: IpAddressRange[];
    /** The authentication policies for workflow. */
    openAuthenticationPolicies?: OpenAuthenticationAccessPolicies;
}

/** The flow endpoints configuration. */
export declare interface FlowEndpoints {
    /** The outgoing ip address. */
    outgoingIpAddresses?: IpAddress[];
    /** The access endpoint ip address. */
    accessEndpointIpAddresses?: IpAddress[];
}

/** The endpoints configuration. */
export declare interface FlowEndpointsConfiguration {
    /** The workflow endpoints. */
    workflow?: FlowEndpoints;
    /** The connector endpoints. */
    connector?: FlowEndpoints;
}

/** The parameters to generate upgraded definition. */
export declare interface GenerateUpgradedDefinitionParameters {
    /** The target schema version. */
    targetSchemaVersion?: string;
}

/** The callback url parameters. */
export declare interface GetCallbackUrlParameters {
    /** The expiry time. */
    notAfter?: Date;
    /** The key type. */
    keyType?: KeyType_2;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for HashingAlgorithm. \
 * {@link KnownHashingAlgorithm} can be used interchangeably with HashingAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **None** \
 * **MD5** \
 * **SHA1** \
 * **SHA2256** \
 * **SHA2384** \
 * **SHA2512**
 */
export declare type HashingAlgorithm = string;

/** The integration account. */
export declare interface IntegrationAccount extends Resource {
    /** The sku. */
    sku?: IntegrationAccountSku;
    /** The integration service environment. */
    integrationServiceEnvironment?: ResourceReference;
    /** The workflow state. */
    state?: WorkflowState;
}

/** The integration account agreement. */
export declare interface IntegrationAccountAgreement extends Resource {
    /**
     * The created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * The changed time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changedTime?: Date;
    /** The metadata. */
    metadata?: any;
    /** The agreement type. */
    agreementType: AgreementType;
    /** The integration account partner that is set as host partner for this agreement. */
    hostPartner: string;
    /** The integration account partner that is set as guest partner for this agreement. */
    guestPartner: string;
    /** The business identity of the host partner. */
    hostIdentity: BusinessIdentity;
    /** The business identity of the guest partner. */
    guestIdentity: BusinessIdentity;
    /** The agreement content. */
    content: AgreementContent;
}

/** The integration account agreement filter for odata query. */
export declare interface IntegrationAccountAgreementFilter {
    /** The agreement type of integration account agreement. */
    agreementType: AgreementType;
}

/** The list of integration account agreements. */
export declare interface IntegrationAccountAgreementListResult {
    /** The list of integration account agreements. */
    value?: IntegrationAccountAgreement[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Interface representing a IntegrationAccountAgreements. */
export declare interface IntegrationAccountAgreements {
    /**
     * Gets a list of integration account agreements.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, integrationAccountName: string, options?: IntegrationAccountAgreementsListOptionalParams): PagedAsyncIterableIterator<IntegrationAccountAgreement>;
    /**
     * Gets an integration account agreement.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param agreementName The integration account agreement name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, integrationAccountName: string, agreementName: string, options?: IntegrationAccountAgreementsGetOptionalParams): Promise<IntegrationAccountAgreementsGetResponse>;
    /**
     * Creates or updates an integration account agreement.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param agreementName The integration account agreement name.
     * @param agreement The integration account agreement.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, agreementName: string, agreement: IntegrationAccountAgreement, options?: IntegrationAccountAgreementsCreateOrUpdateOptionalParams): Promise<IntegrationAccountAgreementsCreateOrUpdateResponse>;
    /**
     * Deletes an integration account agreement.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param agreementName The integration account agreement name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, integrationAccountName: string, agreementName: string, options?: IntegrationAccountAgreementsDeleteOptionalParams): Promise<void>;
    /**
     * Get the content callback url.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param agreementName The integration account agreement name.
     * @param listContentCallbackUrl The callback url parameters.
     * @param options The options parameters.
     */
    listContentCallbackUrl(resourceGroupName: string, integrationAccountName: string, agreementName: string, listContentCallbackUrl: GetCallbackUrlParameters, options?: IntegrationAccountAgreementsListContentCallbackUrlOptionalParams): Promise<IntegrationAccountAgreementsListContentCallbackUrlResponse>;
}

/** Optional parameters. */
export declare interface IntegrationAccountAgreementsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationAccountAgreementsCreateOrUpdateResponse = IntegrationAccountAgreement;

/** Optional parameters. */
export declare interface IntegrationAccountAgreementsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationAccountAgreementsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationAccountAgreementsGetResponse = IntegrationAccountAgreement;

/** Optional parameters. */
export declare interface IntegrationAccountAgreementsListContentCallbackUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listContentCallbackUrl operation. */
export declare type IntegrationAccountAgreementsListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export declare interface IntegrationAccountAgreementsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IntegrationAccountAgreementsListNextResponse = IntegrationAccountAgreementListResult;

/** Optional parameters. */
export declare interface IntegrationAccountAgreementsListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. Options for filters include: AgreementType. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type IntegrationAccountAgreementsListResponse = IntegrationAccountAgreementListResult;

/** Interface representing a IntegrationAccountAssemblies. */
export declare interface IntegrationAccountAssemblies {
    /**
     * List the assemblies for an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, integrationAccountName: string, options?: IntegrationAccountAssembliesListOptionalParams): PagedAsyncIterableIterator<AssemblyDefinition>;
    /**
     * Get an assembly for an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, integrationAccountName: string, assemblyArtifactName: string, options?: IntegrationAccountAssembliesGetOptionalParams): Promise<IntegrationAccountAssembliesGetResponse>;
    /**
     * Create or update an assembly for an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param assemblyArtifact The assembly artifact.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, assemblyArtifactName: string, assemblyArtifact: AssemblyDefinition, options?: IntegrationAccountAssembliesCreateOrUpdateOptionalParams): Promise<IntegrationAccountAssembliesCreateOrUpdateResponse>;
    /**
     * Delete an assembly for an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, integrationAccountName: string, assemblyArtifactName: string, options?: IntegrationAccountAssembliesDeleteOptionalParams): Promise<void>;
    /**
     * Get the content callback url for an integration account assembly.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param assemblyArtifactName The assembly artifact name.
     * @param options The options parameters.
     */
    listContentCallbackUrl(resourceGroupName: string, integrationAccountName: string, assemblyArtifactName: string, options?: IntegrationAccountAssembliesListContentCallbackUrlOptionalParams): Promise<IntegrationAccountAssembliesListContentCallbackUrlResponse>;
}

/** Optional parameters. */
export declare interface IntegrationAccountAssembliesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationAccountAssembliesCreateOrUpdateResponse = AssemblyDefinition;

/** Optional parameters. */
export declare interface IntegrationAccountAssembliesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationAccountAssembliesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationAccountAssembliesGetResponse = AssemblyDefinition;

/** Optional parameters. */
export declare interface IntegrationAccountAssembliesListContentCallbackUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listContentCallbackUrl operation. */
export declare type IntegrationAccountAssembliesListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export declare interface IntegrationAccountAssembliesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type IntegrationAccountAssembliesListResponse = AssemblyCollection;

/** Interface representing a IntegrationAccountBatchConfigurations. */
export declare interface IntegrationAccountBatchConfigurations {
    /**
     * List the batch configurations for an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, integrationAccountName: string, options?: IntegrationAccountBatchConfigurationsListOptionalParams): PagedAsyncIterableIterator<BatchConfiguration>;
    /**
     * Get a batch configuration for an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param batchConfigurationName The batch configuration name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, integrationAccountName: string, batchConfigurationName: string, options?: IntegrationAccountBatchConfigurationsGetOptionalParams): Promise<IntegrationAccountBatchConfigurationsGetResponse>;
    /**
     * Create or update a batch configuration for an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param batchConfigurationName The batch configuration name.
     * @param batchConfiguration The batch configuration.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, batchConfigurationName: string, batchConfiguration: BatchConfiguration, options?: IntegrationAccountBatchConfigurationsCreateOrUpdateOptionalParams): Promise<IntegrationAccountBatchConfigurationsCreateOrUpdateResponse>;
    /**
     * Delete a batch configuration for an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param batchConfigurationName The batch configuration name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, integrationAccountName: string, batchConfigurationName: string, options?: IntegrationAccountBatchConfigurationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IntegrationAccountBatchConfigurationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationAccountBatchConfigurationsCreateOrUpdateResponse = BatchConfiguration;

/** Optional parameters. */
export declare interface IntegrationAccountBatchConfigurationsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationAccountBatchConfigurationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationAccountBatchConfigurationsGetResponse = BatchConfiguration;

/** Optional parameters. */
export declare interface IntegrationAccountBatchConfigurationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type IntegrationAccountBatchConfigurationsListResponse = BatchConfigurationCollection;

/** The integration account certificate. */
export declare interface IntegrationAccountCertificate extends Resource {
    /**
     * The created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * The changed time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changedTime?: Date;
    /** The metadata. */
    metadata?: any;
    /** The key details in the key vault. */
    key?: KeyVaultKeyReference;
    /** The public certificate. */
    publicCertificate?: string;
}

/** The list of integration account certificates. */
export declare interface IntegrationAccountCertificateListResult {
    /** The list of integration account certificates. */
    value?: IntegrationAccountCertificate[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Interface representing a IntegrationAccountCertificates. */
export declare interface IntegrationAccountCertificates {
    /**
     * Gets a list of integration account certificates.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, integrationAccountName: string, options?: IntegrationAccountCertificatesListOptionalParams): PagedAsyncIterableIterator<IntegrationAccountCertificate>;
    /**
     * Gets an integration account certificate.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param certificateName The integration account certificate name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, integrationAccountName: string, certificateName: string, options?: IntegrationAccountCertificatesGetOptionalParams): Promise<IntegrationAccountCertificatesGetResponse>;
    /**
     * Creates or updates an integration account certificate.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param certificateName The integration account certificate name.
     * @param certificate The integration account certificate.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, certificateName: string, certificate: IntegrationAccountCertificate, options?: IntegrationAccountCertificatesCreateOrUpdateOptionalParams): Promise<IntegrationAccountCertificatesCreateOrUpdateResponse>;
    /**
     * Deletes an integration account certificate.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param certificateName The integration account certificate name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, integrationAccountName: string, certificateName: string, options?: IntegrationAccountCertificatesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IntegrationAccountCertificatesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationAccountCertificatesCreateOrUpdateResponse = IntegrationAccountCertificate;

/** Optional parameters. */
export declare interface IntegrationAccountCertificatesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationAccountCertificatesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationAccountCertificatesGetResponse = IntegrationAccountCertificate;

/** Optional parameters. */
export declare interface IntegrationAccountCertificatesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IntegrationAccountCertificatesListNextResponse = IntegrationAccountCertificateListResult;

/** Optional parameters. */
export declare interface IntegrationAccountCertificatesListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type IntegrationAccountCertificatesListResponse = IntegrationAccountCertificateListResult;

/** The list of integration accounts. */
export declare interface IntegrationAccountListResult {
    /** The list of integration accounts. */
    value?: IntegrationAccount[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** The integration account map. */
export declare interface IntegrationAccountMap extends Resource {
    /** The map type. */
    mapType: MapType;
    /** The parameters schema of integration account map. */
    parametersSchema?: IntegrationAccountMapPropertiesParametersSchema;
    /**
     * The created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * The changed time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changedTime?: Date;
    /** The content. */
    content?: string;
    /** The content type. */
    contentType?: string;
    /**
     * The content link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly contentLink?: ContentLink;
    /** The metadata. */
    metadata?: any;
}

/** The integration account map filter for odata query. */
export declare interface IntegrationAccountMapFilter {
    /** The map type of integration account map. */
    mapType: MapType;
}

/** The list of integration account maps. */
export declare interface IntegrationAccountMapListResult {
    /** The list of integration account maps. */
    value?: IntegrationAccountMap[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** The parameters schema of integration account map. */
export declare interface IntegrationAccountMapPropertiesParametersSchema {
    /** The reference name. */
    ref?: string;
}

/** Interface representing a IntegrationAccountMaps. */
export declare interface IntegrationAccountMaps {
    /**
     * Gets a list of integration account maps.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, integrationAccountName: string, options?: IntegrationAccountMapsListOptionalParams): PagedAsyncIterableIterator<IntegrationAccountMap>;
    /**
     * Gets an integration account map.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, integrationAccountName: string, mapName: string, options?: IntegrationAccountMapsGetOptionalParams): Promise<IntegrationAccountMapsGetResponse>;
    /**
     * Creates or updates an integration account map. If the map is larger than 4 MB, you need to store the
     * map in an Azure blob and use the blob's Shared Access Signature (SAS) URL as the 'contentLink'
     * property value.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param map The integration account map.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, mapName: string, map: IntegrationAccountMap, options?: IntegrationAccountMapsCreateOrUpdateOptionalParams): Promise<IntegrationAccountMapsCreateOrUpdateResponse>;
    /**
     * Deletes an integration account map.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, integrationAccountName: string, mapName: string, options?: IntegrationAccountMapsDeleteOptionalParams): Promise<void>;
    /**
     * Get the content callback url.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param mapName The integration account map name.
     * @param listContentCallbackUrl The callback url parameters.
     * @param options The options parameters.
     */
    listContentCallbackUrl(resourceGroupName: string, integrationAccountName: string, mapName: string, listContentCallbackUrl: GetCallbackUrlParameters, options?: IntegrationAccountMapsListContentCallbackUrlOptionalParams): Promise<IntegrationAccountMapsListContentCallbackUrlResponse>;
}

/** Optional parameters. */
export declare interface IntegrationAccountMapsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationAccountMapsCreateOrUpdateResponse = IntegrationAccountMap;

/** Optional parameters. */
export declare interface IntegrationAccountMapsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationAccountMapsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationAccountMapsGetResponse = IntegrationAccountMap;

/** Optional parameters. */
export declare interface IntegrationAccountMapsListContentCallbackUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listContentCallbackUrl operation. */
export declare type IntegrationAccountMapsListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export declare interface IntegrationAccountMapsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IntegrationAccountMapsListNextResponse = IntegrationAccountMapListResult;

/** Optional parameters. */
export declare interface IntegrationAccountMapsListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. Options for filters include: MapType. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type IntegrationAccountMapsListResponse = IntegrationAccountMapListResult;

/** The integration account partner. */
export declare interface IntegrationAccountPartner extends Resource {
    /** The partner type. */
    partnerType: PartnerType;
    /**
     * The created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * The changed time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changedTime?: Date;
    /** The metadata. */
    metadata?: any;
    /** The partner content. */
    content: PartnerContent;
}

/** The integration account partner filter for odata query. */
export declare interface IntegrationAccountPartnerFilter {
    /** The partner type of integration account partner. */
    partnerType: PartnerType;
}

/** The list of integration account partners. */
export declare interface IntegrationAccountPartnerListResult {
    /** The list of integration account partners. */
    value?: IntegrationAccountPartner[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Interface representing a IntegrationAccountPartners. */
export declare interface IntegrationAccountPartners {
    /**
     * Gets a list of integration account partners.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, integrationAccountName: string, options?: IntegrationAccountPartnersListOptionalParams): PagedAsyncIterableIterator<IntegrationAccountPartner>;
    /**
     * Gets an integration account partner.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param partnerName The integration account partner name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, integrationAccountName: string, partnerName: string, options?: IntegrationAccountPartnersGetOptionalParams): Promise<IntegrationAccountPartnersGetResponse>;
    /**
     * Creates or updates an integration account partner.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param partnerName The integration account partner name.
     * @param partner The integration account partner.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, partnerName: string, partner: IntegrationAccountPartner, options?: IntegrationAccountPartnersCreateOrUpdateOptionalParams): Promise<IntegrationAccountPartnersCreateOrUpdateResponse>;
    /**
     * Deletes an integration account partner.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param partnerName The integration account partner name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, integrationAccountName: string, partnerName: string, options?: IntegrationAccountPartnersDeleteOptionalParams): Promise<void>;
    /**
     * Get the content callback url.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param partnerName The integration account partner name.
     * @param listContentCallbackUrl The callback url parameters.
     * @param options The options parameters.
     */
    listContentCallbackUrl(resourceGroupName: string, integrationAccountName: string, partnerName: string, listContentCallbackUrl: GetCallbackUrlParameters, options?: IntegrationAccountPartnersListContentCallbackUrlOptionalParams): Promise<IntegrationAccountPartnersListContentCallbackUrlResponse>;
}

/** Optional parameters. */
export declare interface IntegrationAccountPartnersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationAccountPartnersCreateOrUpdateResponse = IntegrationAccountPartner;

/** Optional parameters. */
export declare interface IntegrationAccountPartnersDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationAccountPartnersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationAccountPartnersGetResponse = IntegrationAccountPartner;

/** Optional parameters. */
export declare interface IntegrationAccountPartnersListContentCallbackUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listContentCallbackUrl operation. */
export declare type IntegrationAccountPartnersListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export declare interface IntegrationAccountPartnersListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IntegrationAccountPartnersListNextResponse = IntegrationAccountPartnerListResult;

/** Optional parameters. */
export declare interface IntegrationAccountPartnersListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. Options for filters include: PartnerType. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type IntegrationAccountPartnersListResponse = IntegrationAccountPartnerListResult;

/** Interface representing a IntegrationAccounts. */
export declare interface IntegrationAccounts {
    /**
     * Gets a list of integration accounts by subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: IntegrationAccountsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<IntegrationAccount>;
    /**
     * Gets a list of integration accounts by resource group.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: IntegrationAccountsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<IntegrationAccount>;
    /**
     * Gets the integration account's Key Vault keys.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param listKeyVaultKeys The key vault parameters.
     * @param options The options parameters.
     */
    listKeyVaultKeys(resourceGroupName: string, integrationAccountName: string, listKeyVaultKeys: ListKeyVaultKeysDefinition, options?: IntegrationAccountsListKeyVaultKeysOptionalParams): PagedAsyncIterableIterator<KeyVaultKey>;
    /**
     * Gets an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, integrationAccountName: string, options?: IntegrationAccountsGetOptionalParams): Promise<IntegrationAccountsGetResponse>;
    /**
     * Creates or updates an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param integrationAccount The integration account.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, integrationAccount: IntegrationAccount, options?: IntegrationAccountsCreateOrUpdateOptionalParams): Promise<IntegrationAccountsCreateOrUpdateResponse>;
    /**
     * Updates an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param integrationAccount The integration account.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, integrationAccountName: string, integrationAccount: IntegrationAccount, options?: IntegrationAccountsUpdateOptionalParams): Promise<IntegrationAccountsUpdateResponse>;
    /**
     * Deletes an integration account.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, integrationAccountName: string, options?: IntegrationAccountsDeleteOptionalParams): Promise<void>;
    /**
     * Gets the integration account callback URL.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param parameters The callback URL parameters.
     * @param options The options parameters.
     */
    listCallbackUrl(resourceGroupName: string, integrationAccountName: string, parameters: GetCallbackUrlParameters, options?: IntegrationAccountsListCallbackUrlOptionalParams): Promise<IntegrationAccountsListCallbackUrlResponse>;
    /**
     * Logs the integration account's tracking events.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param logTrackingEvents The callback URL parameters.
     * @param options The options parameters.
     */
    logTrackingEvents(resourceGroupName: string, integrationAccountName: string, logTrackingEvents: TrackingEventsDefinition, options?: IntegrationAccountsLogTrackingEventsOptionalParams): Promise<void>;
    /**
     * Regenerates the integration account access key.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param regenerateAccessKey The access key type.
     * @param options The options parameters.
     */
    regenerateAccessKey(resourceGroupName: string, integrationAccountName: string, regenerateAccessKey: RegenerateActionParameter, options?: IntegrationAccountsRegenerateAccessKeyOptionalParams): Promise<IntegrationAccountsRegenerateAccessKeyResponse>;
}

/** The integration account schema. */
export declare interface IntegrationAccountSchema extends Resource {
    /** The schema type. */
    schemaType: SchemaType;
    /** The target namespace of the schema. */
    targetNamespace?: string;
    /** The document name. */
    documentName?: string;
    /** The file name. */
    fileName?: string;
    /**
     * The created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * The changed time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changedTime?: Date;
    /** The metadata. */
    metadata?: any;
    /** The content. */
    content?: string;
    /** The content type. */
    contentType?: string;
    /**
     * The content link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly contentLink?: ContentLink;
}

/** The integration account schema filter for odata query. */
export declare interface IntegrationAccountSchemaFilter {
    /** The schema type of integration account schema. */
    schemaType: SchemaType;
}

/** The list of integration account schemas. */
export declare interface IntegrationAccountSchemaListResult {
    /** The list of integration account schemas. */
    value?: IntegrationAccountSchema[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Interface representing a IntegrationAccountSchemas. */
export declare interface IntegrationAccountSchemas {
    /**
     * Gets a list of integration account schemas.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, integrationAccountName: string, options?: IntegrationAccountSchemasListOptionalParams): PagedAsyncIterableIterator<IntegrationAccountSchema>;
    /**
     * Gets an integration account schema.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param schemaName The integration account schema name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, integrationAccountName: string, schemaName: string, options?: IntegrationAccountSchemasGetOptionalParams): Promise<IntegrationAccountSchemasGetResponse>;
    /**
     * Creates or updates an integration account schema.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param schemaName The integration account schema name.
     * @param schema The integration account schema.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, schemaName: string, schema: IntegrationAccountSchema, options?: IntegrationAccountSchemasCreateOrUpdateOptionalParams): Promise<IntegrationAccountSchemasCreateOrUpdateResponse>;
    /**
     * Deletes an integration account schema.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param schemaName The integration account schema name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, integrationAccountName: string, schemaName: string, options?: IntegrationAccountSchemasDeleteOptionalParams): Promise<void>;
    /**
     * Get the content callback url.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param schemaName The integration account schema name.
     * @param listContentCallbackUrl The callback url parameters.
     * @param options The options parameters.
     */
    listContentCallbackUrl(resourceGroupName: string, integrationAccountName: string, schemaName: string, listContentCallbackUrl: GetCallbackUrlParameters, options?: IntegrationAccountSchemasListContentCallbackUrlOptionalParams): Promise<IntegrationAccountSchemasListContentCallbackUrlResponse>;
}

/** Optional parameters. */
export declare interface IntegrationAccountSchemasCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationAccountSchemasCreateOrUpdateResponse = IntegrationAccountSchema;

/** Optional parameters. */
export declare interface IntegrationAccountSchemasDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationAccountSchemasGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationAccountSchemasGetResponse = IntegrationAccountSchema;

/** Optional parameters. */
export declare interface IntegrationAccountSchemasListContentCallbackUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listContentCallbackUrl operation. */
export declare type IntegrationAccountSchemasListContentCallbackUrlResponse = WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export declare interface IntegrationAccountSchemasListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IntegrationAccountSchemasListNextResponse = IntegrationAccountSchemaListResult;

/** Optional parameters. */
export declare interface IntegrationAccountSchemasListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. Options for filters include: SchemaType. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type IntegrationAccountSchemasListResponse = IntegrationAccountSchemaListResult;

/** Optional parameters. */
export declare interface IntegrationAccountsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationAccountsCreateOrUpdateResponse = IntegrationAccount;

/** Optional parameters. */
export declare interface IntegrationAccountsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** The integration account session. */
export declare interface IntegrationAccountSession extends Resource {
    /**
     * The created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * The changed time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changedTime?: Date;
    /** The session content. */
    content?: any;
}

/** The integration account session filter. */
export declare interface IntegrationAccountSessionFilter {
    /** The changed time of integration account sessions. */
    changedTime: Date;
}

/** The list of integration account sessions. */
export declare interface IntegrationAccountSessionListResult {
    /** The list of integration account sessions. */
    value?: IntegrationAccountSession[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Interface representing a IntegrationAccountSessions. */
export declare interface IntegrationAccountSessions {
    /**
     * Gets a list of integration account sessions.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, integrationAccountName: string, options?: IntegrationAccountSessionsListOptionalParams): PagedAsyncIterableIterator<IntegrationAccountSession>;
    /**
     * Gets an integration account session.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param sessionName The integration account session name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, integrationAccountName: string, sessionName: string, options?: IntegrationAccountSessionsGetOptionalParams): Promise<IntegrationAccountSessionsGetResponse>;
    /**
     * Creates or updates an integration account session.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param sessionName The integration account session name.
     * @param session The integration account session.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, integrationAccountName: string, sessionName: string, session: IntegrationAccountSession, options?: IntegrationAccountSessionsCreateOrUpdateOptionalParams): Promise<IntegrationAccountSessionsCreateOrUpdateResponse>;
    /**
     * Deletes an integration account session.
     * @param resourceGroupName The resource group name.
     * @param integrationAccountName The integration account name.
     * @param sessionName The integration account session name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, integrationAccountName: string, sessionName: string, options?: IntegrationAccountSessionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IntegrationAccountSessionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationAccountSessionsCreateOrUpdateResponse = IntegrationAccountSession;

/** Optional parameters. */
export declare interface IntegrationAccountSessionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationAccountSessionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationAccountSessionsGetResponse = IntegrationAccountSession;

/** Optional parameters. */
export declare interface IntegrationAccountSessionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IntegrationAccountSessionsListNextResponse = IntegrationAccountSessionListResult;

/** Optional parameters. */
export declare interface IntegrationAccountSessionsListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. Options for filters include: ChangedTime. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type IntegrationAccountSessionsListResponse = IntegrationAccountSessionListResult;

/** Optional parameters. */
export declare interface IntegrationAccountsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationAccountsGetResponse = IntegrationAccount;

/** The integration account sku. */
export declare interface IntegrationAccountSku {
    /** The sku name. */
    name: IntegrationAccountSkuName;
}

/**
 * Defines values for IntegrationAccountSkuName. \
 * {@link KnownIntegrationAccountSkuName} can be used interchangeably with IntegrationAccountSkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Free** \
 * **Basic** \
 * **Standard**
 */
export declare type IntegrationAccountSkuName = string;

/** Optional parameters. */
export declare interface IntegrationAccountsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type IntegrationAccountsListByResourceGroupNextResponse = IntegrationAccountListResult;

/** Optional parameters. */
export declare interface IntegrationAccountsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type IntegrationAccountsListByResourceGroupResponse = IntegrationAccountListResult;

/** Optional parameters. */
export declare interface IntegrationAccountsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type IntegrationAccountsListBySubscriptionNextResponse = IntegrationAccountListResult;

/** Optional parameters. */
export declare interface IntegrationAccountsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
}

/** Contains response data for the listBySubscription operation. */
export declare type IntegrationAccountsListBySubscriptionResponse = IntegrationAccountListResult;

/** Optional parameters. */
export declare interface IntegrationAccountsListCallbackUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listCallbackUrl operation. */
export declare type IntegrationAccountsListCallbackUrlResponse = CallbackUrl;

/** Optional parameters. */
export declare interface IntegrationAccountsListKeyVaultKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeyVaultKeys operation. */
export declare type IntegrationAccountsListKeyVaultKeysResponse = KeyVaultKeyCollection;

/** Optional parameters. */
export declare interface IntegrationAccountsLogTrackingEventsOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationAccountsRegenerateAccessKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateAccessKey operation. */
export declare type IntegrationAccountsRegenerateAccessKeyResponse = IntegrationAccount;

/** Optional parameters. */
export declare interface IntegrationAccountsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type IntegrationAccountsUpdateResponse = IntegrationAccount;

/** The encryption configuration for the integration service environment. */
export declare interface IntegrationServiceEnvironmenEncryptionConfiguration {
    /** The encryption key reference. */
    encryptionKeyReference?: IntegrationServiceEnvironmenEncryptionKeyReference;
}

/** The encryption key details for the integration service environment. */
export declare interface IntegrationServiceEnvironmenEncryptionKeyReference {
    /** The key vault reference. */
    keyVault?: ResourceReference;
    /** Gets the key name in the Key Vault. */
    keyName?: string;
    /** Gets the version of the key specified in the keyName property. */
    keyVersion?: string;
}

/** The integration service environment. */
export declare interface IntegrationServiceEnvironment extends Resource {
    /** The integration service environment properties. */
    properties?: IntegrationServiceEnvironmentProperties;
    /** The sku. */
    sku?: IntegrationServiceEnvironmentSku;
    /** Managed service identity properties. */
    identity?: ManagedServiceIdentity;
}

/** The integration service environment access endpoint. */
export declare interface IntegrationServiceEnvironmentAccessEndpoint {
    /** The access endpoint type. */
    type?: IntegrationServiceEnvironmentAccessEndpointType;
}

/**
 * Defines values for IntegrationServiceEnvironmentAccessEndpointType. \
 * {@link KnownIntegrationServiceEnvironmentAccessEndpointType} can be used interchangeably with IntegrationServiceEnvironmentAccessEndpointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **External** \
 * **Internal**
 */
export declare type IntegrationServiceEnvironmentAccessEndpointType = string;

/** The list of integration service environments. */
export declare interface IntegrationServiceEnvironmentListResult {
    value?: IntegrationServiceEnvironment[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** The integration service environment managed api. */
export declare interface IntegrationServiceEnvironmentManagedApi extends Resource {
    /**
     * The name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly namePropertiesName?: string;
    /**
     * The connection parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectionParameters?: {
        [propertyName: string]: any;
    };
    /**
     * The metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metadata?: ApiResourceMetadata;
    /**
     * The runtime urls.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runtimeUrls?: string[];
    /**
     * The api general information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly generalInformation?: ApiResourceGeneralInformation;
    /**
     * The capabilities.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: string[];
    /**
     * The backend service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly backendService?: ApiResourceBackendService;
    /**
     * The policies for the API.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly policies?: ApiResourcePolicies;
    /**
     * The API definition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiDefinitionUrl?: string;
    /**
     * The api definitions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiDefinitions?: ApiResourceDefinitions;
    /** The integration service environment reference. */
    integrationServiceEnvironment?: ResourceReference;
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkflowProvisioningState;
    /**
     * The category.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly category?: ApiTier;
    /** The integration service environment managed api deployment parameters. */
    deploymentParameters?: IntegrationServiceEnvironmentManagedApiDeploymentParameters;
}

/** The integration service environment managed api deployment parameters. */
export declare interface IntegrationServiceEnvironmentManagedApiDeploymentParameters {
    /** The integration service environment managed api content link for deployment. */
    contentLinkDefinition?: ContentLink;
}

/** The list of integration service environment managed APIs. */
export declare interface IntegrationServiceEnvironmentManagedApiListResult {
    /** The integration service environment managed APIs. */
    value?: IntegrationServiceEnvironmentManagedApi[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Interface representing a IntegrationServiceEnvironmentManagedApiOperations. */
export declare interface IntegrationServiceEnvironmentManagedApiOperations {
    /**
     * Gets the managed Api operations.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param options The options parameters.
     */
    list(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options?: IntegrationServiceEnvironmentManagedApiOperationsListOptionalParams): PagedAsyncIterableIterator<ApiOperation>;
}

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentManagedApiOperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IntegrationServiceEnvironmentManagedApiOperationsListNextResponse = ApiOperationListResult;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentManagedApiOperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type IntegrationServiceEnvironmentManagedApiOperationsListResponse = ApiOperationListResult;

/** The integration service environment managed api properties. */
export declare interface IntegrationServiceEnvironmentManagedApiProperties extends ApiResourceProperties {
    /** The integration service environment managed api deployment parameters. */
    deploymentParameters?: IntegrationServiceEnvironmentManagedApiDeploymentParameters;
}

/** Interface representing a IntegrationServiceEnvironmentManagedApis. */
export declare interface IntegrationServiceEnvironmentManagedApis {
    /**
     * Gets the integration service environment managed Apis.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param options The options parameters.
     */
    list(resourceGroup: string, integrationServiceEnvironmentName: string, options?: IntegrationServiceEnvironmentManagedApisListOptionalParams): PagedAsyncIterableIterator<IntegrationServiceEnvironmentManagedApi>;
    /**
     * Gets the integration service environment managed Api.
     * @param resourceGroup The resource group name.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param options The options parameters.
     */
    get(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options?: IntegrationServiceEnvironmentManagedApisGetOptionalParams): Promise<IntegrationServiceEnvironmentManagedApisGetResponse>;
    /**
     * Puts the integration service environment managed Api.
     * @param resourceGroup The resource group name.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param integrationServiceEnvironmentManagedApi The integration service environment managed api.
     * @param options The options parameters.
     */
    beginPut(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, integrationServiceEnvironmentManagedApi: IntegrationServiceEnvironmentManagedApi, options?: IntegrationServiceEnvironmentManagedApisPutOptionalParams): Promise<PollerLike<PollOperationState<IntegrationServiceEnvironmentManagedApisPutResponse>, IntegrationServiceEnvironmentManagedApisPutResponse>>;
    /**
     * Puts the integration service environment managed Api.
     * @param resourceGroup The resource group name.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param integrationServiceEnvironmentManagedApi The integration service environment managed api.
     * @param options The options parameters.
     */
    beginPutAndWait(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, integrationServiceEnvironmentManagedApi: IntegrationServiceEnvironmentManagedApi, options?: IntegrationServiceEnvironmentManagedApisPutOptionalParams): Promise<IntegrationServiceEnvironmentManagedApisPutResponse>;
    /**
     * Deletes the integration service environment managed Api.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options?: IntegrationServiceEnvironmentManagedApisDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the integration service environment managed Api.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param apiName The api name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroup: string, integrationServiceEnvironmentName: string, apiName: string, options?: IntegrationServiceEnvironmentManagedApisDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentManagedApisDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentManagedApisGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationServiceEnvironmentManagedApisGetResponse = IntegrationServiceEnvironmentManagedApi;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentManagedApisListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IntegrationServiceEnvironmentManagedApisListNextResponse = IntegrationServiceEnvironmentManagedApiListResult;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentManagedApisListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type IntegrationServiceEnvironmentManagedApisListResponse = IntegrationServiceEnvironmentManagedApiListResult;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentManagedApisPutOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the put operation. */
export declare type IntegrationServiceEnvironmentManagedApisPutResponse = IntegrationServiceEnvironmentManagedApi;

/** The azure async operation resource. */
export declare interface IntegrationServiceEnvironmentNetworkDependency {
    /** The network dependency category type. */
    category?: IntegrationServiceEnvironmentNetworkDependencyCategoryType;
    /** The display name. */
    displayName?: string;
    /** The endpoints. */
    endpoints?: IntegrationServiceEnvironmentNetworkEndpoint[];
}

/**
 * Defines values for IntegrationServiceEnvironmentNetworkDependencyCategoryType. \
 * {@link KnownIntegrationServiceEnvironmentNetworkDependencyCategoryType} can be used interchangeably with IntegrationServiceEnvironmentNetworkDependencyCategoryType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **AzureStorage** \
 * **AzureManagement** \
 * **AzureActiveDirectory** \
 * **SSLCertificateVerification** \
 * **DiagnosticLogsAndMetrics** \
 * **IntegrationServiceEnvironmentConnectors** \
 * **RedisCache** \
 * **AccessEndpoints** \
 * **RecoveryService** \
 * **SQL** \
 * **RegionalService**
 */
export declare type IntegrationServiceEnvironmentNetworkDependencyCategoryType = string;

/** The integration service environment subnet network health. */
export declare interface IntegrationServiceEnvironmentNetworkDependencyHealth {
    /** The error if any occurred during the operation. */
    error?: ExtendedErrorInfo;
    /** The network dependency health state. */
    state?: IntegrationServiceEnvironmentNetworkDependencyHealthState;
}

/**
 * Defines values for IntegrationServiceEnvironmentNetworkDependencyHealthState. \
 * {@link KnownIntegrationServiceEnvironmentNetworkDependencyHealthState} can be used interchangeably with IntegrationServiceEnvironmentNetworkDependencyHealthState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Healthy** \
 * **Unhealthy** \
 * **Unknown**
 */
export declare type IntegrationServiceEnvironmentNetworkDependencyHealthState = string;

/** The network endpoint. */
export declare interface IntegrationServiceEnvironmentNetworkEndpoint {
    /** The accessibility state. */
    accessibility?: IntegrationServiceEnvironmentNetworkEndPointAccessibilityState;
    /** The domain name. */
    domainName?: string;
    /** The ports. */
    ports?: string[];
}

/**
 * Defines values for IntegrationServiceEnvironmentNetworkEndPointAccessibilityState. \
 * {@link KnownIntegrationServiceEnvironmentNetworkEndPointAccessibilityState} can be used interchangeably with IntegrationServiceEnvironmentNetworkEndPointAccessibilityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Unknown** \
 * **Available** \
 * **NotAvailable**
 */
export declare type IntegrationServiceEnvironmentNetworkEndPointAccessibilityState = string;

/** Interface representing a IntegrationServiceEnvironmentNetworkHealth. */
export declare interface IntegrationServiceEnvironmentNetworkHealth {
    /**
     * Gets the integration service environment network health.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param options The options parameters.
     */
    get(resourceGroup: string, integrationServiceEnvironmentName: string, options?: IntegrationServiceEnvironmentNetworkHealthGetOptionalParams): Promise<IntegrationServiceEnvironmentNetworkHealthGetResponse>;
}

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentNetworkHealthGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationServiceEnvironmentNetworkHealthGetResponse = {
    [propertyName: string]: IntegrationServiceEnvironmentSubnetNetworkHealth;
};

/** The integration service environment properties. */
export declare interface IntegrationServiceEnvironmentProperties {
    /** The provisioning state. */
    provisioningState?: WorkflowProvisioningState;
    /** The integration service environment state. */
    state?: WorkflowState;
    /** Gets the tracking id. */
    integrationServiceEnvironmentId?: string;
    /** The endpoints configuration. */
    endpointsConfiguration?: FlowEndpointsConfiguration;
    /** The network configuration. */
    networkConfiguration?: NetworkConfiguration;
    /** The encryption configuration. */
    encryptionConfiguration?: IntegrationServiceEnvironmenEncryptionConfiguration;
}

/** Interface representing a IntegrationServiceEnvironments. */
export declare interface IntegrationServiceEnvironments {
    /**
     * Gets a list of integration service environments by subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: IntegrationServiceEnvironmentsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<IntegrationServiceEnvironment>;
    /**
     * Gets a list of integration service environments by resource group.
     * @param resourceGroup The resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroup: string, options?: IntegrationServiceEnvironmentsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<IntegrationServiceEnvironment>;
    /**
     * Gets an integration service environment.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param options The options parameters.
     */
    get(resourceGroup: string, integrationServiceEnvironmentName: string, options?: IntegrationServiceEnvironmentsGetOptionalParams): Promise<IntegrationServiceEnvironmentsGetResponse>;
    /**
     * Creates or updates an integration service environment.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroup: string, integrationServiceEnvironmentName: string, integrationServiceEnvironment: IntegrationServiceEnvironment, options?: IntegrationServiceEnvironmentsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<IntegrationServiceEnvironmentsCreateOrUpdateResponse>, IntegrationServiceEnvironmentsCreateOrUpdateResponse>>;
    /**
     * Creates or updates an integration service environment.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroup: string, integrationServiceEnvironmentName: string, integrationServiceEnvironment: IntegrationServiceEnvironment, options?: IntegrationServiceEnvironmentsCreateOrUpdateOptionalParams): Promise<IntegrationServiceEnvironmentsCreateOrUpdateResponse>;
    /**
     * Updates an integration service environment.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroup: string, integrationServiceEnvironmentName: string, integrationServiceEnvironment: IntegrationServiceEnvironment, options?: IntegrationServiceEnvironmentsUpdateOptionalParams): Promise<PollerLike<PollOperationState<IntegrationServiceEnvironmentsUpdateResponse>, IntegrationServiceEnvironmentsUpdateResponse>>;
    /**
     * Updates an integration service environment.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param integrationServiceEnvironment The integration service environment.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroup: string, integrationServiceEnvironmentName: string, integrationServiceEnvironment: IntegrationServiceEnvironment, options?: IntegrationServiceEnvironmentsUpdateOptionalParams): Promise<IntegrationServiceEnvironmentsUpdateResponse>;
    /**
     * Deletes an integration service environment.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param options The options parameters.
     */
    delete(resourceGroup: string, integrationServiceEnvironmentName: string, options?: IntegrationServiceEnvironmentsDeleteOptionalParams): Promise<void>;
    /**
     * Restarts an integration service environment.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param options The options parameters.
     */
    restart(resourceGroup: string, integrationServiceEnvironmentName: string, options?: IntegrationServiceEnvironmentsRestartOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type IntegrationServiceEnvironmentsCreateOrUpdateResponse = IntegrationServiceEnvironment;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationServiceEnvironmentsGetResponse = IntegrationServiceEnvironment;

/** The integration service environment sku. */
export declare interface IntegrationServiceEnvironmentSku {
    /** The sku name. */
    name?: IntegrationServiceEnvironmentSkuName;
    /** The sku capacity. */
    capacity?: number;
}

/** The integration service environment sku capacity. */
export declare interface IntegrationServiceEnvironmentSkuCapacity {
    /** The minimum capacity. */
    minimum?: number;
    /** The maximum capacity. */
    maximum?: number;
    /** The default capacity. */
    default?: number;
    /** The sku scale type. */
    scaleType?: IntegrationServiceEnvironmentSkuScaleType;
}

/** The integration service environment sku definition. */
export declare interface IntegrationServiceEnvironmentSkuDefinition {
    /** The resource type. */
    resourceType?: string;
    /** The sku. */
    sku?: IntegrationServiceEnvironmentSkuDefinitionSku;
    /** The sku capacity. */
    capacity?: IntegrationServiceEnvironmentSkuCapacity;
}

/** The sku. */
export declare interface IntegrationServiceEnvironmentSkuDefinitionSku {
    /** The sku name. */
    name?: IntegrationServiceEnvironmentSkuName;
    /** The sku tier. */
    tier?: string;
}

/** The list of integration service environment skus. */
export declare interface IntegrationServiceEnvironmentSkuList {
    /** The list of integration service environment skus. */
    value?: IntegrationServiceEnvironmentSkuDefinition[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/**
 * Defines values for IntegrationServiceEnvironmentSkuName. \
 * {@link KnownIntegrationServiceEnvironmentSkuName} can be used interchangeably with IntegrationServiceEnvironmentSkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Premium** \
 * **Developer**
 */
export declare type IntegrationServiceEnvironmentSkuName = string;

/** Interface representing a IntegrationServiceEnvironmentSkus. */
export declare interface IntegrationServiceEnvironmentSkus {
    /**
     * Gets a list of integration service environment Skus.
     * @param resourceGroup The resource group.
     * @param integrationServiceEnvironmentName The integration service environment name.
     * @param options The options parameters.
     */
    list(resourceGroup: string, integrationServiceEnvironmentName: string, options?: IntegrationServiceEnvironmentSkusListOptionalParams): PagedAsyncIterableIterator<IntegrationServiceEnvironmentSkuDefinition>;
}

/**
 * Defines values for IntegrationServiceEnvironmentSkuScaleType. \
 * {@link KnownIntegrationServiceEnvironmentSkuScaleType} can be used interchangeably with IntegrationServiceEnvironmentSkuScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Manual** \
 * **Automatic** \
 * **None**
 */
export declare type IntegrationServiceEnvironmentSkuScaleType = string;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentSkusListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type IntegrationServiceEnvironmentSkusListNextResponse = IntegrationServiceEnvironmentSkuList;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentSkusListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type IntegrationServiceEnvironmentSkusListResponse = IntegrationServiceEnvironmentSkuList;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type IntegrationServiceEnvironmentsListByResourceGroupNextResponse = IntegrationServiceEnvironmentListResult;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type IntegrationServiceEnvironmentsListByResourceGroupResponse = IntegrationServiceEnvironmentListResult;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type IntegrationServiceEnvironmentsListBySubscriptionNextResponse = IntegrationServiceEnvironmentListResult;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
}

/** Contains response data for the listBySubscription operation. */
export declare type IntegrationServiceEnvironmentsListBySubscriptionResponse = IntegrationServiceEnvironmentListResult;

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentsRestartOptionalParams extends coreClient.OperationOptions {
}

/** The integration service environment subnet network health. */
export declare interface IntegrationServiceEnvironmentSubnetNetworkHealth {
    /** The outbound network dependencies. */
    outboundNetworkDependencies?: IntegrationServiceEnvironmentNetworkDependency[];
    /** The integration service environment network health. */
    outboundNetworkHealth?: IntegrationServiceEnvironmentNetworkDependencyHealth;
    /** The integration service environment network health state. */
    networkDependencyHealthState: IntegrationServiceEnvironmentNetworkEndPointAccessibilityState;
}

/** Optional parameters. */
export declare interface IntegrationServiceEnvironmentsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type IntegrationServiceEnvironmentsUpdateResponse = IntegrationServiceEnvironment;

/** The ip address. */
export declare interface IpAddress {
    /** The address. */
    address?: string;
}

/** The ip address range. */
export declare interface IpAddressRange {
    /** The IP address range. */
    addressRange?: string;
}

/** The JSON schema. */
export declare interface JsonSchema {
    /** The JSON title. */
    title?: string;
    /** The JSON content. */
    content?: string;
}

/**
 * Defines values for KeyType. \
 * {@link KnownKeyType} can be used interchangeably with KeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Primary** \
 * **Secondary**
 */
declare type KeyType_2 = string;
export { KeyType_2 as KeyType }

/** The key vault key. */
export declare interface KeyVaultKey {
    /** The key id. */
    kid?: string;
    /** The key attributes. */
    attributes?: KeyVaultKeyAttributes;
}

/** The key attributes. */
export declare interface KeyVaultKeyAttributes {
    /** Whether the key is enabled or not. */
    enabled?: boolean;
    /** When the key was created. */
    created?: number;
    /** When the key was updated. */
    updated?: number;
}

/** Collection of key vault keys. */
export declare interface KeyVaultKeyCollection {
    /** The key vault keys. */
    value?: KeyVaultKey[];
    /** The skip token. */
    skipToken?: string;
}

/** The reference to the key vault key. */
export declare interface KeyVaultKeyReference {
    /** The key vault reference. */
    keyVault: KeyVaultKeyReferenceKeyVault;
    /** The private key name in key vault. */
    keyName: string;
    /** The private key version in key vault. */
    keyVersion?: string;
}

/** The key vault reference. */
export declare interface KeyVaultKeyReferenceKeyVault {
    /** The resource id. */
    id?: string;
    /**
     * The resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The key vault reference. */
export declare interface KeyVaultReference extends ResourceReference {
}

/** Known values of {@link ApiDeploymentParameterVisibility} that the service accepts. */
export declare enum KnownApiDeploymentParameterVisibility {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Default */
    Default = "Default",
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link ApiTier} that the service accepts. */
export declare enum KnownApiTier {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Enterprise */
    Enterprise = "Enterprise",
    /** Standard */
    Standard = "Standard",
    /** Premium */
    Premium = "Premium"
}

/** Known values of {@link ApiType} that the service accepts. */
export declare enum KnownApiType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Rest */
    Rest = "Rest",
    /** Soap */
    Soap = "Soap"
}

/** Known values of {@link AzureAsyncOperationState} that the service accepts. */
export declare enum KnownAzureAsyncOperationState {
    /** Failed */
    Failed = "Failed",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Pending */
    Pending = "Pending",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link EdifactCharacterSet} that the service accepts. */
export declare enum KnownEdifactCharacterSet {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Unob */
    Unob = "UNOB",
    /** Unoa */
    Unoa = "UNOA",
    /** Unoc */
    Unoc = "UNOC",
    /** Unod */
    Unod = "UNOD",
    /** Unoe */
    Unoe = "UNOE",
    /** Unof */
    Unof = "UNOF",
    /** Unog */
    Unog = "UNOG",
    /** Unoh */
    Unoh = "UNOH",
    /** Unoi */
    Unoi = "UNOI",
    /** Unoj */
    Unoj = "UNOJ",
    /** Unok */
    Unok = "UNOK",
    /** Unox */
    Unox = "UNOX",
    /** Unoy */
    Unoy = "UNOY",
    /** Keca */
    Keca = "KECA"
}

/** Known values of {@link EncryptionAlgorithm} that the service accepts. */
export declare enum KnownEncryptionAlgorithm {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** None */
    None = "None",
    /** DES3 */
    DES3 = "DES3",
    /** RC2 */
    RC2 = "RC2",
    /** AES128 */
    AES128 = "AES128",
    /** AES192 */
    AES192 = "AES192",
    /** AES256 */
    AES256 = "AES256"
}

/** Known values of {@link ErrorResponseCode} that the service accepts. */
export declare enum KnownErrorResponseCode {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** IntegrationServiceEnvironmentNotFound */
    IntegrationServiceEnvironmentNotFound = "IntegrationServiceEnvironmentNotFound",
    /** InternalServerError */
    InternalServerError = "InternalServerError",
    /** InvalidOperationId */
    InvalidOperationId = "InvalidOperationId"
}

/** Known values of {@link HashingAlgorithm} that the service accepts. */
export declare enum KnownHashingAlgorithm {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** None */
    None = "None",
    /** MD5 */
    MD5 = "MD5",
    /** SHA1 */
    SHA1 = "SHA1",
    /** SHA2256 */
    SHA2256 = "SHA2256",
    /** SHA2384 */
    SHA2384 = "SHA2384",
    /** SHA2512 */
    SHA2512 = "SHA2512"
}

/** Known values of {@link IntegrationAccountSkuName} that the service accepts. */
export declare enum KnownIntegrationAccountSkuName {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Free */
    Free = "Free",
    /** Basic */
    Basic = "Basic",
    /** Standard */
    Standard = "Standard"
}

/** Known values of {@link IntegrationServiceEnvironmentAccessEndpointType} that the service accepts. */
export declare enum KnownIntegrationServiceEnvironmentAccessEndpointType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** External */
    External = "External",
    /** Internal */
    Internal = "Internal"
}

/** Known values of {@link IntegrationServiceEnvironmentNetworkDependencyCategoryType} that the service accepts. */
export declare enum KnownIntegrationServiceEnvironmentNetworkDependencyCategoryType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** AzureStorage */
    AzureStorage = "AzureStorage",
    /** AzureManagement */
    AzureManagement = "AzureManagement",
    /** AzureActiveDirectory */
    AzureActiveDirectory = "AzureActiveDirectory",
    /** SSLCertificateVerification */
    SSLCertificateVerification = "SSLCertificateVerification",
    /** DiagnosticLogsAndMetrics */
    DiagnosticLogsAndMetrics = "DiagnosticLogsAndMetrics",
    /** IntegrationServiceEnvironmentConnectors */
    IntegrationServiceEnvironmentConnectors = "IntegrationServiceEnvironmentConnectors",
    /** RedisCache */
    RedisCache = "RedisCache",
    /** AccessEndpoints */
    AccessEndpoints = "AccessEndpoints",
    /** RecoveryService */
    RecoveryService = "RecoveryService",
    /** SQL */
    SQL = "SQL",
    /** RegionalService */
    RegionalService = "RegionalService"
}

/** Known values of {@link IntegrationServiceEnvironmentNetworkDependencyHealthState} that the service accepts. */
export declare enum KnownIntegrationServiceEnvironmentNetworkDependencyHealthState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Healthy */
    Healthy = "Healthy",
    /** Unhealthy */
    Unhealthy = "Unhealthy",
    /** Unknown */
    Unknown = "Unknown"
}

/** Known values of {@link IntegrationServiceEnvironmentNetworkEndPointAccessibilityState} that the service accepts. */
export declare enum KnownIntegrationServiceEnvironmentNetworkEndPointAccessibilityState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Unknown */
    Unknown = "Unknown",
    /** Available */
    Available = "Available",
    /** NotAvailable */
    NotAvailable = "NotAvailable"
}

/** Known values of {@link IntegrationServiceEnvironmentSkuName} that the service accepts. */
export declare enum KnownIntegrationServiceEnvironmentSkuName {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Premium */
    Premium = "Premium",
    /** Developer */
    Developer = "Developer"
}

/** Known values of {@link IntegrationServiceEnvironmentSkuScaleType} that the service accepts. */
export declare enum KnownIntegrationServiceEnvironmentSkuScaleType {
    /** Manual */
    Manual = "Manual",
    /** Automatic */
    Automatic = "Automatic",
    /** None */
    None = "None"
}

/** Known values of {@link KeyType} that the service accepts. */
export declare enum KnownKeyType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Primary */
    Primary = "Primary",
    /** Secondary */
    Secondary = "Secondary"
}

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export declare enum KnownManagedServiceIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** None */
    None = "None"
}

/** Known values of {@link MapType} that the service accepts. */
export declare enum KnownMapType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Xslt */
    Xslt = "Xslt",
    /** Xslt20 */
    Xslt20 = "Xslt20",
    /** Xslt30 */
    Xslt30 = "Xslt30",
    /** Liquid */
    Liquid = "Liquid"
}

/** Known values of {@link MessageFilterType} that the service accepts. */
export declare enum KnownMessageFilterType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Include */
    Include = "Include",
    /** Exclude */
    Exclude = "Exclude"
}

/** Known values of {@link OpenAuthenticationProviderType} that the service accepts. */
export declare enum KnownOpenAuthenticationProviderType {
    /** AAD */
    AAD = "AAD"
}

/** Known values of {@link ParameterType} that the service accepts. */
export declare enum KnownParameterType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** String */
    String = "String",
    /** SecureString */
    SecureString = "SecureString",
    /** Int */
    Int = "Int",
    /** Float */
    Float = "Float",
    /** Bool */
    Bool = "Bool",
    /** Array */
    Array = "Array",
    /** Object */
    Object = "Object",
    /** SecureObject */
    SecureObject = "SecureObject"
}

/** Known values of {@link PartnerType} that the service accepts. */
export declare enum KnownPartnerType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** B2B */
    B2B = "B2B"
}

/** Known values of {@link RecurrenceFrequency} that the service accepts. */
export declare enum KnownRecurrenceFrequency {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Second */
    Second = "Second",
    /** Minute */
    Minute = "Minute",
    /** Hour */
    Hour = "Hour",
    /** Day */
    Day = "Day",
    /** Week */
    Week = "Week",
    /** Month */
    Month = "Month",
    /** Year */
    Year = "Year"
}

/** Known values of {@link SchemaType} that the service accepts. */
export declare enum KnownSchemaType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Xml */
    Xml = "Xml"
}

/** Known values of {@link SigningAlgorithm} that the service accepts. */
export declare enum KnownSigningAlgorithm {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Default */
    Default = "Default",
    /** SHA1 */
    SHA1 = "SHA1",
    /** SHA2256 */
    SHA2256 = "SHA2256",
    /** SHA2384 */
    SHA2384 = "SHA2384",
    /** SHA2512 */
    SHA2512 = "SHA2512"
}

/** Known values of {@link SkuName} that the service accepts. */
export declare enum KnownSkuName {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Free */
    Free = "Free",
    /** Shared */
    Shared = "Shared",
    /** Basic */
    Basic = "Basic",
    /** Standard */
    Standard = "Standard",
    /** Premium */
    Premium = "Premium"
}

/** Known values of {@link StatusAnnotation} that the service accepts. */
export declare enum KnownStatusAnnotation {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Preview */
    Preview = "Preview",
    /** Production */
    Production = "Production"
}

/** Known values of {@link SwaggerSchemaType} that the service accepts. */
export declare enum KnownSwaggerSchemaType {
    /** String */
    String = "String",
    /** Number */
    Number = "Number",
    /** Integer */
    Integer = "Integer",
    /** Boolean */
    Boolean = "Boolean",
    /** Array */
    Array = "Array",
    /** File */
    File = "File",
    /** Object */
    Object = "Object",
    /** Null */
    Null = "Null"
}

/** Known values of {@link TrackEventsOperationOptions} that the service accepts. */
export declare enum KnownTrackEventsOperationOptions {
    /** None */
    None = "None",
    /** DisableSourceInfoEnrich */
    DisableSourceInfoEnrich = "DisableSourceInfoEnrich"
}

/** Known values of {@link TrackingRecordType} that the service accepts. */
export declare enum KnownTrackingRecordType {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Custom */
    Custom = "Custom",
    /** AS2Message */
    AS2Message = "AS2Message",
    /** AS2MDN */
    AS2MDN = "AS2MDN",
    /** X12Interchange */
    X12Interchange = "X12Interchange",
    /** X12FunctionalGroup */
    X12FunctionalGroup = "X12FunctionalGroup",
    /** X12TransactionSet */
    X12TransactionSet = "X12TransactionSet",
    /** X12InterchangeAcknowledgment */
    X12InterchangeAcknowledgment = "X12InterchangeAcknowledgment",
    /** X12FunctionalGroupAcknowledgment */
    X12FunctionalGroupAcknowledgment = "X12FunctionalGroupAcknowledgment",
    /** X12TransactionSetAcknowledgment */
    X12TransactionSetAcknowledgment = "X12TransactionSetAcknowledgment",
    /** EdifactInterchange */
    EdifactInterchange = "EdifactInterchange",
    /** EdifactFunctionalGroup */
    EdifactFunctionalGroup = "EdifactFunctionalGroup",
    /** EdifactTransactionSet */
    EdifactTransactionSet = "EdifactTransactionSet",
    /** EdifactInterchangeAcknowledgment */
    EdifactInterchangeAcknowledgment = "EdifactInterchangeAcknowledgment",
    /** EdifactFunctionalGroupAcknowledgment */
    EdifactFunctionalGroupAcknowledgment = "EdifactFunctionalGroupAcknowledgment",
    /** EdifactTransactionSetAcknowledgment */
    EdifactTransactionSetAcknowledgment = "EdifactTransactionSetAcknowledgment"
}

/** Known values of {@link TrailingSeparatorPolicy} that the service accepts. */
export declare enum KnownTrailingSeparatorPolicy {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** NotAllowed */
    NotAllowed = "NotAllowed",
    /** Optional */
    Optional = "Optional",
    /** Mandatory */
    Mandatory = "Mandatory"
}

/** Known values of {@link UsageIndicator} that the service accepts. */
export declare enum KnownUsageIndicator {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Test */
    Test = "Test",
    /** Information */
    Information = "Information",
    /** Production */
    Production = "Production"
}

/** Known values of {@link WorkflowProvisioningState} that the service accepts. */
export declare enum KnownWorkflowProvisioningState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Accepted */
    Accepted = "Accepted",
    /** Running */
    Running = "Running",
    /** Ready */
    Ready = "Ready",
    /** Creating */
    Creating = "Creating",
    /** Created */
    Created = "Created",
    /** Deleting */
    Deleting = "Deleting",
    /** Deleted */
    Deleted = "Deleted",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Moving */
    Moving = "Moving",
    /** Updating */
    Updating = "Updating",
    /** Registering */
    Registering = "Registering",
    /** Registered */
    Registered = "Registered",
    /** Unregistering */
    Unregistering = "Unregistering",
    /** Unregistered */
    Unregistered = "Unregistered",
    /** Completed */
    Completed = "Completed",
    /** Renewing */
    Renewing = "Renewing",
    /** Pending */
    Pending = "Pending",
    /** Waiting */
    Waiting = "Waiting",
    /** InProgress */
    InProgress = "InProgress"
}

/** Known values of {@link WorkflowState} that the service accepts. */
export declare enum KnownWorkflowState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Completed */
    Completed = "Completed",
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled",
    /** Deleted */
    Deleted = "Deleted",
    /** Suspended */
    Suspended = "Suspended"
}

/** Known values of {@link WorkflowStatus} that the service accepts. */
export declare enum KnownWorkflowStatus {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Paused */
    Paused = "Paused",
    /** Running */
    Running = "Running",
    /** Waiting */
    Waiting = "Waiting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Skipped */
    Skipped = "Skipped",
    /** Suspended */
    Suspended = "Suspended",
    /** Cancelled */
    Cancelled = "Cancelled",
    /** Failed */
    Failed = "Failed",
    /** Faulted */
    Faulted = "Faulted",
    /** TimedOut */
    TimedOut = "TimedOut",
    /** Aborted */
    Aborted = "Aborted",
    /** Ignored */
    Ignored = "Ignored"
}

/** Known values of {@link WorkflowTriggerProvisioningState} that the service accepts. */
export declare enum KnownWorkflowTriggerProvisioningState {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Accepted */
    Accepted = "Accepted",
    /** Running */
    Running = "Running",
    /** Ready */
    Ready = "Ready",
    /** Creating */
    Creating = "Creating",
    /** Created */
    Created = "Created",
    /** Deleting */
    Deleting = "Deleting",
    /** Deleted */
    Deleted = "Deleted",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Moving */
    Moving = "Moving",
    /** Updating */
    Updating = "Updating",
    /** Registering */
    Registering = "Registering",
    /** Registered */
    Registered = "Registered",
    /** Unregistering */
    Unregistering = "Unregistering",
    /** Unregistered */
    Unregistered = "Unregistered",
    /** Completed */
    Completed = "Completed"
}

/** Known values of {@link WsdlImportMethod} that the service accepts. */
export declare enum KnownWsdlImportMethod {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** SoapToRest */
    SoapToRest = "SoapToRest",
    /** SoapPassThrough */
    SoapPassThrough = "SoapPassThrough"
}

/** Known values of {@link X12CharacterSet} that the service accepts. */
export declare enum KnownX12CharacterSet {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Basic */
    Basic = "Basic",
    /** Extended */
    Extended = "Extended",
    /** UTF8 */
    UTF8 = "UTF8"
}

/** Known values of {@link X12DateFormat} that the service accepts. */
export declare enum KnownX12DateFormat {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Ccyymmdd */
    Ccyymmdd = "CCYYMMDD",
    /** Yymmdd */
    Yymmdd = "YYMMDD"
}

/** Known values of {@link X12TimeFormat} that the service accepts. */
export declare enum KnownX12TimeFormat {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** Hhmm */
    Hhmm = "HHMM",
    /** Hhmmss */
    Hhmmss = "HHMMSS",
    /** HhmmsSdd */
    HhmmsSdd = "HHMMSSdd",
    /** HhmmsSd */
    HhmmsSd = "HHMMSSd"
}

/** The list key vault keys definition. */
export declare interface ListKeyVaultKeysDefinition {
    /** The key vault reference. */
    keyVault: KeyVaultReference;
    /** The skip token. */
    skipToken?: string;
}

export declare class LogicManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the LogicManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription id.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: LogicManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    workflows: Workflows;
    workflowVersions: WorkflowVersions;
    workflowTriggers: WorkflowTriggers;
    workflowVersionTriggers: WorkflowVersionTriggers;
    workflowTriggerHistories: WorkflowTriggerHistories;
    workflowRuns: WorkflowRuns;
    workflowRunActions: WorkflowRunActions;
    workflowRunActionRepetitions: WorkflowRunActionRepetitions;
    workflowRunActionRepetitionsRequestHistories: WorkflowRunActionRepetitionsRequestHistories;
    workflowRunActionRequestHistories: WorkflowRunActionRequestHistories;
    workflowRunActionScopeRepetitions: WorkflowRunActionScopeRepetitions;
    workflowRunOperations: WorkflowRunOperations;
    integrationAccounts: IntegrationAccounts;
    integrationAccountAssemblies: IntegrationAccountAssemblies;
    integrationAccountBatchConfigurations: IntegrationAccountBatchConfigurations;
    integrationAccountSchemas: IntegrationAccountSchemas;
    integrationAccountMaps: IntegrationAccountMaps;
    integrationAccountPartners: IntegrationAccountPartners;
    integrationAccountAgreements: IntegrationAccountAgreements;
    integrationAccountCertificates: IntegrationAccountCertificates;
    integrationAccountSessions: IntegrationAccountSessions;
    integrationServiceEnvironments: IntegrationServiceEnvironments;
    integrationServiceEnvironmentSkus: IntegrationServiceEnvironmentSkus;
    integrationServiceEnvironmentNetworkHealth: IntegrationServiceEnvironmentNetworkHealth;
    integrationServiceEnvironmentManagedApis: IntegrationServiceEnvironmentManagedApis;
    integrationServiceEnvironmentManagedApiOperations: IntegrationServiceEnvironmentManagedApiOperations;
    operations: Operations;
}

/** Optional parameters. */
export declare interface LogicManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** The managed api definition. */
export declare interface ManagedApi extends Resource {
    /** The api resource properties. */
    properties?: ApiResourceProperties;
}

/** The list of managed APIs. */
export declare interface ManagedApiListResult {
    /** The managed APIs. */
    value?: ManagedApi[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Managed service identity properties. */
export declare interface ManagedServiceIdentity {
    /** Type of managed service identity. The type 'SystemAssigned' includes an implicitly created identity. The type 'None' will remove any identities from the resource. */
    type: ManagedServiceIdentityType;
    /**
     * Tenant of managed service identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /**
     * Principal Id of managed service identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /** The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName} */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned** \
 * **None**
 */
export declare type ManagedServiceIdentityType = string;

/**
 * Defines values for MapType. \
 * {@link KnownMapType} can be used interchangeably with MapType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Xslt** \
 * **Xslt20** \
 * **Xslt30** \
 * **Liquid**
 */
export declare type MapType = string;

/**
 * Defines values for MessageFilterType. \
 * {@link KnownMessageFilterType} can be used interchangeably with MessageFilterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Include** \
 * **Exclude**
 */
export declare type MessageFilterType = string;

/** The network configuration. */
export declare interface NetworkConfiguration {
    /** Gets the virtual network address space. */
    virtualNetworkAddressSpace?: string;
    /** The access endpoint. */
    accessEndpoint?: IntegrationServiceEnvironmentAccessEndpoint;
    /** The subnets. */
    subnets?: ResourceReference[];
}

/** AuthenticationPolicy of type Open. */
export declare interface OpenAuthenticationAccessPolicies {
    /** Open authentication policies. */
    policies?: {
        [propertyName: string]: OpenAuthenticationAccessPolicy;
    };
}

/** Open authentication access policy defined by user. */
export declare interface OpenAuthenticationAccessPolicy {
    /** Type of provider for OAuth. */
    type?: OpenAuthenticationProviderType;
    /** The access policy claims. */
    claims?: OpenAuthenticationPolicyClaim[];
}

/** Open authentication policy claim. */
export declare interface OpenAuthenticationPolicyClaim {
    /** The name of the claim. */
    name?: string;
    /** The value of the claim. */
    value?: string;
}

/**
 * Defines values for OpenAuthenticationProviderType. \
 * {@link KnownOpenAuthenticationProviderType} can be used interchangeably with OpenAuthenticationProviderType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AAD**
 */
export declare type OpenAuthenticationProviderType = string;

/** Logic REST API operation */
export declare interface Operation {
    /** Operation: origin */
    origin?: string;
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
    /** The properties. */
    properties?: any;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /** Service provider: Microsoft.Logic */
    provider?: string;
    /** Resource on which the operation is performed: Profile, endpoint, etc. */
    resource?: string;
    /** Operation type: Read, write, delete, etc. */
    operation?: string;
    /** Operation: description. */
    description?: string;
}

/** Result of the request to list Logic operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /** List of Logic operations supported by the Logic resource provider. */
    value?: Operation[];
    /** URL to get the next set of operation list results if there are any. */
    nextLink?: string;
}

/** The operation result definition. */
export declare interface OperationResult extends OperationResultProperties {
    /**
     * Gets the tracking id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackingId?: string;
    /**
     * Gets the inputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inputs?: any;
    /**
     * Gets the link to inputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inputsLink?: ContentLink;
    /**
     * Gets the outputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputs?: any;
    /**
     * Gets the link to outputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputsLink?: ContentLink;
    /**
     * Gets the tracked properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackedProperties?: any;
    /** Gets the retry histories. */
    retryHistory?: RetryHistory[];
    iterationCount?: number;
}

/** The run operation result properties. */
export declare interface OperationResultProperties {
    /** The start time of the workflow scope repetition. */
    startTime?: Date;
    /** The end time of the workflow scope repetition. */
    endTime?: Date;
    /** The correlation properties. */
    correlation?: RunActionCorrelation;
    /** The status of the workflow scope repetition. */
    status?: WorkflowStatus;
    /** The workflow scope repetition code. */
    code?: string;
    /** Anything */
    error?: any;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Logic REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for ParameterType. \
 * {@link KnownParameterType} can be used interchangeably with ParameterType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **String** \
 * **SecureString** \
 * **Int** \
 * **Float** \
 * **Bool** \
 * **Array** \
 * **Object** \
 * **SecureObject**
 */
export declare type ParameterType = string;

/** The integration account partner content. */
export declare interface PartnerContent {
    /** The B2B partner content. */
    b2B?: B2BPartnerContent;
}

/**
 * Defines values for PartnerType. \
 * {@link KnownPartnerType} can be used interchangeably with PartnerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **B2B**
 */
export declare type PartnerType = string;

/**
 * Defines values for RecurrenceFrequency. \
 * {@link KnownRecurrenceFrequency} can be used interchangeably with RecurrenceFrequency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Second** \
 * **Minute** \
 * **Hour** \
 * **Day** \
 * **Week** \
 * **Month** \
 * **Year**
 */
export declare type RecurrenceFrequency = string;

/** The recurrence schedule. */
export declare interface RecurrenceSchedule {
    /** The minutes. */
    minutes?: number[];
    /** The hours. */
    hours?: number[];
    /** The days of the week. */
    weekDays?: DaysOfWeek[];
    /** The month days. */
    monthDays?: number[];
    /** The monthly occurrences. */
    monthlyOccurrences?: RecurrenceScheduleOccurrence[];
}

/** The recurrence schedule occurrence. */
export declare interface RecurrenceScheduleOccurrence {
    /** The day of the week. */
    day?: DayOfWeek;
    /** The occurrence. */
    occurrence?: number;
}

/** The access key regenerate action content. */
export declare interface RegenerateActionParameter {
    /** The key type. */
    keyType?: KeyType_2;
}

/** The workflow run action repetition index. */
export declare interface RepetitionIndex {
    /** The scope. */
    scopeName?: string;
    /** The index. */
    itemIndex: number;
}

/** A request. */
declare interface Request_2 {
    /** A list of all the headers attached to the request. */
    headers?: any;
    /** The destination for the request. */
    uri?: string;
    /** The HTTP method used for the request. */
    method?: string;
}
export { Request_2 as Request }

/** The request history. */
export declare interface RequestHistory extends Resource {
    /** The request history properties. */
    properties?: RequestHistoryProperties;
}

/** The list of workflow request histories. */
export declare interface RequestHistoryListResult {
    /** A list of workflow request histories. */
    value?: RequestHistory[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** The request history. */
export declare interface RequestHistoryProperties {
    /** The time the request started. */
    startTime?: Date;
    /** The time the request ended. */
    endTime?: Date;
    /** The request. */
    request?: Request_2;
    /** The response. */
    response?: Response_2;
}

/** The base resource type. */
export declare interface Resource {
    /**
     * The resource id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Gets the resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Gets the resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource location. */
    location?: string;
    /** The resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The resource reference. */
export declare interface ResourceReference {
    /** The resource id. */
    id?: string;
    /**
     * Gets the resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Gets the resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** A response. */
declare interface Response_2 {
    /** A list of all the headers attached to the response. */
    headers?: any;
    /** The status code of the response. */
    statusCode?: number;
    /** Details on the location of the body content. */
    bodyLink?: ContentLink;
}
export { Response_2 as Response }

/** The retry history. */
export declare interface RetryHistory {
    /** Gets the start time. */
    startTime?: Date;
    /** Gets the end time. */
    endTime?: Date;
    /** Gets the status code. */
    code?: string;
    /** Gets the client request Id. */
    clientRequestId?: string;
    /** Gets the service request Id. */
    serviceRequestId?: string;
    /** Gets the error response. */
    error?: ErrorResponse;
}

/** The workflow run action correlation properties. */
export declare interface RunActionCorrelation extends RunCorrelation {
    /** The action tracking identifier. */
    actionTrackingId?: string;
}

/** The correlation properties. */
export declare interface RunCorrelation {
    /** The client tracking identifier. */
    clientTrackingId?: string;
    /** The client keywords. */
    clientKeywords?: string[];
}

/**
 * Defines values for SchemaType. \
 * {@link KnownSchemaType} can be used interchangeably with SchemaType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Xml**
 */
export declare type SchemaType = string;

/** Defines values for SegmentTerminatorSuffix. */
export declare type SegmentTerminatorSuffix = "NotSpecified" | "None" | "CR" | "LF" | "CRLF";

/** The set trigger state action definition. */
export declare interface SetTriggerStateActionDefinition {
    /** The source. */
    source: WorkflowTriggerReference;
}

/**
 * Defines values for SigningAlgorithm. \
 * {@link KnownSigningAlgorithm} can be used interchangeably with SigningAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Default** \
 * **SHA1** \
 * **SHA2256** \
 * **SHA2384** \
 * **SHA2512**
 */
export declare type SigningAlgorithm = string;

/** The sku type. */
export declare interface Sku {
    /** The name. */
    name: SkuName;
    /** The reference to plan. */
    plan?: ResourceReference;
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Free** \
 * **Shared** \
 * **Basic** \
 * **Standard** \
 * **Premium**
 */
export declare type SkuName = string;

/**
 * Defines values for StatusAnnotation. \
 * {@link KnownStatusAnnotation} can be used interchangeably with StatusAnnotation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Preview** \
 * **Production**
 */
export declare type StatusAnnotation = string;

/** The sub resource type. */
export declare interface SubResource {
    /**
     * The resource id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The swagger custom dynamic list. */
export declare interface SwaggerCustomDynamicList {
    /** The operation id to fetch dynamic schema. */
    operationId?: string;
    /** The built in operation. */
    builtInOperation?: string;
    /** The path to a response property (relative to the response object, not the response body) which contains an array of dynamic value items. */
    itemsPath?: string;
    /** The path to a property which defines the value which should be used. */
    itemValuePath?: string;
    /** The path to an item property which defines the display name of the item. */
    itemTitlePath?: string;
    /** The parameters. */
    parameters?: {
        [propertyName: string]: SwaggerCustomDynamicProperties;
    };
}

/** The swagger custom dynamic properties. */
export declare interface SwaggerCustomDynamicProperties {
    /** The operation id to fetch dynamic schema. */
    operationId?: string;
    /** Json pointer to the dynamic schema on the response body. */
    valuePath?: string;
    /** The operation parameters. */
    parameters?: {
        [propertyName: string]: SwaggerCustomDynamicProperties;
    };
}

/** The swagger custom dynamic schema. */
export declare interface SwaggerCustomDynamicSchema {
    /** The operation id to fetch dynamic schema. */
    operationId?: string;
    /** Json pointer to the dynamic schema on the response body. */
    valuePath?: string;
    /** The operation parameters. */
    parameters?: {
        [propertyName: string]: any;
    };
}

/** The swagger custom dynamic tree. */
export declare interface SwaggerCustomDynamicTree {
    /** The tree settings */
    settings?: SwaggerCustomDynamicTreeSettings;
    /** The tree on-open configuration */
    open?: SwaggerCustomDynamicTreeCommand;
    /** The tree on-browse configuration */
    browse?: SwaggerCustomDynamicTreeCommand;
}

/** The swagger tree command. */
export declare interface SwaggerCustomDynamicTreeCommand {
    /** The path to an item property which defines the display name of the item. */
    operationId?: string;
    /** The path to an item property which defines the display name of the item. */
    itemsPath?: string;
    /** The path to an item property which defines the display name of the item. */
    itemValuePath?: string;
    /** The path to an item property which defines the display name of the item. */
    itemTitlePath?: string;
    /** The path to an item property which defines the display name of the item. */
    itemFullTitlePath?: string;
    /** The path to an item property which defines the display name of the item. */
    itemIsParent?: string;
    /** The path to an item property which defines the display name of the item. */
    selectableFilter?: string;
    /** Dictionary of <SwaggerCustomDynamicTreeParameter> */
    parameters?: {
        [propertyName: string]: SwaggerCustomDynamicTreeParameter;
    };
}

/** The swagger custom dynamic tree parameter. */
export declare interface SwaggerCustomDynamicTreeParameter {
    /** Gets or sets a path to a property in the currently selected item to pass as a value to a parameter for the given operation. */
    selectedItemValuePath?: string;
    /** The parameter value. */
    value?: any;
    /** The parameter reference. */
    parameterReference?: string;
    /** Indicates whether the parameter is required. */
    required?: boolean;
}

/** The swagger custom dynamic tree settings. */
export declare interface SwaggerCustomDynamicTreeSettings {
    /** Indicates whether parent nodes can be selected. */
    canSelectParentNodes?: boolean;
    /** Indicates whether leaf nodes can be selected. */
    canSelectLeafNodes?: boolean;
}

/** The swagger external documentation */
export declare interface SwaggerExternalDocumentation {
    /** The document description. */
    description?: string;
    /** The documentation Uri. */
    uri?: string;
    /** The vendor extensions. */
    extensions?: {
        [propertyName: string]: any;
    };
}

/** The swagger schema. */
export declare interface SwaggerSchema {
    /** The reference. */
    ref?: string;
    /** The type */
    type?: SwaggerSchemaType;
    /** The title. */
    title?: string;
    /** The items schema. */
    items?: SwaggerSchema;
    /** The object properties */
    properties?: {
        [propertyName: string]: SwaggerSchema;
    };
    /** The additional properties. */
    additionalProperties?: any;
    /** The object required properties. */
    required?: string[];
    /** The maximum number of allowed properties. */
    maxProperties?: number;
    /** The minimum number of allowed properties. */
    minProperties?: number;
    /** The schemas which must pass validation when this schema is used. */
    allOf?: SwaggerSchema[];
    /** The discriminator. */
    discriminator?: string;
    /** Indicates whether this property must be present in the a request. */
    readOnly?: boolean;
    /** The xml representation format for a property. */
    xml?: SwaggerXml;
    /** The external documentation. */
    externalDocs?: SwaggerExternalDocumentation;
    /** The example value. */
    example?: any;
    /** Indicates the notification url extension. If this is set, the property's value should be a callback url for a webhook. */
    notificationUrlExtension?: boolean;
    /** The dynamic schema configuration. */
    dynamicSchemaOld?: SwaggerCustomDynamicSchema;
    /** The dynamic schema configuration. */
    dynamicSchemaNew?: SwaggerCustomDynamicProperties;
    /** The dynamic list. */
    dynamicListNew?: SwaggerCustomDynamicList;
    /** The dynamic values tree configuration. */
    dynamicTree?: SwaggerCustomDynamicTree;
}

/**
 * Defines values for SwaggerSchemaType. \
 * {@link KnownSwaggerSchemaType} can be used interchangeably with SwaggerSchemaType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String** \
 * **Number** \
 * **Integer** \
 * **Boolean** \
 * **Array** \
 * **File** \
 * **Object** \
 * **Null**
 */
export declare type SwaggerSchemaType = string;

/** The Swagger XML. */
export declare interface SwaggerXml {
    /** The xml element or attribute name. */
    name?: string;
    /** The xml namespace. */
    namespace?: string;
    /** The name prefix. */
    prefix?: string;
    /** Indicates whether the property should be an attribute instead of an element. */
    attribute?: boolean;
    /** Indicates whether the array elements are wrapped in a container element. */
    wrapped?: boolean;
    /** The vendor extensions. */
    extensions?: {
        [propertyName: string]: any;
    };
}

/**
 * Defines values for TrackEventsOperationOptions. \
 * {@link KnownTrackEventsOperationOptions} can be used interchangeably with TrackEventsOperationOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **DisableSourceInfoEnrich**
 */
export declare type TrackEventsOperationOptions = string;

/** The tracking event. */
export declare interface TrackingEvent {
    /** The event level. */
    eventLevel: EventLevel;
    /** The event time. */
    eventTime: Date;
    /** The record type. */
    recordType: TrackingRecordType;
    /** The record. */
    record?: any;
    /** The error. */
    error?: TrackingEventErrorInfo;
}

/** The tracking event error info. */
export declare interface TrackingEventErrorInfo {
    /** The message. */
    message?: string;
    /** The code. */
    code?: string;
}

/** The tracking events definition. */
export declare interface TrackingEventsDefinition {
    /** The source type. */
    sourceType: string;
    /** The track events options. */
    trackEventsOptions?: TrackEventsOperationOptions;
    /** The events. */
    events: TrackingEvent[];
}

/**
 * Defines values for TrackingRecordType. \
 * {@link KnownTrackingRecordType} can be used interchangeably with TrackingRecordType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Custom** \
 * **AS2Message** \
 * **AS2MDN** \
 * **X12Interchange** \
 * **X12FunctionalGroup** \
 * **X12TransactionSet** \
 * **X12InterchangeAcknowledgment** \
 * **X12FunctionalGroupAcknowledgment** \
 * **X12TransactionSetAcknowledgment** \
 * **EdifactInterchange** \
 * **EdifactFunctionalGroup** \
 * **EdifactTransactionSet** \
 * **EdifactInterchangeAcknowledgment** \
 * **EdifactFunctionalGroupAcknowledgment** \
 * **EdifactTransactionSetAcknowledgment**
 */
export declare type TrackingRecordType = string;

/**
 * Defines values for TrailingSeparatorPolicy. \
 * {@link KnownTrailingSeparatorPolicy} can be used interchangeably with TrailingSeparatorPolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **NotAllowed** \
 * **Optional** \
 * **Mandatory**
 */
export declare type TrailingSeparatorPolicy = string;

/**
 * Defines values for UsageIndicator. \
 * {@link KnownUsageIndicator} can be used interchangeably with UsageIndicator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Test** \
 * **Information** \
 * **Production**
 */
export declare type UsageIndicator = string;

/** User Assigned identity properties. */
export declare interface UserAssignedIdentity {
    /**
     * Principal Id of user assigned identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * Client Id of user assigned identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** The workflow type. */
export declare interface Workflow extends Resource {
    /** Managed service identity properties. */
    identity?: ManagedServiceIdentity;
    /**
     * Gets the provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkflowProvisioningState;
    /**
     * Gets the created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * Gets the changed time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changedTime?: Date;
    /** The state. */
    state?: WorkflowState;
    /**
     * Gets the version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * Gets the access endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accessEndpoint?: string;
    /** The endpoints configuration. */
    endpointsConfiguration?: FlowEndpointsConfiguration;
    /** The access control configuration. */
    accessControl?: FlowAccessControlConfiguration;
    /**
     * The sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sku?: Sku;
    /** The integration account. */
    integrationAccount?: ResourceReference;
    /** The integration service environment. */
    integrationServiceEnvironment?: ResourceReference;
    /** The definition. */
    definition?: any;
    /** The parameters. */
    parameters?: {
        [propertyName: string]: WorkflowParameter;
    };
}

/** The workflow filter. */
export declare interface WorkflowFilter {
    /** The state of workflows. */
    state?: WorkflowState;
}

/** The list of workflows. */
export declare interface WorkflowListResult {
    /** The list of workflows. */
    value?: Workflow[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** The workflow output parameter. */
export declare interface WorkflowOutputParameter extends WorkflowParameter {
    /**
     * Gets the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: any;
}

/** The workflow parameters. */
export declare interface WorkflowParameter {
    /** The type. */
    type?: ParameterType;
    /** The value. */
    value?: any;
    /** The metadata. */
    metadata?: any;
    /** The description. */
    description?: string;
}

/**
 * Defines values for WorkflowProvisioningState. \
 * {@link KnownWorkflowProvisioningState} can be used interchangeably with WorkflowProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Accepted** \
 * **Running** \
 * **Ready** \
 * **Creating** \
 * **Created** \
 * **Deleting** \
 * **Deleted** \
 * **Canceled** \
 * **Failed** \
 * **Succeeded** \
 * **Moving** \
 * **Updating** \
 * **Registering** \
 * **Registered** \
 * **Unregistering** \
 * **Unregistered** \
 * **Completed** \
 * **Renewing** \
 * **Pending** \
 * **Waiting** \
 * **InProgress**
 */
export declare type WorkflowProvisioningState = string;

/** The workflow reference. */
export declare interface WorkflowReference extends ResourceReference {
}

/** The workflow run. */
export declare interface WorkflowRun extends SubResource {
    /**
     * Gets the workflow run name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Gets the workflow run type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Gets the wait end time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly waitEndTime?: Date;
    /**
     * Gets the start time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * Gets the end time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * Gets the status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: WorkflowStatus;
    /**
     * Gets the code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Gets the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: any;
    /**
     * Gets the correlation id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly correlationId?: string;
    /** The run correlation. */
    correlation?: Correlation;
    /**
     * Gets the reference to workflow version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workflow?: ResourceReference;
    /**
     * Gets the fired trigger.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trigger?: WorkflowRunTrigger;
    /**
     * Gets the outputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputs?: {
        [propertyName: string]: WorkflowOutputParameter;
    };
    /**
     * Gets the response of the flow run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly response?: WorkflowRunTrigger;
}

/** The workflow run action. */
export declare interface WorkflowRunAction extends SubResource {
    /**
     * Gets the workflow run action name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Gets the workflow run action type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Gets the start time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * Gets the end time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * Gets the status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: WorkflowStatus;
    /**
     * Gets the code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Gets the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: any;
    /**
     * Gets the tracking id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackingId?: string;
    /** The correlation properties. */
    correlation?: RunActionCorrelation;
    /**
     * Gets the link to inputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inputsLink?: ContentLink;
    /**
     * Gets the link to outputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputsLink?: ContentLink;
    /**
     * Gets the tracked properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackedProperties?: any;
    /** Gets the retry histories. */
    retryHistory?: RetryHistory[];
}

/** The workflow run action filter. */
export declare interface WorkflowRunActionFilter {
    /** The status of workflow run action. */
    status?: WorkflowStatus;
}

/** The list of workflow run actions. */
export declare interface WorkflowRunActionListResult {
    /** A list of workflow run actions. */
    value?: WorkflowRunAction[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** The workflow run action repetition definition. */
export declare interface WorkflowRunActionRepetitionDefinition extends Resource {
    /** The start time of the workflow scope repetition. */
    startTime?: Date;
    /** The end time of the workflow scope repetition. */
    endTime?: Date;
    /** The correlation properties. */
    correlation?: RunActionCorrelation;
    /** The status of the workflow scope repetition. */
    status?: WorkflowStatus;
    /** The workflow scope repetition code. */
    code?: string;
    /** Anything */
    error?: any;
    /**
     * Gets the tracking id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackingId?: string;
    /**
     * Gets the inputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inputs?: any;
    /**
     * Gets the link to inputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inputsLink?: ContentLink;
    /**
     * Gets the outputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputs?: any;
    /**
     * Gets the link to outputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputsLink?: ContentLink;
    /**
     * Gets the tracked properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackedProperties?: any;
    /** Gets the retry histories. */
    retryHistory?: RetryHistory[];
    iterationCount?: number;
    /** The repetition indexes. */
    repetitionIndexes?: RepetitionIndex[];
}

/** A collection of workflow run action repetitions. */
export declare interface WorkflowRunActionRepetitionDefinitionCollection {
    /** The link used to get the next page of recommendations. */
    nextLink?: string;
    value?: WorkflowRunActionRepetitionDefinition[];
}

/** The workflow run action repetition properties definition. */
export declare interface WorkflowRunActionRepetitionProperties extends OperationResult {
    /** The repetition indexes. */
    repetitionIndexes?: RepetitionIndex[];
}

/** Interface representing a WorkflowRunActionRepetitions. */
export declare interface WorkflowRunActionRepetitions {
    /**
     * Get all of a workflow run action repetitions.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workflowName: string, runName: string, actionName: string, options?: WorkflowRunActionRepetitionsListOptionalParams): PagedAsyncIterableIterator<WorkflowRunActionRepetitionDefinition>;
    /**
     * Lists a workflow run expression trace.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param repetitionName The workflow repetition.
     * @param options The options parameters.
     */
    listExpressionTraces(resourceGroupName: string, workflowName: string, runName: string, actionName: string, repetitionName: string, options?: WorkflowRunActionRepetitionsListExpressionTracesOptionalParams): PagedAsyncIterableIterator<ExpressionRoot>;
    /**
     * Get a workflow run action repetition.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param repetitionName The workflow repetition.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, runName: string, actionName: string, repetitionName: string, options?: WorkflowRunActionRepetitionsGetOptionalParams): Promise<WorkflowRunActionRepetitionsGetResponse>;
}

/** Optional parameters. */
export declare interface WorkflowRunActionRepetitionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowRunActionRepetitionsGetResponse = WorkflowRunActionRepetitionDefinition;

/** Optional parameters. */
export declare interface WorkflowRunActionRepetitionsListExpressionTracesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listExpressionTraces operation. */
export declare type WorkflowRunActionRepetitionsListExpressionTracesResponse = ExpressionTraces;

/** Optional parameters. */
export declare interface WorkflowRunActionRepetitionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkflowRunActionRepetitionsListResponse = WorkflowRunActionRepetitionDefinitionCollection;

/** Interface representing a WorkflowRunActionRepetitionsRequestHistories. */
export declare interface WorkflowRunActionRepetitionsRequestHistories {
    /**
     * List a workflow run repetition request history.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param repetitionName The workflow repetition.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workflowName: string, runName: string, actionName: string, repetitionName: string, options?: WorkflowRunActionRepetitionsRequestHistoriesListOptionalParams): PagedAsyncIterableIterator<RequestHistory>;
    /**
     * Gets a workflow run repetition request history.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param repetitionName The workflow repetition.
     * @param requestHistoryName The request history name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, runName: string, actionName: string, repetitionName: string, requestHistoryName: string, options?: WorkflowRunActionRepetitionsRequestHistoriesGetOptionalParams): Promise<WorkflowRunActionRepetitionsRequestHistoriesGetResponse>;
}

/** Optional parameters. */
export declare interface WorkflowRunActionRepetitionsRequestHistoriesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowRunActionRepetitionsRequestHistoriesGetResponse = RequestHistory;

/** Optional parameters. */
export declare interface WorkflowRunActionRepetitionsRequestHistoriesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkflowRunActionRepetitionsRequestHistoriesListNextResponse = RequestHistoryListResult;

/** Optional parameters. */
export declare interface WorkflowRunActionRepetitionsRequestHistoriesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkflowRunActionRepetitionsRequestHistoriesListResponse = RequestHistoryListResult;

/** Interface representing a WorkflowRunActionRequestHistories. */
export declare interface WorkflowRunActionRequestHistories {
    /**
     * List a workflow run request history.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workflowName: string, runName: string, actionName: string, options?: WorkflowRunActionRequestHistoriesListOptionalParams): PagedAsyncIterableIterator<RequestHistory>;
    /**
     * Gets a workflow run request history.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param requestHistoryName The request history name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, runName: string, actionName: string, requestHistoryName: string, options?: WorkflowRunActionRequestHistoriesGetOptionalParams): Promise<WorkflowRunActionRequestHistoriesGetResponse>;
}

/** Optional parameters. */
export declare interface WorkflowRunActionRequestHistoriesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowRunActionRequestHistoriesGetResponse = RequestHistory;

/** Optional parameters. */
export declare interface WorkflowRunActionRequestHistoriesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkflowRunActionRequestHistoriesListNextResponse = RequestHistoryListResult;

/** Optional parameters. */
export declare interface WorkflowRunActionRequestHistoriesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkflowRunActionRequestHistoriesListResponse = RequestHistoryListResult;

/** Interface representing a WorkflowRunActions. */
export declare interface WorkflowRunActions {
    /**
     * Gets a list of workflow run actions.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workflowName: string, runName: string, options?: WorkflowRunActionsListOptionalParams): PagedAsyncIterableIterator<WorkflowRunAction>;
    /**
     * Lists a workflow run expression trace.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param options The options parameters.
     */
    listExpressionTraces(resourceGroupName: string, workflowName: string, runName: string, actionName: string, options?: WorkflowRunActionsListExpressionTracesOptionalParams): PagedAsyncIterableIterator<ExpressionRoot>;
    /**
     * Gets a workflow run action.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, runName: string, actionName: string, options?: WorkflowRunActionsGetOptionalParams): Promise<WorkflowRunActionsGetResponse>;
}

/** Interface representing a WorkflowRunActionScopeRepetitions. */
export declare interface WorkflowRunActionScopeRepetitions {
    /**
     * List the workflow run action scoped repetitions.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workflowName: string, runName: string, actionName: string, options?: WorkflowRunActionScopeRepetitionsListOptionalParams): PagedAsyncIterableIterator<WorkflowRunActionRepetitionDefinition>;
    /**
     * Get a workflow run action scoped repetition.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param actionName The workflow action name.
     * @param repetitionName The workflow repetition.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, runName: string, actionName: string, repetitionName: string, options?: WorkflowRunActionScopeRepetitionsGetOptionalParams): Promise<WorkflowRunActionScopeRepetitionsGetResponse>;
}

/** Optional parameters. */
export declare interface WorkflowRunActionScopeRepetitionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowRunActionScopeRepetitionsGetResponse = WorkflowRunActionRepetitionDefinition;

/** Optional parameters. */
export declare interface WorkflowRunActionScopeRepetitionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkflowRunActionScopeRepetitionsListResponse = WorkflowRunActionRepetitionDefinitionCollection;

/** Optional parameters. */
export declare interface WorkflowRunActionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowRunActionsGetResponse = WorkflowRunAction;

/** Optional parameters. */
export declare interface WorkflowRunActionsListExpressionTracesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listExpressionTraces operation. */
export declare type WorkflowRunActionsListExpressionTracesResponse = ExpressionTraces;

/** Optional parameters. */
export declare interface WorkflowRunActionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkflowRunActionsListNextResponse = WorkflowRunActionListResult;

/** Optional parameters. */
export declare interface WorkflowRunActionsListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. Options for filters include: Status. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type WorkflowRunActionsListResponse = WorkflowRunActionListResult;

/** The workflow run filter. */
export declare interface WorkflowRunFilter {
    /** The status of workflow run. */
    status?: WorkflowStatus;
}

/** The list of workflow runs. */
export declare interface WorkflowRunListResult {
    /** A list of workflow runs. */
    value?: WorkflowRun[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Interface representing a WorkflowRunOperations. */
export declare interface WorkflowRunOperations {
    /**
     * Gets an operation for a run.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param operationId The workflow operation id.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, runName: string, operationId: string, options?: WorkflowRunOperationsGetOptionalParams): Promise<WorkflowRunOperationsGetResponse>;
}

/** Optional parameters. */
export declare interface WorkflowRunOperationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowRunOperationsGetResponse = WorkflowRun;

/** Interface representing a WorkflowRuns. */
export declare interface WorkflowRuns {
    /**
     * Gets a list of workflow runs.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workflowName: string, options?: WorkflowRunsListOptionalParams): PagedAsyncIterableIterator<WorkflowRun>;
    /**
     * Gets a workflow run.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, runName: string, options?: WorkflowRunsGetOptionalParams): Promise<WorkflowRunsGetResponse>;
    /**
     * Cancels a workflow run.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param runName The workflow run name.
     * @param options The options parameters.
     */
    cancel(resourceGroupName: string, workflowName: string, runName: string, options?: WorkflowRunsCancelOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkflowRunsCancelOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkflowRunsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowRunsGetResponse = WorkflowRun;

/** Optional parameters. */
export declare interface WorkflowRunsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkflowRunsListNextResponse = WorkflowRunListResult;

/** Optional parameters. */
export declare interface WorkflowRunsListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. Options for filters include: Status, StartTime, and ClientTrackingId. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type WorkflowRunsListResponse = WorkflowRunListResult;

/** The workflow run trigger. */
export declare interface WorkflowRunTrigger {
    /**
     * Gets the name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Gets the inputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inputs?: any;
    /**
     * Gets the link to inputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inputsLink?: ContentLink;
    /**
     * Gets the outputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputs?: any;
    /**
     * Gets the link to outputs.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputsLink?: ContentLink;
    /**
     * Gets the scheduled time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scheduledTime?: Date;
    /**
     * Gets the start time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * Gets the end time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * Gets the tracking id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackingId?: string;
    /** The run correlation. */
    correlation?: Correlation;
    /**
     * Gets the code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Gets the status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: WorkflowStatus;
    /**
     * Gets the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: any;
    /**
     * Gets the tracked properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackedProperties?: any;
}

/** Interface representing a Workflows. */
export declare interface Workflows {
    /**
     * Gets a list of workflows by subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: WorkflowsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Workflow>;
    /**
     * Gets a list of workflows by resource group.
     * @param resourceGroupName The resource group name.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: WorkflowsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Workflow>;
    /**
     * Gets a workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, options?: WorkflowsGetOptionalParams): Promise<WorkflowsGetResponse>;
    /**
     * Creates or updates a workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param workflow The workflow.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workflowName: string, workflow: Workflow, options?: WorkflowsCreateOrUpdateOptionalParams): Promise<WorkflowsCreateOrUpdateResponse>;
    /**
     * Updates a workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workflowName: string, options?: WorkflowsUpdateOptionalParams): Promise<WorkflowsUpdateResponse>;
    /**
     * Deletes a workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workflowName: string, options?: WorkflowsDeleteOptionalParams): Promise<void>;
    /**
     * Disables a workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param options The options parameters.
     */
    disable(resourceGroupName: string, workflowName: string, options?: WorkflowsDisableOptionalParams): Promise<void>;
    /**
     * Enables a workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param options The options parameters.
     */
    enable(resourceGroupName: string, workflowName: string, options?: WorkflowsEnableOptionalParams): Promise<void>;
    /**
     * Generates the upgraded definition for a workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param parameters Parameters for generating an upgraded definition.
     * @param options The options parameters.
     */
    generateUpgradedDefinition(resourceGroupName: string, workflowName: string, parameters: GenerateUpgradedDefinitionParameters, options?: WorkflowsGenerateUpgradedDefinitionOptionalParams): Promise<WorkflowsGenerateUpgradedDefinitionResponse>;
    /**
     * Get the workflow callback Url.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param listCallbackUrl Which callback url to list.
     * @param options The options parameters.
     */
    listCallbackUrl(resourceGroupName: string, workflowName: string, listCallbackUrl: GetCallbackUrlParameters, options?: WorkflowsListCallbackUrlOptionalParams): Promise<WorkflowsListCallbackUrlResponse>;
    /**
     * Gets an OpenAPI definition for the workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param options The options parameters.
     */
    listSwagger(resourceGroupName: string, workflowName: string, options?: WorkflowsListSwaggerOptionalParams): Promise<WorkflowsListSwaggerResponse>;
    /**
     * Moves an existing workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param move The workflow to move.
     * @param options The options parameters.
     */
    beginMove(resourceGroupName: string, workflowName: string, move: WorkflowReference, options?: WorkflowsMoveOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Moves an existing workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param move The workflow to move.
     * @param options The options parameters.
     */
    beginMoveAndWait(resourceGroupName: string, workflowName: string, move: WorkflowReference, options?: WorkflowsMoveOptionalParams): Promise<void>;
    /**
     * Regenerates the callback URL access key for request triggers.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param keyType The access key type.
     * @param options The options parameters.
     */
    regenerateAccessKey(resourceGroupName: string, workflowName: string, keyType: RegenerateActionParameter, options?: WorkflowsRegenerateAccessKeyOptionalParams): Promise<void>;
    /**
     * Validates the workflow.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param validate The workflow.
     * @param options The options parameters.
     */
    validateByResourceGroup(resourceGroupName: string, workflowName: string, validate: Workflow, options?: WorkflowsValidateByResourceGroupOptionalParams): Promise<void>;
    /**
     * Validates the workflow definition.
     * @param resourceGroupName The resource group name.
     * @param location The workflow location.
     * @param workflowName The workflow name.
     * @param validate The workflow.
     * @param options The options parameters.
     */
    validateByLocation(resourceGroupName: string, location: string, workflowName: string, validate: Workflow, options?: WorkflowsValidateByLocationOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkflowsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkflowsCreateOrUpdateResponse = Workflow;

/** Optional parameters. */
export declare interface WorkflowsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkflowsDisableOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkflowsEnableOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkflowsGenerateUpgradedDefinitionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the generateUpgradedDefinition operation. */
export declare type WorkflowsGenerateUpgradedDefinitionResponse = {
    /** The parsed response body. */
    body: any;
};

/** Optional parameters. */
export declare interface WorkflowsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowsGetResponse = Workflow;

/** Optional parameters. */
export declare interface WorkflowsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type WorkflowsListByResourceGroupNextResponse = WorkflowListResult;

/** Optional parameters. */
export declare interface WorkflowsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. */
    filter?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type WorkflowsListByResourceGroupResponse = WorkflowListResult;

/** Optional parameters. */
export declare interface WorkflowsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type WorkflowsListBySubscriptionNextResponse = WorkflowListResult;

/** Optional parameters. */
export declare interface WorkflowsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. */
    filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type WorkflowsListBySubscriptionResponse = WorkflowListResult;

/** Optional parameters. */
export declare interface WorkflowsListCallbackUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listCallbackUrl operation. */
export declare type WorkflowsListCallbackUrlResponse = WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export declare interface WorkflowsListSwaggerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSwagger operation. */
export declare type WorkflowsListSwaggerResponse = {
    /** The parsed response body. */
    body: any;
};

/** Optional parameters. */
export declare interface WorkflowsMoveOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkflowsRegenerateAccessKeyOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for WorkflowState. \
 * {@link KnownWorkflowState} can be used interchangeably with WorkflowState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Completed** \
 * **Enabled** \
 * **Disabled** \
 * **Deleted** \
 * **Suspended**
 */
export declare type WorkflowState = string;

/**
 * Defines values for WorkflowStatus. \
 * {@link KnownWorkflowStatus} can be used interchangeably with WorkflowStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Paused** \
 * **Running** \
 * **Waiting** \
 * **Succeeded** \
 * **Skipped** \
 * **Suspended** \
 * **Cancelled** \
 * **Failed** \
 * **Faulted** \
 * **TimedOut** \
 * **Aborted** \
 * **Ignored**
 */
export declare type WorkflowStatus = string;

/** Optional parameters. */
export declare interface WorkflowsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type WorkflowsUpdateResponse = Workflow;

/** Optional parameters. */
export declare interface WorkflowsValidateByLocationOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkflowsValidateByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** The workflow trigger. */
export declare interface WorkflowTrigger extends SubResource {
    /**
     * Gets the workflow trigger name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Gets the workflow trigger type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Gets the provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkflowTriggerProvisioningState;
    /**
     * Gets the created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * Gets the changed time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changedTime?: Date;
    /**
     * Gets the state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: WorkflowState;
    /**
     * Gets the status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: WorkflowStatus;
    /**
     * Gets the last execution time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastExecutionTime?: Date;
    /**
     * Gets the next execution time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextExecutionTime?: Date;
    /**
     * Gets the workflow trigger recurrence.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly recurrence?: WorkflowTriggerRecurrence;
    /**
     * Gets the reference to workflow.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workflow?: ResourceReference;
}

/** The workflow trigger callback URL. */
export declare interface WorkflowTriggerCallbackUrl {
    /**
     * Gets the workflow trigger callback URL.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
    /**
     * Gets the workflow trigger callback URL HTTP method.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly method?: string;
    /**
     * Gets the workflow trigger callback URL base path.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly basePath?: string;
    /**
     * Gets the workflow trigger callback URL relative path.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly relativePath?: string;
    /** Gets the workflow trigger callback URL relative path parameters. */
    relativePathParameters?: string[];
    /** Gets the workflow trigger callback URL query parameters. */
    queries?: WorkflowTriggerListCallbackUrlQueries;
}

/** The workflow trigger filter. */
export declare interface WorkflowTriggerFilter {
    /** The state of workflow trigger. */
    state?: WorkflowState;
}

/** Interface representing a WorkflowTriggerHistories. */
export declare interface WorkflowTriggerHistories {
    /**
     * Gets a list of workflow trigger histories.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param triggerName The workflow trigger name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workflowName: string, triggerName: string, options?: WorkflowTriggerHistoriesListOptionalParams): PagedAsyncIterableIterator<WorkflowTriggerHistory>;
    /**
     * Gets a workflow trigger history.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param triggerName The workflow trigger name.
     * @param historyName The workflow trigger history name. Corresponds to the run name for triggers that
     *                    resulted in a run.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, triggerName: string, historyName: string, options?: WorkflowTriggerHistoriesGetOptionalParams): Promise<WorkflowTriggerHistoriesGetResponse>;
    /**
     * Resubmits a workflow run based on the trigger history.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param triggerName The workflow trigger name.
     * @param historyName The workflow trigger history name. Corresponds to the run name for triggers that
     *                    resulted in a run.
     * @param options The options parameters.
     */
    resubmit(resourceGroupName: string, workflowName: string, triggerName: string, historyName: string, options?: WorkflowTriggerHistoriesResubmitOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkflowTriggerHistoriesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowTriggerHistoriesGetResponse = WorkflowTriggerHistory;

/** Optional parameters. */
export declare interface WorkflowTriggerHistoriesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkflowTriggerHistoriesListNextResponse = WorkflowTriggerHistoryListResult;

/** Optional parameters. */
export declare interface WorkflowTriggerHistoriesListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. Options for filters include: Status, StartTime, and ClientTrackingId. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type WorkflowTriggerHistoriesListResponse = WorkflowTriggerHistoryListResult;

/** Optional parameters. */
export declare interface WorkflowTriggerHistoriesResubmitOptionalParams extends coreClient.OperationOptions {
}

/** The workflow trigger history. */
export declare interface WorkflowTriggerHistory extends SubResource {
    /**
     * Gets the workflow trigger history name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Gets the workflow trigger history type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Gets the start time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * Gets the end time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * The scheduled time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scheduledTime?: Date;
    /**
     * Gets the status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: WorkflowStatus;
    /**
     * Gets the code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Gets the error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: any;
    /**
     * Gets the tracking id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly trackingId?: string;
    /** The run correlation. */
    correlation?: Correlation;
    /**
     * Gets the link to input parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly inputsLink?: ContentLink;
    /**
     * Gets the link to output parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly outputsLink?: ContentLink;
    /**
     * The value indicating whether trigger was fired.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fired?: boolean;
    /**
     * Gets the reference to workflow run.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly run?: ResourceReference;
}

/** The workflow trigger history filter. */
export declare interface WorkflowTriggerHistoryFilter {
    /** The status of workflow trigger history. */
    status?: WorkflowStatus;
}

/** The list of workflow trigger histories. */
export declare interface WorkflowTriggerHistoryListResult {
    /** A list of workflow trigger histories. */
    value?: WorkflowTriggerHistory[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Gets the workflow trigger callback URL query parameters. */
export declare interface WorkflowTriggerListCallbackUrlQueries {
    /** The api version. */
    apiVersion?: string;
    /** The SAS permissions. */
    sp?: string;
    /** The SAS version. */
    sv?: string;
    /** The SAS signature. */
    sig?: string;
    /** The SAS timestamp. */
    se?: string;
}

/** The list of workflow triggers. */
export declare interface WorkflowTriggerListResult {
    /** A list of workflow triggers. */
    value?: WorkflowTrigger[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/**
 * Defines values for WorkflowTriggerProvisioningState. \
 * {@link KnownWorkflowTriggerProvisioningState} can be used interchangeably with WorkflowTriggerProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Accepted** \
 * **Running** \
 * **Ready** \
 * **Creating** \
 * **Created** \
 * **Deleting** \
 * **Deleted** \
 * **Canceled** \
 * **Failed** \
 * **Succeeded** \
 * **Moving** \
 * **Updating** \
 * **Registering** \
 * **Registered** \
 * **Unregistering** \
 * **Unregistered** \
 * **Completed**
 */
export declare type WorkflowTriggerProvisioningState = string;

/** The workflow trigger recurrence. */
export declare interface WorkflowTriggerRecurrence {
    /** The frequency. */
    frequency?: RecurrenceFrequency;
    /** The interval. */
    interval?: number;
    /** The start time. */
    startTime?: string;
    /** The end time. */
    endTime?: string;
    /** The time zone. */
    timeZone?: string;
    /** The recurrence schedule. */
    schedule?: RecurrenceSchedule;
}

/** The workflow trigger reference. */
export declare interface WorkflowTriggerReference extends ResourceReference {
    /** The workflow name. */
    flowName?: string;
    /** The workflow trigger name. */
    triggerName?: string;
}

/** Interface representing a WorkflowTriggers. */
export declare interface WorkflowTriggers {
    /**
     * Gets a list of workflow triggers.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workflowName: string, options?: WorkflowTriggersListOptionalParams): PagedAsyncIterableIterator<WorkflowTrigger>;
    /**
     * Gets a workflow trigger.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param triggerName The workflow trigger name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, triggerName: string, options?: WorkflowTriggersGetOptionalParams): Promise<WorkflowTriggersGetResponse>;
    /**
     * Resets a workflow trigger.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param triggerName The workflow trigger name.
     * @param options The options parameters.
     */
    reset(resourceGroupName: string, workflowName: string, triggerName: string, options?: WorkflowTriggersResetOptionalParams): Promise<void>;
    /**
     * Runs a workflow trigger.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param triggerName The workflow trigger name.
     * @param options The options parameters.
     */
    run(resourceGroupName: string, workflowName: string, triggerName: string, options?: WorkflowTriggersRunOptionalParams): Promise<void>;
    /**
     * Get the trigger schema as JSON.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param triggerName The workflow trigger name.
     * @param options The options parameters.
     */
    getSchemaJson(resourceGroupName: string, workflowName: string, triggerName: string, options?: WorkflowTriggersGetSchemaJsonOptionalParams): Promise<WorkflowTriggersGetSchemaJsonResponse>;
    /**
     * Sets the state of a workflow trigger.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param triggerName The workflow trigger name.
     * @param setState The workflow trigger state.
     * @param options The options parameters.
     */
    setState(resourceGroupName: string, workflowName: string, triggerName: string, setState: SetTriggerStateActionDefinition, options?: WorkflowTriggersSetStateOptionalParams): Promise<void>;
    /**
     * Get the callback URL for a workflow trigger.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param triggerName The workflow trigger name.
     * @param options The options parameters.
     */
    listCallbackUrl(resourceGroupName: string, workflowName: string, triggerName: string, options?: WorkflowTriggersListCallbackUrlOptionalParams): Promise<WorkflowTriggersListCallbackUrlResponse>;
}

/** Optional parameters. */
export declare interface WorkflowTriggersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowTriggersGetResponse = WorkflowTrigger;

/** Optional parameters. */
export declare interface WorkflowTriggersGetSchemaJsonOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSchemaJson operation. */
export declare type WorkflowTriggersGetSchemaJsonResponse = JsonSchema;

/** Optional parameters. */
export declare interface WorkflowTriggersListCallbackUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listCallbackUrl operation. */
export declare type WorkflowTriggersListCallbackUrlResponse = WorkflowTriggerCallbackUrl;

/** Optional parameters. */
export declare interface WorkflowTriggersListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkflowTriggersListNextResponse = WorkflowTriggerListResult;

/** Optional parameters. */
export declare interface WorkflowTriggersListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
    /** The filter to apply on the operation. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type WorkflowTriggersListResponse = WorkflowTriggerListResult;

/** Optional parameters. */
export declare interface WorkflowTriggersResetOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkflowTriggersRunOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkflowTriggersSetStateOptionalParams extends coreClient.OperationOptions {
}

/** The workflow version. */
export declare interface WorkflowVersion extends Resource {
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkflowProvisioningState;
    /**
     * Gets the created time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * Gets the changed time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly changedTime?: Date;
    /** The state. */
    state?: WorkflowState;
    /**
     * Gets the version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * Gets the access endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accessEndpoint?: string;
    /** The endpoints configuration. */
    endpointsConfiguration?: FlowEndpointsConfiguration;
    /** The access control configuration. */
    accessControl?: FlowAccessControlConfiguration;
    /**
     * The sku.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sku?: Sku;
    /** The integration account. */
    integrationAccount?: ResourceReference;
    /** The definition. */
    definition?: any;
    /** The parameters. */
    parameters?: {
        [propertyName: string]: WorkflowParameter;
    };
}

/** The list of workflow versions. */
export declare interface WorkflowVersionListResult {
    /** A list of workflow versions. */
    value?: WorkflowVersion[];
    /** The URL to get the next set of results. */
    nextLink?: string;
}

/** Interface representing a WorkflowVersions. */
export declare interface WorkflowVersions {
    /**
     * Gets a list of workflow versions.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workflowName: string, options?: WorkflowVersionsListOptionalParams): PagedAsyncIterableIterator<WorkflowVersion>;
    /**
     * Gets a workflow version.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param versionId The workflow versionId.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workflowName: string, versionId: string, options?: WorkflowVersionsGetOptionalParams): Promise<WorkflowVersionsGetResponse>;
}

/** Optional parameters. */
export declare interface WorkflowVersionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkflowVersionsGetResponse = WorkflowVersion;

/** Optional parameters. */
export declare interface WorkflowVersionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkflowVersionsListNextResponse = WorkflowVersionListResult;

/** Optional parameters. */
export declare interface WorkflowVersionsListOptionalParams extends coreClient.OperationOptions {
    /** The number of items to be included in the result. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type WorkflowVersionsListResponse = WorkflowVersionListResult;

/** Interface representing a WorkflowVersionTriggers. */
export declare interface WorkflowVersionTriggers {
    /**
     * Get the callback url for a trigger of a workflow version.
     * @param resourceGroupName The resource group name.
     * @param workflowName The workflow name.
     * @param versionId The workflow versionId.
     * @param triggerName The workflow trigger name.
     * @param options The options parameters.
     */
    listCallbackUrl(resourceGroupName: string, workflowName: string, versionId: string, triggerName: string, options?: WorkflowVersionTriggersListCallbackUrlOptionalParams): Promise<WorkflowVersionTriggersListCallbackUrlResponse>;
}

/** Optional parameters. */
export declare interface WorkflowVersionTriggersListCallbackUrlOptionalParams extends coreClient.OperationOptions {
    /** The callback URL parameters. */
    parameters?: GetCallbackUrlParameters;
}

/** Contains response data for the listCallbackUrl operation. */
export declare type WorkflowVersionTriggersListCallbackUrlResponse = WorkflowTriggerCallbackUrl;

/**
 * Defines values for WsdlImportMethod. \
 * {@link KnownWsdlImportMethod} can be used interchangeably with WsdlImportMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **SoapToRest** \
 * **SoapPassThrough**
 */
export declare type WsdlImportMethod = string;

/** The WSDL service. */
export declare interface WsdlService {
    /** The qualified name. */
    qualifiedName?: string;
    /** The list of endpoints' qualified names. */
    endpointQualifiedNames?: string[];
}

/** The X12 agreement acknowledgement settings. */
export declare interface X12AcknowledgementSettings {
    /** The value indicating whether technical acknowledgement is needed. */
    needTechnicalAcknowledgement: boolean;
    /** The value indicating whether to batch the technical acknowledgements. */
    batchTechnicalAcknowledgements: boolean;
    /** The value indicating whether functional acknowledgement is needed. */
    needFunctionalAcknowledgement: boolean;
    /** The functional acknowledgement version. */
    functionalAcknowledgementVersion?: string;
    /** The value indicating whether to batch functional acknowledgements. */
    batchFunctionalAcknowledgements: boolean;
    /** The value indicating whether implementation acknowledgement is needed. */
    needImplementationAcknowledgement: boolean;
    /** The implementation acknowledgement version. */
    implementationAcknowledgementVersion?: string;
    /** The value indicating whether to batch implementation acknowledgements. */
    batchImplementationAcknowledgements: boolean;
    /** The value indicating whether a loop is needed for valid messages. */
    needLoopForValidMessages: boolean;
    /** The value indicating whether to send synchronous acknowledgement. */
    sendSynchronousAcknowledgement: boolean;
    /** The acknowledgement control number prefix. */
    acknowledgementControlNumberPrefix?: string;
    /** The acknowledgement control number suffix. */
    acknowledgementControlNumberSuffix?: string;
    /** The acknowledgement control number lower bound. */
    acknowledgementControlNumberLowerBound: number;
    /** The acknowledgement control number upper bound. */
    acknowledgementControlNumberUpperBound: number;
    /** The value indicating whether to rollover acknowledgement control number. */
    rolloverAcknowledgementControlNumber: boolean;
}

/** The X12 agreement content. */
export declare interface X12AgreementContent {
    /** The X12 one-way receive agreement. */
    receiveAgreement: X12OneWayAgreement;
    /** The X12 one-way send agreement. */
    sendAgreement: X12OneWayAgreement;
}

/**
 * Defines values for X12CharacterSet. \
 * {@link KnownX12CharacterSet} can be used interchangeably with X12CharacterSet,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **Basic** \
 * **Extended** \
 * **UTF8**
 */
export declare type X12CharacterSet = string;

/**
 * Defines values for X12DateFormat. \
 * {@link KnownX12DateFormat} can be used interchangeably with X12DateFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **CCYYMMDD** \
 * **YYMMDD**
 */
export declare type X12DateFormat = string;

/** The X12 delimiter override settings. */
export declare interface X12DelimiterOverrides {
    /** The protocol version. */
    protocolVersion?: string;
    /** The message id. */
    messageId?: string;
    /** The data element separator. */
    dataElementSeparator: number;
    /** The component separator. */
    componentSeparator: number;
    /** The segment terminator. */
    segmentTerminator: number;
    /** The segment terminator suffix. */
    segmentTerminatorSuffix: SegmentTerminatorSuffix;
    /** The replacement character. */
    replaceCharacter: number;
    /** The value indicating whether to replace separators in payload. */
    replaceSeparatorsInPayload: boolean;
    /** The target namespace on which this delimiter settings has to be applied. */
    targetNamespace?: string;
}

/** The X12 envelope override settings. */
export declare interface X12EnvelopeOverride {
    /** The target namespace on which this envelope settings has to be applied. */
    targetNamespace: string;
    /** The protocol version on which this envelope settings has to be applied. */
    protocolVersion: string;
    /** The message id on which this envelope settings has to be applied. */
    messageId: string;
    /** The responsible agency code. */
    responsibleAgencyCode: string;
    /** The header version. */
    headerVersion: string;
    /** The sender application id. */
    senderApplicationId: string;
    /** The receiver application id. */
    receiverApplicationId: string;
    /** The functional identifier code. */
    functionalIdentifierCode?: string;
    /** The date format. */
    dateFormat: X12DateFormat;
    /** The time format. */
    timeFormat: X12TimeFormat;
}

/** The X12 agreement envelope settings. */
export declare interface X12EnvelopeSettings {
    /** The controls standards id. */
    controlStandardsId: number;
    /** The value indicating whether to use control standards id as repetition character. */
    useControlStandardsIdAsRepetitionCharacter: boolean;
    /** The sender application id. */
    senderApplicationId: string;
    /** The receiver application id. */
    receiverApplicationId: string;
    /** The control version number. */
    controlVersionNumber: string;
    /** The interchange  control number lower bound. */
    interchangeControlNumberLowerBound: number;
    /** The interchange  control number upper bound. */
    interchangeControlNumberUpperBound: number;
    /** The value indicating whether to rollover interchange control number. */
    rolloverInterchangeControlNumber: boolean;
    /** The value indicating whether to enable default group headers. */
    enableDefaultGroupHeaders: boolean;
    /** The functional group id. */
    functionalGroupId?: string;
    /** The group control number lower bound. */
    groupControlNumberLowerBound: number;
    /** The group control number upper bound. */
    groupControlNumberUpperBound: number;
    /** The value indicating whether to rollover group control number. */
    rolloverGroupControlNumber: boolean;
    /** The group header agency code. */
    groupHeaderAgencyCode: string;
    /** The group header version. */
    groupHeaderVersion: string;
    /** The transaction set control number lower bound. */
    transactionSetControlNumberLowerBound: number;
    /** The transaction set control number upper bound. */
    transactionSetControlNumberUpperBound: number;
    /** The value indicating whether to rollover transaction set control number. */
    rolloverTransactionSetControlNumber: boolean;
    /** The transaction set control number prefix. */
    transactionSetControlNumberPrefix?: string;
    /** The transaction set control number suffix. */
    transactionSetControlNumberSuffix?: string;
    /** The value indicating whether to overwrite existing transaction set control number. */
    overwriteExistingTransactionSetControlNumber: boolean;
    /** The group header date format. */
    groupHeaderDateFormat: X12DateFormat;
    /** The group header time format. */
    groupHeaderTimeFormat: X12TimeFormat;
    /** The usage indicator. */
    usageIndicator: UsageIndicator;
}

/** The X12 agreement framing settings. */
export declare interface X12FramingSettings {
    /** The data element separator. */
    dataElementSeparator: number;
    /** The component separator. */
    componentSeparator: number;
    /** The value indicating whether to replace separators in payload. */
    replaceSeparatorsInPayload: boolean;
    /** The replacement character. */
    replaceCharacter: number;
    /** The segment terminator. */
    segmentTerminator: number;
    /** The X12 character set. */
    characterSet: X12CharacterSet;
    /** The segment terminator suffix. */
    segmentTerminatorSuffix: SegmentTerminatorSuffix;
}

/** The X12 message filter for odata query. */
export declare interface X12MessageFilter {
    /** The message filter type. */
    messageFilterType: MessageFilterType;
}

/** The X12 message identifier. */
export declare interface X12MessageIdentifier {
    /** The message id. */
    messageId: string;
}

/** The X12 one-way agreement. */
export declare interface X12OneWayAgreement {
    /** The sender business identity */
    senderBusinessIdentity: BusinessIdentity;
    /** The receiver business identity */
    receiverBusinessIdentity: BusinessIdentity;
    /** The X12 protocol settings. */
    protocolSettings: X12ProtocolSettings;
}

/** The X12 processing settings. */
export declare interface X12ProcessingSettings {
    /** The value indicating whether to mask security information. */
    maskSecurityInfo: boolean;
    /** The value indicating whether to convert numerical type to implied decimal. */
    convertImpliedDecimal: boolean;
    /** The value indicating whether to preserve interchange. */
    preserveInterchange: boolean;
    /** The value indicating whether to suspend interchange on error. */
    suspendInterchangeOnError: boolean;
    /** The value indicating whether to create empty xml tags for trailing separators. */
    createEmptyXmlTagsForTrailingSeparators: boolean;
    /** The value indicating whether to use dot as decimal separator. */
    useDotAsDecimalSeparator: boolean;
}

/** The X12 agreement protocol settings. */
export declare interface X12ProtocolSettings {
    /** The X12 validation settings. */
    validationSettings: X12ValidationSettings;
    /** The X12 framing settings. */
    framingSettings: X12FramingSettings;
    /** The X12 envelope settings. */
    envelopeSettings: X12EnvelopeSettings;
    /** The X12 acknowledgment settings. */
    acknowledgementSettings: X12AcknowledgementSettings;
    /** The X12 message filter. */
    messageFilter: X12MessageFilter;
    /** The X12 security settings. */
    securitySettings: X12SecuritySettings;
    /** The X12 processing settings. */
    processingSettings: X12ProcessingSettings;
    /** The X12 envelope override settings. */
    envelopeOverrides?: X12EnvelopeOverride[];
    /** The X12 validation override settings. */
    validationOverrides?: X12ValidationOverride[];
    /** The X12 message filter list. */
    messageFilterList?: X12MessageIdentifier[];
    /** The X12 schema references. */
    schemaReferences: X12SchemaReference[];
    /** The X12 delimiter override settings. */
    x12DelimiterOverrides?: X12DelimiterOverrides[];
}

/** The X12 schema reference. */
export declare interface X12SchemaReference {
    /** The message id. */
    messageId: string;
    /** The sender application id. */
    senderApplicationId?: string;
    /** The schema version. */
    schemaVersion: string;
    /** The schema name. */
    schemaName: string;
}

/** The X12 agreement security settings. */
export declare interface X12SecuritySettings {
    /** The authorization qualifier. */
    authorizationQualifier: string;
    /** The authorization value. */
    authorizationValue?: string;
    /** The security qualifier. */
    securityQualifier: string;
    /** The password value. */
    passwordValue?: string;
}

/**
 * Defines values for X12TimeFormat. \
 * {@link KnownX12TimeFormat} can be used interchangeably with X12TimeFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **HHMM** \
 * **HHMMSS** \
 * **HHMMSSdd** \
 * **HHMMSSd**
 */
export declare type X12TimeFormat = string;

/** The X12 validation override settings. */
export declare interface X12ValidationOverride {
    /** The message id on which the validation settings has to be applied. */
    messageId: string;
    /** The value indicating whether to validate EDI types. */
    validateEDITypes: boolean;
    /** The value indicating whether to validate XSD types. */
    validateXSDTypes: boolean;
    /** The value indicating whether to allow leading and trailing spaces and zeroes. */
    allowLeadingAndTrailingSpacesAndZeroes: boolean;
    /** The value indicating whether to validate character Set. */
    validateCharacterSet: boolean;
    /** The value indicating whether to trim leading and trailing spaces and zeroes. */
    trimLeadingAndTrailingSpacesAndZeroes: boolean;
    /** The trailing separator policy. */
    trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

/** The X12 agreement validation settings. */
export declare interface X12ValidationSettings {
    /** The value indicating whether to validate character set in the message. */
    validateCharacterSet: boolean;
    /** The value indicating whether to check for duplicate interchange control number. */
    checkDuplicateInterchangeControlNumber: boolean;
    /** The validity period of interchange control number. */
    interchangeControlNumberValidityDays: number;
    /** The value indicating whether to check for duplicate group control number. */
    checkDuplicateGroupControlNumber: boolean;
    /** The value indicating whether to check for duplicate transaction set control number. */
    checkDuplicateTransactionSetControlNumber: boolean;
    /** The value indicating whether to Whether to validate EDI types. */
    validateEDITypes: boolean;
    /** The value indicating whether to Whether to validate XSD types. */
    validateXSDTypes: boolean;
    /** The value indicating whether to allow leading and trailing spaces and zeroes. */
    allowLeadingAndTrailingSpacesAndZeroes: boolean;
    /** The value indicating whether to trim leading and trailing spaces and zeroes. */
    trimLeadingAndTrailingSpacesAndZeroes: boolean;
    /** The trailing separator policy. */
    trailingSeparatorPolicy: TrailingSeparatorPolicy;
}

export { }
