/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ComputeManagementClient, } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Attach and detach data disks to/from the virtual machine.
 *
 * @summary Attach and detach data disks to/from the virtual machine.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2024-03-01/examples/virtualMachineExamples/VirtualMachine_AttachDetachDataDisks_MaximumSet_Gen.json
 */
function virtualMachineAttachDetachDataDisksMaximumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COMPUTE_SUBSCRIPTION_ID"] || "{subscription-id}";
        const resourceGroupName = process.env["COMPUTE_RESOURCE_GROUP"] || "rgcompute";
        const vmName = "aaaaaaaaaaaaaaaaaaaa";
        const parameters = {
            dataDisksToAttach: [
                {
                    caching: "ReadOnly",
                    deleteOption: "Delete",
                    diskEncryptionSet: {
                        id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
                    },
                    diskId: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d",
                    lun: 1,
                    writeAcceleratorEnabled: true,
                },
                {
                    caching: "ReadWrite",
                    deleteOption: "Detach",
                    diskEncryptionSet: {
                        id: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{existing-diskEncryptionSet-name}",
                    },
                    diskId: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_2_disk3_7d5e664bdafa49baa780eb2d128ff38e",
                    lun: 2,
                    writeAcceleratorEnabled: false,
                },
            ],
            dataDisksToDetach: [
                {
                    detachOption: "ForceDetach",
                    diskId: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_1_disk1_1a4e784bdafa49baa780eb2d128ff65x",
                },
                {
                    detachOption: "ForceDetach",
                    diskId: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_4_disk4_4d4e784bdafa49baa780eb2d256ff41z",
                },
            ],
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachines.beginAttachDetachDataDisksAndWait(resourceGroupName, vmName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Attach and detach data disks to/from the virtual machine.
 *
 * @summary Attach and detach data disks to/from the virtual machine.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2024-03-01/examples/virtualMachineExamples/VirtualMachine_AttachDetachDataDisks_MinimumSet_Gen.json
 */
function virtualMachineAttachDetachDataDisksMinimumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COMPUTE_SUBSCRIPTION_ID"] || "{subscription-id}";
        const resourceGroupName = process.env["COMPUTE_RESOURCE_GROUP"] || "rgcompute";
        const vmName = "azure-vm";
        const parameters = {
            dataDisksToAttach: [
                {
                    diskId: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_0_disk2_6c4f554bdafa49baa780eb2d128ff39d",
                },
            ],
            dataDisksToDetach: [
                {
                    diskId: "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/disks/vmss3176_vmss3176_1_disk1_1a4e784bdafa49baa780eb2d128ff65x",
                },
            ],
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachines.beginAttachDetachDataDisksAndWait(resourceGroupName, vmName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        virtualMachineAttachDetachDataDisksMaximumSetGen();
        virtualMachineAttachDetachDataDisksMinimumSetGen();
    });
}
main().catch(console.error);
//# sourceMappingURL=virtualMachinesAttachDetachDataDisksSample.js.map