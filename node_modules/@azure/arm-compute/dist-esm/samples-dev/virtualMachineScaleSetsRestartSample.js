/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ComputeManagementClient, } from "@azure/arm-compute";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Restarts one or more virtual machines in a VM scale set.
 *
 * @summary Restarts one or more virtual machines in a VM scale set.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2024-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Restart_MaximumSet_Gen.json
 */
function virtualMachineScaleSetRestartMaximumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COMPUTE_SUBSCRIPTION_ID"] || "{subscription-id}";
        const resourceGroupName = process.env["COMPUTE_RESOURCE_GROUP"] || "rgcompute";
        const vmScaleSetName = "aaaaaaaaaaaaaaaaaaa";
        const vmInstanceIDs = {
            instanceIds: ["aaaaaaaaaaaaaaaaa"],
        };
        const options = {
            vmInstanceIDs,
        };
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachineScaleSets.beginRestartAndWait(resourceGroupName, vmScaleSetName, options);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Restarts one or more virtual machines in a VM scale set.
 *
 * @summary Restarts one or more virtual machines in a VM scale set.
 * x-ms-original-file: specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/2024-03-01/examples/virtualMachineScaleSetExamples/VirtualMachineScaleSet_Restart_MinimumSet_Gen.json
 */
function virtualMachineScaleSetRestartMinimumSetGen() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COMPUTE_SUBSCRIPTION_ID"] || "{subscription-id}";
        const resourceGroupName = process.env["COMPUTE_RESOURCE_GROUP"] || "rgcompute";
        const vmScaleSetName = "aaaa";
        const credential = new DefaultAzureCredential();
        const client = new ComputeManagementClient(credential, subscriptionId);
        const result = yield client.virtualMachineScaleSets.beginRestartAndWait(resourceGroupName, vmScaleSetName);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        virtualMachineScaleSetRestartMaximumSetGen();
        virtualMachineScaleSetRestartMinimumSetGen();
    });
}
main().catch(console.error);
//# sourceMappingURL=virtualMachineScaleSetsRestartSample.js.map