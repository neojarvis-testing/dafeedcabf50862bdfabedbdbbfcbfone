'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link SeverityLevel} that the service accepts. */
exports.KnownSeverityLevel = void 0;
(function (KnownSeverityLevel) {
    /** Minimal */
    KnownSeverityLevel["Minimal"] = "minimal";
    /** Moderate */
    KnownSeverityLevel["Moderate"] = "moderate";
    /** Critical */
    KnownSeverityLevel["Critical"] = "critical";
    /** Highestcriticalimpact */
    KnownSeverityLevel["Highestcriticalimpact"] = "highestcriticalimpact";
})(exports.KnownSeverityLevel || (exports.KnownSeverityLevel = {}));
/** Known values of {@link PreferredContactMethod} that the service accepts. */
exports.KnownPreferredContactMethod = void 0;
(function (KnownPreferredContactMethod) {
    /** Email */
    KnownPreferredContactMethod["Email"] = "email";
    /** Phone */
    KnownPreferredContactMethod["Phone"] = "phone";
})(exports.KnownPreferredContactMethod || (exports.KnownPreferredContactMethod = {}));
/** Known values of {@link Status} that the service accepts. */
exports.KnownStatus = void 0;
(function (KnownStatus) {
    /** Open */
    KnownStatus["Open"] = "open";
    /** Closed */
    KnownStatus["Closed"] = "closed";
})(exports.KnownStatus || (exports.KnownStatus = {}));
/** Known values of {@link CommunicationType} that the service accepts. */
exports.KnownCommunicationType = void 0;
(function (KnownCommunicationType) {
    /** Web */
    KnownCommunicationType["Web"] = "web";
    /** Phone */
    KnownCommunicationType["Phone"] = "phone";
})(exports.KnownCommunicationType || (exports.KnownCommunicationType = {}));
/** Known values of {@link CommunicationDirection} that the service accepts. */
exports.KnownCommunicationDirection = void 0;
(function (KnownCommunicationDirection) {
    /** Inbound */
    KnownCommunicationDirection["Inbound"] = "inbound";
    /** Outbound */
    KnownCommunicationDirection["Outbound"] = "outbound";
})(exports.KnownCommunicationDirection || (exports.KnownCommunicationDirection = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationsListResult = {
    type: {
        name: "Composite",
        className: "OperationsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExceptionResponse = {
    type: {
        name: "Composite",
        className: "ExceptionResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ServiceError"
                }
            }
        }
    }
};
const ServiceError = {
    type: {
        name: "Composite",
        className: "ServiceError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServiceErrorDetail"
                        }
                    }
                }
            }
        }
    }
};
const ServiceErrorDetail = {
    type: {
        name: "Composite",
        className: "ServiceErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServicesListResult = {
    type: {
        name: "Composite",
        className: "ServicesListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Service"
                        }
                    }
                }
            }
        }
    }
};
const Service = {
    type: {
        name: "Composite",
        className: "Service",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            },
            resourceTypes: {
                serializedName: "properties.resourceTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ProblemClassificationsListResult = {
    type: {
        name: "Composite",
        className: "ProblemClassificationsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProblemClassification"
                        }
                    }
                }
            }
        }
    }
};
const ProblemClassification = {
    type: {
        name: "Composite",
        className: "ProblemClassification",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityInput = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityInput",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Microsoft.Support/supportTickets",
                        "Microsoft.Support/communications"
                    ]
                }
            }
        }
    }
};
const CheckNameAvailabilityOutput = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityOutput",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SupportTicketsListResult = {
    type: {
        name: "Composite",
        className: "SupportTicketsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SupportTicketDetails"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SupportTicketDetails = {
    type: {
        name: "Composite",
        className: "SupportTicketDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportTicketId: {
                serializedName: "properties.supportTicketId",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            },
            problemClassificationId: {
                serializedName: "properties.problemClassificationId",
                type: {
                    name: "String"
                }
            },
            problemClassificationDisplayName: {
                serializedName: "properties.problemClassificationDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            severity: {
                serializedName: "properties.severity",
                type: {
                    name: "String"
                }
            },
            enrollmentId: {
                serializedName: "properties.enrollmentId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            require24X7Response: {
                serializedName: "properties.require24X7Response",
                type: {
                    name: "Boolean"
                }
            },
            contactDetails: {
                serializedName: "properties.contactDetails",
                type: {
                    name: "Composite",
                    className: "ContactProfile"
                }
            },
            serviceLevelAgreement: {
                serializedName: "properties.serviceLevelAgreement",
                type: {
                    name: "Composite",
                    className: "ServiceLevelAgreement"
                }
            },
            supportEngineer: {
                serializedName: "properties.supportEngineer",
                type: {
                    name: "Composite",
                    className: "SupportEngineer"
                }
            },
            supportPlanType: {
                serializedName: "properties.supportPlanType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "properties.title",
                type: {
                    name: "String"
                }
            },
            problemStartTime: {
                serializedName: "properties.problemStartTime",
                type: {
                    name: "DateTime"
                }
            },
            serviceId: {
                serializedName: "properties.serviceId",
                type: {
                    name: "String"
                }
            },
            serviceDisplayName: {
                serializedName: "properties.serviceDisplayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdDate: {
                serializedName: "properties.createdDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            modifiedDate: {
                serializedName: "properties.modifiedDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            technicalTicketDetails: {
                serializedName: "properties.technicalTicketDetails",
                type: {
                    name: "Composite",
                    className: "TechnicalTicketDetails"
                }
            },
            quotaTicketDetails: {
                serializedName: "properties.quotaTicketDetails",
                type: {
                    name: "Composite",
                    className: "QuotaTicketDetails"
                }
            }
        }
    }
};
const ContactProfile = {
    type: {
        name: "Composite",
        className: "ContactProfile",
        modelProperties: {
            firstName: {
                serializedName: "firstName",
                required: true,
                type: {
                    name: "String"
                }
            },
            lastName: {
                serializedName: "lastName",
                required: true,
                type: {
                    name: "String"
                }
            },
            preferredContactMethod: {
                serializedName: "preferredContactMethod",
                required: true,
                type: {
                    name: "String"
                }
            },
            primaryEmailAddress: {
                serializedName: "primaryEmailAddress",
                required: true,
                type: {
                    name: "String"
                }
            },
            additionalEmailAddresses: {
                serializedName: "additionalEmailAddresses",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            phoneNumber: {
                serializedName: "phoneNumber",
                type: {
                    name: "String"
                }
            },
            preferredTimeZone: {
                serializedName: "preferredTimeZone",
                required: true,
                type: {
                    name: "String"
                }
            },
            country: {
                serializedName: "country",
                required: true,
                type: {
                    name: "String"
                }
            },
            preferredSupportLanguage: {
                serializedName: "preferredSupportLanguage",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceLevelAgreement = {
    type: {
        name: "Composite",
        className: "ServiceLevelAgreement",
        modelProperties: {
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            expirationTime: {
                serializedName: "expirationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            slaMinutes: {
                serializedName: "slaMinutes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SupportEngineer = {
    type: {
        name: "Composite",
        className: "SupportEngineer",
        modelProperties: {
            emailAddress: {
                serializedName: "emailAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TechnicalTicketDetails = {
    type: {
        name: "Composite",
        className: "TechnicalTicketDetails",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QuotaTicketDetails = {
    type: {
        name: "Composite",
        className: "QuotaTicketDetails",
        modelProperties: {
            quotaChangeRequestSubType: {
                serializedName: "quotaChangeRequestSubType",
                type: {
                    name: "String"
                }
            },
            quotaChangeRequestVersion: {
                serializedName: "quotaChangeRequestVersion",
                type: {
                    name: "String"
                }
            },
            quotaChangeRequests: {
                serializedName: "quotaChangeRequests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "QuotaChangeRequest"
                        }
                    }
                }
            }
        }
    }
};
const QuotaChangeRequest = {
    type: {
        name: "Composite",
        className: "QuotaChangeRequest",
        modelProperties: {
            region: {
                serializedName: "region",
                type: {
                    name: "String"
                }
            },
            payload: {
                serializedName: "payload",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UpdateSupportTicket = {
    type: {
        name: "Composite",
        className: "UpdateSupportTicket",
        modelProperties: {
            severity: {
                serializedName: "severity",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            contactDetails: {
                serializedName: "contactDetails",
                type: {
                    name: "Composite",
                    className: "UpdateContactProfile"
                }
            }
        }
    }
};
const UpdateContactProfile = {
    type: {
        name: "Composite",
        className: "UpdateContactProfile",
        modelProperties: {
            firstName: {
                serializedName: "firstName",
                type: {
                    name: "String"
                }
            },
            lastName: {
                serializedName: "lastName",
                type: {
                    name: "String"
                }
            },
            preferredContactMethod: {
                serializedName: "preferredContactMethod",
                type: {
                    name: "String"
                }
            },
            primaryEmailAddress: {
                serializedName: "primaryEmailAddress",
                type: {
                    name: "String"
                }
            },
            additionalEmailAddresses: {
                serializedName: "additionalEmailAddresses",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            phoneNumber: {
                serializedName: "phoneNumber",
                type: {
                    name: "String"
                }
            },
            preferredTimeZone: {
                serializedName: "preferredTimeZone",
                type: {
                    name: "String"
                }
            },
            country: {
                serializedName: "country",
                type: {
                    name: "String"
                }
            },
            preferredSupportLanguage: {
                serializedName: "preferredSupportLanguage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommunicationsListResult = {
    type: {
        name: "Composite",
        className: "CommunicationsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CommunicationDetails"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CommunicationDetails = {
    type: {
        name: "Composite",
        className: "CommunicationDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            communicationType: {
                serializedName: "properties.communicationType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            communicationDirection: {
                serializedName: "properties.communicationDirection",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            sender: {
                serializedName: "properties.sender",
                type: {
                    name: "String"
                }
            },
            subject: {
                serializedName: "properties.subject",
                type: {
                    name: "String"
                }
            },
            body: {
                serializedName: "properties.body",
                type: {
                    name: "String"
                }
            },
            createdDate: {
                serializedName: "properties.createdDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    OperationsListResult: OperationsListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ExceptionResponse: ExceptionResponse,
    ServiceError: ServiceError,
    ServiceErrorDetail: ServiceErrorDetail,
    ServicesListResult: ServicesListResult,
    Service: Service,
    ProblemClassificationsListResult: ProblemClassificationsListResult,
    ProblemClassification: ProblemClassification,
    CheckNameAvailabilityInput: CheckNameAvailabilityInput,
    CheckNameAvailabilityOutput: CheckNameAvailabilityOutput,
    SupportTicketsListResult: SupportTicketsListResult,
    SupportTicketDetails: SupportTicketDetails,
    ContactProfile: ContactProfile,
    ServiceLevelAgreement: ServiceLevelAgreement,
    SupportEngineer: SupportEngineer,
    TechnicalTicketDetails: TechnicalTicketDetails,
    QuotaTicketDetails: QuotaTicketDetails,
    QuotaChangeRequest: QuotaChangeRequest,
    UpdateSupportTicket: UpdateSupportTicket,
    UpdateContactProfile: UpdateContactProfile,
    CommunicationsListResult: CommunicationsListResult,
    CommunicationDetails: CommunicationDetails
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const serviceName = {
    parameterPath: "serviceName",
    mapper: {
        serializedName: "serviceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const problemClassificationName = {
    parameterPath: "problemClassificationName",
    mapper: {
        serializedName: "problemClassificationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const checkNameAvailabilityInput = {
    parameterPath: "checkNameAvailabilityInput",
    mapper: CheckNameAvailabilityInput
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const supportTicketName = {
    parameterPath: "supportTicketName",
    mapper: {
        serializedName: "supportTicketName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const updateSupportTicket = {
    parameterPath: "updateSupportTicket",
    mapper: UpdateSupportTicket
};
const createSupportTicketParameters = {
    parameterPath: "createSupportTicketParameters",
    mapper: SupportTicketDetails
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const communicationName = {
    parameterPath: "communicationName",
    mapper: {
        serializedName: "communicationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const createCommunicationParameters = {
    parameterPath: "createCommunicationParameters",
    mapper: CommunicationDetails
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * This lists all the available Microsoft Support REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * This lists all the available Microsoft Support REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$4);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/providers/Microsoft.Support/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationsListResult
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Services operations. */
class ServicesImpl {
    /**
     * Initialize a new instance of the class Services class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the Azure services available for support ticket creation. For **Technical** issues, select
     * the Service Id that maps to the Azure service/product as displayed in the **Services** drop-down
     * list on the Azure portal's [New support
     * request](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/overview) page.
     * Always use the service and its corresponding problem classification(s) obtained programmatically for
     * support ticket creation. This practice ensures that you always have the most recent set of service
     * and problem classification Ids.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the Azure services available for support ticket creation. For **Technical** issues, select
     * the Service Id that maps to the Azure service/product as displayed in the **Services** drop-down
     * list on the Azure portal's [New support
     * request](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/overview) page.
     * Always use the service and its corresponding problem classification(s) obtained programmatically for
     * support ticket creation. This practice ensures that you always have the most recent set of service
     * and problem classification Ids.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * Gets a specific Azure service for support ticket creation.
     * @param serviceName Name of the Azure service.
     * @param options The options parameters.
     */
    get(serviceName, options) {
        return this.client.sendOperationRequest({ serviceName, options }, getOperationSpec$3);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/providers/Microsoft.Support/services",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServicesListResult
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$3 = {
    path: "/providers/Microsoft.Support/services/{serviceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Service
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, serviceName],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ProblemClassifications operations. */
class ProblemClassificationsImpl {
    /**
     * Initialize a new instance of the class ProblemClassifications class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the problem classifications (categories) available for a specific Azure service. Always
     * use the service and problem classifications obtained programmatically. This practice ensures that
     * you always have the most recent set of service and problem classification Ids.
     * @param serviceName Name of the Azure service for which the problem classifications need to be
     *                    retrieved.
     * @param options The options parameters.
     */
    list(serviceName, options) {
        const iter = this.listPagingAll(serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(serviceName, options, settings);
            }
        };
    }
    listPagingPage(serviceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(serviceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(serviceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(serviceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the problem classifications (categories) available for a specific Azure service. Always
     * use the service and problem classifications obtained programmatically. This practice ensures that
     * you always have the most recent set of service and problem classification Ids.
     * @param serviceName Name of the Azure service for which the problem classifications need to be
     *                    retrieved.
     * @param options The options parameters.
     */
    _list(serviceName, options) {
        return this.client.sendOperationRequest({ serviceName, options }, listOperationSpec$2);
    }
    /**
     * Get problem classification details for a specific Azure service.
     * @param serviceName Name of the Azure service available for support.
     * @param problemClassificationName Name of problem classification.
     * @param options The options parameters.
     */
    get(serviceName, problemClassificationName, options) {
        return this.client.sendOperationRequest({ serviceName, problemClassificationName, options }, getOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.Support/services/{serviceName}/problemClassifications",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProblemClassificationsListResult
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, serviceName],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$2 = {
    path: "/providers/Microsoft.Support/services/{serviceName}/problemClassifications/{problemClassificationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProblemClassification
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        serviceName,
        problemClassificationName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SupportTickets operations. */
class SupportTicketsImpl {
    /**
     * Initialize a new instance of the class SupportTickets class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the support tickets for an Azure subscription. You can also filter the support tickets by
     * _Status_ or _CreatedDate_ using the $filter parameter. Output will be a paged result with
     * _nextLink_, using which you can retrieve the next set of support tickets. <br/><br/>Support ticket
     * data is available for 18 months after ticket creation. If a ticket was created more than 18 months
     * ago, a request for data might cause an error.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Check the availability of a resource name. This API should be used to check the uniqueness of the
     * name for support ticket creation for the selected subscription.
     * @param checkNameAvailabilityInput Input to check.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityInput, options) {
        return this.client.sendOperationRequest({ checkNameAvailabilityInput, options }, checkNameAvailabilityOperationSpec$1);
    }
    /**
     * Lists all the support tickets for an Azure subscription. You can also filter the support tickets by
     * _Status_ or _CreatedDate_ using the $filter parameter. Output will be a paged result with
     * _nextLink_, using which you can retrieve the next set of support tickets. <br/><br/>Support ticket
     * data is available for 18 months after ticket creation. If a ticket was created more than 18 months
     * ago, a request for data might cause an error.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * Get ticket details for an Azure subscription. Support ticket data is available for 18 months after
     * ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an
     * error.
     * @param supportTicketName Support ticket name.
     * @param options The options parameters.
     */
    get(supportTicketName, options) {
        return this.client.sendOperationRequest({ supportTicketName, options }, getOperationSpec$1);
    }
    /**
     * This API allows you to update the severity level, ticket status, and your contact information in the
     * support ticket.<br/><br/>Note: The severity levels cannot be changed if a support ticket is actively
     * being worked upon by an Azure support engineer. In such a case, contact your support engineer to
     * request severity update by adding a new communication using the Communications
     * API.<br/><br/>Changing the ticket status to _closed_ is allowed only on an unassigned case. When an
     * engineer is actively working on the ticket, send your ticket closure request by sending a note to
     * your engineer.
     * @param supportTicketName Support ticket name.
     * @param updateSupportTicket UpdateSupportTicket object.
     * @param options The options parameters.
     */
    update(supportTicketName, updateSupportTicket, options) {
        return this.client.sendOperationRequest({ supportTicketName, updateSupportTicket, options }, updateOperationSpec);
    }
    /**
     * Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and
     * Subscription Management issues for the specified subscription. Learn the
     * [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.<br/><br/>Always call
     * the Services and ProblemClassifications API to get the most recent set of services and problem
     * categories required for support ticket creation.<br/><br/>Adding attachments is not currently
     * supported via the API. To add a file to an existing support ticket, visit the [Manage support
     * ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest)
     * page in the Azure portal, select the support ticket, and use the file upload control to add a new
     * file.<br/><br/>Providing consent to share diagnostic information with Azure support is currently not
     * supported via the API. The Azure support engineer working on your ticket will reach out to you for
     * consent if your issue requires gathering diagnostic information from your Azure
     * resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include
     * _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per
     * [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
     * The primary token will be from the tenant for whom a support ticket is being raised against the
     * subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be from
     * the Cloud solution provider (CSP) partner tenant.
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @param options The options parameters.
     */
    beginCreate(supportTicketName, createSupportTicketParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { supportTicketName, createSupportTicketParameters, options }, createOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and
     * Subscription Management issues for the specified subscription. Learn the
     * [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.<br/><br/>Always call
     * the Services and ProblemClassifications API to get the most recent set of services and problem
     * categories required for support ticket creation.<br/><br/>Adding attachments is not currently
     * supported via the API. To add a file to an existing support ticket, visit the [Manage support
     * ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest)
     * page in the Azure portal, select the support ticket, and use the file upload control to add a new
     * file.<br/><br/>Providing consent to share diagnostic information with Azure support is currently not
     * supported via the API. The Azure support engineer working on your ticket will reach out to you for
     * consent if your issue requires gathering diagnostic information from your Azure
     * resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include
     * _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per
     * [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
     * The primary token will be from the tenant for whom a support ticket is being raised against the
     * subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be from
     * the Cloud solution provider (CSP) partner tenant.
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @param options The options parameters.
     */
    beginCreateAndWait(supportTicketName, createSupportTicketParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(supportTicketName, createSupportTicketParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityOutput
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    requestBody: checkNameAvailabilityInput,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportTicketsListResult
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion, top, filter],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportTicketDetails
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        supportTicketName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: SupportTicketDetails
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    requestBody: updateSupportTicket,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        supportTicketName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SupportTicketDetails
        },
        201: {
            bodyMapper: SupportTicketDetails
        },
        202: {
            bodyMapper: SupportTicketDetails
        },
        204: {
            bodyMapper: SupportTicketDetails
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    requestBody: createSupportTicketParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        supportTicketName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportTicketsListResult
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Communications operations. */
class CommunicationsImpl {
    /**
     * Initialize a new instance of the class Communications class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all communications (attachments not included) for a support ticket. <br/></br> You can also
     * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter
     * parameter. The only type of communication supported today is _Web_. Output will be a paged result
     * with _nextLink_, using which you can retrieve the next set of Communication results.
     * <br/><br/>Support ticket data is available for 18 months after ticket creation. If a ticket was
     * created more than 18 months ago, a request for data might cause an error.
     * @param supportTicketName Support ticket name.
     * @param options The options parameters.
     */
    list(supportTicketName, options) {
        const iter = this.listPagingAll(supportTicketName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(supportTicketName, options, settings);
            }
        };
    }
    listPagingPage(supportTicketName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(supportTicketName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(supportTicketName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(supportTicketName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(supportTicketName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Check the availability of a resource name. This API should be used to check the uniqueness of the
     * name for adding a new communication to the support ticket.
     * @param supportTicketName Support ticket name.
     * @param checkNameAvailabilityInput Input to check.
     * @param options The options parameters.
     */
    checkNameAvailability(supportTicketName, checkNameAvailabilityInput, options) {
        return this.client.sendOperationRequest({ supportTicketName, checkNameAvailabilityInput, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Lists all communications (attachments not included) for a support ticket. <br/></br> You can also
     * filter support ticket communications by _CreatedDate_ or _CommunicationType_ using the $filter
     * parameter. The only type of communication supported today is _Web_. Output will be a paged result
     * with _nextLink_, using which you can retrieve the next set of Communication results.
     * <br/><br/>Support ticket data is available for 18 months after ticket creation. If a ticket was
     * created more than 18 months ago, a request for data might cause an error.
     * @param supportTicketName Support ticket name.
     * @param options The options parameters.
     */
    _list(supportTicketName, options) {
        return this.client.sendOperationRequest({ supportTicketName, options }, listOperationSpec);
    }
    /**
     * Returns communication details for a support ticket.
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param options The options parameters.
     */
    get(supportTicketName, communicationName, options) {
        return this.client.sendOperationRequest({ supportTicketName, communicationName, options }, getOperationSpec);
    }
    /**
     * Adds a new customer communication to an Azure support ticket.
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param createCommunicationParameters Communication object.
     * @param options The options parameters.
     */
    beginCreate(supportTicketName, communicationName, createCommunicationParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                supportTicketName,
                communicationName,
                createCommunicationParameters,
                options
            }, createOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Adds a new customer communication to an Azure support ticket.
     * @param supportTicketName Support ticket name.
     * @param communicationName Communication name.
     * @param createCommunicationParameters Communication object.
     * @param options The options parameters.
     */
    beginCreateAndWait(supportTicketName, communicationName, createCommunicationParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(supportTicketName, communicationName, createCommunicationParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param supportTicketName Support ticket name.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(supportTicketName, nextLink, options) {
        return this.client.sendOperationRequest({ supportTicketName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityOutput
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    requestBody: checkNameAvailabilityInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        supportTicketName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommunicationsListResult
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion, top, filter],
    urlParameters: [
        $host,
        subscriptionId,
        supportTicketName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommunicationDetails
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        supportTicketName,
        communicationName
    ],
    headerParameters: [accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: CommunicationDetails
        },
        201: {
            bodyMapper: CommunicationDetails
        },
        202: {
            bodyMapper: CommunicationDetails
        },
        204: {
            bodyMapper: CommunicationDetails
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    requestBody: createCommunicationParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        supportTicketName,
        communicationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CommunicationsListResult
        },
        default: {
            bodyMapper: ExceptionResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        supportTicketName,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class MicrosoftSupport extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the MicrosoftSupport class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Azure subscription Id.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-support/2.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2020-04-01";
        this.operations = new OperationsImpl(this);
        this.services = new ServicesImpl(this);
        this.problemClassifications = new ProblemClassificationsImpl(this);
        this.supportTickets = new SupportTicketsImpl(this);
        this.communications = new CommunicationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.MicrosoftSupport = MicrosoftSupport;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
