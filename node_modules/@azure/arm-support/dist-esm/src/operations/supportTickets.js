/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing SupportTickets operations. */
export class SupportTicketsImpl {
    /**
     * Initialize a new instance of the class SupportTickets class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the support tickets for an Azure subscription. You can also filter the support tickets by
     * _Status_ or _CreatedDate_ using the $filter parameter. Output will be a paged result with
     * _nextLink_, using which you can retrieve the next set of support tickets. <br/><br/>Support ticket
     * data is available for 18 months after ticket creation. If a ticket was created more than 18 months
     * ago, a request for data might cause an error.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Check the availability of a resource name. This API should be used to check the uniqueness of the
     * name for support ticket creation for the selected subscription.
     * @param checkNameAvailabilityInput Input to check.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityInput, options) {
        return this.client.sendOperationRequest({ checkNameAvailabilityInput, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Lists all the support tickets for an Azure subscription. You can also filter the support tickets by
     * _Status_ or _CreatedDate_ using the $filter parameter. Output will be a paged result with
     * _nextLink_, using which you can retrieve the next set of support tickets. <br/><br/>Support ticket
     * data is available for 18 months after ticket creation. If a ticket was created more than 18 months
     * ago, a request for data might cause an error.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Get ticket details for an Azure subscription. Support ticket data is available for 18 months after
     * ticket creation. If a ticket was created more than 18 months ago, a request for data might cause an
     * error.
     * @param supportTicketName Support ticket name.
     * @param options The options parameters.
     */
    get(supportTicketName, options) {
        return this.client.sendOperationRequest({ supportTicketName, options }, getOperationSpec);
    }
    /**
     * This API allows you to update the severity level, ticket status, and your contact information in the
     * support ticket.<br/><br/>Note: The severity levels cannot be changed if a support ticket is actively
     * being worked upon by an Azure support engineer. In such a case, contact your support engineer to
     * request severity update by adding a new communication using the Communications
     * API.<br/><br/>Changing the ticket status to _closed_ is allowed only on an unassigned case. When an
     * engineer is actively working on the ticket, send your ticket closure request by sending a note to
     * your engineer.
     * @param supportTicketName Support ticket name.
     * @param updateSupportTicket UpdateSupportTicket object.
     * @param options The options parameters.
     */
    update(supportTicketName, updateSupportTicket, options) {
        return this.client.sendOperationRequest({ supportTicketName, updateSupportTicket, options }, updateOperationSpec);
    }
    /**
     * Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and
     * Subscription Management issues for the specified subscription. Learn the
     * [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.<br/><br/>Always call
     * the Services and ProblemClassifications API to get the most recent set of services and problem
     * categories required for support ticket creation.<br/><br/>Adding attachments is not currently
     * supported via the API. To add a file to an existing support ticket, visit the [Manage support
     * ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest)
     * page in the Azure portal, select the support ticket, and use the file upload control to add a new
     * file.<br/><br/>Providing consent to share diagnostic information with Azure support is currently not
     * supported via the API. The Azure support engineer working on your ticket will reach out to you for
     * consent if your issue requires gathering diagnostic information from your Azure
     * resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include
     * _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per
     * [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
     * The primary token will be from the tenant for whom a support ticket is being raised against the
     * subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be from
     * the Cloud solution provider (CSP) partner tenant.
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @param options The options parameters.
     */
    beginCreate(supportTicketName, createSupportTicketParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { supportTicketName, createSupportTicketParameters, options }, createOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and
     * Subscription Management issues for the specified subscription. Learn the
     * [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.<br/><br/>Always call
     * the Services and ProblemClassifications API to get the most recent set of services and problem
     * categories required for support ticket creation.<br/><br/>Adding attachments is not currently
     * supported via the API. To add a file to an existing support ticket, visit the [Manage support
     * ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest)
     * page in the Azure portal, select the support ticket, and use the file upload control to add a new
     * file.<br/><br/>Providing consent to share diagnostic information with Azure support is currently not
     * supported via the API. The Azure support engineer working on your ticket will reach out to you for
     * consent if your issue requires gathering diagnostic information from your Azure
     * resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include
     * _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per
     * [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
     * The primary token will be from the tenant for whom a support ticket is being raised against the
     * subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be from
     * the Cloud solution provider (CSP) partner tenant.
     * @param supportTicketName Support ticket name.
     * @param createSupportTicketParameters Support ticket request payload.
     * @param options The options parameters.
     */
    beginCreateAndWait(supportTicketName, createSupportTicketParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(supportTicketName, createSupportTicketParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckNameAvailabilityOutput
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    requestBody: Parameters.checkNameAvailabilityInput,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SupportTicketsListResult
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.top, Parameters.filter],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SupportTicketDetails
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.supportTicketName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.SupportTicketDetails
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    requestBody: Parameters.updateSupportTicket,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.supportTicketName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SupportTicketDetails
        },
        201: {
            bodyMapper: Mappers.SupportTicketDetails
        },
        202: {
            bodyMapper: Mappers.SupportTicketDetails
        },
        204: {
            bodyMapper: Mappers.SupportTicketDetails
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    requestBody: Parameters.createSupportTicketParameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.supportTicketName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SupportTicketsListResult
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=supportTickets.js.map