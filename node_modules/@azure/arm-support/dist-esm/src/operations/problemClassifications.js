/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing ProblemClassifications operations. */
export class ProblemClassificationsImpl {
    /**
     * Initialize a new instance of the class ProblemClassifications class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the problem classifications (categories) available for a specific Azure service. Always
     * use the service and problem classifications obtained programmatically. This practice ensures that
     * you always have the most recent set of service and problem classification Ids.
     * @param serviceName Name of the Azure service for which the problem classifications need to be
     *                    retrieved.
     * @param options The options parameters.
     */
    list(serviceName, options) {
        const iter = this.listPagingAll(serviceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(serviceName, options, settings);
            }
        };
    }
    listPagingPage(serviceName, options, _settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield __await(this._list(serviceName, options));
            yield yield __await(result.value || []);
        });
    }
    listPagingAll(serviceName, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(serviceName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the problem classifications (categories) available for a specific Azure service. Always
     * use the service and problem classifications obtained programmatically. This practice ensures that
     * you always have the most recent set of service and problem classification Ids.
     * @param serviceName Name of the Azure service for which the problem classifications need to be
     *                    retrieved.
     * @param options The options parameters.
     */
    _list(serviceName, options) {
        return this.client.sendOperationRequest({ serviceName, options }, listOperationSpec);
    }
    /**
     * Get problem classification details for a specific Azure service.
     * @param serviceName Name of the Azure service available for support.
     * @param problemClassificationName Name of problem classification.
     * @param options The options parameters.
     */
    get(serviceName, problemClassificationName, options) {
        return this.client.sendOperationRequest({ serviceName, problemClassificationName, options }, getOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Support/services/{serviceName}/problemClassifications",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProblemClassificationsListResult
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.serviceName],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/providers/Microsoft.Support/services/{serviceName}/problemClassifications/{problemClassificationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProblemClassification
        },
        default: {
            bodyMapper: Mappers.ExceptionResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.serviceName,
        Parameters.problemClassificationName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=problemClassifications.js.map