/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CheckNameAvailabilityInput as CheckNameAvailabilityInputMapper, UpdateSupportTicket as UpdateSupportTicketMapper, SupportTicketDetails as SupportTicketDetailsMapper, CommunicationDetails as CommunicationDetailsMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const serviceName = {
    parameterPath: "serviceName",
    mapper: {
        serializedName: "serviceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const problemClassificationName = {
    parameterPath: "problemClassificationName",
    mapper: {
        serializedName: "problemClassificationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const checkNameAvailabilityInput = {
    parameterPath: "checkNameAvailabilityInput",
    mapper: CheckNameAvailabilityInputMapper
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const supportTicketName = {
    parameterPath: "supportTicketName",
    mapper: {
        serializedName: "supportTicketName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const updateSupportTicket = {
    parameterPath: "updateSupportTicket",
    mapper: UpdateSupportTicketMapper
};
export const createSupportTicketParameters = {
    parameterPath: "createSupportTicketParameters",
    mapper: SupportTicketDetailsMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const communicationName = {
    parameterPath: "communicationName",
    mapper: {
        serializedName: "communicationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const createCommunicationParameters = {
    parameterPath: "createCommunicationParameters",
    mapper: CommunicationDetailsMapper
};
//# sourceMappingURL=parameters.js.map