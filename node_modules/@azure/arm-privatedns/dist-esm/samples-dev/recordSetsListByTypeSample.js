/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { PrivateDnsManagementClient } from "@azure/arm-privatedns";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Lists the record sets of a specified type in a Private DNS zone.
 *
 * @summary Lists the record sets of a specified type in a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAList.json
 */
function getPrivateDnsZoneARecordSets() {
    var _a, e_1, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "A";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.recordSets.listByType(resourceGroupName, privateZoneName, recordType)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    let item = _c;
                    resArray.push(item);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the record sets of a specified type in a Private DNS zone.
 *
 * @summary Lists the record sets of a specified type in a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAList.json
 */
function getPrivateDnsZoneAaaaRecordSets() {
    var _a, e_2, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "AAAA";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.recordSets.listByType(resourceGroupName, privateZoneName, recordType)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    let item = _c;
                    resArray.push(item);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the record sets of a specified type in a Private DNS zone.
 *
 * @summary Lists the record sets of a specified type in a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEList.json
 */
function getPrivateDnsZoneCnameRecordSets() {
    var _a, e_3, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "CNAME";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.recordSets.listByType(resourceGroupName, privateZoneName, recordType)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    let item = _c;
                    resArray.push(item);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_3) throw e_3.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the record sets of a specified type in a Private DNS zone.
 *
 * @summary Lists the record sets of a specified type in a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXList.json
 */
function getPrivateDnsZoneMxRecordSets() {
    var _a, e_4, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "MX";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.recordSets.listByType(resourceGroupName, privateZoneName, recordType)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    let item = _c;
                    resArray.push(item);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_4) throw e_4.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the record sets of a specified type in a Private DNS zone.
 *
 * @summary Lists the record sets of a specified type in a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRList.json
 */
function getPrivateDnsZonePtrRecordSets() {
    var _a, e_5, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "0.0.127.in-addr.arpa";
        const recordType = "PTR";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.recordSets.listByType(resourceGroupName, privateZoneName, recordType)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    let item = _c;
                    resArray.push(item);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_5) throw e_5.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the record sets of a specified type in a Private DNS zone.
 *
 * @summary Lists the record sets of a specified type in a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAList.json
 */
function getPrivateDnsZoneSoaRecordSets() {
    var _a, e_6, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "SOA";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.recordSets.listByType(resourceGroupName, privateZoneName, recordType)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    let item = _c;
                    resArray.push(item);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_6) throw e_6.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the record sets of a specified type in a Private DNS zone.
 *
 * @summary Lists the record sets of a specified type in a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVList.json
 */
function getPrivateDnsZoneSrvRecordSets() {
    var _a, e_7, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "SRV";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.recordSets.listByType(resourceGroupName, privateZoneName, recordType)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    let item = _c;
                    resArray.push(item);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_7) throw e_7.error; }
        }
        console.log(resArray);
    });
}
/**
 * This sample demonstrates how to Lists the record sets of a specified type in a Private DNS zone.
 *
 * @summary Lists the record sets of a specified type in a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTList.json
 */
function getPrivateDnsZoneTxtRecordSets() {
    var _a, e_8, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "TXT";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.recordSets.listByType(resourceGroupName, privateZoneName, recordType)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                _c = _f.value;
                _d = false;
                try {
                    let item = _c;
                    resArray.push(item);
                }
                finally {
                    _d = true;
                }
            }
        }
        catch (e_8_1) { e_8 = { error: e_8_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_8) throw e_8.error; }
        }
        console.log(resArray);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        getPrivateDnsZoneARecordSets();
        getPrivateDnsZoneAaaaRecordSets();
        getPrivateDnsZoneCnameRecordSets();
        getPrivateDnsZoneMxRecordSets();
        getPrivateDnsZonePtrRecordSets();
        getPrivateDnsZoneSoaRecordSets();
        getPrivateDnsZoneSrvRecordSets();
        getPrivateDnsZoneTxtRecordSets();
    });
}
main().catch(console.error);
//# sourceMappingURL=recordSetsListByTypeSample.js.map