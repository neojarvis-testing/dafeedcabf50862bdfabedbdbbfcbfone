/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { PrivateDnsManagementClient } from "@azure/arm-privatedns";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Gets a record set.
 *
 * @summary Gets a record set.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAGet.json
 */
function getPrivateDnsZoneARecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "A";
        const relativeRecordSetName = "recordA";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.get(resourceGroupName, privateZoneName, recordType, relativeRecordSetName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Gets a record set.
 *
 * @summary Gets a record set.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAGet.json
 */
function getPrivateDnsZoneAaaaRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "AAAA";
        const relativeRecordSetName = "recordAAAA";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.get(resourceGroupName, privateZoneName, recordType, relativeRecordSetName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Gets a record set.
 *
 * @summary Gets a record set.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEGet.json
 */
function getPrivateDnsZoneCnameRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "CNAME";
        const relativeRecordSetName = "recordCNAME";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.get(resourceGroupName, privateZoneName, recordType, relativeRecordSetName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Gets a record set.
 *
 * @summary Gets a record set.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXGet.json
 */
function getPrivateDnsZoneMxRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "MX";
        const relativeRecordSetName = "recordMX";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.get(resourceGroupName, privateZoneName, recordType, relativeRecordSetName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Gets a record set.
 *
 * @summary Gets a record set.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRGet.json
 */
function getPrivateDnsZonePtrRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "0.0.127.in-addr.arpa";
        const recordType = "PTR";
        const relativeRecordSetName = "1";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.get(resourceGroupName, privateZoneName, recordType, relativeRecordSetName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Gets a record set.
 *
 * @summary Gets a record set.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAGet.json
 */
function getPrivateDnsZoneSoaRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "SOA";
        const relativeRecordSetName = "@";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.get(resourceGroupName, privateZoneName, recordType, relativeRecordSetName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Gets a record set.
 *
 * @summary Gets a record set.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVGet.json
 */
function getPrivateDnsZoneSrvRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "SRV";
        const relativeRecordSetName = "recordSRV";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.get(resourceGroupName, privateZoneName, recordType, relativeRecordSetName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Gets a record set.
 *
 * @summary Gets a record set.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTGet.json
 */
function getPrivateDnsZoneTxtRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "TXT";
        const relativeRecordSetName = "recordTXT";
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.get(resourceGroupName, privateZoneName, recordType, relativeRecordSetName);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        getPrivateDnsZoneARecordSet();
        getPrivateDnsZoneAaaaRecordSet();
        getPrivateDnsZoneCnameRecordSet();
        getPrivateDnsZoneMxRecordSet();
        getPrivateDnsZonePtrRecordSet();
        getPrivateDnsZoneSoaRecordSet();
        getPrivateDnsZoneSrvRecordSet();
        getPrivateDnsZoneTxtRecordSet();
    });
}
main().catch(console.error);
//# sourceMappingURL=recordSetsGetSample.js.map