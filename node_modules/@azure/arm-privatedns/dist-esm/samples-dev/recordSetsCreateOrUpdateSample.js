/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { PrivateDnsManagementClient } from "@azure/arm-privatedns";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates a record set within a Private DNS zone.
 *
 * @summary Creates or updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAPut.json
 */
function putPrivateDnsZoneARecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "A";
        const relativeRecordSetName = "recordA";
        const parameters = {
            aRecords: [{ ipv4Address: "1.2.3.4" }],
            metadata: { key1: "value1" },
            ttl: 3600
        };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.createOrUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a record set within a Private DNS zone.
 *
 * @summary Creates or updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAPut.json
 */
function putPrivateDnsZoneAaaaRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "AAAA";
        const relativeRecordSetName = "recordAAAA";
        const parameters = {
            aaaaRecords: [{ ipv6Address: "::1" }],
            metadata: { key1: "value1" },
            ttl: 3600
        };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.createOrUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a record set within a Private DNS zone.
 *
 * @summary Creates or updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEPut.json
 */
function putPrivateDnsZoneCnameRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "CNAME";
        const relativeRecordSetName = "recordCNAME";
        const parameters = {
            cnameRecord: { cname: "contoso.com" },
            metadata: { key1: "value1" },
            ttl: 3600
        };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.createOrUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a record set within a Private DNS zone.
 *
 * @summary Creates or updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXPut.json
 */
function putPrivateDnsZoneMxRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "MX";
        const relativeRecordSetName = "recordMX";
        const parameters = {
            metadata: { key1: "value1" },
            mxRecords: [{ exchange: "mail.privatezone1.com", preference: 0 }],
            ttl: 3600
        };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.createOrUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a record set within a Private DNS zone.
 *
 * @summary Creates or updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRPut.json
 */
function putPrivateDnsZonePtrRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "0.0.127.in-addr.arpa";
        const recordType = "PTR";
        const relativeRecordSetName = "1";
        const parameters = {
            metadata: { key1: "value1" },
            ptrRecords: [{ ptrdname: "localhost" }],
            ttl: 3600
        };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.createOrUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a record set within a Private DNS zone.
 *
 * @summary Creates or updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAPut.json
 */
function putPrivateDnsZoneSoaRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "SOA";
        const relativeRecordSetName = "@";
        const parameters = {
            metadata: { key1: "value1" },
            soaRecord: {
                email: "azureprivatedns-hostmaster.microsoft.com",
                expireTime: 2419200,
                host: "azureprivatedns.net",
                refreshTime: 3600,
                retryTime: 300,
                serialNumber: 1
            },
            ttl: 3600
        };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.createOrUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a record set within a Private DNS zone.
 *
 * @summary Creates or updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVPut.json
 */
function putPrivateDnsZoneSrvRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "SRV";
        const relativeRecordSetName = "recordSRV";
        const parameters = {
            metadata: { key1: "value1" },
            srvRecords: [{ port: 80, priority: 0, target: "contoso.com", weight: 10 }],
            ttl: 3600
        };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.createOrUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a record set within a Private DNS zone.
 *
 * @summary Creates or updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTPut.json
 */
function putPrivateDnsZoneTxtRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "TXT";
        const relativeRecordSetName = "recordTXT";
        const parameters = {
            metadata: { key1: "value1" },
            ttl: 3600,
            txtRecords: [{ value: ["string1", "string2"] }]
        };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.createOrUpdate(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        putPrivateDnsZoneARecordSet();
        putPrivateDnsZoneAaaaRecordSet();
        putPrivateDnsZoneCnameRecordSet();
        putPrivateDnsZoneMxRecordSet();
        putPrivateDnsZonePtrRecordSet();
        putPrivateDnsZoneSoaRecordSet();
        putPrivateDnsZoneSrvRecordSet();
        putPrivateDnsZoneTxtRecordSet();
    });
}
main().catch(console.error);
//# sourceMappingURL=recordSetsCreateOrUpdateSample.js.map