/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { PrivateDnsManagementClient } from "@azure/arm-privatedns";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Updates a record set within a Private DNS zone.
 *
 * @summary Updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAPatch.json
 */
function patchPrivateDnsZoneARecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "A";
        const relativeRecordSetName = "recordA";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates a record set within a Private DNS zone.
 *
 * @summary Updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetAAAAPatch.json
 */
function patchPrivateDnsZoneAaaaRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "AAAA";
        const relativeRecordSetName = "recordAAAA";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates a record set within a Private DNS zone.
 *
 * @summary Updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetCNAMEPatch.json
 */
function patchPrivateDnsZoneCnameRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "CNAME";
        const relativeRecordSetName = "recordCNAME";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates a record set within a Private DNS zone.
 *
 * @summary Updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetMXPatch.json
 */
function patchPrivateDnsZoneMxRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "MX";
        const relativeRecordSetName = "recordMX";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates a record set within a Private DNS zone.
 *
 * @summary Updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetPTRPatch.json
 */
function patchPrivateDnsZonePtrRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "0.0.127.in-addr.arpa";
        const recordType = "PTR";
        const relativeRecordSetName = "1";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates a record set within a Private DNS zone.
 *
 * @summary Updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSOAPatch.json
 */
function patchPrivateDnsZoneSoaRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "SOA";
        const relativeRecordSetName = "@";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates a record set within a Private DNS zone.
 *
 * @summary Updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetSRVPatch.json
 */
function patchPrivateDnsZoneSrvRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "SRV";
        const relativeRecordSetName = "recordSRV";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Updates a record set within a Private DNS zone.
 *
 * @summary Updates a record set within a Private DNS zone.
 * x-ms-original-file: specification/privatedns/resource-manager/Microsoft.Network/stable/2020-06-01/examples/RecordSetTXTPatch.json
 */
function patchPrivateDnsZoneTxtRecordSet() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["PRIVATEDNS_SUBSCRIPTION_ID"] || "subscriptionId";
        const resourceGroupName = process.env["PRIVATEDNS_RESOURCE_GROUP"] || "resourceGroup1";
        const privateZoneName = "privatezone1.com";
        const recordType = "TXT";
        const relativeRecordSetName = "recordTXT";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new PrivateDnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, privateZoneName, recordType, relativeRecordSetName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        patchPrivateDnsZoneARecordSet();
        patchPrivateDnsZoneAaaaRecordSet();
        patchPrivateDnsZoneCnameRecordSet();
        patchPrivateDnsZoneMxRecordSet();
        patchPrivateDnsZonePtrRecordSet();
        patchPrivateDnsZoneSoaRecordSet();
        patchPrivateDnsZoneSrvRecordSet();
        patchPrivateDnsZoneTxtRecordSet();
    });
}
main().catch(console.error);
//# sourceMappingURL=recordSetsUpdateSample.js.map