/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { PrivateZone as PrivateZoneMapper, VirtualNetworkLink as VirtualNetworkLinkMapper, RecordSet as RecordSetMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: PrivateZoneMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateZoneName = {
    parameterPath: "privateZoneName",
    mapper: {
        serializedName: "privateZoneName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
export const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-06-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: VirtualNetworkLinkMapper
};
export const virtualNetworkLinkName = {
    parameterPath: "virtualNetworkLinkName",
    mapper: {
        serializedName: "virtualNetworkLinkName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: RecordSetMapper
};
export const recordType = {
    parameterPath: "recordType",
    mapper: {
        serializedName: "recordType",
        required: true,
        type: {
            name: "Enum",
            allowedValues: ["A", "AAAA", "CNAME", "MX", "PTR", "SOA", "SRV", "TXT"]
        }
    }
};
export const relativeRecordSetName = {
    parameterPath: "relativeRecordSetName",
    mapper: {
        serializedName: "relativeRecordSetName",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const recordsetnamesuffix = {
    parameterPath: ["options", "recordsetnamesuffix"],
    mapper: {
        serializedName: "$recordsetnamesuffix",
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map