import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** An AAAA record. */
export declare interface AaaaRecord {
    /** The IPv6 address of this AAAA record. */
    ipv6Address?: string;
}

/** An A record. */
export declare interface ARecord {
    /** The IPv4 address of this A record. */
    ipv4Address?: string;
}

/** An error response from the service. */
export declare interface CloudError {
    /** Cloud error body. */
    error?: CloudErrorBody;
}

/** An error response from the service. */
export declare interface CloudErrorBody {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code?: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message?: string;
    /** The target of the particular error. For example, the name of the property in error. */
    target?: string;
    /** A list of additional details about the error. */
    details?: CloudErrorBody[];
}

/** A CNAME record. */
export declare interface CnameRecord {
    /** The canonical name for this CNAME record. */
    cname?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link VirtualNetworkLinkState} that the service accepts. */
export declare enum KnownVirtualNetworkLinkState {
    /** InProgress */
    InProgress = "InProgress",
    /** Completed */
    Completed = "Completed"
}

/** An MX record. */
export declare interface MxRecord {
    /** The preference value for this MX record. */
    preference?: number;
    /** The domain name of the mail host for this MX record. */
    exchange?: string;
}

export declare class PrivateDnsManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the PrivateDnsManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: PrivateDnsManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    privateZones: PrivateZones;
    virtualNetworkLinks: VirtualNetworkLinks;
    recordSets: RecordSets;
}

/** Optional parameters. */
export declare interface PrivateDnsManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Describes a Private DNS zone. */
export declare interface PrivateZone extends TrackedResource {
    /** The ETag of the zone. */
    etag?: string;
    /**
     * The maximum number of record sets that can be created in this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxNumberOfRecordSets?: number;
    /**
     * The current number of record sets in this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly numberOfRecordSets?: number;
    /**
     * The maximum number of virtual networks that can be linked to this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxNumberOfVirtualNetworkLinks?: number;
    /**
     * The current number of virtual networks that are linked to this Private DNS zone. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly numberOfVirtualNetworkLinks?: number;
    /**
     * The maximum number of virtual networks that can be linked to this Private DNS zone with registration enabled. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxNumberOfVirtualNetworkLinksWithRegistration?: number;
    /**
     * The current number of virtual networks that are linked to this Private DNS zone with registration enabled. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly numberOfVirtualNetworkLinksWithRegistration?: number;
    /**
     * The provisioning state of the resource. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Private zone internal Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly internalId?: string;
}

/** The response to a Private DNS zone list operation. */
export declare interface PrivateZoneListResult {
    /** Information about the Private DNS zones. */
    value?: PrivateZone[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a PrivateZones. */
export declare interface PrivateZones {
    /**
     * Lists the Private DNS zones in all resource groups in a subscription.
     * @param options The options parameters.
     */
    list(options?: PrivateZonesListOptionalParams): PagedAsyncIterableIterator<PrivateZone>;
    /**
     * Lists the Private DNS zones within a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PrivateZonesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PrivateZone>;
    /**
     * Creates or updates a Private DNS zone. Does not modify Links to virtual networks or DNS records
     * within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateZoneName: string, parameters: PrivateZone, options?: PrivateZonesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateZonesCreateOrUpdateResponse>, PrivateZonesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a Private DNS zone. Does not modify Links to virtual networks or DNS records
     * within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateZoneName: string, parameters: PrivateZone, options?: PrivateZonesCreateOrUpdateOptionalParams): Promise<PrivateZonesCreateOrUpdateResponse>;
    /**
     * Updates a Private DNS zone. Does not modify virtual network links or DNS records within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, privateZoneName: string, parameters: PrivateZone, options?: PrivateZonesUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateZonesUpdateResponse>, PrivateZonesUpdateResponse>>;
    /**
     * Updates a Private DNS zone. Does not modify virtual network links or DNS records within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, privateZoneName: string, parameters: PrivateZone, options?: PrivateZonesUpdateOptionalParams): Promise<PrivateZonesUpdateResponse>;
    /**
     * Deletes a Private DNS zone. WARNING: All DNS records in the zone will also be deleted. This
     * operation cannot be undone. Private DNS zone cannot be deleted unless all virtual network links to
     * it are removed.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateZoneName: string, options?: PrivateZonesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a Private DNS zone. WARNING: All DNS records in the zone will also be deleted. This
     * operation cannot be undone. Private DNS zone cannot be deleted unless all virtual network links to
     * it are removed.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateZoneName: string, options?: PrivateZonesDeleteOptionalParams): Promise<void>;
    /**
     * Gets a Private DNS zone. Retrieves the zone properties, but not the virtual networks links or the
     * record sets within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateZoneName: string, options?: PrivateZonesGetOptionalParams): Promise<PrivateZonesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateZonesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new Private DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored. */
    ifNoneMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateZonesCreateOrUpdateResponse = PrivateZone;

/** Optional parameters. */
export declare interface PrivateZonesDeleteOptionalParams extends coreClient.OperationOptions {
    /** The ETag of the Private DNS zone. Omit this value to always delete the current zone. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateZonesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateZonesGetResponse = PrivateZone;

/** Optional parameters. */
export declare interface PrivateZonesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type PrivateZonesListByResourceGroupNextResponse = PrivateZoneListResult;

/** Optional parameters. */
export declare interface PrivateZonesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type PrivateZonesListByResourceGroupResponse = PrivateZoneListResult;

/** Optional parameters. */
export declare interface PrivateZonesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateZonesListNextResponse = PrivateZoneListResult;

/** Optional parameters. */
export declare interface PrivateZonesListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of Private DNS zones to return. If not specified, returns up to 100 zones. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type PrivateZonesListResponse = PrivateZoneListResult;

/** Optional parameters. */
export declare interface PrivateZonesUpdateOptionalParams extends coreClient.OperationOptions {
    /** The ETag of the Private DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type PrivateZonesUpdateResponse = PrivateZone;

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type ProvisioningState = string;

/** The resource model definition for an ARM proxy resource. */
export declare interface ProxyResource extends Resource {
}

/** A PTR record. */
export declare interface PtrRecord {
    /** The PTR target domain name for this PTR record. */
    ptrdname?: string;
}

/** Describes a DNS record set (a collection of DNS records with the same name and type) in a Private DNS zone. */
export declare interface RecordSet extends ProxyResource {
    /** The ETag of the record set. */
    etag?: string;
    /** The metadata attached to the record set. */
    metadata?: {
        [propertyName: string]: string;
    };
    /** The TTL (time-to-live) of the records in the record set. */
    ttl?: number;
    /**
     * Fully qualified domain name of the record set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fqdn?: string;
    /**
     * Is the record set auto-registered in the Private DNS zone through a virtual network link?
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isAutoRegistered?: boolean;
    /** The list of A records in the record set. */
    aRecords?: ARecord[];
    /** The list of AAAA records in the record set. */
    aaaaRecords?: AaaaRecord[];
    /** The CNAME record in the record set. */
    cnameRecord?: CnameRecord;
    /** The list of MX records in the record set. */
    mxRecords?: MxRecord[];
    /** The list of PTR records in the record set. */
    ptrRecords?: PtrRecord[];
    /** The SOA record in the record set. */
    soaRecord?: SoaRecord;
    /** The list of SRV records in the record set. */
    srvRecords?: SrvRecord[];
    /** The list of TXT records in the record set. */
    txtRecords?: TxtRecord[];
}

/** The response to a record set list operation. */
export declare interface RecordSetListResult {
    /** Information about the record sets in the response. */
    value?: RecordSet[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a RecordSets. */
export declare interface RecordSets {
    /**
     * Lists the record sets of a specified type in a Private DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param recordType The type of record sets to enumerate.
     * @param options The options parameters.
     */
    listByType(resourceGroupName: string, privateZoneName: string, recordType: RecordType, options?: RecordSetsListByTypeOptionalParams): PagedAsyncIterableIterator<RecordSet>;
    /**
     * Lists all record sets in a Private DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateZoneName: string, options?: RecordSetsListOptionalParams): PagedAsyncIterableIterator<RecordSet>;
    /**
     * Creates or updates a record set within a Private DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param recordType The type of DNS record in this record set. Record sets of type SOA can be updated
     *                   but not created (they are created when the Private DNS zone is created).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, privateZoneName: string, recordType: RecordType, relativeRecordSetName: string, parameters: RecordSet, options?: RecordSetsCreateOrUpdateOptionalParams): Promise<RecordSetsCreateOrUpdateResponse>;
    /**
     * Updates a record set within a Private DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param recordType The type of DNS record in this record set.
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, privateZoneName: string, recordType: RecordType, relativeRecordSetName: string, parameters: RecordSet, options?: RecordSetsUpdateOptionalParams): Promise<RecordSetsUpdateResponse>;
    /**
     * Deletes a record set from a Private DNS zone. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param recordType The type of DNS record in this record set. Record sets of type SOA cannot be
     *                   deleted (they are deleted when the Private DNS zone is deleted).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, privateZoneName: string, recordType: RecordType, relativeRecordSetName: string, options?: RecordSetsDeleteOptionalParams): Promise<void>;
    /**
     * Gets a record set.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param recordType The type of DNS record in this record set.
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateZoneName: string, recordType: RecordType, relativeRecordSetName: string, options?: RecordSetsGetOptionalParams): Promise<RecordSetsGetResponse>;
}

/** Optional parameters. */
export declare interface RecordSetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** The ETag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored. */
    ifNoneMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type RecordSetsCreateOrUpdateResponse = RecordSet;

/** Optional parameters. */
export declare interface RecordSetsDeleteOptionalParams extends coreClient.OperationOptions {
    /** The ETag of the record set. Omit this value to always delete the current record set. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. */
    ifMatch?: string;
}

/** Optional parameters. */
export declare interface RecordSetsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RecordSetsGetResponse = RecordSet;

/** Optional parameters. */
export declare interface RecordSetsListByTypeNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByTypeNext operation. */
export declare type RecordSetsListByTypeNextResponse = RecordSetListResult;

/** Optional parameters. */
export declare interface RecordSetsListByTypeOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
    /** The suffix label of the record set name to be used to filter the record set enumeration. If this parameter is specified, the returned enumeration will only contain records that end with ".<recordsetnamesuffix>". */
    recordsetnamesuffix?: string;
}

/** Contains response data for the listByType operation. */
export declare type RecordSetsListByTypeResponse = RecordSetListResult;

/** Optional parameters. */
export declare interface RecordSetsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type RecordSetsListNextResponse = RecordSetListResult;

/** Optional parameters. */
export declare interface RecordSetsListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
    /** The suffix label of the record set name to be used to filter the record set enumeration. If this parameter is specified, the returned enumeration will only contain records that end with ".<recordsetnamesuffix>". */
    recordsetnamesuffix?: string;
}

/** Contains response data for the list operation. */
export declare type RecordSetsListResponse = RecordSetListResult;

/** Optional parameters. */
export declare interface RecordSetsUpdateOptionalParams extends coreClient.OperationOptions {
    /** The ETag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. */
    ifMatch?: string;
}

/** Contains response data for the update operation. */
export declare type RecordSetsUpdateResponse = RecordSet;

/** Defines values for RecordType. */
export declare type RecordType = "A" | "AAAA" | "CNAME" | "MX" | "PTR" | "SOA" | "SRV" | "TXT";

/** The core properties of ARM resources */
export declare interface Resource {
    /**
     * Fully qualified resource Id for the resource. Example - '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateDnsZoneName}'.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. Example - 'Microsoft.Network/privateDnsZones'.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** An SOA record. */
export declare interface SoaRecord {
    /** The domain name of the authoritative name server for this SOA record. */
    host?: string;
    /** The email contact for this SOA record. */
    email?: string;
    /** The serial number for this SOA record. */
    serialNumber?: number;
    /** The refresh value for this SOA record. */
    refreshTime?: number;
    /** The retry time for this SOA record. */
    retryTime?: number;
    /** The expire time for this SOA record. */
    expireTime?: number;
    /** The minimum value for this SOA record. By convention this is used to determine the negative caching duration. */
    minimumTtl?: number;
}

/** An SRV record. */
export declare interface SrvRecord {
    /** The priority value for this SRV record. */
    priority?: number;
    /** The weight value for this SRV record. */
    weight?: number;
    /** The port value for this SRV record. */
    port?: number;
    /** The target domain name for this SRV record. */
    target?: string;
}

/** Reference to another subresource. */
export declare interface SubResource {
    /** Resource ID. */
    id?: string;
}

/** The resource model definition for a ARM tracked top level resource */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The Azure Region where the resource lives */
    location?: string;
}

/** A TXT record. */
export declare interface TxtRecord {
    /** The text value of this TXT record. */
    value?: string[];
}

/** Describes a link to virtual network for a Private DNS zone. */
export declare interface VirtualNetworkLink extends TrackedResource {
    /** The ETag of the virtual network link. */
    etag?: string;
    /** The reference of the virtual network. */
    virtualNetwork?: SubResource;
    /** Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled? */
    registrationEnabled?: boolean;
    /**
     * The status of the virtual network link to the Private DNS zone. Possible values are 'InProgress' and 'Done'. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualNetworkLinkState?: VirtualNetworkLinkState;
    /**
     * The provisioning state of the resource. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** The response to a list virtual network link to Private DNS zone operation. */
export declare interface VirtualNetworkLinkListResult {
    /** Information about the virtual network links to the Private DNS zones. */
    value?: VirtualNetworkLink[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a VirtualNetworkLinks. */
export declare interface VirtualNetworkLinks {
    /**
     * Lists the virtual network links to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateZoneName: string, options?: VirtualNetworkLinksListOptionalParams): PagedAsyncIterableIterator<VirtualNetworkLink>;
    /**
     * Creates or updates a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, parameters: VirtualNetworkLink, options?: VirtualNetworkLinksCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<VirtualNetworkLinksCreateOrUpdateResponse>, VirtualNetworkLinksCreateOrUpdateResponse>>;
    /**
     * Creates or updates a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, parameters: VirtualNetworkLink, options?: VirtualNetworkLinksCreateOrUpdateOptionalParams): Promise<VirtualNetworkLinksCreateOrUpdateResponse>;
    /**
     * Updates a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, parameters: VirtualNetworkLink, options?: VirtualNetworkLinksUpdateOptionalParams): Promise<SimplePollerLike<OperationState<VirtualNetworkLinksUpdateResponse>, VirtualNetworkLinksUpdateResponse>>;
    /**
     * Updates a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, parameters: VirtualNetworkLink, options?: VirtualNetworkLinksUpdateOptionalParams): Promise<VirtualNetworkLinksUpdateResponse>;
    /**
     * Deletes a virtual network link to the specified Private DNS zone. WARNING: In case of a registration
     * virtual network, all auto-registered DNS records in the zone for the virtual network will also be
     * deleted. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, options?: VirtualNetworkLinksDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a virtual network link to the specified Private DNS zone. WARNING: In case of a registration
     * virtual network, all auto-registered DNS records in the zone for the virtual network will also be
     * deleted. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, options?: VirtualNetworkLinksDeleteOptionalParams): Promise<void>;
    /**
     * Gets a virtual network link to the specified Private DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param privateZoneName The name of the Private DNS zone (without a terminating dot).
     * @param virtualNetworkLinkName The name of the virtual network link.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateZoneName: string, virtualNetworkLinkName: string, options?: VirtualNetworkLinksGetOptionalParams): Promise<VirtualNetworkLinksGetResponse>;
}

/** Optional parameters. */
export declare interface VirtualNetworkLinksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** The ETag of the virtual network link to the Private DNS zone. Omit this value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new virtual network link to the Private DNS zone to be created, but to prevent updating an existing link. Other values will be ignored. */
    ifNoneMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualNetworkLinksCreateOrUpdateResponse = VirtualNetworkLink;

/** Optional parameters. */
export declare interface VirtualNetworkLinksDeleteOptionalParams extends coreClient.OperationOptions {
    /** The ETag of the virtual network link to the Private DNS zone. Omit this value to always delete the current zone. Specify the last-seen ETag value to prevent accidentally deleting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualNetworkLinksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualNetworkLinksGetResponse = VirtualNetworkLink;

/** Optional parameters. */
export declare interface VirtualNetworkLinksListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type VirtualNetworkLinksListNextResponse = VirtualNetworkLinkListResult;

/** Optional parameters. */
export declare interface VirtualNetworkLinksListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of virtual network links to return. If not specified, returns up to 100 virtual network links. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type VirtualNetworkLinksListResponse = VirtualNetworkLinkListResult;

/**
 * Defines values for VirtualNetworkLinkState. \
 * {@link KnownVirtualNetworkLinkState} can be used interchangeably with VirtualNetworkLinkState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Completed**
 */
export declare type VirtualNetworkLinkState = string;

/** Optional parameters. */
export declare interface VirtualNetworkLinksUpdateOptionalParams extends coreClient.OperationOptions {
    /** The ETag of the virtual network link to the Private DNS zone. Omit this value to always overwrite the current virtual network link. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type VirtualNetworkLinksUpdateResponse = VirtualNetworkLink;

export { }
