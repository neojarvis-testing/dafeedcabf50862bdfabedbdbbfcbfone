/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { NetworkManagementClient } from "../src/networkManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Network test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroupName;
    let virtualNetworkName;
    let subnetName;
    let ipGroupName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new NetworkManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroupName = "myjstest";
            virtualNetworkName = "virtualnetworkzzz";
            subnetName = "subnetzzz";
            ipGroupName = "ipgroupyyy";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("virtualNetworks create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, {
                addressSpace: {
                    addressPrefixes: ["10.0.0.0/16"],
                },
                location: "eastus",
            }, testPollingOptions);
        });
    });
    it("subnets create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.subnets.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, subnetName, { addressPrefix: "10.0.0.0/24" }, testPollingOptions);
        });
    });
    it("ipGroups create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.ipGroups.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, {
                tags: {
                    key1: "value1",
                },
                location: "eastus",
                ipAddresses: ["13.64.39.16/32", "40.74.146.80/31", "40.74.147.32/28"],
            }, testPollingOptions);
        });
    });
    it("virtualNetworks get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.virtualNetworks.get(resourceGroupName, virtualNetworkName);
            assert.equal(res.name, virtualNetworkName);
        });
    });
    it("subnets get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.subnets.get(resourceGroupName, virtualNetworkName, subnetName);
            assert.equal(res.name, subnetName);
        });
    });
    it("ipGroups get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.ipGroups.get(resourceGroupName, virtualNetworkName);
            assert.equal(res.type, "Microsoft.Network/IpGroups");
        });
    });
    it("virtualNetworks list test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.virtualNetworks.list(resourceGroupName)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            ;
            assert.equal(resArray.length, 1);
        });
    });
    it("subnets list test", function () {
        var _a, e_2, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.subnets.list(resourceGroupName, virtualNetworkName)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            ;
            assert.equal(resArray.length, 1);
        });
    });
    it("ipGroups list test", function () {
        var _a, e_3, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.ipGroups.listByResourceGroup(resourceGroupName)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            ;
            assert.equal(resArray.length, 1);
        });
    });
    it("virtualNetworks updatetags test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.virtualNetworks.updateTags(resourceGroupName, virtualNetworkName, { tags: { tag1: "value1", tag2: "value2" } });
            assert.equal(res.name, virtualNetworkName);
        });
    });
    it("ipGroups beginDeleteAndWait test", function () {
        var _a, e_4, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.ipGroups.beginDeleteAndWait(resourceGroupName, virtualNetworkName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.ipGroups.listByResourceGroup(resourceGroupName)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
            ;
            assert.equal(resArray.length, 0);
        });
    });
    it("subnets beginDeleteAndWait test", function () {
        var _a, e_5, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.subnets.beginDeleteAndWait(resourceGroupName, virtualNetworkName, subnetName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.subnets.list(resourceGroupName, virtualNetworkName)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_5) throw e_5.error; }
            }
            ;
            assert.equal(resArray.length, 0);
        });
    });
    it("virtualNetworks beginDeleteAndWait test", function () {
        var _a, e_6, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.virtualNetworks.beginDeleteAndWait(resourceGroupName, virtualNetworkName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.virtualNetworks.list(resourceGroupName)), _f; _f = yield _e.next(), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        let item = _c;
                        resArray.push(item);
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_6) throw e_6.error; }
            }
            ;
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=network_examples.js.map