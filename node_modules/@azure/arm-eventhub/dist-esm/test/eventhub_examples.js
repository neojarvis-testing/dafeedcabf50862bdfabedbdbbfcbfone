/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { EventHubManagementClient } from "../src/eventHubManagementClient";
import { StorageManagementClient } from "@azure/arm-storage";
import { NetworkManagementClient } from "@azure/arm-network";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Eventhub test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroupName;
    let storageAccountName;
    let subnetName;
    let eventhubName;
    let namespaceName;
    let virtualNetworkName;
    let storage_client;
    let network_client;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new EventHubManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            storage_client = new StorageManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            network_client = new NetworkManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroupName = "myjstest";
            subnetName = "subnetxxx";
            eventhubName = "myeventhubxxx";
            namespaceName = "mynamespacexxx";
            virtualNetworkName = "myvirtualnetwork";
            storageAccountName = "mystorageaccountxxx11";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    // virtualNetworks.beginCreateOrUpdateAndWait
    // subnets.beginCreateOrUpdateAndWait
    function createVirtualNetwork() {
        return __awaiter(this, void 0, void 0, function* () {
            const parameter = {
                location: location,
                addressSpace: {
                    addressPrefixes: ["10.0.0.0/16"],
                },
            };
            const network_create = yield network_client.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, parameter, testPollingOptions);
            const subnet_info = yield network_client.subnets.beginCreateOrUpdateAndWait(resourceGroupName, virtualNetworkName, subnetName, { addressPrefix: "10.0.0.0/24" }, testPollingOptions);
        });
    }
    //storageAccounts.beginCreateAndWait
    function storageAccounts_beginCreateAndWait() {
        return __awaiter(this, void 0, void 0, function* () {
            const parameter = {
                sku: {
                    name: "Standard_GRS",
                },
                kind: "StorageV2",
                location: location,
            };
            const storageaccount = yield storage_client.storageAccounts.beginCreateAndWait(resourceGroupName, storageAccountName, parameter, testPollingOptions);
            console.log(storageaccount);
        });
    }
    it("namespaces create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield createVirtualNetwork();
            yield storageAccounts_beginCreateAndWait();
            const res = yield client.namespaces.beginCreateOrUpdateAndWait(resourceGroupName, namespaceName, {
                sku: {
                    name: "Standard",
                    tier: "Standard",
                },
                location: location,
                tags: {
                    tag1: "value1",
                    tag2: "value2",
                }
            }, testPollingOptions);
            assert.equal(res.name, "mynamespacexxx");
        });
    });
    it("eventHubs create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.eventHubs.createOrUpdate(resourceGroupName, namespaceName, eventhubName, {
                messageRetentionInDays: 4,
                partitionCount: 4,
                status: "Active",
                captureDescription: {
                    enabled: true,
                    encoding: "Avro",
                    intervalInSeconds: 120,
                    sizeLimitInBytes: 10485763,
                    destination: {
                        name: "EventHubArchive.AzureBlockBlob",
                        storageAccountResourceId: "/subscriptions/" +
                            subscriptionId +
                            "/resourceGroups/" +
                            resourceGroupName +
                            "/providers/Microsoft.Storage/storageAccounts/" +
                            storageAccountName,
                        blobContainer: "container",
                        archiveNameFormat: "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}",
                    }
                }
            });
            assert.equal(res.name, "myeventhubxxx");
        });
    });
    it("eventHubs get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.eventHubs.get(resourceGroupName, namespaceName, eventhubName);
            console.log(res.type, "Microsoft.EventHub/Namespaces/EventHubs");
        });
    });
    it("eventHubs listByNamespace test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.eventHubs.listByNamespace(resourceGroupName, namespaceName)), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("eventHubs delete test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.eventHubs.delete(resourceGroupName, namespaceName, eventhubName);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.eventHubs.listByNamespace(resourceGroupName, namespaceName)), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("namespaces delete test", function () {
        var e_3, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.namespaces.beginDeleteAndWait(resourceGroupName, namespaceName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.namespaces.listByResourceGroup(resourceGroupName)), _c; _c = yield _b.next(), !_c.done;) {
                    const item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=eventhub_examples.js.map