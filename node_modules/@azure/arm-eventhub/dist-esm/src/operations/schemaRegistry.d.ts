import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SchemaRegistry } from "../operationsInterfaces";
import { EventHubManagementClient } from "../eventHubManagementClient";
import { SchemaGroup, SchemaRegistryListByNamespaceOptionalParams, SchemaRegistryCreateOrUpdateOptionalParams, SchemaRegistryCreateOrUpdateResponse, SchemaRegistryDeleteOptionalParams, SchemaRegistryGetOptionalParams, SchemaRegistryGetResponse } from "../models";
/** Class containing SchemaRegistry operations. */
export declare class SchemaRegistryImpl implements SchemaRegistry {
    private readonly client;
    /**
     * Initialize a new instance of the class SchemaRegistry class.
     * @param client Reference to the service client
     */
    constructor(client: EventHubManagementClient);
    /**
     * Gets all the Schema Groups in a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: SchemaRegistryListByNamespaceOptionalParams): PagedAsyncIterableIterator<SchemaGroup>;
    private listByNamespacePagingPage;
    private listByNamespacePagingAll;
    /**
     * Gets all the Schema Groups in a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    private _listByNamespace;
    /**
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param schemaGroupName The Schema Group name
     * @param parameters Parameters supplied to create an Event Hub resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, schemaGroupName: string, parameters: SchemaGroup, options?: SchemaRegistryCreateOrUpdateOptionalParams): Promise<SchemaRegistryCreateOrUpdateResponse>;
    /**
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param schemaGroupName The Schema Group name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, schemaGroupName: string, options?: SchemaRegistryDeleteOptionalParams): Promise<void>;
    /**
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param schemaGroupName The Schema Group name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, schemaGroupName: string, options?: SchemaRegistryGetOptionalParams): Promise<SchemaRegistryGetResponse>;
    /**
     * ListByNamespaceNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param nextLink The nextLink from the previous successful call to the ListByNamespace method.
     * @param options The options parameters.
     */
    private _listByNamespaceNext;
}
//# sourceMappingURL=schemaRegistry.d.ts.map