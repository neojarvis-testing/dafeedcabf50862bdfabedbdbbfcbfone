/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing ConsumerGroups operations. */
export class ConsumerGroupsImpl {
    /**
     * Initialize a new instance of the class ConsumerGroups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists
     * in the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param options The options parameters.
     */
    listByEventHub(resourceGroupName, namespaceName, eventHubName, options) {
        const iter = this.listByEventHubPagingAll(resourceGroupName, namespaceName, eventHubName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByEventHubPagingPage(resourceGroupName, namespaceName, eventHubName, options, settings);
            }
        };
    }
    listByEventHubPagingPage(resourceGroupName, namespaceName, eventHubName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByEventHubPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByEventHub(resourceGroupName, namespaceName, eventHubName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByEventHubNext(resourceGroupName, namespaceName, eventHubName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByEventHubPagingAll(resourceGroupName, namespaceName, eventHubName, options) {
        return __asyncGenerator(this, arguments, function* listByEventHubPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listByEventHubPagingPage(resourceGroupName, namespaceName, eventHubName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates or updates an Event Hubs consumer group as a nested resource within a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param consumerGroupName The consumer group name
     * @param parameters Parameters supplied to create or update a consumer group resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, eventHubName, consumerGroupName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            consumerGroupName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes a consumer group from the specified Event Hub and resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param consumerGroupName The consumer group name
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, eventHubName, consumerGroupName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            consumerGroupName,
            options
        }, deleteOperationSpec);
    }
    /**
     * Gets a description for the specified consumer group.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param consumerGroupName The consumer group name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, eventHubName, consumerGroupName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            consumerGroupName,
            options
        }, getOperationSpec);
    }
    /**
     * Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists
     * in the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param options The options parameters.
     */
    _listByEventHub(resourceGroupName, namespaceName, eventHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, eventHubName, options }, listByEventHubOperationSpec);
    }
    /**
     * ListByEventHubNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param nextLink The nextLink from the previous successful call to the ListByEventHub method.
     * @param options The options parameters.
     */
    _listByEventHubNext(resourceGroupName, namespaceName, eventHubName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, eventHubName, nextLink, options }, listByEventHubNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ConsumerGroup
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters10,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName,
        Parameters.eventHubName,
        Parameters.consumerGroupName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName,
        Parameters.eventHubName,
        Parameters.consumerGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConsumerGroup
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName,
        Parameters.eventHubName,
        Parameters.consumerGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByEventHubOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConsumerGroupListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.namespaceName,
        Parameters.eventHubName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByEventHubNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ConsumerGroupListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.namespaceName,
        Parameters.eventHubName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=consumerGroups.js.map