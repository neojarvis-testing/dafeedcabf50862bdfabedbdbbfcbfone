/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Cluster as ClusterMapper, ClusterQuotaConfigurationProperties as ClusterQuotaConfigurationPropertiesMapper, EHNamespace as EHNamespaceMapper, NetworkRuleSet as NetworkRuleSetMapper, AuthorizationRule as AuthorizationRuleMapper, RegenerateAccessKeyParameters as RegenerateAccessKeyParametersMapper, CheckNameAvailabilityParameter as CheckNameAvailabilityParameterMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, Eventhub as EventhubMapper, ArmDisasterRecovery as ArmDisasterRecoveryMapper, ConsumerGroup as ConsumerGroupMapper, SchemaGroup as SchemaGroupMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const clusterName = {
    parameterPath: "clusterName",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 6
        },
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: ClusterMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: ClusterQuotaConfigurationPropertiesMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: EHNamespaceMapper
};
export const namespaceName = {
    parameterPath: "namespaceName",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 6
        },
        serializedName: "namespaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters3 = {
    parameterPath: "parameters",
    mapper: NetworkRuleSetMapper
};
export const parameters4 = {
    parameterPath: "parameters",
    mapper: AuthorizationRuleMapper
};
export const authorizationRuleName = {
    parameterPath: "authorizationRuleName",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "authorizationRuleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters5 = {
    parameterPath: "parameters",
    mapper: RegenerateAccessKeyParametersMapper
};
export const parameters6 = {
    parameterPath: "parameters",
    mapper: CheckNameAvailabilityParameterMapper
};
export const parameters7 = {
    parameterPath: "parameters",
    mapper: PrivateEndpointConnectionMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 0
        },
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const parameters8 = {
    parameterPath: "parameters",
    mapper: EventhubMapper
};
export const eventHubName = {
    parameterPath: "eventHubName",
    mapper: {
        constraints: {
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "eventHubName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters9 = {
    parameterPath: "parameters",
    mapper: ArmDisasterRecoveryMapper
};
export const alias = {
    parameterPath: "alias",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 1
        },
        serializedName: "alias",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters10 = {
    parameterPath: "parameters",
    mapper: ConsumerGroupMapper
};
export const consumerGroupName = {
    parameterPath: "consumerGroupName",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 1
        },
        serializedName: "consumerGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters11 = {
    parameterPath: "parameters",
    mapper: SchemaGroupMapper
};
export const schemaGroupName = {
    parameterPath: "schemaGroupName",
    mapper: {
        constraints: {
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "schemaGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map