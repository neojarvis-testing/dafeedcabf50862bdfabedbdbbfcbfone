'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ClusterSkuName} that the service accepts. */
exports.KnownClusterSkuName = void 0;
(function (KnownClusterSkuName) {
    /** Dedicated */
    KnownClusterSkuName["Dedicated"] = "Dedicated";
})(exports.KnownClusterSkuName || (exports.KnownClusterSkuName = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link SkuName} that the service accepts. */
exports.KnownSkuName = void 0;
(function (KnownSkuName) {
    /** Basic */
    KnownSkuName["Basic"] = "Basic";
    /** Standard */
    KnownSkuName["Standard"] = "Standard";
    /** Premium */
    KnownSkuName["Premium"] = "Premium";
})(exports.KnownSkuName || (exports.KnownSkuName = {}));
/** Known values of {@link SkuTier} that the service accepts. */
exports.KnownSkuTier = void 0;
(function (KnownSkuTier) {
    /** Basic */
    KnownSkuTier["Basic"] = "Basic";
    /** Standard */
    KnownSkuTier["Standard"] = "Standard";
    /** Premium */
    KnownSkuTier["Premium"] = "Premium";
})(exports.KnownSkuTier || (exports.KnownSkuTier = {}));
/** Known values of {@link PrivateLinkConnectionStatus} that the service accepts. */
exports.KnownPrivateLinkConnectionStatus = void 0;
(function (KnownPrivateLinkConnectionStatus) {
    /** Pending */
    KnownPrivateLinkConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateLinkConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateLinkConnectionStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownPrivateLinkConnectionStatus["Disconnected"] = "Disconnected";
})(exports.KnownPrivateLinkConnectionStatus || (exports.KnownPrivateLinkConnectionStatus = {}));
/** Known values of {@link EndPointProvisioningState} that the service accepts. */
exports.KnownEndPointProvisioningState = void 0;
(function (KnownEndPointProvisioningState) {
    /** Creating */
    KnownEndPointProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownEndPointProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownEndPointProvisioningState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownEndPointProvisioningState["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownEndPointProvisioningState["Canceled"] = "Canceled";
    /** Failed */
    KnownEndPointProvisioningState["Failed"] = "Failed";
})(exports.KnownEndPointProvisioningState || (exports.KnownEndPointProvisioningState = {}));
/** Known values of {@link DefaultAction} that the service accepts. */
exports.KnownDefaultAction = void 0;
(function (KnownDefaultAction) {
    /** Allow */
    KnownDefaultAction["Allow"] = "Allow";
    /** Deny */
    KnownDefaultAction["Deny"] = "Deny";
})(exports.KnownDefaultAction || (exports.KnownDefaultAction = {}));
/** Known values of {@link NetworkRuleIPAction} that the service accepts. */
exports.KnownNetworkRuleIPAction = void 0;
(function (KnownNetworkRuleIPAction) {
    /** Allow */
    KnownNetworkRuleIPAction["Allow"] = "Allow";
})(exports.KnownNetworkRuleIPAction || (exports.KnownNetworkRuleIPAction = {}));
/** Known values of {@link PublicNetworkAccessFlag} that the service accepts. */
exports.KnownPublicNetworkAccessFlag = void 0;
(function (KnownPublicNetworkAccessFlag) {
    /** Enabled */
    KnownPublicNetworkAccessFlag["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccessFlag["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccessFlag || (exports.KnownPublicNetworkAccessFlag = {}));
/** Known values of {@link AccessRights} that the service accepts. */
exports.KnownAccessRights = void 0;
(function (KnownAccessRights) {
    /** Manage */
    KnownAccessRights["Manage"] = "Manage";
    /** Send */
    KnownAccessRights["Send"] = "Send";
    /** Listen */
    KnownAccessRights["Listen"] = "Listen";
})(exports.KnownAccessRights || (exports.KnownAccessRights = {}));
/** Known values of {@link KeyType} that the service accepts. */
exports.KnownKeyType = void 0;
(function (KnownKeyType) {
    /** PrimaryKey */
    KnownKeyType["PrimaryKey"] = "PrimaryKey";
    /** SecondaryKey */
    KnownKeyType["SecondaryKey"] = "SecondaryKey";
})(exports.KnownKeyType || (exports.KnownKeyType = {}));
/** Known values of {@link SchemaCompatibility} that the service accepts. */
exports.KnownSchemaCompatibility = void 0;
(function (KnownSchemaCompatibility) {
    /** None */
    KnownSchemaCompatibility["None"] = "None";
    /** Backward */
    KnownSchemaCompatibility["Backward"] = "Backward";
    /** Forward */
    KnownSchemaCompatibility["Forward"] = "Forward";
})(exports.KnownSchemaCompatibility || (exports.KnownSchemaCompatibility = {}));
/** Known values of {@link SchemaType} that the service accepts. */
exports.KnownSchemaType = void 0;
(function (KnownSchemaType) {
    /** Unknown */
    KnownSchemaType["Unknown"] = "Unknown";
    /** Avro */
    KnownSchemaType["Avro"] = "Avro";
})(exports.KnownSchemaType || (exports.KnownSchemaType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const AvailableClustersList = {
    type: {
        name: "Composite",
        className: "AvailableClustersList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AvailableCluster"
                        }
                    }
                }
            }
        }
    }
};
const AvailableCluster = {
    type: {
        name: "Composite",
        className: "AvailableCluster",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ClusterListResult = {
    type: {
        name: "Composite",
        className: "ClusterListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Cluster"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterSku = {
    type: {
        name: "Composite",
        className: "ClusterSku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            capacity: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EHNamespaceIdListResult = {
    type: {
        name: "Composite",
        className: "EHNamespaceIdListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EHNamespaceIdContainer"
                        }
                    }
                }
            }
        }
    }
};
const EHNamespaceIdContainer = {
    type: {
        name: "Composite",
        className: "EHNamespaceIdContainer",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterQuotaConfigurationProperties = {
    type: {
        name: "Composite",
        className: "ClusterQuotaConfigurationProperties",
        modelProperties: {
            settings: {
                serializedName: "settings",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const EHNamespaceListResult = {
    type: {
        name: "Composite",
        className: "EHNamespaceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EHNamespace"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "String"
                }
            },
            capacity: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Identity = {
    type: {
        name: "Composite",
        className: "Identity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "SystemAssigned",
                        "UserAssigned",
                        "SystemAssigned, UserAssigned",
                        "None"
                    ]
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserAssignedIdentity" }
                    }
                }
            }
        }
    }
};
const UserAssignedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Encryption = {
    type: {
        name: "Composite",
        className: "Encryption",
        modelProperties: {
            keyVaultProperties: {
                serializedName: "keyVaultProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KeyVaultProperties"
                        }
                    }
                }
            },
            keySource: {
                defaultValue: "Microsoft.KeyVault",
                isConstant: true,
                serializedName: "keySource",
                type: {
                    name: "String"
                }
            },
            requireInfrastructureEncryption: {
                serializedName: "requireInfrastructureEncryption",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const KeyVaultProperties = {
    type: {
        name: "Composite",
        className: "KeyVaultProperties",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                type: {
                    name: "String"
                }
            },
            keyVaultUri: {
                serializedName: "keyVaultUri",
                type: {
                    name: "String"
                }
            },
            keyVersion: {
                serializedName: "keyVersion",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "UserAssignedIdentityProperties"
                }
            }
        }
    }
};
const UserAssignedIdentityProperties = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentityProperties",
        modelProperties: {
            userAssignedIdentity: {
                serializedName: "userAssignedIdentity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConnectionState = {
    type: {
        name: "Composite",
        className: "ConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionListResult = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourcesListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourcesListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            groupId: {
                serializedName: "properties.groupId",
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "properties.requiredMembers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventHubListResult = {
    type: {
        name: "Composite",
        className: "EventHubListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Eventhub"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CaptureDescription = {
    type: {
        name: "Composite",
        className: "CaptureDescription",
        modelProperties: {
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean"
                }
            },
            encoding: {
                serializedName: "encoding",
                type: {
                    name: "Enum",
                    allowedValues: ["Avro", "AvroDeflate"]
                }
            },
            intervalInSeconds: {
                serializedName: "intervalInSeconds",
                type: {
                    name: "Number"
                }
            },
            sizeLimitInBytes: {
                serializedName: "sizeLimitInBytes",
                type: {
                    name: "Number"
                }
            },
            destination: {
                serializedName: "destination",
                type: {
                    name: "Composite",
                    className: "Destination"
                }
            },
            skipEmptyArchives: {
                serializedName: "skipEmptyArchives",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const Destination = {
    type: {
        name: "Composite",
        className: "Destination",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            storageAccountResourceId: {
                serializedName: "properties.storageAccountResourceId",
                type: {
                    name: "String"
                }
            },
            blobContainer: {
                serializedName: "properties.blobContainer",
                type: {
                    name: "String"
                }
            },
            archiveNameFormat: {
                serializedName: "properties.archiveNameFormat",
                type: {
                    name: "String"
                }
            },
            dataLakeSubscriptionId: {
                serializedName: "properties.dataLakeSubscriptionId",
                type: {
                    name: "Uuid"
                }
            },
            dataLakeAccountName: {
                serializedName: "properties.dataLakeAccountName",
                type: {
                    name: "String"
                }
            },
            dataLakeFolderPath: {
                serializedName: "properties.dataLakeFolderPath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityParameter = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityParameter",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityResult = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityResult",
        modelProperties: {
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "None",
                        "InvalidName",
                        "SubscriptionIsDisabled",
                        "NameInUse",
                        "NameInLockdown",
                        "TooManyNamespaceInCurrentSubscription"
                    ]
                }
            }
        }
    }
};
const ArmDisasterRecoveryListResult = {
    type: {
        name: "Composite",
        className: "ArmDisasterRecoveryListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ArmDisasterRecovery"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NWRuleSetVirtualNetworkRules = {
    type: {
        name: "Composite",
        className: "NWRuleSetVirtualNetworkRules",
        modelProperties: {
            subnet: {
                serializedName: "subnet",
                type: {
                    name: "Composite",
                    className: "Subnet"
                }
            },
            ignoreMissingVnetServiceEndpoint: {
                serializedName: "ignoreMissingVnetServiceEndpoint",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const Subnet = {
    type: {
        name: "Composite",
        className: "Subnet",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NWRuleSetIpRules = {
    type: {
        name: "Composite",
        className: "NWRuleSetIpRules",
        modelProperties: {
            ipMask: {
                serializedName: "ipMask",
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NetworkRuleSetListResult = {
    type: {
        name: "Composite",
        className: "NetworkRuleSetListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkRuleSet"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AuthorizationRuleListResult = {
    type: {
        name: "Composite",
        className: "AuthorizationRuleListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AuthorizationRule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccessKeys = {
    type: {
        name: "Composite",
        className: "AccessKeys",
        modelProperties: {
            primaryConnectionString: {
                serializedName: "primaryConnectionString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            secondaryConnectionString: {
                serializedName: "secondaryConnectionString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            aliasPrimaryConnectionString: {
                serializedName: "aliasPrimaryConnectionString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            aliasSecondaryConnectionString: {
                serializedName: "aliasSecondaryConnectionString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            primaryKey: {
                serializedName: "primaryKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            secondaryKey: {
                serializedName: "secondaryKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            keyName: {
                serializedName: "keyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegenerateAccessKeyParameters = {
    type: {
        name: "Composite",
        className: "RegenerateAccessKeyParameters",
        modelProperties: {
            keyType: {
                serializedName: "keyType",
                required: true,
                type: {
                    name: "String"
                }
            },
            key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConsumerGroupListResult = {
    type: {
        name: "Composite",
        className: "ConsumerGroupListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ConsumerGroup"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SchemaGroupListResult = {
    type: {
        name: "Composite",
        className: "SchemaGroupListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SchemaGroup"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "ConnectionState"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            } })
    }
};
const Eventhub = {
    type: {
        name: "Composite",
        className: "Eventhub",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, partitionIds: {
                serializedName: "properties.partitionIds",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, messageRetentionInDays: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "properties.messageRetentionInDays",
                type: {
                    name: "Number"
                }
            }, partitionCount: {
                constraints: {
                    InclusiveMinimum: 1
                },
                serializedName: "properties.partitionCount",
                type: {
                    name: "Number"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Active",
                        "Disabled",
                        "Restoring",
                        "SendDisabled",
                        "ReceiveDisabled",
                        "Creating",
                        "Deleting",
                        "Renaming",
                        "Unknown"
                    ]
                }
            }, captureDescription: {
                serializedName: "properties.captureDescription",
                type: {
                    name: "Composite",
                    className: "CaptureDescription"
                }
            } })
    }
};
const ArmDisasterRecovery = {
    type: {
        name: "Composite",
        className: "ArmDisasterRecovery",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Accepted", "Succeeded", "Failed"]
                }
            }, partnerNamespace: {
                serializedName: "properties.partnerNamespace",
                type: {
                    name: "String"
                }
            }, alternateName: {
                serializedName: "properties.alternateName",
                type: {
                    name: "String"
                }
            }, role: {
                serializedName: "properties.role",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Primary", "PrimaryNotReplicating", "Secondary"]
                }
            }, pendingReplicationOperationsCount: {
                serializedName: "properties.pendingReplicationOperationsCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const NetworkRuleSet = {
    type: {
        name: "Composite",
        className: "NetworkRuleSet",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, trustedServiceAccessEnabled: {
                serializedName: "properties.trustedServiceAccessEnabled",
                type: {
                    name: "Boolean"
                }
            }, defaultAction: {
                serializedName: "properties.defaultAction",
                type: {
                    name: "String"
                }
            }, virtualNetworkRules: {
                serializedName: "properties.virtualNetworkRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NWRuleSetVirtualNetworkRules"
                        }
                    }
                }
            }, ipRules: {
                serializedName: "properties.ipRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NWRuleSetIpRules"
                        }
                    }
                }
            }, publicNetworkAccess: {
                defaultValue: "Enabled",
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            } })
    }
};
const AuthorizationRule = {
    type: {
        name: "Composite",
        className: "AuthorizationRule",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, rights: {
                serializedName: "properties.rights",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ConsumerGroup = {
    type: {
        name: "Composite",
        className: "ConsumerGroup",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, userMetadata: {
                serializedName: "properties.userMetadata",
                type: {
                    name: "String"
                }
            } })
    }
};
const SchemaGroup = {
    type: {
        name: "Composite",
        className: "SchemaGroup",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, updatedAtUtc: {
                serializedName: "properties.updatedAtUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, createdAtUtc: {
                serializedName: "properties.createdAtUtc",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, eTag: {
                serializedName: "properties.eTag",
                readOnly: true,
                type: {
                    name: "Uuid"
                }
            }, groupProperties: {
                serializedName: "properties.groupProperties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, schemaCompatibility: {
                serializedName: "properties.schemaCompatibility",
                type: {
                    name: "String"
                }
            }, schemaType: {
                serializedName: "properties.schemaType",
                type: {
                    name: "String"
                }
            } })
    }
};
const Cluster = {
    type: {
        name: "Composite",
        className: "Cluster",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ClusterSku"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, metricId: {
                serializedName: "properties.metricId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const EHNamespace = {
    type: {
        name: "Composite",
        className: "EHNamespace",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, serviceBusEndpoint: {
                serializedName: "properties.serviceBusEndpoint",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, clusterArmId: {
                serializedName: "properties.clusterArmId",
                type: {
                    name: "String"
                }
            }, metricId: {
                serializedName: "properties.metricId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isAutoInflateEnabled: {
                serializedName: "properties.isAutoInflateEnabled",
                type: {
                    name: "Boolean"
                }
            }, maximumThroughputUnits: {
                serializedName: "properties.maximumThroughputUnits",
                type: {
                    name: "Number"
                }
            }, kafkaEnabled: {
                serializedName: "properties.kafkaEnabled",
                type: {
                    name: "Boolean"
                }
            }, zoneRedundant: {
                serializedName: "properties.zoneRedundant",
                type: {
                    name: "Boolean"
                }
            }, encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "Encryption"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }, disableLocalAuth: {
                serializedName: "properties.disableLocalAuth",
                type: {
                    name: "Boolean"
                }
            }, alternateName: {
                serializedName: "properties.alternateName",
                type: {
                    name: "String"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AvailableClustersList: AvailableClustersList,
    AvailableCluster: AvailableCluster,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    ClusterListResult: ClusterListResult,
    ClusterSku: ClusterSku,
    SystemData: SystemData,
    Resource: Resource,
    EHNamespaceIdListResult: EHNamespaceIdListResult,
    EHNamespaceIdContainer: EHNamespaceIdContainer,
    ClusterQuotaConfigurationProperties: ClusterQuotaConfigurationProperties,
    EHNamespaceListResult: EHNamespaceListResult,
    Sku: Sku,
    Identity: Identity,
    UserAssignedIdentity: UserAssignedIdentity,
    Encryption: Encryption,
    KeyVaultProperties: KeyVaultProperties,
    UserAssignedIdentityProperties: UserAssignedIdentityProperties,
    PrivateEndpoint: PrivateEndpoint,
    ConnectionState: ConnectionState,
    ProxyResource: ProxyResource,
    PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
    PrivateLinkResourcesListResult: PrivateLinkResourcesListResult,
    PrivateLinkResource: PrivateLinkResource,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    EventHubListResult: EventHubListResult,
    CaptureDescription: CaptureDescription,
    Destination: Destination,
    CheckNameAvailabilityParameter: CheckNameAvailabilityParameter,
    CheckNameAvailabilityResult: CheckNameAvailabilityResult,
    ArmDisasterRecoveryListResult: ArmDisasterRecoveryListResult,
    NWRuleSetVirtualNetworkRules: NWRuleSetVirtualNetworkRules,
    Subnet: Subnet,
    NWRuleSetIpRules: NWRuleSetIpRules,
    NetworkRuleSetListResult: NetworkRuleSetListResult,
    AuthorizationRuleListResult: AuthorizationRuleListResult,
    AccessKeys: AccessKeys,
    RegenerateAccessKeyParameters: RegenerateAccessKeyParameters,
    ConsumerGroupListResult: ConsumerGroupListResult,
    SchemaGroupListResult: SchemaGroupListResult,
    TrackedResource: TrackedResource,
    PrivateEndpointConnection: PrivateEndpointConnection,
    Eventhub: Eventhub,
    ArmDisasterRecovery: ArmDisasterRecovery,
    NetworkRuleSet: NetworkRuleSet,
    AuthorizationRule: AuthorizationRule,
    ConsumerGroup: ConsumerGroup,
    SchemaGroup: SchemaGroup,
    Cluster: Cluster,
    EHNamespace: EHNamespace
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const clusterName = {
    parameterPath: "clusterName",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 6
        },
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: Cluster
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: ClusterQuotaConfigurationProperties
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: EHNamespace
};
const namespaceName = {
    parameterPath: "namespaceName",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 6
        },
        serializedName: "namespaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: NetworkRuleSet
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: AuthorizationRule
};
const authorizationRuleName = {
    parameterPath: "authorizationRuleName",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "authorizationRuleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: RegenerateAccessKeyParameters
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: CheckNameAvailabilityParameter
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: PrivateEndpointConnection
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 0
        },
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const parameters8 = {
    parameterPath: "parameters",
    mapper: Eventhub
};
const eventHubName = {
    parameterPath: "eventHubName",
    mapper: {
        constraints: {
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "eventHubName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters9 = {
    parameterPath: "parameters",
    mapper: ArmDisasterRecovery
};
const alias = {
    parameterPath: "alias",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 1
        },
        serializedName: "alias",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters10 = {
    parameterPath: "parameters",
    mapper: ConsumerGroup
};
const consumerGroupName = {
    parameterPath: "consumerGroupName",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 1
        },
        serializedName: "consumerGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters11 = {
    parameterPath: "parameters",
    mapper: SchemaGroup
};
const schemaGroupName = {
    parameterPath: "schemaGroupName",
    mapper: {
        constraints: {
            MaxLength: 256,
            MinLength: 1
        },
        serializedName: "schemaGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Clusters operations. */
class ClustersImpl {
    /**
     * Initialize a new instance of the class Clusters class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the available Event Hubs Clusters within an ARM resource group
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the available Event Hubs Clusters within an ARM resource group
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List the quantity of available pre-provisioned Event Hubs Clusters, indexed by Azure region.
     * @param options The options parameters.
     */
    listAvailableClusterRegion(options) {
        return this.client.sendOperationRequest({ options }, listAvailableClusterRegionOperationSpec);
    }
    /**
     * Lists the available Event Hubs Clusters within an ARM resource group
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Lists the available Event Hubs Clusters within an ARM resource group
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$1);
    }
    /**
     * Gets the resource description of the specified Event Hubs Cluster.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, getOperationSpec$8);
    }
    /**
     * Creates or updates an instance of an Event Hubs Cluster.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param parameters Parameters for creating a eventhub cluster resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, parameters, options }, createOrUpdateOperationSpec$6);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates an instance of an Event Hubs Cluster.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param parameters Parameters for creating a eventhub cluster resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Modifies mutable properties on the Event Hubs Cluster. This operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param parameters The properties of the Event Hubs Cluster which should be updated.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, parameters, options }, updateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Modifies mutable properties on the Event Hubs Cluster. This operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param parameters The properties of the Event Hubs Cluster which should be updated.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes an existing Event Hubs Cluster. This operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, options }, deleteOperationSpec$6);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an existing Event Hubs Cluster. This operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all Event Hubs Namespace IDs in an Event Hubs Dedicated Cluster.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param options The options parameters.
     */
    listNamespaces(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, listNamespacesOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listAvailableClusterRegionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.EventHub/availableClusterRegions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AvailableClustersList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$9
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.EventHub/clusters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const createOrUpdateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        201: {
            bodyMapper: Cluster
        },
        202: {
            bodyMapper: Cluster
        },
        204: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        201: {
            bodyMapper: Cluster
        },
        202: {
            bodyMapper: Cluster
        },
        204: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listNamespacesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/namespaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EHNamespaceIdListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByResourceGroupNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Configuration operations. */
class ConfigurationImpl {
    /**
     * Initialize a new instance of the class Configuration class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Replace all specified Event Hubs Cluster settings with those contained in the request body. Leaves
     * the settings not specified in the request body unmodified.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param parameters Parameters for creating an Event Hubs Cluster resource.
     * @param options The options parameters.
     */
    patch(resourceGroupName, clusterName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, parameters, options }, patchOperationSpec);
    }
    /**
     * Get all Event Hubs Cluster settings - a collection of key/value pairs which represent the quotas and
     * settings imposed on the cluster.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param clusterName The name of the Event Hubs Cluster.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, getOperationSpec$7);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const patchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/quotaConfiguration/default",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ClusterQuotaConfigurationProperties
        },
        201: {
            bodyMapper: ClusterQuotaConfigurationProperties
        },
        202: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/clusters/{clusterName}/quotaConfiguration/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterQuotaConfigurationProperties
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Namespaces operations. */
class NamespacesImpl {
    /**
     * Initialize a new instance of the class Namespaces class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the available Namespaces within a subscription, irrespective of the resource groups.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the available Namespaces within a resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets a list of authorization rules for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName, namespaceName, options) {
        const iter = this.listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRules(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRulesNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Lists all the available Namespaces within a subscription, irrespective of the resource groups.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * Lists the available Namespaces within a resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This
     * operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param parameters Parameters for creating a namespace resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, namespaceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, namespaceName, parameters, options }, createOrUpdateOperationSpec$5);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This
     * operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param parameters Parameters for creating a namespace resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, namespaceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, namespaceName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the
     * namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, namespaceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, namespaceName, options }, deleteOperationSpec$5);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the
     * namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, namespaceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, namespaceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the description of the specified namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, getOperationSpec$6);
    }
    /**
     * Creates or updates a namespace. Once created, this namespace's resource manifest is immutable. This
     * operation is idempotent.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param parameters Parameters for updating a namespace resource.
     * @param options The options parameters.
     */
    update(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, updateOperationSpec);
    }
    /**
     * Create or update NetworkRuleSet for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param parameters The Namespace IpFilterRule.
     * @param options The options parameters.
     */
    createOrUpdateNetworkRuleSet(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, createOrUpdateNetworkRuleSetOperationSpec);
    }
    /**
     * Gets NetworkRuleSet for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    getNetworkRuleSet(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, getNetworkRuleSetOperationSpec);
    }
    /**
     * Gets NetworkRuleSet for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    listNetworkRuleSet(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listNetworkRuleSetOperationSpec);
    }
    /**
     * Gets a list of authorization rules for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    _listAuthorizationRules(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listAuthorizationRulesOperationSpec$2);
    }
    /**
     * Creates or updates an AuthorizationRule for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The shared access AuthorizationRule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            parameters,
            options
        }, createOrUpdateAuthorizationRuleOperationSpec$1);
    }
    /**
     * Deletes an AuthorizationRule for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, deleteAuthorizationRuleOperationSpec$1);
    }
    /**
     * Gets an AuthorizationRule for a Namespace by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, getAuthorizationRuleOperationSpec$2);
    }
    /**
     * Gets the primary and secondary connection strings for the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, listKeysOperationSpec$2);
    }
    /**
     * Regenerates the primary or secondary connection strings for the specified Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters required to regenerate the connection string.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName, namespaceName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            parameters,
            options
        }, regenerateKeysOperationSpec$1);
    }
    /**
     * Check the give Namespace name availability.
     * @param parameters Parameters to check availability of the given Namespace name
     * @param options The options parameters.
     */
    checkNameAvailability(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, checkNameAvailabilityOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$3);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    _listAuthorizationRulesNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listAuthorizationRulesNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.EventHub/namespaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EHNamespaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$7
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EHNamespaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOrUpdateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: EHNamespace
        },
        201: {
            bodyMapper: EHNamespace
        },
        202: {
            bodyMapper: EHNamespace
        },
        204: {
            bodyMapper: EHNamespace
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EHNamespace
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: EHNamespace
        },
        201: {
            bodyMapper: EHNamespace
        },
        202: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const createOrUpdateNetworkRuleSetOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/networkRuleSets/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: NetworkRuleSet
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const getNetworkRuleSetOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/networkRuleSets/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkRuleSet
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listNetworkRuleSetOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/networkRuleSets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkRuleSetListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listAuthorizationRulesOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOrUpdateAuthorizationRuleOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const deleteAuthorizationRuleOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const getAuthorizationRuleOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listKeysOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const regenerateKeysOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/authorizationRules/{authorizationRuleName}/regenerateKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const checkNameAvailabilityOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.EventHub/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EHNamespaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EHNamespaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listAuthorizationRulesNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the available PrivateEndpointConnections within a namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    list(resourceGroupName, namespaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the available PrivateEndpointConnections within a namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    _list(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listOperationSpec$2);
    }
    /**
     * Creates or updates PrivateEndpointConnections of service namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param parameters Parameters supplied to update Status of PrivateEndPoint Connection to namespace
     *                   resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, privateEndpointConnectionName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            privateEndpointConnectionName,
            parameters,
            options
        }, createOrUpdateOperationSpec$4);
    }
    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the
     * namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, namespaceName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                namespaceName,
                privateEndpointConnectionName,
                options
            }, deleteOperationSpec$4);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the
     * namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, namespaceName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, namespaceName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a description for the specified Private Endpoint Connection name.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec$5);
    }
    /**
     * ListNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateLinkResources operations. */
class PrivateLinkResourcesImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets lists of resources that supports Privatelinks.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, getOperationSpec$4);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourcesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available Event Hub REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available Event Hub REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/providers/Microsoft.EventHub/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing EventHubs operations. */
class EventHubsImpl {
    /**
     * Initialize a new instance of the class EventHubs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the Event Hubs in a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    listByNamespace(resourceGroupName, namespaceName, options) {
        const iter = this.listByNamespacePagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByNamespacePagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listByNamespacePagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByNamespacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByNamespace(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByNamespaceNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByNamespacePagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByNamespacePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByNamespacePagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the authorization rules for an Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName, namespaceName, eventHubName, options) {
        const iter = this.listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, eventHubName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, eventHubName, options, settings);
            }
        };
    }
    listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, eventHubName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRules(resourceGroupName, namespaceName, eventHubName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRulesNext(resourceGroupName, namespaceName, eventHubName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, eventHubName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, eventHubName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets all the Event Hubs in a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    _listByNamespace(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listByNamespaceOperationSpec$1);
    }
    /**
     * Creates or updates a new Event Hub as a nested resource within a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param parameters Parameters supplied to create an Event Hub resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, eventHubName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, eventHubName, parameters, options }, createOrUpdateOperationSpec$3);
    }
    /**
     * Deletes an Event Hub from the specified Namespace and resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, eventHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, eventHubName, options }, deleteOperationSpec$3);
    }
    /**
     * Gets an Event Hubs description for the specified Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, eventHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, eventHubName, options }, getOperationSpec$3);
    }
    /**
     * Gets the authorization rules for an Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param options The options parameters.
     */
    _listAuthorizationRules(resourceGroupName, namespaceName, eventHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, eventHubName, options }, listAuthorizationRulesOperationSpec$1);
    }
    /**
     * Creates or updates an AuthorizationRule for the specified Event Hub. Creation/update of the
     * AuthorizationRule will take a few seconds to take effect.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The shared access AuthorizationRule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            authorizationRuleName,
            parameters,
            options
        }, createOrUpdateAuthorizationRuleOperationSpec);
    }
    /**
     * Gets an AuthorizationRule for an Event Hub by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            authorizationRuleName,
            options
        }, getAuthorizationRuleOperationSpec$1);
    }
    /**
     * Deletes an Event Hub AuthorizationRule.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            authorizationRuleName,
            options
        }, deleteAuthorizationRuleOperationSpec);
    }
    /**
     * Gets the ACS and SAS connection strings for the Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            authorizationRuleName,
            options
        }, listKeysOperationSpec$1);
    }
    /**
     * Regenerates the ACS and SAS connection strings for the Event Hub.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate the AuthorizationRule Keys
     *                   (PrimaryKey/SecondaryKey).
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName, namespaceName, eventHubName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            authorizationRuleName,
            parameters,
            options
        }, regenerateKeysOperationSpec);
    }
    /**
     * ListByNamespaceNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param nextLink The nextLink from the previous successful call to the ListByNamespace method.
     * @param options The options parameters.
     */
    _listByNamespaceNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listByNamespaceNextOperationSpec$1);
    }
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    _listAuthorizationRulesNext(resourceGroupName, namespaceName, eventHubName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, eventHubName, nextLink, options }, listAuthorizationRulesNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByNamespaceOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventHubListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skip, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Eventhub
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        eventHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        eventHubName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Eventhub
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        eventHubName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listAuthorizationRulesOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        eventHubName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        eventHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const getAuthorizationRuleOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        eventHubName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const deleteAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        eventHubName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listKeysOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        eventHubName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const regenerateKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/authorizationRules/{authorizationRuleName}/regenerateKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        eventHubName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listByNamespaceNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventHubListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skip, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listAuthorizationRulesNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        namespaceName,
        eventHubName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DisasterRecoveryConfigs operations. */
class DisasterRecoveryConfigsImpl {
    /**
     * Initialize a new instance of the class DisasterRecoveryConfigs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all Alias(Disaster Recovery configurations)
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    list(resourceGroupName, namespaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets a list of authorization rules for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName, namespaceName, alias, options) {
        const iter = this.listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, alias, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, alias, options, settings);
            }
        };
    }
    listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, alias, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRules(resourceGroupName, namespaceName, alias, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRulesNext(resourceGroupName, namespaceName, alias, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, alias, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, alias, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Check the give Namespace name availability.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param parameters Parameters to check availability of the given Alias name
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Gets all Alias(Disaster Recovery configurations)
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    _list(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listOperationSpec);
    }
    /**
     * Creates or updates a new Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param alias The Disaster Recovery configuration name
     * @param parameters Parameters required to create an Alias(Disaster Recovery configuration)
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, alias, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, parameters, options }, createOrUpdateOperationSpec$2);
    }
    /**
     * Deletes an Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, alias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, options }, deleteOperationSpec$2);
    }
    /**
     * Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, alias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, options }, getOperationSpec$2);
    }
    /**
     * This operation disables the Disaster Recovery and stops replicating changes from primary to
     * secondary namespaces
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    breakPairing(resourceGroupName, namespaceName, alias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, options }, breakPairingOperationSpec);
    }
    /**
     * Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    failOver(resourceGroupName, namespaceName, alias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, options }, failOverOperationSpec);
    }
    /**
     * Gets a list of authorization rules for a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    _listAuthorizationRules(resourceGroupName, namespaceName, alias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, options }, listAuthorizationRulesOperationSpec);
    }
    /**
     * Gets an AuthorizationRule for a Namespace by rule name.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param alias The Disaster Recovery configuration name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName, namespaceName, alias, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            alias,
            authorizationRuleName,
            options
        }, getAuthorizationRuleOperationSpec);
    }
    /**
     * Gets the primary and secondary connection strings for the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param alias The Disaster Recovery configuration name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, namespaceName, alias, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            alias,
            authorizationRuleName,
            options
        }, listKeysOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param alias The Disaster Recovery configuration name
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    _listAuthorizationRulesNext(resourceGroupName, namespaceName, alias, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, nextLink, options }, listAuthorizationRulesNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ArmDisasterRecoveryListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ArmDisasterRecovery
        },
        201: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        alias
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ArmDisasterRecovery
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const breakPairingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/breakPairing",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const failOverOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/failover",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listAuthorizationRulesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/authorizationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/authorizationRules/{authorizationRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/authorizationRules/{authorizationRuleName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        authorizationRuleName,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ArmDisasterRecoveryListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        namespaceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listAuthorizationRulesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        namespaceName,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ConsumerGroups operations. */
class ConsumerGroupsImpl {
    /**
     * Initialize a new instance of the class ConsumerGroups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists
     * in the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param options The options parameters.
     */
    listByEventHub(resourceGroupName, namespaceName, eventHubName, options) {
        const iter = this.listByEventHubPagingAll(resourceGroupName, namespaceName, eventHubName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByEventHubPagingPage(resourceGroupName, namespaceName, eventHubName, options, settings);
            }
        };
    }
    listByEventHubPagingPage(resourceGroupName, namespaceName, eventHubName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByEventHubPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByEventHub(resourceGroupName, namespaceName, eventHubName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByEventHubNext(resourceGroupName, namespaceName, eventHubName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByEventHubPagingAll(resourceGroupName, namespaceName, eventHubName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByEventHubPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByEventHubPagingPage(resourceGroupName, namespaceName, eventHubName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates or updates an Event Hubs consumer group as a nested resource within a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param consumerGroupName The consumer group name
     * @param parameters Parameters supplied to create or update a consumer group resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, eventHubName, consumerGroupName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            consumerGroupName,
            parameters,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Deletes a consumer group from the specified Event Hub and resource group.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param consumerGroupName The consumer group name
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, eventHubName, consumerGroupName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            consumerGroupName,
            options
        }, deleteOperationSpec$1);
    }
    /**
     * Gets a description for the specified consumer group.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param consumerGroupName The consumer group name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, eventHubName, consumerGroupName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            eventHubName,
            consumerGroupName,
            options
        }, getOperationSpec$1);
    }
    /**
     * Gets all the consumer groups in a Namespace. An empty feed is returned if no consumer group exists
     * in the Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param options The options parameters.
     */
    _listByEventHub(resourceGroupName, namespaceName, eventHubName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, eventHubName, options }, listByEventHubOperationSpec);
    }
    /**
     * ListByEventHubNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param eventHubName The Event Hub name
     * @param nextLink The nextLink from the previous successful call to the ListByEventHub method.
     * @param options The options parameters.
     */
    _listByEventHubNext(resourceGroupName, namespaceName, eventHubName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, eventHubName, nextLink, options }, listByEventHubNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ConsumerGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        eventHubName,
        consumerGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        eventHubName,
        consumerGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups/{consumerGroupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConsumerGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        eventHubName,
        consumerGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByEventHubOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/eventhubs/{eventHubName}/consumergroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConsumerGroupListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skip, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        eventHubName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByEventHubNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConsumerGroupListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skip, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        namespaceName,
        eventHubName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SchemaRegistry operations. */
class SchemaRegistryImpl {
    /**
     * Initialize a new instance of the class SchemaRegistry class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the Schema Groups in a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    listByNamespace(resourceGroupName, namespaceName, options) {
        const iter = this.listByNamespacePagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByNamespacePagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listByNamespacePagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByNamespacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByNamespace(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByNamespaceNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByNamespacePagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByNamespacePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByNamespacePagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all the Schema Groups in a Namespace.
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param options The options parameters.
     */
    _listByNamespace(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listByNamespaceOperationSpec);
    }
    /**
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param schemaGroupName The Schema Group name
     * @param parameters Parameters supplied to create an Event Hub resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, schemaGroupName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            schemaGroupName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param schemaGroupName The Schema Group name
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, schemaGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, schemaGroupName, options }, deleteOperationSpec);
    }
    /**
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param schemaGroupName The Schema Group name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, schemaGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, schemaGroupName, options }, getOperationSpec);
    }
    /**
     * ListByNamespaceNext
     * @param resourceGroupName Name of the resource group within the azure subscription.
     * @param namespaceName The Namespace name
     * @param nextLink The nextLink from the previous successful call to the ListByNamespace method.
     * @param options The options parameters.
     */
    _listByNamespaceNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listByNamespaceNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByNamespaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/schemagroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SchemaGroupListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skip, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/schemagroups/{schemaGroupName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SchemaGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters11,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        schemaGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/schemagroups/{schemaGroupName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        schemaGroupName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventHub/namespaces/{namespaceName}/schemagroups/{schemaGroupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SchemaGroup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName,
        schemaGroupName
    ],
    headerParameters: [accept],
    serializer
};
const listByNamespaceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SchemaGroupListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skip, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        namespaceName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class EventHubManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the EventHubManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-eventhub/5.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-11-01";
        this.clusters = new ClustersImpl(this);
        this.configuration = new ConfigurationImpl(this);
        this.namespaces = new NamespacesImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.operations = new OperationsImpl(this);
        this.eventHubs = new EventHubsImpl(this);
        this.disasterRecoveryConfigs = new DisasterRecoveryConfigsImpl(this);
        this.consumerGroups = new ConsumerGroupsImpl(this);
        this.schemaRegistry = new SchemaRegistryImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.EventHubManagementClient = EventHubManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
