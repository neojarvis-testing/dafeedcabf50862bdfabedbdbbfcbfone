import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { WorkspaceSetting, WorkspaceSettingsListOptionalParams, WorkspaceSettingsGetOptionalParams, WorkspaceSettingsGetResponse, WorkspaceSettingsCreateOptionalParams, WorkspaceSettingsCreateResponse, WorkspaceSettingsUpdateOptionalParams, WorkspaceSettingsUpdateResponse, WorkspaceSettingsDeleteOptionalParams } from "../models";
/** Interface representing a WorkspaceSettings. */
export interface WorkspaceSettings {
    /**
     * Settings about where we should store your security data and logs. If the result is empty, it means
     * that no custom-workspace configuration was set
     * @param options The options parameters.
     */
    list(options?: WorkspaceSettingsListOptionalParams): PagedAsyncIterableIterator<WorkspaceSetting>;
    /**
     * Settings about where we should store your security data and logs. If the result is empty, it means
     * that no custom-workspace configuration was set
     * @param workspaceSettingName Name of the security setting
     * @param options The options parameters.
     */
    get(workspaceSettingName: string, options?: WorkspaceSettingsGetOptionalParams): Promise<WorkspaceSettingsGetResponse>;
    /**
     * creating settings about where we should store your security data and logs
     * @param workspaceSettingName Name of the security setting
     * @param workspaceSetting Security data setting object
     * @param options The options parameters.
     */
    create(workspaceSettingName: string, workspaceSetting: WorkspaceSetting, options?: WorkspaceSettingsCreateOptionalParams): Promise<WorkspaceSettingsCreateResponse>;
    /**
     * Settings about where we should store your security data and logs
     * @param workspaceSettingName Name of the security setting
     * @param workspaceSetting Security data setting object
     * @param options The options parameters.
     */
    update(workspaceSettingName: string, workspaceSetting: WorkspaceSetting, options?: WorkspaceSettingsUpdateOptionalParams): Promise<WorkspaceSettingsUpdateResponse>;
    /**
     * Deletes the custom workspace settings for this subscription. new VMs will report to the default
     * workspace
     * @param workspaceSettingName Name of the security setting
     * @param options The options parameters.
     */
    delete(workspaceSettingName: string, options?: WorkspaceSettingsDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=workspaceSettings.d.ts.map