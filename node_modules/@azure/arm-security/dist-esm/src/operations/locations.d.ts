import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Locations } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { AscLocation, LocationsListOptionalParams, LocationsGetOptionalParams, LocationsGetResponse } from "../models";
/** Class containing Locations operations. */
export declare class LocationsImpl implements Locations {
    private readonly client;
    /**
     * Initialize a new instance of the class Locations class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * The location of the responsible ASC of the specific subscription (home region). For each
     * subscription there is only one responsible location. The location in the response should be used to
     * read or write other resources in ASC according to their ID.
     * @param options The options parameters.
     */
    list(options?: LocationsListOptionalParams): PagedAsyncIterableIterator<AscLocation>;
    private listPagingPage;
    private listPagingAll;
    /**
     * The location of the responsible ASC of the specific subscription (home region). For each
     * subscription there is only one responsible location. The location in the response should be used to
     * read or write other resources in ASC according to their ID.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Details of a specific location
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
     *                    Get locations
     * @param options The options parameters.
     */
    get(ascLocation: string, options?: LocationsGetOptionalParams): Promise<LocationsGetResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=locations.d.ts.map