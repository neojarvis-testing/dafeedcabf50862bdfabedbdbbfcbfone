import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { IngestionSettings } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { IngestionSetting, IngestionSettingsListOptionalParams, IngestionSettingsGetOptionalParams, IngestionSettingsGetResponse, IngestionSettingsCreateOptionalParams, IngestionSettingsCreateResponse, IngestionSettingsDeleteOptionalParams, IngestionSettingsListTokensOptionalParams, IngestionSettingsListTokensResponse, IngestionSettingsListConnectionStringsOptionalParams, IngestionSettingsListConnectionStringsResponse } from "../models";
/** Class containing IngestionSettings operations. */
export declare class IngestionSettingsImpl implements IngestionSettings {
    private readonly client;
    /**
     * Initialize a new instance of the class IngestionSettings class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * Settings for ingesting security data and logs to correlate with resources associated with the
     * subscription.
     * @param options The options parameters.
     */
    list(options?: IngestionSettingsListOptionalParams): PagedAsyncIterableIterator<IngestionSetting>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Settings for ingesting security data and logs to correlate with resources associated with the
     * subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Settings for ingesting security data and logs to correlate with resources associated with the
     * subscription.
     * @param ingestionSettingName Name of the ingestion setting
     * @param options The options parameters.
     */
    get(ingestionSettingName: string, options?: IngestionSettingsGetOptionalParams): Promise<IngestionSettingsGetResponse>;
    /**
     * Create setting for ingesting security data and logs to correlate with resources associated with the
     * subscription.
     * @param ingestionSettingName Name of the ingestion setting
     * @param ingestionSetting Ingestion setting object
     * @param options The options parameters.
     */
    create(ingestionSettingName: string, ingestionSetting: IngestionSetting, options?: IngestionSettingsCreateOptionalParams): Promise<IngestionSettingsCreateResponse>;
    /**
     * Deletes the ingestion settings for this subscription.
     * @param ingestionSettingName Name of the ingestion setting
     * @param options The options parameters.
     */
    delete(ingestionSettingName: string, options?: IngestionSettingsDeleteOptionalParams): Promise<void>;
    /**
     * Returns the token that is used for correlating ingested telemetry with the resources in the
     * subscription.
     * @param ingestionSettingName Name of the ingestion setting
     * @param options The options parameters.
     */
    listTokens(ingestionSettingName: string, options?: IngestionSettingsListTokensOptionalParams): Promise<IngestionSettingsListTokensResponse>;
    /**
     * Connection strings for ingesting security scan logs and data.
     * @param ingestionSettingName Name of the ingestion setting
     * @param options The options parameters.
     */
    listConnectionStrings(ingestionSettingName: string, options?: IngestionSettingsListConnectionStringsOptionalParams): Promise<IngestionSettingsListConnectionStringsResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=ingestionSettings.d.ts.map