import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SecuritySolutions } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { SecuritySolution, SecuritySolutionsListOptionalParams, SecuritySolutionsGetOptionalParams, SecuritySolutionsGetResponse } from "../models";
/** Class containing SecuritySolutions operations. */
export declare class SecuritySolutionsImpl implements SecuritySolutions {
    private readonly client;
    /**
     * Initialize a new instance of the class SecuritySolutions class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * Gets a list of Security Solutions for the subscription.
     * @param options The options parameters.
     */
    list(options?: SecuritySolutionsListOptionalParams): PagedAsyncIterableIterator<SecuritySolution>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets a list of Security Solutions for the subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets a specific Security Solution.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
     *                    Get locations
     * @param securitySolutionName Name of security solution.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, ascLocation: string, securitySolutionName: string, options?: SecuritySolutionsGetOptionalParams): Promise<SecuritySolutionsGetResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=securitySolutions.d.ts.map