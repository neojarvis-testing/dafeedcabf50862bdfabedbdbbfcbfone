import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { AllowedConnections } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { AllowedConnectionsResource, AllowedConnectionsListOptionalParams, AllowedConnectionsListByHomeRegionOptionalParams, ConnectionType, AllowedConnectionsGetOptionalParams, AllowedConnectionsGetResponse } from "../models";
/** Class containing AllowedConnections operations. */
export declare class AllowedConnectionsImpl implements AllowedConnections {
    private readonly client;
    /**
     * Initialize a new instance of the class AllowedConnections class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * Gets the list of all possible traffic between resources for the subscription
     * @param options The options parameters.
     */
    list(options?: AllowedConnectionsListOptionalParams): PagedAsyncIterableIterator<AllowedConnectionsResource>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets the list of all possible traffic between resources for the subscription and location.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
     *                    Get locations
     * @param options The options parameters.
     */
    listByHomeRegion(ascLocation: string, options?: AllowedConnectionsListByHomeRegionOptionalParams): PagedAsyncIterableIterator<AllowedConnectionsResource>;
    private listByHomeRegionPagingPage;
    private listByHomeRegionPagingAll;
    /**
     * Gets the list of all possible traffic between resources for the subscription
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets the list of all possible traffic between resources for the subscription and location.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
     *                    Get locations
     * @param options The options parameters.
     */
    private _listByHomeRegion;
    /**
     * Gets the list of all possible traffic between resources for the subscription and location, based on
     * connection type.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
     *                    Get locations
     * @param connectionType The type of allowed connections (Internal, External)
     * @param options The options parameters.
     */
    get(resourceGroupName: string, ascLocation: string, connectionType: ConnectionType, options?: AllowedConnectionsGetOptionalParams): Promise<AllowedConnectionsGetResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByHomeRegionNext
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
     *                    Get locations
     * @param nextLink The nextLink from the previous successful call to the ListByHomeRegion method.
     * @param options The options parameters.
     */
    private _listByHomeRegionNext;
}
//# sourceMappingURL=allowedConnections.d.ts.map