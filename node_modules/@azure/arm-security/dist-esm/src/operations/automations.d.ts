import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Automations } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { Automation, AutomationsListOptionalParams, AutomationsListByResourceGroupOptionalParams, AutomationsGetOptionalParams, AutomationsGetResponse, AutomationsCreateOrUpdateOptionalParams, AutomationsCreateOrUpdateResponse, AutomationsDeleteOptionalParams, AutomationsValidateOptionalParams, AutomationsValidateResponse } from "../models";
/** Class containing Automations operations. */
export declare class AutomationsImpl implements Automations {
    private readonly client;
    /**
     * Initialize a new instance of the class Automations class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * Lists all the security automations in the specified subscription. Use the 'nextLink' property in the
     * response to get the next page of security automations for the specified subscription.
     * @param options The options parameters.
     */
    list(options?: AutomationsListOptionalParams): PagedAsyncIterableIterator<Automation>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists all the security automations in the specified resource group. Use the 'nextLink' property in
     * the response to get the next page of security automations for the specified resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: AutomationsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Automation>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Lists all the security automations in the specified subscription. Use the 'nextLink' property in the
     * response to get the next page of security automations for the specified subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Lists all the security automations in the specified resource group. Use the 'nextLink' property in
     * the response to get the next page of security automations for the specified resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Retrieves information about the model of a security automation.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param automationName The security automation name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, automationName: string, options?: AutomationsGetOptionalParams): Promise<AutomationsGetResponse>;
    /**
     * Creates or updates a security automation. If a security automation is already created and a
     * subsequent request is issued for the same automation id, then it will be updated.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param automationName The security automation name.
     * @param automation The security automation resource
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, automationName: string, automation: Automation, options?: AutomationsCreateOrUpdateOptionalParams): Promise<AutomationsCreateOrUpdateResponse>;
    /**
     * Deletes a security automation.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param automationName The security automation name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, automationName: string, options?: AutomationsDeleteOptionalParams): Promise<void>;
    /**
     * Validates the security automation model before create or update. Any validation errors are returned
     * to the client.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param automationName The security automation name.
     * @param automation The security automation resource
     * @param options The options parameters.
     */
    validate(resourceGroupName: string, automationName: string, automation: Automation, options?: AutomationsValidateOptionalParams): Promise<AutomationsValidateResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=automations.d.ts.map