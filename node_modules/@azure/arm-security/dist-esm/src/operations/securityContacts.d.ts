import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SecurityContacts } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { SecurityContact, SecurityContactsListOptionalParams, SecurityContactsGetOptionalParams, SecurityContactsGetResponse, SecurityContactsCreateOptionalParams, SecurityContactsCreateResponse, SecurityContactsDeleteOptionalParams, SecurityContactsUpdateOptionalParams, SecurityContactsUpdateResponse } from "../models";
/** Class containing SecurityContacts operations. */
export declare class SecurityContactsImpl implements SecurityContacts {
    private readonly client;
    /**
     * Initialize a new instance of the class SecurityContacts class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * Security contact configurations for the subscription
     * @param options The options parameters.
     */
    list(options?: SecurityContactsListOptionalParams): PagedAsyncIterableIterator<SecurityContact>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Security contact configurations for the subscription
     * @param options The options parameters.
     */
    private _list;
    /**
     * Security contact configurations for the subscription
     * @param securityContactName Name of the security contact object
     * @param options The options parameters.
     */
    get(securityContactName: string, options?: SecurityContactsGetOptionalParams): Promise<SecurityContactsGetResponse>;
    /**
     * Security contact configurations for the subscription
     * @param securityContactName Name of the security contact object
     * @param securityContact Security contact object
     * @param options The options parameters.
     */
    create(securityContactName: string, securityContact: SecurityContact, options?: SecurityContactsCreateOptionalParams): Promise<SecurityContactsCreateResponse>;
    /**
     * Security contact configurations for the subscription
     * @param securityContactName Name of the security contact object
     * @param options The options parameters.
     */
    delete(securityContactName: string, options?: SecurityContactsDeleteOptionalParams): Promise<void>;
    /**
     * Security contact configurations for the subscription
     * @param securityContactName Name of the security contact object
     * @param securityContact Security contact object
     * @param options The options parameters.
     */
    update(securityContactName: string, securityContact: SecurityContact, options?: SecurityContactsUpdateOptionalParams): Promise<SecurityContactsUpdateResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=securityContacts.d.ts.map