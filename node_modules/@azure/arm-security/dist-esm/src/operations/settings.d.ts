import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Settings } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { SettingUnion, SettingsListOptionalParams, SettingName, SettingsGetOptionalParams, SettingsGetResponse, SettingsUpdateOptionalParams, SettingsUpdateResponse } from "../models";
/** Class containing Settings operations. */
export declare class SettingsImpl implements Settings {
    private readonly client;
    /**
     * Initialize a new instance of the class Settings class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * Settings about different configurations in security center
     * @param options The options parameters.
     */
    list(options?: SettingsListOptionalParams): PagedAsyncIterableIterator<SettingUnion>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Settings about different configurations in security center
     * @param options The options parameters.
     */
    private _list;
    /**
     * Settings of different configurations in security center
     * @param settingName The name of the setting
     * @param options The options parameters.
     */
    get(settingName: SettingName, options?: SettingsGetOptionalParams): Promise<SettingsGetResponse>;
    /**
     * updating settings about different configurations in security center
     * @param settingName The name of the setting
     * @param setting Setting object
     * @param options The options parameters.
     */
    update(settingName: SettingName, setting: SettingUnion, options?: SettingsUpdateOptionalParams): Promise<SettingsUpdateResponse>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=settings.d.ts.map