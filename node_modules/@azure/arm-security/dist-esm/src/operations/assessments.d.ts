import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Assessments } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { SecurityAssessmentResponse, AssessmentsListOptionalParams, AssessmentsGetOptionalParams, AssessmentsGetResponse, SecurityAssessment, AssessmentsCreateOrUpdateOptionalParams, AssessmentsCreateOrUpdateResponse, AssessmentsDeleteOptionalParams } from "../models";
/** Class containing Assessments operations. */
export declare class AssessmentsImpl implements Assessments {
    private readonly client;
    /**
     * Initialize a new instance of the class Assessments class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * Get security assessments on all your scanned resources inside a scope
     * @param scope Scope of the query, can be subscription
     *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     *              (/providers/Microsoft.Management/managementGroups/mgName).
     * @param options The options parameters.
     */
    list(scope: string, options?: AssessmentsListOptionalParams): PagedAsyncIterableIterator<SecurityAssessmentResponse>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get security assessments on all your scanned resources inside a scope
     * @param scope Scope of the query, can be subscription
     *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     *              (/providers/Microsoft.Management/managementGroups/mgName).
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get a security assessment on your scanned resource
     * @param resourceId The identifier of the resource.
     * @param assessmentName The Assessment Key - Unique key for the assessment type
     * @param options The options parameters.
     */
    get(resourceId: string, assessmentName: string, options?: AssessmentsGetOptionalParams): Promise<AssessmentsGetResponse>;
    /**
     * Create a security assessment on your resource. An assessment metadata that describes this assessment
     * must be predefined with the same name before inserting the assessment result
     * @param resourceId The identifier of the resource.
     * @param assessmentName The Assessment Key - Unique key for the assessment type
     * @param assessment Calculated assessment on a pre-defined assessment metadata
     * @param options The options parameters.
     */
    createOrUpdate(resourceId: string, assessmentName: string, assessment: SecurityAssessment, options?: AssessmentsCreateOrUpdateOptionalParams): Promise<AssessmentsCreateOrUpdateResponse>;
    /**
     * Delete a security assessment on your resource. An assessment metadata that describes this assessment
     * must be predefined with the same name before inserting the assessment result
     * @param resourceId The identifier of the resource.
     * @param assessmentName The Assessment Key - Unique key for the assessment type
     * @param options The options parameters.
     */
    delete(resourceId: string, assessmentName: string, options?: AssessmentsDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param scope Scope of the query, can be subscription
     *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     *              (/providers/Microsoft.Management/managementGroups/mgName).
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=assessments.d.ts.map