import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { InformationProtectionPolicies } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { InformationProtectionPolicy, InformationProtectionPoliciesListOptionalParams, InformationProtectionPolicyName, InformationProtectionPoliciesGetOptionalParams, InformationProtectionPoliciesGetResponse, InformationProtectionPoliciesCreateOrUpdateOptionalParams, InformationProtectionPoliciesCreateOrUpdateResponse } from "../models";
/** Class containing InformationProtectionPolicies operations. */
export declare class InformationProtectionPoliciesImpl implements InformationProtectionPolicies {
    private readonly client;
    /**
     * Initialize a new instance of the class InformationProtectionPolicies class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * Information protection policies of a specific management group.
     * @param scope Scope of the query, can be subscription
     *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     *              (/providers/Microsoft.Management/managementGroups/mgName).
     * @param options The options parameters.
     */
    list(scope: string, options?: InformationProtectionPoliciesListOptionalParams): PagedAsyncIterableIterator<InformationProtectionPolicy>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Details of the information protection policy.
     * @param scope Scope of the query, can be subscription
     *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     *              (/providers/Microsoft.Management/managementGroups/mgName).
     * @param informationProtectionPolicyName Name of the information protection policy.
     * @param options The options parameters.
     */
    get(scope: string, informationProtectionPolicyName: InformationProtectionPolicyName, options?: InformationProtectionPoliciesGetOptionalParams): Promise<InformationProtectionPoliciesGetResponse>;
    /**
     * Details of the information protection policy.
     * @param scope Scope of the query, can be subscription
     *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     *              (/providers/Microsoft.Management/managementGroups/mgName).
     * @param informationProtectionPolicyName Name of the information protection policy.
     * @param informationProtectionPolicy Information protection policy.
     * @param options The options parameters.
     */
    createOrUpdate(scope: string, informationProtectionPolicyName: InformationProtectionPolicyName, informationProtectionPolicy: InformationProtectionPolicy, options?: InformationProtectionPoliciesCreateOrUpdateOptionalParams): Promise<InformationProtectionPoliciesCreateOrUpdateResponse>;
    /**
     * Information protection policies of a specific management group.
     * @param scope Scope of the query, can be subscription
     *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     *              (/providers/Microsoft.Management/managementGroups/mgName).
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param scope Scope of the query, can be subscription
     *              (/subscriptions/0b06d9ea-afe6-4779-bd59-30e5c2d9d13f) or management group
     *              (/providers/Microsoft.Management/managementGroups/mgName).
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=informationProtectionPolicies.d.ts.map