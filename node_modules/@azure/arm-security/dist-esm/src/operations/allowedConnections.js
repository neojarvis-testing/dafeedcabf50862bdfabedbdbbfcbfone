/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing AllowedConnections operations. */
export class AllowedConnectionsImpl {
    /**
     * Initialize a new instance of the class AllowedConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of all possible traffic between resources for the subscription
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(options);
            }
        };
    }
    listPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield __await(this._list(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of all possible traffic between resources for the subscription and location.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
     *                    Get locations
     * @param options The options parameters.
     */
    listByHomeRegion(ascLocation, options) {
        const iter = this.listByHomeRegionPagingAll(ascLocation, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listByHomeRegionPagingPage(ascLocation, options);
            }
        };
    }
    listByHomeRegionPagingPage(ascLocation, options) {
        return __asyncGenerator(this, arguments, function* listByHomeRegionPagingPage_1() {
            let result = yield __await(this._listByHomeRegion(ascLocation, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listByHomeRegionNext(ascLocation, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listByHomeRegionPagingAll(ascLocation, options) {
        return __asyncGenerator(this, arguments, function* listByHomeRegionPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listByHomeRegionPagingPage(ascLocation, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the list of all possible traffic between resources for the subscription
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Gets the list of all possible traffic between resources for the subscription and location.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
     *                    Get locations
     * @param options The options parameters.
     */
    _listByHomeRegion(ascLocation, options) {
        return this.client.sendOperationRequest({ ascLocation, options }, listByHomeRegionOperationSpec);
    }
    /**
     * Gets the list of all possible traffic between resources for the subscription and location, based on
     * connection type.
     * @param resourceGroupName The name of the resource group within the user's subscription. The name is
     *                          case insensitive.
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
     *                    Get locations
     * @param connectionType The type of allowed connections (Internal, External)
     * @param options The options parameters.
     */
    get(resourceGroupName, ascLocation, connectionType, options) {
        return this.client.sendOperationRequest({ resourceGroupName, ascLocation, connectionType, options }, getOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
    /**
     * ListByHomeRegionNext
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from
     *                    Get locations
     * @param nextLink The nextLink from the previous successful call to the ListByHomeRegion method.
     * @param options The options parameters.
     */
    _listByHomeRegionNext(ascLocation, nextLink, options) {
        return this.client.sendOperationRequest({ ascLocation, nextLink, options }, listByHomeRegionNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/allowedConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AllowedConnectionsList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion9],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listByHomeRegionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/allowedConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AllowedConnectionsList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion9],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.ascLocation
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/allowedConnections/{connectionType}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AllowedConnectionsResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion9],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.ascLocation,
        Parameters.connectionType
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AllowedConnectionsList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion9],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByHomeRegionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AllowedConnectionsList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion9],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.ascLocation
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=allowedConnections.js.map