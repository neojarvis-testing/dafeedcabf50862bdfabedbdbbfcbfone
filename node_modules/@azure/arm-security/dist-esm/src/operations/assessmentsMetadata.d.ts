import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { AssessmentsMetadata } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { SecurityAssessmentMetadataResponse, AssessmentsMetadataListOptionalParams, AssessmentsMetadataListBySubscriptionOptionalParams, AssessmentsMetadataGetOptionalParams, AssessmentsMetadataGetResponse, AssessmentsMetadataGetInSubscriptionOptionalParams, AssessmentsMetadataGetInSubscriptionResponse, AssessmentsMetadataCreateInSubscriptionOptionalParams, AssessmentsMetadataCreateInSubscriptionResponse, AssessmentsMetadataDeleteInSubscriptionOptionalParams } from "../models";
/** Class containing AssessmentsMetadata operations. */
export declare class AssessmentsMetadataImpl implements AssessmentsMetadata {
    private readonly client;
    /**
     * Initialize a new instance of the class AssessmentsMetadata class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * Get metadata information on all assessment types
     * @param options The options parameters.
     */
    list(options?: AssessmentsMetadataListOptionalParams): PagedAsyncIterableIterator<SecurityAssessmentMetadataResponse>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get metadata information on all assessment types in a specific subscription
     * @param options The options parameters.
     */
    listBySubscription(options?: AssessmentsMetadataListBySubscriptionOptionalParams): PagedAsyncIterableIterator<SecurityAssessmentMetadataResponse>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Get metadata information on all assessment types
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get metadata information on an assessment type
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
     * @param options The options parameters.
     */
    get(assessmentMetadataName: string, options?: AssessmentsMetadataGetOptionalParams): Promise<AssessmentsMetadataGetResponse>;
    /**
     * Get metadata information on all assessment types in a specific subscription
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Get metadata information on an assessment type in a specific subscription
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
     * @param options The options parameters.
     */
    getInSubscription(assessmentMetadataName: string, options?: AssessmentsMetadataGetInSubscriptionOptionalParams): Promise<AssessmentsMetadataGetInSubscriptionResponse>;
    /**
     * Create metadata information on an assessment type in a specific subscription
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
     * @param assessmentMetadata AssessmentMetadata object
     * @param options The options parameters.
     */
    createInSubscription(assessmentMetadataName: string, assessmentMetadata: SecurityAssessmentMetadataResponse, options?: AssessmentsMetadataCreateInSubscriptionOptionalParams): Promise<AssessmentsMetadataCreateInSubscriptionResponse>;
    /**
     * Delete metadata information on an assessment type in a specific subscription, will cause the
     * deletion of all the assessments of that type in that subscription
     * @param assessmentMetadataName The Assessment Key - Unique key for the assessment type
     * @param options The options parameters.
     */
    deleteInSubscription(assessmentMetadataName: string, options?: AssessmentsMetadataDeleteInSubscriptionOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=assessmentsMetadata.d.ts.map