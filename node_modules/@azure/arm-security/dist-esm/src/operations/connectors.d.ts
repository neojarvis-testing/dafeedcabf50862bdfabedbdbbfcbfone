import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Connectors } from "../operationsInterfaces";
import { SecurityCenter } from "../securityCenter";
import { ConnectorSetting, ConnectorsListOptionalParams, ConnectorsGetOptionalParams, ConnectorsGetResponse, ConnectorsCreateOrUpdateOptionalParams, ConnectorsCreateOrUpdateResponse, ConnectorsDeleteOptionalParams } from "../models";
/** Class containing Connectors operations. */
export declare class ConnectorsImpl implements Connectors {
    private readonly client;
    /**
     * Initialize a new instance of the class Connectors class.
     * @param client Reference to the service client
     */
    constructor(client: SecurityCenter);
    /**
     * Cloud accounts connectors of a subscription
     * @param options The options parameters.
     */
    list(options?: ConnectorsListOptionalParams): PagedAsyncIterableIterator<ConnectorSetting>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Cloud accounts connectors of a subscription
     * @param options The options parameters.
     */
    private _list;
    /**
     * Details of a specific cloud account connector
     * @param connectorName Name of the cloud account connector
     * @param options The options parameters.
     */
    get(connectorName: string, options?: ConnectorsGetOptionalParams): Promise<ConnectorsGetResponse>;
    /**
     * Create a cloud account connector or update an existing one. Connect to your cloud account. For AWS,
     * use either account credentials or role-based authentication. For GCP, use account organization
     * credentials.
     * @param connectorName Name of the cloud account connector
     * @param connectorSetting Settings for the cloud account connector
     * @param options The options parameters.
     */
    createOrUpdate(connectorName: string, connectorSetting: ConnectorSetting, options?: ConnectorsCreateOrUpdateOptionalParams): Promise<ConnectorsCreateOrUpdateResponse>;
    /**
     * Delete a cloud account connector from a subscription
     * @param connectorName Name of the cloud account connector
     * @param options The options parameters.
     */
    delete(connectorName: string, options?: ConnectorsDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=connectors.d.ts.map