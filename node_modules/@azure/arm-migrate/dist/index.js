'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ProjectStatus} that the service accepts. */
exports.KnownProjectStatus = void 0;
(function (KnownProjectStatus) {
    /** Active */
    KnownProjectStatus["Active"] = "Active";
    /** Inactive */
    KnownProjectStatus["Inactive"] = "Inactive";
})(exports.KnownProjectStatus || (exports.KnownProjectStatus = {}));
/** Known values of {@link PrivateEndpointConnectionPropertiesProvisioningState} that the service accepts. */
exports.KnownPrivateEndpointConnectionPropertiesProvisioningState = void 0;
(function (KnownPrivateEndpointConnectionPropertiesProvisioningState) {
    /** Accepted */
    KnownPrivateEndpointConnectionPropertiesProvisioningState["Accepted"] = "Accepted";
    /** InProgress */
    KnownPrivateEndpointConnectionPropertiesProvisioningState["InProgress"] = "InProgress";
    /** Succeeded */
    KnownPrivateEndpointConnectionPropertiesProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownPrivateEndpointConnectionPropertiesProvisioningState["Failed"] = "Failed";
})(exports.KnownPrivateEndpointConnectionPropertiesProvisioningState || (exports.KnownPrivateEndpointConnectionPropertiesProvisioningState = {}));
/** Known values of {@link PrivateLinkServiceConnectionStateStatus} that the service accepts. */
exports.KnownPrivateLinkServiceConnectionStateStatus = void 0;
(function (KnownPrivateLinkServiceConnectionStateStatus) {
    /** Approved */
    KnownPrivateLinkServiceConnectionStateStatus["Approved"] = "Approved";
    /** Pending */
    KnownPrivateLinkServiceConnectionStateStatus["Pending"] = "Pending";
    /** Rejected */
    KnownPrivateLinkServiceConnectionStateStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownPrivateLinkServiceConnectionStateStatus["Disconnected"] = "Disconnected";
})(exports.KnownPrivateLinkServiceConnectionStateStatus || (exports.KnownPrivateLinkServiceConnectionStateStatus = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Accepted */
    KnownProvisioningState["Accepted"] = "Accepted";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Moving */
    KnownProvisioningState["Moving"] = "Moving";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link MachineBootType} that the service accepts. */
exports.KnownMachineBootType = void 0;
(function (KnownMachineBootType) {
    /** Unknown */
    KnownMachineBootType["Unknown"] = "Unknown";
    /** EFI */
    KnownMachineBootType["EFI"] = "EFI";
    /** Bios */
    KnownMachineBootType["Bios"] = "BIOS";
})(exports.KnownMachineBootType || (exports.KnownMachineBootType = {}));
/** Known values of {@link GroupStatus} that the service accepts. */
exports.KnownGroupStatus = void 0;
(function (KnownGroupStatus) {
    /** Created */
    KnownGroupStatus["Created"] = "Created";
    /** Updated */
    KnownGroupStatus["Updated"] = "Updated";
    /** Running */
    KnownGroupStatus["Running"] = "Running";
    /** Completed */
    KnownGroupStatus["Completed"] = "Completed";
    /** Invalid */
    KnownGroupStatus["Invalid"] = "Invalid";
})(exports.KnownGroupStatus || (exports.KnownGroupStatus = {}));
/** Known values of {@link GroupUpdateOperation} that the service accepts. */
exports.KnownGroupUpdateOperation = void 0;
(function (KnownGroupUpdateOperation) {
    /** Add */
    KnownGroupUpdateOperation["Add"] = "Add";
    /** Remove */
    KnownGroupUpdateOperation["Remove"] = "Remove";
})(exports.KnownGroupUpdateOperation || (exports.KnownGroupUpdateOperation = {}));
/** Known values of {@link AzureLocation} that the service accepts. */
exports.KnownAzureLocation = void 0;
(function (KnownAzureLocation) {
    /** Unknown */
    KnownAzureLocation["Unknown"] = "Unknown";
    /** EastAsia */
    KnownAzureLocation["EastAsia"] = "EastAsia";
    /** SoutheastAsia */
    KnownAzureLocation["SoutheastAsia"] = "SoutheastAsia";
    /** AustraliaEast */
    KnownAzureLocation["AustraliaEast"] = "AustraliaEast";
    /** AustraliaSoutheast */
    KnownAzureLocation["AustraliaSoutheast"] = "AustraliaSoutheast";
    /** BrazilSouth */
    KnownAzureLocation["BrazilSouth"] = "BrazilSouth";
    /** CanadaCentral */
    KnownAzureLocation["CanadaCentral"] = "CanadaCentral";
    /** CanadaEast */
    KnownAzureLocation["CanadaEast"] = "CanadaEast";
    /** WestEurope */
    KnownAzureLocation["WestEurope"] = "WestEurope";
    /** NorthEurope */
    KnownAzureLocation["NorthEurope"] = "NorthEurope";
    /** CentralIndia */
    KnownAzureLocation["CentralIndia"] = "CentralIndia";
    /** SouthIndia */
    KnownAzureLocation["SouthIndia"] = "SouthIndia";
    /** WestIndia */
    KnownAzureLocation["WestIndia"] = "WestIndia";
    /** JapanEast */
    KnownAzureLocation["JapanEast"] = "JapanEast";
    /** JapanWest */
    KnownAzureLocation["JapanWest"] = "JapanWest";
    /** KoreaCentral */
    KnownAzureLocation["KoreaCentral"] = "KoreaCentral";
    /** KoreaSouth */
    KnownAzureLocation["KoreaSouth"] = "KoreaSouth";
    /** UkWest */
    KnownAzureLocation["UkWest"] = "UkWest";
    /** UkSouth */
    KnownAzureLocation["UkSouth"] = "UkSouth";
    /** NorthCentralUs */
    KnownAzureLocation["NorthCentralUs"] = "NorthCentralUs";
    /** EastUs */
    KnownAzureLocation["EastUs"] = "EastUs";
    /** WestUs2 */
    KnownAzureLocation["WestUs2"] = "WestUs2";
    /** SouthCentralUs */
    KnownAzureLocation["SouthCentralUs"] = "SouthCentralUs";
    /** CentralUs */
    KnownAzureLocation["CentralUs"] = "CentralUs";
    /** EastUs2 */
    KnownAzureLocation["EastUs2"] = "EastUs2";
    /** WestUs */
    KnownAzureLocation["WestUs"] = "WestUs";
    /** WestCentralUs */
    KnownAzureLocation["WestCentralUs"] = "WestCentralUs";
    /** GermanyCentral */
    KnownAzureLocation["GermanyCentral"] = "GermanyCentral";
    /** GermanyNortheast */
    KnownAzureLocation["GermanyNortheast"] = "GermanyNortheast";
    /** ChinaNorth */
    KnownAzureLocation["ChinaNorth"] = "ChinaNorth";
    /** ChinaEast */
    KnownAzureLocation["ChinaEast"] = "ChinaEast";
    /** USGovArizona */
    KnownAzureLocation["USGovArizona"] = "USGovArizona";
    /** USGovTexas */
    KnownAzureLocation["USGovTexas"] = "USGovTexas";
    /** USGovIowa */
    KnownAzureLocation["USGovIowa"] = "USGovIowa";
    /** USGovVirginia */
    KnownAzureLocation["USGovVirginia"] = "USGovVirginia";
    /** USDoDCentral */
    KnownAzureLocation["USDoDCentral"] = "USDoDCentral";
    /** USDoDEast */
    KnownAzureLocation["USDoDEast"] = "USDoDEast";
})(exports.KnownAzureLocation || (exports.KnownAzureLocation = {}));
/** Known values of {@link AzureOfferCode} that the service accepts. */
exports.KnownAzureOfferCode = void 0;
(function (KnownAzureOfferCode) {
    /** Unknown */
    KnownAzureOfferCode["Unknown"] = "Unknown";
    /** Msazr0003P */
    KnownAzureOfferCode["Msazr0003P"] = "MSAZR0003P";
    /** Msazr0044P */
    KnownAzureOfferCode["Msazr0044P"] = "MSAZR0044P";
    /** Msazr0059P */
    KnownAzureOfferCode["Msazr0059P"] = "MSAZR0059P";
    /** Msazr0060P */
    KnownAzureOfferCode["Msazr0060P"] = "MSAZR0060P";
    /** Msazr0062P */
    KnownAzureOfferCode["Msazr0062P"] = "MSAZR0062P";
    /** Msazr0063P */
    KnownAzureOfferCode["Msazr0063P"] = "MSAZR0063P";
    /** Msazr0064P */
    KnownAzureOfferCode["Msazr0064P"] = "MSAZR0064P";
    /** Msazr0029P */
    KnownAzureOfferCode["Msazr0029P"] = "MSAZR0029P";
    /** Msazr0022P */
    KnownAzureOfferCode["Msazr0022P"] = "MSAZR0022P";
    /** Msazr0023P */
    KnownAzureOfferCode["Msazr0023P"] = "MSAZR0023P";
    /** Msazr0148P */
    KnownAzureOfferCode["Msazr0148P"] = "MSAZR0148P";
    /** Msazr0025P */
    KnownAzureOfferCode["Msazr0025P"] = "MSAZR0025P";
    /** Msazr0036P */
    KnownAzureOfferCode["Msazr0036P"] = "MSAZR0036P";
    /** Msazr0120P */
    KnownAzureOfferCode["Msazr0120P"] = "MSAZR0120P";
    /** Msazr0121P */
    KnownAzureOfferCode["Msazr0121P"] = "MSAZR0121P";
    /** Msazr0122P */
    KnownAzureOfferCode["Msazr0122P"] = "MSAZR0122P";
    /** Msazr0123P */
    KnownAzureOfferCode["Msazr0123P"] = "MSAZR0123P";
    /** Msazr0124P */
    KnownAzureOfferCode["Msazr0124P"] = "MSAZR0124P";
    /** Msazr0125P */
    KnownAzureOfferCode["Msazr0125P"] = "MSAZR0125P";
    /** Msazr0126P */
    KnownAzureOfferCode["Msazr0126P"] = "MSAZR0126P";
    /** Msazr0127P */
    KnownAzureOfferCode["Msazr0127P"] = "MSAZR0127P";
    /** Msazr0128P */
    KnownAzureOfferCode["Msazr0128P"] = "MSAZR0128P";
    /** Msazr0129P */
    KnownAzureOfferCode["Msazr0129P"] = "MSAZR0129P";
    /** Msazr0130P */
    KnownAzureOfferCode["Msazr0130P"] = "MSAZR0130P";
    /** Msazr0111P */
    KnownAzureOfferCode["Msazr0111P"] = "MSAZR0111P";
    /** Msazr0144P */
    KnownAzureOfferCode["Msazr0144P"] = "MSAZR0144P";
    /** Msazr0149P */
    KnownAzureOfferCode["Msazr0149P"] = "MSAZR0149P";
    /** Msmcazr0044P */
    KnownAzureOfferCode["Msmcazr0044P"] = "MSMCAZR0044P";
    /** Msmcazr0059P */
    KnownAzureOfferCode["Msmcazr0059P"] = "MSMCAZR0059P";
    /** Msmcazr0060P */
    KnownAzureOfferCode["Msmcazr0060P"] = "MSMCAZR0060P";
    /** Msmcazr0063P */
    KnownAzureOfferCode["Msmcazr0063P"] = "MSMCAZR0063P";
    /** Msmcazr0120P */
    KnownAzureOfferCode["Msmcazr0120P"] = "MSMCAZR0120P";
    /** Msmcazr0121P */
    KnownAzureOfferCode["Msmcazr0121P"] = "MSMCAZR0121P";
    /** Msmcazr0125P */
    KnownAzureOfferCode["Msmcazr0125P"] = "MSMCAZR0125P";
    /** Msmcazr0128P */
    KnownAzureOfferCode["Msmcazr0128P"] = "MSMCAZR0128P";
    /** Msazrde0003P */
    KnownAzureOfferCode["Msazrde0003P"] = "MSAZRDE0003P";
    /** Msazrde0044P */
    KnownAzureOfferCode["Msazrde0044P"] = "MSAZRDE0044P";
    /** Msazrusgov0003P */
    KnownAzureOfferCode["Msazrusgov0003P"] = "MSAZRUSGOV0003P";
    /** EA */
    KnownAzureOfferCode["EA"] = "EA";
})(exports.KnownAzureOfferCode || (exports.KnownAzureOfferCode = {}));
/** Known values of {@link AzurePricingTier} that the service accepts. */
exports.KnownAzurePricingTier = void 0;
(function (KnownAzurePricingTier) {
    /** Standard */
    KnownAzurePricingTier["Standard"] = "Standard";
    /** Basic */
    KnownAzurePricingTier["Basic"] = "Basic";
})(exports.KnownAzurePricingTier || (exports.KnownAzurePricingTier = {}));
/** Known values of {@link AzureStorageRedundancy} that the service accepts. */
exports.KnownAzureStorageRedundancy = void 0;
(function (KnownAzureStorageRedundancy) {
    /** Unknown */
    KnownAzureStorageRedundancy["Unknown"] = "Unknown";
    /** LocallyRedundant */
    KnownAzureStorageRedundancy["LocallyRedundant"] = "LocallyRedundant";
    /** ZoneRedundant */
    KnownAzureStorageRedundancy["ZoneRedundant"] = "ZoneRedundant";
    /** GeoRedundant */
    KnownAzureStorageRedundancy["GeoRedundant"] = "GeoRedundant";
    /** ReadAccessGeoRedundant */
    KnownAzureStorageRedundancy["ReadAccessGeoRedundant"] = "ReadAccessGeoRedundant";
})(exports.KnownAzureStorageRedundancy || (exports.KnownAzureStorageRedundancy = {}));
/** Known values of {@link Percentile} that the service accepts. */
exports.KnownPercentile = void 0;
(function (KnownPercentile) {
    /** Percentile50 */
    KnownPercentile["Percentile50"] = "Percentile50";
    /** Percentile90 */
    KnownPercentile["Percentile90"] = "Percentile90";
    /** Percentile95 */
    KnownPercentile["Percentile95"] = "Percentile95";
    /** Percentile99 */
    KnownPercentile["Percentile99"] = "Percentile99";
})(exports.KnownPercentile || (exports.KnownPercentile = {}));
/** Known values of {@link TimeRange} that the service accepts. */
exports.KnownTimeRange = void 0;
(function (KnownTimeRange) {
    /** Day */
    KnownTimeRange["Day"] = "Day";
    /** Week */
    KnownTimeRange["Week"] = "Week";
    /** Month */
    KnownTimeRange["Month"] = "Month";
    /** Custom */
    KnownTimeRange["Custom"] = "Custom";
})(exports.KnownTimeRange || (exports.KnownTimeRange = {}));
/** Known values of {@link AssessmentStage} that the service accepts. */
exports.KnownAssessmentStage = void 0;
(function (KnownAssessmentStage) {
    /** InProgress */
    KnownAssessmentStage["InProgress"] = "InProgress";
    /** UnderReview */
    KnownAssessmentStage["UnderReview"] = "UnderReview";
    /** Approved */
    KnownAssessmentStage["Approved"] = "Approved";
})(exports.KnownAssessmentStage || (exports.KnownAssessmentStage = {}));
/** Known values of {@link Currency} that the service accepts. */
exports.KnownCurrency = void 0;
(function (KnownCurrency) {
    /** Unknown */
    KnownCurrency["Unknown"] = "Unknown";
    /** USD */
    KnownCurrency["USD"] = "USD";
    /** DKK */
    KnownCurrency["DKK"] = "DKK";
    /** CAD */
    KnownCurrency["CAD"] = "CAD";
    /** IDR */
    KnownCurrency["IDR"] = "IDR";
    /** JPY */
    KnownCurrency["JPY"] = "JPY";
    /** KRW */
    KnownCurrency["KRW"] = "KRW";
    /** NZD */
    KnownCurrency["NZD"] = "NZD";
    /** NOK */
    KnownCurrency["NOK"] = "NOK";
    /** RUB */
    KnownCurrency["RUB"] = "RUB";
    /** SAR */
    KnownCurrency["SAR"] = "SAR";
    /** ZAR */
    KnownCurrency["ZAR"] = "ZAR";
    /** SEK */
    KnownCurrency["SEK"] = "SEK";
    /** TRY */
    KnownCurrency["TRY"] = "TRY";
    /** GBP */
    KnownCurrency["GBP"] = "GBP";
    /** MXN */
    KnownCurrency["MXN"] = "MXN";
    /** MYR */
    KnownCurrency["MYR"] = "MYR";
    /** INR */
    KnownCurrency["INR"] = "INR";
    /** HKD */
    KnownCurrency["HKD"] = "HKD";
    /** BRL */
    KnownCurrency["BRL"] = "BRL";
    /** TWD */
    KnownCurrency["TWD"] = "TWD";
    /** EUR */
    KnownCurrency["EUR"] = "EUR";
    /** CHF */
    KnownCurrency["CHF"] = "CHF";
    /** ARS */
    KnownCurrency["ARS"] = "ARS";
    /** AUD */
    KnownCurrency["AUD"] = "AUD";
    /** CNY */
    KnownCurrency["CNY"] = "CNY";
})(exports.KnownCurrency || (exports.KnownCurrency = {}));
/** Known values of {@link AzureHybridUseBenefit} that the service accepts. */
exports.KnownAzureHybridUseBenefit = void 0;
(function (KnownAzureHybridUseBenefit) {
    /** Unknown */
    KnownAzureHybridUseBenefit["Unknown"] = "Unknown";
    /** Yes */
    KnownAzureHybridUseBenefit["Yes"] = "Yes";
    /** No */
    KnownAzureHybridUseBenefit["No"] = "No";
})(exports.KnownAzureHybridUseBenefit || (exports.KnownAzureHybridUseBenefit = {}));
/** Known values of {@link AssessmentSizingCriterion} that the service accepts. */
exports.KnownAssessmentSizingCriterion = void 0;
(function (KnownAssessmentSizingCriterion) {
    /** PerformanceBased */
    KnownAssessmentSizingCriterion["PerformanceBased"] = "PerformanceBased";
    /** AsOnPremises */
    KnownAssessmentSizingCriterion["AsOnPremises"] = "AsOnPremises";
})(exports.KnownAssessmentSizingCriterion || (exports.KnownAssessmentSizingCriterion = {}));
/** Known values of {@link ReservedInstance} that the service accepts. */
exports.KnownReservedInstance = void 0;
(function (KnownReservedInstance) {
    /** None */
    KnownReservedInstance["None"] = "None";
    /** RI1Year */
    KnownReservedInstance["RI1Year"] = "RI1Year";
    /** RI3Year */
    KnownReservedInstance["RI3Year"] = "RI3Year";
})(exports.KnownReservedInstance || (exports.KnownReservedInstance = {}));
/** Known values of {@link AzureVmFamily} that the service accepts. */
exports.KnownAzureVmFamily = void 0;
(function (KnownAzureVmFamily) {
    /** Unknown */
    KnownAzureVmFamily["Unknown"] = "Unknown";
    /** BasicA0A4 */
    KnownAzureVmFamily["BasicA0A4"] = "Basic_A0_A4";
    /** StandardA0A7 */
    KnownAzureVmFamily["StandardA0A7"] = "Standard_A0_A7";
    /** StandardA8A11 */
    KnownAzureVmFamily["StandardA8A11"] = "Standard_A8_A11";
    /** Av2Series */
    KnownAzureVmFamily["Av2Series"] = "Av2_series";
    /** DSeries */
    KnownAzureVmFamily["DSeries"] = "D_series";
    /** Dv2Series */
    KnownAzureVmFamily["Dv2Series"] = "Dv2_series";
    /** DSSeries */
    KnownAzureVmFamily["DSSeries"] = "DS_series";
    /** DSv2Series */
    KnownAzureVmFamily["DSv2Series"] = "DSv2_series";
    /** FSeries */
    KnownAzureVmFamily["FSeries"] = "F_series";
    /** FsSeries */
    KnownAzureVmFamily["FsSeries"] = "Fs_series";
    /** GSeries */
    KnownAzureVmFamily["GSeries"] = "G_series";
    /** GSSeries */
    KnownAzureVmFamily["GSSeries"] = "GS_series";
    /** HSeries */
    KnownAzureVmFamily["HSeries"] = "H_series";
    /** LsSeries */
    KnownAzureVmFamily["LsSeries"] = "Ls_series";
    /** Dsv3Series */
    KnownAzureVmFamily["Dsv3Series"] = "Dsv3_series";
    /** Dv3Series */
    KnownAzureVmFamily["Dv3Series"] = "Dv3_series";
    /** Fsv2Series */
    KnownAzureVmFamily["Fsv2Series"] = "Fsv2_series";
    /** Ev3Series */
    KnownAzureVmFamily["Ev3Series"] = "Ev3_series";
    /** Esv3Series */
    KnownAzureVmFamily["Esv3Series"] = "Esv3_series";
    /** MSeries */
    KnownAzureVmFamily["MSeries"] = "M_series";
    /** DCSeries */
    KnownAzureVmFamily["DCSeries"] = "DC_Series";
})(exports.KnownAzureVmFamily || (exports.KnownAzureVmFamily = {}));
/** Known values of {@link AzureDiskType} that the service accepts. */
exports.KnownAzureDiskType = void 0;
(function (KnownAzureDiskType) {
    /** Unknown */
    KnownAzureDiskType["Unknown"] = "Unknown";
    /** Standard */
    KnownAzureDiskType["Standard"] = "Standard";
    /** Premium */
    KnownAzureDiskType["Premium"] = "Premium";
    /** StandardSSD */
    KnownAzureDiskType["StandardSSD"] = "StandardSSD";
    /** StandardOrPremium */
    KnownAzureDiskType["StandardOrPremium"] = "StandardOrPremium";
})(exports.KnownAzureDiskType || (exports.KnownAzureDiskType = {}));
/** Known values of {@link AssessmentStatus} that the service accepts. */
exports.KnownAssessmentStatus = void 0;
(function (KnownAssessmentStatus) {
    /** Created */
    KnownAssessmentStatus["Created"] = "Created";
    /** Updated */
    KnownAssessmentStatus["Updated"] = "Updated";
    /** Running */
    KnownAssessmentStatus["Running"] = "Running";
    /** Completed */
    KnownAssessmentStatus["Completed"] = "Completed";
    /** Invalid */
    KnownAssessmentStatus["Invalid"] = "Invalid";
    /** OutOfSync */
    KnownAssessmentStatus["OutOfSync"] = "OutOfSync";
    /** OutDated */
    KnownAssessmentStatus["OutDated"] = "OutDated";
})(exports.KnownAssessmentStatus || (exports.KnownAssessmentStatus = {}));
/** Known values of {@link AzureDiskSize} that the service accepts. */
exports.KnownAzureDiskSize = void 0;
(function (KnownAzureDiskSize) {
    /** Unknown */
    KnownAzureDiskSize["Unknown"] = "Unknown";
    /** StandardS4 */
    KnownAzureDiskSize["StandardS4"] = "Standard_S4";
    /** StandardS6 */
    KnownAzureDiskSize["StandardS6"] = "Standard_S6";
    /** StandardS10 */
    KnownAzureDiskSize["StandardS10"] = "Standard_S10";
    /** StandardS15 */
    KnownAzureDiskSize["StandardS15"] = "Standard_S15";
    /** StandardS20 */
    KnownAzureDiskSize["StandardS20"] = "Standard_S20";
    /** StandardS30 */
    KnownAzureDiskSize["StandardS30"] = "Standard_S30";
    /** StandardS40 */
    KnownAzureDiskSize["StandardS40"] = "Standard_S40";
    /** StandardS50 */
    KnownAzureDiskSize["StandardS50"] = "Standard_S50";
    /** PremiumP4 */
    KnownAzureDiskSize["PremiumP4"] = "Premium_P4";
    /** PremiumP6 */
    KnownAzureDiskSize["PremiumP6"] = "Premium_P6";
    /** PremiumP10 */
    KnownAzureDiskSize["PremiumP10"] = "Premium_P10";
    /** PremiumP15 */
    KnownAzureDiskSize["PremiumP15"] = "Premium_P15";
    /** PremiumP20 */
    KnownAzureDiskSize["PremiumP20"] = "Premium_P20";
    /** PremiumP30 */
    KnownAzureDiskSize["PremiumP30"] = "Premium_P30";
    /** PremiumP40 */
    KnownAzureDiskSize["PremiumP40"] = "Premium_P40";
    /** PremiumP50 */
    KnownAzureDiskSize["PremiumP50"] = "Premium_P50";
    /** StandardS60 */
    KnownAzureDiskSize["StandardS60"] = "Standard_S60";
    /** StandardS70 */
    KnownAzureDiskSize["StandardS70"] = "Standard_S70";
    /** StandardS80 */
    KnownAzureDiskSize["StandardS80"] = "Standard_S80";
    /** PremiumP60 */
    KnownAzureDiskSize["PremiumP60"] = "Premium_P60";
    /** PremiumP70 */
    KnownAzureDiskSize["PremiumP70"] = "Premium_P70";
    /** PremiumP80 */
    KnownAzureDiskSize["PremiumP80"] = "Premium_P80";
    /** StandardSSDE10 */
    KnownAzureDiskSize["StandardSSDE10"] = "StandardSSD_E10";
    /** StandardSSDE15 */
    KnownAzureDiskSize["StandardSSDE15"] = "StandardSSD_E15";
    /** StandardSSDE20 */
    KnownAzureDiskSize["StandardSSDE20"] = "StandardSSD_E20";
    /** StandardSSDE30 */
    KnownAzureDiskSize["StandardSSDE30"] = "StandardSSD_E30";
    /** StandardSSDE40 */
    KnownAzureDiskSize["StandardSSDE40"] = "StandardSSD_E40";
    /** StandardSSDE50 */
    KnownAzureDiskSize["StandardSSDE50"] = "StandardSSD_E50";
    /** StandardSSDE60 */
    KnownAzureDiskSize["StandardSSDE60"] = "StandardSSD_E60";
    /** StandardSSDE70 */
    KnownAzureDiskSize["StandardSSDE70"] = "StandardSSD_E70";
    /** StandardSSDE80 */
    KnownAzureDiskSize["StandardSSDE80"] = "StandardSSD_E80";
    /** StandardSSDE4 */
    KnownAzureDiskSize["StandardSSDE4"] = "StandardSSD_E4";
    /** StandardSSDE6 */
    KnownAzureDiskSize["StandardSSDE6"] = "StandardSSD_E6";
})(exports.KnownAzureDiskSize || (exports.KnownAzureDiskSize = {}));
/** Known values of {@link CloudSuitability} that the service accepts. */
exports.KnownCloudSuitability = void 0;
(function (KnownCloudSuitability) {
    /** Unknown */
    KnownCloudSuitability["Unknown"] = "Unknown";
    /** NotSuitable */
    KnownCloudSuitability["NotSuitable"] = "NotSuitable";
    /** Suitable */
    KnownCloudSuitability["Suitable"] = "Suitable";
    /** ConditionallySuitable */
    KnownCloudSuitability["ConditionallySuitable"] = "ConditionallySuitable";
    /** ReadinessUnknown */
    KnownCloudSuitability["ReadinessUnknown"] = "ReadinessUnknown";
})(exports.KnownCloudSuitability || (exports.KnownCloudSuitability = {}));
/** Known values of {@link AzureDiskSuitabilityExplanation} that the service accepts. */
exports.KnownAzureDiskSuitabilityExplanation = void 0;
(function (KnownAzureDiskSuitabilityExplanation) {
    /** Unknown */
    KnownAzureDiskSuitabilityExplanation["Unknown"] = "Unknown";
    /** NotApplicable */
    KnownAzureDiskSuitabilityExplanation["NotApplicable"] = "NotApplicable";
    /** DiskSizeGreaterThanSupported */
    KnownAzureDiskSuitabilityExplanation["DiskSizeGreaterThanSupported"] = "DiskSizeGreaterThanSupported";
    /** NoSuitableDiskSizeForIops */
    KnownAzureDiskSuitabilityExplanation["NoSuitableDiskSizeForIops"] = "NoSuitableDiskSizeForIops";
    /** NoSuitableDiskSizeForThroughput */
    KnownAzureDiskSuitabilityExplanation["NoSuitableDiskSizeForThroughput"] = "NoSuitableDiskSizeForThroughput";
    /** NoDiskSizeFoundInSelectedLocation */
    KnownAzureDiskSuitabilityExplanation["NoDiskSizeFoundInSelectedLocation"] = "NoDiskSizeFoundInSelectedLocation";
    /** NoDiskSizeFoundForSelectedRedundancy */
    KnownAzureDiskSuitabilityExplanation["NoDiskSizeFoundForSelectedRedundancy"] = "NoDiskSizeFoundForSelectedRedundancy";
    /** InternalErrorOccurredForDiskEvaluation */
    KnownAzureDiskSuitabilityExplanation["InternalErrorOccurredForDiskEvaluation"] = "InternalErrorOccurredForDiskEvaluation";
    /** NoEaPriceFoundForDiskSize */
    KnownAzureDiskSuitabilityExplanation["NoEaPriceFoundForDiskSize"] = "NoEaPriceFoundForDiskSize";
})(exports.KnownAzureDiskSuitabilityExplanation || (exports.KnownAzureDiskSuitabilityExplanation = {}));
/** Known values of {@link AzureDiskSuitabilityDetail} that the service accepts. */
exports.KnownAzureDiskSuitabilityDetail = void 0;
(function (KnownAzureDiskSuitabilityDetail) {
    /** None */
    KnownAzureDiskSuitabilityDetail["None"] = "None";
    /** NumberOfReadOperationsPerSecondMissing */
    KnownAzureDiskSuitabilityDetail["NumberOfReadOperationsPerSecondMissing"] = "NumberOfReadOperationsPerSecondMissing";
    /** NumberOfWriteOperationsPerSecondMissing */
    KnownAzureDiskSuitabilityDetail["NumberOfWriteOperationsPerSecondMissing"] = "NumberOfWriteOperationsPerSecondMissing";
    /** MegabytesPerSecondOfReadMissing */
    KnownAzureDiskSuitabilityDetail["MegabytesPerSecondOfReadMissing"] = "MegabytesPerSecondOfReadMissing";
    /** MegabytesPerSecondOfWriteMissing */
    KnownAzureDiskSuitabilityDetail["MegabytesPerSecondOfWriteMissing"] = "MegabytesPerSecondOfWriteMissing";
    /** DiskGigabytesConsumedMissing */
    KnownAzureDiskSuitabilityDetail["DiskGigabytesConsumedMissing"] = "DiskGigabytesConsumedMissing";
    /** DiskGigabytesProvisionedMissing */
    KnownAzureDiskSuitabilityDetail["DiskGigabytesProvisionedMissing"] = "DiskGigabytesProvisionedMissing";
    /** NumberOfReadOperationsPerSecondOutOfRange */
    KnownAzureDiskSuitabilityDetail["NumberOfReadOperationsPerSecondOutOfRange"] = "NumberOfReadOperationsPerSecondOutOfRange";
    /** NumberOfWriteOperationsPerSecondOutOfRange */
    KnownAzureDiskSuitabilityDetail["NumberOfWriteOperationsPerSecondOutOfRange"] = "NumberOfWriteOperationsPerSecondOutOfRange";
    /** MegabytesPerSecondOfReadOutOfRange */
    KnownAzureDiskSuitabilityDetail["MegabytesPerSecondOfReadOutOfRange"] = "MegabytesPerSecondOfReadOutOfRange";
    /** MegabytesPerSecondOfWriteOutOfRange */
    KnownAzureDiskSuitabilityDetail["MegabytesPerSecondOfWriteOutOfRange"] = "MegabytesPerSecondOfWriteOutOfRange";
    /** DiskGigabytesConsumedOutOfRange */
    KnownAzureDiskSuitabilityDetail["DiskGigabytesConsumedOutOfRange"] = "DiskGigabytesConsumedOutOfRange";
    /** DiskGigabytesProvisionedOutOfRange */
    KnownAzureDiskSuitabilityDetail["DiskGigabytesProvisionedOutOfRange"] = "DiskGigabytesProvisionedOutOfRange";
})(exports.KnownAzureDiskSuitabilityDetail || (exports.KnownAzureDiskSuitabilityDetail = {}));
/** Known values of {@link AzureNetworkAdapterSuitabilityExplanation} that the service accepts. */
exports.KnownAzureNetworkAdapterSuitabilityExplanation = void 0;
(function (KnownAzureNetworkAdapterSuitabilityExplanation) {
    /** Unknown */
    KnownAzureNetworkAdapterSuitabilityExplanation["Unknown"] = "Unknown";
    /** NotApplicable */
    KnownAzureNetworkAdapterSuitabilityExplanation["NotApplicable"] = "NotApplicable";
    /** InternalErrorOccurred */
    KnownAzureNetworkAdapterSuitabilityExplanation["InternalErrorOccurred"] = "InternalErrorOccurred";
})(exports.KnownAzureNetworkAdapterSuitabilityExplanation || (exports.KnownAzureNetworkAdapterSuitabilityExplanation = {}));
/** Known values of {@link AzureNetworkAdapterSuitabilityDetail} that the service accepts. */
exports.KnownAzureNetworkAdapterSuitabilityDetail = void 0;
(function (KnownAzureNetworkAdapterSuitabilityDetail) {
    /** None */
    KnownAzureNetworkAdapterSuitabilityDetail["None"] = "None";
    /** MegabytesOfDataTransmittedMissing */
    KnownAzureNetworkAdapterSuitabilityDetail["MegabytesOfDataTransmittedMissing"] = "MegabytesOfDataTransmittedMissing";
    /** MegabytesOfDataTransmittedOutOfRange */
    KnownAzureNetworkAdapterSuitabilityDetail["MegabytesOfDataTransmittedOutOfRange"] = "MegabytesOfDataTransmittedOutOfRange";
})(exports.KnownAzureNetworkAdapterSuitabilityDetail || (exports.KnownAzureNetworkAdapterSuitabilityDetail = {}));
/** Known values of {@link AzureVmSize} that the service accepts. */
exports.KnownAzureVmSize = void 0;
(function (KnownAzureVmSize) {
    /** Unknown */
    KnownAzureVmSize["Unknown"] = "Unknown";
    /** BasicA0 */
    KnownAzureVmSize["BasicA0"] = "Basic_A0";
    /** BasicA1 */
    KnownAzureVmSize["BasicA1"] = "Basic_A1";
    /** BasicA2 */
    KnownAzureVmSize["BasicA2"] = "Basic_A2";
    /** BasicA3 */
    KnownAzureVmSize["BasicA3"] = "Basic_A3";
    /** BasicA4 */
    KnownAzureVmSize["BasicA4"] = "Basic_A4";
    /** StandardA0 */
    KnownAzureVmSize["StandardA0"] = "Standard_A0";
    /** StandardA1 */
    KnownAzureVmSize["StandardA1"] = "Standard_A1";
    /** StandardA2 */
    KnownAzureVmSize["StandardA2"] = "Standard_A2";
    /** StandardA3 */
    KnownAzureVmSize["StandardA3"] = "Standard_A3";
    /** StandardA4 */
    KnownAzureVmSize["StandardA4"] = "Standard_A4";
    /** StandardA5 */
    KnownAzureVmSize["StandardA5"] = "Standard_A5";
    /** StandardA6 */
    KnownAzureVmSize["StandardA6"] = "Standard_A6";
    /** StandardA7 */
    KnownAzureVmSize["StandardA7"] = "Standard_A7";
    /** StandardA8 */
    KnownAzureVmSize["StandardA8"] = "Standard_A8";
    /** StandardA9 */
    KnownAzureVmSize["StandardA9"] = "Standard_A9";
    /** StandardA10 */
    KnownAzureVmSize["StandardA10"] = "Standard_A10";
    /** StandardA11 */
    KnownAzureVmSize["StandardA11"] = "Standard_A11";
    /** StandardA1V2 */
    KnownAzureVmSize["StandardA1V2"] = "Standard_A1_v2";
    /** StandardA2V2 */
    KnownAzureVmSize["StandardA2V2"] = "Standard_A2_v2";
    /** StandardA4V2 */
    KnownAzureVmSize["StandardA4V2"] = "Standard_A4_v2";
    /** StandardA8V2 */
    KnownAzureVmSize["StandardA8V2"] = "Standard_A8_v2";
    /** StandardA2MV2 */
    KnownAzureVmSize["StandardA2MV2"] = "Standard_A2m_v2";
    /** StandardA4MV2 */
    KnownAzureVmSize["StandardA4MV2"] = "Standard_A4m_v2";
    /** StandardA8MV2 */
    KnownAzureVmSize["StandardA8MV2"] = "Standard_A8m_v2";
    /** StandardD1 */
    KnownAzureVmSize["StandardD1"] = "Standard_D1";
    /** StandardD2 */
    KnownAzureVmSize["StandardD2"] = "Standard_D2";
    /** StandardD3 */
    KnownAzureVmSize["StandardD3"] = "Standard_D3";
    /** StandardD4 */
    KnownAzureVmSize["StandardD4"] = "Standard_D4";
    /** StandardD11 */
    KnownAzureVmSize["StandardD11"] = "Standard_D11";
    /** StandardD12 */
    KnownAzureVmSize["StandardD12"] = "Standard_D12";
    /** StandardD13 */
    KnownAzureVmSize["StandardD13"] = "Standard_D13";
    /** StandardD14 */
    KnownAzureVmSize["StandardD14"] = "Standard_D14";
    /** StandardD1V2 */
    KnownAzureVmSize["StandardD1V2"] = "Standard_D1_v2";
    /** StandardD2V2 */
    KnownAzureVmSize["StandardD2V2"] = "Standard_D2_v2";
    /** StandardD3V2 */
    KnownAzureVmSize["StandardD3V2"] = "Standard_D3_v2";
    /** StandardD4V2 */
    KnownAzureVmSize["StandardD4V2"] = "Standard_D4_v2";
    /** StandardD5V2 */
    KnownAzureVmSize["StandardD5V2"] = "Standard_D5_v2";
    /** StandardD11V2 */
    KnownAzureVmSize["StandardD11V2"] = "Standard_D11_v2";
    /** StandardD12V2 */
    KnownAzureVmSize["StandardD12V2"] = "Standard_D12_v2";
    /** StandardD13V2 */
    KnownAzureVmSize["StandardD13V2"] = "Standard_D13_v2";
    /** StandardD14V2 */
    KnownAzureVmSize["StandardD14V2"] = "Standard_D14_v2";
    /** StandardD15V2 */
    KnownAzureVmSize["StandardD15V2"] = "Standard_D15_v2";
    /** StandardDS1 */
    KnownAzureVmSize["StandardDS1"] = "Standard_DS1";
    /** StandardDS2 */
    KnownAzureVmSize["StandardDS2"] = "Standard_DS2";
    /** StandardDS3 */
    KnownAzureVmSize["StandardDS3"] = "Standard_DS3";
    /** StandardDS4 */
    KnownAzureVmSize["StandardDS4"] = "Standard_DS4";
    /** StandardDS11 */
    KnownAzureVmSize["StandardDS11"] = "Standard_DS11";
    /** StandardDS12 */
    KnownAzureVmSize["StandardDS12"] = "Standard_DS12";
    /** StandardDS13 */
    KnownAzureVmSize["StandardDS13"] = "Standard_DS13";
    /** StandardDS14 */
    KnownAzureVmSize["StandardDS14"] = "Standard_DS14";
    /** StandardDS1V2 */
    KnownAzureVmSize["StandardDS1V2"] = "Standard_DS1_v2";
    /** StandardDS2V2 */
    KnownAzureVmSize["StandardDS2V2"] = "Standard_DS2_v2";
    /** StandardDS3V2 */
    KnownAzureVmSize["StandardDS3V2"] = "Standard_DS3_v2";
    /** StandardDS4V2 */
    KnownAzureVmSize["StandardDS4V2"] = "Standard_DS4_v2";
    /** StandardDS5V2 */
    KnownAzureVmSize["StandardDS5V2"] = "Standard_DS5_v2";
    /** StandardDS11V2 */
    KnownAzureVmSize["StandardDS11V2"] = "Standard_DS11_v2";
    /** StandardDS12V2 */
    KnownAzureVmSize["StandardDS12V2"] = "Standard_DS12_v2";
    /** StandardDS13V2 */
    KnownAzureVmSize["StandardDS13V2"] = "Standard_DS13_v2";
    /** StandardDS14V2 */
    KnownAzureVmSize["StandardDS14V2"] = "Standard_DS14_v2";
    /** StandardDS15V2 */
    KnownAzureVmSize["StandardDS15V2"] = "Standard_DS15_v2";
    /** StandardF1 */
    KnownAzureVmSize["StandardF1"] = "Standard_F1";
    /** StandardF2 */
    KnownAzureVmSize["StandardF2"] = "Standard_F2";
    /** StandardF4 */
    KnownAzureVmSize["StandardF4"] = "Standard_F4";
    /** StandardF8 */
    KnownAzureVmSize["StandardF8"] = "Standard_F8";
    /** StandardF16 */
    KnownAzureVmSize["StandardF16"] = "Standard_F16";
    /** StandardF1S */
    KnownAzureVmSize["StandardF1S"] = "Standard_F1s";
    /** StandardF2S */
    KnownAzureVmSize["StandardF2S"] = "Standard_F2s";
    /** StandardF4S */
    KnownAzureVmSize["StandardF4S"] = "Standard_F4s";
    /** StandardF8S */
    KnownAzureVmSize["StandardF8S"] = "Standard_F8s";
    /** StandardF16S */
    KnownAzureVmSize["StandardF16S"] = "Standard_F16s";
    /** StandardG1 */
    KnownAzureVmSize["StandardG1"] = "Standard_G1";
    /** StandardG2 */
    KnownAzureVmSize["StandardG2"] = "Standard_G2";
    /** StandardG3 */
    KnownAzureVmSize["StandardG3"] = "Standard_G3";
    /** StandardG4 */
    KnownAzureVmSize["StandardG4"] = "Standard_G4";
    /** StandardG5 */
    KnownAzureVmSize["StandardG5"] = "Standard_G5";
    /** StandardGS1 */
    KnownAzureVmSize["StandardGS1"] = "Standard_GS1";
    /** StandardGS2 */
    KnownAzureVmSize["StandardGS2"] = "Standard_GS2";
    /** StandardGS3 */
    KnownAzureVmSize["StandardGS3"] = "Standard_GS3";
    /** StandardGS4 */
    KnownAzureVmSize["StandardGS4"] = "Standard_GS4";
    /** StandardGS5 */
    KnownAzureVmSize["StandardGS5"] = "Standard_GS5";
    /** StandardH8 */
    KnownAzureVmSize["StandardH8"] = "Standard_H8";
    /** StandardH16 */
    KnownAzureVmSize["StandardH16"] = "Standard_H16";
    /** StandardH8M */
    KnownAzureVmSize["StandardH8M"] = "Standard_H8m";
    /** StandardH16M */
    KnownAzureVmSize["StandardH16M"] = "Standard_H16m";
    /** StandardH16R */
    KnownAzureVmSize["StandardH16R"] = "Standard_H16r";
    /** StandardH16Mr */
    KnownAzureVmSize["StandardH16Mr"] = "Standard_H16mr";
    /** StandardL4S */
    KnownAzureVmSize["StandardL4S"] = "Standard_L4s";
    /** StandardL8S */
    KnownAzureVmSize["StandardL8S"] = "Standard_L8s";
    /** StandardL16S */
    KnownAzureVmSize["StandardL16S"] = "Standard_L16s";
    /** StandardL32S */
    KnownAzureVmSize["StandardL32S"] = "Standard_L32s";
    /** StandardD2SV3 */
    KnownAzureVmSize["StandardD2SV3"] = "Standard_D2s_v3";
    /** StandardD4SV3 */
    KnownAzureVmSize["StandardD4SV3"] = "Standard_D4s_v3";
    /** StandardD8SV3 */
    KnownAzureVmSize["StandardD8SV3"] = "Standard_D8s_v3";
    /** StandardD16SV3 */
    KnownAzureVmSize["StandardD16SV3"] = "Standard_D16s_v3";
    /** StandardD32SV3 */
    KnownAzureVmSize["StandardD32SV3"] = "Standard_D32s_v3";
    /** StandardD64SV3 */
    KnownAzureVmSize["StandardD64SV3"] = "Standard_D64s_v3";
    /** StandardD2V3 */
    KnownAzureVmSize["StandardD2V3"] = "Standard_D2_v3";
    /** StandardD4V3 */
    KnownAzureVmSize["StandardD4V3"] = "Standard_D4_v3";
    /** StandardD8V3 */
    KnownAzureVmSize["StandardD8V3"] = "Standard_D8_v3";
    /** StandardD16V3 */
    KnownAzureVmSize["StandardD16V3"] = "Standard_D16_v3";
    /** StandardD32V3 */
    KnownAzureVmSize["StandardD32V3"] = "Standard_D32_v3";
    /** StandardD64V3 */
    KnownAzureVmSize["StandardD64V3"] = "Standard_D64_v3";
    /** StandardF2SV2 */
    KnownAzureVmSize["StandardF2SV2"] = "Standard_F2s_v2";
    /** StandardF4SV2 */
    KnownAzureVmSize["StandardF4SV2"] = "Standard_F4s_v2";
    /** StandardF8SV2 */
    KnownAzureVmSize["StandardF8SV2"] = "Standard_F8s_v2";
    /** StandardF16SV2 */
    KnownAzureVmSize["StandardF16SV2"] = "Standard_F16s_v2";
    /** StandardF32SV2 */
    KnownAzureVmSize["StandardF32SV2"] = "Standard_F32s_v2";
    /** StandardF64SV2 */
    KnownAzureVmSize["StandardF64SV2"] = "Standard_F64s_v2";
    /** StandardF72SV2 */
    KnownAzureVmSize["StandardF72SV2"] = "Standard_F72s_v2";
    /** StandardE2V3 */
    KnownAzureVmSize["StandardE2V3"] = "Standard_E2_v3";
    /** StandardE4V3 */
    KnownAzureVmSize["StandardE4V3"] = "Standard_E4_v3";
    /** StandardE8V3 */
    KnownAzureVmSize["StandardE8V3"] = "Standard_E8_v3";
    /** StandardE16V3 */
    KnownAzureVmSize["StandardE16V3"] = "Standard_E16_v3";
    /** StandardE32V3 */
    KnownAzureVmSize["StandardE32V3"] = "Standard_E32_v3";
    /** StandardE64V3 */
    KnownAzureVmSize["StandardE64V3"] = "Standard_E64_v3";
    /** StandardE2SV3 */
    KnownAzureVmSize["StandardE2SV3"] = "Standard_E2s_v3";
    /** StandardE4SV3 */
    KnownAzureVmSize["StandardE4SV3"] = "Standard_E4s_v3";
    /** StandardE8SV3 */
    KnownAzureVmSize["StandardE8SV3"] = "Standard_E8s_v3";
    /** StandardE16SV3 */
    KnownAzureVmSize["StandardE16SV3"] = "Standard_E16s_v3";
    /** StandardE32SV3 */
    KnownAzureVmSize["StandardE32SV3"] = "Standard_E32s_v3";
    /** StandardE64SV3 */
    KnownAzureVmSize["StandardE64SV3"] = "Standard_E64s_v3";
    /** StandardM64S */
    KnownAzureVmSize["StandardM64S"] = "Standard_M64s";
    /** StandardM64Ms */
    KnownAzureVmSize["StandardM64Ms"] = "Standard_M64ms";
    /** StandardM128S */
    KnownAzureVmSize["StandardM128S"] = "Standard_M128s";
    /** StandardM128Ms */
    KnownAzureVmSize["StandardM128Ms"] = "Standard_M128ms";
})(exports.KnownAzureVmSize || (exports.KnownAzureVmSize = {}));
/** Known values of {@link AzureVmSuitabilityExplanation} that the service accepts. */
exports.KnownAzureVmSuitabilityExplanation = void 0;
(function (KnownAzureVmSuitabilityExplanation) {
    /** Unknown */
    KnownAzureVmSuitabilityExplanation["Unknown"] = "Unknown";
    /** NotApplicable */
    KnownAzureVmSuitabilityExplanation["NotApplicable"] = "NotApplicable";
    /** GuestOperatingSystemArchitectureNotSupported */
    KnownAzureVmSuitabilityExplanation["GuestOperatingSystemArchitectureNotSupported"] = "GuestOperatingSystemArchitectureNotSupported";
    /** GuestOperatingSystemNotSupported */
    KnownAzureVmSuitabilityExplanation["GuestOperatingSystemNotSupported"] = "GuestOperatingSystemNotSupported";
    /** BootTypeNotSupported */
    KnownAzureVmSuitabilityExplanation["BootTypeNotSupported"] = "BootTypeNotSupported";
    /** MoreDisksThanSupported */
    KnownAzureVmSuitabilityExplanation["MoreDisksThanSupported"] = "MoreDisksThanSupported";
    /** NoSuitableVmSizeFound */
    KnownAzureVmSuitabilityExplanation["NoSuitableVmSizeFound"] = "NoSuitableVmSizeFound";
    /** OneOrMoreDisksNotSuitable */
    KnownAzureVmSuitabilityExplanation["OneOrMoreDisksNotSuitable"] = "OneOrMoreDisksNotSuitable";
    /** OneOrMoreAdaptersNotSuitable */
    KnownAzureVmSuitabilityExplanation["OneOrMoreAdaptersNotSuitable"] = "OneOrMoreAdaptersNotSuitable";
    /** InternalErrorOccurredDuringComputeEvaluation */
    KnownAzureVmSuitabilityExplanation["InternalErrorOccurredDuringComputeEvaluation"] = "InternalErrorOccurredDuringComputeEvaluation";
    /** InternalErrorOccurredDuringStorageEvaluation */
    KnownAzureVmSuitabilityExplanation["InternalErrorOccurredDuringStorageEvaluation"] = "InternalErrorOccurredDuringStorageEvaluation";
    /** InternalErrorOccurredDuringNetworkEvaluation */
    KnownAzureVmSuitabilityExplanation["InternalErrorOccurredDuringNetworkEvaluation"] = "InternalErrorOccurredDuringNetworkEvaluation";
    /** NoVmSizeSupportsStoragePerformance */
    KnownAzureVmSuitabilityExplanation["NoVmSizeSupportsStoragePerformance"] = "NoVmSizeSupportsStoragePerformance";
    /** NoVmSizeSupportsNetworkPerformance */
    KnownAzureVmSuitabilityExplanation["NoVmSizeSupportsNetworkPerformance"] = "NoVmSizeSupportsNetworkPerformance";
    /** NoVmSizeForSelectedPricingTier */
    KnownAzureVmSuitabilityExplanation["NoVmSizeForSelectedPricingTier"] = "NoVmSizeForSelectedPricingTier";
    /** NoVmSizeForSelectedAzureLocation */
    KnownAzureVmSuitabilityExplanation["NoVmSizeForSelectedAzureLocation"] = "NoVmSizeForSelectedAzureLocation";
    /** CheckRedHatLinuxVersion */
    KnownAzureVmSuitabilityExplanation["CheckRedHatLinuxVersion"] = "CheckRedHatLinuxVersion";
    /** CheckOpenSuseLinuxVersion */
    KnownAzureVmSuitabilityExplanation["CheckOpenSuseLinuxVersion"] = "CheckOpenSuseLinuxVersion";
    /** CheckWindowsServer2008R2Version */
    KnownAzureVmSuitabilityExplanation["CheckWindowsServer2008R2Version"] = "CheckWindowsServer2008R2Version";
    /** CheckCentOsVersion */
    KnownAzureVmSuitabilityExplanation["CheckCentOsVersion"] = "CheckCentOsVersion";
    /** CheckDebianLinuxVersion */
    KnownAzureVmSuitabilityExplanation["CheckDebianLinuxVersion"] = "CheckDebianLinuxVersion";
    /** CheckSuseLinuxVersion */
    KnownAzureVmSuitabilityExplanation["CheckSuseLinuxVersion"] = "CheckSuseLinuxVersion";
    /** CheckOracleLinuxVersion */
    KnownAzureVmSuitabilityExplanation["CheckOracleLinuxVersion"] = "CheckOracleLinuxVersion";
    /** CheckUbuntuLinuxVersion */
    KnownAzureVmSuitabilityExplanation["CheckUbuntuLinuxVersion"] = "CheckUbuntuLinuxVersion";
    /** CheckCoreOsLinuxVersion */
    KnownAzureVmSuitabilityExplanation["CheckCoreOsLinuxVersion"] = "CheckCoreOsLinuxVersion";
    /** WindowsServerVersionConditionallySupported */
    KnownAzureVmSuitabilityExplanation["WindowsServerVersionConditionallySupported"] = "WindowsServerVersionConditionallySupported";
    /** NoGuestOperatingSystemConditionallySupported */
    KnownAzureVmSuitabilityExplanation["NoGuestOperatingSystemConditionallySupported"] = "NoGuestOperatingSystemConditionallySupported";
    /** WindowsClientVersionsConditionallySupported */
    KnownAzureVmSuitabilityExplanation["WindowsClientVersionsConditionallySupported"] = "WindowsClientVersionsConditionallySupported";
    /** BootTypeUnknown */
    KnownAzureVmSuitabilityExplanation["BootTypeUnknown"] = "BootTypeUnknown";
    /** GuestOperatingSystemUnknown */
    KnownAzureVmSuitabilityExplanation["GuestOperatingSystemUnknown"] = "GuestOperatingSystemUnknown";
    /** WindowsServerVersionsSupportedWithCaveat */
    KnownAzureVmSuitabilityExplanation["WindowsServerVersionsSupportedWithCaveat"] = "WindowsServerVersionsSupportedWithCaveat";
    /** WindowsOSNoLongerUnderMSSupport */
    KnownAzureVmSuitabilityExplanation["WindowsOSNoLongerUnderMSSupport"] = "WindowsOSNoLongerUnderMSSupport";
    /** EndorsedWithConditionsLinuxDistributions */
    KnownAzureVmSuitabilityExplanation["EndorsedWithConditionsLinuxDistributions"] = "EndorsedWithConditionsLinuxDistributions";
    /** UnendorsedLinuxDistributions */
    KnownAzureVmSuitabilityExplanation["UnendorsedLinuxDistributions"] = "UnendorsedLinuxDistributions";
    /** NoVmSizeForStandardPricingTier */
    KnownAzureVmSuitabilityExplanation["NoVmSizeForStandardPricingTier"] = "NoVmSizeForStandardPricingTier";
    /** NoVmSizeForBasicPricingTier */
    KnownAzureVmSuitabilityExplanation["NoVmSizeForBasicPricingTier"] = "NoVmSizeForBasicPricingTier";
})(exports.KnownAzureVmSuitabilityExplanation || (exports.KnownAzureVmSuitabilityExplanation = {}));
/** Known values of {@link AzureVmSuitabilityDetail} that the service accepts. */
exports.KnownAzureVmSuitabilityDetail = void 0;
(function (KnownAzureVmSuitabilityDetail) {
    /** None */
    KnownAzureVmSuitabilityDetail["None"] = "None";
    /** RecommendedSizeHasLessNetworkAdapters */
    KnownAzureVmSuitabilityDetail["RecommendedSizeHasLessNetworkAdapters"] = "RecommendedSizeHasLessNetworkAdapters";
    /** CannotReportComputeCost */
    KnownAzureVmSuitabilityDetail["CannotReportComputeCost"] = "CannotReportComputeCost";
    /** CannotReportStorageCost */
    KnownAzureVmSuitabilityDetail["CannotReportStorageCost"] = "CannotReportStorageCost";
    /** CannotReportBandwidthCosts */
    KnownAzureVmSuitabilityDetail["CannotReportBandwidthCosts"] = "CannotReportBandwidthCosts";
    /** PercentageOfCoresUtilizedMissing */
    KnownAzureVmSuitabilityDetail["PercentageOfCoresUtilizedMissing"] = "PercentageOfCoresUtilizedMissing";
    /** PercentageOfMemoryUtilizedMissing */
    KnownAzureVmSuitabilityDetail["PercentageOfMemoryUtilizedMissing"] = "PercentageOfMemoryUtilizedMissing";
    /** PercentageOfCoresUtilizedOutOfRange */
    KnownAzureVmSuitabilityDetail["PercentageOfCoresUtilizedOutOfRange"] = "PercentageOfCoresUtilizedOutOfRange";
    /** PercentageOfMemoryUtilizedOutOfRange */
    KnownAzureVmSuitabilityDetail["PercentageOfMemoryUtilizedOutOfRange"] = "PercentageOfMemoryUtilizedOutOfRange";
})(exports.KnownAzureVmSuitabilityDetail || (exports.KnownAzureVmSuitabilityDetail = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ProjectResultList = {
    type: {
        name: "Composite",
        className: "ProjectResultList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Project"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Project = {
    type: {
        name: "Composite",
        className: "Project",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProjectProperties"
                }
            }
        }
    }
};
const ProjectProperties = {
    type: {
        name: "Composite",
        className: "ProjectProperties",
        modelProperties: {
            createdTimestamp: {
                serializedName: "createdTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            updatedTimestamp: {
                serializedName: "updatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            serviceEndpoint: {
                serializedName: "serviceEndpoint",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            assessmentSolutionId: {
                serializedName: "assessmentSolutionId",
                type: {
                    name: "String"
                }
            },
            projectStatus: {
                serializedName: "projectStatus",
                type: {
                    name: "String"
                }
            },
            customerWorkspaceId: {
                serializedName: "customerWorkspaceId",
                type: {
                    name: "String"
                }
            },
            customerWorkspaceLocation: {
                serializedName: "customerWorkspaceLocation",
                type: {
                    name: "String"
                }
            },
            numberOfGroups: {
                serializedName: "numberOfGroups",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            numberOfMachines: {
                serializedName: "numberOfMachines",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            numberOfAssessments: {
                serializedName: "numberOfAssessments",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            lastAssessmentTimestamp: {
                serializedName: "lastAssessmentTimestamp",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            publicNetworkAccess: {
                serializedName: "publicNetworkAccess",
                type: {
                    name: "String"
                }
            },
            privateEndpointConnections: {
                serializedName: "privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            customerStorageAccountArmId: {
                serializedName: "customerStorageAccountArmId",
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateEndpointConnectionProperties"
                }
            }
        }
    }
};
const PrivateEndpointConnectionProperties = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            privateEndpoint: {
                serializedName: "privateEndpoint",
                type: {
                    name: "Composite",
                    className: "ResourceId"
                }
            },
            privateLinkServiceConnectionState: {
                serializedName: "privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }
        }
    }
};
const ResourceId = {
    type: {
        name: "Composite",
        className: "ResourceId",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const AssessmentOptions = {
    type: {
        name: "Composite",
        className: "AssessmentOptions",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AssessmentOptionsProperties"
                }
            }
        }
    }
};
const AssessmentOptionsProperties = {
    type: {
        name: "Composite",
        className: "AssessmentOptionsProperties",
        modelProperties: {
            vmFamilies: {
                serializedName: "vmFamilies",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VmFamily"
                        }
                    }
                }
            },
            reservedInstanceVmFamilies: {
                serializedName: "reservedInstanceVmFamilies",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            reservedInstanceSupportedLocations: {
                serializedName: "reservedInstanceSupportedLocations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            reservedInstanceSupportedCurrencies: {
                serializedName: "reservedInstanceSupportedCurrencies",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            reservedInstanceSupportedOffers: {
                serializedName: "reservedInstanceSupportedOffers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const VmFamily = {
    type: {
        name: "Composite",
        className: "VmFamily",
        modelProperties: {
            familyName: {
                serializedName: "familyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            targetLocations: {
                serializedName: "targetLocations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            category: {
                serializedName: "category",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AssessmentOptionsResultList = {
    type: {
        name: "Composite",
        className: "AssessmentOptionsResultList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssessmentOptions"
                        }
                    }
                }
            }
        }
    }
};
const MachineResultList = {
    type: {
        name: "Composite",
        className: "MachineResultList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Machine"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Machine = {
    type: {
        name: "Composite",
        className: "Machine",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MachineProperties"
                }
            }
        }
    }
};
const MachineProperties = {
    type: {
        name: "Composite",
        className: "MachineProperties",
        modelProperties: {
            bootType: {
                serializedName: "bootType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            datacenterManagementServerArmId: {
                serializedName: "datacenterManagementServerArmId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            discoveryMachineArmId: {
                serializedName: "discoveryMachineArmId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            datacenterManagementServerName: {
                serializedName: "datacenterManagementServerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            megabytesOfMemory: {
                serializedName: "megabytesOfMemory",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            numberOfCores: {
                serializedName: "numberOfCores",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            operatingSystemType: {
                serializedName: "operatingSystemType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operatingSystemName: {
                serializedName: "operatingSystemName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operatingSystemVersion: {
                serializedName: "operatingSystemVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            groups: {
                serializedName: "groups",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            createdTimestamp: {
                serializedName: "createdTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            updatedTimestamp: {
                serializedName: "updatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            disks: {
                serializedName: "disks",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "Disk" } }
                }
            },
            networkAdapters: {
                serializedName: "networkAdapters",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "NetworkAdapter" } }
                }
            }
        }
    }
};
const Disk = {
    type: {
        name: "Composite",
        className: "Disk",
        modelProperties: {
            gigabytesAllocated: {
                serializedName: "gigabytesAllocated",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NetworkAdapter = {
    type: {
        name: "Composite",
        className: "NetworkAdapter",
        modelProperties: {
            macAddress: {
                serializedName: "macAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            ipAddresses: {
                serializedName: "ipAddresses",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GroupResultList = {
    type: {
        name: "Composite",
        className: "GroupResultList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Group"
                        }
                    }
                }
            }
        }
    }
};
const Group = {
    type: {
        name: "Composite",
        className: "Group",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "GroupProperties"
                }
            }
        }
    }
};
const GroupProperties = {
    type: {
        name: "Composite",
        className: "GroupProperties",
        modelProperties: {
            groupStatus: {
                serializedName: "groupStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            machineCount: {
                serializedName: "machineCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            assessments: {
                serializedName: "assessments",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            areAssessmentsRunning: {
                serializedName: "areAssessmentsRunning",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            createdTimestamp: {
                serializedName: "createdTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            updatedTimestamp: {
                serializedName: "updatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            groupType: {
                serializedName: "groupType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UpdateGroupBody = {
    type: {
        name: "Composite",
        className: "UpdateGroupBody",
        modelProperties: {
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "GroupBodyProperties"
                }
            }
        }
    }
};
const GroupBodyProperties = {
    type: {
        name: "Composite",
        className: "GroupBodyProperties",
        modelProperties: {
            operationType: {
                serializedName: "operationType",
                type: {
                    name: "String"
                }
            },
            machines: {
                serializedName: "machines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AssessmentResultList = {
    type: {
        name: "Composite",
        className: "AssessmentResultList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Assessment"
                        }
                    }
                }
            }
        }
    }
};
const Assessment = {
    type: {
        name: "Composite",
        className: "Assessment",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AssessmentProperties"
                }
            }
        }
    }
};
const AssessmentProperties = {
    type: {
        name: "Composite",
        className: "AssessmentProperties",
        modelProperties: {
            azureLocation: {
                serializedName: "azureLocation",
                required: true,
                type: {
                    name: "String"
                }
            },
            azureOfferCode: {
                serializedName: "azureOfferCode",
                required: true,
                type: {
                    name: "String"
                }
            },
            eaSubscriptionId: {
                serializedName: "eaSubscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            azurePricingTier: {
                serializedName: "azurePricingTier",
                required: true,
                type: {
                    name: "String"
                }
            },
            azureStorageRedundancy: {
                serializedName: "azureStorageRedundancy",
                required: true,
                type: {
                    name: "String"
                }
            },
            scalingFactor: {
                serializedName: "scalingFactor",
                required: true,
                type: {
                    name: "Number"
                }
            },
            percentile: {
                serializedName: "percentile",
                required: true,
                type: {
                    name: "String"
                }
            },
            timeRange: {
                serializedName: "timeRange",
                required: true,
                type: {
                    name: "String"
                }
            },
            perfDataStartTime: {
                serializedName: "perfDataStartTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            perfDataEndTime: {
                serializedName: "perfDataEndTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            stage: {
                serializedName: "stage",
                required: true,
                type: {
                    name: "String"
                }
            },
            currency: {
                serializedName: "currency",
                required: true,
                type: {
                    name: "String"
                }
            },
            azureHybridUseBenefit: {
                serializedName: "azureHybridUseBenefit",
                required: true,
                type: {
                    name: "String"
                }
            },
            discountPercentage: {
                serializedName: "discountPercentage",
                required: true,
                type: {
                    name: "Number"
                }
            },
            confidenceRatingInPercentage: {
                serializedName: "confidenceRatingInPercentage",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            sizingCriterion: {
                serializedName: "sizingCriterion",
                required: true,
                type: {
                    name: "String"
                }
            },
            reservedInstance: {
                serializedName: "reservedInstance",
                required: true,
                type: {
                    name: "String"
                }
            },
            azureVmFamilies: {
                serializedName: "azureVmFamilies",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            azureDiskType: {
                serializedName: "azureDiskType",
                required: true,
                type: {
                    name: "String"
                }
            },
            vmUptime: {
                serializedName: "vmUptime",
                type: {
                    name: "Composite",
                    className: "VmUptime"
                }
            },
            pricesTimestamp: {
                serializedName: "pricesTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            createdTimestamp: {
                serializedName: "createdTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            updatedTimestamp: {
                serializedName: "updatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            monthlyComputeCost: {
                serializedName: "monthlyComputeCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            monthlyBandwidthCost: {
                serializedName: "monthlyBandwidthCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            monthlyStorageCost: {
                serializedName: "monthlyStorageCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            monthlyPremiumStorageCost: {
                serializedName: "monthlyPremiumStorageCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            monthlyStandardSSDStorageCost: {
                serializedName: "monthlyStandardSSDStorageCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            numberOfMachines: {
                serializedName: "numberOfMachines",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const VmUptime = {
    type: {
        name: "Composite",
        className: "VmUptime",
        modelProperties: {
            daysPerMonth: {
                serializedName: "daysPerMonth",
                type: {
                    name: "Number"
                }
            },
            hoursPerDay: {
                serializedName: "hoursPerDay",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const DownloadUrl = {
    type: {
        name: "Composite",
        className: "DownloadUrl",
        modelProperties: {
            assessmentReportUrl: {
                serializedName: "assessmentReportUrl",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            expirationTime: {
                serializedName: "expirationTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const AssessedMachineResultList = {
    type: {
        name: "Composite",
        className: "AssessedMachineResultList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssessedMachine"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessedMachine = {
    type: {
        name: "Composite",
        className: "AssessedMachine",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AssessedMachineProperties"
                }
            }
        }
    }
};
const AssessedMachineProperties = {
    type: {
        name: "Composite",
        className: "AssessedMachineProperties",
        modelProperties: {
            bootType: {
                serializedName: "bootType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            datacenterMachineArmId: {
                serializedName: "datacenterMachineArmId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            datacenterManagementServerArmId: {
                serializedName: "datacenterManagementServerArmId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            datacenterManagementServerName: {
                serializedName: "datacenterManagementServerName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            megabytesOfMemory: {
                serializedName: "megabytesOfMemory",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            numberOfCores: {
                serializedName: "numberOfCores",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            operatingSystemType: {
                serializedName: "operatingSystemType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operatingSystemName: {
                serializedName: "operatingSystemName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operatingSystemVersion: {
                serializedName: "operatingSystemVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            monthlyBandwidthCost: {
                serializedName: "monthlyBandwidthCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            monthlyStorageCost: {
                serializedName: "monthlyStorageCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            monthlyPremiumStorageCost: {
                serializedName: "monthlyPremiumStorageCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            monthlyStandardSSDStorageCost: {
                serializedName: "monthlyStandardSSDStorageCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            confidenceRatingInPercentage: {
                serializedName: "confidenceRatingInPercentage",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            disks: {
                serializedName: "disks",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "AssessedDisk" } }
                }
            },
            networkAdapters: {
                serializedName: "networkAdapters",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "AssessedNetworkAdapter" }
                    }
                }
            },
            recommendedSize: {
                serializedName: "recommendedSize",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            numberOfCoresForRecommendedSize: {
                serializedName: "numberOfCoresForRecommendedSize",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            megabytesOfMemoryForRecommendedSize: {
                serializedName: "megabytesOfMemoryForRecommendedSize",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            monthlyComputeCostForRecommendedSize: {
                serializedName: "monthlyComputeCostForRecommendedSize",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            percentageCoresUtilization: {
                serializedName: "percentageCoresUtilization",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            percentageMemoryUtilization: {
                serializedName: "percentageMemoryUtilization",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            suitability: {
                serializedName: "suitability",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            suitabilityExplanation: {
                serializedName: "suitabilityExplanation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            suitabilityDetail: {
                serializedName: "suitabilityDetail",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdTimestamp: {
                serializedName: "createdTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            updatedTimestamp: {
                serializedName: "updatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const AssessedDisk = {
    type: {
        name: "Composite",
        className: "AssessedDisk",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            gigabytesProvisioned: {
                serializedName: "gigabytesProvisioned",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            megabytesPerSecondOfRead: {
                serializedName: "megabytesPerSecondOfRead",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            megabytesPerSecondOfWrite: {
                serializedName: "megabytesPerSecondOfWrite",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            numberOfReadOperationsPerSecond: {
                serializedName: "numberOfReadOperationsPerSecond",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            numberOfWriteOperationsPerSecond: {
                serializedName: "numberOfWriteOperationsPerSecond",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            monthlyStorageCost: {
                serializedName: "monthlyStorageCost",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            recommendedDiskType: {
                serializedName: "recommendedDiskType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            recommendedDiskSize: {
                serializedName: "recommendedDiskSize",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            gigabytesForRecommendedDiskSize: {
                serializedName: "gigabytesForRecommendedDiskSize",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            suitability: {
                serializedName: "suitability",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            suitabilityExplanation: {
                serializedName: "suitabilityExplanation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            suitabilityDetail: {
                serializedName: "suitabilityDetail",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessedNetworkAdapter = {
    type: {
        name: "Composite",
        className: "AssessedNetworkAdapter",
        modelProperties: {
            macAddress: {
                serializedName: "macAddress",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            ipAddresses: {
                serializedName: "ipAddresses",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            displayName: {
                serializedName: "displayName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            monthlyBandwidthCosts: {
                serializedName: "monthlyBandwidthCosts",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            megabytesPerSecondReceived: {
                serializedName: "megabytesPerSecondReceived",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            megabytesPerSecondTransmitted: {
                serializedName: "megabytesPerSecondTransmitted",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            netGigabytesTransmittedPerMonth: {
                serializedName: "netGigabytesTransmittedPerMonth",
                type: {
                    name: "Number"
                }
            },
            suitability: {
                serializedName: "suitability",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            suitabilityExplanation: {
                serializedName: "suitabilityExplanation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            suitabilityDetail: {
                serializedName: "suitabilityDetail",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HyperVCollectorList = {
    type: {
        name: "Composite",
        className: "HyperVCollectorList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HyperVCollector"
                        }
                    }
                }
            }
        }
    }
};
const HyperVCollector = {
    type: {
        name: "Composite",
        className: "HyperVCollector",
        modelProperties: {
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CollectorProperties"
                }
            }
        }
    }
};
const CollectorProperties = {
    type: {
        name: "Composite",
        className: "CollectorProperties",
        modelProperties: {
            discoverySiteId: {
                serializedName: "discoverySiteId",
                type: {
                    name: "String"
                }
            },
            createdTimestamp: {
                serializedName: "createdTimestamp",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            updatedTimestamp: {
                serializedName: "updatedTimestamp",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            agentProperties: {
                serializedName: "agentProperties",
                type: {
                    name: "Composite",
                    className: "CollectorAgentProperties"
                }
            }
        }
    }
};
const CollectorAgentProperties = {
    type: {
        name: "Composite",
        className: "CollectorAgentProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastHeartbeatUtc: {
                serializedName: "lastHeartbeatUtc",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            },
            spnDetails: {
                serializedName: "spnDetails",
                type: {
                    name: "Composite",
                    className: "CollectorBodyAgentSpnProperties"
                }
            }
        }
    }
};
const CollectorBodyAgentSpnProperties = {
    type: {
        name: "Composite",
        className: "CollectorBodyAgentSpnProperties",
        modelProperties: {
            authority: {
                serializedName: "authority",
                type: {
                    name: "String"
                }
            },
            applicationId: {
                serializedName: "applicationId",
                type: {
                    name: "String"
                }
            },
            audience: {
                serializedName: "audience",
                type: {
                    name: "String"
                }
            },
            objectId: {
                serializedName: "objectId",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerCollectorList = {
    type: {
        name: "Composite",
        className: "ServerCollectorList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServerCollector"
                        }
                    }
                }
            }
        }
    }
};
const ServerCollector = {
    type: {
        name: "Composite",
        className: "ServerCollector",
        modelProperties: {
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CollectorProperties"
                }
            }
        }
    }
};
const VMwareCollectorList = {
    type: {
        name: "Composite",
        className: "VMwareCollectorList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMwareCollector"
                        }
                    }
                }
            }
        }
    }
};
const VMwareCollector = {
    type: {
        name: "Composite",
        className: "VMwareCollector",
        modelProperties: {
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CollectorProperties"
                }
            }
        }
    }
};
const ImportCollectorList = {
    type: {
        name: "Composite",
        className: "ImportCollectorList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImportCollector"
                        }
                    }
                }
            }
        }
    }
};
const ImportCollector = {
    type: {
        name: "Composite",
        className: "ImportCollector",
        modelProperties: {
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ImportCollectorProperties"
                }
            }
        }
    }
};
const ImportCollectorProperties = {
    type: {
        name: "Composite",
        className: "ImportCollectorProperties",
        modelProperties: {
            discoverySiteId: {
                serializedName: "discoverySiteId",
                type: {
                    name: "String"
                }
            },
            createdTimestamp: {
                serializedName: "createdTimestamp",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            updatedTimestamp: {
                serializedName: "updatedTimestamp",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionCollection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PrivateLinkResourceProperties"
                }
            }
        }
    }
};
const PrivateLinkResourceProperties = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceProperties",
        modelProperties: {
            requiredMembers: {
                serializedName: "requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "requiredZoneNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            groupId: {
                serializedName: "groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourceCollection = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationResultList = {
    type: {
        name: "Composite",
        className: "OperationResultList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectsListBySubscriptionHeaders = {
    type: {
        name: "Composite",
        className: "ProjectsListBySubscriptionHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectsListHeaders = {
    type: {
        name: "Composite",
        className: "ProjectsListHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectsGetHeaders = {
    type: {
        name: "Composite",
        className: "ProjectsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectsCreateHeaders = {
    type: {
        name: "Composite",
        className: "ProjectsCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectsUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ProjectsUpdateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ProjectsDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectsAssessmentOptionsHeaders = {
    type: {
        name: "Composite",
        className: "ProjectsAssessmentOptionsHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectsAssessmentOptionsListHeaders = {
    type: {
        name: "Composite",
        className: "ProjectsAssessmentOptionsListHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectsListBySubscriptionNextHeaders = {
    type: {
        name: "Composite",
        className: "ProjectsListBySubscriptionNextHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProjectsListNextHeaders = {
    type: {
        name: "Composite",
        className: "ProjectsListNextHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MachinesListByProjectHeaders = {
    type: {
        name: "Composite",
        className: "MachinesListByProjectHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MachinesGetHeaders = {
    type: {
        name: "Composite",
        className: "MachinesGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MachinesListByProjectNextHeaders = {
    type: {
        name: "Composite",
        className: "MachinesListByProjectNextHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GroupsListByProjectHeaders = {
    type: {
        name: "Composite",
        className: "GroupsListByProjectHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GroupsGetHeaders = {
    type: {
        name: "Composite",
        className: "GroupsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GroupsCreateHeaders = {
    type: {
        name: "Composite",
        className: "GroupsCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GroupsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "GroupsDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GroupsUpdateMachinesHeaders = {
    type: {
        name: "Composite",
        className: "GroupsUpdateMachinesHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessmentsListByGroupHeaders = {
    type: {
        name: "Composite",
        className: "AssessmentsListByGroupHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessmentsListByProjectHeaders = {
    type: {
        name: "Composite",
        className: "AssessmentsListByProjectHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessmentsGetHeaders = {
    type: {
        name: "Composite",
        className: "AssessmentsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessmentsCreateHeaders = {
    type: {
        name: "Composite",
        className: "AssessmentsCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessmentsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "AssessmentsDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessmentsGetReportDownloadUrlHeaders = {
    type: {
        name: "Composite",
        className: "AssessmentsGetReportDownloadUrlHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessedMachinesListByAssessmentHeaders = {
    type: {
        name: "Composite",
        className: "AssessedMachinesListByAssessmentHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessedMachinesGetHeaders = {
    type: {
        name: "Composite",
        className: "AssessedMachinesGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AssessedMachinesListByAssessmentNextHeaders = {
    type: {
        name: "Composite",
        className: "AssessedMachinesListByAssessmentNextHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HyperVCollectorsListByProjectHeaders = {
    type: {
        name: "Composite",
        className: "HyperVCollectorsListByProjectHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HyperVCollectorsGetHeaders = {
    type: {
        name: "Composite",
        className: "HyperVCollectorsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HyperVCollectorsCreateHeaders = {
    type: {
        name: "Composite",
        className: "HyperVCollectorsCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HyperVCollectorsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "HyperVCollectorsDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerCollectorsListByProjectHeaders = {
    type: {
        name: "Composite",
        className: "ServerCollectorsListByProjectHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerCollectorsGetHeaders = {
    type: {
        name: "Composite",
        className: "ServerCollectorsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerCollectorsCreateHeaders = {
    type: {
        name: "Composite",
        className: "ServerCollectorsCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerCollectorsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ServerCollectorsDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VMwareCollectorsListByProjectHeaders = {
    type: {
        name: "Composite",
        className: "VMwareCollectorsListByProjectHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VMwareCollectorsGetHeaders = {
    type: {
        name: "Composite",
        className: "VMwareCollectorsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VMwareCollectorsCreateHeaders = {
    type: {
        name: "Composite",
        className: "VMwareCollectorsCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VMwareCollectorsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "VMwareCollectorsDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImportCollectorsListByProjectHeaders = {
    type: {
        name: "Composite",
        className: "ImportCollectorsListByProjectHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImportCollectorsGetHeaders = {
    type: {
        name: "Composite",
        className: "ImportCollectorsGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImportCollectorsCreateHeaders = {
    type: {
        name: "Composite",
        className: "ImportCollectorsCreateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImportCollectorsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ImportCollectorsDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionListByProjectHeaders = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListByProjectHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionGetHeaders = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionUpdateHeaders = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionUpdateHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionDeleteHeaders = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionDeleteHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourceGetHeaders = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceGetHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourceListByProjectHeaders = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceListByProjectHeaders",
        modelProperties: {
            xMsRequestId: {
                serializedName: "x-ms-request-id",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ProjectResultList: ProjectResultList,
    Project: Project,
    ProjectProperties: ProjectProperties,
    PrivateEndpointConnection: PrivateEndpointConnection,
    PrivateEndpointConnectionProperties: PrivateEndpointConnectionProperties,
    ResourceId: ResourceId,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    AssessmentOptions: AssessmentOptions,
    AssessmentOptionsProperties: AssessmentOptionsProperties,
    VmFamily: VmFamily,
    AssessmentOptionsResultList: AssessmentOptionsResultList,
    MachineResultList: MachineResultList,
    Machine: Machine,
    MachineProperties: MachineProperties,
    Disk: Disk,
    NetworkAdapter: NetworkAdapter,
    GroupResultList: GroupResultList,
    Group: Group,
    GroupProperties: GroupProperties,
    UpdateGroupBody: UpdateGroupBody,
    GroupBodyProperties: GroupBodyProperties,
    AssessmentResultList: AssessmentResultList,
    Assessment: Assessment,
    AssessmentProperties: AssessmentProperties,
    VmUptime: VmUptime,
    DownloadUrl: DownloadUrl,
    AssessedMachineResultList: AssessedMachineResultList,
    AssessedMachine: AssessedMachine,
    AssessedMachineProperties: AssessedMachineProperties,
    AssessedDisk: AssessedDisk,
    AssessedNetworkAdapter: AssessedNetworkAdapter,
    HyperVCollectorList: HyperVCollectorList,
    HyperVCollector: HyperVCollector,
    CollectorProperties: CollectorProperties,
    CollectorAgentProperties: CollectorAgentProperties,
    CollectorBodyAgentSpnProperties: CollectorBodyAgentSpnProperties,
    ServerCollectorList: ServerCollectorList,
    ServerCollector: ServerCollector,
    VMwareCollectorList: VMwareCollectorList,
    VMwareCollector: VMwareCollector,
    ImportCollectorList: ImportCollectorList,
    ImportCollector: ImportCollector,
    ImportCollectorProperties: ImportCollectorProperties,
    PrivateEndpointConnectionCollection: PrivateEndpointConnectionCollection,
    PrivateLinkResource: PrivateLinkResource,
    PrivateLinkResourceProperties: PrivateLinkResourceProperties,
    PrivateLinkResourceCollection: PrivateLinkResourceCollection,
    OperationResultList: OperationResultList,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ProjectsListBySubscriptionHeaders: ProjectsListBySubscriptionHeaders,
    ProjectsListHeaders: ProjectsListHeaders,
    ProjectsGetHeaders: ProjectsGetHeaders,
    ProjectsCreateHeaders: ProjectsCreateHeaders,
    ProjectsUpdateHeaders: ProjectsUpdateHeaders,
    ProjectsDeleteHeaders: ProjectsDeleteHeaders,
    ProjectsAssessmentOptionsHeaders: ProjectsAssessmentOptionsHeaders,
    ProjectsAssessmentOptionsListHeaders: ProjectsAssessmentOptionsListHeaders,
    ProjectsListBySubscriptionNextHeaders: ProjectsListBySubscriptionNextHeaders,
    ProjectsListNextHeaders: ProjectsListNextHeaders,
    MachinesListByProjectHeaders: MachinesListByProjectHeaders,
    MachinesGetHeaders: MachinesGetHeaders,
    MachinesListByProjectNextHeaders: MachinesListByProjectNextHeaders,
    GroupsListByProjectHeaders: GroupsListByProjectHeaders,
    GroupsGetHeaders: GroupsGetHeaders,
    GroupsCreateHeaders: GroupsCreateHeaders,
    GroupsDeleteHeaders: GroupsDeleteHeaders,
    GroupsUpdateMachinesHeaders: GroupsUpdateMachinesHeaders,
    AssessmentsListByGroupHeaders: AssessmentsListByGroupHeaders,
    AssessmentsListByProjectHeaders: AssessmentsListByProjectHeaders,
    AssessmentsGetHeaders: AssessmentsGetHeaders,
    AssessmentsCreateHeaders: AssessmentsCreateHeaders,
    AssessmentsDeleteHeaders: AssessmentsDeleteHeaders,
    AssessmentsGetReportDownloadUrlHeaders: AssessmentsGetReportDownloadUrlHeaders,
    AssessedMachinesListByAssessmentHeaders: AssessedMachinesListByAssessmentHeaders,
    AssessedMachinesGetHeaders: AssessedMachinesGetHeaders,
    AssessedMachinesListByAssessmentNextHeaders: AssessedMachinesListByAssessmentNextHeaders,
    HyperVCollectorsListByProjectHeaders: HyperVCollectorsListByProjectHeaders,
    HyperVCollectorsGetHeaders: HyperVCollectorsGetHeaders,
    HyperVCollectorsCreateHeaders: HyperVCollectorsCreateHeaders,
    HyperVCollectorsDeleteHeaders: HyperVCollectorsDeleteHeaders,
    ServerCollectorsListByProjectHeaders: ServerCollectorsListByProjectHeaders,
    ServerCollectorsGetHeaders: ServerCollectorsGetHeaders,
    ServerCollectorsCreateHeaders: ServerCollectorsCreateHeaders,
    ServerCollectorsDeleteHeaders: ServerCollectorsDeleteHeaders,
    VMwareCollectorsListByProjectHeaders: VMwareCollectorsListByProjectHeaders,
    VMwareCollectorsGetHeaders: VMwareCollectorsGetHeaders,
    VMwareCollectorsCreateHeaders: VMwareCollectorsCreateHeaders,
    VMwareCollectorsDeleteHeaders: VMwareCollectorsDeleteHeaders,
    ImportCollectorsListByProjectHeaders: ImportCollectorsListByProjectHeaders,
    ImportCollectorsGetHeaders: ImportCollectorsGetHeaders,
    ImportCollectorsCreateHeaders: ImportCollectorsCreateHeaders,
    ImportCollectorsDeleteHeaders: ImportCollectorsDeleteHeaders,
    PrivateEndpointConnectionListByProjectHeaders: PrivateEndpointConnectionListByProjectHeaders,
    PrivateEndpointConnectionGetHeaders: PrivateEndpointConnectionGetHeaders,
    PrivateEndpointConnectionUpdateHeaders: PrivateEndpointConnectionUpdateHeaders,
    PrivateEndpointConnectionDeleteHeaders: PrivateEndpointConnectionDeleteHeaders,
    PrivateLinkResourceGetHeaders: PrivateLinkResourceGetHeaders,
    PrivateLinkResourceListByProjectHeaders: PrivateLinkResourceListByProjectHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const projectName = {
    parameterPath: "projectName",
    mapper: {
        serializedName: "projectName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const project = {
    parameterPath: ["options", "project"],
    mapper: Project
};
const assessmentOptionsName = {
    parameterPath: "assessmentOptionsName",
    mapper: {
        serializedName: "assessmentOptionsName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const machineName = {
    parameterPath: "machineName",
    mapper: {
        serializedName: "machineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const groupName = {
    parameterPath: "groupName",
    mapper: {
        serializedName: "groupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const group = {
    parameterPath: ["options", "group"],
    mapper: Group
};
const groupUpdateProperties = {
    parameterPath: ["options", "groupUpdateProperties"],
    mapper: UpdateGroupBody
};
const assessmentName = {
    parameterPath: "assessmentName",
    mapper: {
        serializedName: "assessmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const assessment = {
    parameterPath: ["options", "assessment"],
    mapper: Assessment
};
const assessedMachineName = {
    parameterPath: "assessedMachineName",
    mapper: {
        serializedName: "assessedMachineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const hyperVCollectorName = {
    parameterPath: "hyperVCollectorName",
    mapper: {
        serializedName: "hyperVCollectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const collectorBody = {
    parameterPath: ["options", "collectorBody"],
    mapper: HyperVCollector
};
const serverCollectorName = {
    parameterPath: "serverCollectorName",
    mapper: {
        serializedName: "serverCollectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const collectorBody1 = {
    parameterPath: ["options", "collectorBody"],
    mapper: ServerCollector
};
const vmWareCollectorName = {
    parameterPath: "vmWareCollectorName",
    mapper: {
        serializedName: "vmWareCollectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const collectorBody2 = {
    parameterPath: ["options", "collectorBody"],
    mapper: VMwareCollector
};
const importCollectorName = {
    parameterPath: "importCollectorName",
    mapper: {
        serializedName: "importCollectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const collectorBody3 = {
    parameterPath: ["options", "collectorBody"],
    mapper: ImportCollector
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const privateEndpointConnectionBody = {
    parameterPath: ["options", "privateEndpointConnectionBody"],
    mapper: PrivateEndpointConnection
};
const privateLinkResourceName = {
    parameterPath: "privateLinkResourceName",
    mapper: {
        serializedName: "privateLinkResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Projects operations. */
class ProjectsImpl {
    /**
     * Initialize a new instance of the class Projects class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all the projects in the subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get all the projects in the resource group.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets list of all available options for the properties of an assessment on a project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listAssessmentOptionsList(resourceGroupName, projectName, options) {
        const iter = this.assessmentOptionsListPagingAll(resourceGroupName, projectName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.assessmentOptionsListPagingPage(resourceGroupName, projectName, options, settings);
            }
        };
    }
    assessmentOptionsListPagingPage(resourceGroupName, projectName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* assessmentOptionsListPagingPage_1() {
            let result;
            result = yield tslib.__await(this._assessmentOptionsList(resourceGroupName, projectName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    assessmentOptionsListPagingAll(resourceGroupName, projectName, options) {
        return tslib.__asyncGenerator(this, arguments, function* assessmentOptionsListPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.assessmentOptionsListPagingPage(resourceGroupName, projectName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Get all the projects in the subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Get all the projects in the resource group.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec$1);
    }
    /**
     * Get the project with the specified name.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, getOperationSpec$a);
    }
    /**
     * Create a project with specified name. If a project already exists, update it.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    create(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, createOperationSpec$6);
    }
    /**
     * Update a project with specified name. Supports partial updates, for example only tags can be
     * provided.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    update(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, updateOperationSpec$1);
    }
    /**
     * Delete the project. Deleting non-existent project is a no-operation.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    delete(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, deleteOperationSpec$7);
    }
    /**
     * Get all available options for the properties of an assessment on a project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param assessmentOptionsName Name of the assessment options. The only name accepted in default.
     * @param options The options parameters.
     */
    assessmentOptions(resourceGroupName, projectName, assessmentOptionsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, assessmentOptionsName, options }, assessmentOptionsOperationSpec);
    }
    /**
     * Gets list of all available options for the properties of an assessment on a project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    _assessmentOptionsList(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, assessmentOptionsListOperationSpec);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Migrate/assessmentProjects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectResultList,
            headersMapper: ProjectsListBySubscriptionHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$b
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectResultList,
            headersMapper: ProjectsListHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Project,
            headersMapper: ProjectsGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const createOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Project,
            headersMapper: ProjectsCreateHeaders
        },
        201: {
            bodyMapper: Project,
            headersMapper: ProjectsCreateHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: project,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Project,
            headersMapper: ProjectsUpdateHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: project,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: ProjectsDeleteHeaders
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const assessmentOptionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssessmentOptions,
            headersMapper: ProjectsAssessmentOptionsHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        assessmentOptionsName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const assessmentOptionsListOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssessmentOptionsResultList,
            headersMapper: ProjectsAssessmentOptionsListHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectResultList,
            headersMapper: ProjectsListBySubscriptionNextHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProjectResultList,
            headersMapper: ProjectsListNextHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Machines operations. */
class MachinesImpl {
    /**
     * Initialize a new instance of the class Machines class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get data of all the machines available in the project. Returns a json array of objects of type
     * 'machine' defined in Models section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listByProject(resourceGroupName, projectName, options) {
        const iter = this.listByProjectPagingAll(resourceGroupName, projectName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByProjectPagingPage(resourceGroupName, projectName, options, settings);
            }
        };
    }
    listByProjectPagingPage(resourceGroupName, projectName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByProject(resourceGroupName, projectName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByProjectNext(resourceGroupName, projectName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByProjectPagingAll(resourceGroupName, projectName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByProjectPagingPage(resourceGroupName, projectName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get data of all the machines available in the project. Returns a json array of objects of type
     * 'machine' defined in Models section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    _listByProject(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, listByProjectOperationSpec$8);
    }
    /**
     * Get the machine with the specified name. Returns a json object of type 'machine' defined in Models
     * section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param machineName Unique name of a machine in private datacenter.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, machineName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, machineName, options }, getOperationSpec$9);
    }
    /**
     * ListByProjectNext
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param nextLink The nextLink from the previous successful call to the ListByProject method.
     * @param options The options parameters.
     */
    _listByProjectNext(resourceGroupName, projectName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, nextLink, options }, listByProjectNextOperationSpec);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByProjectOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MachineResultList,
            headersMapper: MachinesListByProjectHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Machine,
            headersMapper: MachinesGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        machineName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByProjectNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MachineResultList,
            headersMapper: MachinesListByProjectNextHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Groups operations. */
class GroupsImpl {
    /**
     * Initialize a new instance of the class Groups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all groups created in the project. Returns a json array of objects of type 'group' as specified
     * in the Models section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listByProject(resourceGroupName, projectName, options) {
        const iter = this.listByProjectPagingAll(resourceGroupName, projectName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByProjectPagingPage(resourceGroupName, projectName, options, settings);
            }
        };
    }
    listByProjectPagingPage(resourceGroupName, projectName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByProject(resourceGroupName, projectName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByProjectPagingAll(resourceGroupName, projectName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByProjectPagingPage(resourceGroupName, projectName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get all groups created in the project. Returns a json array of objects of type 'group' as specified
     * in the Models section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    _listByProject(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, listByProjectOperationSpec$7);
    }
    /**
     * Get information related to a specific group in the project. Returns a json object of type 'group' as
     * specified in the models section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, groupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, groupName, options }, getOperationSpec$8);
    }
    /**
     * Create a new group by sending a json object of type 'group' as given in Models section as part of
     * the Request Body. The group name in a project is unique.
     *
     * This operation is Idempotent.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param options The options parameters.
     */
    create(resourceGroupName, projectName, groupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, groupName, options }, createOperationSpec$5);
    }
    /**
     * Delete the group from the project. The machines remain in the project. Deleting a non-existent group
     * results in a no-operation.
     *
     * A group is an aggregation mechanism for machines in a project. Therefore, deleting group does not
     * delete machines in it.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param options The options parameters.
     */
    delete(resourceGroupName, projectName, groupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, groupName, options }, deleteOperationSpec$6);
    }
    /**
     * Update machines in group by adding or removing machines.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param options The options parameters.
     */
    updateMachines(resourceGroupName, projectName, groupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, groupName, options }, updateMachinesOperationSpec);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByProjectOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: GroupResultList,
            headersMapper: GroupsListByProjectHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Group,
            headersMapper: GroupsGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const createOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Group,
            headersMapper: GroupsCreateHeaders
        },
        201: {
            bodyMapper: Group,
            headersMapper: GroupsCreateHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: group,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: GroupsDeleteHeaders
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const updateMachinesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/updateMachines",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Group,
            headersMapper: GroupsUpdateMachinesHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: groupUpdateProperties,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Assessments operations. */
class AssessmentsImpl {
    /**
     * Initialize a new instance of the class Assessments class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all assessments created for the specified group.
     *
     * Returns a json array of objects of type 'assessment' as specified in Models section.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param options The options parameters.
     */
    listByGroup(resourceGroupName, projectName, groupName, options) {
        const iter = this.listByGroupPagingAll(resourceGroupName, projectName, groupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByGroupPagingPage(resourceGroupName, projectName, groupName, options, settings);
            }
        };
    }
    listByGroupPagingPage(resourceGroupName, projectName, groupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByGroup(resourceGroupName, projectName, groupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByGroupPagingAll(resourceGroupName, projectName, groupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByGroupPagingPage(resourceGroupName, projectName, groupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get all assessments created in the project.
     *
     * Returns a json array of objects of type 'assessment' as specified in Models section.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listByProject(resourceGroupName, projectName, options) {
        const iter = this.listByProjectPagingAll(resourceGroupName, projectName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByProjectPagingPage(resourceGroupName, projectName, options, settings);
            }
        };
    }
    listByProjectPagingPage(resourceGroupName, projectName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByProject(resourceGroupName, projectName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByProjectPagingAll(resourceGroupName, projectName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByProjectPagingPage(resourceGroupName, projectName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get all assessments created for the specified group.
     *
     * Returns a json array of objects of type 'assessment' as specified in Models section.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param options The options parameters.
     */
    _listByGroup(resourceGroupName, projectName, groupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, groupName, options }, listByGroupOperationSpec);
    }
    /**
     * Get all assessments created in the project.
     *
     * Returns a json array of objects of type 'assessment' as specified in Models section.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    _listByProject(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, listByProjectOperationSpec$6);
    }
    /**
     * Get an existing assessment with the specified name. Returns a json object of type 'assessment' as
     * specified in Models section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param assessmentName Unique name of an assessment within a project.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, groupName, assessmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, groupName, assessmentName, options }, getOperationSpec$7);
    }
    /**
     * Create a new assessment with the given name and the specified settings. Since name of an assessment
     * in a project is a unique identifier, if an assessment with the name provided already exists, then
     * the existing assessment is updated.
     *
     * Any PUT operation, resulting in either create or update on an assessment, will cause the assessment
     * to go in a "InProgress" state. This will be indicated by the field 'computationState' on the
     * Assessment object. During this time no other PUT operation will be allowed on that assessment
     * object, nor will a Delete operation. Once the computation for the assessment is complete, the field
     * 'computationState' will be updated to 'Ready', and then other PUT or DELETE operations can happen on
     * the assessment.
     *
     * When assessment is under computation, any PUT will lead to a 400 - Bad Request error.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param assessmentName Unique name of an assessment within a project.
     * @param options The options parameters.
     */
    create(resourceGroupName, projectName, groupName, assessmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, groupName, assessmentName, options }, createOperationSpec$4);
    }
    /**
     * Delete an assessment from the project. The machines remain in the assessment. Deleting a
     * non-existent assessment results in a no-operation.
     *
     * When an assessment is under computation, as indicated by the 'computationState' field, it cannot be
     * deleted. Any such attempt will return a 400 - Bad Request.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param assessmentName Unique name of an assessment within a project.
     * @param options The options parameters.
     */
    delete(resourceGroupName, projectName, groupName, assessmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, groupName, assessmentName, options }, deleteOperationSpec$5);
    }
    /**
     * Get the URL for downloading the assessment in a report format.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param assessmentName Unique name of an assessment within a project.
     * @param options The options parameters.
     */
    getReportDownloadUrl(resourceGroupName, projectName, groupName, assessmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, groupName, assessmentName, options }, getReportDownloadUrlOperationSpec);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssessmentResultList,
            headersMapper: AssessmentsListByGroupHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const listByProjectOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssessmentResultList,
            headersMapper: AssessmentsListByProjectHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Assessment,
            headersMapper: AssessmentsGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName,
        assessmentName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const createOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Assessment,
            headersMapper: AssessmentsCreateHeaders
        },
        201: {
            bodyMapper: Assessment,
            headersMapper: AssessmentsCreateHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: assessment,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName,
        assessmentName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: AssessmentsDeleteHeaders
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName,
        assessmentName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const getReportDownloadUrlOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/downloadUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DownloadUrl,
            headersMapper: AssessmentsGetReportDownloadUrlHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName,
        assessmentName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AssessedMachines operations. */
class AssessedMachinesImpl {
    /**
     * Initialize a new instance of the class AssessedMachines class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get list of machines that assessed as part of the specified assessment. Returns a json array of
     * objects of type 'assessedMachine' as specified in the Models section.
     *
     * Whenever an assessment is created or updated, it goes under computation. During this phase, the
     * 'status' field of Assessment object reports 'Computing'.
     * During the period when the assessment is under computation, the list of assessed machines is empty
     * and no assessed machines are returned by this call.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param assessmentName Unique name of an assessment within a project.
     * @param options The options parameters.
     */
    listByAssessment(resourceGroupName, projectName, groupName, assessmentName, options) {
        const iter = this.listByAssessmentPagingAll(resourceGroupName, projectName, groupName, assessmentName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByAssessmentPagingPage(resourceGroupName, projectName, groupName, assessmentName, options, settings);
            }
        };
    }
    listByAssessmentPagingPage(resourceGroupName, projectName, groupName, assessmentName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByAssessmentPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByAssessment(resourceGroupName, projectName, groupName, assessmentName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByAssessmentNext(resourceGroupName, projectName, groupName, assessmentName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByAssessmentPagingAll(resourceGroupName, projectName, groupName, assessmentName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByAssessmentPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByAssessmentPagingPage(resourceGroupName, projectName, groupName, assessmentName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get list of machines that assessed as part of the specified assessment. Returns a json array of
     * objects of type 'assessedMachine' as specified in the Models section.
     *
     * Whenever an assessment is created or updated, it goes under computation. During this phase, the
     * 'status' field of Assessment object reports 'Computing'.
     * During the period when the assessment is under computation, the list of assessed machines is empty
     * and no assessed machines are returned by this call.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param assessmentName Unique name of an assessment within a project.
     * @param options The options parameters.
     */
    _listByAssessment(resourceGroupName, projectName, groupName, assessmentName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, groupName, assessmentName, options }, listByAssessmentOperationSpec);
    }
    /**
     * Get an assessed machine with its size & cost estimate that was evaluated in the specified
     * assessment.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param assessmentName Unique name of an assessment within a project.
     * @param assessedMachineName Unique name of an assessed machine evaluated as part of an assessment.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, groupName, assessmentName, assessedMachineName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            projectName,
            groupName,
            assessmentName,
            assessedMachineName,
            options
        }, getOperationSpec$6);
    }
    /**
     * ListByAssessmentNext
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param groupName Unique name of a group within a project.
     * @param assessmentName Unique name of an assessment within a project.
     * @param nextLink The nextLink from the previous successful call to the ListByAssessment method.
     * @param options The options parameters.
     */
    _listByAssessmentNext(resourceGroupName, projectName, groupName, assessmentName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            projectName,
            groupName,
            assessmentName,
            nextLink,
            options
        }, listByAssessmentNextOperationSpec);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByAssessmentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssessedMachineResultList,
            headersMapper: AssessedMachinesListByAssessmentHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName,
        assessmentName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssessedMachine,
            headersMapper: AssessedMachinesGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        groupName,
        assessmentName,
        assessedMachineName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listByAssessmentNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AssessedMachineResultList,
            headersMapper: AssessedMachinesListByAssessmentNextHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        nextLink,
        groupName,
        assessmentName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing HyperVCollectors operations. */
class HyperVCollectorsImpl {
    /**
     * Initialize a new instance of the class HyperVCollectors class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of Hyper-V collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listByProject(resourceGroupName, projectName, options) {
        const iter = this.listByProjectPagingAll(resourceGroupName, projectName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByProjectPagingPage(resourceGroupName, projectName, options, settings);
            }
        };
    }
    listByProjectPagingPage(resourceGroupName, projectName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByProject(resourceGroupName, projectName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByProjectPagingAll(resourceGroupName, projectName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByProjectPagingPage(resourceGroupName, projectName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of Hyper-V collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    _listByProject(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, listByProjectOperationSpec$5);
    }
    /**
     * Get a Hyper-V collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, hyperVCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, hyperVCollectorName, options }, getOperationSpec$5);
    }
    /**
     * Create or Update Hyper-V collector
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project.
     * @param options The options parameters.
     */
    create(resourceGroupName, projectName, hyperVCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, hyperVCollectorName, options }, createOperationSpec$3);
    }
    /**
     * Delete a Hyper-V collector from the project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project.
     * @param options The options parameters.
     */
    delete(resourceGroupName, projectName, hyperVCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, hyperVCollectorName, options }, deleteOperationSpec$4);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByProjectOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HyperVCollectorList,
            headersMapper: HyperVCollectorsListByProjectHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HyperVCollector,
            headersMapper: HyperVCollectorsGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        hyperVCollectorName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: HyperVCollector,
            headersMapper: HyperVCollectorsCreateHeaders
        },
        201: {
            bodyMapper: HyperVCollector,
            headersMapper: HyperVCollectorsCreateHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: collectorBody,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        hyperVCollectorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: HyperVCollectorsDeleteHeaders
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        hyperVCollectorName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ServerCollectors operations. */
class ServerCollectorsImpl {
    /**
     * Initialize a new instance of the class ServerCollectors class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of Server collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listByProject(resourceGroupName, projectName, options) {
        const iter = this.listByProjectPagingAll(resourceGroupName, projectName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByProjectPagingPage(resourceGroupName, projectName, options, settings);
            }
        };
    }
    listByProjectPagingPage(resourceGroupName, projectName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByProject(resourceGroupName, projectName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByProjectPagingAll(resourceGroupName, projectName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByProjectPagingPage(resourceGroupName, projectName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of Server collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    _listByProject(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, listByProjectOperationSpec$4);
    }
    /**
     * Get a Server collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param serverCollectorName Unique name of a Server collector within a project.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, serverCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, serverCollectorName, options }, getOperationSpec$4);
    }
    /**
     * Create or Update Server collector
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param serverCollectorName Unique name of a Server collector within a project.
     * @param options The options parameters.
     */
    create(resourceGroupName, projectName, serverCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, serverCollectorName, options }, createOperationSpec$2);
    }
    /**
     * Delete a Server collector from the project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param serverCollectorName Unique name of a Server collector within a project.
     * @param options The options parameters.
     */
    delete(resourceGroupName, projectName, serverCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, serverCollectorName, options }, deleteOperationSpec$3);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByProjectOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerCollectorList,
            headersMapper: ServerCollectorsListByProjectHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerCollector,
            headersMapper: ServerCollectorsGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        serverCollectorName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ServerCollector,
            headersMapper: ServerCollectorsCreateHeaders
        },
        201: {
            bodyMapper: ServerCollector,
            headersMapper: ServerCollectorsCreateHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: collectorBody1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        serverCollectorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/servercollectors/{serverCollectorName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: ServerCollectorsDeleteHeaders
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        serverCollectorName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing VMwareCollectors operations. */
class VMwareCollectorsImpl {
    /**
     * Initialize a new instance of the class VMwareCollectors class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of VMware collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listByProject(resourceGroupName, projectName, options) {
        const iter = this.listByProjectPagingAll(resourceGroupName, projectName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByProjectPagingPage(resourceGroupName, projectName, options, settings);
            }
        };
    }
    listByProjectPagingPage(resourceGroupName, projectName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByProject(resourceGroupName, projectName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByProjectPagingAll(resourceGroupName, projectName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByProjectPagingPage(resourceGroupName, projectName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of VMware collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    _listByProject(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, listByProjectOperationSpec$3);
    }
    /**
     * Get a VMware collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param vmWareCollectorName Unique name of a VMware collector within a project.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, vmWareCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, vmWareCollectorName, options }, getOperationSpec$3);
    }
    /**
     * Create or Update VMware collector
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param vmWareCollectorName Unique name of a VMware collector within a project.
     * @param options The options parameters.
     */
    create(resourceGroupName, projectName, vmWareCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, vmWareCollectorName, options }, createOperationSpec$1);
    }
    /**
     * Delete a VMware collector from the project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param vmWareCollectorName Unique name of a VMware collector within a project.
     * @param options The options parameters.
     */
    delete(resourceGroupName, projectName, vmWareCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, vmWareCollectorName, options }, deleteOperationSpec$2);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByProjectOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VMwareCollectorList,
            headersMapper: VMwareCollectorsListByProjectHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VMwareCollector,
            headersMapper: VMwareCollectorsGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        vmWareCollectorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: VMwareCollector,
            headersMapper: VMwareCollectorsCreateHeaders
        },
        201: {
            bodyMapper: VMwareCollector,
            headersMapper: VMwareCollectorsCreateHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: collectorBody2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        vmWareCollectorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: VMwareCollectorsDeleteHeaders
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        vmWareCollectorName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ImportCollectors operations. */
class ImportCollectorsImpl {
    /**
     * Initialize a new instance of the class ImportCollectors class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of Import collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listByProject(resourceGroupName, projectName, options) {
        const iter = this.listByProjectPagingAll(resourceGroupName, projectName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByProjectPagingPage(resourceGroupName, projectName, options, settings);
            }
        };
    }
    listByProjectPagingPage(resourceGroupName, projectName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByProject(resourceGroupName, projectName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByProjectPagingAll(resourceGroupName, projectName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByProjectPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByProjectPagingPage(resourceGroupName, projectName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of Import collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    _listByProject(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, listByProjectOperationSpec$2);
    }
    /**
     * Get a Import collector.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param importCollectorName Unique name of a Import collector within a project.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, importCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, importCollectorName, options }, getOperationSpec$2);
    }
    /**
     * Create or Update Import collector
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param importCollectorName Unique name of a Import collector within a project.
     * @param options The options parameters.
     */
    create(resourceGroupName, projectName, importCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, importCollectorName, options }, createOperationSpec);
    }
    /**
     * Delete a Import collector from the project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param importCollectorName Unique name of a Import collector within a project.
     * @param options The options parameters.
     */
    delete(resourceGroupName, projectName, importCollectorName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, importCollectorName, options }, deleteOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByProjectOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ImportCollectorList,
            headersMapper: ImportCollectorsListByProjectHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ImportCollector,
            headersMapper: ImportCollectorsGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        importCollectorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ImportCollector,
            headersMapper: ImportCollectorsCreateHeaders
        },
        201: {
            bodyMapper: ImportCollector,
            headersMapper: ImportCollectorsCreateHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: collectorBody3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        importCollectorName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/importcollectors/{importCollectorName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: ImportCollectorsDeleteHeaders
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        importCollectorName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateEndpointConnectionOperations operations. */
class PrivateEndpointConnectionOperationsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnectionOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all private endpoint connections in the project. Returns a json array of objects of type
     * 'privateEndpointConnections' as specified in the Models section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listByProject(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, listByProjectOperationSpec$1);
    }
    /**
     * Get information related to a specific private endpoint connection in the project. Returns a json
     * object of type 'privateEndpointConnections' as specified in the models section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param privateEndpointConnectionName Unique name of a private endpoint connection within a project.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            projectName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec$1);
    }
    /**
     * Update a specific private endpoint connection in the project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param privateEndpointConnectionName Unique name of a private endpoint connection within a project.
     * @param options The options parameters.
     */
    update(resourceGroupName, projectName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            projectName,
            privateEndpointConnectionName,
            options
        }, updateOperationSpec);
    }
    /**
     * Delete the private endpoint connection from the project. T.
     *
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param privateEndpointConnectionName Unique name of a private endpoint connection within a project.
     * @param options The options parameters.
     */
    delete(resourceGroupName, projectName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            projectName,
            privateEndpointConnectionName,
            options
        }, deleteOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByProjectOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentprojects/{projectName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionCollection,
            headersMapper: PrivateEndpointConnectionListByProjectHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentprojects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection,
            headersMapper: PrivateEndpointConnectionGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentprojects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection,
            headersMapper: PrivateEndpointConnectionUpdateHeaders
        },
        202: {
            bodyMapper: PrivateEndpointConnection,
            headersMapper: PrivateEndpointConnectionUpdateHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: privateEndpointConnectionBody,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentprojects/{projectName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: PrivateEndpointConnectionDeleteHeaders
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateLinkResourceOperations operations. */
class PrivateLinkResourceOperationsImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResourceOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get information related to a specific private Link Resource in the project. Returns a json object of
     * type 'privateLinkResources' as specified in the models section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param privateLinkResourceName Unique name of a private link resource within a project.
     * @param options The options parameters.
     */
    get(resourceGroupName, projectName, privateLinkResourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, privateLinkResourceName, options }, getOperationSpec);
    }
    /**
     * Get all private link resources created in the project. Returns a json array of objects of type
     * 'privateLinkResources' as specified in the Models section.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listByProject(resourceGroupName, projectName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, projectName, options }, listByProjectOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentprojects/{projectName}/privateLinkResources/{privateLinkResourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResource,
            headersMapper: PrivateLinkResourceGetHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName,
        privateLinkResourceName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByProjectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentprojects/{projectName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceCollection,
            headersMapper: PrivateLinkResourceListByProjectHeaders
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        projectName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get a list of REST API supported by Microsoft.Migrate provider.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a list of REST API supported by Microsoft.Migrate provider.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.Migrate/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationResultList
        }
    },
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class AzureMigrateV2 extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the AzureMigrateV2 class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Azure Subscription Id in which project was created.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-migrate/2.0.3`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2019-10-01";
        this.projects = new ProjectsImpl(this);
        this.machines = new MachinesImpl(this);
        this.groups = new GroupsImpl(this);
        this.assessments = new AssessmentsImpl(this);
        this.assessedMachines = new AssessedMachinesImpl(this);
        this.hyperVCollectors = new HyperVCollectorsImpl(this);
        this.serverCollectors = new ServerCollectorsImpl(this);
        this.vMwareCollectors = new VMwareCollectorsImpl(this);
        this.importCollectors = new ImportCollectorsImpl(this);
        this.privateEndpointConnectionOperations = new PrivateEndpointConnectionOperationsImpl(this);
        this.privateLinkResourceOperations = new PrivateLinkResourceOperationsImpl(this);
        this.operations = new OperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.AzureMigrateV2 = AzureMigrateV2;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
