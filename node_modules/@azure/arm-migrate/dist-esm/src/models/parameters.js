/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Project as ProjectMapper, Group as GroupMapper, UpdateGroupBody as UpdateGroupBodyMapper, Assessment as AssessmentMapper, HyperVCollector as HyperVCollectorMapper, ServerCollector as ServerCollectorMapper, VMwareCollector as VMwareCollectorMapper, ImportCollector as ImportCollectorMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const projectName = {
    parameterPath: "projectName",
    mapper: {
        serializedName: "projectName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const project = {
    parameterPath: ["options", "project"],
    mapper: ProjectMapper
};
export const assessmentOptionsName = {
    parameterPath: "assessmentOptionsName",
    mapper: {
        serializedName: "assessmentOptionsName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const machineName = {
    parameterPath: "machineName",
    mapper: {
        serializedName: "machineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const groupName = {
    parameterPath: "groupName",
    mapper: {
        serializedName: "groupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const group = {
    parameterPath: ["options", "group"],
    mapper: GroupMapper
};
export const groupUpdateProperties = {
    parameterPath: ["options", "groupUpdateProperties"],
    mapper: UpdateGroupBodyMapper
};
export const assessmentName = {
    parameterPath: "assessmentName",
    mapper: {
        serializedName: "assessmentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const assessment = {
    parameterPath: ["options", "assessment"],
    mapper: AssessmentMapper
};
export const assessedMachineName = {
    parameterPath: "assessedMachineName",
    mapper: {
        serializedName: "assessedMachineName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const hyperVCollectorName = {
    parameterPath: "hyperVCollectorName",
    mapper: {
        serializedName: "hyperVCollectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const collectorBody = {
    parameterPath: ["options", "collectorBody"],
    mapper: HyperVCollectorMapper
};
export const serverCollectorName = {
    parameterPath: "serverCollectorName",
    mapper: {
        serializedName: "serverCollectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const collectorBody1 = {
    parameterPath: ["options", "collectorBody"],
    mapper: ServerCollectorMapper
};
export const vmWareCollectorName = {
    parameterPath: "vmWareCollectorName",
    mapper: {
        serializedName: "vmWareCollectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const collectorBody2 = {
    parameterPath: ["options", "collectorBody"],
    mapper: VMwareCollectorMapper
};
export const importCollectorName = {
    parameterPath: "importCollectorName",
    mapper: {
        serializedName: "importCollectorName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const collectorBody3 = {
    parameterPath: ["options", "collectorBody"],
    mapper: ImportCollectorMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionBody = {
    parameterPath: ["options", "privateEndpointConnectionBody"],
    mapper: PrivateEndpointConnectionMapper
};
export const privateLinkResourceName = {
    parameterPath: "privateLinkResourceName",
    mapper: {
        serializedName: "privateLinkResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map