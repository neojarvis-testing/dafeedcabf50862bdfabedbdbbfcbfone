import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Projects } from "../operationsInterfaces";
import { AzureMigrateV2 } from "../azureMigrateV2";
import { Project, ProjectsListBySubscriptionOptionalParams, ProjectsListOptionalParams, AssessmentOptions, ProjectsAssessmentOptionsListOptionalParams, ProjectsGetOptionalParams, ProjectsGetResponse, ProjectsCreateOptionalParams, ProjectsCreateResponse, ProjectsUpdateOptionalParams, ProjectsUpdateResponse, ProjectsDeleteOptionalParams, ProjectsDeleteResponse, ProjectsAssessmentOptionsOptionalParams, ProjectsAssessmentOptionsResponse } from "../models";
/** Class containing Projects operations. */
export declare class ProjectsImpl implements Projects {
    private readonly client;
    /**
     * Initialize a new instance of the class Projects class.
     * @param client Reference to the service client
     */
    constructor(client: AzureMigrateV2);
    /**
     * Get all the projects in the subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ProjectsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Project>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Get all the projects in the resource group.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: ProjectsListOptionalParams): PagedAsyncIterableIterator<Project>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets list of all available options for the properties of an assessment on a project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    listAssessmentOptionsList(resourceGroupName: string, projectName: string, options?: ProjectsAssessmentOptionsListOptionalParams): PagedAsyncIterableIterator<AssessmentOptions>;
    private assessmentOptionsListPagingPage;
    private assessmentOptionsListPagingAll;
    /**
     * Get all the projects in the subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Get all the projects in the resource group.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get the project with the specified name.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, projectName: string, options?: ProjectsGetOptionalParams): Promise<ProjectsGetResponse>;
    /**
     * Create a project with specified name. If a project already exists, update it.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, projectName: string, options?: ProjectsCreateOptionalParams): Promise<ProjectsCreateResponse>;
    /**
     * Update a project with specified name. Supports partial updates, for example only tags can be
     * provided.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, projectName: string, options?: ProjectsUpdateOptionalParams): Promise<ProjectsUpdateResponse>;
    /**
     * Delete the project. Deleting non-existent project is a no-operation.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, projectName: string, options?: ProjectsDeleteOptionalParams): Promise<ProjectsDeleteResponse>;
    /**
     * Get all available options for the properties of an assessment on a project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param assessmentOptionsName Name of the assessment options. The only name accepted in default.
     * @param options The options parameters.
     */
    assessmentOptions(resourceGroupName: string, projectName: string, assessmentOptionsName: string, options?: ProjectsAssessmentOptionsOptionalParams): Promise<ProjectsAssessmentOptionsResponse>;
    /**
     * Gets list of all available options for the properties of an assessment on a project.
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param projectName Name of the Azure Migrate project.
     * @param options The options parameters.
     */
    private _assessmentOptionsList;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListNext
     * @param resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=projects.d.ts.map