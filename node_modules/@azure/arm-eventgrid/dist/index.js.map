{"version":3,"file":"index.js","sources":["../src/pagingHelper.ts","../src/models/index.ts","../src/models/mappers.ts","../src/models/parameters.ts","../src/lroImpl.ts","../src/operations/channels.ts","../src/operations/domains.ts","../src/operations/domainTopics.ts","../src/operations/topicEventSubscriptions.ts","../src/operations/domainEventSubscriptions.ts","../src/operations/eventSubscriptions.ts","../src/operations/domainTopicEventSubscriptions.ts","../src/operations/systemTopicEventSubscriptions.ts","../src/operations/partnerTopicEventSubscriptions.ts","../src/operations/operations.ts","../src/operations/topics.ts","../src/operations/partnerConfigurations.ts","../src/operations/partnerNamespaces.ts","../src/operations/partnerRegistrations.ts","../src/operations/partnerTopics.ts","../src/operations/privateEndpointConnections.ts","../src/operations/privateLinkResources.ts","../src/operations/systemTopics.ts","../src/operations/extensionTopics.ts","../src/operations/topicTypes.ts","../src/operations/verifiedPartners.ts","../src/eventGridManagementClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport interface PageInfo {\n  continuationToken?: string;\n}\n\nconst pageMap = new WeakMap<object, PageInfo>();\n\n/**\n * Given the last `.value` produced by the `byPage` iterator,\n * returns a continuation token that can be used to begin paging from\n * that point later.\n * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.\n * @returns The continuation token that can be passed into byPage() during future calls.\n */\nexport function getContinuationToken(page: unknown): string | undefined {\n  if (typeof page !== \"object\" || page === null) {\n    return undefined;\n  }\n  return pageMap.get(page)?.continuationToken;\n}\n\nexport function setContinuationToken(\n  page: unknown,\n  continuationToken: string | undefined\n): void {\n  if (typeof page !== \"object\" || page === null || !continuationToken) {\n    return;\n  }\n  const pageInfo = pageMap.get(page) ?? {};\n  pageInfo.continuationToken = continuationToken;\n  pageMap.set(page, pageInfo);\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport type InputSchemaMappingUnion =\n  | InputSchemaMapping\n  | JsonInputSchemaMapping;\nexport type DeliveryAttributeMappingUnion =\n  | DeliveryAttributeMapping\n  | StaticDeliveryAttributeMapping\n  | DynamicDeliveryAttributeMapping;\nexport type EventSubscriptionDestinationUnion =\n  | EventSubscriptionDestination\n  | WebHookEventSubscriptionDestination\n  | EventHubEventSubscriptionDestination\n  | StorageQueueEventSubscriptionDestination\n  | HybridConnectionEventSubscriptionDestination\n  | ServiceBusQueueEventSubscriptionDestination\n  | ServiceBusTopicEventSubscriptionDestination\n  | AzureFunctionEventSubscriptionDestination;\nexport type AdvancedFilterUnion =\n  | AdvancedFilter\n  | NumberInAdvancedFilter\n  | NumberNotInAdvancedFilter\n  | NumberLessThanAdvancedFilter\n  | NumberGreaterThanAdvancedFilter\n  | NumberLessThanOrEqualsAdvancedFilter\n  | NumberGreaterThanOrEqualsAdvancedFilter\n  | BoolEqualsAdvancedFilter\n  | StringInAdvancedFilter\n  | StringNotInAdvancedFilter\n  | StringBeginsWithAdvancedFilter\n  | StringEndsWithAdvancedFilter\n  | StringContainsAdvancedFilter\n  | NumberInRangeAdvancedFilter\n  | NumberNotInRangeAdvancedFilter\n  | StringNotBeginsWithAdvancedFilter\n  | StringNotEndsWithAdvancedFilter\n  | StringNotContainsAdvancedFilter\n  | IsNullOrUndefinedAdvancedFilter\n  | IsNotNullAdvancedFilter;\nexport type DeadLetterDestinationUnion =\n  | DeadLetterDestination\n  | StorageBlobDeadLetterDestination;\n\n/** Properties of the corresponding partner topic of a Channel. */\nexport interface PartnerTopicInfo {\n  /**\n   * Azure subscription ID of the subscriber. The partner topic associated with the channel will be\n   * created under this Azure subscription.\n   */\n  azureSubscriptionId?: string;\n  /**\n   * Azure Resource Group of the subscriber. The partner topic associated with the channel will be\n   * created under this resource group.\n   */\n  resourceGroupName?: string;\n  /** Name of the partner topic associated with the channel. */\n  name?: string;\n  /**\n   * Event Type Information for the partner topic. This information is provided by the publisher and can be used by the\n   * subscriber to view different types of events that are published.\n   */\n  eventTypeInfo?: EventTypeInfo;\n  /**\n   * The source information is provided by the publisher to determine the scope or context from which the events\n   * are originating. This information can be used by the subscriber during the approval process of the\n   * created partner topic.\n   */\n  source?: string;\n}\n\n/** The event type information for Channels. */\nexport interface EventTypeInfo {\n  /** The kind of event type used. */\n  kind?: EventDefinitionKind;\n  /**\n   * A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.\n   * An example of a valid inline event name is \"Contoso.OrderCreated\".\n   * The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.\n   */\n  inlineEventTypes?: { [propertyName: string]: InlineEventProperties };\n}\n\n/** Additional information about every inline event. */\nexport interface InlineEventProperties {\n  /** The description for the inline event. */\n  description?: string;\n  /** The displayName for the inline event. */\n  displayName?: string;\n  /** The documentationUrl for the inline event. */\n  documentationUrl?: string;\n  /** The dataSchemaUrl for the inline event. */\n  dataSchemaUrl?: string;\n}\n\n/** Metadata pertaining to creation and last modification of the resource. */\nexport interface SystemData {\n  /** The identity that created the resource. */\n  createdBy?: string;\n  /** The type of identity that created the resource. */\n  createdByType?: CreatedByType;\n  /** The timestamp of resource creation (UTC). */\n  createdAt?: Date;\n  /** The identity that last modified the resource. */\n  lastModifiedBy?: string;\n  /** The type of identity that last modified the resource. */\n  lastModifiedByType?: CreatedByType;\n  /** The timestamp of resource last modification (UTC) */\n  lastModifiedAt?: Date;\n}\n\n/** Definition of a Resource. */\nexport interface Resource {\n  /**\n   * Fully qualified identifier of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * Name of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * Type of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n}\n\n/** Properties of the Channel update. */\nexport interface ChannelUpdateParameters {\n  /**\n   * Expiration time of the channel. If this timer expires while the corresponding partner topic or partner destination is never activated,\n   * the channel and corresponding partner topic or partner destination are deleted.\n   */\n  expirationTimeIfNotActivatedUtc?: Date;\n  /** Partner topic properties which can be updated if the channel is of type PartnerTopic. */\n  partnerTopicInfo?: PartnerUpdateTopicInfo;\n}\n\n/** Update properties for the corresponding partner topic of a channel. */\nexport interface PartnerUpdateTopicInfo {\n  /** Event type info for the partner topic */\n  eventTypeInfo?: EventTypeInfo;\n}\n\n/** Result of the List Channels operation */\nexport interface ChannelsListResult {\n  /** A collection of Channels. */\n  value?: Channel[];\n  /** A link for the next page of channels. */\n  nextLink?: string;\n}\n\n/** Full endpoint url of an event subscription */\nexport interface EventSubscriptionFullUrl {\n  /** The URL that represents the endpoint of the destination of an event subscription. */\n  endpointUrl?: string;\n}\n\n/** PrivateEndpoint information. */\nexport interface PrivateEndpoint {\n  /** The ARM identifier for Private Endpoint. */\n  id?: string;\n}\n\n/** ConnectionState information. */\nexport interface ConnectionState {\n  /** Status of the connection. */\n  status?: PersistedConnectionStatus;\n  /** Description of the connection state. */\n  description?: string;\n  /** Actions required (if any). */\n  actionsRequired?: string;\n}\n\n/** By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'. */\nexport interface InputSchemaMapping {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  inputSchemaMappingType: \"Json\";\n}\n\nexport interface InboundIpRule {\n  /** IP Address in CIDR notation e.g., 10.0.0.0/8. */\n  ipMask?: string;\n  /** Action to perform based on the match or no match of the IpMask. */\n  action?: IpActionType;\n}\n\n/** The identity information for the resource. */\nexport interface IdentityInfo {\n  /** The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity. */\n  type?: IdentityType;\n  /** The principal ID of resource identity. */\n  principalId?: string;\n  /** The tenant ID of resource. */\n  tenantId?: string;\n  /**\n   * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:\n   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.\n   * This property is currently not used and reserved for future usage.\n   */\n  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };\n}\n\n/** The information about the user identity. */\nexport interface UserIdentityProperties {\n  /** The principal id of user assigned identity. */\n  principalId?: string;\n  /** The client id of user assigned identity. */\n  clientId?: string;\n}\n\n/** Properties of the Domain update. */\nexport interface DomainUpdateParameters {\n  /** Tags of the domains resource. */\n  tags?: { [propertyName: string]: string };\n  /** Identity information for the resource. */\n  identity?: IdentityInfo;\n  /**\n   * This determines if traffic is allowed over public network. By default it is enabled.\n   * You can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainUpdateParameterProperties.InboundIpRules\" />\n   */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */\n  inboundIpRules?: InboundIpRule[];\n  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the domain. */\n  disableLocalAuth?: boolean;\n  /**\n   * This Boolean is used to specify the creation mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.\n   * In this context, creation of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.\n   * When this property is null or set to true, Event Grid is responsible of automatically creating the domain topic when the first event subscription is\n   * created at the scope of the domain topic. If this property is set to false, then creating the first event subscription will require creating a domain topic\n   * by the user. The self-management mode can be used if the user wants full control of when the domain topic is created, while auto-managed mode provides the\n   * flexibility to perform less operations and manage fewer resources by the user. Also, note that in auto-managed creation mode, user is allowed to create the\n   * domain topic on demand if needed.\n   */\n  autoCreateTopicWithFirstSubscription?: boolean;\n  /**\n   * This Boolean is used to specify the deletion mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.\n   * In this context, deletion of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.\n   * When this property is set to true, Event Grid is responsible of automatically deleting the domain topic when the last event subscription at the scope\n   * of the domain topic is deleted. If this property is set to false, then the user needs to manually delete the domain topic when it is no longer needed\n   * (e.g., when last event subscription is deleted and the resource needs to be cleaned up). The self-management mode can be used if the user wants full\n   * control of when the domain topic needs to be deleted, while auto-managed mode provides the flexibility to perform less operations and manage fewer\n   * resources by the user.\n   */\n  autoDeleteTopicWithLastSubscription?: boolean;\n  /** The data residency boundary for the domain. */\n  dataResidencyBoundary?: DataResidencyBoundary;\n}\n\n/** Result of the List Domains operation. */\nexport interface DomainsListResult {\n  /** A collection of Domains. */\n  value?: Domain[];\n  /** A link for the next page of domains. */\n  nextLink?: string;\n}\n\n/** Shared access keys of the Domain. */\nexport interface DomainSharedAccessKeys {\n  /** Shared access key1 for the domain. */\n  key1?: string;\n  /** Shared access key2 for the domain. */\n  key2?: string;\n}\n\n/** Domain regenerate share access key request. */\nexport interface DomainRegenerateKeyRequest {\n  /** Key name to regenerate key1 or key2. */\n  keyName: string;\n}\n\n/** Result of the List Domain Topics operation. */\nexport interface DomainTopicsListResult {\n  /** A collection of Domain Topics. */\n  value?: DomainTopic[];\n  /** A link for the next page of domain topics. */\n  nextLink?: string;\n}\n\n/** Result of the Get delivery attributes operation. */\nexport interface DeliveryAttributeListResult {\n  /** A collection of DeliveryAttributeMapping */\n  value?: DeliveryAttributeMappingUnion[];\n}\n\n/** Delivery attribute mapping details. */\nexport interface DeliveryAttributeMapping {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"Static\" | \"Dynamic\";\n  /** Name of the delivery attribute or header. */\n  name?: string;\n}\n\n/** Information about the destination for an event subscription. */\nexport interface EventSubscriptionDestination {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  endpointType:\n    | \"WebHook\"\n    | \"EventHub\"\n    | \"StorageQueue\"\n    | \"HybridConnection\"\n    | \"ServiceBusQueue\"\n    | \"ServiceBusTopic\"\n    | \"AzureFunction\";\n}\n\n/** Information about the delivery for an event subscription with resource identity. */\nexport interface DeliveryWithResourceIdentity {\n  /** The identity to use when delivering events. */\n  identity?: EventSubscriptionIdentity;\n  /**\n   * Information about the destination where events have to be delivered for the event subscription.\n   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.\n   */\n  destination?: EventSubscriptionDestinationUnion;\n}\n\n/** The identity information with the event subscription. */\nexport interface EventSubscriptionIdentity {\n  /** The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity. */\n  type?: EventSubscriptionIdentityType;\n  /** The user identity associated with the resource. */\n  userAssignedIdentity?: string;\n}\n\n/** Filter for the Event Subscription. */\nexport interface EventSubscriptionFilter {\n  /**\n   * An optional string to filter events for an event subscription based on a resource path prefix.\n   * The format of this depends on the publisher of the events.\n   * Wildcard characters are not supported in this path.\n   */\n  subjectBeginsWith?: string;\n  /**\n   * An optional string to filter events for an event subscription based on a resource path suffix.\n   * Wildcard characters are not supported in this path.\n   */\n  subjectEndsWith?: string;\n  /** A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null. */\n  includedEventTypes?: string[];\n  /**\n   * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter\n   * should be compared in a case sensitive manner.\n   */\n  isSubjectCaseSensitive?: boolean;\n  /** Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. */\n  enableAdvancedFilteringOnArrays?: boolean;\n  /** An array of advanced filters that are used for filtering event subscriptions. */\n  advancedFilters?: AdvancedFilterUnion[];\n}\n\n/** This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter. */\nexport interface AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType:\n    | \"NumberIn\"\n    | \"NumberNotIn\"\n    | \"NumberLessThan\"\n    | \"NumberGreaterThan\"\n    | \"NumberLessThanOrEquals\"\n    | \"NumberGreaterThanOrEquals\"\n    | \"BoolEquals\"\n    | \"StringIn\"\n    | \"StringNotIn\"\n    | \"StringBeginsWith\"\n    | \"StringEndsWith\"\n    | \"StringContains\"\n    | \"NumberInRange\"\n    | \"NumberNotInRange\"\n    | \"StringNotBeginsWith\"\n    | \"StringNotEndsWith\"\n    | \"StringNotContains\"\n    | \"IsNullOrUndefined\"\n    | \"IsNotNull\";\n  /** The field/property in the event based on which you want to filter. */\n  key?: string;\n}\n\n/** Information about the retry policy for an event subscription. */\nexport interface RetryPolicy {\n  /** Maximum number of delivery retry attempts for events. */\n  maxDeliveryAttempts?: number;\n  /** Time To Live (in minutes) for events. */\n  eventTimeToLiveInMinutes?: number;\n}\n\n/** Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class. */\nexport interface DeadLetterDestination {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  endpointType: \"StorageBlob\";\n}\n\n/** Information about the deadletter destination with resource identity. */\nexport interface DeadLetterWithResourceIdentity {\n  /** The identity to use when dead-lettering events. */\n  identity?: EventSubscriptionIdentity;\n  /**\n   * Information about the destination where events have to be delivered for the event subscription.\n   * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.\n   */\n  deadLetterDestination?: DeadLetterDestinationUnion;\n}\n\n/** Properties of the Event Subscription update. */\nexport interface EventSubscriptionUpdateParameters {\n  /**\n   * Information about the destination where events have to be delivered for the event subscription.\n   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.\n   */\n  destination?: EventSubscriptionDestinationUnion;\n  /**\n   * Information about the destination where events have to be delivered for the event subscription.\n   * Uses the managed identity setup on the parent resource (topic / domain) to acquire the authentication tokens being used during delivery / dead-lettering.\n   */\n  deliveryWithResourceIdentity?: DeliveryWithResourceIdentity;\n  /** Information about the filter for the event subscription. */\n  filter?: EventSubscriptionFilter;\n  /** List of user defined labels. */\n  labels?: string[];\n  /** Information about the expiration time for the event subscription. */\n  expirationTimeUtc?: Date;\n  /** The event delivery schema for the event subscription. */\n  eventDeliverySchema?: EventDeliverySchema;\n  /** The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events. */\n  retryPolicy?: RetryPolicy;\n  /**\n   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.\n   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.\n   */\n  deadLetterDestination?: DeadLetterDestinationUnion;\n  /**\n   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.\n   * Uses the managed identity setup on the parent resource (topic / domain) to acquire the authentication tokens being used during delivery / dead-lettering.\n   */\n  deadLetterWithResourceIdentity?: DeadLetterWithResourceIdentity;\n}\n\n/** Result of the List EventSubscriptions operation */\nexport interface EventSubscriptionsListResult {\n  /** A collection of EventSubscriptions */\n  value?: EventSubscription[];\n  /** A link for the next page of event subscriptions */\n  nextLink?: string;\n}\n\n/** Result of the List Operations operation */\nexport interface OperationsListResult {\n  /** A collection of operations */\n  value?: Operation[];\n}\n\n/** Represents an operation returned by the GetOperations request. */\nexport interface Operation {\n  /** Name of the operation. */\n  name?: string;\n  /** Display name of the operation. */\n  display?: OperationInfo;\n  /** Origin of the operation. */\n  origin?: string;\n  /** This Boolean is used to determine if the operation is a data plane action or not. */\n  isDataAction?: boolean;\n  /** Properties of the operation. */\n  properties?: Record<string, unknown>;\n}\n\n/** Information about an operation */\nexport interface OperationInfo {\n  /** Name of the provider */\n  provider?: string;\n  /** Name of the resource type */\n  resource?: string;\n  /** Name of the operation */\n  operation?: string;\n  /** Description of the operation */\n  description?: string;\n}\n\n/** Properties of the Topic update */\nexport interface TopicUpdateParameters {\n  /** Tags of the Topic resource. */\n  tags?: { [propertyName: string]: string };\n  /** Topic resource identity information. */\n  identity?: IdentityInfo;\n  /**\n   * This determines if traffic is allowed over public network. By default it is enabled.\n   * You can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicUpdateParameterProperties.InboundIpRules\" />\n   */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */\n  inboundIpRules?: InboundIpRule[];\n  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the topic. */\n  disableLocalAuth?: boolean;\n  /** The data residency boundary for the topic. */\n  dataResidencyBoundary?: DataResidencyBoundary;\n}\n\n/** Result of the List Topics operation */\nexport interface TopicsListResult {\n  /** A collection of Topics */\n  value?: Topic[];\n  /** A link for the next page of topics */\n  nextLink?: string;\n}\n\n/** Shared access keys of the Topic */\nexport interface TopicSharedAccessKeys {\n  /** Shared access key1 for the topic. */\n  key1?: string;\n  /** Shared access key2 for the topic. */\n  key2?: string;\n}\n\n/** Topic regenerate share access key request */\nexport interface TopicRegenerateKeyRequest {\n  /** Key name to regenerate key1 or key2 */\n  keyName: string;\n}\n\n/** The partner authorization details. */\nexport interface PartnerAuthorization {\n  /**\n   * Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is\n   * not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.\n   */\n  defaultMaximumExpirationTimeInDays?: number;\n  /** The list of authorized partners. */\n  authorizedPartnersList?: Partner[];\n}\n\n/** Information about the partner. */\nexport interface Partner {\n  /** The immutableId of the corresponding partner registration. */\n  partnerRegistrationImmutableId?: string;\n  /** The partner name. */\n  partnerName?: string;\n  /**\n   * Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber's\n   * context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.\n   * If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.\n   */\n  authorizationExpirationTimeInUtc?: Date;\n}\n\n/** Properties of the partner configuration update. */\nexport interface PartnerConfigurationUpdateParameters {\n  /** Tags of the partner configuration resource. */\n  tags?: { [propertyName: string]: string };\n  /** The default time used to validate the maximum expiration time for each authorized partners in days. Allowed values ar between 1 and 365 days. */\n  defaultMaximumExpirationTimeInDays?: number;\n}\n\n/** Result of the List partner configurations operation */\nexport interface PartnerConfigurationsListResult {\n  /** A collection of partner configurations. */\n  value?: PartnerConfiguration[];\n  /** A link for the next page of partner configurations. */\n  nextLink?: string;\n}\n\n/** Properties of the Partner Namespace update. */\nexport interface PartnerNamespaceUpdateParameters {\n  /** Tags of the Partner Namespace. */\n  tags?: { [propertyName: string]: string };\n  /**\n   * This determines if traffic is allowed over public network. By default it is enabled.\n   * You can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceUpdateParameterProperties.InboundIpRules\" />\n   */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */\n  inboundIpRules?: InboundIpRule[];\n  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the partner namespace. */\n  disableLocalAuth?: boolean;\n}\n\n/** Result of the List Partner Namespaces operation */\nexport interface PartnerNamespacesListResult {\n  /** A collection of partner namespaces. */\n  value?: PartnerNamespace[];\n  /** A link for the next page of partner namespaces. */\n  nextLink?: string;\n}\n\n/** Shared access keys of the partner namespace. */\nexport interface PartnerNamespaceSharedAccessKeys {\n  /** Shared access key1 for the partner namespace. */\n  key1?: string;\n  /** Shared access key2 for the partner namespace. */\n  key2?: string;\n}\n\n/** PartnerNamespace regenerate shared access key request. */\nexport interface PartnerNamespaceRegenerateKeyRequest {\n  /** Key name to regenerate (key1 or key2). */\n  keyName: string;\n}\n\n/** Properties of the Partner Registration update. */\nexport interface PartnerRegistrationUpdateParameters {\n  /** Tags of the partner registration resource. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Result of the List Partner Registrations operation. */\nexport interface PartnerRegistrationsListResult {\n  /** A collection of partner registrations. */\n  value?: PartnerRegistration[];\n  /** A link for the next page of partner registrations. */\n  nextLink?: string;\n}\n\n/** Properties of the Partner Topic update. */\nexport interface PartnerTopicUpdateParameters {\n  /** Tags of the Partner Topic resource. */\n  tags?: { [propertyName: string]: string };\n  /** Identity information for the Partner Topic resource. */\n  identity?: IdentityInfo;\n}\n\n/** Result of the List Partner Topics operation. */\nexport interface PartnerTopicsListResult {\n  /** A collection of partner topics. */\n  value?: PartnerTopic[];\n  /** A link for the next page of partner topics. */\n  nextLink?: string;\n}\n\n/** Result of the list of all private endpoint connections operation. */\nexport interface PrivateEndpointConnectionListResult {\n  /** A collection of private endpoint connection resources. */\n  value?: PrivateEndpointConnection[];\n  /** A link for the next page of private endpoint connection resources. */\n  nextLink?: string;\n}\n\n/** Information of the private link resource. */\nexport interface PrivateLinkResource {\n  /** Fully qualified identifier of the resource. */\n  id?: string;\n  /** Name of the resource. */\n  name?: string;\n  /** Type of the resource. */\n  type?: string;\n  groupId?: string;\n  displayName?: string;\n  requiredMembers?: string[];\n  requiredZoneNames?: string[];\n}\n\n/** Result of the List private link resources operation. */\nexport interface PrivateLinkResourcesListResult {\n  /** A collection of private link resources */\n  value?: PrivateLinkResource[];\n  /** A link for the next page of private link resources. */\n  nextLink?: string;\n}\n\n/** Properties of the System Topic update. */\nexport interface SystemTopicUpdateParameters {\n  /** Tags of the system topic. */\n  tags?: { [propertyName: string]: string };\n  /** Resource identity information. */\n  identity?: IdentityInfo;\n}\n\n/** Result of the List System topics operation. */\nexport interface SystemTopicsListResult {\n  /** A collection of system Topics. */\n  value?: SystemTopic[];\n  /** A link for the next page of topics. */\n  nextLink?: string;\n}\n\n/** Result of the List Event Types operation */\nexport interface EventTypesListResult {\n  /** A collection of event types */\n  value?: EventType[];\n}\n\n/** Result of the List Topic Types operation */\nexport interface TopicTypesListResult {\n  /** A collection of topic types */\n  value?: TopicTypeInfo[];\n}\n\n/** Information about the partner. */\nexport interface PartnerDetails {\n  /** This is short description about the partner. The length of this description should not exceed 256 characters. */\n  description?: string;\n  /** Long description for the partner's scenarios and integration.Length of this description should not exceed 2048 characters. */\n  longDescription?: string;\n  /**\n   * URI of the partner website that can be used by Azure customers to setup Event Grid\n   * integration on an event source.\n   */\n  setupUri?: string;\n}\n\n/** Result of the List verified partners operation */\nexport interface VerifiedPartnersListResult {\n  /** A collection of verified partners. */\n  value?: VerifiedPartner[];\n  /** A link for the next page of verified partners if any. */\n  nextLink?: string;\n}\n\n/** This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema. */\nexport interface JsonField {\n  /** Name of a field in the input event schema that's to be used as the source of a mapping. */\n  sourceField?: string;\n}\n\n/**\n * This is used to express the source of an input schema mapping for a single target field\n * in the Event Grid Event schema. This is currently used in the mappings for the 'subject',\n * 'eventtype' and 'dataversion' properties. This represents a field in the input event schema\n * along with a default value to be used, and at least one of these two properties should be provided.\n */\nexport interface JsonFieldWithDefault {\n  /** Name of a field in the input event schema that's to be used as the source of a mapping. */\n  sourceField?: string;\n  /** The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload. */\n  defaultValue?: string;\n}\n\n/** Channel info. */\nexport interface Channel extends Resource {\n  /**\n   * The system metadata relating to Channel resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** The type of the event channel which represents the direction flow of events. */\n  channelType?: ChannelType;\n  /** This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel. */\n  partnerTopicInfo?: PartnerTopicInfo;\n  /** Context or helpful message that can be used during the approval process by the subscriber. */\n  messageForActivation?: string;\n  /** Provisioning state of the channel. */\n  provisioningState?: ChannelProvisioningState;\n  /** The readiness state of the corresponding partner topic. */\n  readinessState?: ReadinessState;\n  /**\n   * Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,\n   * the channel and corresponding partner topic are deleted.\n   */\n  expirationTimeIfNotActivatedUtc?: Date;\n}\n\nexport interface PrivateEndpointConnection extends Resource {\n  /** The Private Endpoint resource for this Connection. */\n  privateEndpoint?: PrivateEndpoint;\n  /** GroupIds from the private link service resource. */\n  groupIds?: string[];\n  /** Details about the state of the connection. */\n  privateLinkServiceConnectionState?: ConnectionState;\n  /** Provisioning state of the Private Endpoint Connection. */\n  provisioningState?: ResourceProvisioningState;\n}\n\n/** Definition of a Tracked Resource. */\nexport interface TrackedResource extends Resource {\n  /** Location of the resource. */\n  location: string;\n  /** Tags of the resource. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Domain Topic. */\nexport interface DomainTopic extends Resource {\n  /**\n   * The system metadata relating to Domain Topic resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /**\n   * Provisioning state of the domain topic.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: DomainTopicProvisioningState;\n}\n\n/** Event Subscription */\nexport interface EventSubscription extends Resource {\n  /**\n   * The system metadata relating to Event Subscription resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /**\n   * Name of the topic of the event subscription.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly topic?: string;\n  /**\n   * Provisioning state of the event subscription.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: EventSubscriptionProvisioningState;\n  /**\n   * Information about the destination where events have to be delivered for the event subscription.\n   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.\n   */\n  destination?: EventSubscriptionDestinationUnion;\n  /**\n   * Information about the destination where events have to be delivered for the event subscription.\n   * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.\n   */\n  deliveryWithResourceIdentity?: DeliveryWithResourceIdentity;\n  /** Information about the filter for the event subscription. */\n  filter?: EventSubscriptionFilter;\n  /** List of user defined labels. */\n  labels?: string[];\n  /** Expiration time of the event subscription. */\n  expirationTimeUtc?: Date;\n  /** The event delivery schema for the event subscription. */\n  eventDeliverySchema?: EventDeliverySchema;\n  /** The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events. */\n  retryPolicy?: RetryPolicy;\n  /**\n   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.\n   * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.\n   */\n  deadLetterDestination?: DeadLetterDestinationUnion;\n  /**\n   * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.\n   * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.\n   */\n  deadLetterWithResourceIdentity?: DeadLetterWithResourceIdentity;\n}\n\n/** Partner configuration information */\nexport interface PartnerConfiguration extends Resource {\n  /**\n   * The system metadata relating to partner configuration resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** Location of the resource. */\n  location?: string;\n  /** Tags of the resource. */\n  tags?: { [propertyName: string]: string };\n  /** The details of authorized partners. */\n  partnerAuthorization?: PartnerAuthorization;\n  /** Provisioning state of the partner configuration. */\n  provisioningState?: PartnerConfigurationProvisioningState;\n}\n\n/** Event Type for a subject under a topic */\nexport interface EventType extends Resource {\n  /** Display name of the event type. */\n  displayName?: string;\n  /** Description of the event type. */\n  description?: string;\n  /** Url of the schema for this event type. */\n  schemaUrl?: string;\n  /** IsInDefaultSet flag of the event type. */\n  isInDefaultSet?: boolean;\n}\n\n/** Event grid Extension Topic. This is used for getting Event Grid related metrics for Azure resources. */\nexport interface ExtensionTopic extends Resource {\n  /**\n   * The system metadata relating to Extension Topic resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** Description of the extension topic. */\n  description?: string;\n  /** System topic resource id which is mapped to the source. */\n  systemTopic?: string;\n}\n\n/** Properties of a topic type info. */\nexport interface TopicTypeInfo extends Resource {\n  /** Namespace of the provider of the topic type. */\n  provider?: string;\n  /** Display Name for the topic type. */\n  displayName?: string;\n  /** Description of the topic type. */\n  description?: string;\n  /** Region type of the resource. */\n  resourceRegionType?: ResourceRegionType;\n  /** Provisioning state of the topic type */\n  provisioningState?: TopicTypeProvisioningState;\n  /** List of locations supported by this topic type. */\n  supportedLocations?: string[];\n  /** Source resource format. */\n  sourceResourceFormat?: string;\n  /** Supported source scopes. */\n  supportedScopesForSource?: TopicTypeSourceScope[];\n}\n\n/** Verified partner information */\nexport interface VerifiedPartner extends Resource {\n  /**\n   * The system metadata relating to Verified Partner resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** ImmutableId of the corresponding partner registration. */\n  partnerRegistrationImmutableId?: string;\n  /** Official name of the Partner. */\n  organizationName?: string;\n  /** Display name of the verified partner. */\n  partnerDisplayName?: string;\n  /** Details of the partner topic scenario. */\n  partnerTopicDetails?: PartnerDetails;\n  /** Provisioning state of the verified partner. */\n  provisioningState?: VerifiedPartnerProvisioningState;\n}\n\n/** This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema. */\nexport interface JsonInputSchemaMapping extends InputSchemaMapping {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  inputSchemaMappingType: \"Json\";\n  /** The mapping information for the Id property of the Event Grid Event. */\n  id?: JsonField;\n  /** The mapping information for the Topic property of the Event Grid Event. */\n  topic?: JsonField;\n  /** The mapping information for the EventTime property of the Event Grid Event. */\n  eventTime?: JsonField;\n  /** The mapping information for the EventType property of the Event Grid Event. */\n  eventType?: JsonFieldWithDefault;\n  /** The mapping information for the Subject property of the Event Grid Event. */\n  subject?: JsonFieldWithDefault;\n  /** The mapping information for the DataVersion property of the Event Grid Event. */\n  dataVersion?: JsonFieldWithDefault;\n}\n\n/** Static delivery attribute mapping details. */\nexport interface StaticDeliveryAttributeMapping\n  extends DeliveryAttributeMapping {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"Static\";\n  /** Value of the delivery attribute. */\n  value?: string;\n  /** Boolean flag to tell if the attribute contains sensitive information . */\n  isSecret?: boolean;\n}\n\n/** Dynamic delivery attribute mapping details. */\nexport interface DynamicDeliveryAttributeMapping\n  extends DeliveryAttributeMapping {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"Dynamic\";\n  /** JSON path in the event which contains attribute value. */\n  sourceField?: string;\n}\n\n/** Information about the webhook destination for an event subscription. */\nexport interface WebHookEventSubscriptionDestination\n  extends EventSubscriptionDestination {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  endpointType: \"WebHook\";\n  /** The URL that represents the endpoint of the destination of an event subscription. */\n  endpointUrl?: string;\n  /**\n   * The base URL that represents the endpoint of the destination of an event subscription.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly endpointBaseUrl?: string;\n  /** Maximum number of events per batch. */\n  maxEventsPerBatch?: number;\n  /** Preferred batch size in Kilobytes. */\n  preferredBatchSizeInKilobytes?: number;\n  /** The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests. */\n  azureActiveDirectoryTenantId?: string;\n  /** The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests. */\n  azureActiveDirectoryApplicationIdOrUri?: string;\n  /** Delivery attribute details. */\n  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];\n}\n\n/** Information about the event hub destination for an event subscription. */\nexport interface EventHubEventSubscriptionDestination\n  extends EventSubscriptionDestination {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  endpointType: \"EventHub\";\n  /** The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription. */\n  resourceId?: string;\n  /** Delivery attribute details. */\n  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];\n}\n\n/** Information about the storage queue destination for an event subscription. */\nexport interface StorageQueueEventSubscriptionDestination\n  extends EventSubscriptionDestination {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  endpointType: \"StorageQueue\";\n  /** The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription. */\n  resourceId?: string;\n  /** The name of the Storage queue under a storage account that is the destination of an event subscription. */\n  queueName?: string;\n  /** Storage queue message time to live in seconds. */\n  queueMessageTimeToLiveInSeconds?: number;\n}\n\n/** Information about the HybridConnection destination for an event subscription. */\nexport interface HybridConnectionEventSubscriptionDestination\n  extends EventSubscriptionDestination {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  endpointType: \"HybridConnection\";\n  /** The Azure Resource ID of an hybrid connection that is the destination of an event subscription. */\n  resourceId?: string;\n  /** Delivery attribute details. */\n  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];\n}\n\n/** Information about the service bus destination for an event subscription. */\nexport interface ServiceBusQueueEventSubscriptionDestination\n  extends EventSubscriptionDestination {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  endpointType: \"ServiceBusQueue\";\n  /** The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription. */\n  resourceId?: string;\n  /** Delivery attribute details. */\n  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];\n}\n\n/** Information about the service bus topic destination for an event subscription. */\nexport interface ServiceBusTopicEventSubscriptionDestination\n  extends EventSubscriptionDestination {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  endpointType: \"ServiceBusTopic\";\n  /** The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription. */\n  resourceId?: string;\n  /** Delivery attribute details. */\n  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];\n}\n\n/** Information about the azure function destination for an event subscription. */\nexport interface AzureFunctionEventSubscriptionDestination\n  extends EventSubscriptionDestination {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  endpointType: \"AzureFunction\";\n  /** The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription. */\n  resourceId?: string;\n  /** Maximum number of events per batch. */\n  maxEventsPerBatch?: number;\n  /** Preferred batch size in Kilobytes. */\n  preferredBatchSizeInKilobytes?: number;\n  /** Delivery attribute details. */\n  deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];\n}\n\n/** NumberIn Advanced Filter. */\nexport interface NumberInAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"NumberIn\";\n  /** The set of filter values. */\n  values?: number[];\n}\n\n/** NumberNotIn Advanced Filter. */\nexport interface NumberNotInAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"NumberNotIn\";\n  /** The set of filter values. */\n  values?: number[];\n}\n\n/** NumberLessThan Advanced Filter. */\nexport interface NumberLessThanAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"NumberLessThan\";\n  /** The filter value. */\n  value?: number;\n}\n\n/** NumberGreaterThan Advanced Filter. */\nexport interface NumberGreaterThanAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"NumberGreaterThan\";\n  /** The filter value. */\n  value?: number;\n}\n\n/** NumberLessThanOrEquals Advanced Filter. */\nexport interface NumberLessThanOrEqualsAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"NumberLessThanOrEquals\";\n  /** The filter value. */\n  value?: number;\n}\n\n/** NumberGreaterThanOrEquals Advanced Filter. */\nexport interface NumberGreaterThanOrEqualsAdvancedFilter\n  extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"NumberGreaterThanOrEquals\";\n  /** The filter value. */\n  value?: number;\n}\n\n/** BoolEquals Advanced Filter. */\nexport interface BoolEqualsAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"BoolEquals\";\n  /** The boolean filter value. */\n  value?: boolean;\n}\n\n/** StringIn Advanced Filter. */\nexport interface StringInAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"StringIn\";\n  /** The set of filter values. */\n  values?: string[];\n}\n\n/** StringNotIn Advanced Filter. */\nexport interface StringNotInAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"StringNotIn\";\n  /** The set of filter values. */\n  values?: string[];\n}\n\n/** StringBeginsWith Advanced Filter. */\nexport interface StringBeginsWithAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"StringBeginsWith\";\n  /** The set of filter values. */\n  values?: string[];\n}\n\n/** StringEndsWith Advanced Filter. */\nexport interface StringEndsWithAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"StringEndsWith\";\n  /** The set of filter values. */\n  values?: string[];\n}\n\n/** StringContains Advanced Filter. */\nexport interface StringContainsAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"StringContains\";\n  /** The set of filter values. */\n  values?: string[];\n}\n\n/** NumberInRange Advanced Filter. */\nexport interface NumberInRangeAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"NumberInRange\";\n  /** The set of filter values. */\n  values?: number[][];\n}\n\n/** NumberNotInRange Advanced Filter. */\nexport interface NumberNotInRangeAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"NumberNotInRange\";\n  /** The set of filter values. */\n  values?: number[][];\n}\n\n/** StringNotBeginsWith Advanced Filter. */\nexport interface StringNotBeginsWithAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"StringNotBeginsWith\";\n  /** The set of filter values. */\n  values?: string[];\n}\n\n/** StringNotEndsWith Advanced Filter. */\nexport interface StringNotEndsWithAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"StringNotEndsWith\";\n  /** The set of filter values. */\n  values?: string[];\n}\n\n/** StringNotContains Advanced Filter. */\nexport interface StringNotContainsAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"StringNotContains\";\n  /** The set of filter values. */\n  values?: string[];\n}\n\n/** IsNullOrUndefined Advanced Filter. */\nexport interface IsNullOrUndefinedAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"IsNullOrUndefined\";\n}\n\n/** IsNotNull Advanced Filter. */\nexport interface IsNotNullAdvancedFilter extends AdvancedFilter {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  operatorType: \"IsNotNull\";\n}\n\n/** Information about the storage blob based dead letter destination. */\nexport interface StorageBlobDeadLetterDestination\n  extends DeadLetterDestination {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  endpointType: \"StorageBlob\";\n  /** The Azure Resource ID of the storage account that is the destination of the deadletter events */\n  resourceId?: string;\n  /** The name of the Storage blob container that is the destination of the deadletter events */\n  blobContainerName?: string;\n}\n\n/** EventGrid Domain. */\nexport interface Domain extends TrackedResource {\n  /**\n   * The system metadata relating to the Event Grid Domain resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** Identity information for the Event Grid Domain resource. */\n  identity?: IdentityInfo;\n  /**\n   * List of private endpoint connections.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly privateEndpointConnections?: PrivateEndpointConnection[];\n  /**\n   * Provisioning state of the Event Grid Domain Resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: DomainProvisioningState;\n  /**\n   * Endpoint for the Event Grid Domain Resource which is used for publishing the events.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly endpoint?: string;\n  /** This determines the format that Event Grid should expect for incoming events published to the Event Grid Domain Resource. */\n  inputSchema?: InputSchema;\n  /** Information about the InputSchemaMapping which specified the info about mapping event payload. */\n  inputSchemaMapping?: InputSchemaMappingUnion;\n  /**\n   * Metric resource id for the Event Grid Domain Resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly metricResourceId?: string;\n  /**\n   * This determines if traffic is allowed over public network. By default it is enabled.\n   * You can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules\" />\n   */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */\n  inboundIpRules?: InboundIpRule[];\n  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the domain. */\n  disableLocalAuth?: boolean;\n  /**\n   * This Boolean is used to specify the creation mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.\n   * In this context, creation of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.\n   * When this property is null or set to true, Event Grid is responsible of automatically creating the domain topic when the first event subscription is\n   * created at the scope of the domain topic. If this property is set to false, then creating the first event subscription will require creating a domain topic\n   * by the user. The self-management mode can be used if the user wants full control of when the domain topic is created, while auto-managed mode provides the\n   * flexibility to perform less operations and manage fewer resources by the user. Also, note that in auto-managed creation mode, user is allowed to create the\n   * domain topic on demand if needed.\n   */\n  autoCreateTopicWithFirstSubscription?: boolean;\n  /**\n   * This Boolean is used to specify the deletion mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.\n   * In this context, deletion of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.\n   * When this property is set to true, Event Grid is responsible of automatically deleting the domain topic when the last event subscription at the scope\n   * of the domain topic is deleted. If this property is set to false, then the user needs to manually delete the domain topic when it is no longer needed\n   * (e.g., when last event subscription is deleted and the resource needs to be cleaned up). The self-management mode can be used if the user wants full\n   * control of when the domain topic needs to be deleted, while auto-managed mode provides the flexibility to perform less operations and manage fewer\n   * resources by the user.\n   */\n  autoDeleteTopicWithLastSubscription?: boolean;\n  /** Data Residency Boundary of the resource. */\n  dataResidencyBoundary?: DataResidencyBoundary;\n}\n\n/** EventGrid Topic */\nexport interface Topic extends TrackedResource {\n  /** Identity information for the resource. */\n  identity?: IdentityInfo;\n  /**\n   * The system metadata relating to Topic resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** NOTE: This property will not be serialized. It can only be populated by the server. */\n  readonly privateEndpointConnections?: PrivateEndpointConnection[];\n  /**\n   * Provisioning state of the topic.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: TopicProvisioningState;\n  /**\n   * Endpoint for the topic.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly endpoint?: string;\n  /** This determines the format that Event Grid should expect for incoming events published to the topic. */\n  inputSchema?: InputSchema;\n  /** This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map various properties of a source schema to various required properties of the EventGridEvent schema. */\n  inputSchemaMapping?: InputSchemaMappingUnion;\n  /**\n   * Metric resource id for the topic.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly metricResourceId?: string;\n  /**\n   * This determines if traffic is allowed over public network. By default it is enabled.\n   * You can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules\" />\n   */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */\n  inboundIpRules?: InboundIpRule[];\n  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the topic. */\n  disableLocalAuth?: boolean;\n  /** Data Residency Boundary of the resource. */\n  dataResidencyBoundary?: DataResidencyBoundary;\n}\n\n/** EventGrid Partner Namespace. */\nexport interface PartnerNamespace extends TrackedResource {\n  /**\n   * The system metadata relating to Partner Namespace resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** NOTE: This property will not be serialized. It can only be populated by the server. */\n  readonly privateEndpointConnections?: PrivateEndpointConnection[];\n  /**\n   * Provisioning state of the partner namespace.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: PartnerNamespaceProvisioningState;\n  /**\n   * The fully qualified ARM Id of the partner registration that should be associated with this partner namespace. This takes the following format:\n   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}.\n   */\n  partnerRegistrationFullyQualifiedId?: string;\n  /**\n   * Endpoint for the partner namespace.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly endpoint?: string;\n  /**\n   * This determines if traffic is allowed over public network. By default it is enabled.\n   * You can further restrict to specific IPs by configuring <seealso cref=\"P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceProperties.InboundIpRules\" />\n   */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */\n  inboundIpRules?: InboundIpRule[];\n  /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the partner namespace. */\n  disableLocalAuth?: boolean;\n  /**\n   * This determines if events published to this partner namespace should use the source attribute in the event payload\n   * or use the channel name in the header when matching to the partner topic. If none is specified, source attribute routing will be used to match the partner topic.\n   */\n  partnerTopicRoutingMode?: PartnerTopicRoutingMode;\n}\n\n/** Information about a partner registration. */\nexport interface PartnerRegistration extends TrackedResource {\n  /**\n   * The system metadata relating to Partner Registration resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /**\n   * Provisioning state of the partner registration.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: PartnerRegistrationProvisioningState;\n  /**\n   * The immutableId of the corresponding partner registration.\n   * Note: This property is marked for deprecation and is not supported in any future GA API version\n   */\n  partnerRegistrationImmutableId?: string;\n}\n\n/** Event Grid Partner Topic. */\nexport interface PartnerTopic extends TrackedResource {\n  /**\n   * The system metadata relating to Partner Topic resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /** Identity information for the Partner Topic resource. */\n  identity?: IdentityInfo;\n  /** The immutableId of the corresponding partner registration. */\n  partnerRegistrationImmutableId?: string;\n  /** Source associated with this partner topic. This represents a unique partner resource. */\n  source?: string;\n  /** Event Type information from the corresponding event channel. */\n  eventTypeInfo?: EventTypeInfo;\n  /**\n   * Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,\n   * the partner topic and corresponding event channel are deleted.\n   */\n  expirationTimeIfNotActivatedUtc?: Date;\n  /**\n   * Provisioning state of the partner topic.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: PartnerTopicProvisioningState;\n  /** Activation state of the partner topic. */\n  activationState?: PartnerTopicActivationState;\n  /**\n   * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.\n   * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.\n   */\n  partnerTopicFriendlyDescription?: string;\n  /** Context or helpful message that can be used during the approval process by the subscriber. */\n  messageForActivation?: string;\n}\n\n/** EventGrid System Topic. */\nexport interface SystemTopic extends TrackedResource {\n  /** Identity information for the resource. */\n  identity?: IdentityInfo;\n  /**\n   * The system metadata relating to System Topic resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n  /**\n   * Provisioning state of the system topic.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ResourceProvisioningState;\n  /** Source for the system topic. */\n  source?: string;\n  /** TopicType for the system topic. */\n  topicType?: string;\n  /**\n   * Metric resource id for the system topic.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly metricResourceId?: string;\n}\n\n/** Known values of {@link ChannelType} that the service accepts. */\nexport enum KnownChannelType {\n  /** PartnerTopic */\n  PartnerTopic = \"PartnerTopic\"\n}\n\n/**\n * Defines values for ChannelType. \\\n * {@link KnownChannelType} can be used interchangeably with ChannelType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **PartnerTopic**\n */\nexport type ChannelType = string;\n\n/** Known values of {@link EventDefinitionKind} that the service accepts. */\nexport enum KnownEventDefinitionKind {\n  /** Inline */\n  Inline = \"Inline\"\n}\n\n/**\n * Defines values for EventDefinitionKind. \\\n * {@link KnownEventDefinitionKind} can be used interchangeably with EventDefinitionKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Inline**\n */\nexport type EventDefinitionKind = string;\n\n/** Known values of {@link ChannelProvisioningState} that the service accepts. */\nexport enum KnownChannelProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\",\n  /** IdleDueToMirroredPartnerTopicDeletion */\n  IdleDueToMirroredPartnerTopicDeletion = \"IdleDueToMirroredPartnerTopicDeletion\"\n}\n\n/**\n * Defines values for ChannelProvisioningState. \\\n * {@link KnownChannelProvisioningState} can be used interchangeably with ChannelProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed** \\\n * **IdleDueToMirroredPartnerTopicDeletion**\n */\nexport type ChannelProvisioningState = string;\n\n/** Known values of {@link ReadinessState} that the service accepts. */\nexport enum KnownReadinessState {\n  /** NeverActivated */\n  NeverActivated = \"NeverActivated\",\n  /** Activated */\n  Activated = \"Activated\"\n}\n\n/**\n * Defines values for ReadinessState. \\\n * {@link KnownReadinessState} can be used interchangeably with ReadinessState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **NeverActivated** \\\n * **Activated**\n */\nexport type ReadinessState = string;\n\n/** Known values of {@link CreatedByType} that the service accepts. */\nexport enum KnownCreatedByType {\n  /** User */\n  User = \"User\",\n  /** Application */\n  Application = \"Application\",\n  /** ManagedIdentity */\n  ManagedIdentity = \"ManagedIdentity\",\n  /** Key */\n  Key = \"Key\"\n}\n\n/**\n * Defines values for CreatedByType. \\\n * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **User** \\\n * **Application** \\\n * **ManagedIdentity** \\\n * **Key**\n */\nexport type CreatedByType = string;\n\n/** Known values of {@link PersistedConnectionStatus} that the service accepts. */\nexport enum KnownPersistedConnectionStatus {\n  /** Pending */\n  Pending = \"Pending\",\n  /** Approved */\n  Approved = \"Approved\",\n  /** Rejected */\n  Rejected = \"Rejected\",\n  /** Disconnected */\n  Disconnected = \"Disconnected\"\n}\n\n/**\n * Defines values for PersistedConnectionStatus. \\\n * {@link KnownPersistedConnectionStatus} can be used interchangeably with PersistedConnectionStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Pending** \\\n * **Approved** \\\n * **Rejected** \\\n * **Disconnected**\n */\nexport type PersistedConnectionStatus = string;\n\n/** Known values of {@link ResourceProvisioningState} that the service accepts. */\nexport enum KnownResourceProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\"\n}\n\n/**\n * Defines values for ResourceProvisioningState. \\\n * {@link KnownResourceProvisioningState} can be used interchangeably with ResourceProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed**\n */\nexport type ResourceProvisioningState = string;\n\n/** Known values of {@link DomainProvisioningState} that the service accepts. */\nexport enum KnownDomainProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\"\n}\n\n/**\n * Defines values for DomainProvisioningState. \\\n * {@link KnownDomainProvisioningState} can be used interchangeably with DomainProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed**\n */\nexport type DomainProvisioningState = string;\n\n/** Known values of {@link InputSchema} that the service accepts. */\nexport enum KnownInputSchema {\n  /** EventGridSchema */\n  EventGridSchema = \"EventGridSchema\",\n  /** CustomEventSchema */\n  CustomEventSchema = \"CustomEventSchema\",\n  /** CloudEventSchemaV10 */\n  CloudEventSchemaV10 = \"CloudEventSchemaV1_0\"\n}\n\n/**\n * Defines values for InputSchema. \\\n * {@link KnownInputSchema} can be used interchangeably with InputSchema,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **EventGridSchema** \\\n * **CustomEventSchema** \\\n * **CloudEventSchemaV1_0**\n */\nexport type InputSchema = string;\n\n/** Known values of {@link InputSchemaMappingType} that the service accepts. */\nexport enum KnownInputSchemaMappingType {\n  /** Json */\n  Json = \"Json\"\n}\n\n/**\n * Defines values for InputSchemaMappingType. \\\n * {@link KnownInputSchemaMappingType} can be used interchangeably with InputSchemaMappingType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Json**\n */\nexport type InputSchemaMappingType = string;\n\n/** Known values of {@link PublicNetworkAccess} that the service accepts. */\nexport enum KnownPublicNetworkAccess {\n  /** Enabled */\n  Enabled = \"Enabled\",\n  /** Disabled */\n  Disabled = \"Disabled\"\n}\n\n/**\n * Defines values for PublicNetworkAccess. \\\n * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Enabled** \\\n * **Disabled**\n */\nexport type PublicNetworkAccess = string;\n\n/** Known values of {@link IpActionType} that the service accepts. */\nexport enum KnownIpActionType {\n  /** Allow */\n  Allow = \"Allow\"\n}\n\n/**\n * Defines values for IpActionType. \\\n * {@link KnownIpActionType} can be used interchangeably with IpActionType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Allow**\n */\nexport type IpActionType = string;\n\n/** Known values of {@link DataResidencyBoundary} that the service accepts. */\nexport enum KnownDataResidencyBoundary {\n  /** WithinGeopair */\n  WithinGeopair = \"WithinGeopair\",\n  /** WithinRegion */\n  WithinRegion = \"WithinRegion\"\n}\n\n/**\n * Defines values for DataResidencyBoundary. \\\n * {@link KnownDataResidencyBoundary} can be used interchangeably with DataResidencyBoundary,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **WithinGeopair** \\\n * **WithinRegion**\n */\nexport type DataResidencyBoundary = string;\n\n/** Known values of {@link IdentityType} that the service accepts. */\nexport enum KnownIdentityType {\n  /** None */\n  None = \"None\",\n  /** SystemAssigned */\n  SystemAssigned = \"SystemAssigned\",\n  /** UserAssigned */\n  UserAssigned = \"UserAssigned\",\n  /** SystemAssignedUserAssigned */\n  SystemAssignedUserAssigned = \"SystemAssigned, UserAssigned\"\n}\n\n/**\n * Defines values for IdentityType. \\\n * {@link KnownIdentityType} can be used interchangeably with IdentityType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **None** \\\n * **SystemAssigned** \\\n * **UserAssigned** \\\n * **SystemAssigned, UserAssigned**\n */\nexport type IdentityType = string;\n\n/** Known values of {@link DomainTopicProvisioningState} that the service accepts. */\nexport enum KnownDomainTopicProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\"\n}\n\n/**\n * Defines values for DomainTopicProvisioningState. \\\n * {@link KnownDomainTopicProvisioningState} can be used interchangeably with DomainTopicProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed**\n */\nexport type DomainTopicProvisioningState = string;\n\n/** Known values of {@link DeliveryAttributeMappingType} that the service accepts. */\nexport enum KnownDeliveryAttributeMappingType {\n  /** Static */\n  Static = \"Static\",\n  /** Dynamic */\n  Dynamic = \"Dynamic\"\n}\n\n/**\n * Defines values for DeliveryAttributeMappingType. \\\n * {@link KnownDeliveryAttributeMappingType} can be used interchangeably with DeliveryAttributeMappingType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Static** \\\n * **Dynamic**\n */\nexport type DeliveryAttributeMappingType = string;\n\n/** Known values of {@link EventSubscriptionProvisioningState} that the service accepts. */\nexport enum KnownEventSubscriptionProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\",\n  /** AwaitingManualAction */\n  AwaitingManualAction = \"AwaitingManualAction\"\n}\n\n/**\n * Defines values for EventSubscriptionProvisioningState. \\\n * {@link KnownEventSubscriptionProvisioningState} can be used interchangeably with EventSubscriptionProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed** \\\n * **AwaitingManualAction**\n */\nexport type EventSubscriptionProvisioningState = string;\n\n/** Known values of {@link EndpointType} that the service accepts. */\nexport enum KnownEndpointType {\n  /** WebHook */\n  WebHook = \"WebHook\",\n  /** EventHub */\n  EventHub = \"EventHub\",\n  /** StorageQueue */\n  StorageQueue = \"StorageQueue\",\n  /** HybridConnection */\n  HybridConnection = \"HybridConnection\",\n  /** ServiceBusQueue */\n  ServiceBusQueue = \"ServiceBusQueue\",\n  /** ServiceBusTopic */\n  ServiceBusTopic = \"ServiceBusTopic\",\n  /** AzureFunction */\n  AzureFunction = \"AzureFunction\"\n}\n\n/**\n * Defines values for EndpointType. \\\n * {@link KnownEndpointType} can be used interchangeably with EndpointType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **WebHook** \\\n * **EventHub** \\\n * **StorageQueue** \\\n * **HybridConnection** \\\n * **ServiceBusQueue** \\\n * **ServiceBusTopic** \\\n * **AzureFunction**\n */\nexport type EndpointType = string;\n\n/** Known values of {@link EventSubscriptionIdentityType} that the service accepts. */\nexport enum KnownEventSubscriptionIdentityType {\n  /** SystemAssigned */\n  SystemAssigned = \"SystemAssigned\",\n  /** UserAssigned */\n  UserAssigned = \"UserAssigned\"\n}\n\n/**\n * Defines values for EventSubscriptionIdentityType. \\\n * {@link KnownEventSubscriptionIdentityType} can be used interchangeably with EventSubscriptionIdentityType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SystemAssigned** \\\n * **UserAssigned**\n */\nexport type EventSubscriptionIdentityType = string;\n\n/** Known values of {@link AdvancedFilterOperatorType} that the service accepts. */\nexport enum KnownAdvancedFilterOperatorType {\n  /** NumberIn */\n  NumberIn = \"NumberIn\",\n  /** NumberNotIn */\n  NumberNotIn = \"NumberNotIn\",\n  /** NumberLessThan */\n  NumberLessThan = \"NumberLessThan\",\n  /** NumberGreaterThan */\n  NumberGreaterThan = \"NumberGreaterThan\",\n  /** NumberLessThanOrEquals */\n  NumberLessThanOrEquals = \"NumberLessThanOrEquals\",\n  /** NumberGreaterThanOrEquals */\n  NumberGreaterThanOrEquals = \"NumberGreaterThanOrEquals\",\n  /** BoolEquals */\n  BoolEquals = \"BoolEquals\",\n  /** StringIn */\n  StringIn = \"StringIn\",\n  /** StringNotIn */\n  StringNotIn = \"StringNotIn\",\n  /** StringBeginsWith */\n  StringBeginsWith = \"StringBeginsWith\",\n  /** StringEndsWith */\n  StringEndsWith = \"StringEndsWith\",\n  /** StringContains */\n  StringContains = \"StringContains\",\n  /** NumberInRange */\n  NumberInRange = \"NumberInRange\",\n  /** NumberNotInRange */\n  NumberNotInRange = \"NumberNotInRange\",\n  /** StringNotBeginsWith */\n  StringNotBeginsWith = \"StringNotBeginsWith\",\n  /** StringNotEndsWith */\n  StringNotEndsWith = \"StringNotEndsWith\",\n  /** StringNotContains */\n  StringNotContains = \"StringNotContains\",\n  /** IsNullOrUndefined */\n  IsNullOrUndefined = \"IsNullOrUndefined\",\n  /** IsNotNull */\n  IsNotNull = \"IsNotNull\"\n}\n\n/**\n * Defines values for AdvancedFilterOperatorType. \\\n * {@link KnownAdvancedFilterOperatorType} can be used interchangeably with AdvancedFilterOperatorType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **NumberIn** \\\n * **NumberNotIn** \\\n * **NumberLessThan** \\\n * **NumberGreaterThan** \\\n * **NumberLessThanOrEquals** \\\n * **NumberGreaterThanOrEquals** \\\n * **BoolEquals** \\\n * **StringIn** \\\n * **StringNotIn** \\\n * **StringBeginsWith** \\\n * **StringEndsWith** \\\n * **StringContains** \\\n * **NumberInRange** \\\n * **NumberNotInRange** \\\n * **StringNotBeginsWith** \\\n * **StringNotEndsWith** \\\n * **StringNotContains** \\\n * **IsNullOrUndefined** \\\n * **IsNotNull**\n */\nexport type AdvancedFilterOperatorType = string;\n\n/** Known values of {@link EventDeliverySchema} that the service accepts. */\nexport enum KnownEventDeliverySchema {\n  /** EventGridSchema */\n  EventGridSchema = \"EventGridSchema\",\n  /** CustomInputSchema */\n  CustomInputSchema = \"CustomInputSchema\",\n  /** CloudEventSchemaV10 */\n  CloudEventSchemaV10 = \"CloudEventSchemaV1_0\"\n}\n\n/**\n * Defines values for EventDeliverySchema. \\\n * {@link KnownEventDeliverySchema} can be used interchangeably with EventDeliverySchema,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **EventGridSchema** \\\n * **CustomInputSchema** \\\n * **CloudEventSchemaV1_0**\n */\nexport type EventDeliverySchema = string;\n\n/** Known values of {@link DeadLetterEndPointType} that the service accepts. */\nexport enum KnownDeadLetterEndPointType {\n  /** StorageBlob */\n  StorageBlob = \"StorageBlob\"\n}\n\n/**\n * Defines values for DeadLetterEndPointType. \\\n * {@link KnownDeadLetterEndPointType} can be used interchangeably with DeadLetterEndPointType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **StorageBlob**\n */\nexport type DeadLetterEndPointType = string;\n\n/** Known values of {@link TopicProvisioningState} that the service accepts. */\nexport enum KnownTopicProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\"\n}\n\n/**\n * Defines values for TopicProvisioningState. \\\n * {@link KnownTopicProvisioningState} can be used interchangeably with TopicProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed**\n */\nexport type TopicProvisioningState = string;\n\n/** Known values of {@link PartnerConfigurationProvisioningState} that the service accepts. */\nexport enum KnownPartnerConfigurationProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\"\n}\n\n/**\n * Defines values for PartnerConfigurationProvisioningState. \\\n * {@link KnownPartnerConfigurationProvisioningState} can be used interchangeably with PartnerConfigurationProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed**\n */\nexport type PartnerConfigurationProvisioningState = string;\n\n/** Known values of {@link PartnerNamespaceProvisioningState} that the service accepts. */\nexport enum KnownPartnerNamespaceProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\"\n}\n\n/**\n * Defines values for PartnerNamespaceProvisioningState. \\\n * {@link KnownPartnerNamespaceProvisioningState} can be used interchangeably with PartnerNamespaceProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed**\n */\nexport type PartnerNamespaceProvisioningState = string;\n\n/** Known values of {@link PartnerTopicRoutingMode} that the service accepts. */\nexport enum KnownPartnerTopicRoutingMode {\n  /** SourceEventAttribute */\n  SourceEventAttribute = \"SourceEventAttribute\",\n  /** ChannelNameHeader */\n  ChannelNameHeader = \"ChannelNameHeader\"\n}\n\n/**\n * Defines values for PartnerTopicRoutingMode. \\\n * {@link KnownPartnerTopicRoutingMode} can be used interchangeably with PartnerTopicRoutingMode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SourceEventAttribute** \\\n * **ChannelNameHeader**\n */\nexport type PartnerTopicRoutingMode = string;\n\n/** Known values of {@link PartnerRegistrationProvisioningState} that the service accepts. */\nexport enum KnownPartnerRegistrationProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\"\n}\n\n/**\n * Defines values for PartnerRegistrationProvisioningState. \\\n * {@link KnownPartnerRegistrationProvisioningState} can be used interchangeably with PartnerRegistrationProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed**\n */\nexport type PartnerRegistrationProvisioningState = string;\n\n/** Known values of {@link PartnerTopicProvisioningState} that the service accepts. */\nexport enum KnownPartnerTopicProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\",\n  /** IdleDueToMirroredChannelResourceDeletion */\n  IdleDueToMirroredChannelResourceDeletion = \"IdleDueToMirroredChannelResourceDeletion\"\n}\n\n/**\n * Defines values for PartnerTopicProvisioningState. \\\n * {@link KnownPartnerTopicProvisioningState} can be used interchangeably with PartnerTopicProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed** \\\n * **IdleDueToMirroredChannelResourceDeletion**\n */\nexport type PartnerTopicProvisioningState = string;\n\n/** Known values of {@link PartnerTopicActivationState} that the service accepts. */\nexport enum KnownPartnerTopicActivationState {\n  /** NeverActivated */\n  NeverActivated = \"NeverActivated\",\n  /** Activated */\n  Activated = \"Activated\",\n  /** Deactivated */\n  Deactivated = \"Deactivated\"\n}\n\n/**\n * Defines values for PartnerTopicActivationState. \\\n * {@link KnownPartnerTopicActivationState} can be used interchangeably with PartnerTopicActivationState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **NeverActivated** \\\n * **Activated** \\\n * **Deactivated**\n */\nexport type PartnerTopicActivationState = string;\n\n/** Known values of {@link PrivateEndpointConnectionsParentType} that the service accepts. */\nexport enum KnownPrivateEndpointConnectionsParentType {\n  /** Topics */\n  Topics = \"topics\",\n  /** Domains */\n  Domains = \"domains\",\n  /** PartnerNamespaces */\n  PartnerNamespaces = \"partnerNamespaces\"\n}\n\n/**\n * Defines values for PrivateEndpointConnectionsParentType. \\\n * {@link KnownPrivateEndpointConnectionsParentType} can be used interchangeably with PrivateEndpointConnectionsParentType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **topics** \\\n * **domains** \\\n * **partnerNamespaces**\n */\nexport type PrivateEndpointConnectionsParentType = string;\n\n/** Known values of {@link ResourceRegionType} that the service accepts. */\nexport enum KnownResourceRegionType {\n  /** RegionalResource */\n  RegionalResource = \"RegionalResource\",\n  /** GlobalResource */\n  GlobalResource = \"GlobalResource\"\n}\n\n/**\n * Defines values for ResourceRegionType. \\\n * {@link KnownResourceRegionType} can be used interchangeably with ResourceRegionType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **RegionalResource** \\\n * **GlobalResource**\n */\nexport type ResourceRegionType = string;\n\n/** Known values of {@link TopicTypeProvisioningState} that the service accepts. */\nexport enum KnownTopicTypeProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\"\n}\n\n/**\n * Defines values for TopicTypeProvisioningState. \\\n * {@link KnownTopicTypeProvisioningState} can be used interchangeably with TopicTypeProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed**\n */\nexport type TopicTypeProvisioningState = string;\n\n/** Known values of {@link TopicTypeSourceScope} that the service accepts. */\nexport enum KnownTopicTypeSourceScope {\n  /** Resource */\n  Resource = \"Resource\",\n  /** ResourceGroup */\n  ResourceGroup = \"ResourceGroup\",\n  /** AzureSubscription */\n  AzureSubscription = \"AzureSubscription\",\n  /** ManagementGroup */\n  ManagementGroup = \"ManagementGroup\"\n}\n\n/**\n * Defines values for TopicTypeSourceScope. \\\n * {@link KnownTopicTypeSourceScope} can be used interchangeably with TopicTypeSourceScope,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Resource** \\\n * **ResourceGroup** \\\n * **AzureSubscription** \\\n * **ManagementGroup**\n */\nexport type TopicTypeSourceScope = string;\n\n/** Known values of {@link VerifiedPartnerProvisioningState} that the service accepts. */\nexport enum KnownVerifiedPartnerProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Failed */\n  Failed = \"Failed\"\n}\n\n/**\n * Defines values for VerifiedPartnerProvisioningState. \\\n * {@link KnownVerifiedPartnerProvisioningState} can be used interchangeably with VerifiedPartnerProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Canceled** \\\n * **Failed**\n */\nexport type VerifiedPartnerProvisioningState = string;\n\n/** Optional parameters. */\nexport interface ChannelsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type ChannelsGetResponse = Channel;\n\n/** Optional parameters. */\nexport interface ChannelsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type ChannelsCreateOrUpdateResponse = Channel;\n\n/** Optional parameters. */\nexport interface ChannelsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface ChannelsUpdateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface ChannelsListByPartnerNamespaceOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByPartnerNamespace operation. */\nexport type ChannelsListByPartnerNamespaceResponse = ChannelsListResult;\n\n/** Optional parameters. */\nexport interface ChannelsGetFullUrlOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getFullUrl operation. */\nexport type ChannelsGetFullUrlResponse = EventSubscriptionFullUrl;\n\n/** Optional parameters. */\nexport interface ChannelsListByPartnerNamespaceNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByPartnerNamespaceNext operation. */\nexport type ChannelsListByPartnerNamespaceNextResponse = ChannelsListResult;\n\n/** Optional parameters. */\nexport interface DomainsGetOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type DomainsGetResponse = Domain;\n\n/** Optional parameters. */\nexport interface DomainsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type DomainsCreateOrUpdateResponse = Domain;\n\n/** Optional parameters. */\nexport interface DomainsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface DomainsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface DomainsListBySubscriptionOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listBySubscription operation. */\nexport type DomainsListBySubscriptionResponse = DomainsListResult;\n\n/** Optional parameters. */\nexport interface DomainsListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type DomainsListByResourceGroupResponse = DomainsListResult;\n\n/** Optional parameters. */\nexport interface DomainsListSharedAccessKeysOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listSharedAccessKeys operation. */\nexport type DomainsListSharedAccessKeysResponse = DomainSharedAccessKeys;\n\n/** Optional parameters. */\nexport interface DomainsRegenerateKeyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the regenerateKey operation. */\nexport type DomainsRegenerateKeyResponse = DomainSharedAccessKeys;\n\n/** Optional parameters. */\nexport interface DomainsListBySubscriptionNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBySubscriptionNext operation. */\nexport type DomainsListBySubscriptionNextResponse = DomainsListResult;\n\n/** Optional parameters. */\nexport interface DomainsListByResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroupNext operation. */\nexport type DomainsListByResourceGroupNextResponse = DomainsListResult;\n\n/** Optional parameters. */\nexport interface DomainTopicsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type DomainTopicsGetResponse = DomainTopic;\n\n/** Optional parameters. */\nexport interface DomainTopicsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type DomainTopicsCreateOrUpdateResponse = DomainTopic;\n\n/** Optional parameters. */\nexport interface DomainTopicsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface DomainTopicsListByDomainOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByDomain operation. */\nexport type DomainTopicsListByDomainResponse = DomainTopicsListResult;\n\n/** Optional parameters. */\nexport interface DomainTopicsListByDomainNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByDomainNext operation. */\nexport type DomainTopicsListByDomainNextResponse = DomainTopicsListResult;\n\n/** Optional parameters. */\nexport interface TopicEventSubscriptionsGetDeliveryAttributesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getDeliveryAttributes operation. */\nexport type TopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;\n\n/** Optional parameters. */\nexport interface TopicEventSubscriptionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type TopicEventSubscriptionsGetResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface TopicEventSubscriptionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type TopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface TopicEventSubscriptionsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface TopicEventSubscriptionsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type TopicEventSubscriptionsUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface TopicEventSubscriptionsGetFullUrlOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getFullUrl operation. */\nexport type TopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;\n\n/** Optional parameters. */\nexport interface TopicEventSubscriptionsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the list operation. */\nexport type TopicEventSubscriptionsListResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface TopicEventSubscriptionsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type TopicEventSubscriptionsListNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface DomainEventSubscriptionsGetDeliveryAttributesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getDeliveryAttributes operation. */\nexport type DomainEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;\n\n/** Optional parameters. */\nexport interface DomainEventSubscriptionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type DomainEventSubscriptionsGetResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface DomainEventSubscriptionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type DomainEventSubscriptionsCreateOrUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface DomainEventSubscriptionsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface DomainEventSubscriptionsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type DomainEventSubscriptionsUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface DomainEventSubscriptionsGetFullUrlOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getFullUrl operation. */\nexport type DomainEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;\n\n/** Optional parameters. */\nexport interface DomainEventSubscriptionsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the list operation. */\nexport type DomainEventSubscriptionsListResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface DomainEventSubscriptionsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type DomainEventSubscriptionsListNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type EventSubscriptionsGetResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type EventSubscriptionsCreateOrUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface EventSubscriptionsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type EventSubscriptionsUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsGetFullUrlOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getFullUrl operation. */\nexport type EventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListGlobalBySubscriptionOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listGlobalBySubscription operation. */\nexport type EventSubscriptionsListGlobalBySubscriptionResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listGlobalBySubscriptionForTopicType operation. */\nexport type EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListGlobalByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listGlobalByResourceGroup operation. */\nexport type EventSubscriptionsListGlobalByResourceGroupResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listGlobalByResourceGroupForTopicType operation. */\nexport type EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListRegionalBySubscriptionOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listRegionalBySubscription operation. */\nexport type EventSubscriptionsListRegionalBySubscriptionResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListRegionalByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listRegionalByResourceGroup operation. */\nexport type EventSubscriptionsListRegionalByResourceGroupResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listRegionalBySubscriptionForTopicType operation. */\nexport type EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listRegionalByResourceGroupForTopicType operation. */\nexport type EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListByResourceOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByResource operation. */\nexport type EventSubscriptionsListByResourceResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListByDomainTopicOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByDomainTopic operation. */\nexport type EventSubscriptionsListByDomainTopicResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsGetDeliveryAttributesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getDeliveryAttributes operation. */\nexport type EventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListGlobalBySubscriptionNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listGlobalBySubscriptionNext operation. */\nexport type EventSubscriptionsListGlobalBySubscriptionNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listGlobalBySubscriptionForTopicTypeNext operation. */\nexport type EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListGlobalByResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listGlobalByResourceGroupNext operation. */\nexport type EventSubscriptionsListGlobalByResourceGroupNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listGlobalByResourceGroupForTopicTypeNext operation. */\nexport type EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListRegionalBySubscriptionNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listRegionalBySubscriptionNext operation. */\nexport type EventSubscriptionsListRegionalBySubscriptionNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListRegionalByResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listRegionalByResourceGroupNext operation. */\nexport type EventSubscriptionsListRegionalByResourceGroupNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listRegionalBySubscriptionForTopicTypeNext operation. */\nexport type EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listRegionalByResourceGroupForTopicTypeNext operation. */\nexport type EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListByResourceNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceNext operation. */\nexport type EventSubscriptionsListByResourceNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface EventSubscriptionsListByDomainTopicNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByDomainTopicNext operation. */\nexport type EventSubscriptionsListByDomainTopicNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface DomainTopicEventSubscriptionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type DomainTopicEventSubscriptionsGetResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type DomainTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface DomainTopicEventSubscriptionsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface DomainTopicEventSubscriptionsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type DomainTopicEventSubscriptionsUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface DomainTopicEventSubscriptionsGetFullUrlOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getFullUrl operation. */\nexport type DomainTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;\n\n/** Optional parameters. */\nexport interface DomainTopicEventSubscriptionsListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the list operation. */\nexport type DomainTopicEventSubscriptionsListResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface DomainTopicEventSubscriptionsGetDeliveryAttributesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getDeliveryAttributes operation. */\nexport type DomainTopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;\n\n/** Optional parameters. */\nexport interface DomainTopicEventSubscriptionsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type DomainTopicEventSubscriptionsListNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface SystemTopicEventSubscriptionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type SystemTopicEventSubscriptionsGetResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface SystemTopicEventSubscriptionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type SystemTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface SystemTopicEventSubscriptionsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface SystemTopicEventSubscriptionsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type SystemTopicEventSubscriptionsUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface SystemTopicEventSubscriptionsGetFullUrlOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getFullUrl operation. */\nexport type SystemTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;\n\n/** Optional parameters. */\nexport interface SystemTopicEventSubscriptionsListBySystemTopicOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listBySystemTopic operation. */\nexport type SystemTopicEventSubscriptionsListBySystemTopicResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface SystemTopicEventSubscriptionsGetDeliveryAttributesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getDeliveryAttributes operation. */\nexport type SystemTopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;\n\n/** Optional parameters. */\nexport interface SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBySystemTopicNext operation. */\nexport type SystemTopicEventSubscriptionsListBySystemTopicNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface PartnerTopicEventSubscriptionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PartnerTopicEventSubscriptionsGetResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface PartnerTopicEventSubscriptionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type PartnerTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface PartnerTopicEventSubscriptionsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PartnerTopicEventSubscriptionsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type PartnerTopicEventSubscriptionsUpdateResponse = EventSubscription;\n\n/** Optional parameters. */\nexport interface PartnerTopicEventSubscriptionsGetFullUrlOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getFullUrl operation. */\nexport type PartnerTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;\n\n/** Optional parameters. */\nexport interface PartnerTopicEventSubscriptionsListByPartnerTopicOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByPartnerTopic operation. */\nexport type PartnerTopicEventSubscriptionsListByPartnerTopicResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface PartnerTopicEventSubscriptionsGetDeliveryAttributesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getDeliveryAttributes operation. */\nexport type PartnerTopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;\n\n/** Optional parameters. */\nexport interface PartnerTopicEventSubscriptionsListByPartnerTopicNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByPartnerTopicNext operation. */\nexport type PartnerTopicEventSubscriptionsListByPartnerTopicNextResponse = EventSubscriptionsListResult;\n\n/** Optional parameters. */\nexport interface OperationsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type OperationsListResponse = OperationsListResult;\n\n/** Optional parameters. */\nexport interface TopicsGetOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type TopicsGetResponse = Topic;\n\n/** Optional parameters. */\nexport interface TopicsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type TopicsCreateOrUpdateResponse = Topic;\n\n/** Optional parameters. */\nexport interface TopicsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface TopicsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface TopicsListBySubscriptionOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listBySubscription operation. */\nexport type TopicsListBySubscriptionResponse = TopicsListResult;\n\n/** Optional parameters. */\nexport interface TopicsListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type TopicsListByResourceGroupResponse = TopicsListResult;\n\n/** Optional parameters. */\nexport interface TopicsListSharedAccessKeysOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listSharedAccessKeys operation. */\nexport type TopicsListSharedAccessKeysResponse = TopicSharedAccessKeys;\n\n/** Optional parameters. */\nexport interface TopicsRegenerateKeyOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the regenerateKey operation. */\nexport type TopicsRegenerateKeyResponse = TopicSharedAccessKeys;\n\n/** Optional parameters. */\nexport interface TopicsListEventTypesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listEventTypes operation. */\nexport type TopicsListEventTypesResponse = EventTypesListResult;\n\n/** Optional parameters. */\nexport interface TopicsListBySubscriptionNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBySubscriptionNext operation. */\nexport type TopicsListBySubscriptionNextResponse = TopicsListResult;\n\n/** Optional parameters. */\nexport interface TopicsListByResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroupNext operation. */\nexport type TopicsListByResourceGroupNextResponse = TopicsListResult;\n\n/** Optional parameters. */\nexport interface PartnerConfigurationsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PartnerConfigurationsGetResponse = PartnerConfiguration;\n\n/** Optional parameters. */\nexport interface PartnerConfigurationsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type PartnerConfigurationsCreateOrUpdateResponse = PartnerConfiguration;\n\n/** Optional parameters. */\nexport interface PartnerConfigurationsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PartnerConfigurationsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type PartnerConfigurationsUpdateResponse = PartnerConfiguration;\n\n/** Optional parameters. */\nexport interface PartnerConfigurationsListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type PartnerConfigurationsListByResourceGroupResponse = PartnerConfigurationsListResult;\n\n/** Optional parameters. */\nexport interface PartnerConfigurationsListBySubscriptionOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listBySubscription operation. */\nexport type PartnerConfigurationsListBySubscriptionResponse = PartnerConfigurationsListResult;\n\n/** Optional parameters. */\nexport interface PartnerConfigurationsAuthorizePartnerOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the authorizePartner operation. */\nexport type PartnerConfigurationsAuthorizePartnerResponse = PartnerConfiguration;\n\n/** Optional parameters. */\nexport interface PartnerConfigurationsUnauthorizePartnerOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the unauthorizePartner operation. */\nexport type PartnerConfigurationsUnauthorizePartnerResponse = PartnerConfiguration;\n\n/** Optional parameters. */\nexport interface PartnerConfigurationsListBySubscriptionNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBySubscriptionNext operation. */\nexport type PartnerConfigurationsListBySubscriptionNextResponse = PartnerConfigurationsListResult;\n\n/** Optional parameters. */\nexport interface PartnerNamespacesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PartnerNamespacesGetResponse = PartnerNamespace;\n\n/** Optional parameters. */\nexport interface PartnerNamespacesCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type PartnerNamespacesCreateOrUpdateResponse = PartnerNamespace;\n\n/** Optional parameters. */\nexport interface PartnerNamespacesDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PartnerNamespacesUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PartnerNamespacesListBySubscriptionOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listBySubscription operation. */\nexport type PartnerNamespacesListBySubscriptionResponse = PartnerNamespacesListResult;\n\n/** Optional parameters. */\nexport interface PartnerNamespacesListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type PartnerNamespacesListByResourceGroupResponse = PartnerNamespacesListResult;\n\n/** Optional parameters. */\nexport interface PartnerNamespacesListSharedAccessKeysOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listSharedAccessKeys operation. */\nexport type PartnerNamespacesListSharedAccessKeysResponse = PartnerNamespaceSharedAccessKeys;\n\n/** Optional parameters. */\nexport interface PartnerNamespacesRegenerateKeyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the regenerateKey operation. */\nexport type PartnerNamespacesRegenerateKeyResponse = PartnerNamespaceSharedAccessKeys;\n\n/** Optional parameters. */\nexport interface PartnerNamespacesListBySubscriptionNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBySubscriptionNext operation. */\nexport type PartnerNamespacesListBySubscriptionNextResponse = PartnerNamespacesListResult;\n\n/** Optional parameters. */\nexport interface PartnerNamespacesListByResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroupNext operation. */\nexport type PartnerNamespacesListByResourceGroupNextResponse = PartnerNamespacesListResult;\n\n/** Optional parameters. */\nexport interface PartnerRegistrationsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PartnerRegistrationsGetResponse = PartnerRegistration;\n\n/** Optional parameters. */\nexport interface PartnerRegistrationsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type PartnerRegistrationsCreateOrUpdateResponse = PartnerRegistration;\n\n/** Optional parameters. */\nexport interface PartnerRegistrationsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PartnerRegistrationsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PartnerRegistrationsListBySubscriptionOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listBySubscription operation. */\nexport type PartnerRegistrationsListBySubscriptionResponse = PartnerRegistrationsListResult;\n\n/** Optional parameters. */\nexport interface PartnerRegistrationsListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type PartnerRegistrationsListByResourceGroupResponse = PartnerRegistrationsListResult;\n\n/** Optional parameters. */\nexport interface PartnerRegistrationsListBySubscriptionNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBySubscriptionNext operation. */\nexport type PartnerRegistrationsListBySubscriptionNextResponse = PartnerRegistrationsListResult;\n\n/** Optional parameters. */\nexport interface PartnerRegistrationsListByResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroupNext operation. */\nexport type PartnerRegistrationsListByResourceGroupNextResponse = PartnerRegistrationsListResult;\n\n/** Optional parameters. */\nexport interface PartnerTopicsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PartnerTopicsGetResponse = PartnerTopic;\n\n/** Optional parameters. */\nexport interface PartnerTopicsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type PartnerTopicsCreateOrUpdateResponse = PartnerTopic;\n\n/** Optional parameters. */\nexport interface PartnerTopicsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PartnerTopicsUpdateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the update operation. */\nexport type PartnerTopicsUpdateResponse = PartnerTopic;\n\n/** Optional parameters. */\nexport interface PartnerTopicsListBySubscriptionOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listBySubscription operation. */\nexport type PartnerTopicsListBySubscriptionResponse = PartnerTopicsListResult;\n\n/** Optional parameters. */\nexport interface PartnerTopicsListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type PartnerTopicsListByResourceGroupResponse = PartnerTopicsListResult;\n\n/** Optional parameters. */\nexport interface PartnerTopicsActivateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the activate operation. */\nexport type PartnerTopicsActivateResponse = PartnerTopic;\n\n/** Optional parameters. */\nexport interface PartnerTopicsDeactivateOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the deactivate operation. */\nexport type PartnerTopicsDeactivateResponse = PartnerTopic;\n\n/** Optional parameters. */\nexport interface PartnerTopicsListBySubscriptionNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBySubscriptionNext operation. */\nexport type PartnerTopicsListBySubscriptionNextResponse = PartnerTopicsListResult;\n\n/** Optional parameters. */\nexport interface PartnerTopicsListByResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroupNext operation. */\nexport type PartnerTopicsListByResourceGroupNextResponse = PartnerTopicsListResult;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type PrivateEndpointConnectionsUpdateResponse = PrivateEndpointConnection;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsListByResourceOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByResource operation. */\nexport type PrivateEndpointConnectionsListByResourceResponse = PrivateEndpointConnectionListResult;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsListByResourceNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceNext operation. */\nexport type PrivateEndpointConnectionsListByResourceNextResponse = PrivateEndpointConnectionListResult;\n\n/** Optional parameters. */\nexport interface PrivateLinkResourcesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PrivateLinkResourcesGetResponse = PrivateLinkResource;\n\n/** Optional parameters. */\nexport interface PrivateLinkResourcesListByResourceOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByResource operation. */\nexport type PrivateLinkResourcesListByResourceResponse = PrivateLinkResourcesListResult;\n\n/** Optional parameters. */\nexport interface PrivateLinkResourcesListByResourceNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceNext operation. */\nexport type PrivateLinkResourcesListByResourceNextResponse = PrivateLinkResourcesListResult;\n\n/** Optional parameters. */\nexport interface SystemTopicsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type SystemTopicsGetResponse = SystemTopic;\n\n/** Optional parameters. */\nexport interface SystemTopicsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type SystemTopicsCreateOrUpdateResponse = SystemTopic;\n\n/** Optional parameters. */\nexport interface SystemTopicsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface SystemTopicsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type SystemTopicsUpdateResponse = SystemTopic;\n\n/** Optional parameters. */\nexport interface SystemTopicsListBySubscriptionOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listBySubscription operation. */\nexport type SystemTopicsListBySubscriptionResponse = SystemTopicsListResult;\n\n/** Optional parameters. */\nexport interface SystemTopicsListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type SystemTopicsListByResourceGroupResponse = SystemTopicsListResult;\n\n/** Optional parameters. */\nexport interface SystemTopicsListBySubscriptionNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listBySubscriptionNext operation. */\nexport type SystemTopicsListBySubscriptionNextResponse = SystemTopicsListResult;\n\n/** Optional parameters. */\nexport interface SystemTopicsListByResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroupNext operation. */\nexport type SystemTopicsListByResourceGroupNextResponse = SystemTopicsListResult;\n\n/** Optional parameters. */\nexport interface ExtensionTopicsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type ExtensionTopicsGetResponse = ExtensionTopic;\n\n/** Optional parameters. */\nexport interface TopicTypesListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type TopicTypesListResponse = TopicTypesListResult;\n\n/** Optional parameters. */\nexport interface TopicTypesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type TopicTypesGetResponse = TopicTypeInfo;\n\n/** Optional parameters. */\nexport interface TopicTypesListEventTypesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listEventTypes operation. */\nexport type TopicTypesListEventTypesResponse = EventTypesListResult;\n\n/** Optional parameters. */\nexport interface VerifiedPartnersGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type VerifiedPartnersGetResponse = VerifiedPartner;\n\n/** Optional parameters. */\nexport interface VerifiedPartnersListOptionalParams\n  extends coreClient.OperationOptions {\n  /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */\n  filter?: string;\n  /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */\n  top?: number;\n}\n\n/** Contains response data for the list operation. */\nexport type VerifiedPartnersListResponse = VerifiedPartnersListResult;\n\n/** Optional parameters. */\nexport interface VerifiedPartnersListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type VerifiedPartnersListNextResponse = VerifiedPartnersListResult;\n\n/** Optional parameters. */\nexport interface EventGridManagementClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** server parameter */\n  $host?: string;\n  /** Api Version */\n  apiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const PartnerTopicInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerTopicInfo\",\n    modelProperties: {\n      azureSubscriptionId: {\n        serializedName: \"azureSubscriptionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceGroupName: {\n        serializedName: \"resourceGroupName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eventTypeInfo: {\n        serializedName: \"eventTypeInfo\",\n        type: {\n          name: \"Composite\",\n          className: \"EventTypeInfo\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventTypeInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventTypeInfo\",\n    modelProperties: {\n      kind: {\n        serializedName: \"kind\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inlineEventTypes: {\n        serializedName: \"inlineEventTypes\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"InlineEventProperties\" }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const InlineEventProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InlineEventProperties\",\n    modelProperties: {\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      documentationUrl: {\n        serializedName: \"documentationUrl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSchemaUrl: {\n        serializedName: \"dataSchemaUrl\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SystemData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SystemData\",\n    modelProperties: {\n      createdBy: {\n        serializedName: \"createdBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdByType: {\n        serializedName: \"createdByType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdAt: {\n        serializedName: \"createdAt\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastModifiedBy: {\n        serializedName: \"lastModifiedBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModifiedByType: {\n        serializedName: \"lastModifiedByType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModifiedAt: {\n        serializedName: \"lastModifiedAt\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const Resource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Resource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelUpdateParameters\",\n    modelProperties: {\n      expirationTimeIfNotActivatedUtc: {\n        serializedName: \"properties.expirationTimeIfNotActivatedUtc\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      partnerTopicInfo: {\n        serializedName: \"properties.partnerTopicInfo\",\n        type: {\n          name: \"Composite\",\n          className: \"PartnerUpdateTopicInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerUpdateTopicInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerUpdateTopicInfo\",\n    modelProperties: {\n      eventTypeInfo: {\n        serializedName: \"eventTypeInfo\",\n        type: {\n          name: \"Composite\",\n          className: \"EventTypeInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const ChannelsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ChannelsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Channel\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventSubscriptionFullUrl: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventSubscriptionFullUrl\",\n    modelProperties: {\n      endpointUrl: {\n        serializedName: \"endpointUrl\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateEndpoint: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpoint\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ConnectionState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ConnectionState\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      actionsRequired: {\n        serializedName: \"actionsRequired\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const InputSchemaMapping: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InputSchemaMapping\",\n    uberParent: \"InputSchemaMapping\",\n    polymorphicDiscriminator: {\n      serializedName: \"inputSchemaMappingType\",\n      clientName: \"inputSchemaMappingType\"\n    },\n    modelProperties: {\n      inputSchemaMappingType: {\n        serializedName: \"inputSchemaMappingType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const InboundIpRule: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InboundIpRule\",\n    modelProperties: {\n      ipMask: {\n        serializedName: \"ipMask\",\n        type: {\n          name: \"String\"\n        }\n      },\n      action: {\n        serializedName: \"action\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IdentityInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IdentityInfo\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      principalId: {\n        serializedName: \"principalId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tenantId: {\n        serializedName: \"tenantId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      userAssignedIdentities: {\n        serializedName: \"userAssignedIdentities\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"UserIdentityProperties\" }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const UserIdentityProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UserIdentityProperties\",\n    modelProperties: {\n      principalId: {\n        serializedName: \"principalId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientId: {\n        serializedName: \"clientId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DomainUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DomainUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityInfo\"\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inboundIpRules: {\n        serializedName: \"properties.inboundIpRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"InboundIpRule\"\n            }\n          }\n        }\n      },\n      disableLocalAuth: {\n        serializedName: \"properties.disableLocalAuth\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      autoCreateTopicWithFirstSubscription: {\n        serializedName: \"properties.autoCreateTopicWithFirstSubscription\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      autoDeleteTopicWithLastSubscription: {\n        serializedName: \"properties.autoDeleteTopicWithLastSubscription\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      dataResidencyBoundary: {\n        serializedName: \"properties.dataResidencyBoundary\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DomainsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DomainsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Domain\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DomainSharedAccessKeys: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DomainSharedAccessKeys\",\n    modelProperties: {\n      key1: {\n        serializedName: \"key1\",\n        type: {\n          name: \"String\"\n        }\n      },\n      key2: {\n        serializedName: \"key2\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DomainRegenerateKeyRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DomainRegenerateKeyRequest\",\n    modelProperties: {\n      keyName: {\n        serializedName: \"keyName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DomainTopicsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DomainTopicsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DomainTopic\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeliveryAttributeListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DeliveryAttributeListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeliveryAttributeMapping\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DeliveryAttributeMapping: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DeliveryAttributeMapping\",\n    uberParent: \"DeliveryAttributeMapping\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventSubscriptionDestination: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventSubscriptionDestination\",\n    uberParent: \"EventSubscriptionDestination\",\n    polymorphicDiscriminator: {\n      serializedName: \"endpointType\",\n      clientName: \"endpointType\"\n    },\n    modelProperties: {\n      endpointType: {\n        serializedName: \"endpointType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeliveryWithResourceIdentity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DeliveryWithResourceIdentity\",\n    modelProperties: {\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"EventSubscriptionIdentity\"\n        }\n      },\n      destination: {\n        serializedName: \"destination\",\n        type: {\n          name: \"Composite\",\n          className: \"EventSubscriptionDestination\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventSubscriptionIdentity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventSubscriptionIdentity\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      userAssignedIdentity: {\n        serializedName: \"userAssignedIdentity\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventSubscriptionFilter: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventSubscriptionFilter\",\n    modelProperties: {\n      subjectBeginsWith: {\n        serializedName: \"subjectBeginsWith\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subjectEndsWith: {\n        serializedName: \"subjectEndsWith\",\n        type: {\n          name: \"String\"\n        }\n      },\n      includedEventTypes: {\n        serializedName: \"includedEventTypes\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      isSubjectCaseSensitive: {\n        defaultValue: false,\n        serializedName: \"isSubjectCaseSensitive\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      enableAdvancedFilteringOnArrays: {\n        serializedName: \"enableAdvancedFilteringOnArrays\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      advancedFilters: {\n        serializedName: \"advancedFilters\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AdvancedFilter\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AdvancedFilter: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: {\n      serializedName: \"operatorType\",\n      clientName: \"operatorType\"\n    },\n    modelProperties: {\n      operatorType: {\n        serializedName: \"operatorType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      key: {\n        serializedName: \"key\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RetryPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RetryPolicy\",\n    modelProperties: {\n      maxDeliveryAttempts: {\n        defaultValue: 30,\n        serializedName: \"maxDeliveryAttempts\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      eventTimeToLiveInMinutes: {\n        defaultValue: 1440,\n        serializedName: \"eventTimeToLiveInMinutes\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeadLetterDestination: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DeadLetterDestination\",\n    uberParent: \"DeadLetterDestination\",\n    polymorphicDiscriminator: {\n      serializedName: \"endpointType\",\n      clientName: \"endpointType\"\n    },\n    modelProperties: {\n      endpointType: {\n        serializedName: \"endpointType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DeadLetterWithResourceIdentity: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DeadLetterWithResourceIdentity\",\n    modelProperties: {\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"EventSubscriptionIdentity\"\n        }\n      },\n      deadLetterDestination: {\n        serializedName: \"deadLetterDestination\",\n        type: {\n          name: \"Composite\",\n          className: \"DeadLetterDestination\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventSubscriptionUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventSubscriptionUpdateParameters\",\n    modelProperties: {\n      destination: {\n        serializedName: \"destination\",\n        type: {\n          name: \"Composite\",\n          className: \"EventSubscriptionDestination\"\n        }\n      },\n      deliveryWithResourceIdentity: {\n        serializedName: \"deliveryWithResourceIdentity\",\n        type: {\n          name: \"Composite\",\n          className: \"DeliveryWithResourceIdentity\"\n        }\n      },\n      filter: {\n        serializedName: \"filter\",\n        type: {\n          name: \"Composite\",\n          className: \"EventSubscriptionFilter\"\n        }\n      },\n      labels: {\n        serializedName: \"labels\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      expirationTimeUtc: {\n        serializedName: \"expirationTimeUtc\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      eventDeliverySchema: {\n        serializedName: \"eventDeliverySchema\",\n        type: {\n          name: \"String\"\n        }\n      },\n      retryPolicy: {\n        serializedName: \"retryPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetryPolicy\"\n        }\n      },\n      deadLetterDestination: {\n        serializedName: \"deadLetterDestination\",\n        type: {\n          name: \"Composite\",\n          className: \"DeadLetterDestination\"\n        }\n      },\n      deadLetterWithResourceIdentity: {\n        serializedName: \"deadLetterWithResourceIdentity\",\n        type: {\n          name: \"Composite\",\n          className: \"DeadLetterWithResourceIdentity\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventSubscriptionsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventSubscriptionsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EventSubscription\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Operation\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Operation: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Operation\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      display: {\n        serializedName: \"display\",\n        type: {\n          name: \"Composite\",\n          className: \"OperationInfo\"\n        }\n      },\n      origin: {\n        serializedName: \"origin\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isDataAction: {\n        serializedName: \"isDataAction\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      properties: {\n        serializedName: \"properties\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"any\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const OperationInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationInfo\",\n    modelProperties: {\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"resource\",\n        type: {\n          name: \"String\"\n        }\n      },\n      operation: {\n        serializedName: \"operation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TopicUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TopicUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityInfo\"\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inboundIpRules: {\n        serializedName: \"properties.inboundIpRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"InboundIpRule\"\n            }\n          }\n        }\n      },\n      disableLocalAuth: {\n        serializedName: \"properties.disableLocalAuth\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      dataResidencyBoundary: {\n        serializedName: \"properties.dataResidencyBoundary\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TopicsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TopicsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Topic\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TopicSharedAccessKeys: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TopicSharedAccessKeys\",\n    modelProperties: {\n      key1: {\n        serializedName: \"key1\",\n        type: {\n          name: \"String\"\n        }\n      },\n      key2: {\n        serializedName: \"key2\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TopicRegenerateKeyRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TopicRegenerateKeyRequest\",\n    modelProperties: {\n      keyName: {\n        serializedName: \"keyName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerAuthorization: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerAuthorization\",\n    modelProperties: {\n      defaultMaximumExpirationTimeInDays: {\n        serializedName: \"defaultMaximumExpirationTimeInDays\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      authorizedPartnersList: {\n        serializedName: \"authorizedPartnersList\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Partner\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Partner: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Partner\",\n    modelProperties: {\n      partnerRegistrationImmutableId: {\n        serializedName: \"partnerRegistrationImmutableId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      partnerName: {\n        serializedName: \"partnerName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      authorizationExpirationTimeInUtc: {\n        serializedName: \"authorizationExpirationTimeInUtc\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerConfigurationUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerConfigurationUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      defaultMaximumExpirationTimeInDays: {\n        serializedName: \"properties.defaultMaximumExpirationTimeInDays\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerConfigurationsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerConfigurationsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PartnerConfiguration\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerNamespaceUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerNamespaceUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inboundIpRules: {\n        serializedName: \"properties.inboundIpRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"InboundIpRule\"\n            }\n          }\n        }\n      },\n      disableLocalAuth: {\n        serializedName: \"properties.disableLocalAuth\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerNamespacesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerNamespacesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PartnerNamespace\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerNamespaceSharedAccessKeys: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerNamespaceSharedAccessKeys\",\n    modelProperties: {\n      key1: {\n        serializedName: \"key1\",\n        type: {\n          name: \"String\"\n        }\n      },\n      key2: {\n        serializedName: \"key2\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerNamespaceRegenerateKeyRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerNamespaceRegenerateKeyRequest\",\n    modelProperties: {\n      keyName: {\n        serializedName: \"keyName\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerRegistrationUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerRegistrationUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerRegistrationsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerRegistrationsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PartnerRegistration\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerTopicUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerTopicUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerTopicsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerTopicsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PartnerTopic\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpointConnectionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateEndpointConnection\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateLinkResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateLinkResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      groupId: {\n        serializedName: \"properties.groupId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      displayName: {\n        serializedName: \"properties.displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requiredMembers: {\n        serializedName: \"properties.requiredMembers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      requiredZoneNames: {\n        serializedName: \"properties.requiredZoneNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateLinkResourcesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateLinkResourcesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateLinkResource\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SystemTopicUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SystemTopicUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const SystemTopicsListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SystemTopicsListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SystemTopic\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventTypesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventTypesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"EventType\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TopicTypesListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TopicTypesListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TopicTypeInfo\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerDetails: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerDetails\",\n    modelProperties: {\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      longDescription: {\n        serializedName: \"longDescription\",\n        type: {\n          name: \"String\"\n        }\n      },\n      setupUri: {\n        serializedName: \"setupUri\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const VerifiedPartnersListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"VerifiedPartnersListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"VerifiedPartner\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const JsonField: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JsonField\",\n    modelProperties: {\n      sourceField: {\n        serializedName: \"sourceField\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const JsonFieldWithDefault: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"JsonFieldWithDefault\",\n    modelProperties: {\n      sourceField: {\n        serializedName: \"sourceField\",\n        type: {\n          name: \"String\"\n        }\n      },\n      defaultValue: {\n        serializedName: \"defaultValue\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Channel: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Channel\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      channelType: {\n        serializedName: \"properties.channelType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      partnerTopicInfo: {\n        serializedName: \"properties.partnerTopicInfo\",\n        type: {\n          name: \"Composite\",\n          className: \"PartnerTopicInfo\"\n        }\n      },\n      messageForActivation: {\n        serializedName: \"properties.messageForActivation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      },\n      readinessState: {\n        serializedName: \"properties.readinessState\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expirationTimeIfNotActivatedUtc: {\n        serializedName: \"properties.expirationTimeIfNotActivatedUtc\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateEndpointConnection: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpointConnection\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      privateEndpoint: {\n        serializedName: \"properties.privateEndpoint\",\n        type: {\n          name: \"Composite\",\n          className: \"PrivateEndpoint\"\n        }\n      },\n      groupIds: {\n        serializedName: \"properties.groupIds\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      privateLinkServiceConnectionState: {\n        serializedName: \"properties.privateLinkServiceConnectionState\",\n        type: {\n          name: \"Composite\",\n          className: \"ConnectionState\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TrackedResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TrackedResource\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      location: {\n        serializedName: \"location\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const DomainTopic: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"DomainTopic\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventSubscription: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventSubscription\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      topic: {\n        serializedName: \"properties.topic\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      destination: {\n        serializedName: \"properties.destination\",\n        type: {\n          name: \"Composite\",\n          className: \"EventSubscriptionDestination\"\n        }\n      },\n      deliveryWithResourceIdentity: {\n        serializedName: \"properties.deliveryWithResourceIdentity\",\n        type: {\n          name: \"Composite\",\n          className: \"DeliveryWithResourceIdentity\"\n        }\n      },\n      filter: {\n        serializedName: \"properties.filter\",\n        type: {\n          name: \"Composite\",\n          className: \"EventSubscriptionFilter\"\n        }\n      },\n      labels: {\n        serializedName: \"properties.labels\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      expirationTimeUtc: {\n        serializedName: \"properties.expirationTimeUtc\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      eventDeliverySchema: {\n        serializedName: \"properties.eventDeliverySchema\",\n        type: {\n          name: \"String\"\n        }\n      },\n      retryPolicy: {\n        serializedName: \"properties.retryPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetryPolicy\"\n        }\n      },\n      deadLetterDestination: {\n        serializedName: \"properties.deadLetterDestination\",\n        type: {\n          name: \"Composite\",\n          className: \"DeadLetterDestination\"\n        }\n      },\n      deadLetterWithResourceIdentity: {\n        serializedName: \"properties.deadLetterWithResourceIdentity\",\n        type: {\n          name: \"Composite\",\n          className: \"DeadLetterWithResourceIdentity\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerConfiguration: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerConfiguration\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      partnerAuthorization: {\n        serializedName: \"properties.partnerAuthorization\",\n        type: {\n          name: \"Composite\",\n          className: \"PartnerAuthorization\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventType: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventType\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      displayName: {\n        serializedName: \"properties.displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"properties.description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      schemaUrl: {\n        serializedName: \"properties.schemaUrl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isInDefaultSet: {\n        serializedName: \"properties.isInDefaultSet\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExtensionTopic: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExtensionTopic\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      description: {\n        serializedName: \"properties.description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      systemTopic: {\n        serializedName: \"properties.systemTopic\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TopicTypeInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TopicTypeInfo\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      provider: {\n        serializedName: \"properties.provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      displayName: {\n        serializedName: \"properties.displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"properties.description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceRegionType: {\n        serializedName: \"properties.resourceRegionType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      },\n      supportedLocations: {\n        serializedName: \"properties.supportedLocations\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      sourceResourceFormat: {\n        serializedName: \"properties.sourceResourceFormat\",\n        type: {\n          name: \"String\"\n        }\n      },\n      supportedScopesForSource: {\n        serializedName: \"properties.supportedScopesForSource\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const VerifiedPartner: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"VerifiedPartner\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      partnerRegistrationImmutableId: {\n        serializedName: \"properties.partnerRegistrationImmutableId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      organizationName: {\n        serializedName: \"properties.organizationName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      partnerDisplayName: {\n        serializedName: \"properties.partnerDisplayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      partnerTopicDetails: {\n        serializedName: \"properties.partnerTopicDetails\",\n        type: {\n          name: \"Composite\",\n          className: \"PartnerDetails\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const JsonInputSchemaMapping: coreClient.CompositeMapper = {\n  serializedName: \"Json\",\n  type: {\n    name: \"Composite\",\n    className: \"JsonInputSchemaMapping\",\n    uberParent: \"InputSchemaMapping\",\n    polymorphicDiscriminator: InputSchemaMapping.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...InputSchemaMapping.type.modelProperties,\n      id: {\n        serializedName: \"properties.id\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonField\"\n        }\n      },\n      topic: {\n        serializedName: \"properties.topic\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonField\"\n        }\n      },\n      eventTime: {\n        serializedName: \"properties.eventTime\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonField\"\n        }\n      },\n      eventType: {\n        serializedName: \"properties.eventType\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonFieldWithDefault\"\n        }\n      },\n      subject: {\n        serializedName: \"properties.subject\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonFieldWithDefault\"\n        }\n      },\n      dataVersion: {\n        serializedName: \"properties.dataVersion\",\n        type: {\n          name: \"Composite\",\n          className: \"JsonFieldWithDefault\"\n        }\n      }\n    }\n  }\n};\n\nexport const StaticDeliveryAttributeMapping: coreClient.CompositeMapper = {\n  serializedName: \"Static\",\n  type: {\n    name: \"Composite\",\n    className: \"StaticDeliveryAttributeMapping\",\n    uberParent: \"DeliveryAttributeMapping\",\n    polymorphicDiscriminator:\n      DeliveryAttributeMapping.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...DeliveryAttributeMapping.type.modelProperties,\n      value: {\n        serializedName: \"properties.value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isSecret: {\n        defaultValue: false,\n        serializedName: \"properties.isSecret\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const DynamicDeliveryAttributeMapping: coreClient.CompositeMapper = {\n  serializedName: \"Dynamic\",\n  type: {\n    name: \"Composite\",\n    className: \"DynamicDeliveryAttributeMapping\",\n    uberParent: \"DeliveryAttributeMapping\",\n    polymorphicDiscriminator:\n      DeliveryAttributeMapping.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...DeliveryAttributeMapping.type.modelProperties,\n      sourceField: {\n        serializedName: \"properties.sourceField\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const WebHookEventSubscriptionDestination: coreClient.CompositeMapper = {\n  serializedName: \"WebHook\",\n  type: {\n    name: \"Composite\",\n    className: \"WebHookEventSubscriptionDestination\",\n    uberParent: \"EventSubscriptionDestination\",\n    polymorphicDiscriminator:\n      EventSubscriptionDestination.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...EventSubscriptionDestination.type.modelProperties,\n      endpointUrl: {\n        serializedName: \"properties.endpointUrl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      endpointBaseUrl: {\n        serializedName: \"properties.endpointBaseUrl\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      maxEventsPerBatch: {\n        defaultValue: 1,\n        serializedName: \"properties.maxEventsPerBatch\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      preferredBatchSizeInKilobytes: {\n        defaultValue: 64,\n        serializedName: \"properties.preferredBatchSizeInKilobytes\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      azureActiveDirectoryTenantId: {\n        serializedName: \"properties.azureActiveDirectoryTenantId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      azureActiveDirectoryApplicationIdOrUri: {\n        serializedName: \"properties.azureActiveDirectoryApplicationIdOrUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deliveryAttributeMappings: {\n        serializedName: \"properties.deliveryAttributeMappings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeliveryAttributeMapping\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EventHubEventSubscriptionDestination: coreClient.CompositeMapper = {\n  serializedName: \"EventHub\",\n  type: {\n    name: \"Composite\",\n    className: \"EventHubEventSubscriptionDestination\",\n    uberParent: \"EventSubscriptionDestination\",\n    polymorphicDiscriminator:\n      EventSubscriptionDestination.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...EventSubscriptionDestination.type.modelProperties,\n      resourceId: {\n        serializedName: \"properties.resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deliveryAttributeMappings: {\n        serializedName: \"properties.deliveryAttributeMappings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeliveryAttributeMapping\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StorageQueueEventSubscriptionDestination: coreClient.CompositeMapper = {\n  serializedName: \"StorageQueue\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageQueueEventSubscriptionDestination\",\n    uberParent: \"EventSubscriptionDestination\",\n    polymorphicDiscriminator:\n      EventSubscriptionDestination.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...EventSubscriptionDestination.type.modelProperties,\n      resourceId: {\n        serializedName: \"properties.resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queueName: {\n        serializedName: \"properties.queueName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      queueMessageTimeToLiveInSeconds: {\n        serializedName: \"properties.queueMessageTimeToLiveInSeconds\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const HybridConnectionEventSubscriptionDestination: coreClient.CompositeMapper = {\n  serializedName: \"HybridConnection\",\n  type: {\n    name: \"Composite\",\n    className: \"HybridConnectionEventSubscriptionDestination\",\n    uberParent: \"EventSubscriptionDestination\",\n    polymorphicDiscriminator:\n      EventSubscriptionDestination.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...EventSubscriptionDestination.type.modelProperties,\n      resourceId: {\n        serializedName: \"properties.resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deliveryAttributeMappings: {\n        serializedName: \"properties.deliveryAttributeMappings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeliveryAttributeMapping\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceBusQueueEventSubscriptionDestination: coreClient.CompositeMapper = {\n  serializedName: \"ServiceBusQueue\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceBusQueueEventSubscriptionDestination\",\n    uberParent: \"EventSubscriptionDestination\",\n    polymorphicDiscriminator:\n      EventSubscriptionDestination.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...EventSubscriptionDestination.type.modelProperties,\n      resourceId: {\n        serializedName: \"properties.resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deliveryAttributeMappings: {\n        serializedName: \"properties.deliveryAttributeMappings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeliveryAttributeMapping\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceBusTopicEventSubscriptionDestination: coreClient.CompositeMapper = {\n  serializedName: \"ServiceBusTopic\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceBusTopicEventSubscriptionDestination\",\n    uberParent: \"EventSubscriptionDestination\",\n    polymorphicDiscriminator:\n      EventSubscriptionDestination.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...EventSubscriptionDestination.type.modelProperties,\n      resourceId: {\n        serializedName: \"properties.resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deliveryAttributeMappings: {\n        serializedName: \"properties.deliveryAttributeMappings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeliveryAttributeMapping\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AzureFunctionEventSubscriptionDestination: coreClient.CompositeMapper = {\n  serializedName: \"AzureFunction\",\n  type: {\n    name: \"Composite\",\n    className: \"AzureFunctionEventSubscriptionDestination\",\n    uberParent: \"EventSubscriptionDestination\",\n    polymorphicDiscriminator:\n      EventSubscriptionDestination.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...EventSubscriptionDestination.type.modelProperties,\n      resourceId: {\n        serializedName: \"properties.resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxEventsPerBatch: {\n        defaultValue: 1,\n        serializedName: \"properties.maxEventsPerBatch\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      preferredBatchSizeInKilobytes: {\n        defaultValue: 64,\n        serializedName: \"properties.preferredBatchSizeInKilobytes\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      deliveryAttributeMappings: {\n        serializedName: \"properties.deliveryAttributeMappings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DeliveryAttributeMapping\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const NumberInAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"NumberIn\",\n  type: {\n    name: \"Composite\",\n    className: \"NumberInAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const NumberNotInAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"NumberNotIn\",\n  type: {\n    name: \"Composite\",\n    className: \"NumberNotInAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Number\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const NumberLessThanAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"NumberLessThan\",\n  type: {\n    name: \"Composite\",\n    className: \"NumberLessThanAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const NumberGreaterThanAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"NumberGreaterThan\",\n  type: {\n    name: \"Composite\",\n    className: \"NumberGreaterThanAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const NumberLessThanOrEqualsAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"NumberLessThanOrEquals\",\n  type: {\n    name: \"Composite\",\n    className: \"NumberLessThanOrEqualsAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const NumberGreaterThanOrEqualsAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"NumberGreaterThanOrEquals\",\n  type: {\n    name: \"Composite\",\n    className: \"NumberGreaterThanOrEqualsAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const BoolEqualsAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"BoolEquals\",\n  type: {\n    name: \"Composite\",\n    className: \"BoolEqualsAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const StringInAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"StringIn\",\n  type: {\n    name: \"Composite\",\n    className: \"StringInAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StringNotInAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"StringNotIn\",\n  type: {\n    name: \"Composite\",\n    className: \"StringNotInAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StringBeginsWithAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"StringBeginsWith\",\n  type: {\n    name: \"Composite\",\n    className: \"StringBeginsWithAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StringEndsWithAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"StringEndsWith\",\n  type: {\n    name: \"Composite\",\n    className: \"StringEndsWithAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StringContainsAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"StringContains\",\n  type: {\n    name: \"Composite\",\n    className: \"StringContainsAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const NumberInRangeAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"NumberInRange\",\n  type: {\n    name: \"Composite\",\n    className: \"NumberInRangeAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Sequence\",\n              element: {\n                type: {\n                  name: \"Number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const NumberNotInRangeAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"NumberNotInRange\",\n  type: {\n    name: \"Composite\",\n    className: \"NumberNotInRangeAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Sequence\",\n              element: {\n                type: {\n                  name: \"Number\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StringNotBeginsWithAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"StringNotBeginsWith\",\n  type: {\n    name: \"Composite\",\n    className: \"StringNotBeginsWithAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StringNotEndsWithAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"StringNotEndsWith\",\n  type: {\n    name: \"Composite\",\n    className: \"StringNotEndsWithAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const StringNotContainsAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"StringNotContains\",\n  type: {\n    name: \"Composite\",\n    className: \"StringNotContainsAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties,\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IsNullOrUndefinedAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"IsNullOrUndefined\",\n  type: {\n    name: \"Composite\",\n    className: \"IsNullOrUndefinedAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties\n    }\n  }\n};\n\nexport const IsNotNullAdvancedFilter: coreClient.CompositeMapper = {\n  serializedName: \"IsNotNull\",\n  type: {\n    name: \"Composite\",\n    className: \"IsNotNullAdvancedFilter\",\n    uberParent: \"AdvancedFilter\",\n    polymorphicDiscriminator: AdvancedFilter.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...AdvancedFilter.type.modelProperties\n    }\n  }\n};\n\nexport const StorageBlobDeadLetterDestination: coreClient.CompositeMapper = {\n  serializedName: \"StorageBlob\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageBlobDeadLetterDestination\",\n    uberParent: \"DeadLetterDestination\",\n    polymorphicDiscriminator:\n      DeadLetterDestination.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...DeadLetterDestination.type.modelProperties,\n      resourceId: {\n        serializedName: \"properties.resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobContainerName: {\n        serializedName: \"properties.blobContainerName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Domain: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Domain\",\n    modelProperties: {\n      ...TrackedResource.type.modelProperties,\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityInfo\"\n        }\n      },\n      privateEndpointConnections: {\n        serializedName: \"properties.privateEndpointConnections\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateEndpointConnection\"\n            }\n          }\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      endpoint: {\n        serializedName: \"properties.endpoint\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      inputSchema: {\n        serializedName: \"properties.inputSchema\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inputSchemaMapping: {\n        serializedName: \"properties.inputSchemaMapping\",\n        type: {\n          name: \"Composite\",\n          className: \"InputSchemaMapping\"\n        }\n      },\n      metricResourceId: {\n        serializedName: \"properties.metricResourceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inboundIpRules: {\n        serializedName: \"properties.inboundIpRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"InboundIpRule\"\n            }\n          }\n        }\n      },\n      disableLocalAuth: {\n        defaultValue: false,\n        serializedName: \"properties.disableLocalAuth\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      autoCreateTopicWithFirstSubscription: {\n        defaultValue: true,\n        serializedName: \"properties.autoCreateTopicWithFirstSubscription\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      autoDeleteTopicWithLastSubscription: {\n        defaultValue: true,\n        serializedName: \"properties.autoDeleteTopicWithLastSubscription\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      dataResidencyBoundary: {\n        serializedName: \"properties.dataResidencyBoundary\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Topic: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Topic\",\n    modelProperties: {\n      ...TrackedResource.type.modelProperties,\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityInfo\"\n        }\n      },\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      privateEndpointConnections: {\n        serializedName: \"properties.privateEndpointConnections\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateEndpointConnection\"\n            }\n          }\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      endpoint: {\n        serializedName: \"properties.endpoint\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      inputSchema: {\n        serializedName: \"properties.inputSchema\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inputSchemaMapping: {\n        serializedName: \"properties.inputSchemaMapping\",\n        type: {\n          name: \"Composite\",\n          className: \"InputSchemaMapping\"\n        }\n      },\n      metricResourceId: {\n        serializedName: \"properties.metricResourceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inboundIpRules: {\n        serializedName: \"properties.inboundIpRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"InboundIpRule\"\n            }\n          }\n        }\n      },\n      disableLocalAuth: {\n        defaultValue: false,\n        serializedName: \"properties.disableLocalAuth\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      dataResidencyBoundary: {\n        serializedName: \"properties.dataResidencyBoundary\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerNamespace: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerNamespace\",\n    modelProperties: {\n      ...TrackedResource.type.modelProperties,\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      privateEndpointConnections: {\n        serializedName: \"properties.privateEndpointConnections\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateEndpointConnection\"\n            }\n          }\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      partnerRegistrationFullyQualifiedId: {\n        serializedName: \"properties.partnerRegistrationFullyQualifiedId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      endpoint: {\n        serializedName: \"properties.endpoint\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      inboundIpRules: {\n        serializedName: \"properties.inboundIpRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"InboundIpRule\"\n            }\n          }\n        }\n      },\n      disableLocalAuth: {\n        defaultValue: false,\n        serializedName: \"properties.disableLocalAuth\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      partnerTopicRoutingMode: {\n        defaultValue: \"SourceEventAttribute\",\n        serializedName: \"properties.partnerTopicRoutingMode\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerRegistration: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerRegistration\",\n    modelProperties: {\n      ...TrackedResource.type.modelProperties,\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      partnerRegistrationImmutableId: {\n        serializedName: \"properties.partnerRegistrationImmutableId\",\n        type: {\n          name: \"Uuid\"\n        }\n      }\n    }\n  }\n};\n\nexport const PartnerTopic: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PartnerTopic\",\n    modelProperties: {\n      ...TrackedResource.type.modelProperties,\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityInfo\"\n        }\n      },\n      partnerRegistrationImmutableId: {\n        serializedName: \"properties.partnerRegistrationImmutableId\",\n        type: {\n          name: \"Uuid\"\n        }\n      },\n      source: {\n        serializedName: \"properties.source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eventTypeInfo: {\n        serializedName: \"properties.eventTypeInfo\",\n        type: {\n          name: \"Composite\",\n          className: \"EventTypeInfo\"\n        }\n      },\n      expirationTimeIfNotActivatedUtc: {\n        serializedName: \"properties.expirationTimeIfNotActivatedUtc\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      activationState: {\n        serializedName: \"properties.activationState\",\n        type: {\n          name: \"String\"\n        }\n      },\n      partnerTopicFriendlyDescription: {\n        serializedName: \"properties.partnerTopicFriendlyDescription\",\n        type: {\n          name: \"String\"\n        }\n      },\n      messageForActivation: {\n        serializedName: \"properties.messageForActivation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SystemTopic: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SystemTopic\",\n    modelProperties: {\n      ...TrackedResource.type.modelProperties,\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityInfo\"\n        }\n      },\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      source: {\n        serializedName: \"properties.source\",\n        type: {\n          name: \"String\"\n        }\n      },\n      topicType: {\n        serializedName: \"properties.topicType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      metricResourceId: {\n        serializedName: \"properties.metricResourceId\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  InputSchemaMapping: InputSchemaMapping,\n  DeliveryAttributeMapping: DeliveryAttributeMapping,\n  EventSubscriptionDestination: EventSubscriptionDestination,\n  AdvancedFilter: AdvancedFilter,\n  DeadLetterDestination: DeadLetterDestination,\n  \"InputSchemaMapping.Json\": JsonInputSchemaMapping,\n  \"DeliveryAttributeMapping.Static\": StaticDeliveryAttributeMapping,\n  \"DeliveryAttributeMapping.Dynamic\": DynamicDeliveryAttributeMapping,\n  \"EventSubscriptionDestination.WebHook\": WebHookEventSubscriptionDestination,\n  \"EventSubscriptionDestination.EventHub\": EventHubEventSubscriptionDestination,\n  \"EventSubscriptionDestination.StorageQueue\": StorageQueueEventSubscriptionDestination,\n  \"EventSubscriptionDestination.HybridConnection\": HybridConnectionEventSubscriptionDestination,\n  \"EventSubscriptionDestination.ServiceBusQueue\": ServiceBusQueueEventSubscriptionDestination,\n  \"EventSubscriptionDestination.ServiceBusTopic\": ServiceBusTopicEventSubscriptionDestination,\n  \"EventSubscriptionDestination.AzureFunction\": AzureFunctionEventSubscriptionDestination,\n  \"AdvancedFilter.NumberIn\": NumberInAdvancedFilter,\n  \"AdvancedFilter.NumberNotIn\": NumberNotInAdvancedFilter,\n  \"AdvancedFilter.NumberLessThan\": NumberLessThanAdvancedFilter,\n  \"AdvancedFilter.NumberGreaterThan\": NumberGreaterThanAdvancedFilter,\n  \"AdvancedFilter.NumberLessThanOrEquals\": NumberLessThanOrEqualsAdvancedFilter,\n  \"AdvancedFilter.NumberGreaterThanOrEquals\": NumberGreaterThanOrEqualsAdvancedFilter,\n  \"AdvancedFilter.BoolEquals\": BoolEqualsAdvancedFilter,\n  \"AdvancedFilter.StringIn\": StringInAdvancedFilter,\n  \"AdvancedFilter.StringNotIn\": StringNotInAdvancedFilter,\n  \"AdvancedFilter.StringBeginsWith\": StringBeginsWithAdvancedFilter,\n  \"AdvancedFilter.StringEndsWith\": StringEndsWithAdvancedFilter,\n  \"AdvancedFilter.StringContains\": StringContainsAdvancedFilter,\n  \"AdvancedFilter.NumberInRange\": NumberInRangeAdvancedFilter,\n  \"AdvancedFilter.NumberNotInRange\": NumberNotInRangeAdvancedFilter,\n  \"AdvancedFilter.StringNotBeginsWith\": StringNotBeginsWithAdvancedFilter,\n  \"AdvancedFilter.StringNotEndsWith\": StringNotEndsWithAdvancedFilter,\n  \"AdvancedFilter.StringNotContains\": StringNotContainsAdvancedFilter,\n  \"AdvancedFilter.IsNullOrUndefined\": IsNullOrUndefinedAdvancedFilter,\n  \"AdvancedFilter.IsNotNull\": IsNotNullAdvancedFilter,\n  \"DeadLetterDestination.StorageBlob\": StorageBlobDeadLetterDestination\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  Channel as ChannelMapper,\n  ChannelUpdateParameters as ChannelUpdateParametersMapper,\n  Domain as DomainMapper,\n  DomainUpdateParameters as DomainUpdateParametersMapper,\n  DomainRegenerateKeyRequest as DomainRegenerateKeyRequestMapper,\n  EventSubscription as EventSubscriptionMapper,\n  EventSubscriptionUpdateParameters as EventSubscriptionUpdateParametersMapper,\n  Topic as TopicMapper,\n  TopicUpdateParameters as TopicUpdateParametersMapper,\n  TopicRegenerateKeyRequest as TopicRegenerateKeyRequestMapper,\n  PartnerConfiguration as PartnerConfigurationMapper,\n  PartnerConfigurationUpdateParameters as PartnerConfigurationUpdateParametersMapper,\n  Partner as PartnerMapper,\n  PartnerNamespace as PartnerNamespaceMapper,\n  PartnerNamespaceUpdateParameters as PartnerNamespaceUpdateParametersMapper,\n  PartnerNamespaceRegenerateKeyRequest as PartnerNamespaceRegenerateKeyRequestMapper,\n  PartnerRegistration as PartnerRegistrationMapper,\n  PartnerRegistrationUpdateParameters as PartnerRegistrationUpdateParametersMapper,\n  PartnerTopic as PartnerTopicMapper,\n  PartnerTopicUpdateParameters as PartnerTopicUpdateParametersMapper,\n  PrivateEndpointConnection as PrivateEndpointConnectionMapper,\n  SystemTopic as SystemTopicMapper,\n  SystemTopicUpdateParameters as SystemTopicUpdateParametersMapper\n} from \"../models/mappers\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const subscriptionId: OperationURLParameter = {\n  parameterPath: \"subscriptionId\",\n  mapper: {\n    serializedName: \"subscriptionId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const resourceGroupName: OperationURLParameter = {\n  parameterPath: \"resourceGroupName\",\n  mapper: {\n    serializedName: \"resourceGroupName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const partnerNamespaceName: OperationURLParameter = {\n  parameterPath: \"partnerNamespaceName\",\n  mapper: {\n    serializedName: \"partnerNamespaceName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const channelName: OperationURLParameter = {\n  parameterPath: \"channelName\",\n  mapper: {\n    serializedName: \"channelName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2022-06-15\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const channelInfo: OperationParameter = {\n  parameterPath: \"channelInfo\",\n  mapper: ChannelMapper\n};\n\nexport const channelUpdateParameters: OperationParameter = {\n  parameterPath: \"channelUpdateParameters\",\n  mapper: ChannelUpdateParametersMapper\n};\n\nexport const filter: OperationQueryParameter = {\n  parameterPath: [\"options\", \"filter\"],\n  mapper: {\n    serializedName: \"$filter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const top: OperationQueryParameter = {\n  parameterPath: [\"options\", \"top\"],\n  mapper: {\n    serializedName: \"$top\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const domainName: OperationURLParameter = {\n  parameterPath: \"domainName\",\n  mapper: {\n    serializedName: \"domainName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const domainInfo: OperationParameter = {\n  parameterPath: \"domainInfo\",\n  mapper: DomainMapper\n};\n\nexport const domainUpdateParameters: OperationParameter = {\n  parameterPath: \"domainUpdateParameters\",\n  mapper: DomainUpdateParametersMapper\n};\n\nexport const regenerateKeyRequest: OperationParameter = {\n  parameterPath: \"regenerateKeyRequest\",\n  mapper: DomainRegenerateKeyRequestMapper\n};\n\nexport const domainTopicName: OperationURLParameter = {\n  parameterPath: \"domainTopicName\",\n  mapper: {\n    serializedName: \"domainTopicName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const topicName: OperationURLParameter = {\n  parameterPath: \"topicName\",\n  mapper: {\n    serializedName: \"topicName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const eventSubscriptionName: OperationURLParameter = {\n  parameterPath: \"eventSubscriptionName\",\n  mapper: {\n    serializedName: \"eventSubscriptionName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const eventSubscriptionInfo: OperationParameter = {\n  parameterPath: \"eventSubscriptionInfo\",\n  mapper: EventSubscriptionMapper\n};\n\nexport const eventSubscriptionUpdateParameters: OperationParameter = {\n  parameterPath: \"eventSubscriptionUpdateParameters\",\n  mapper: EventSubscriptionUpdateParametersMapper\n};\n\nexport const scope: OperationURLParameter = {\n  parameterPath: \"scope\",\n  mapper: {\n    serializedName: \"scope\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const topicTypeName: OperationURLParameter = {\n  parameterPath: \"topicTypeName\",\n  mapper: {\n    serializedName: \"topicTypeName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const location: OperationURLParameter = {\n  parameterPath: \"location\",\n  mapper: {\n    serializedName: \"location\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const providerNamespace: OperationURLParameter = {\n  parameterPath: \"providerNamespace\",\n  mapper: {\n    serializedName: \"providerNamespace\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const resourceTypeName: OperationURLParameter = {\n  parameterPath: \"resourceTypeName\",\n  mapper: {\n    serializedName: \"resourceTypeName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const resourceName: OperationURLParameter = {\n  parameterPath: \"resourceName\",\n  mapper: {\n    serializedName: \"resourceName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const systemTopicName: OperationURLParameter = {\n  parameterPath: \"systemTopicName\",\n  mapper: {\n    serializedName: \"systemTopicName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const partnerTopicName: OperationURLParameter = {\n  parameterPath: \"partnerTopicName\",\n  mapper: {\n    serializedName: \"partnerTopicName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const topicInfo: OperationParameter = {\n  parameterPath: \"topicInfo\",\n  mapper: TopicMapper\n};\n\nexport const topicUpdateParameters: OperationParameter = {\n  parameterPath: \"topicUpdateParameters\",\n  mapper: TopicUpdateParametersMapper\n};\n\nexport const regenerateKeyRequest1: OperationParameter = {\n  parameterPath: \"regenerateKeyRequest\",\n  mapper: TopicRegenerateKeyRequestMapper\n};\n\nexport const partnerConfigurationInfo: OperationParameter = {\n  parameterPath: \"partnerConfigurationInfo\",\n  mapper: PartnerConfigurationMapper\n};\n\nexport const partnerConfigurationUpdateParameters: OperationParameter = {\n  parameterPath: \"partnerConfigurationUpdateParameters\",\n  mapper: PartnerConfigurationUpdateParametersMapper\n};\n\nexport const partnerInfo: OperationParameter = {\n  parameterPath: \"partnerInfo\",\n  mapper: PartnerMapper\n};\n\nexport const partnerNamespaceInfo: OperationParameter = {\n  parameterPath: \"partnerNamespaceInfo\",\n  mapper: PartnerNamespaceMapper\n};\n\nexport const partnerNamespaceUpdateParameters: OperationParameter = {\n  parameterPath: \"partnerNamespaceUpdateParameters\",\n  mapper: PartnerNamespaceUpdateParametersMapper\n};\n\nexport const regenerateKeyRequest2: OperationParameter = {\n  parameterPath: \"regenerateKeyRequest\",\n  mapper: PartnerNamespaceRegenerateKeyRequestMapper\n};\n\nexport const partnerRegistrationName: OperationURLParameter = {\n  parameterPath: \"partnerRegistrationName\",\n  mapper: {\n    serializedName: \"partnerRegistrationName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const partnerRegistrationInfo: OperationParameter = {\n  parameterPath: \"partnerRegistrationInfo\",\n  mapper: PartnerRegistrationMapper\n};\n\nexport const partnerRegistrationUpdateParameters: OperationParameter = {\n  parameterPath: \"partnerRegistrationUpdateParameters\",\n  mapper: PartnerRegistrationUpdateParametersMapper\n};\n\nexport const partnerTopicInfo: OperationParameter = {\n  parameterPath: \"partnerTopicInfo\",\n  mapper: PartnerTopicMapper\n};\n\nexport const partnerTopicUpdateParameters: OperationParameter = {\n  parameterPath: \"partnerTopicUpdateParameters\",\n  mapper: PartnerTopicUpdateParametersMapper\n};\n\nexport const parentType: OperationURLParameter = {\n  parameterPath: \"parentType\",\n  mapper: {\n    serializedName: \"parentType\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const parentName: OperationURLParameter = {\n  parameterPath: \"parentName\",\n  mapper: {\n    serializedName: \"parentName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const privateEndpointConnectionName: OperationURLParameter = {\n  parameterPath: \"privateEndpointConnectionName\",\n  mapper: {\n    serializedName: \"privateEndpointConnectionName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const privateEndpointConnection: OperationParameter = {\n  parameterPath: \"privateEndpointConnection\",\n  mapper: PrivateEndpointConnectionMapper\n};\n\nexport const parentType1: OperationURLParameter = {\n  parameterPath: \"parentType\",\n  mapper: {\n    serializedName: \"parentType\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const privateLinkResourceName: OperationURLParameter = {\n  parameterPath: \"privateLinkResourceName\",\n  mapper: {\n    serializedName: \"privateLinkResourceName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const systemTopicInfo: OperationParameter = {\n  parameterPath: \"systemTopicInfo\",\n  mapper: SystemTopicMapper\n};\n\nexport const systemTopicUpdateParameters: OperationParameter = {\n  parameterPath: \"systemTopicUpdateParameters\",\n  mapper: SystemTopicUpdateParametersMapper\n};\n\nexport const scope1: OperationURLParameter = {\n  parameterPath: \"scope\",\n  mapper: {\n    serializedName: \"scope\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const verifiedPartnerName: OperationURLParameter = {\n  parameterPath: \"verifiedPartnerName\",\n  mapper: {\n    serializedName: \"verifiedPartnerName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { LongRunningOperation, LroResponse } from \"@azure/core-lro\";\n\nexport class LroImpl<T> implements LongRunningOperation<T> {\n  constructor(\n    private sendOperationFn: (args: any, spec: any) => Promise<LroResponse<T>>,\n    private args: Record<string, unknown>,\n    private spec: {\n      readonly requestBody?: unknown;\n      readonly path?: string;\n      readonly httpMethod: string;\n    } & Record<string, any>,\n    public requestPath: string = spec.path!,\n    public requestMethod: string = spec.httpMethod\n  ) {}\n  public async sendInitialRequest(): Promise<LroResponse<T>> {\n    return this.sendOperationFn(this.args, this.spec);\n  }\n  public async sendPollRequest(path: string): Promise<LroResponse<T>> {\n    const { requestBody, ...restSpec } = this.spec;\n    return this.sendOperationFn(this.args, {\n      ...restSpec,\n      path,\n      httpMethod: \"GET\"\n    });\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Channels } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  Channel,\n  ChannelsListByPartnerNamespaceNextOptionalParams,\n  ChannelsListByPartnerNamespaceOptionalParams,\n  ChannelsListByPartnerNamespaceResponse,\n  ChannelsGetOptionalParams,\n  ChannelsGetResponse,\n  ChannelsCreateOrUpdateOptionalParams,\n  ChannelsCreateOrUpdateResponse,\n  ChannelsDeleteOptionalParams,\n  ChannelUpdateParameters,\n  ChannelsUpdateOptionalParams,\n  ChannelsGetFullUrlOptionalParams,\n  ChannelsGetFullUrlResponse,\n  ChannelsListByPartnerNamespaceNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Channels operations. */\nexport class ChannelsImpl implements Channels {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class Channels class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all the channels in a partner namespace.\n   * @param resourceGroupName The name of the resource group within the partners subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param options The options parameters.\n   */\n  public listByPartnerNamespace(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    options?: ChannelsListByPartnerNamespaceOptionalParams\n  ): PagedAsyncIterableIterator<Channel> {\n    const iter = this.listByPartnerNamespacePagingAll(\n      resourceGroupName,\n      partnerNamespaceName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByPartnerNamespacePagingPage(\n          resourceGroupName,\n          partnerNamespaceName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByPartnerNamespacePagingPage(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    options?: ChannelsListByPartnerNamespaceOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Channel[]> {\n    let result: ChannelsListByPartnerNamespaceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByPartnerNamespace(\n        resourceGroupName,\n        partnerNamespaceName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByPartnerNamespaceNext(\n        resourceGroupName,\n        partnerNamespaceName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByPartnerNamespacePagingAll(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    options?: ChannelsListByPartnerNamespaceOptionalParams\n  ): AsyncIterableIterator<Channel> {\n    for await (const page of this.listByPartnerNamespacePagingPage(\n      resourceGroupName,\n      partnerNamespaceName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a channel.\n   * @param resourceGroupName The name of the resource group within the partners subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param channelName Name of the channel.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    channelName: string,\n    options?: ChannelsGetOptionalParams\n  ): Promise<ChannelsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerNamespaceName, channelName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Synchronously creates or updates a new channel with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the partners subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param channelName Name of the channel.\n   * @param channelInfo Channel information.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    channelName: string,\n    channelInfo: Channel,\n    options?: ChannelsCreateOrUpdateOptionalParams\n  ): Promise<ChannelsCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        partnerNamespaceName,\n        channelName,\n        channelInfo,\n        options\n      },\n      createOrUpdateOperationSpec\n    );\n  }\n\n  /**\n   * Delete an existing channel.\n   * @param resourceGroupName The name of the resource group within the partners subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param channelName Name of the channel.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    channelName: string,\n    options?: ChannelsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, partnerNamespaceName, channelName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete an existing channel.\n   * @param resourceGroupName The name of the resource group within the partners subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param channelName Name of the channel.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    channelName: string,\n    options?: ChannelsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      partnerNamespaceName,\n      channelName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Synchronously updates a channel with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the partners subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param channelName Name of the channel.\n   * @param channelUpdateParameters Channel update information.\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    channelName: string,\n    channelUpdateParameters: ChannelUpdateParameters,\n    options?: ChannelsUpdateOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        partnerNamespaceName,\n        channelName,\n        channelUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n  }\n\n  /**\n   * List all the channels in a partner namespace.\n   * @param resourceGroupName The name of the resource group within the partners subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param options The options parameters.\n   */\n  private _listByPartnerNamespace(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    options?: ChannelsListByPartnerNamespaceOptionalParams\n  ): Promise<ChannelsListByPartnerNamespaceResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerNamespaceName, options },\n      listByPartnerNamespaceOperationSpec\n    );\n  }\n\n  /**\n   * Get the full endpoint URL of a partner destination channel.\n   * @param resourceGroupName The name of the resource group within the partners subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param channelName Name of the Channel.\n   * @param options The options parameters.\n   */\n  getFullUrl(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    channelName: string,\n    options?: ChannelsGetFullUrlOptionalParams\n  ): Promise<ChannelsGetFullUrlResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerNamespaceName, channelName, options },\n      getFullUrlOperationSpec\n    );\n  }\n\n  /**\n   * ListByPartnerNamespaceNext\n   * @param resourceGroupName The name of the resource group within the partners subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param nextLink The nextLink from the previous successful call to the ListByPartnerNamespace method.\n   * @param options The options parameters.\n   */\n  private _listByPartnerNamespaceNext(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    nextLink: string,\n    options?: ChannelsListByPartnerNamespaceNextOptionalParams\n  ): Promise<ChannelsListByPartnerNamespaceNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerNamespaceName, nextLink, options },\n      listByPartnerNamespaceNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName,\n    Parameters.channelName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Channel\n    },\n    201: {\n      bodyMapper: Mappers.Channel\n    },\n    default: {}\n  },\n  requestBody: Parameters.channelInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName,\n    Parameters.channelName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName,\n    Parameters.channelName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}\",\n  httpMethod: \"PATCH\",\n  responses: { 200: {}, default: {} },\n  requestBody: Parameters.channelUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName,\n    Parameters.channelName\n  ],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listByPartnerNamespaceOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChannelsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getFullUrlOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}/getFullUrl\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionFullUrl\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName,\n    Parameters.channelName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByPartnerNamespaceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ChannelsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Domains } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  Domain,\n  DomainsListBySubscriptionNextOptionalParams,\n  DomainsListBySubscriptionOptionalParams,\n  DomainsListBySubscriptionResponse,\n  DomainsListByResourceGroupNextOptionalParams,\n  DomainsListByResourceGroupOptionalParams,\n  DomainsListByResourceGroupResponse,\n  DomainsGetOptionalParams,\n  DomainsGetResponse,\n  DomainsCreateOrUpdateOptionalParams,\n  DomainsCreateOrUpdateResponse,\n  DomainsDeleteOptionalParams,\n  DomainUpdateParameters,\n  DomainsUpdateOptionalParams,\n  DomainsListSharedAccessKeysOptionalParams,\n  DomainsListSharedAccessKeysResponse,\n  DomainRegenerateKeyRequest,\n  DomainsRegenerateKeyOptionalParams,\n  DomainsRegenerateKeyResponse,\n  DomainsListBySubscriptionNextResponse,\n  DomainsListByResourceGroupNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Domains operations. */\nexport class DomainsImpl implements Domains {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class Domains class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all the domains under an Azure subscription.\n   * @param options The options parameters.\n   */\n  public listBySubscription(\n    options?: DomainsListBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<Domain> {\n    const iter = this.listBySubscriptionPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBySubscriptionPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listBySubscriptionPagingPage(\n    options?: DomainsListBySubscriptionOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Domain[]> {\n    let result: DomainsListBySubscriptionResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listBySubscription(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listBySubscriptionNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listBySubscriptionPagingAll(\n    options?: DomainsListBySubscriptionOptionalParams\n  ): AsyncIterableIterator<Domain> {\n    for await (const page of this.listBySubscriptionPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all the domains under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: DomainsListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<Domain> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: DomainsListByResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Domain[]> {\n    let result: DomainsListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: DomainsListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<Domain> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainsGetOptionalParams\n  ): Promise<DomainsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates or updates a new domain with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param domainInfo Domain information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    domainName: string,\n    domainInfo: Domain,\n    options?: DomainsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<DomainsCreateOrUpdateResponse>,\n      DomainsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<DomainsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, domainName, domainInfo, options },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates or updates a new domain with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param domainInfo Domain information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    domainInfo: Domain,\n    options?: DomainsCreateOrUpdateOptionalParams\n  ): Promise<DomainsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      domainName,\n      domainInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete existing domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, domainName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete existing domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      domainName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Asynchronously updates a domain with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param domainUpdateParameters Domain update information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    domainName: string,\n    domainUpdateParameters: DomainUpdateParameters,\n    options?: DomainsUpdateOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, domainName, domainUpdateParameters, options },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously updates a domain with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param domainUpdateParameters Domain update information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    domainUpdateParameters: DomainUpdateParameters,\n    options?: DomainsUpdateOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      domainName,\n      domainUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * List all the domains under an Azure subscription.\n   * @param options The options parameters.\n   */\n  private _listBySubscription(\n    options?: DomainsListBySubscriptionOptionalParams\n  ): Promise<DomainsListBySubscriptionResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBySubscriptionOperationSpec\n    );\n  }\n\n  /**\n   * List all the domains under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: DomainsListByResourceGroupOptionalParams\n  ): Promise<DomainsListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * List the two keys used to publish to a domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param options The options parameters.\n   */\n  listSharedAccessKeys(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainsListSharedAccessKeysOptionalParams\n  ): Promise<DomainsListSharedAccessKeysResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, options },\n      listSharedAccessKeysOperationSpec\n    );\n  }\n\n  /**\n   * Regenerate a shared access key for a domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param regenerateKeyRequest Request body to regenerate key.\n   * @param options The options parameters.\n   */\n  regenerateKey(\n    resourceGroupName: string,\n    domainName: string,\n    regenerateKeyRequest: DomainRegenerateKeyRequest,\n    options?: DomainsRegenerateKeyOptionalParams\n  ): Promise<DomainsRegenerateKeyResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, regenerateKeyRequest, options },\n      regenerateKeyOperationSpec\n    );\n  }\n\n  /**\n   * ListBySubscriptionNext\n   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.\n   * @param options The options parameters.\n   */\n  private _listBySubscriptionNext(\n    nextLink: string,\n    options?: DomainsListBySubscriptionNextOptionalParams\n  ): Promise<DomainsListBySubscriptionNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listBySubscriptionNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: DomainsListByResourceGroupNextOptionalParams\n  ): Promise<DomainsListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Domain\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Domain\n    },\n    201: {\n      bodyMapper: Mappers.Domain\n    },\n    202: {\n      bodyMapper: Mappers.Domain\n    },\n    204: {\n      bodyMapper: Mappers.Domain\n    },\n    default: {}\n  },\n  requestBody: Parameters.domainInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}\",\n  httpMethod: \"PATCH\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  requestBody: Parameters.domainUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listBySubscriptionOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/domains\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listSharedAccessKeysOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/listKeys\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainSharedAccessKeys\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst regenerateKeyOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/regenerateKey\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainSharedAccessKeys\n    },\n    default: {}\n  },\n  requestBody: Parameters.regenerateKeyRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { DomainTopics } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  DomainTopic,\n  DomainTopicsListByDomainNextOptionalParams,\n  DomainTopicsListByDomainOptionalParams,\n  DomainTopicsListByDomainResponse,\n  DomainTopicsGetOptionalParams,\n  DomainTopicsGetResponse,\n  DomainTopicsCreateOrUpdateOptionalParams,\n  DomainTopicsCreateOrUpdateResponse,\n  DomainTopicsDeleteOptionalParams,\n  DomainTopicsListByDomainNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DomainTopics operations. */\nexport class DomainTopicsImpl implements DomainTopics {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class DomainTopics class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all the topics in a domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Domain name.\n   * @param options The options parameters.\n   */\n  public listByDomain(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainTopicsListByDomainOptionalParams\n  ): PagedAsyncIterableIterator<DomainTopic> {\n    const iter = this.listByDomainPagingAll(\n      resourceGroupName,\n      domainName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByDomainPagingPage(\n          resourceGroupName,\n          domainName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByDomainPagingPage(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainTopicsListByDomainOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<DomainTopic[]> {\n    let result: DomainTopicsListByDomainResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByDomain(resourceGroupName, domainName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByDomainNext(\n        resourceGroupName,\n        domainName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByDomainPagingAll(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainTopicsListByDomainOptionalParams\n  ): AsyncIterableIterator<DomainTopic> {\n    for await (const page of this.listByDomainPagingPage(\n      resourceGroupName,\n      domainName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param domainTopicName Name of the topic.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    domainName: string,\n    domainTopicName: string,\n    options?: DomainTopicsGetOptionalParams\n  ): Promise<DomainTopicsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, domainTopicName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates or updates a new domain topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param domainTopicName Name of the domain topic.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    domainName: string,\n    domainTopicName: string,\n    options?: DomainTopicsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<DomainTopicsCreateOrUpdateResponse>,\n      DomainTopicsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<DomainTopicsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, domainName, domainTopicName, options },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates or updates a new domain topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param domainTopicName Name of the domain topic.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    domainTopicName: string,\n    options?: DomainTopicsCreateOrUpdateOptionalParams\n  ): Promise<DomainTopicsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      domainName,\n      domainTopicName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete existing domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param domainTopicName Name of the domain topic.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    domainName: string,\n    domainTopicName: string,\n    options?: DomainTopicsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, domainName, domainTopicName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete existing domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param domainTopicName Name of the domain topic.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    domainTopicName: string,\n    options?: DomainTopicsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      domainName,\n      domainTopicName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * List all the topics in a domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Domain name.\n   * @param options The options parameters.\n   */\n  private _listByDomain(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainTopicsListByDomainOptionalParams\n  ): Promise<DomainTopicsListByDomainResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, options },\n      listByDomainOperationSpec\n    );\n  }\n\n  /**\n   * ListByDomainNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Domain name.\n   * @param nextLink The nextLink from the previous successful call to the ListByDomain method.\n   * @param options The options parameters.\n   */\n  private _listByDomainNext(\n    resourceGroupName: string,\n    domainName: string,\n    nextLink: string,\n    options?: DomainTopicsListByDomainNextOptionalParams\n  ): Promise<DomainTopicsListByDomainNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, nextLink, options },\n      listByDomainNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainTopic\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.domainTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainTopic\n    },\n    201: {\n      bodyMapper: Mappers.DomainTopic\n    },\n    202: {\n      bodyMapper: Mappers.DomainTopic\n    },\n    204: {\n      bodyMapper: Mappers.DomainTopic\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.domainTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.domainTopicName\n  ],\n  serializer\n};\nconst listByDomainOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainTopicsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByDomainNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DomainTopicsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.domainName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { TopicEventSubscriptions } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  EventSubscription,\n  TopicEventSubscriptionsListNextOptionalParams,\n  TopicEventSubscriptionsListOptionalParams,\n  TopicEventSubscriptionsListResponse,\n  TopicEventSubscriptionsGetDeliveryAttributesOptionalParams,\n  TopicEventSubscriptionsGetDeliveryAttributesResponse,\n  TopicEventSubscriptionsGetOptionalParams,\n  TopicEventSubscriptionsGetResponse,\n  TopicEventSubscriptionsCreateOrUpdateOptionalParams,\n  TopicEventSubscriptionsCreateOrUpdateResponse,\n  TopicEventSubscriptionsDeleteOptionalParams,\n  EventSubscriptionUpdateParameters,\n  TopicEventSubscriptionsUpdateOptionalParams,\n  TopicEventSubscriptionsUpdateResponse,\n  TopicEventSubscriptionsGetFullUrlOptionalParams,\n  TopicEventSubscriptionsGetFullUrlResponse,\n  TopicEventSubscriptionsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing TopicEventSubscriptions operations. */\nexport class TopicEventSubscriptionsImpl implements TopicEventSubscriptions {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class TopicEventSubscriptions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all event subscriptions that have been created for a specific topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    topicName: string,\n    options?: TopicEventSubscriptionsListOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listPagingAll(resourceGroupName, topicName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          topicName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    topicName: string,\n    options?: TopicEventSubscriptionsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: TopicEventSubscriptionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, topicName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        topicName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    topicName: string,\n    options?: TopicEventSubscriptionsListOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      topicName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get all delivery attributes for an event subscription for topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  getDeliveryAttributes(\n    resourceGroupName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    options?: TopicEventSubscriptionsGetDeliveryAttributesOptionalParams\n  ): Promise<TopicEventSubscriptionsGetDeliveryAttributesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, topicName, eventSubscriptionName, options },\n      getDeliveryAttributesOperationSpec\n    );\n  }\n\n  /**\n   * Get properties of an event subscription of a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be found. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    options?: TopicEventSubscriptionsGetOptionalParams\n  ): Promise<TopicEventSubscriptionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, topicName, eventSubscriptionName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates a new event subscription or updates an existing event subscription.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: TopicEventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<TopicEventSubscriptionsCreateOrUpdateResponse>,\n      TopicEventSubscriptionsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TopicEventSubscriptionsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        topicName,\n        eventSubscriptionName,\n        eventSubscriptionInfo,\n        options\n      },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates a new event subscription or updates an existing event subscription.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: TopicEventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<TopicEventSubscriptionsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      topicName,\n      eventSubscriptionName,\n      eventSubscriptionInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete an existing event subscription for a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    options?: TopicEventSubscriptionsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, topicName, eventSubscriptionName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete an existing event subscription for a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    options?: TopicEventSubscriptionsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      topicName,\n      eventSubscriptionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Update an existing event subscription for a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the domain.\n   * @param eventSubscriptionName Name of the event subscription to be updated.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: TopicEventSubscriptionsUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<TopicEventSubscriptionsUpdateResponse>,\n      TopicEventSubscriptionsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TopicEventSubscriptionsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        topicName,\n        eventSubscriptionName,\n        eventSubscriptionUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update an existing event subscription for a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the domain.\n   * @param eventSubscriptionName Name of the event subscription to be updated.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: TopicEventSubscriptionsUpdateOptionalParams\n  ): Promise<TopicEventSubscriptionsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      topicName,\n      eventSubscriptionName,\n      eventSubscriptionUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get the full endpoint URL for an event subscription for topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  getFullUrl(\n    resourceGroupName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    options?: TopicEventSubscriptionsGetFullUrlOptionalParams\n  ): Promise<TopicEventSubscriptionsGetFullUrlResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, topicName, eventSubscriptionName, options },\n      getFullUrlOperationSpec\n    );\n  }\n\n  /**\n   * List all event subscriptions that have been created for a specific topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    topicName: string,\n    options?: TopicEventSubscriptionsListOptionalParams\n  ): Promise<TopicEventSubscriptionsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, topicName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    topicName: string,\n    nextLink: string,\n    options?: TopicEventSubscriptionsListNextOptionalParams\n  ): Promise<TopicEventSubscriptionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, topicName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getDeliveryAttributesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}/getDeliveryAttributes\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeliveryAttributeListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getFullUrlOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}/getFullUrl\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionFullUrl\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { DomainEventSubscriptions } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  EventSubscription,\n  DomainEventSubscriptionsListNextOptionalParams,\n  DomainEventSubscriptionsListOptionalParams,\n  DomainEventSubscriptionsListResponse,\n  DomainEventSubscriptionsGetDeliveryAttributesOptionalParams,\n  DomainEventSubscriptionsGetDeliveryAttributesResponse,\n  DomainEventSubscriptionsGetOptionalParams,\n  DomainEventSubscriptionsGetResponse,\n  DomainEventSubscriptionsCreateOrUpdateOptionalParams,\n  DomainEventSubscriptionsCreateOrUpdateResponse,\n  DomainEventSubscriptionsDeleteOptionalParams,\n  EventSubscriptionUpdateParameters,\n  DomainEventSubscriptionsUpdateOptionalParams,\n  DomainEventSubscriptionsUpdateResponse,\n  DomainEventSubscriptionsGetFullUrlOptionalParams,\n  DomainEventSubscriptionsGetFullUrlResponse,\n  DomainEventSubscriptionsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DomainEventSubscriptions operations. */\nexport class DomainEventSubscriptionsImpl implements DomainEventSubscriptions {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class DomainEventSubscriptions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all event subscriptions that have been created for a specific topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainEventSubscriptionsListOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listPagingAll(resourceGroupName, domainName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          domainName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainEventSubscriptionsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: DomainEventSubscriptionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, domainName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        domainName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainEventSubscriptionsListOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      domainName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get all delivery attributes for an event subscription for domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  getDeliveryAttributes(\n    resourceGroupName: string,\n    domainName: string,\n    eventSubscriptionName: string,\n    options?: DomainEventSubscriptionsGetDeliveryAttributesOptionalParams\n  ): Promise<DomainEventSubscriptionsGetDeliveryAttributesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, eventSubscriptionName, options },\n      getDeliveryAttributesOperationSpec\n    );\n  }\n\n  /**\n   * Get properties of an event subscription of a domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be found. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    domainName: string,\n    eventSubscriptionName: string,\n    options?: DomainEventSubscriptionsGetOptionalParams\n  ): Promise<DomainEventSubscriptionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, eventSubscriptionName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates a new event subscription or updates an existing event subscription.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    domainName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: DomainEventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<DomainEventSubscriptionsCreateOrUpdateResponse>,\n      DomainEventSubscriptionsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<DomainEventSubscriptionsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        domainName,\n        eventSubscriptionName,\n        eventSubscriptionInfo,\n        options\n      },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates a new event subscription or updates an existing event subscription.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: DomainEventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<DomainEventSubscriptionsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      domainName,\n      eventSubscriptionName,\n      eventSubscriptionInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete an existing event subscription for a domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    domainName: string,\n    eventSubscriptionName: string,\n    options?: DomainEventSubscriptionsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, domainName, eventSubscriptionName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete an existing event subscription for a domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    eventSubscriptionName: string,\n    options?: DomainEventSubscriptionsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      domainName,\n      eventSubscriptionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Update an existing event subscription for a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param eventSubscriptionName Name of the event subscription to be updated.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    domainName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: DomainEventSubscriptionsUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<DomainEventSubscriptionsUpdateResponse>,\n      DomainEventSubscriptionsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<DomainEventSubscriptionsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        domainName,\n        eventSubscriptionName,\n        eventSubscriptionUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update an existing event subscription for a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param eventSubscriptionName Name of the event subscription to be updated.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: DomainEventSubscriptionsUpdateOptionalParams\n  ): Promise<DomainEventSubscriptionsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      domainName,\n      eventSubscriptionName,\n      eventSubscriptionUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get the full endpoint URL for an event subscription for domain.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  getFullUrl(\n    resourceGroupName: string,\n    domainName: string,\n    eventSubscriptionName: string,\n    options?: DomainEventSubscriptionsGetFullUrlOptionalParams\n  ): Promise<DomainEventSubscriptionsGetFullUrlResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, eventSubscriptionName, options },\n      getFullUrlOperationSpec\n    );\n  }\n\n  /**\n   * List all event subscriptions that have been created for a specific topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    domainName: string,\n    options?: DomainEventSubscriptionsListOptionalParams\n  ): Promise<DomainEventSubscriptionsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    domainName: string,\n    nextLink: string,\n    options?: DomainEventSubscriptionsListNextOptionalParams\n  ): Promise<DomainEventSubscriptionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getDeliveryAttributesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/eventSubscriptions/{eventSubscriptionName}/getDeliveryAttributes\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeliveryAttributeListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.eventSubscriptionName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getFullUrlOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/eventSubscriptions/{eventSubscriptionName}/getFullUrl\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionFullUrl\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.domainName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { EventSubscriptions } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  EventSubscription,\n  EventSubscriptionsListGlobalBySubscriptionNextOptionalParams,\n  EventSubscriptionsListGlobalBySubscriptionOptionalParams,\n  EventSubscriptionsListGlobalBySubscriptionResponse,\n  EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams,\n  EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams,\n  EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse,\n  EventSubscriptionsListGlobalByResourceGroupNextOptionalParams,\n  EventSubscriptionsListGlobalByResourceGroupOptionalParams,\n  EventSubscriptionsListGlobalByResourceGroupResponse,\n  EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams,\n  EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams,\n  EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse,\n  EventSubscriptionsListRegionalBySubscriptionNextOptionalParams,\n  EventSubscriptionsListRegionalBySubscriptionOptionalParams,\n  EventSubscriptionsListRegionalBySubscriptionResponse,\n  EventSubscriptionsListRegionalByResourceGroupNextOptionalParams,\n  EventSubscriptionsListRegionalByResourceGroupOptionalParams,\n  EventSubscriptionsListRegionalByResourceGroupResponse,\n  EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams,\n  EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams,\n  EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse,\n  EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams,\n  EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams,\n  EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse,\n  EventSubscriptionsListByResourceNextOptionalParams,\n  EventSubscriptionsListByResourceOptionalParams,\n  EventSubscriptionsListByResourceResponse,\n  EventSubscriptionsListByDomainTopicNextOptionalParams,\n  EventSubscriptionsListByDomainTopicOptionalParams,\n  EventSubscriptionsListByDomainTopicResponse,\n  EventSubscriptionsGetOptionalParams,\n  EventSubscriptionsGetResponse,\n  EventSubscriptionsCreateOrUpdateOptionalParams,\n  EventSubscriptionsCreateOrUpdateResponse,\n  EventSubscriptionsDeleteOptionalParams,\n  EventSubscriptionUpdateParameters,\n  EventSubscriptionsUpdateOptionalParams,\n  EventSubscriptionsUpdateResponse,\n  EventSubscriptionsGetFullUrlOptionalParams,\n  EventSubscriptionsGetFullUrlResponse,\n  EventSubscriptionsGetDeliveryAttributesOptionalParams,\n  EventSubscriptionsGetDeliveryAttributesResponse,\n  EventSubscriptionsListGlobalBySubscriptionNextResponse,\n  EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse,\n  EventSubscriptionsListGlobalByResourceGroupNextResponse,\n  EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse,\n  EventSubscriptionsListRegionalBySubscriptionNextResponse,\n  EventSubscriptionsListRegionalByResourceGroupNextResponse,\n  EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse,\n  EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse,\n  EventSubscriptionsListByResourceNextResponse,\n  EventSubscriptionsListByDomainTopicNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing EventSubscriptions operations. */\nexport class EventSubscriptionsImpl implements EventSubscriptions {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class EventSubscriptions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all aggregated global event subscriptions under a specific Azure subscription.\n   * @param options The options parameters.\n   */\n  public listGlobalBySubscription(\n    options?: EventSubscriptionsListGlobalBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listGlobalBySubscriptionPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listGlobalBySubscriptionPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listGlobalBySubscriptionPagingPage(\n    options?: EventSubscriptionsListGlobalBySubscriptionOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: EventSubscriptionsListGlobalBySubscriptionResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listGlobalBySubscription(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listGlobalBySubscriptionNext(\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listGlobalBySubscriptionPagingAll(\n    options?: EventSubscriptionsListGlobalBySubscriptionOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listGlobalBySubscriptionPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all global event subscriptions under an Azure subscription for a topic type.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  public listGlobalBySubscriptionForTopicType(\n    topicTypeName: string,\n    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listGlobalBySubscriptionForTopicTypePagingAll(\n      topicTypeName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listGlobalBySubscriptionForTopicTypePagingPage(\n          topicTypeName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listGlobalBySubscriptionForTopicTypePagingPage(\n    topicTypeName: string,\n    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listGlobalBySubscriptionForTopicType(\n        topicTypeName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listGlobalBySubscriptionForTopicTypeNext(\n        topicTypeName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listGlobalBySubscriptionForTopicTypePagingAll(\n    topicTypeName: string,\n    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listGlobalBySubscriptionForTopicTypePagingPage(\n      topicTypeName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all global event subscriptions under a specific Azure subscription and resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  public listGlobalByResourceGroup(\n    resourceGroupName: string,\n    options?: EventSubscriptionsListGlobalByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listGlobalByResourceGroupPagingAll(\n      resourceGroupName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listGlobalByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listGlobalByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: EventSubscriptionsListGlobalByResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: EventSubscriptionsListGlobalByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listGlobalByResourceGroup(\n        resourceGroupName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listGlobalByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listGlobalByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: EventSubscriptionsListGlobalByResourceGroupOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listGlobalByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all global event subscriptions under a resource group for a specific topic type.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  public listGlobalByResourceGroupForTopicType(\n    resourceGroupName: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listGlobalByResourceGroupForTopicTypePagingAll(\n      resourceGroupName,\n      topicTypeName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listGlobalByResourceGroupForTopicTypePagingPage(\n          resourceGroupName,\n          topicTypeName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listGlobalByResourceGroupForTopicTypePagingPage(\n    resourceGroupName: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listGlobalByResourceGroupForTopicType(\n        resourceGroupName,\n        topicTypeName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listGlobalByResourceGroupForTopicTypeNext(\n        resourceGroupName,\n        topicTypeName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listGlobalByResourceGroupForTopicTypePagingAll(\n    resourceGroupName: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listGlobalByResourceGroupForTopicTypePagingPage(\n      resourceGroupName,\n      topicTypeName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all event subscriptions from the given location under a specific Azure subscription.\n   * @param location Name of the location.\n   * @param options The options parameters.\n   */\n  public listRegionalBySubscription(\n    location: string,\n    options?: EventSubscriptionsListRegionalBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listRegionalBySubscriptionPagingAll(location, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listRegionalBySubscriptionPagingPage(\n          location,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listRegionalBySubscriptionPagingPage(\n    location: string,\n    options?: EventSubscriptionsListRegionalBySubscriptionOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: EventSubscriptionsListRegionalBySubscriptionResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listRegionalBySubscription(location, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listRegionalBySubscriptionNext(\n        location,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listRegionalBySubscriptionPagingAll(\n    location: string,\n    options?: EventSubscriptionsListRegionalBySubscriptionOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listRegionalBySubscriptionPagingPage(\n      location,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all event subscriptions from the given location under a specific Azure subscription and\n   * resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param location Name of the location.\n   * @param options The options parameters.\n   */\n  public listRegionalByResourceGroup(\n    resourceGroupName: string,\n    location: string,\n    options?: EventSubscriptionsListRegionalByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listRegionalByResourceGroupPagingAll(\n      resourceGroupName,\n      location,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listRegionalByResourceGroupPagingPage(\n          resourceGroupName,\n          location,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listRegionalByResourceGroupPagingPage(\n    resourceGroupName: string,\n    location: string,\n    options?: EventSubscriptionsListRegionalByResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: EventSubscriptionsListRegionalByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listRegionalByResourceGroup(\n        resourceGroupName,\n        location,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listRegionalByResourceGroupNext(\n        resourceGroupName,\n        location,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listRegionalByResourceGroupPagingAll(\n    resourceGroupName: string,\n    location: string,\n    options?: EventSubscriptionsListRegionalByResourceGroupOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listRegionalByResourceGroupPagingPage(\n      resourceGroupName,\n      location,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all event subscriptions from the given location under a specific Azure subscription and topic\n   * type.\n   * @param location Name of the location.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  public listRegionalBySubscriptionForTopicType(\n    location: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listRegionalBySubscriptionForTopicTypePagingAll(\n      location,\n      topicTypeName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listRegionalBySubscriptionForTopicTypePagingPage(\n          location,\n          topicTypeName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listRegionalBySubscriptionForTopicTypePagingPage(\n    location: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listRegionalBySubscriptionForTopicType(\n        location,\n        topicTypeName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listRegionalBySubscriptionForTopicTypeNext(\n        location,\n        topicTypeName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listRegionalBySubscriptionForTopicTypePagingAll(\n    location: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listRegionalBySubscriptionForTopicTypePagingPage(\n      location,\n      topicTypeName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all event subscriptions from the given location under a specific Azure subscription and\n   * resource group and topic type.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param location Name of the location.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  public listRegionalByResourceGroupForTopicType(\n    resourceGroupName: string,\n    location: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listRegionalByResourceGroupForTopicTypePagingAll(\n      resourceGroupName,\n      location,\n      topicTypeName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listRegionalByResourceGroupForTopicTypePagingPage(\n          resourceGroupName,\n          location,\n          topicTypeName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listRegionalByResourceGroupForTopicTypePagingPage(\n    resourceGroupName: string,\n    location: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listRegionalByResourceGroupForTopicType(\n        resourceGroupName,\n        location,\n        topicTypeName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listRegionalByResourceGroupForTopicTypeNext(\n        resourceGroupName,\n        location,\n        topicTypeName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listRegionalByResourceGroupForTopicTypePagingAll(\n    resourceGroupName: string,\n    location: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listRegionalByResourceGroupForTopicTypePagingPage(\n      resourceGroupName,\n      location,\n      topicTypeName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all event subscriptions that have been created for a specific resource.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param providerNamespace Namespace of the provider of the topic.\n   * @param resourceTypeName Name of the resource type.\n   * @param resourceName Name of the resource.\n   * @param options The options parameters.\n   */\n  public listByResource(\n    resourceGroupName: string,\n    providerNamespace: string,\n    resourceTypeName: string,\n    resourceName: string,\n    options?: EventSubscriptionsListByResourceOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listByResourcePagingAll(\n      resourceGroupName,\n      providerNamespace,\n      resourceTypeName,\n      resourceName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourcePagingPage(\n          resourceGroupName,\n          providerNamespace,\n          resourceTypeName,\n          resourceName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourcePagingPage(\n    resourceGroupName: string,\n    providerNamespace: string,\n    resourceTypeName: string,\n    resourceName: string,\n    options?: EventSubscriptionsListByResourceOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: EventSubscriptionsListByResourceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResource(\n        resourceGroupName,\n        providerNamespace,\n        resourceTypeName,\n        resourceName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceNext(\n        resourceGroupName,\n        providerNamespace,\n        resourceTypeName,\n        resourceName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourcePagingAll(\n    resourceGroupName: string,\n    providerNamespace: string,\n    resourceTypeName: string,\n    resourceName: string,\n    options?: EventSubscriptionsListByResourceOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listByResourcePagingPage(\n      resourceGroupName,\n      providerNamespace,\n      resourceTypeName,\n      resourceName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all event subscriptions that have been created for a specific domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param options The options parameters.\n   */\n  public listByDomainTopic(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    options?: EventSubscriptionsListByDomainTopicOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listByDomainTopicPagingAll(\n      resourceGroupName,\n      domainName,\n      topicName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByDomainTopicPagingPage(\n          resourceGroupName,\n          domainName,\n          topicName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByDomainTopicPagingPage(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    options?: EventSubscriptionsListByDomainTopicOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: EventSubscriptionsListByDomainTopicResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByDomainTopic(\n        resourceGroupName,\n        domainName,\n        topicName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByDomainTopicNext(\n        resourceGroupName,\n        domainName,\n        topicName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByDomainTopicPagingAll(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    options?: EventSubscriptionsListByDomainTopicOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listByDomainTopicPagingPage(\n      resourceGroupName,\n      domainName,\n      topicName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of an event subscription.\n   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource\n   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.\n   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'\n   *              for a resource, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'\n   *              for an EventGrid topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  get(\n    scope: string,\n    eventSubscriptionName: string,\n    options?: EventSubscriptionsGetOptionalParams\n  ): Promise<EventSubscriptionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { scope, eventSubscriptionName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates a new event subscription or updates an existing event subscription based on\n   * the specified scope.\n   * @param scope The identifier of the resource to which the event subscription needs to be created or\n   *              updated. The scope can be a subscription, or a resource group, or a top level resource belonging to\n   *              a resource provider namespace, or an EventGrid topic. For example, use\n   *              '/subscriptions/{subscriptionId}/' for a subscription,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'\n   *              for a resource, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'\n   *              for an EventGrid topic.\n   * @param eventSubscriptionName Name of the event subscription. Event subscription names must be\n   *                              between 3 and 64 characters in length and should use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    scope: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: EventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<EventSubscriptionsCreateOrUpdateResponse>,\n      EventSubscriptionsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<EventSubscriptionsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { scope, eventSubscriptionName, eventSubscriptionInfo, options },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates a new event subscription or updates an existing event subscription based on\n   * the specified scope.\n   * @param scope The identifier of the resource to which the event subscription needs to be created or\n   *              updated. The scope can be a subscription, or a resource group, or a top level resource belonging to\n   *              a resource provider namespace, or an EventGrid topic. For example, use\n   *              '/subscriptions/{subscriptionId}/' for a subscription,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'\n   *              for a resource, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'\n   *              for an EventGrid topic.\n   * @param eventSubscriptionName Name of the event subscription. Event subscription names must be\n   *                              between 3 and 64 characters in length and should use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    scope: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: EventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<EventSubscriptionsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      scope,\n      eventSubscriptionName,\n      eventSubscriptionInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete an existing event subscription.\n   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource\n   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.\n   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'\n   *              for a resource, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'\n   *              for an EventGrid topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    scope: string,\n    eventSubscriptionName: string,\n    options?: EventSubscriptionsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { scope, eventSubscriptionName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete an existing event subscription.\n   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource\n   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.\n   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'\n   *              for a resource, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'\n   *              for an EventGrid topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    scope: string,\n    eventSubscriptionName: string,\n    options?: EventSubscriptionsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      scope,\n      eventSubscriptionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Asynchronously updates an existing event subscription.\n   * @param scope The scope of existing event subscription. The scope can be a subscription, or a\n   *              resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid\n   *              topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'\n   *              for a resource, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'\n   *              for an EventGrid topic.\n   * @param eventSubscriptionName Name of the event subscription to be updated.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    scope: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: EventSubscriptionsUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<EventSubscriptionsUpdateResponse>,\n      EventSubscriptionsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<EventSubscriptionsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        scope,\n        eventSubscriptionName,\n        eventSubscriptionUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously updates an existing event subscription.\n   * @param scope The scope of existing event subscription. The scope can be a subscription, or a\n   *              resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid\n   *              topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'\n   *              for a resource, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'\n   *              for an EventGrid topic.\n   * @param eventSubscriptionName Name of the event subscription to be updated.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    scope: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: EventSubscriptionsUpdateOptionalParams\n  ): Promise<EventSubscriptionsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      scope,\n      eventSubscriptionName,\n      eventSubscriptionUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get the full endpoint URL for an event subscription.\n   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource\n   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.\n   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'\n   *              for a resource, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'\n   *              for an EventGrid topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  getFullUrl(\n    scope: string,\n    eventSubscriptionName: string,\n    options?: EventSubscriptionsGetFullUrlOptionalParams\n  ): Promise<EventSubscriptionsGetFullUrlResponse> {\n    return this.client.sendOperationRequest(\n      { scope, eventSubscriptionName, options },\n      getFullUrlOperationSpec\n    );\n  }\n\n  /**\n   * List all aggregated global event subscriptions under a specific Azure subscription.\n   * @param options The options parameters.\n   */\n  private _listGlobalBySubscription(\n    options?: EventSubscriptionsListGlobalBySubscriptionOptionalParams\n  ): Promise<EventSubscriptionsListGlobalBySubscriptionResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listGlobalBySubscriptionOperationSpec\n    );\n  }\n\n  /**\n   * List all global event subscriptions under an Azure subscription for a topic type.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  private _listGlobalBySubscriptionForTopicType(\n    topicTypeName: string,\n    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams\n  ): Promise<EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse> {\n    return this.client.sendOperationRequest(\n      { topicTypeName, options },\n      listGlobalBySubscriptionForTopicTypeOperationSpec\n    );\n  }\n\n  /**\n   * List all global event subscriptions under a specific Azure subscription and resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  private _listGlobalByResourceGroup(\n    resourceGroupName: string,\n    options?: EventSubscriptionsListGlobalByResourceGroupOptionalParams\n  ): Promise<EventSubscriptionsListGlobalByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listGlobalByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * List all global event subscriptions under a resource group for a specific topic type.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  private _listGlobalByResourceGroupForTopicType(\n    resourceGroupName: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams\n  ): Promise<EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, topicTypeName, options },\n      listGlobalByResourceGroupForTopicTypeOperationSpec\n    );\n  }\n\n  /**\n   * List all event subscriptions from the given location under a specific Azure subscription.\n   * @param location Name of the location.\n   * @param options The options parameters.\n   */\n  private _listRegionalBySubscription(\n    location: string,\n    options?: EventSubscriptionsListRegionalBySubscriptionOptionalParams\n  ): Promise<EventSubscriptionsListRegionalBySubscriptionResponse> {\n    return this.client.sendOperationRequest(\n      { location, options },\n      listRegionalBySubscriptionOperationSpec\n    );\n  }\n\n  /**\n   * List all event subscriptions from the given location under a specific Azure subscription and\n   * resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param location Name of the location.\n   * @param options The options parameters.\n   */\n  private _listRegionalByResourceGroup(\n    resourceGroupName: string,\n    location: string,\n    options?: EventSubscriptionsListRegionalByResourceGroupOptionalParams\n  ): Promise<EventSubscriptionsListRegionalByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, location, options },\n      listRegionalByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * List all event subscriptions from the given location under a specific Azure subscription and topic\n   * type.\n   * @param location Name of the location.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  private _listRegionalBySubscriptionForTopicType(\n    location: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams\n  ): Promise<EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse> {\n    return this.client.sendOperationRequest(\n      { location, topicTypeName, options },\n      listRegionalBySubscriptionForTopicTypeOperationSpec\n    );\n  }\n\n  /**\n   * List all event subscriptions from the given location under a specific Azure subscription and\n   * resource group and topic type.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param location Name of the location.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  private _listRegionalByResourceGroupForTopicType(\n    resourceGroupName: string,\n    location: string,\n    topicTypeName: string,\n    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams\n  ): Promise<\n    EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse\n  > {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, location, topicTypeName, options },\n      listRegionalByResourceGroupForTopicTypeOperationSpec\n    );\n  }\n\n  /**\n   * List all event subscriptions that have been created for a specific resource.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param providerNamespace Namespace of the provider of the topic.\n   * @param resourceTypeName Name of the resource type.\n   * @param resourceName Name of the resource.\n   * @param options The options parameters.\n   */\n  private _listByResource(\n    resourceGroupName: string,\n    providerNamespace: string,\n    resourceTypeName: string,\n    resourceName: string,\n    options?: EventSubscriptionsListByResourceOptionalParams\n  ): Promise<EventSubscriptionsListByResourceResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        providerNamespace,\n        resourceTypeName,\n        resourceName,\n        options\n      },\n      listByResourceOperationSpec\n    );\n  }\n\n  /**\n   * List all event subscriptions that have been created for a specific domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param options The options parameters.\n   */\n  private _listByDomainTopic(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    options?: EventSubscriptionsListByDomainTopicOptionalParams\n  ): Promise<EventSubscriptionsListByDomainTopicResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, topicName, options },\n      listByDomainTopicOperationSpec\n    );\n  }\n\n  /**\n   * Get all delivery attributes for an event subscription.\n   * @param scope The scope of the event subscription. The scope can be a subscription, or a resource\n   *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.\n   *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'\n   *              for a resource, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'\n   *              for an EventGrid topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  getDeliveryAttributes(\n    scope: string,\n    eventSubscriptionName: string,\n    options?: EventSubscriptionsGetDeliveryAttributesOptionalParams\n  ): Promise<EventSubscriptionsGetDeliveryAttributesResponse> {\n    return this.client.sendOperationRequest(\n      { scope, eventSubscriptionName, options },\n      getDeliveryAttributesOperationSpec\n    );\n  }\n\n  /**\n   * ListGlobalBySubscriptionNext\n   * @param nextLink The nextLink from the previous successful call to the ListGlobalBySubscription\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listGlobalBySubscriptionNext(\n    nextLink: string,\n    options?: EventSubscriptionsListGlobalBySubscriptionNextOptionalParams\n  ): Promise<EventSubscriptionsListGlobalBySubscriptionNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listGlobalBySubscriptionNextOperationSpec\n    );\n  }\n\n  /**\n   * ListGlobalBySubscriptionForTopicTypeNext\n   * @param topicTypeName Name of the topic type.\n   * @param nextLink The nextLink from the previous successful call to the\n   *                 ListGlobalBySubscriptionForTopicType method.\n   * @param options The options parameters.\n   */\n  private _listGlobalBySubscriptionForTopicTypeNext(\n    topicTypeName: string,\n    nextLink: string,\n    options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams\n  ): Promise<\n    EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse\n  > {\n    return this.client.sendOperationRequest(\n      { topicTypeName, nextLink, options },\n      listGlobalBySubscriptionForTopicTypeNextOperationSpec\n    );\n  }\n\n  /**\n   * ListGlobalByResourceGroupNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param nextLink The nextLink from the previous successful call to the ListGlobalByResourceGroup\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listGlobalByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: EventSubscriptionsListGlobalByResourceGroupNextOptionalParams\n  ): Promise<EventSubscriptionsListGlobalByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listGlobalByResourceGroupNextOperationSpec\n    );\n  }\n\n  /**\n   * ListGlobalByResourceGroupForTopicTypeNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicTypeName Name of the topic type.\n   * @param nextLink The nextLink from the previous successful call to the\n   *                 ListGlobalByResourceGroupForTopicType method.\n   * @param options The options parameters.\n   */\n  private _listGlobalByResourceGroupForTopicTypeNext(\n    resourceGroupName: string,\n    topicTypeName: string,\n    nextLink: string,\n    options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams\n  ): Promise<\n    EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse\n  > {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, topicTypeName, nextLink, options },\n      listGlobalByResourceGroupForTopicTypeNextOperationSpec\n    );\n  }\n\n  /**\n   * ListRegionalBySubscriptionNext\n   * @param location Name of the location.\n   * @param nextLink The nextLink from the previous successful call to the ListRegionalBySubscription\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listRegionalBySubscriptionNext(\n    location: string,\n    nextLink: string,\n    options?: EventSubscriptionsListRegionalBySubscriptionNextOptionalParams\n  ): Promise<EventSubscriptionsListRegionalBySubscriptionNextResponse> {\n    return this.client.sendOperationRequest(\n      { location, nextLink, options },\n      listRegionalBySubscriptionNextOperationSpec\n    );\n  }\n\n  /**\n   * ListRegionalByResourceGroupNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param location Name of the location.\n   * @param nextLink The nextLink from the previous successful call to the ListRegionalByResourceGroup\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listRegionalByResourceGroupNext(\n    resourceGroupName: string,\n    location: string,\n    nextLink: string,\n    options?: EventSubscriptionsListRegionalByResourceGroupNextOptionalParams\n  ): Promise<EventSubscriptionsListRegionalByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, location, nextLink, options },\n      listRegionalByResourceGroupNextOperationSpec\n    );\n  }\n\n  /**\n   * ListRegionalBySubscriptionForTopicTypeNext\n   * @param location Name of the location.\n   * @param topicTypeName Name of the topic type.\n   * @param nextLink The nextLink from the previous successful call to the\n   *                 ListRegionalBySubscriptionForTopicType method.\n   * @param options The options parameters.\n   */\n  private _listRegionalBySubscriptionForTopicTypeNext(\n    location: string,\n    topicTypeName: string,\n    nextLink: string,\n    options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams\n  ): Promise<\n    EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse\n  > {\n    return this.client.sendOperationRequest(\n      { location, topicTypeName, nextLink, options },\n      listRegionalBySubscriptionForTopicTypeNextOperationSpec\n    );\n  }\n\n  /**\n   * ListRegionalByResourceGroupForTopicTypeNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param location Name of the location.\n   * @param topicTypeName Name of the topic type.\n   * @param nextLink The nextLink from the previous successful call to the\n   *                 ListRegionalByResourceGroupForTopicType method.\n   * @param options The options parameters.\n   */\n  private _listRegionalByResourceGroupForTopicTypeNext(\n    resourceGroupName: string,\n    location: string,\n    topicTypeName: string,\n    nextLink: string,\n    options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams\n  ): Promise<\n    EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse\n  > {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, location, topicTypeName, nextLink, options },\n      listRegionalByResourceGroupForTopicTypeNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param providerNamespace Namespace of the provider of the topic.\n   * @param resourceTypeName Name of the resource type.\n   * @param resourceName Name of the resource.\n   * @param nextLink The nextLink from the previous successful call to the ListByResource method.\n   * @param options The options parameters.\n   */\n  private _listByResourceNext(\n    resourceGroupName: string,\n    providerNamespace: string,\n    resourceTypeName: string,\n    resourceName: string,\n    nextLink: string,\n    options?: EventSubscriptionsListByResourceNextOptionalParams\n  ): Promise<EventSubscriptionsListByResourceNextResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        providerNamespace,\n        resourceTypeName,\n        resourceName,\n        nextLink,\n        options\n      },\n      listByResourceNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByDomainTopicNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param nextLink The nextLink from the previous successful call to the ListByDomainTopic method.\n   * @param options The options parameters.\n   */\n  private _listByDomainTopicNext(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    nextLink: string,\n    options?: EventSubscriptionsListByDomainTopicNextOptionalParams\n  ): Promise<EventSubscriptionsListByDomainTopicNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, topicName, nextLink, options },\n      listByDomainTopicNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.eventSubscriptionName,\n    Parameters.scope\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.eventSubscriptionName,\n    Parameters.scope\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.eventSubscriptionName,\n    Parameters.scope\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.eventSubscriptionName,\n    Parameters.scope\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getFullUrlOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionFullUrl\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.eventSubscriptionName,\n    Parameters.scope\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listGlobalBySubscriptionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listGlobalBySubscriptionForTopicTypeOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.topicTypeName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listGlobalByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listGlobalByResourceGroupForTopicTypeOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicTypeName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listRegionalBySubscriptionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.location\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listRegionalByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.location\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listRegionalBySubscriptionForTopicTypeOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.topicTypeName,\n    Parameters.location\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listRegionalByResourceGroupForTopicTypeOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicTypeName,\n    Parameters.location\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.providerNamespace,\n    Parameters.resourceTypeName,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByDomainTopicOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/providers/Microsoft.EventGrid/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeliveryAttributesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getDeliveryAttributes\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeliveryAttributeListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.eventSubscriptionName,\n    Parameters.scope\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listGlobalBySubscriptionNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listGlobalBySubscriptionForTopicTypeNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.topicTypeName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listGlobalByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listGlobalByResourceGroupForTopicTypeNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.topicTypeName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listRegionalBySubscriptionNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.location\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listRegionalByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.location\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listRegionalBySubscriptionForTopicTypeNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink,\n    Parameters.topicTypeName,\n    Parameters.location\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listRegionalByResourceGroupForTopicTypeNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.topicTypeName,\n    Parameters.location\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.providerNamespace,\n    Parameters.resourceTypeName,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByDomainTopicNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.domainName,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { DomainTopicEventSubscriptions } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  EventSubscription,\n  DomainTopicEventSubscriptionsListNextOptionalParams,\n  DomainTopicEventSubscriptionsListOptionalParams,\n  DomainTopicEventSubscriptionsListResponse,\n  DomainTopicEventSubscriptionsGetOptionalParams,\n  DomainTopicEventSubscriptionsGetResponse,\n  DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams,\n  DomainTopicEventSubscriptionsCreateOrUpdateResponse,\n  DomainTopicEventSubscriptionsDeleteOptionalParams,\n  EventSubscriptionUpdateParameters,\n  DomainTopicEventSubscriptionsUpdateOptionalParams,\n  DomainTopicEventSubscriptionsUpdateResponse,\n  DomainTopicEventSubscriptionsGetFullUrlOptionalParams,\n  DomainTopicEventSubscriptionsGetFullUrlResponse,\n  DomainTopicEventSubscriptionsGetDeliveryAttributesOptionalParams,\n  DomainTopicEventSubscriptionsGetDeliveryAttributesResponse,\n  DomainTopicEventSubscriptionsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DomainTopicEventSubscriptions operations. */\nexport class DomainTopicEventSubscriptionsImpl\n  implements DomainTopicEventSubscriptions {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class DomainTopicEventSubscriptions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all event subscriptions that have been created for a specific domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    options?: DomainTopicEventSubscriptionsListOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listPagingAll(\n      resourceGroupName,\n      domainName,\n      topicName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          domainName,\n          topicName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    options?: DomainTopicEventSubscriptionsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: DomainTopicEventSubscriptionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(\n        resourceGroupName,\n        domainName,\n        topicName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        domainName,\n        topicName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    options?: DomainTopicEventSubscriptionsListOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      domainName,\n      topicName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a nested event subscription for a domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    options?: DomainTopicEventSubscriptionsGetOptionalParams\n  ): Promise<DomainTopicEventSubscriptionsGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        domainName,\n        topicName,\n        eventSubscriptionName,\n        options\n      },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates a new event subscription or updates an existing event subscription.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<DomainTopicEventSubscriptionsCreateOrUpdateResponse>,\n      DomainTopicEventSubscriptionsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<DomainTopicEventSubscriptionsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        domainName,\n        topicName,\n        eventSubscriptionName,\n        eventSubscriptionInfo,\n        options\n      },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates a new event subscription or updates an existing event subscription.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<DomainTopicEventSubscriptionsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      domainName,\n      topicName,\n      eventSubscriptionName,\n      eventSubscriptionInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete a nested existing event subscription for a domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    options?: DomainTopicEventSubscriptionsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        domainName,\n        topicName,\n        eventSubscriptionName,\n        options\n      },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete a nested existing event subscription for a domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    options?: DomainTopicEventSubscriptionsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      domainName,\n      topicName,\n      eventSubscriptionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Update an existing event subscription for a domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param topicName Name of the topic.\n   * @param eventSubscriptionName Name of the event subscription to be updated.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: DomainTopicEventSubscriptionsUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<DomainTopicEventSubscriptionsUpdateResponse>,\n      DomainTopicEventSubscriptionsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<DomainTopicEventSubscriptionsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        domainName,\n        topicName,\n        eventSubscriptionName,\n        eventSubscriptionUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update an existing event subscription for a domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the domain.\n   * @param topicName Name of the topic.\n   * @param eventSubscriptionName Name of the event subscription to be updated.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: DomainTopicEventSubscriptionsUpdateOptionalParams\n  ): Promise<DomainTopicEventSubscriptionsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      domainName,\n      topicName,\n      eventSubscriptionName,\n      eventSubscriptionUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get the full endpoint URL for a nested event subscription for domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  getFullUrl(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    options?: DomainTopicEventSubscriptionsGetFullUrlOptionalParams\n  ): Promise<DomainTopicEventSubscriptionsGetFullUrlResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        domainName,\n        topicName,\n        eventSubscriptionName,\n        options\n      },\n      getFullUrlOperationSpec\n    );\n  }\n\n  /**\n   * List all event subscriptions that have been created for a specific domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    options?: DomainTopicEventSubscriptionsListOptionalParams\n  ): Promise<DomainTopicEventSubscriptionsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, topicName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Get all delivery attributes for an event subscription for domain topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param eventSubscriptionName Name of the event subscription.\n   * @param options The options parameters.\n   */\n  getDeliveryAttributes(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    eventSubscriptionName: string,\n    options?: DomainTopicEventSubscriptionsGetDeliveryAttributesOptionalParams\n  ): Promise<DomainTopicEventSubscriptionsGetDeliveryAttributesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        domainName,\n        topicName,\n        eventSubscriptionName,\n        options\n      },\n      getDeliveryAttributesOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param domainName Name of the top level domain.\n   * @param topicName Name of the domain topic.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    domainName: string,\n    topicName: string,\n    nextLink: string,\n    options?: DomainTopicEventSubscriptionsListNextOptionalParams\n  ): Promise<DomainTopicEventSubscriptionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, domainName, topicName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getFullUrlOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}/getFullUrl\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionFullUrl\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeliveryAttributesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}/getDeliveryAttributes\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeliveryAttributeListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.domainName,\n    Parameters.topicName,\n    Parameters.eventSubscriptionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.domainName,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { SystemTopicEventSubscriptions } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  EventSubscription,\n  SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams,\n  SystemTopicEventSubscriptionsListBySystemTopicOptionalParams,\n  SystemTopicEventSubscriptionsListBySystemTopicResponse,\n  SystemTopicEventSubscriptionsGetOptionalParams,\n  SystemTopicEventSubscriptionsGetResponse,\n  SystemTopicEventSubscriptionsCreateOrUpdateOptionalParams,\n  SystemTopicEventSubscriptionsCreateOrUpdateResponse,\n  SystemTopicEventSubscriptionsDeleteOptionalParams,\n  EventSubscriptionUpdateParameters,\n  SystemTopicEventSubscriptionsUpdateOptionalParams,\n  SystemTopicEventSubscriptionsUpdateResponse,\n  SystemTopicEventSubscriptionsGetFullUrlOptionalParams,\n  SystemTopicEventSubscriptionsGetFullUrlResponse,\n  SystemTopicEventSubscriptionsGetDeliveryAttributesOptionalParams,\n  SystemTopicEventSubscriptionsGetDeliveryAttributesResponse,\n  SystemTopicEventSubscriptionsListBySystemTopicNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing SystemTopicEventSubscriptions operations. */\nexport class SystemTopicEventSubscriptionsImpl\n  implements SystemTopicEventSubscriptions {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class SystemTopicEventSubscriptions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List event subscriptions that belong to a specific system topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param options The options parameters.\n   */\n  public listBySystemTopic(\n    resourceGroupName: string,\n    systemTopicName: string,\n    options?: SystemTopicEventSubscriptionsListBySystemTopicOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listBySystemTopicPagingAll(\n      resourceGroupName,\n      systemTopicName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBySystemTopicPagingPage(\n          resourceGroupName,\n          systemTopicName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listBySystemTopicPagingPage(\n    resourceGroupName: string,\n    systemTopicName: string,\n    options?: SystemTopicEventSubscriptionsListBySystemTopicOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: SystemTopicEventSubscriptionsListBySystemTopicResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listBySystemTopic(\n        resourceGroupName,\n        systemTopicName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listBySystemTopicNext(\n        resourceGroupName,\n        systemTopicName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listBySystemTopicPagingAll(\n    resourceGroupName: string,\n    systemTopicName: string,\n    options?: SystemTopicEventSubscriptionsListBySystemTopicOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listBySystemTopicPagingPage(\n      resourceGroupName,\n      systemTopicName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get an event subscription.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    systemTopicName: string,\n    eventSubscriptionName: string,\n    options?: SystemTopicEventSubscriptionsGetOptionalParams\n  ): Promise<SystemTopicEventSubscriptionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, systemTopicName, eventSubscriptionName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates or updates an event subscription with the specified parameters. Existing\n   * event subscriptions will be updated with this API.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    systemTopicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: SystemTopicEventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<SystemTopicEventSubscriptionsCreateOrUpdateResponse>,\n      SystemTopicEventSubscriptionsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SystemTopicEventSubscriptionsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        systemTopicName,\n        eventSubscriptionName,\n        eventSubscriptionInfo,\n        options\n      },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates or updates an event subscription with the specified parameters. Existing\n   * event subscriptions will be updated with this API.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    systemTopicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: SystemTopicEventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<SystemTopicEventSubscriptionsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      systemTopicName,\n      eventSubscriptionName,\n      eventSubscriptionInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete an existing event subscription of a system topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    systemTopicName: string,\n    eventSubscriptionName: string,\n    options?: SystemTopicEventSubscriptionsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, systemTopicName, eventSubscriptionName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete an existing event subscription of a system topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    systemTopicName: string,\n    eventSubscriptionName: string,\n    options?: SystemTopicEventSubscriptionsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      systemTopicName,\n      eventSubscriptionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Update an existing event subscription of a system topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    systemTopicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: SystemTopicEventSubscriptionsUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<SystemTopicEventSubscriptionsUpdateResponse>,\n      SystemTopicEventSubscriptionsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SystemTopicEventSubscriptionsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        systemTopicName,\n        eventSubscriptionName,\n        eventSubscriptionUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update an existing event subscription of a system topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    systemTopicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: SystemTopicEventSubscriptionsUpdateOptionalParams\n  ): Promise<SystemTopicEventSubscriptionsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      systemTopicName,\n      eventSubscriptionName,\n      eventSubscriptionUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get the full endpoint URL for an event subscription of a system topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  getFullUrl(\n    resourceGroupName: string,\n    systemTopicName: string,\n    eventSubscriptionName: string,\n    options?: SystemTopicEventSubscriptionsGetFullUrlOptionalParams\n  ): Promise<SystemTopicEventSubscriptionsGetFullUrlResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, systemTopicName, eventSubscriptionName, options },\n      getFullUrlOperationSpec\n    );\n  }\n\n  /**\n   * List event subscriptions that belong to a specific system topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param options The options parameters.\n   */\n  private _listBySystemTopic(\n    resourceGroupName: string,\n    systemTopicName: string,\n    options?: SystemTopicEventSubscriptionsListBySystemTopicOptionalParams\n  ): Promise<SystemTopicEventSubscriptionsListBySystemTopicResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, systemTopicName, options },\n      listBySystemTopicOperationSpec\n    );\n  }\n\n  /**\n   * Get all delivery attributes for an event subscription.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  getDeliveryAttributes(\n    resourceGroupName: string,\n    systemTopicName: string,\n    eventSubscriptionName: string,\n    options?: SystemTopicEventSubscriptionsGetDeliveryAttributesOptionalParams\n  ): Promise<SystemTopicEventSubscriptionsGetDeliveryAttributesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, systemTopicName, eventSubscriptionName, options },\n      getDeliveryAttributesOperationSpec\n    );\n  }\n\n  /**\n   * ListBySystemTopicNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param nextLink The nextLink from the previous successful call to the ListBySystemTopic method.\n   * @param options The options parameters.\n   */\n  private _listBySystemTopicNext(\n    resourceGroupName: string,\n    systemTopicName: string,\n    nextLink: string,\n    options?: SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams\n  ): Promise<SystemTopicEventSubscriptionsListBySystemTopicNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, systemTopicName, nextLink, options },\n      listBySystemTopicNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.systemTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.systemTopicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.systemTopicName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.systemTopicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getFullUrlOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}/getFullUrl\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionFullUrl\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.systemTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBySystemTopicOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.systemTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeliveryAttributesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}/eventSubscriptions/{eventSubscriptionName}/getDeliveryAttributes\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeliveryAttributeListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.systemTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBySystemTopicNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.systemTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PartnerTopicEventSubscriptions } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  EventSubscription,\n  PartnerTopicEventSubscriptionsListByPartnerTopicNextOptionalParams,\n  PartnerTopicEventSubscriptionsListByPartnerTopicOptionalParams,\n  PartnerTopicEventSubscriptionsListByPartnerTopicResponse,\n  PartnerTopicEventSubscriptionsGetOptionalParams,\n  PartnerTopicEventSubscriptionsGetResponse,\n  PartnerTopicEventSubscriptionsCreateOrUpdateOptionalParams,\n  PartnerTopicEventSubscriptionsCreateOrUpdateResponse,\n  PartnerTopicEventSubscriptionsDeleteOptionalParams,\n  EventSubscriptionUpdateParameters,\n  PartnerTopicEventSubscriptionsUpdateOptionalParams,\n  PartnerTopicEventSubscriptionsUpdateResponse,\n  PartnerTopicEventSubscriptionsGetFullUrlOptionalParams,\n  PartnerTopicEventSubscriptionsGetFullUrlResponse,\n  PartnerTopicEventSubscriptionsGetDeliveryAttributesOptionalParams,\n  PartnerTopicEventSubscriptionsGetDeliveryAttributesResponse,\n  PartnerTopicEventSubscriptionsListByPartnerTopicNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PartnerTopicEventSubscriptions operations. */\nexport class PartnerTopicEventSubscriptionsImpl\n  implements PartnerTopicEventSubscriptions {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class PartnerTopicEventSubscriptions class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List event subscriptions that belong to a specific partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param options The options parameters.\n   */\n  public listByPartnerTopic(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    options?: PartnerTopicEventSubscriptionsListByPartnerTopicOptionalParams\n  ): PagedAsyncIterableIterator<EventSubscription> {\n    const iter = this.listByPartnerTopicPagingAll(\n      resourceGroupName,\n      partnerTopicName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByPartnerTopicPagingPage(\n          resourceGroupName,\n          partnerTopicName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByPartnerTopicPagingPage(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    options?: PartnerTopicEventSubscriptionsListByPartnerTopicOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<EventSubscription[]> {\n    let result: PartnerTopicEventSubscriptionsListByPartnerTopicResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByPartnerTopic(\n        resourceGroupName,\n        partnerTopicName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByPartnerTopicNext(\n        resourceGroupName,\n        partnerTopicName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByPartnerTopicPagingAll(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    options?: PartnerTopicEventSubscriptionsListByPartnerTopicOptionalParams\n  ): AsyncIterableIterator<EventSubscription> {\n    for await (const page of this.listByPartnerTopicPagingPage(\n      resourceGroupName,\n      partnerTopicName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of an event subscription of a partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be found. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    eventSubscriptionName: string,\n    options?: PartnerTopicEventSubscriptionsGetOptionalParams\n  ): Promise<PartnerTopicEventSubscriptionsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerTopicName, eventSubscriptionName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates or updates an event subscription of a partner topic with the specified\n   * parameters. Existing event subscriptions will be updated with this API.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: PartnerTopicEventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<PartnerTopicEventSubscriptionsCreateOrUpdateResponse>,\n      PartnerTopicEventSubscriptionsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PartnerTopicEventSubscriptionsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        partnerTopicName,\n        eventSubscriptionName,\n        eventSubscriptionInfo,\n        options\n      },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates or updates an event subscription of a partner topic with the specified\n   * parameters. Existing event subscriptions will be updated with this API.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionInfo Event subscription properties containing the destination and filter\n   *                              information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionInfo: EventSubscription,\n    options?: PartnerTopicEventSubscriptionsCreateOrUpdateOptionalParams\n  ): Promise<PartnerTopicEventSubscriptionsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      partnerTopicName,\n      eventSubscriptionName,\n      eventSubscriptionInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete an existing event subscription of a partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    eventSubscriptionName: string,\n    options?: PartnerTopicEventSubscriptionsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, partnerTopicName, eventSubscriptionName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete an existing event subscription of a partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    eventSubscriptionName: string,\n    options?: PartnerTopicEventSubscriptionsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      partnerTopicName,\n      eventSubscriptionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Update an existing event subscription of a partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: PartnerTopicEventSubscriptionsUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<PartnerTopicEventSubscriptionsUpdateResponse>,\n      PartnerTopicEventSubscriptionsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PartnerTopicEventSubscriptionsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        partnerTopicName,\n        eventSubscriptionName,\n        eventSubscriptionUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update an existing event subscription of a partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param eventSubscriptionUpdateParameters Updated event subscription information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    eventSubscriptionName: string,\n    eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters,\n    options?: PartnerTopicEventSubscriptionsUpdateOptionalParams\n  ): Promise<PartnerTopicEventSubscriptionsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      partnerTopicName,\n      eventSubscriptionName,\n      eventSubscriptionUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get the full endpoint URL for an event subscription of a partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  getFullUrl(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    eventSubscriptionName: string,\n    options?: PartnerTopicEventSubscriptionsGetFullUrlOptionalParams\n  ): Promise<PartnerTopicEventSubscriptionsGetFullUrlResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerTopicName, eventSubscriptionName, options },\n      getFullUrlOperationSpec\n    );\n  }\n\n  /**\n   * List event subscriptions that belong to a specific partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param options The options parameters.\n   */\n  private _listByPartnerTopic(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    options?: PartnerTopicEventSubscriptionsListByPartnerTopicOptionalParams\n  ): Promise<PartnerTopicEventSubscriptionsListByPartnerTopicResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerTopicName, options },\n      listByPartnerTopicOperationSpec\n    );\n  }\n\n  /**\n   * Get all delivery attributes for an event subscription of a partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names\n   *                              must be between 3 and 100 characters in length and use alphanumeric letters only.\n   * @param options The options parameters.\n   */\n  getDeliveryAttributes(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    eventSubscriptionName: string,\n    options?: PartnerTopicEventSubscriptionsGetDeliveryAttributesOptionalParams\n  ): Promise<PartnerTopicEventSubscriptionsGetDeliveryAttributesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerTopicName, eventSubscriptionName, options },\n      getDeliveryAttributesOperationSpec\n    );\n  }\n\n  /**\n   * ListByPartnerTopicNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param nextLink The nextLink from the previous successful call to the ListByPartnerTopic method.\n   * @param options The options parameters.\n   */\n  private _listByPartnerTopicNext(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    nextLink: string,\n    options?: PartnerTopicEventSubscriptionsListByPartnerTopicNextOptionalParams\n  ): Promise<PartnerTopicEventSubscriptionsListByPartnerTopicNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerTopicName, nextLink, options },\n      listByPartnerTopicNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.partnerTopicName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/eventSubscriptions/{eventSubscriptionName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    201: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    202: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    204: {\n      bodyMapper: Mappers.EventSubscription\n    },\n    default: {}\n  },\n  requestBody: Parameters.eventSubscriptionUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst getFullUrlOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/eventSubscriptions/{eventSubscriptionName}/getFullUrl\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionFullUrl\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByPartnerTopicOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/eventSubscriptions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getDeliveryAttributesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/eventSubscriptions/{eventSubscriptionName}/getDeliveryAttributes\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeliveryAttributeListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.eventSubscriptionName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByPartnerTopicNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventSubscriptionsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { Operations } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport {\n  Operation,\n  OperationsListOptionalParams,\n  OperationsListResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Operations operations. */\nexport class OperationsImpl implements Operations {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class Operations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List the available operations supported by the Microsoft.EventGrid resource provider.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: OperationsListOptionalParams\n  ): PagedAsyncIterableIterator<Operation> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: OperationsListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<Operation[]> {\n    let result: OperationsListResponse;\n    result = await this._list(options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    options?: OperationsListOptionalParams\n  ): AsyncIterableIterator<Operation> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List the available operations supported by the Microsoft.EventGrid resource provider.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: OperationsListOptionalParams\n  ): Promise<OperationsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.EventGrid/operations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Topics } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  Topic,\n  TopicsListBySubscriptionNextOptionalParams,\n  TopicsListBySubscriptionOptionalParams,\n  TopicsListBySubscriptionResponse,\n  TopicsListByResourceGroupNextOptionalParams,\n  TopicsListByResourceGroupOptionalParams,\n  TopicsListByResourceGroupResponse,\n  EventType,\n  TopicsListEventTypesOptionalParams,\n  TopicsListEventTypesResponse,\n  TopicsGetOptionalParams,\n  TopicsGetResponse,\n  TopicsCreateOrUpdateOptionalParams,\n  TopicsCreateOrUpdateResponse,\n  TopicsDeleteOptionalParams,\n  TopicUpdateParameters,\n  TopicsUpdateOptionalParams,\n  TopicsListSharedAccessKeysOptionalParams,\n  TopicsListSharedAccessKeysResponse,\n  TopicRegenerateKeyRequest,\n  TopicsRegenerateKeyOptionalParams,\n  TopicsRegenerateKeyResponse,\n  TopicsListBySubscriptionNextResponse,\n  TopicsListByResourceGroupNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Topics operations. */\nexport class TopicsImpl implements Topics {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class Topics class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all the topics under an Azure subscription.\n   * @param options The options parameters.\n   */\n  public listBySubscription(\n    options?: TopicsListBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<Topic> {\n    const iter = this.listBySubscriptionPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBySubscriptionPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listBySubscriptionPagingPage(\n    options?: TopicsListBySubscriptionOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Topic[]> {\n    let result: TopicsListBySubscriptionResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listBySubscription(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listBySubscriptionNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listBySubscriptionPagingAll(\n    options?: TopicsListBySubscriptionOptionalParams\n  ): AsyncIterableIterator<Topic> {\n    for await (const page of this.listBySubscriptionPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all the topics under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: TopicsListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<Topic> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: TopicsListByResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Topic[]> {\n    let result: TopicsListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: TopicsListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<Topic> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List event types for a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param providerNamespace Namespace of the provider of the topic.\n   * @param resourceTypeName Name of the topic type.\n   * @param resourceName Name of the topic.\n   * @param options The options parameters.\n   */\n  public listEventTypes(\n    resourceGroupName: string,\n    providerNamespace: string,\n    resourceTypeName: string,\n    resourceName: string,\n    options?: TopicsListEventTypesOptionalParams\n  ): PagedAsyncIterableIterator<EventType> {\n    const iter = this.listEventTypesPagingAll(\n      resourceGroupName,\n      providerNamespace,\n      resourceTypeName,\n      resourceName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listEventTypesPagingPage(\n          resourceGroupName,\n          providerNamespace,\n          resourceTypeName,\n          resourceName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listEventTypesPagingPage(\n    resourceGroupName: string,\n    providerNamespace: string,\n    resourceTypeName: string,\n    resourceName: string,\n    options?: TopicsListEventTypesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<EventType[]> {\n    let result: TopicsListEventTypesResponse;\n    result = await this._listEventTypes(\n      resourceGroupName,\n      providerNamespace,\n      resourceTypeName,\n      resourceName,\n      options\n    );\n    yield result.value || [];\n  }\n\n  private async *listEventTypesPagingAll(\n    resourceGroupName: string,\n    providerNamespace: string,\n    resourceTypeName: string,\n    resourceName: string,\n    options?: TopicsListEventTypesOptionalParams\n  ): AsyncIterableIterator<EventType> {\n    for await (const page of this.listEventTypesPagingPage(\n      resourceGroupName,\n      providerNamespace,\n      resourceTypeName,\n      resourceName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    topicName: string,\n    options?: TopicsGetOptionalParams\n  ): Promise<TopicsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, topicName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates a new topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param topicInfo Topic information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    topicName: string,\n    topicInfo: Topic,\n    options?: TopicsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<TopicsCreateOrUpdateResponse>,\n      TopicsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TopicsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, topicName, topicInfo, options },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates a new topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param topicInfo Topic information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    topicName: string,\n    topicInfo: Topic,\n    options?: TopicsCreateOrUpdateOptionalParams\n  ): Promise<TopicsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      topicName,\n      topicInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete existing topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    topicName: string,\n    options?: TopicsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, topicName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete existing topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    topicName: string,\n    options?: TopicsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      topicName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Asynchronously updates a topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param topicUpdateParameters Topic update information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    topicName: string,\n    topicUpdateParameters: TopicUpdateParameters,\n    options?: TopicsUpdateOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, topicName, topicUpdateParameters, options },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously updates a topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param topicUpdateParameters Topic update information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    topicName: string,\n    topicUpdateParameters: TopicUpdateParameters,\n    options?: TopicsUpdateOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      topicName,\n      topicUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * List all the topics under an Azure subscription.\n   * @param options The options parameters.\n   */\n  private _listBySubscription(\n    options?: TopicsListBySubscriptionOptionalParams\n  ): Promise<TopicsListBySubscriptionResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBySubscriptionOperationSpec\n    );\n  }\n\n  /**\n   * List all the topics under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: TopicsListByResourceGroupOptionalParams\n  ): Promise<TopicsListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * List the two keys used to publish to a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param options The options parameters.\n   */\n  listSharedAccessKeys(\n    resourceGroupName: string,\n    topicName: string,\n    options?: TopicsListSharedAccessKeysOptionalParams\n  ): Promise<TopicsListSharedAccessKeysResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, topicName, options },\n      listSharedAccessKeysOperationSpec\n    );\n  }\n\n  /**\n   * Regenerate a shared access key for a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param regenerateKeyRequest Request body to regenerate key.\n   * @param options The options parameters.\n   */\n  async beginRegenerateKey(\n    resourceGroupName: string,\n    topicName: string,\n    regenerateKeyRequest: TopicRegenerateKeyRequest,\n    options?: TopicsRegenerateKeyOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<TopicsRegenerateKeyResponse>,\n      TopicsRegenerateKeyResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TopicsRegenerateKeyResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, topicName, regenerateKeyRequest, options },\n      regenerateKeyOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Regenerate a shared access key for a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param topicName Name of the topic.\n   * @param regenerateKeyRequest Request body to regenerate key.\n   * @param options The options parameters.\n   */\n  async beginRegenerateKeyAndWait(\n    resourceGroupName: string,\n    topicName: string,\n    regenerateKeyRequest: TopicRegenerateKeyRequest,\n    options?: TopicsRegenerateKeyOptionalParams\n  ): Promise<TopicsRegenerateKeyResponse> {\n    const poller = await this.beginRegenerateKey(\n      resourceGroupName,\n      topicName,\n      regenerateKeyRequest,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * List event types for a topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param providerNamespace Namespace of the provider of the topic.\n   * @param resourceTypeName Name of the topic type.\n   * @param resourceName Name of the topic.\n   * @param options The options parameters.\n   */\n  private _listEventTypes(\n    resourceGroupName: string,\n    providerNamespace: string,\n    resourceTypeName: string,\n    resourceName: string,\n    options?: TopicsListEventTypesOptionalParams\n  ): Promise<TopicsListEventTypesResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        providerNamespace,\n        resourceTypeName,\n        resourceName,\n        options\n      },\n      listEventTypesOperationSpec\n    );\n  }\n\n  /**\n   * ListBySubscriptionNext\n   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.\n   * @param options The options parameters.\n   */\n  private _listBySubscriptionNext(\n    nextLink: string,\n    options?: TopicsListBySubscriptionNextOptionalParams\n  ): Promise<TopicsListBySubscriptionNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listBySubscriptionNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: TopicsListByResourceGroupNextOptionalParams\n  ): Promise<TopicsListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Topic\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Topic\n    },\n    201: {\n      bodyMapper: Mappers.Topic\n    },\n    202: {\n      bodyMapper: Mappers.Topic\n    },\n    204: {\n      bodyMapper: Mappers.Topic\n    },\n    default: {}\n  },\n  requestBody: Parameters.topicInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}\",\n  httpMethod: \"PATCH\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  requestBody: Parameters.topicUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listBySubscriptionOperationSpec: coreClient.OperationSpec = {\n  path: \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopicsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopicsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listSharedAccessKeysOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/listKeys\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopicSharedAccessKeys\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst regenerateKeyOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/regenerateKey\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopicSharedAccessKeys\n    },\n    201: {\n      bodyMapper: Mappers.TopicSharedAccessKeys\n    },\n    202: {\n      bodyMapper: Mappers.TopicSharedAccessKeys\n    },\n    204: {\n      bodyMapper: Mappers.TopicSharedAccessKeys\n    },\n    default: {}\n  },\n  requestBody: Parameters.regenerateKeyRequest1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.topicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listEventTypesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventTypes\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventTypesListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.providerNamespace,\n    Parameters.resourceTypeName,\n    Parameters.resourceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopicsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopicsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PartnerConfigurations } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  PartnerConfiguration,\n  PartnerConfigurationsListByResourceGroupOptionalParams,\n  PartnerConfigurationsListByResourceGroupResponse,\n  PartnerConfigurationsListBySubscriptionNextOptionalParams,\n  PartnerConfigurationsListBySubscriptionOptionalParams,\n  PartnerConfigurationsListBySubscriptionResponse,\n  PartnerConfigurationsGetOptionalParams,\n  PartnerConfigurationsGetResponse,\n  PartnerConfigurationsCreateOrUpdateOptionalParams,\n  PartnerConfigurationsCreateOrUpdateResponse,\n  PartnerConfigurationsDeleteOptionalParams,\n  PartnerConfigurationUpdateParameters,\n  PartnerConfigurationsUpdateOptionalParams,\n  PartnerConfigurationsUpdateResponse,\n  Partner,\n  PartnerConfigurationsAuthorizePartnerOptionalParams,\n  PartnerConfigurationsAuthorizePartnerResponse,\n  PartnerConfigurationsUnauthorizePartnerOptionalParams,\n  PartnerConfigurationsUnauthorizePartnerResponse,\n  PartnerConfigurationsListBySubscriptionNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PartnerConfigurations operations. */\nexport class PartnerConfigurationsImpl implements PartnerConfigurations {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class PartnerConfigurations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all the partner configurations under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: PartnerConfigurationsListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<PartnerConfiguration> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: PartnerConfigurationsListByResourceGroupOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<PartnerConfiguration[]> {\n    let result: PartnerConfigurationsListByResourceGroupResponse;\n    result = await this._listByResourceGroup(resourceGroupName, options);\n    yield result.value || [];\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: PartnerConfigurationsListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<PartnerConfiguration> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all the partner configurations under an Azure subscription.\n   * @param options The options parameters.\n   */\n  public listBySubscription(\n    options?: PartnerConfigurationsListBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<PartnerConfiguration> {\n    const iter = this.listBySubscriptionPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBySubscriptionPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listBySubscriptionPagingPage(\n    options?: PartnerConfigurationsListBySubscriptionOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PartnerConfiguration[]> {\n    let result: PartnerConfigurationsListBySubscriptionResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listBySubscription(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listBySubscriptionNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listBySubscriptionPagingAll(\n    options?: PartnerConfigurationsListBySubscriptionOptionalParams\n  ): AsyncIterableIterator<PartnerConfiguration> {\n    for await (const page of this.listBySubscriptionPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a partner configuration.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    options?: PartnerConfigurationsGetOptionalParams\n  ): Promise<PartnerConfigurationsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Synchronously creates or updates a partner configuration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerConfigurationInfo Partner configuration information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    partnerConfigurationInfo: PartnerConfiguration,\n    options?: PartnerConfigurationsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<PartnerConfigurationsCreateOrUpdateResponse>,\n      PartnerConfigurationsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PartnerConfigurationsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, partnerConfigurationInfo, options },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Synchronously creates or updates a partner configuration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerConfigurationInfo Partner configuration information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    partnerConfigurationInfo: PartnerConfiguration,\n    options?: PartnerConfigurationsCreateOrUpdateOptionalParams\n  ): Promise<PartnerConfigurationsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      partnerConfigurationInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete existing partner configuration.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    options?: PartnerConfigurationsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete existing partner configuration.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    options?: PartnerConfigurationsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(resourceGroupName, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Synchronously updates a partner configuration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerConfigurationUpdateParameters Partner configuration update information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    partnerConfigurationUpdateParameters: PartnerConfigurationUpdateParameters,\n    options?: PartnerConfigurationsUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<PartnerConfigurationsUpdateResponse>,\n      PartnerConfigurationsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PartnerConfigurationsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, partnerConfigurationUpdateParameters, options },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Synchronously updates a partner configuration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerConfigurationUpdateParameters Partner configuration update information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    partnerConfigurationUpdateParameters: PartnerConfigurationUpdateParameters,\n    options?: PartnerConfigurationsUpdateOptionalParams\n  ): Promise<PartnerConfigurationsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      partnerConfigurationUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * List all the partner configurations under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: PartnerConfigurationsListByResourceGroupOptionalParams\n  ): Promise<PartnerConfigurationsListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * List all the partner configurations under an Azure subscription.\n   * @param options The options parameters.\n   */\n  private _listBySubscription(\n    options?: PartnerConfigurationsListBySubscriptionOptionalParams\n  ): Promise<PartnerConfigurationsListBySubscriptionResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBySubscriptionOperationSpec\n    );\n  }\n\n  /**\n   * Authorize a single partner either by partner registration immutable Id or by partner name.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerInfo The information of the partner to be authorized.\n   * @param options The options parameters.\n   */\n  authorizePartner(\n    resourceGroupName: string,\n    partnerInfo: Partner,\n    options?: PartnerConfigurationsAuthorizePartnerOptionalParams\n  ): Promise<PartnerConfigurationsAuthorizePartnerResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerInfo, options },\n      authorizePartnerOperationSpec\n    );\n  }\n\n  /**\n   * Unauthorize a single partner either by partner registration immutable Id or by partner name.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerInfo The information of the partner to be unauthorized.\n   * @param options The options parameters.\n   */\n  unauthorizePartner(\n    resourceGroupName: string,\n    partnerInfo: Partner,\n    options?: PartnerConfigurationsUnauthorizePartnerOptionalParams\n  ): Promise<PartnerConfigurationsUnauthorizePartnerResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerInfo, options },\n      unauthorizePartnerOperationSpec\n    );\n  }\n\n  /**\n   * ListBySubscriptionNext\n   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.\n   * @param options The options parameters.\n   */\n  private _listBySubscriptionNext(\n    nextLink: string,\n    options?: PartnerConfigurationsListBySubscriptionNextOptionalParams\n  ): Promise<PartnerConfigurationsListBySubscriptionNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listBySubscriptionNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerConfigurations/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerConfigurations/default\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    201: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    202: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    204: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    default: {}\n  },\n  requestBody: Parameters.partnerConfigurationInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerConfigurations/default\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerConfigurations/default\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    201: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    202: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    204: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    default: {}\n  },\n  requestBody: Parameters.partnerConfigurationUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerConfigurations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerConfigurationsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBySubscriptionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerConfigurations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerConfigurationsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst authorizePartnerOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerConfigurations/default/authorizePartner\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    default: {}\n  },\n  requestBody: Parameters.partnerInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst unauthorizePartnerOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerConfigurations/default/unauthorizePartner\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerConfiguration\n    },\n    default: {}\n  },\n  requestBody: Parameters.partnerInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerConfigurationsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PartnerNamespaces } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  PartnerNamespace,\n  PartnerNamespacesListBySubscriptionNextOptionalParams,\n  PartnerNamespacesListBySubscriptionOptionalParams,\n  PartnerNamespacesListBySubscriptionResponse,\n  PartnerNamespacesListByResourceGroupNextOptionalParams,\n  PartnerNamespacesListByResourceGroupOptionalParams,\n  PartnerNamespacesListByResourceGroupResponse,\n  PartnerNamespacesGetOptionalParams,\n  PartnerNamespacesGetResponse,\n  PartnerNamespacesCreateOrUpdateOptionalParams,\n  PartnerNamespacesCreateOrUpdateResponse,\n  PartnerNamespacesDeleteOptionalParams,\n  PartnerNamespaceUpdateParameters,\n  PartnerNamespacesUpdateOptionalParams,\n  PartnerNamespacesListSharedAccessKeysOptionalParams,\n  PartnerNamespacesListSharedAccessKeysResponse,\n  PartnerNamespaceRegenerateKeyRequest,\n  PartnerNamespacesRegenerateKeyOptionalParams,\n  PartnerNamespacesRegenerateKeyResponse,\n  PartnerNamespacesListBySubscriptionNextResponse,\n  PartnerNamespacesListByResourceGroupNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PartnerNamespaces operations. */\nexport class PartnerNamespacesImpl implements PartnerNamespaces {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class PartnerNamespaces class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all the partner namespaces under an Azure subscription.\n   * @param options The options parameters.\n   */\n  public listBySubscription(\n    options?: PartnerNamespacesListBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<PartnerNamespace> {\n    const iter = this.listBySubscriptionPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBySubscriptionPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listBySubscriptionPagingPage(\n    options?: PartnerNamespacesListBySubscriptionOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PartnerNamespace[]> {\n    let result: PartnerNamespacesListBySubscriptionResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listBySubscription(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listBySubscriptionNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listBySubscriptionPagingAll(\n    options?: PartnerNamespacesListBySubscriptionOptionalParams\n  ): AsyncIterableIterator<PartnerNamespace> {\n    for await (const page of this.listBySubscriptionPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all the partner namespaces under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: PartnerNamespacesListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<PartnerNamespace> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: PartnerNamespacesListByResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PartnerNamespace[]> {\n    let result: PartnerNamespacesListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: PartnerNamespacesListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<PartnerNamespace> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    options?: PartnerNamespacesGetOptionalParams\n  ): Promise<PartnerNamespacesGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerNamespaceName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates a new partner namespace with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param partnerNamespaceInfo PartnerNamespace information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    partnerNamespaceInfo: PartnerNamespace,\n    options?: PartnerNamespacesCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<PartnerNamespacesCreateOrUpdateResponse>,\n      PartnerNamespacesCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PartnerNamespacesCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        partnerNamespaceName,\n        partnerNamespaceInfo,\n        options\n      },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates a new partner namespace with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param partnerNamespaceInfo PartnerNamespace information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    partnerNamespaceInfo: PartnerNamespace,\n    options?: PartnerNamespacesCreateOrUpdateOptionalParams\n  ): Promise<PartnerNamespacesCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      partnerNamespaceName,\n      partnerNamespaceInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete existing partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    options?: PartnerNamespacesDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, partnerNamespaceName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete existing partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    options?: PartnerNamespacesDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      partnerNamespaceName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Asynchronously updates a partner namespace with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param partnerNamespaceUpdateParameters Partner namespace update information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    partnerNamespaceUpdateParameters: PartnerNamespaceUpdateParameters,\n    options?: PartnerNamespacesUpdateOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        partnerNamespaceName,\n        partnerNamespaceUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously updates a partner namespace with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param partnerNamespaceUpdateParameters Partner namespace update information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    partnerNamespaceUpdateParameters: PartnerNamespaceUpdateParameters,\n    options?: PartnerNamespacesUpdateOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      partnerNamespaceName,\n      partnerNamespaceUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * List all the partner namespaces under an Azure subscription.\n   * @param options The options parameters.\n   */\n  private _listBySubscription(\n    options?: PartnerNamespacesListBySubscriptionOptionalParams\n  ): Promise<PartnerNamespacesListBySubscriptionResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBySubscriptionOperationSpec\n    );\n  }\n\n  /**\n   * List all the partner namespaces under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: PartnerNamespacesListByResourceGroupOptionalParams\n  ): Promise<PartnerNamespacesListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * List the two keys used to publish to a partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param options The options parameters.\n   */\n  listSharedAccessKeys(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    options?: PartnerNamespacesListSharedAccessKeysOptionalParams\n  ): Promise<PartnerNamespacesListSharedAccessKeysResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerNamespaceName, options },\n      listSharedAccessKeysOperationSpec\n    );\n  }\n\n  /**\n   * Regenerate a shared access key for a partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerNamespaceName Name of the partner namespace.\n   * @param regenerateKeyRequest Request body to regenerate key.\n   * @param options The options parameters.\n   */\n  regenerateKey(\n    resourceGroupName: string,\n    partnerNamespaceName: string,\n    regenerateKeyRequest: PartnerNamespaceRegenerateKeyRequest,\n    options?: PartnerNamespacesRegenerateKeyOptionalParams\n  ): Promise<PartnerNamespacesRegenerateKeyResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        partnerNamespaceName,\n        regenerateKeyRequest,\n        options\n      },\n      regenerateKeyOperationSpec\n    );\n  }\n\n  /**\n   * ListBySubscriptionNext\n   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.\n   * @param options The options parameters.\n   */\n  private _listBySubscriptionNext(\n    nextLink: string,\n    options?: PartnerNamespacesListBySubscriptionNextOptionalParams\n  ): Promise<PartnerNamespacesListBySubscriptionNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listBySubscriptionNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: PartnerNamespacesListByResourceGroupNextOptionalParams\n  ): Promise<PartnerNamespacesListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerNamespace\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerNamespace\n    },\n    201: {\n      bodyMapper: Mappers.PartnerNamespace\n    },\n    202: {\n      bodyMapper: Mappers.PartnerNamespace\n    },\n    204: {\n      bodyMapper: Mappers.PartnerNamespace\n    },\n    default: {}\n  },\n  requestBody: Parameters.partnerNamespaceInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}\",\n  httpMethod: \"PATCH\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  requestBody: Parameters.partnerNamespaceUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listBySubscriptionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerNamespaces\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerNamespacesListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerNamespacesListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listSharedAccessKeysOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/listKeys\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerNamespaceSharedAccessKeys\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst regenerateKeyOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/regenerateKey\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerNamespaceSharedAccessKeys\n    },\n    default: {}\n  },\n  requestBody: Parameters.regenerateKeyRequest2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerNamespaceName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerNamespacesListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerNamespacesListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PartnerRegistrations } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  PartnerRegistration,\n  PartnerRegistrationsListBySubscriptionNextOptionalParams,\n  PartnerRegistrationsListBySubscriptionOptionalParams,\n  PartnerRegistrationsListBySubscriptionResponse,\n  PartnerRegistrationsListByResourceGroupNextOptionalParams,\n  PartnerRegistrationsListByResourceGroupOptionalParams,\n  PartnerRegistrationsListByResourceGroupResponse,\n  PartnerRegistrationsGetOptionalParams,\n  PartnerRegistrationsGetResponse,\n  PartnerRegistrationsCreateOrUpdateOptionalParams,\n  PartnerRegistrationsCreateOrUpdateResponse,\n  PartnerRegistrationsDeleteOptionalParams,\n  PartnerRegistrationUpdateParameters,\n  PartnerRegistrationsUpdateOptionalParams,\n  PartnerRegistrationsListBySubscriptionNextResponse,\n  PartnerRegistrationsListByResourceGroupNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PartnerRegistrations operations. */\nexport class PartnerRegistrationsImpl implements PartnerRegistrations {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class PartnerRegistrations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all the partner registrations under an Azure subscription.\n   * @param options The options parameters.\n   */\n  public listBySubscription(\n    options?: PartnerRegistrationsListBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<PartnerRegistration> {\n    const iter = this.listBySubscriptionPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBySubscriptionPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listBySubscriptionPagingPage(\n    options?: PartnerRegistrationsListBySubscriptionOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PartnerRegistration[]> {\n    let result: PartnerRegistrationsListBySubscriptionResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listBySubscription(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listBySubscriptionNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listBySubscriptionPagingAll(\n    options?: PartnerRegistrationsListBySubscriptionOptionalParams\n  ): AsyncIterableIterator<PartnerRegistration> {\n    for await (const page of this.listBySubscriptionPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all the partner registrations under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: PartnerRegistrationsListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<PartnerRegistration> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: PartnerRegistrationsListByResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PartnerRegistration[]> {\n    let result: PartnerRegistrationsListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: PartnerRegistrationsListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<PartnerRegistration> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets a partner registration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerRegistrationName Name of the partner registration.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    partnerRegistrationName: string,\n    options?: PartnerRegistrationsGetOptionalParams\n  ): Promise<PartnerRegistrationsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerRegistrationName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates a new partner registration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerRegistrationName Name of the partner registration.\n   * @param partnerRegistrationInfo PartnerRegistration information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    partnerRegistrationName: string,\n    partnerRegistrationInfo: PartnerRegistration,\n    options?: PartnerRegistrationsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<PartnerRegistrationsCreateOrUpdateResponse>,\n      PartnerRegistrationsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PartnerRegistrationsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        partnerRegistrationName,\n        partnerRegistrationInfo,\n        options\n      },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a new partner registration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerRegistrationName Name of the partner registration.\n   * @param partnerRegistrationInfo PartnerRegistration information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    partnerRegistrationName: string,\n    partnerRegistrationInfo: PartnerRegistration,\n    options?: PartnerRegistrationsCreateOrUpdateOptionalParams\n  ): Promise<PartnerRegistrationsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      partnerRegistrationName,\n      partnerRegistrationInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a partner registration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerRegistrationName Name of the partner registration.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    partnerRegistrationName: string,\n    options?: PartnerRegistrationsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, partnerRegistrationName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a partner registration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerRegistrationName Name of the partner registration.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    partnerRegistrationName: string,\n    options?: PartnerRegistrationsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      partnerRegistrationName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates a partner registration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerRegistrationName Name of the partner registration.\n   * @param partnerRegistrationUpdateParameters Partner registration update information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    partnerRegistrationName: string,\n    partnerRegistrationUpdateParameters: PartnerRegistrationUpdateParameters,\n    options?: PartnerRegistrationsUpdateOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        partnerRegistrationName,\n        partnerRegistrationUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates a partner registration with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerRegistrationName Name of the partner registration.\n   * @param partnerRegistrationUpdateParameters Partner registration update information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    partnerRegistrationName: string,\n    partnerRegistrationUpdateParameters: PartnerRegistrationUpdateParameters,\n    options?: PartnerRegistrationsUpdateOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      partnerRegistrationName,\n      partnerRegistrationUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * List all the partner registrations under an Azure subscription.\n   * @param options The options parameters.\n   */\n  private _listBySubscription(\n    options?: PartnerRegistrationsListBySubscriptionOptionalParams\n  ): Promise<PartnerRegistrationsListBySubscriptionResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBySubscriptionOperationSpec\n    );\n  }\n\n  /**\n   * List all the partner registrations under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: PartnerRegistrationsListByResourceGroupOptionalParams\n  ): Promise<PartnerRegistrationsListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * ListBySubscriptionNext\n   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.\n   * @param options The options parameters.\n   */\n  private _listBySubscriptionNext(\n    nextLink: string,\n    options?: PartnerRegistrationsListBySubscriptionNextOptionalParams\n  ): Promise<PartnerRegistrationsListBySubscriptionNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listBySubscriptionNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: PartnerRegistrationsListByResourceGroupNextOptionalParams\n  ): Promise<PartnerRegistrationsListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerRegistration\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerRegistrationName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerRegistration\n    },\n    201: {\n      bodyMapper: Mappers.PartnerRegistration\n    },\n    202: {\n      bodyMapper: Mappers.PartnerRegistration\n    },\n    204: {\n      bodyMapper: Mappers.PartnerRegistration\n    },\n    default: {}\n  },\n  requestBody: Parameters.partnerRegistrationInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerRegistrationName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerRegistrationName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}\",\n  httpMethod: \"PATCH\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  requestBody: Parameters.partnerRegistrationUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerRegistrationName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listBySubscriptionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerRegistrations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerRegistrationsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerRegistrationsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerRegistrationsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerRegistrationsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PartnerTopics } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  PartnerTopic,\n  PartnerTopicsListBySubscriptionNextOptionalParams,\n  PartnerTopicsListBySubscriptionOptionalParams,\n  PartnerTopicsListBySubscriptionResponse,\n  PartnerTopicsListByResourceGroupNextOptionalParams,\n  PartnerTopicsListByResourceGroupOptionalParams,\n  PartnerTopicsListByResourceGroupResponse,\n  PartnerTopicsGetOptionalParams,\n  PartnerTopicsGetResponse,\n  PartnerTopicsCreateOrUpdateOptionalParams,\n  PartnerTopicsCreateOrUpdateResponse,\n  PartnerTopicsDeleteOptionalParams,\n  PartnerTopicUpdateParameters,\n  PartnerTopicsUpdateOptionalParams,\n  PartnerTopicsUpdateResponse,\n  PartnerTopicsActivateOptionalParams,\n  PartnerTopicsActivateResponse,\n  PartnerTopicsDeactivateOptionalParams,\n  PartnerTopicsDeactivateResponse,\n  PartnerTopicsListBySubscriptionNextResponse,\n  PartnerTopicsListByResourceGroupNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PartnerTopics operations. */\nexport class PartnerTopicsImpl implements PartnerTopics {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class PartnerTopics class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all the partner topics under an Azure subscription.\n   * @param options The options parameters.\n   */\n  public listBySubscription(\n    options?: PartnerTopicsListBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<PartnerTopic> {\n    const iter = this.listBySubscriptionPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBySubscriptionPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listBySubscriptionPagingPage(\n    options?: PartnerTopicsListBySubscriptionOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PartnerTopic[]> {\n    let result: PartnerTopicsListBySubscriptionResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listBySubscription(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listBySubscriptionNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listBySubscriptionPagingAll(\n    options?: PartnerTopicsListBySubscriptionOptionalParams\n  ): AsyncIterableIterator<PartnerTopic> {\n    for await (const page of this.listBySubscriptionPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all the partner topics under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: PartnerTopicsListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<PartnerTopic> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: PartnerTopicsListByResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PartnerTopic[]> {\n    let result: PartnerTopicsListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: PartnerTopicsListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<PartnerTopic> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    options?: PartnerTopicsGetOptionalParams\n  ): Promise<PartnerTopicsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerTopicName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates a new partner topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param partnerTopicInfo Partner Topic information.\n   * @param options The options parameters.\n   */\n  createOrUpdate(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    partnerTopicInfo: PartnerTopic,\n    options?: PartnerTopicsCreateOrUpdateOptionalParams\n  ): Promise<PartnerTopicsCreateOrUpdateResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerTopicName, partnerTopicInfo, options },\n      createOrUpdateOperationSpec\n    );\n  }\n\n  /**\n   * Delete existing partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    options?: PartnerTopicsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, partnerTopicName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete existing partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    options?: PartnerTopicsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      partnerTopicName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Asynchronously updates a partner topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param partnerTopicUpdateParameters PartnerTopic update information.\n   * @param options The options parameters.\n   */\n  update(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    partnerTopicUpdateParameters: PartnerTopicUpdateParameters,\n    options?: PartnerTopicsUpdateOptionalParams\n  ): Promise<PartnerTopicsUpdateResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        partnerTopicName,\n        partnerTopicUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n  }\n\n  /**\n   * List all the partner topics under an Azure subscription.\n   * @param options The options parameters.\n   */\n  private _listBySubscription(\n    options?: PartnerTopicsListBySubscriptionOptionalParams\n  ): Promise<PartnerTopicsListBySubscriptionResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBySubscriptionOperationSpec\n    );\n  }\n\n  /**\n   * List all the partner topics under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: PartnerTopicsListByResourceGroupOptionalParams\n  ): Promise<PartnerTopicsListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * Activate a newly created partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param options The options parameters.\n   */\n  activate(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    options?: PartnerTopicsActivateOptionalParams\n  ): Promise<PartnerTopicsActivateResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerTopicName, options },\n      activateOperationSpec\n    );\n  }\n\n  /**\n   * Deactivate specific partner topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param partnerTopicName Name of the partner topic.\n   * @param options The options parameters.\n   */\n  deactivate(\n    resourceGroupName: string,\n    partnerTopicName: string,\n    options?: PartnerTopicsDeactivateOptionalParams\n  ): Promise<PartnerTopicsDeactivateResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, partnerTopicName, options },\n      deactivateOperationSpec\n    );\n  }\n\n  /**\n   * ListBySubscriptionNext\n   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.\n   * @param options The options parameters.\n   */\n  private _listBySubscriptionNext(\n    nextLink: string,\n    options?: PartnerTopicsListBySubscriptionNextOptionalParams\n  ): Promise<PartnerTopicsListBySubscriptionNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listBySubscriptionNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: PartnerTopicsListByResourceGroupNextOptionalParams\n  ): Promise<PartnerTopicsListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerTopic\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerTopic\n    },\n    201: {\n      bodyMapper: Mappers.PartnerTopic\n    },\n    default: {}\n  },\n  requestBody: Parameters.partnerTopicInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerTopicName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {},\n    201: {\n      bodyMapper: Mappers.PartnerTopic\n    },\n    default: {}\n  },\n  requestBody: Parameters.partnerTopicUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listBySubscriptionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerTopics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerTopicsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerTopicsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst activateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/activate\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerTopic\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deactivateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/deactivate\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerTopic\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.partnerTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerTopicsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PartnerTopicsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PrivateEndpointConnections } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  PrivateEndpointConnection,\n  PrivateEndpointConnectionsParentType,\n  PrivateEndpointConnectionsListByResourceNextOptionalParams,\n  PrivateEndpointConnectionsListByResourceOptionalParams,\n  PrivateEndpointConnectionsListByResourceResponse,\n  PrivateEndpointConnectionsGetOptionalParams,\n  PrivateEndpointConnectionsGetResponse,\n  PrivateEndpointConnectionsUpdateOptionalParams,\n  PrivateEndpointConnectionsUpdateResponse,\n  PrivateEndpointConnectionsDeleteOptionalParams,\n  PrivateEndpointConnectionsListByResourceNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PrivateEndpointConnections operations. */\nexport class PrivateEndpointConnectionsImpl\n  implements PrivateEndpointConnections {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class PrivateEndpointConnections class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get all private endpoint connections under a topic, domain, or partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param options The options parameters.\n   */\n  public listByResource(\n    resourceGroupName: string,\n    parentType: PrivateEndpointConnectionsParentType,\n    parentName: string,\n    options?: PrivateEndpointConnectionsListByResourceOptionalParams\n  ): PagedAsyncIterableIterator<PrivateEndpointConnection> {\n    const iter = this.listByResourcePagingAll(\n      resourceGroupName,\n      parentType,\n      parentName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourcePagingPage(\n          resourceGroupName,\n          parentType,\n          parentName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourcePagingPage(\n    resourceGroupName: string,\n    parentType: PrivateEndpointConnectionsParentType,\n    parentName: string,\n    options?: PrivateEndpointConnectionsListByResourceOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PrivateEndpointConnection[]> {\n    let result: PrivateEndpointConnectionsListByResourceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResource(\n        resourceGroupName,\n        parentType,\n        parentName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceNext(\n        resourceGroupName,\n        parentType,\n        parentName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourcePagingAll(\n    resourceGroupName: string,\n    parentType: PrivateEndpointConnectionsParentType,\n    parentName: string,\n    options?: PrivateEndpointConnectionsListByResourceOptionalParams\n  ): AsyncIterableIterator<PrivateEndpointConnection> {\n    for await (const page of this.listByResourcePagingPage(\n      resourceGroupName,\n      parentType,\n      parentName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get a specific private endpoint connection under a topic, domain, or partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param privateEndpointConnectionName The name of the private endpoint connection connection.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    parentType: PrivateEndpointConnectionsParentType,\n    parentName: string,\n    privateEndpointConnectionName: string,\n    options?: PrivateEndpointConnectionsGetOptionalParams\n  ): Promise<PrivateEndpointConnectionsGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        parentType,\n        parentName,\n        privateEndpointConnectionName,\n        options\n      },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Update a specific private endpoint connection under a topic, domain or partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param privateEndpointConnectionName The name of the private endpoint connection connection.\n   * @param privateEndpointConnection The private endpoint connection object to update.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    parentType: PrivateEndpointConnectionsParentType,\n    parentName: string,\n    privateEndpointConnectionName: string,\n    privateEndpointConnection: PrivateEndpointConnection,\n    options?: PrivateEndpointConnectionsUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<PrivateEndpointConnectionsUpdateResponse>,\n      PrivateEndpointConnectionsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PrivateEndpointConnectionsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        parentType,\n        parentName,\n        privateEndpointConnectionName,\n        privateEndpointConnection,\n        options\n      },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update a specific private endpoint connection under a topic, domain or partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param privateEndpointConnectionName The name of the private endpoint connection connection.\n   * @param privateEndpointConnection The private endpoint connection object to update.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    parentType: PrivateEndpointConnectionsParentType,\n    parentName: string,\n    privateEndpointConnectionName: string,\n    privateEndpointConnection: PrivateEndpointConnection,\n    options?: PrivateEndpointConnectionsUpdateOptionalParams\n  ): Promise<PrivateEndpointConnectionsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      parentType,\n      parentName,\n      privateEndpointConnectionName,\n      privateEndpointConnection,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete a specific private endpoint connection under a topic, domain, or partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param privateEndpointConnectionName The name of the private endpoint connection connection.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    parentType: PrivateEndpointConnectionsParentType,\n    parentName: string,\n    privateEndpointConnectionName: string,\n    options?: PrivateEndpointConnectionsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        parentType,\n        parentName,\n        privateEndpointConnectionName,\n        options\n      },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete a specific private endpoint connection under a topic, domain, or partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param privateEndpointConnectionName The name of the private endpoint connection connection.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    parentType: PrivateEndpointConnectionsParentType,\n    parentName: string,\n    privateEndpointConnectionName: string,\n    options?: PrivateEndpointConnectionsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      parentType,\n      parentName,\n      privateEndpointConnectionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get all private endpoint connections under a topic, domain, or partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param options The options parameters.\n   */\n  private _listByResource(\n    resourceGroupName: string,\n    parentType: PrivateEndpointConnectionsParentType,\n    parentName: string,\n    options?: PrivateEndpointConnectionsListByResourceOptionalParams\n  ): Promise<PrivateEndpointConnectionsListByResourceResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, parentType, parentName, options },\n      listByResourceOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param nextLink The nextLink from the previous successful call to the ListByResource method.\n   * @param options The options parameters.\n   */\n  private _listByResourceNext(\n    resourceGroupName: string,\n    parentType: PrivateEndpointConnectionsParentType,\n    parentName: string,\n    nextLink: string,\n    options?: PrivateEndpointConnectionsListByResourceNextOptionalParams\n  ): Promise<PrivateEndpointConnectionsListByResourceNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, parentType, parentName, nextLink, options },\n      listByResourceNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.parentType,\n    Parameters.parentName,\n    Parameters.privateEndpointConnectionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    201: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    202: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    204: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    default: {}\n  },\n  requestBody: Parameters.privateEndpointConnection,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.parentType,\n    Parameters.parentName,\n    Parameters.privateEndpointConnectionName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.parentType,\n    Parameters.parentName,\n    Parameters.privateEndpointConnectionName\n  ],\n  serializer\n};\nconst listByResourceOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateEndpointConnections\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnectionListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.parentType,\n    Parameters.parentName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnectionListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.parentType,\n    Parameters.parentName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PrivateLinkResources } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport {\n  PrivateLinkResource,\n  PrivateLinkResourcesListByResourceNextOptionalParams,\n  PrivateLinkResourcesListByResourceOptionalParams,\n  PrivateLinkResourcesListByResourceResponse,\n  PrivateLinkResourcesGetOptionalParams,\n  PrivateLinkResourcesGetResponse,\n  PrivateLinkResourcesListByResourceNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PrivateLinkResources operations. */\nexport class PrivateLinkResourcesImpl implements PrivateLinkResources {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class PrivateLinkResources class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all the private link resources under a topic, domain, or partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param options The options parameters.\n   */\n  public listByResource(\n    resourceGroupName: string,\n    parentType: string,\n    parentName: string,\n    options?: PrivateLinkResourcesListByResourceOptionalParams\n  ): PagedAsyncIterableIterator<PrivateLinkResource> {\n    const iter = this.listByResourcePagingAll(\n      resourceGroupName,\n      parentType,\n      parentName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourcePagingPage(\n          resourceGroupName,\n          parentType,\n          parentName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourcePagingPage(\n    resourceGroupName: string,\n    parentType: string,\n    parentName: string,\n    options?: PrivateLinkResourcesListByResourceOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PrivateLinkResource[]> {\n    let result: PrivateLinkResourcesListByResourceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResource(\n        resourceGroupName,\n        parentType,\n        parentName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceNext(\n        resourceGroupName,\n        parentType,\n        parentName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourcePagingAll(\n    resourceGroupName: string,\n    parentType: string,\n    parentName: string,\n    options?: PrivateLinkResourcesListByResourceOptionalParams\n  ): AsyncIterableIterator<PrivateLinkResource> {\n    for await (const page of this.listByResourcePagingPage(\n      resourceGroupName,\n      parentType,\n      parentName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a private link resource.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param privateLinkResourceName The name of private link resource.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    parentType: string,\n    parentName: string,\n    privateLinkResourceName: string,\n    options?: PrivateLinkResourcesGetOptionalParams\n  ): Promise<PrivateLinkResourcesGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        parentType,\n        parentName,\n        privateLinkResourceName,\n        options\n      },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * List all the private link resources under a topic, domain, or partner namespace.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param options The options parameters.\n   */\n  private _listByResource(\n    resourceGroupName: string,\n    parentType: string,\n    parentName: string,\n    options?: PrivateLinkResourcesListByResourceOptionalParams\n  ): Promise<PrivateLinkResourcesListByResourceResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, parentType, parentName, options },\n      listByResourceOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param parentType The type of the parent resource. This can be either \\'topics\\', \\'domains\\', or\n   *                   \\'partnerNamespaces\\'.\n   * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or\n   *                   partner namespace name).\n   * @param nextLink The nextLink from the previous successful call to the ListByResource method.\n   * @param options The options parameters.\n   */\n  private _listByResourceNext(\n    resourceGroupName: string,\n    parentType: string,\n    parentName: string,\n    nextLink: string,\n    options?: PrivateLinkResourcesListByResourceNextOptionalParams\n  ): Promise<PrivateLinkResourcesListByResourceNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, parentType, parentName, nextLink, options },\n      listByResourceNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateLinkResources/{privateLinkResourceName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateLinkResource\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.parentName,\n    Parameters.parentType1,\n    Parameters.privateLinkResourceName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{parentType}/{parentName}/privateLinkResources\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateLinkResourcesListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.parentName,\n    Parameters.parentType1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateLinkResourcesListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink,\n    Parameters.parentName,\n    Parameters.parentType1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { SystemTopics } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport { PollerLike, PollOperationState, LroEngine } from \"@azure/core-lro\";\nimport { LroImpl } from \"../lroImpl\";\nimport {\n  SystemTopic,\n  SystemTopicsListBySubscriptionNextOptionalParams,\n  SystemTopicsListBySubscriptionOptionalParams,\n  SystemTopicsListBySubscriptionResponse,\n  SystemTopicsListByResourceGroupNextOptionalParams,\n  SystemTopicsListByResourceGroupOptionalParams,\n  SystemTopicsListByResourceGroupResponse,\n  SystemTopicsGetOptionalParams,\n  SystemTopicsGetResponse,\n  SystemTopicsCreateOrUpdateOptionalParams,\n  SystemTopicsCreateOrUpdateResponse,\n  SystemTopicsDeleteOptionalParams,\n  SystemTopicUpdateParameters,\n  SystemTopicsUpdateOptionalParams,\n  SystemTopicsUpdateResponse,\n  SystemTopicsListBySubscriptionNextResponse,\n  SystemTopicsListByResourceGroupNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing SystemTopics operations. */\nexport class SystemTopicsImpl implements SystemTopics {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class SystemTopics class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all the system topics under an Azure subscription.\n   * @param options The options parameters.\n   */\n  public listBySubscription(\n    options?: SystemTopicsListBySubscriptionOptionalParams\n  ): PagedAsyncIterableIterator<SystemTopic> {\n    const iter = this.listBySubscriptionPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listBySubscriptionPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listBySubscriptionPagingPage(\n    options?: SystemTopicsListBySubscriptionOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<SystemTopic[]> {\n    let result: SystemTopicsListBySubscriptionResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listBySubscription(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listBySubscriptionNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listBySubscriptionPagingAll(\n    options?: SystemTopicsListBySubscriptionOptionalParams\n  ): AsyncIterableIterator<SystemTopic> {\n    for await (const page of this.listBySubscriptionPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all the system topics under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: SystemTopicsListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<SystemTopic> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: SystemTopicsListByResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<SystemTopic[]> {\n    let result: SystemTopicsListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: SystemTopicsListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<SystemTopic> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a system topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    systemTopicName: string,\n    options?: SystemTopicsGetOptionalParams\n  ): Promise<SystemTopicsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, systemTopicName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Asynchronously creates a new system topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param systemTopicInfo System Topic information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    systemTopicName: string,\n    systemTopicInfo: SystemTopic,\n    options?: SystemTopicsCreateOrUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<SystemTopicsCreateOrUpdateResponse>,\n      SystemTopicsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SystemTopicsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, systemTopicName, systemTopicInfo, options },\n      createOrUpdateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously creates a new system topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param systemTopicInfo System Topic information.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    systemTopicName: string,\n    systemTopicInfo: SystemTopic,\n    options?: SystemTopicsCreateOrUpdateOptionalParams\n  ): Promise<SystemTopicsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      systemTopicName,\n      systemTopicInfo,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Delete existing system topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    systemTopicName: string,\n    options?: SystemTopicsDeleteOptionalParams\n  ): Promise<PollerLike<PollOperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      { resourceGroupName, systemTopicName, options },\n      deleteOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Delete existing system topic.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    systemTopicName: string,\n    options?: SystemTopicsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      systemTopicName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Asynchronously updates a system topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param systemTopicUpdateParameters SystemTopic update information.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    systemTopicName: string,\n    systemTopicUpdateParameters: SystemTopicUpdateParameters,\n    options?: SystemTopicsUpdateOptionalParams\n  ): Promise<\n    PollerLike<\n      PollOperationState<SystemTopicsUpdateResponse>,\n      SystemTopicsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<SystemTopicsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = new LroImpl(\n      sendOperation,\n      {\n        resourceGroupName,\n        systemTopicName,\n        systemTopicUpdateParameters,\n        options\n      },\n      updateOperationSpec\n    );\n    const poller = new LroEngine(lro, {\n      resumeFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Asynchronously updates a system topic with the specified parameters.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param systemTopicName Name of the system topic.\n   * @param systemTopicUpdateParameters SystemTopic update information.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    systemTopicName: string,\n    systemTopicUpdateParameters: SystemTopicUpdateParameters,\n    options?: SystemTopicsUpdateOptionalParams\n  ): Promise<SystemTopicsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      systemTopicName,\n      systemTopicUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * List all the system topics under an Azure subscription.\n   * @param options The options parameters.\n   */\n  private _listBySubscription(\n    options?: SystemTopicsListBySubscriptionOptionalParams\n  ): Promise<SystemTopicsListBySubscriptionResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listBySubscriptionOperationSpec\n    );\n  }\n\n  /**\n   * List all the system topics under a resource group.\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: SystemTopicsListByResourceGroupOptionalParams\n  ): Promise<SystemTopicsListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * ListBySubscriptionNext\n   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.\n   * @param options The options parameters.\n   */\n  private _listBySubscriptionNext(\n    nextLink: string,\n    options?: SystemTopicsListBySubscriptionNextOptionalParams\n  ): Promise<SystemTopicsListBySubscriptionNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listBySubscriptionNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The name of the resource group within the user's subscription.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: SystemTopicsListByResourceGroupNextOptionalParams\n  ): Promise<SystemTopicsListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SystemTopic\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.systemTopicName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SystemTopic\n    },\n    201: {\n      bodyMapper: Mappers.SystemTopic\n    },\n    202: {\n      bodyMapper: Mappers.SystemTopic\n    },\n    204: {\n      bodyMapper: Mappers.SystemTopic\n    },\n    default: {}\n  },\n  requestBody: Parameters.systemTopicInfo,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.systemTopicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.systemTopicName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics/{systemTopicName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SystemTopic\n    },\n    201: {\n      bodyMapper: Mappers.SystemTopic\n    },\n    202: {\n      bodyMapper: Mappers.SystemTopic\n    },\n    204: {\n      bodyMapper: Mappers.SystemTopic\n    },\n    default: {}\n  },\n  requestBody: Parameters.systemTopicUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.systemTopicName\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst listBySubscriptionOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/systemTopics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SystemTopicsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/systemTopics\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SystemTopicsListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SystemTopicsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SystemTopicsListResult\n    },\n    default: {}\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { ExtensionTopics } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport {\n  ExtensionTopicsGetOptionalParams,\n  ExtensionTopicsGetResponse\n} from \"../models\";\n\n/** Class containing ExtensionTopics operations. */\nexport class ExtensionTopicsImpl implements ExtensionTopics {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class ExtensionTopics class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get the properties of an extension topic.\n   * @param scope The identifier of the resource to which extension topic is queried. The scope can be a\n   *              subscription, or a resource group, or a top level resource belonging to a resource provider\n   *              namespace. For example, use '/subscriptions/{subscriptionId}/' for a subscription,\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and\n   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'\n   *              for Azure resource.\n   * @param options The options parameters.\n   */\n  get(\n    scope: string,\n    options?: ExtensionTopicsGetOptionalParams\n  ): Promise<ExtensionTopicsGetResponse> {\n    return this.client.sendOperationRequest(\n      { scope, options },\n      getOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/{scope}/providers/Microsoft.EventGrid/extensionTopics/default\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ExtensionTopic\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.scope1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { TopicTypes } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport {\n  TopicTypeInfo,\n  TopicTypesListOptionalParams,\n  TopicTypesListResponse,\n  EventType,\n  TopicTypesListEventTypesOptionalParams,\n  TopicTypesListEventTypesResponse,\n  TopicTypesGetOptionalParams,\n  TopicTypesGetResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing TopicTypes operations. */\nexport class TopicTypesImpl implements TopicTypes {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class TopicTypes class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all registered topic types.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: TopicTypesListOptionalParams\n  ): PagedAsyncIterableIterator<TopicTypeInfo> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: TopicTypesListOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<TopicTypeInfo[]> {\n    let result: TopicTypesListResponse;\n    result = await this._list(options);\n    yield result.value || [];\n  }\n\n  private async *listPagingAll(\n    options?: TopicTypesListOptionalParams\n  ): AsyncIterableIterator<TopicTypeInfo> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List event types for a topic type.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  public listEventTypes(\n    topicTypeName: string,\n    options?: TopicTypesListEventTypesOptionalParams\n  ): PagedAsyncIterableIterator<EventType> {\n    const iter = this.listEventTypesPagingAll(topicTypeName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listEventTypesPagingPage(topicTypeName, options, settings);\n      }\n    };\n  }\n\n  private async *listEventTypesPagingPage(\n    topicTypeName: string,\n    options?: TopicTypesListEventTypesOptionalParams,\n    _settings?: PageSettings\n  ): AsyncIterableIterator<EventType[]> {\n    let result: TopicTypesListEventTypesResponse;\n    result = await this._listEventTypes(topicTypeName, options);\n    yield result.value || [];\n  }\n\n  private async *listEventTypesPagingAll(\n    topicTypeName: string,\n    options?: TopicTypesListEventTypesOptionalParams\n  ): AsyncIterableIterator<EventType> {\n    for await (const page of this.listEventTypesPagingPage(\n      topicTypeName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all registered topic types.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: TopicTypesListOptionalParams\n  ): Promise<TopicTypesListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Get information about a topic type.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  get(\n    topicTypeName: string,\n    options?: TopicTypesGetOptionalParams\n  ): Promise<TopicTypesGetResponse> {\n    return this.client.sendOperationRequest(\n      { topicTypeName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * List event types for a topic type.\n   * @param topicTypeName Name of the topic type.\n   * @param options The options parameters.\n   */\n  private _listEventTypes(\n    topicTypeName: string,\n    options?: TopicTypesListEventTypesOptionalParams\n  ): Promise<TopicTypesListEventTypesResponse> {\n    return this.client.sendOperationRequest(\n      { topicTypeName, options },\n      listEventTypesOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.EventGrid/topicTypes\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopicTypesListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TopicTypeInfo\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.topicTypeName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listEventTypesOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventTypesListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.topicTypeName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { VerifiedPartners } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { EventGridManagementClient } from \"../eventGridManagementClient\";\nimport {\n  VerifiedPartner,\n  VerifiedPartnersListNextOptionalParams,\n  VerifiedPartnersListOptionalParams,\n  VerifiedPartnersListResponse,\n  VerifiedPartnersGetOptionalParams,\n  VerifiedPartnersGetResponse,\n  VerifiedPartnersListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing VerifiedPartners operations. */\nexport class VerifiedPartnersImpl implements VerifiedPartners {\n  private readonly client: EventGridManagementClient;\n\n  /**\n   * Initialize a new instance of the class VerifiedPartners class.\n   * @param client Reference to the service client\n   */\n  constructor(client: EventGridManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get a list of all verified partners.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: VerifiedPartnersListOptionalParams\n  ): PagedAsyncIterableIterator<VerifiedPartner> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: VerifiedPartnersListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<VerifiedPartner[]> {\n    let result: VerifiedPartnersListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: VerifiedPartnersListOptionalParams\n  ): AsyncIterableIterator<VerifiedPartner> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Get properties of a verified partner.\n   * @param verifiedPartnerName Name of the verified partner.\n   * @param options The options parameters.\n   */\n  get(\n    verifiedPartnerName: string,\n    options?: VerifiedPartnersGetOptionalParams\n  ): Promise<VerifiedPartnersGetResponse> {\n    return this.client.sendOperationRequest(\n      { verifiedPartnerName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Get a list of all verified partners.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: VerifiedPartnersListOptionalParams\n  ): Promise<VerifiedPartnersListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: VerifiedPartnersListNextOptionalParams\n  ): Promise<VerifiedPartnersListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.EventGrid/verifiedPartners/{verifiedPartnerName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.VerifiedPartner\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.verifiedPartnerName],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.EventGrid/verifiedPartners\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.VerifiedPartnersListResult\n    },\n    default: {}\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.VerifiedPartnersListResult\n    },\n    default: {}\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport {\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest\n} from \"@azure/core-rest-pipeline\";\nimport * as coreAuth from \"@azure/core-auth\";\nimport {\n  ChannelsImpl,\n  DomainsImpl,\n  DomainTopicsImpl,\n  TopicEventSubscriptionsImpl,\n  DomainEventSubscriptionsImpl,\n  EventSubscriptionsImpl,\n  DomainTopicEventSubscriptionsImpl,\n  SystemTopicEventSubscriptionsImpl,\n  PartnerTopicEventSubscriptionsImpl,\n  OperationsImpl,\n  TopicsImpl,\n  PartnerConfigurationsImpl,\n  PartnerNamespacesImpl,\n  PartnerRegistrationsImpl,\n  PartnerTopicsImpl,\n  PrivateEndpointConnectionsImpl,\n  PrivateLinkResourcesImpl,\n  SystemTopicsImpl,\n  ExtensionTopicsImpl,\n  TopicTypesImpl,\n  VerifiedPartnersImpl\n} from \"./operations\";\nimport {\n  Channels,\n  Domains,\n  DomainTopics,\n  TopicEventSubscriptions,\n  DomainEventSubscriptions,\n  EventSubscriptions,\n  DomainTopicEventSubscriptions,\n  SystemTopicEventSubscriptions,\n  PartnerTopicEventSubscriptions,\n  Operations,\n  Topics,\n  PartnerConfigurations,\n  PartnerNamespaces,\n  PartnerRegistrations,\n  PartnerTopics,\n  PrivateEndpointConnections,\n  PrivateLinkResources,\n  SystemTopics,\n  ExtensionTopics,\n  TopicTypes,\n  VerifiedPartners\n} from \"./operationsInterfaces\";\nimport { EventGridManagementClientOptionalParams } from \"./models\";\n\nexport class EventGridManagementClient extends coreClient.ServiceClient {\n  $host: string;\n  subscriptionId: string;\n  apiVersion: string;\n\n  /**\n   * Initializes a new instance of the EventGridManagementClient class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure\n   *                       subscription. The subscription ID forms part of the URI for every service call.\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    subscriptionId: string,\n    options?: EventGridManagementClientOptionalParams\n  ) {\n    if (credentials === undefined) {\n      throw new Error(\"'credentials' cannot be null\");\n    }\n    if (subscriptionId === undefined) {\n      throw new Error(\"'subscriptionId' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: EventGridManagementClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n      credential: credentials\n    };\n\n    const packageDetails = `azsdk-js-arm-eventgrid/14.1.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint:\n        options.endpoint ?? options.baseUri ?? \"https://management.azure.com\"\n    };\n    super(optionsWithDefaults);\n\n    let bearerTokenAuthenticationPolicyFound: boolean = false;\n    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {\n      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();\n      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(\n        (pipelinePolicy) =>\n          pipelinePolicy.name ===\n          coreRestPipeline.bearerTokenAuthenticationPolicyName\n      );\n    }\n    if (\n      !options ||\n      !options.pipeline ||\n      options.pipeline.getOrderedPolicies().length == 0 ||\n      !bearerTokenAuthenticationPolicyFound\n    ) {\n      this.pipeline.removePolicy({\n        name: coreRestPipeline.bearerTokenAuthenticationPolicyName\n      });\n      this.pipeline.addPolicy(\n        coreRestPipeline.bearerTokenAuthenticationPolicy({\n          credential: credentials,\n          scopes:\n            optionsWithDefaults.credentialScopes ??\n            `${optionsWithDefaults.endpoint}/.default`,\n          challengeCallbacks: {\n            authorizeRequestOnChallenge:\n              coreClient.authorizeRequestOnClaimChallenge\n          }\n        })\n      );\n    }\n    // Parameter assignments\n    this.subscriptionId = subscriptionId;\n\n    // Assigning values to Constant parameters\n    this.$host = options.$host || \"https://management.azure.com\";\n    this.apiVersion = options.apiVersion || \"2022-06-15\";\n    this.channels = new ChannelsImpl(this);\n    this.domains = new DomainsImpl(this);\n    this.domainTopics = new DomainTopicsImpl(this);\n    this.topicEventSubscriptions = new TopicEventSubscriptionsImpl(this);\n    this.domainEventSubscriptions = new DomainEventSubscriptionsImpl(this);\n    this.eventSubscriptions = new EventSubscriptionsImpl(this);\n    this.domainTopicEventSubscriptions = new DomainTopicEventSubscriptionsImpl(\n      this\n    );\n    this.systemTopicEventSubscriptions = new SystemTopicEventSubscriptionsImpl(\n      this\n    );\n    this.partnerTopicEventSubscriptions = new PartnerTopicEventSubscriptionsImpl(\n      this\n    );\n    this.operations = new OperationsImpl(this);\n    this.topics = new TopicsImpl(this);\n    this.partnerConfigurations = new PartnerConfigurationsImpl(this);\n    this.partnerNamespaces = new PartnerNamespacesImpl(this);\n    this.partnerRegistrations = new PartnerRegistrationsImpl(this);\n    this.partnerTopics = new PartnerTopicsImpl(this);\n    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);\n    this.privateLinkResources = new PrivateLinkResourcesImpl(this);\n    this.systemTopics = new SystemTopicsImpl(this);\n    this.extensionTopics = new ExtensionTopicsImpl(this);\n    this.topicTypes = new TopicTypesImpl(this);\n    this.verifiedPartners = new VerifiedPartnersImpl(this);\n    this.addCustomApiVersionPolicy(options.apiVersion);\n  }\n\n  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */\n  private addCustomApiVersionPolicy(apiVersion?: string) {\n    if (!apiVersion) {\n      return;\n    }\n    const apiVersionPolicy = {\n      name: \"CustomApiVersionPolicy\",\n      async sendRequest(\n        request: PipelineRequest,\n        next: SendRequest\n      ): Promise<PipelineResponse> {\n        const param = request.url.split(\"?\");\n        if (param.length > 1) {\n          const newParams = param[1].split(\"&\").map((item) => {\n            if (item.indexOf(\"api-version\") > -1) {\n              return \"api-version=\" + apiVersion;\n            } else {\n              return item;\n            }\n          });\n          request.url = param[0] + \"?\" + newParams.join(\"&\");\n        }\n        return next(request);\n      }\n    };\n    this.pipeline.addPolicy(apiVersionPolicy);\n  }\n\n  channels: Channels;\n  domains: Domains;\n  domainTopics: DomainTopics;\n  topicEventSubscriptions: TopicEventSubscriptions;\n  domainEventSubscriptions: DomainEventSubscriptions;\n  eventSubscriptions: EventSubscriptions;\n  domainTopicEventSubscriptions: DomainTopicEventSubscriptions;\n  systemTopicEventSubscriptions: SystemTopicEventSubscriptions;\n  partnerTopicEventSubscriptions: PartnerTopicEventSubscriptions;\n  operations: Operations;\n  topics: Topics;\n  partnerConfigurations: PartnerConfigurations;\n  partnerNamespaces: PartnerNamespaces;\n  partnerRegistrations: PartnerRegistrations;\n  partnerTopics: PartnerTopics;\n  privateEndpointConnections: PrivateEndpointConnections;\n  privateLinkResources: PrivateLinkResources;\n  systemTopics: SystemTopics;\n  extensionTopics: ExtensionTopics;\n  topicTypes: TopicTypes;\n  verifiedPartners: VerifiedPartners;\n}\n"],"names":["KnownChannelType","KnownEventDefinitionKind","KnownChannelProvisioningState","KnownReadinessState","KnownCreatedByType","KnownPersistedConnectionStatus","KnownResourceProvisioningState","KnownDomainProvisioningState","KnownInputSchema","KnownInputSchemaMappingType","KnownPublicNetworkAccess","KnownIpActionType","KnownDataResidencyBoundary","KnownIdentityType","KnownDomainTopicProvisioningState","KnownDeliveryAttributeMappingType","KnownEventSubscriptionProvisioningState","KnownEndpointType","KnownEventSubscriptionIdentityType","KnownAdvancedFilterOperatorType","KnownEventDeliverySchema","KnownDeadLetterEndPointType","KnownTopicProvisioningState","KnownPartnerConfigurationProvisioningState","KnownPartnerNamespaceProvisioningState","KnownPartnerTopicRoutingMode","KnownPartnerRegistrationProvisioningState","KnownPartnerTopicProvisioningState","KnownPartnerTopicActivationState","KnownPrivateEndpointConnectionsParentType","KnownResourceRegionType","KnownTopicTypeProvisioningState","KnownTopicTypeSourceScope","KnownVerifiedPartnerProvisioningState","ChannelMapper","ChannelUpdateParametersMapper","DomainMapper","DomainUpdateParametersMapper","DomainRegenerateKeyRequestMapper","EventSubscriptionMapper","EventSubscriptionUpdateParametersMapper","TopicMapper","TopicUpdateParametersMapper","TopicRegenerateKeyRequestMapper","PartnerConfigurationMapper","PartnerConfigurationUpdateParametersMapper","PartnerMapper","PartnerNamespaceMapper","PartnerNamespaceUpdateParametersMapper","PartnerNamespaceRegenerateKeyRequestMapper","PartnerRegistrationMapper","PartnerRegistrationUpdateParametersMapper","PartnerTopicMapper","PartnerTopicUpdateParametersMapper","PrivateEndpointConnectionMapper","SystemTopicMapper","SystemTopicUpdateParametersMapper","__rest","__await","__asyncValues","__asyncDelegator","getOperationSpec","createOrUpdateOperationSpec","__awaiter","deleteOperationSpec","LroEngine","updateOperationSpec","getFullUrlOperationSpec","serializer","coreClient","Mappers.Channel","Parameters.apiVersion","Parameters.$host","Parameters.subscriptionId","Parameters.resourceGroupName","Parameters.partnerNamespaceName","Parameters.channelName","Parameters.accept","Parameters.channelInfo","Parameters.contentType","Parameters.channelUpdateParameters","Mappers.ChannelsListResult","Parameters.filter","Parameters.top","Mappers.EventSubscriptionFullUrl","Parameters.nextLink","listBySubscriptionOperationSpec","listByResourceGroupOperationSpec","listSharedAccessKeysOperationSpec","regenerateKeyOperationSpec","listBySubscriptionNextOperationSpec","listByResourceGroupNextOperationSpec","Mappers.Domain","Parameters.domainName","Parameters.domainInfo","Parameters.domainUpdateParameters","Mappers.DomainsListResult","Mappers.DomainSharedAccessKeys","Parameters.regenerateKeyRequest","Mappers.DomainTopic","Parameters.domainTopicName","Mappers.DomainTopicsListResult","getDeliveryAttributesOperationSpec","listOperationSpec","listNextOperationSpec","Mappers.DeliveryAttributeListResult","Parameters.topicName","Parameters.eventSubscriptionName","Mappers.EventSubscription","Parameters.eventSubscriptionInfo","Parameters.eventSubscriptionUpdateParameters","Mappers.EventSubscriptionsListResult","listByResourceOperationSpec","listByResourceNextOperationSpec","Parameters.scope","Parameters.topicTypeName","Parameters.location","Parameters.providerNamespace","Parameters.resourceTypeName","Parameters.resourceName","Parameters.systemTopicName","Parameters.partnerTopicName","Mappers.OperationsListResult","listEventTypesOperationSpec","Mappers.Topic","Parameters.topicInfo","Parameters.topicUpdateParameters","Mappers.TopicsListResult","Mappers.TopicSharedAccessKeys","Parameters.regenerateKeyRequest1","Mappers.EventTypesListResult","Mappers.PartnerConfiguration","Parameters.partnerConfigurationInfo","Parameters.partnerConfigurationUpdateParameters","Mappers.PartnerConfigurationsListResult","Parameters.partnerInfo","Mappers.PartnerNamespace","Parameters.partnerNamespaceInfo","Parameters.partnerNamespaceUpdateParameters","Mappers.PartnerNamespacesListResult","Mappers.PartnerNamespaceSharedAccessKeys","Parameters.regenerateKeyRequest2","Mappers.PartnerRegistration","Parameters.partnerRegistrationName","Parameters.partnerRegistrationInfo","Parameters.partnerRegistrationUpdateParameters","Mappers.PartnerRegistrationsListResult","Mappers.PartnerTopic","Parameters.partnerTopicInfo","Parameters.partnerTopicUpdateParameters","Mappers.PartnerTopicsListResult","Mappers.PrivateEndpointConnection","Parameters.parentType","Parameters.parentName","Parameters.privateEndpointConnectionName","Parameters.privateEndpointConnection","Mappers.PrivateEndpointConnectionListResult","Mappers.PrivateLinkResource","Parameters.parentType1","Parameters.privateLinkResourceName","Mappers.PrivateLinkResourcesListResult","Mappers.SystemTopic","Parameters.systemTopicInfo","Parameters.systemTopicUpdateParameters","Mappers.SystemTopicsListResult","Mappers.ExtensionTopic","Parameters.scope1","Mappers.TopicTypesListResult","Mappers.TopicTypeInfo","Mappers.VerifiedPartner","Parameters.verifiedPartnerName","Mappers.VerifiedPartnersListResult","coreRestPipeline"],"mappings":"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"}