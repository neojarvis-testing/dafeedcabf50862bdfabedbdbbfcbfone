import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** This is the base type that represents an advanced filter. To configure an advanced filter, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class such as BoolEqualsAdvancedFilter, NumberInAdvancedFilter, StringEqualsAdvancedFilter etc. depending on the type of the key based on which you want to filter. */
export declare interface AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "NumberIn" | "NumberNotIn" | "NumberLessThan" | "NumberGreaterThan" | "NumberLessThanOrEquals" | "NumberGreaterThanOrEquals" | "BoolEquals" | "StringIn" | "StringNotIn" | "StringBeginsWith" | "StringEndsWith" | "StringContains" | "NumberInRange" | "NumberNotInRange" | "StringNotBeginsWith" | "StringNotEndsWith" | "StringNotContains" | "IsNullOrUndefined" | "IsNotNull";
    /** The field/property in the event based on which you want to filter. */
    key?: string;
}

/**
 * Defines values for AdvancedFilterOperatorType. \
 * {@link KnownAdvancedFilterOperatorType} can be used interchangeably with AdvancedFilterOperatorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NumberIn** \
 * **NumberNotIn** \
 * **NumberLessThan** \
 * **NumberGreaterThan** \
 * **NumberLessThanOrEquals** \
 * **NumberGreaterThanOrEquals** \
 * **BoolEquals** \
 * **StringIn** \
 * **StringNotIn** \
 * **StringBeginsWith** \
 * **StringEndsWith** \
 * **StringContains** \
 * **NumberInRange** \
 * **NumberNotInRange** \
 * **StringNotBeginsWith** \
 * **StringNotEndsWith** \
 * **StringNotContains** \
 * **IsNullOrUndefined** \
 * **IsNotNull**
 */
export declare type AdvancedFilterOperatorType = string;

export declare type AdvancedFilterUnion = AdvancedFilter | NumberInAdvancedFilter | NumberNotInAdvancedFilter | NumberLessThanAdvancedFilter | NumberGreaterThanAdvancedFilter | NumberLessThanOrEqualsAdvancedFilter | NumberGreaterThanOrEqualsAdvancedFilter | BoolEqualsAdvancedFilter | StringInAdvancedFilter | StringNotInAdvancedFilter | StringBeginsWithAdvancedFilter | StringEndsWithAdvancedFilter | StringContainsAdvancedFilter | NumberInRangeAdvancedFilter | NumberNotInRangeAdvancedFilter | StringNotBeginsWithAdvancedFilter | StringNotEndsWithAdvancedFilter | StringNotContainsAdvancedFilter | IsNullOrUndefinedAdvancedFilter | IsNotNullAdvancedFilter;

/** Information about the azure function destination for an event subscription. */
export declare interface AzureFunctionEventSubscriptionDestination extends EventSubscriptionDestination {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "AzureFunction";
    /** The Azure Resource Id that represents the endpoint of the Azure Function destination of an event subscription. */
    resourceId?: string;
    /** Maximum number of events per batch. */
    maxEventsPerBatch?: number;
    /** Preferred batch size in Kilobytes. */
    preferredBatchSizeInKilobytes?: number;
    /** Delivery attribute details. */
    deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
}

/** BoolEquals Advanced Filter. */
export declare interface BoolEqualsAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "BoolEquals";
    /** The boolean filter value. */
    value?: boolean;
}

/** Channel info. */
export declare interface Channel extends Resource {
    /**
     * The system metadata relating to Channel resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The type of the event channel which represents the direction flow of events. */
    channelType?: ChannelType;
    /** This property should be populated when channelType is PartnerTopic and represents information about the partner topic resource corresponding to the channel. */
    partnerTopicInfo?: PartnerTopicInfo;
    /** Context or helpful message that can be used during the approval process by the subscriber. */
    messageForActivation?: string;
    /** Provisioning state of the channel. */
    provisioningState?: ChannelProvisioningState;
    /** The readiness state of the corresponding partner topic. */
    readinessState?: ReadinessState;
    /**
     * Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,
     * the channel and corresponding partner topic are deleted.
     */
    expirationTimeIfNotActivatedUtc?: Date;
}

/**
 * Defines values for ChannelProvisioningState. \
 * {@link KnownChannelProvisioningState} can be used interchangeably with ChannelProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **IdleDueToMirroredPartnerTopicDeletion**
 */
export declare type ChannelProvisioningState = string;

/** Interface representing a Channels. */
export declare interface Channels {
    /**
     * List all the channels in a partner namespace.
     * @param resourceGroupName The name of the resource group within the partners subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param options The options parameters.
     */
    listByPartnerNamespace(resourceGroupName: string, partnerNamespaceName: string, options?: ChannelsListByPartnerNamespaceOptionalParams): PagedAsyncIterableIterator<Channel>;
    /**
     * Get properties of a channel.
     * @param resourceGroupName The name of the resource group within the partners subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param channelName Name of the channel.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, partnerNamespaceName: string, channelName: string, options?: ChannelsGetOptionalParams): Promise<ChannelsGetResponse>;
    /**
     * Synchronously creates or updates a new channel with the specified parameters.
     * @param resourceGroupName The name of the resource group within the partners subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param channelName Name of the channel.
     * @param channelInfo Channel information.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, partnerNamespaceName: string, channelName: string, channelInfo: Channel, options?: ChannelsCreateOrUpdateOptionalParams): Promise<ChannelsCreateOrUpdateResponse>;
    /**
     * Delete an existing channel.
     * @param resourceGroupName The name of the resource group within the partners subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param channelName Name of the channel.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, partnerNamespaceName: string, channelName: string, options?: ChannelsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete an existing channel.
     * @param resourceGroupName The name of the resource group within the partners subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param channelName Name of the channel.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, partnerNamespaceName: string, channelName: string, options?: ChannelsDeleteOptionalParams): Promise<void>;
    /**
     * Synchronously updates a channel with the specified parameters.
     * @param resourceGroupName The name of the resource group within the partners subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param channelName Name of the channel.
     * @param channelUpdateParameters Channel update information.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, partnerNamespaceName: string, channelName: string, channelUpdateParameters: ChannelUpdateParameters, options?: ChannelsUpdateOptionalParams): Promise<void>;
    /**
     * Get the full endpoint URL of a partner destination channel.
     * @param resourceGroupName The name of the resource group within the partners subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param channelName Name of the Channel.
     * @param options The options parameters.
     */
    getFullUrl(resourceGroupName: string, partnerNamespaceName: string, channelName: string, options?: ChannelsGetFullUrlOptionalParams): Promise<ChannelsGetFullUrlResponse>;
}

/** Optional parameters. */
export declare interface ChannelsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ChannelsCreateOrUpdateResponse = Channel;

/** Optional parameters. */
export declare interface ChannelsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ChannelsGetFullUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getFullUrl operation. */
export declare type ChannelsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export declare interface ChannelsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ChannelsGetResponse = Channel;

/** Optional parameters. */
export declare interface ChannelsListByPartnerNamespaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPartnerNamespaceNext operation. */
export declare type ChannelsListByPartnerNamespaceNextResponse = ChannelsListResult;

/** Optional parameters. */
export declare interface ChannelsListByPartnerNamespaceOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByPartnerNamespace operation. */
export declare type ChannelsListByPartnerNamespaceResponse = ChannelsListResult;

/** Result of the List Channels operation */
export declare interface ChannelsListResult {
    /** A collection of Channels. */
    value?: Channel[];
    /** A link for the next page of channels. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface ChannelsUpdateOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for ChannelType. \
 * {@link KnownChannelType} can be used interchangeably with ChannelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PartnerTopic**
 */
export declare type ChannelType = string;

/** Properties of the Channel update. */
export declare interface ChannelUpdateParameters {
    /**
     * Expiration time of the channel. If this timer expires while the corresponding partner topic or partner destination is never activated,
     * the channel and corresponding partner topic or partner destination are deleted.
     */
    expirationTimeIfNotActivatedUtc?: Date;
    /** Partner topic properties which can be updated if the channel is of type PartnerTopic. */
    partnerTopicInfo?: PartnerUpdateTopicInfo;
}

/** ConnectionState information. */
export declare interface ConnectionState {
    /** Status of the connection. */
    status?: PersistedConnectionStatus;
    /** Description of the connection state. */
    description?: string;
    /** Actions required (if any). */
    actionsRequired?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for DataResidencyBoundary. \
 * {@link KnownDataResidencyBoundary} can be used interchangeably with DataResidencyBoundary,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WithinGeopair** \
 * **WithinRegion**
 */
export declare type DataResidencyBoundary = string;

/** Information about the dead letter destination for an event subscription. To configure a deadletter destination, do not directly instantiate an object of this class. Instead, instantiate an object of a derived class. Currently, StorageBlobDeadLetterDestination is the only class that derives from this class. */
export declare interface DeadLetterDestination {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "StorageBlob";
}

export declare type DeadLetterDestinationUnion = DeadLetterDestination | StorageBlobDeadLetterDestination;

/**
 * Defines values for DeadLetterEndPointType. \
 * {@link KnownDeadLetterEndPointType} can be used interchangeably with DeadLetterEndPointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StorageBlob**
 */
export declare type DeadLetterEndPointType = string;

/** Information about the deadletter destination with resource identity. */
export declare interface DeadLetterWithResourceIdentity {
    /** The identity to use when dead-lettering events. */
    identity?: EventSubscriptionIdentity;
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    deadLetterDestination?: DeadLetterDestinationUnion;
}

/** Result of the Get delivery attributes operation. */
export declare interface DeliveryAttributeListResult {
    /** A collection of DeliveryAttributeMapping */
    value?: DeliveryAttributeMappingUnion[];
}

/** Delivery attribute mapping details. */
export declare interface DeliveryAttributeMapping {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Static" | "Dynamic";
    /** Name of the delivery attribute or header. */
    name?: string;
}

/**
 * Defines values for DeliveryAttributeMappingType. \
 * {@link KnownDeliveryAttributeMappingType} can be used interchangeably with DeliveryAttributeMappingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Static** \
 * **Dynamic**
 */
export declare type DeliveryAttributeMappingType = string;

export declare type DeliveryAttributeMappingUnion = DeliveryAttributeMapping | StaticDeliveryAttributeMapping | DynamicDeliveryAttributeMapping;

/** Information about the delivery for an event subscription with resource identity. */
export declare interface DeliveryWithResourceIdentity {
    /** The identity to use when delivering events. */
    identity?: EventSubscriptionIdentity;
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    destination?: EventSubscriptionDestinationUnion;
}

/** EventGrid Domain. */
export declare interface Domain extends TrackedResource {
    /**
     * The system metadata relating to the Event Grid Domain resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Identity information for the Event Grid Domain resource. */
    identity?: IdentityInfo;
    /**
     * List of private endpoint connections.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /**
     * Provisioning state of the Event Grid Domain Resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: DomainProvisioningState;
    /**
     * Endpoint for the Event Grid Domain Resource which is used for publishing the events.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoint?: string;
    /** This determines the format that Event Grid should expect for incoming events published to the Event Grid Domain Resource. */
    inputSchema?: InputSchema;
    /** Information about the InputSchemaMapping which specified the info about mapping event payload. */
    inputSchemaMapping?: InputSchemaMappingUnion;
    /**
     * Metric resource id for the Event Grid Domain Resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricResourceId?: string;
    /**
     * This determines if traffic is allowed over public network. By default it is enabled.
     * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainProperties.InboundIpRules" />
     */
    publicNetworkAccess?: PublicNetworkAccess;
    /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
    inboundIpRules?: InboundIpRule[];
    /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the domain. */
    disableLocalAuth?: boolean;
    /**
     * This Boolean is used to specify the creation mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
     * In this context, creation of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
     * When this property is null or set to true, Event Grid is responsible of automatically creating the domain topic when the first event subscription is
     * created at the scope of the domain topic. If this property is set to false, then creating the first event subscription will require creating a domain topic
     * by the user. The self-management mode can be used if the user wants full control of when the domain topic is created, while auto-managed mode provides the
     * flexibility to perform less operations and manage fewer resources by the user. Also, note that in auto-managed creation mode, user is allowed to create the
     * domain topic on demand if needed.
     */
    autoCreateTopicWithFirstSubscription?: boolean;
    /**
     * This Boolean is used to specify the deletion mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
     * In this context, deletion of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
     * When this property is set to true, Event Grid is responsible of automatically deleting the domain topic when the last event subscription at the scope
     * of the domain topic is deleted. If this property is set to false, then the user needs to manually delete the domain topic when it is no longer needed
     * (e.g., when last event subscription is deleted and the resource needs to be cleaned up). The self-management mode can be used if the user wants full
     * control of when the domain topic needs to be deleted, while auto-managed mode provides the flexibility to perform less operations and manage fewer
     * resources by the user.
     */
    autoDeleteTopicWithLastSubscription?: boolean;
    /** Data Residency Boundary of the resource. */
    dataResidencyBoundary?: DataResidencyBoundary;
}

/** Interface representing a DomainEventSubscriptions. */
export declare interface DomainEventSubscriptions {
    /**
     * List all event subscriptions that have been created for a specific topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, domainName: string, options?: DomainEventSubscriptionsListOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * Get all delivery attributes for an event subscription for domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getDeliveryAttributes(resourceGroupName: string, domainName: string, eventSubscriptionName: string, options?: DomainEventSubscriptionsGetDeliveryAttributesOptionalParams): Promise<DomainEventSubscriptionsGetDeliveryAttributesResponse>;
    /**
     * Get properties of an event subscription of a domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be found. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, domainName: string, eventSubscriptionName: string, options?: DomainEventSubscriptionsGetOptionalParams): Promise<DomainEventSubscriptionsGetResponse>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: DomainEventSubscriptionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DomainEventSubscriptionsCreateOrUpdateResponse>, DomainEventSubscriptionsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, domainName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: DomainEventSubscriptionsCreateOrUpdateOptionalParams): Promise<DomainEventSubscriptionsCreateOrUpdateResponse>;
    /**
     * Delete an existing event subscription for a domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, domainName: string, eventSubscriptionName: string, options?: DomainEventSubscriptionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete an existing event subscription for a domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, domainName: string, eventSubscriptionName: string, options?: DomainEventSubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Update an existing event subscription for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, domainName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: DomainEventSubscriptionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<DomainEventSubscriptionsUpdateResponse>, DomainEventSubscriptionsUpdateResponse>>;
    /**
     * Update an existing event subscription for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, domainName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: DomainEventSubscriptionsUpdateOptionalParams): Promise<DomainEventSubscriptionsUpdateResponse>;
    /**
     * Get the full endpoint URL for an event subscription for domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getFullUrl(resourceGroupName: string, domainName: string, eventSubscriptionName: string, options?: DomainEventSubscriptionsGetFullUrlOptionalParams): Promise<DomainEventSubscriptionsGetFullUrlResponse>;
}

/** Optional parameters. */
export declare interface DomainEventSubscriptionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DomainEventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export declare interface DomainEventSubscriptionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DomainEventSubscriptionsGetDeliveryAttributesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDeliveryAttributes operation. */
export declare type DomainEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export declare interface DomainEventSubscriptionsGetFullUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getFullUrl operation. */
export declare type DomainEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export declare interface DomainEventSubscriptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DomainEventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export declare interface DomainEventSubscriptionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DomainEventSubscriptionsListNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface DomainEventSubscriptionsListOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type DomainEventSubscriptionsListResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface DomainEventSubscriptionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DomainEventSubscriptionsUpdateResponse = EventSubscription;

/**
 * Defines values for DomainProvisioningState. \
 * {@link KnownDomainProvisioningState} can be used interchangeably with DomainProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export declare type DomainProvisioningState = string;

/** Domain regenerate share access key request. */
export declare interface DomainRegenerateKeyRequest {
    /** Key name to regenerate key1 or key2. */
    keyName: string;
}

/** Interface representing a Domains. */
export declare interface Domains {
    /**
     * List all the domains under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: DomainsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Domain>;
    /**
     * List all the domains under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DomainsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Domain>;
    /**
     * Get properties of a domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, domainName: string, options?: DomainsGetOptionalParams): Promise<DomainsGetResponse>;
    /**
     * Asynchronously creates or updates a new domain with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainInfo Domain information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, domainInfo: Domain, options?: DomainsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DomainsCreateOrUpdateResponse>, DomainsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates or updates a new domain with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainInfo Domain information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, domainName: string, domainInfo: Domain, options?: DomainsCreateOrUpdateOptionalParams): Promise<DomainsCreateOrUpdateResponse>;
    /**
     * Delete existing domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, domainName: string, options?: DomainsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, domainName: string, options?: DomainsDeleteOptionalParams): Promise<void>;
    /**
     * Asynchronously updates a domain with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainUpdateParameters Domain update information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, domainName: string, domainUpdateParameters: DomainUpdateParameters, options?: DomainsUpdateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Asynchronously updates a domain with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainUpdateParameters Domain update information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, domainName: string, domainUpdateParameters: DomainUpdateParameters, options?: DomainsUpdateOptionalParams): Promise<void>;
    /**
     * List the two keys used to publish to a domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param options The options parameters.
     */
    listSharedAccessKeys(resourceGroupName: string, domainName: string, options?: DomainsListSharedAccessKeysOptionalParams): Promise<DomainsListSharedAccessKeysResponse>;
    /**
     * Regenerate a shared access key for a domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param regenerateKeyRequest Request body to regenerate key.
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName: string, domainName: string, regenerateKeyRequest: DomainRegenerateKeyRequest, options?: DomainsRegenerateKeyOptionalParams): Promise<DomainsRegenerateKeyResponse>;
}

/** Optional parameters. */
export declare interface DomainsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DomainsCreateOrUpdateResponse = Domain;

/** Optional parameters. */
export declare interface DomainsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DomainsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DomainsGetResponse = Domain;

/** Shared access keys of the Domain. */
export declare interface DomainSharedAccessKeys {
    /** Shared access key1 for the domain. */
    key1?: string;
    /** Shared access key2 for the domain. */
    key2?: string;
}

/** Optional parameters. */
export declare interface DomainsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type DomainsListByResourceGroupNextResponse = DomainsListResult;

/** Optional parameters. */
export declare interface DomainsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DomainsListByResourceGroupResponse = DomainsListResult;

/** Optional parameters. */
export declare interface DomainsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type DomainsListBySubscriptionNextResponse = DomainsListResult;

/** Optional parameters. */
export declare interface DomainsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listBySubscription operation. */
export declare type DomainsListBySubscriptionResponse = DomainsListResult;

/** Result of the List Domains operation. */
export declare interface DomainsListResult {
    /** A collection of Domains. */
    value?: Domain[];
    /** A link for the next page of domains. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface DomainsListSharedAccessKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSharedAccessKeys operation. */
export declare type DomainsListSharedAccessKeysResponse = DomainSharedAccessKeys;

/** Optional parameters. */
export declare interface DomainsRegenerateKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKey operation. */
export declare type DomainsRegenerateKeyResponse = DomainSharedAccessKeys;

/** Optional parameters. */
export declare interface DomainsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Domain Topic. */
export declare interface DomainTopic extends Resource {
    /**
     * The system metadata relating to Domain Topic resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Provisioning state of the domain topic.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: DomainTopicProvisioningState;
}

/** Interface representing a DomainTopicEventSubscriptions. */
export declare interface DomainTopicEventSubscriptions {
    /**
     * List all event subscriptions that have been created for a specific domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, domainName: string, topicName: string, options?: DomainTopicEventSubscriptionsListOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * Get properties of a nested event subscription for a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, options?: DomainTopicEventSubscriptionsGetOptionalParams): Promise<DomainTopicEventSubscriptionsGetResponse>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DomainTopicEventSubscriptionsCreateOrUpdateResponse>, DomainTopicEventSubscriptionsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams): Promise<DomainTopicEventSubscriptionsCreateOrUpdateResponse>;
    /**
     * Delete a nested existing event subscription for a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, options?: DomainTopicEventSubscriptionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a nested existing event subscription for a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, options?: DomainTopicEventSubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Update an existing event subscription for a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param topicName Name of the topic.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: DomainTopicEventSubscriptionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<DomainTopicEventSubscriptionsUpdateResponse>, DomainTopicEventSubscriptionsUpdateResponse>>;
    /**
     * Update an existing event subscription for a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param topicName Name of the topic.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: DomainTopicEventSubscriptionsUpdateOptionalParams): Promise<DomainTopicEventSubscriptionsUpdateResponse>;
    /**
     * Get the full endpoint URL for a nested event subscription for domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getFullUrl(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, options?: DomainTopicEventSubscriptionsGetFullUrlOptionalParams): Promise<DomainTopicEventSubscriptionsGetFullUrlResponse>;
    /**
     * Get all delivery attributes for an event subscription for domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getDeliveryAttributes(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, options?: DomainTopicEventSubscriptionsGetDeliveryAttributesOptionalParams): Promise<DomainTopicEventSubscriptionsGetDeliveryAttributesResponse>;
}

/** Optional parameters. */
export declare interface DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DomainTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export declare interface DomainTopicEventSubscriptionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DomainTopicEventSubscriptionsGetDeliveryAttributesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDeliveryAttributes operation. */
export declare type DomainTopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export declare interface DomainTopicEventSubscriptionsGetFullUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getFullUrl operation. */
export declare type DomainTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export declare interface DomainTopicEventSubscriptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DomainTopicEventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export declare interface DomainTopicEventSubscriptionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DomainTopicEventSubscriptionsListNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface DomainTopicEventSubscriptionsListOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type DomainTopicEventSubscriptionsListResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface DomainTopicEventSubscriptionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DomainTopicEventSubscriptionsUpdateResponse = EventSubscription;

/**
 * Defines values for DomainTopicProvisioningState. \
 * {@link KnownDomainTopicProvisioningState} can be used interchangeably with DomainTopicProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export declare type DomainTopicProvisioningState = string;

/** Interface representing a DomainTopics. */
export declare interface DomainTopics {
    /**
     * List all the topics in a domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @param options The options parameters.
     */
    listByDomain(resourceGroupName: string, domainName: string, options?: DomainTopicsListByDomainOptionalParams): PagedAsyncIterableIterator<DomainTopic>;
    /**
     * Get properties of a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the topic.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, domainName: string, domainTopicName: string, options?: DomainTopicsGetOptionalParams): Promise<DomainTopicsGetResponse>;
    /**
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, domainTopicName: string, options?: DomainTopicsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DomainTopicsCreateOrUpdateResponse>, DomainTopicsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, domainName: string, domainTopicName: string, options?: DomainTopicsCreateOrUpdateOptionalParams): Promise<DomainTopicsCreateOrUpdateResponse>;
    /**
     * Delete existing domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, domainName: string, domainTopicName: string, options?: DomainTopicsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, domainName: string, domainTopicName: string, options?: DomainTopicsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DomainTopicsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DomainTopicsCreateOrUpdateResponse = DomainTopic;

/** Optional parameters. */
export declare interface DomainTopicsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DomainTopicsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DomainTopicsGetResponse = DomainTopic;

/** Optional parameters. */
export declare interface DomainTopicsListByDomainNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDomainNext operation. */
export declare type DomainTopicsListByDomainNextResponse = DomainTopicsListResult;

/** Optional parameters. */
export declare interface DomainTopicsListByDomainOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByDomain operation. */
export declare type DomainTopicsListByDomainResponse = DomainTopicsListResult;

/** Result of the List Domain Topics operation. */
export declare interface DomainTopicsListResult {
    /** A collection of Domain Topics. */
    value?: DomainTopic[];
    /** A link for the next page of domain topics. */
    nextLink?: string;
}

/** Properties of the Domain update. */
export declare interface DomainUpdateParameters {
    /** Tags of the domains resource. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Identity information for the resource. */
    identity?: IdentityInfo;
    /**
     * This determines if traffic is allowed over public network. By default it is enabled.
     * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.DomainUpdateParameterProperties.InboundIpRules" />
     */
    publicNetworkAccess?: PublicNetworkAccess;
    /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
    inboundIpRules?: InboundIpRule[];
    /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the domain. */
    disableLocalAuth?: boolean;
    /**
     * This Boolean is used to specify the creation mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
     * In this context, creation of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
     * When this property is null or set to true, Event Grid is responsible of automatically creating the domain topic when the first event subscription is
     * created at the scope of the domain topic. If this property is set to false, then creating the first event subscription will require creating a domain topic
     * by the user. The self-management mode can be used if the user wants full control of when the domain topic is created, while auto-managed mode provides the
     * flexibility to perform less operations and manage fewer resources by the user. Also, note that in auto-managed creation mode, user is allowed to create the
     * domain topic on demand if needed.
     */
    autoCreateTopicWithFirstSubscription?: boolean;
    /**
     * This Boolean is used to specify the deletion mechanism for 'all' the Event Grid Domain Topics associated with this Event Grid Domain resource.
     * In this context, deletion of domain topic can be auto-managed (when true) or self-managed (when false). The default value for this property is true.
     * When this property is set to true, Event Grid is responsible of automatically deleting the domain topic when the last event subscription at the scope
     * of the domain topic is deleted. If this property is set to false, then the user needs to manually delete the domain topic when it is no longer needed
     * (e.g., when last event subscription is deleted and the resource needs to be cleaned up). The self-management mode can be used if the user wants full
     * control of when the domain topic needs to be deleted, while auto-managed mode provides the flexibility to perform less operations and manage fewer
     * resources by the user.
     */
    autoDeleteTopicWithLastSubscription?: boolean;
    /** The data residency boundary for the domain. */
    dataResidencyBoundary?: DataResidencyBoundary;
}

/** Dynamic delivery attribute mapping details. */
export declare interface DynamicDeliveryAttributeMapping extends DeliveryAttributeMapping {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Dynamic";
    /** JSON path in the event which contains attribute value. */
    sourceField?: string;
}

/**
 * Defines values for EndpointType. \
 * {@link KnownEndpointType} can be used interchangeably with EndpointType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WebHook** \
 * **EventHub** \
 * **StorageQueue** \
 * **HybridConnection** \
 * **ServiceBusQueue** \
 * **ServiceBusTopic** \
 * **AzureFunction**
 */
export declare type EndpointType = string;

/**
 * Defines values for EventDefinitionKind. \
 * {@link KnownEventDefinitionKind} can be used interchangeably with EventDefinitionKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Inline**
 */
export declare type EventDefinitionKind = string;

/**
 * Defines values for EventDeliverySchema. \
 * {@link KnownEventDeliverySchema} can be used interchangeably with EventDeliverySchema,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EventGridSchema** \
 * **CustomInputSchema** \
 * **CloudEventSchemaV1_0**
 */
export declare type EventDeliverySchema = string;

export declare class EventGridManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the EventGridManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: EventGridManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    channels: Channels;
    domains: Domains;
    domainTopics: DomainTopics;
    topicEventSubscriptions: TopicEventSubscriptions;
    domainEventSubscriptions: DomainEventSubscriptions;
    eventSubscriptions: EventSubscriptions;
    domainTopicEventSubscriptions: DomainTopicEventSubscriptions;
    systemTopicEventSubscriptions: SystemTopicEventSubscriptions;
    partnerTopicEventSubscriptions: PartnerTopicEventSubscriptions;
    operations: Operations;
    topics: Topics;
    partnerConfigurations: PartnerConfigurations;
    partnerNamespaces: PartnerNamespaces;
    partnerRegistrations: PartnerRegistrations;
    partnerTopics: PartnerTopics;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    systemTopics: SystemTopics;
    extensionTopics: ExtensionTopics;
    topicTypes: TopicTypes;
    verifiedPartners: VerifiedPartners;
}

/** Optional parameters. */
export declare interface EventGridManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Information about the event hub destination for an event subscription. */
export declare interface EventHubEventSubscriptionDestination extends EventSubscriptionDestination {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "EventHub";
    /** The Azure Resource Id that represents the endpoint of an Event Hub destination of an event subscription. */
    resourceId?: string;
    /** Delivery attribute details. */
    deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
}

/** Event Subscription */
export declare interface EventSubscription extends Resource {
    /**
     * The system metadata relating to Event Subscription resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Name of the topic of the event subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly topic?: string;
    /**
     * Provisioning state of the event subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: EventSubscriptionProvisioningState;
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    destination?: EventSubscriptionDestinationUnion;
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    deliveryWithResourceIdentity?: DeliveryWithResourceIdentity;
    /** Information about the filter for the event subscription. */
    filter?: EventSubscriptionFilter;
    /** List of user defined labels. */
    labels?: string[];
    /** Expiration time of the event subscription. */
    expirationTimeUtc?: Date;
    /** The event delivery schema for the event subscription. */
    eventDeliverySchema?: EventDeliverySchema;
    /** The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events. */
    retryPolicy?: RetryPolicy;
    /**
     * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
     * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    deadLetterDestination?: DeadLetterDestinationUnion;
    /**
     * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
     * Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    deadLetterWithResourceIdentity?: DeadLetterWithResourceIdentity;
}

/** Information about the destination for an event subscription. */
export declare interface EventSubscriptionDestination {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "WebHook" | "EventHub" | "StorageQueue" | "HybridConnection" | "ServiceBusQueue" | "ServiceBusTopic" | "AzureFunction";
}

export declare type EventSubscriptionDestinationUnion = EventSubscriptionDestination | WebHookEventSubscriptionDestination | EventHubEventSubscriptionDestination | StorageQueueEventSubscriptionDestination | HybridConnectionEventSubscriptionDestination | ServiceBusQueueEventSubscriptionDestination | ServiceBusTopicEventSubscriptionDestination | AzureFunctionEventSubscriptionDestination;

/** Filter for the Event Subscription. */
export declare interface EventSubscriptionFilter {
    /**
     * An optional string to filter events for an event subscription based on a resource path prefix.
     * The format of this depends on the publisher of the events.
     * Wildcard characters are not supported in this path.
     */
    subjectBeginsWith?: string;
    /**
     * An optional string to filter events for an event subscription based on a resource path suffix.
     * Wildcard characters are not supported in this path.
     */
    subjectEndsWith?: string;
    /** A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null. */
    includedEventTypes?: string[];
    /**
     * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
     * should be compared in a case sensitive manner.
     */
    isSubjectCaseSensitive?: boolean;
    /** Allows advanced filters to be evaluated against an array of values instead of expecting a singular value. */
    enableAdvancedFilteringOnArrays?: boolean;
    /** An array of advanced filters that are used for filtering event subscriptions. */
    advancedFilters?: AdvancedFilterUnion[];
}

/** Full endpoint url of an event subscription */
export declare interface EventSubscriptionFullUrl {
    /** The URL that represents the endpoint of the destination of an event subscription. */
    endpointUrl?: string;
}

/** The identity information with the event subscription. */
export declare interface EventSubscriptionIdentity {
    /** The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity. */
    type?: EventSubscriptionIdentityType;
    /** The user identity associated with the resource. */
    userAssignedIdentity?: string;
}

/**
 * Defines values for EventSubscriptionIdentityType. \
 * {@link KnownEventSubscriptionIdentityType} can be used interchangeably with EventSubscriptionIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned**
 */
export declare type EventSubscriptionIdentityType = string;

/**
 * Defines values for EventSubscriptionProvisioningState. \
 * {@link KnownEventSubscriptionProvisioningState} can be used interchangeably with EventSubscriptionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **AwaitingManualAction**
 */
export declare type EventSubscriptionProvisioningState = string;

/** Interface representing a EventSubscriptions. */
export declare interface EventSubscriptions {
    /**
     * List all aggregated global event subscriptions under a specific Azure subscription.
     * @param options The options parameters.
     */
    listGlobalBySubscription(options?: EventSubscriptionsListGlobalBySubscriptionOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * List all global event subscriptions under an Azure subscription for a topic type.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    listGlobalBySubscriptionForTopicType(topicTypeName: string, options?: EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * List all global event subscriptions under a specific Azure subscription and resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listGlobalByResourceGroup(resourceGroupName: string, options?: EventSubscriptionsListGlobalByResourceGroupOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * List all global event subscriptions under a resource group for a specific topic type.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    listGlobalByResourceGroupForTopicType(resourceGroupName: string, topicTypeName: string, options?: EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * List all event subscriptions from the given location under a specific Azure subscription.
     * @param location Name of the location.
     * @param options The options parameters.
     */
    listRegionalBySubscription(location: string, options?: EventSubscriptionsListRegionalBySubscriptionOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * List all event subscriptions from the given location under a specific Azure subscription and
     * resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location.
     * @param options The options parameters.
     */
    listRegionalByResourceGroup(resourceGroupName: string, location: string, options?: EventSubscriptionsListRegionalByResourceGroupOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * List all event subscriptions from the given location under a specific Azure subscription and topic
     * type.
     * @param location Name of the location.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    listRegionalBySubscriptionForTopicType(location: string, topicTypeName: string, options?: EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * List all event subscriptions from the given location under a specific Azure subscription and
     * resource group and topic type.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    listRegionalByResourceGroupForTopicType(resourceGroupName: string, location: string, topicTypeName: string, options?: EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * List all event subscriptions that have been created for a specific resource.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic.
     * @param resourceTypeName Name of the resource type.
     * @param resourceName Name of the resource.
     * @param options The options parameters.
     */
    listByResource(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options?: EventSubscriptionsListByResourceOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * List all event subscriptions that have been created for a specific domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param options The options parameters.
     */
    listByDomainTopic(resourceGroupName: string, domainName: string, topicName: string, options?: EventSubscriptionsListByDomainTopicOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * Get properties of an event subscription.
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
     *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
     *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    get(scope: string, eventSubscriptionName: string, options?: EventSubscriptionsGetOptionalParams): Promise<EventSubscriptionsGetResponse>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription based on
     * the specified scope.
     * @param scope The identifier of the resource to which the event subscription needs to be created or
     *              updated. The scope can be a subscription, or a resource group, or a top level resource belonging to
     *              a resource provider namespace, or an EventGrid topic. For example, use
     *              '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
     *                              between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: EventSubscriptionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<EventSubscriptionsCreateOrUpdateResponse>, EventSubscriptionsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription based on
     * the specified scope.
     * @param scope The identifier of the resource to which the event subscription needs to be created or
     *              updated. The scope can be a subscription, or a resource group, or a top level resource belonging to
     *              a resource provider namespace, or an EventGrid topic. For example, use
     *              '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
     *                              between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(scope: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: EventSubscriptionsCreateOrUpdateOptionalParams): Promise<EventSubscriptionsCreateOrUpdateResponse>;
    /**
     * Delete an existing event subscription.
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
     *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
     *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    beginDelete(scope: string, eventSubscriptionName: string, options?: EventSubscriptionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete an existing event subscription.
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
     *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
     *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    beginDeleteAndWait(scope: string, eventSubscriptionName: string, options?: EventSubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Asynchronously updates an existing event subscription.
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a
     *              resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid
     *              topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdate(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: EventSubscriptionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<EventSubscriptionsUpdateResponse>, EventSubscriptionsUpdateResponse>>;
    /**
     * Asynchronously updates an existing event subscription.
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a
     *              resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid
     *              topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(scope: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: EventSubscriptionsUpdateOptionalParams): Promise<EventSubscriptionsUpdateResponse>;
    /**
     * Get the full endpoint URL for an event subscription.
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
     *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
     *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getFullUrl(scope: string, eventSubscriptionName: string, options?: EventSubscriptionsGetFullUrlOptionalParams): Promise<EventSubscriptionsGetFullUrlResponse>;
    /**
     * Get all delivery attributes for an event subscription.
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
     *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
     *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getDeliveryAttributes(scope: string, eventSubscriptionName: string, options?: EventSubscriptionsGetDeliveryAttributesOptionalParams): Promise<EventSubscriptionsGetDeliveryAttributesResponse>;
}

/** Optional parameters. */
export declare interface EventSubscriptionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type EventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export declare interface EventSubscriptionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface EventSubscriptionsGetDeliveryAttributesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDeliveryAttributes operation. */
export declare type EventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsGetFullUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getFullUrl operation. */
export declare type EventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export declare interface EventSubscriptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export declare interface EventSubscriptionsListByDomainTopicNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDomainTopicNext operation. */
export declare type EventSubscriptionsListByDomainTopicNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListByDomainTopicOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByDomainTopic operation. */
export declare type EventSubscriptionsListByDomainTopicResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListByResourceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceNext operation. */
export declare type EventSubscriptionsListByResourceNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListByResourceOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByResource operation. */
export declare type EventSubscriptionsListByResourceResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listGlobalByResourceGroupForTopicTypeNext operation. */
export declare type EventSubscriptionsListGlobalByResourceGroupForTopicTypeNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListGlobalByResourceGroupForTopicTypeOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listGlobalByResourceGroupForTopicType operation. */
export declare type EventSubscriptionsListGlobalByResourceGroupForTopicTypeResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListGlobalByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listGlobalByResourceGroupNext operation. */
export declare type EventSubscriptionsListGlobalByResourceGroupNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListGlobalByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listGlobalByResourceGroup operation. */
export declare type EventSubscriptionsListGlobalByResourceGroupResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listGlobalBySubscriptionForTopicTypeNext operation. */
export declare type EventSubscriptionsListGlobalBySubscriptionForTopicTypeNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListGlobalBySubscriptionForTopicTypeOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listGlobalBySubscriptionForTopicType operation. */
export declare type EventSubscriptionsListGlobalBySubscriptionForTopicTypeResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListGlobalBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listGlobalBySubscriptionNext operation. */
export declare type EventSubscriptionsListGlobalBySubscriptionNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListGlobalBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listGlobalBySubscription operation. */
export declare type EventSubscriptionsListGlobalBySubscriptionResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRegionalByResourceGroupForTopicTypeNext operation. */
export declare type EventSubscriptionsListRegionalByResourceGroupForTopicTypeNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListRegionalByResourceGroupForTopicTypeOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listRegionalByResourceGroupForTopicType operation. */
export declare type EventSubscriptionsListRegionalByResourceGroupForTopicTypeResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListRegionalByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRegionalByResourceGroupNext operation. */
export declare type EventSubscriptionsListRegionalByResourceGroupNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListRegionalByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listRegionalByResourceGroup operation. */
export declare type EventSubscriptionsListRegionalByResourceGroupResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRegionalBySubscriptionForTopicTypeNext operation. */
export declare type EventSubscriptionsListRegionalBySubscriptionForTopicTypeNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListRegionalBySubscriptionForTopicTypeOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listRegionalBySubscriptionForTopicType operation. */
export declare type EventSubscriptionsListRegionalBySubscriptionForTopicTypeResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListRegionalBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listRegionalBySubscriptionNext operation. */
export declare type EventSubscriptionsListRegionalBySubscriptionNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface EventSubscriptionsListRegionalBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listRegionalBySubscription operation. */
export declare type EventSubscriptionsListRegionalBySubscriptionResponse = EventSubscriptionsListResult;

/** Result of the List EventSubscriptions operation */
export declare interface EventSubscriptionsListResult {
    /** A collection of EventSubscriptions */
    value?: EventSubscription[];
    /** A link for the next page of event subscriptions */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface EventSubscriptionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type EventSubscriptionsUpdateResponse = EventSubscription;

/** Properties of the Event Subscription update. */
export declare interface EventSubscriptionUpdateParameters {
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    destination?: EventSubscriptionDestinationUnion;
    /**
     * Information about the destination where events have to be delivered for the event subscription.
     * Uses the managed identity setup on the parent resource (topic / domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    deliveryWithResourceIdentity?: DeliveryWithResourceIdentity;
    /** Information about the filter for the event subscription. */
    filter?: EventSubscriptionFilter;
    /** List of user defined labels. */
    labels?: string[];
    /** Information about the expiration time for the event subscription. */
    expirationTimeUtc?: Date;
    /** The event delivery schema for the event subscription. */
    eventDeliverySchema?: EventDeliverySchema;
    /** The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events. */
    retryPolicy?: RetryPolicy;
    /**
     * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
     * Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    deadLetterDestination?: DeadLetterDestinationUnion;
    /**
     * The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent to the dead letter destination.
     * Uses the managed identity setup on the parent resource (topic / domain) to acquire the authentication tokens being used during delivery / dead-lettering.
     */
    deadLetterWithResourceIdentity?: DeadLetterWithResourceIdentity;
}

/** Event Type for a subject under a topic */
export declare interface EventType extends Resource {
    /** Display name of the event type. */
    displayName?: string;
    /** Description of the event type. */
    description?: string;
    /** Url of the schema for this event type. */
    schemaUrl?: string;
    /** IsInDefaultSet flag of the event type. */
    isInDefaultSet?: boolean;
}

/** The event type information for Channels. */
export declare interface EventTypeInfo {
    /** The kind of event type used. */
    kind?: EventDefinitionKind;
    /**
     * A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.
     * An example of a valid inline event name is "Contoso.OrderCreated".
     * The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.
     */
    inlineEventTypes?: {
        [propertyName: string]: InlineEventProperties;
    };
}

/** Result of the List Event Types operation */
export declare interface EventTypesListResult {
    /** A collection of event types */
    value?: EventType[];
}

/** Event grid Extension Topic. This is used for getting Event Grid related metrics for Azure resources. */
export declare interface ExtensionTopic extends Resource {
    /**
     * The system metadata relating to Extension Topic resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Description of the extension topic. */
    description?: string;
    /** System topic resource id which is mapped to the source. */
    systemTopic?: string;
}

/** Interface representing a ExtensionTopics. */
export declare interface ExtensionTopics {
    /**
     * Get the properties of an extension topic.
     * @param scope The identifier of the resource to which extension topic is queried. The scope can be a
     *              subscription, or a resource group, or a top level resource belonging to a resource provider
     *              namespace. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for Azure resource.
     * @param options The options parameters.
     */
    get(scope: string, options?: ExtensionTopicsGetOptionalParams): Promise<ExtensionTopicsGetResponse>;
}

/** Optional parameters. */
export declare interface ExtensionTopicsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ExtensionTopicsGetResponse = ExtensionTopic;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Information about the HybridConnection destination for an event subscription. */
export declare interface HybridConnectionEventSubscriptionDestination extends EventSubscriptionDestination {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "HybridConnection";
    /** The Azure Resource ID of an hybrid connection that is the destination of an event subscription. */
    resourceId?: string;
    /** Delivery attribute details. */
    deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
}

/** The identity information for the resource. */
export declare interface IdentityInfo {
    /** The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity. */
    type?: IdentityType;
    /** The principal ID of resource identity. */
    principalId?: string;
    /** The tenant ID of resource. */
    tenantId?: string;
    /**
     * The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     * This property is currently not used and reserved for future usage.
     */
    userAssignedIdentities?: {
        [propertyName: string]: UserIdentityProperties;
    };
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export declare type IdentityType = string;

export declare interface InboundIpRule {
    /** IP Address in CIDR notation e.g., 10.0.0.0/8. */
    ipMask?: string;
    /** Action to perform based on the match or no match of the IpMask. */
    action?: IpActionType;
}

/** Additional information about every inline event. */
export declare interface InlineEventProperties {
    /** The description for the inline event. */
    description?: string;
    /** The displayName for the inline event. */
    displayName?: string;
    /** The documentationUrl for the inline event. */
    documentationUrl?: string;
    /** The dataSchemaUrl for the inline event. */
    dataSchemaUrl?: string;
}

/**
 * Defines values for InputSchema. \
 * {@link KnownInputSchema} can be used interchangeably with InputSchema,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EventGridSchema** \
 * **CustomEventSchema** \
 * **CloudEventSchemaV1_0**
 */
export declare type InputSchema = string;

/** By default, Event Grid expects events to be in the Event Grid event schema. Specifying an input schema mapping enables publishing to Event Grid using a custom input schema. Currently, the only supported type of InputSchemaMapping is 'JsonInputSchemaMapping'. */
export declare interface InputSchemaMapping {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    inputSchemaMappingType: "Json";
}

/**
 * Defines values for InputSchemaMappingType. \
 * {@link KnownInputSchemaMappingType} can be used interchangeably with InputSchemaMappingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Json**
 */
export declare type InputSchemaMappingType = string;

export declare type InputSchemaMappingUnion = InputSchemaMapping | JsonInputSchemaMapping;

/**
 * Defines values for IpActionType. \
 * {@link KnownIpActionType} can be used interchangeably with IpActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow**
 */
export declare type IpActionType = string;

/** IsNotNull Advanced Filter. */
export declare interface IsNotNullAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "IsNotNull";
}

/** IsNullOrUndefined Advanced Filter. */
export declare interface IsNullOrUndefinedAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "IsNullOrUndefined";
}

/** This is used to express the source of an input schema mapping for a single target field in the Event Grid Event schema. This is currently used in the mappings for the 'id', 'topic' and 'eventtime' properties. This represents a field in the input event schema. */
export declare interface JsonField {
    /** Name of a field in the input event schema that's to be used as the source of a mapping. */
    sourceField?: string;
}

/**
 * This is used to express the source of an input schema mapping for a single target field
 * in the Event Grid Event schema. This is currently used in the mappings for the 'subject',
 * 'eventtype' and 'dataversion' properties. This represents a field in the input event schema
 * along with a default value to be used, and at least one of these two properties should be provided.
 */
export declare interface JsonFieldWithDefault {
    /** Name of a field in the input event schema that's to be used as the source of a mapping. */
    sourceField?: string;
    /** The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload. */
    defaultValue?: string;
}

/** This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema. */
export declare interface JsonInputSchemaMapping extends InputSchemaMapping {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    inputSchemaMappingType: "Json";
    /** The mapping information for the Id property of the Event Grid Event. */
    id?: JsonField;
    /** The mapping information for the Topic property of the Event Grid Event. */
    topic?: JsonField;
    /** The mapping information for the EventTime property of the Event Grid Event. */
    eventTime?: JsonField;
    /** The mapping information for the EventType property of the Event Grid Event. */
    eventType?: JsonFieldWithDefault;
    /** The mapping information for the Subject property of the Event Grid Event. */
    subject?: JsonFieldWithDefault;
    /** The mapping information for the DataVersion property of the Event Grid Event. */
    dataVersion?: JsonFieldWithDefault;
}

/** Known values of {@link AdvancedFilterOperatorType} that the service accepts. */
export declare enum KnownAdvancedFilterOperatorType {
    /** NumberIn */
    NumberIn = "NumberIn",
    /** NumberNotIn */
    NumberNotIn = "NumberNotIn",
    /** NumberLessThan */
    NumberLessThan = "NumberLessThan",
    /** NumberGreaterThan */
    NumberGreaterThan = "NumberGreaterThan",
    /** NumberLessThanOrEquals */
    NumberLessThanOrEquals = "NumberLessThanOrEquals",
    /** NumberGreaterThanOrEquals */
    NumberGreaterThanOrEquals = "NumberGreaterThanOrEquals",
    /** BoolEquals */
    BoolEquals = "BoolEquals",
    /** StringIn */
    StringIn = "StringIn",
    /** StringNotIn */
    StringNotIn = "StringNotIn",
    /** StringBeginsWith */
    StringBeginsWith = "StringBeginsWith",
    /** StringEndsWith */
    StringEndsWith = "StringEndsWith",
    /** StringContains */
    StringContains = "StringContains",
    /** NumberInRange */
    NumberInRange = "NumberInRange",
    /** NumberNotInRange */
    NumberNotInRange = "NumberNotInRange",
    /** StringNotBeginsWith */
    StringNotBeginsWith = "StringNotBeginsWith",
    /** StringNotEndsWith */
    StringNotEndsWith = "StringNotEndsWith",
    /** StringNotContains */
    StringNotContains = "StringNotContains",
    /** IsNullOrUndefined */
    IsNullOrUndefined = "IsNullOrUndefined",
    /** IsNotNull */
    IsNotNull = "IsNotNull"
}

/** Known values of {@link ChannelProvisioningState} that the service accepts. */
export declare enum KnownChannelProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** IdleDueToMirroredPartnerTopicDeletion */
    IdleDueToMirroredPartnerTopicDeletion = "IdleDueToMirroredPartnerTopicDeletion"
}

/** Known values of {@link ChannelType} that the service accepts. */
export declare enum KnownChannelType {
    /** PartnerTopic */
    PartnerTopic = "PartnerTopic"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DataResidencyBoundary} that the service accepts. */
export declare enum KnownDataResidencyBoundary {
    /** WithinGeopair */
    WithinGeopair = "WithinGeopair",
    /** WithinRegion */
    WithinRegion = "WithinRegion"
}

/** Known values of {@link DeadLetterEndPointType} that the service accepts. */
export declare enum KnownDeadLetterEndPointType {
    /** StorageBlob */
    StorageBlob = "StorageBlob"
}

/** Known values of {@link DeliveryAttributeMappingType} that the service accepts. */
export declare enum KnownDeliveryAttributeMappingType {
    /** Static */
    Static = "Static",
    /** Dynamic */
    Dynamic = "Dynamic"
}

/** Known values of {@link DomainProvisioningState} that the service accepts. */
export declare enum KnownDomainProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link DomainTopicProvisioningState} that the service accepts. */
export declare enum KnownDomainTopicProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link EndpointType} that the service accepts. */
export declare enum KnownEndpointType {
    /** WebHook */
    WebHook = "WebHook",
    /** EventHub */
    EventHub = "EventHub",
    /** StorageQueue */
    StorageQueue = "StorageQueue",
    /** HybridConnection */
    HybridConnection = "HybridConnection",
    /** ServiceBusQueue */
    ServiceBusQueue = "ServiceBusQueue",
    /** ServiceBusTopic */
    ServiceBusTopic = "ServiceBusTopic",
    /** AzureFunction */
    AzureFunction = "AzureFunction"
}

/** Known values of {@link EventDefinitionKind} that the service accepts. */
export declare enum KnownEventDefinitionKind {
    /** Inline */
    Inline = "Inline"
}

/** Known values of {@link EventDeliverySchema} that the service accepts. */
export declare enum KnownEventDeliverySchema {
    /** EventGridSchema */
    EventGridSchema = "EventGridSchema",
    /** CustomInputSchema */
    CustomInputSchema = "CustomInputSchema",
    /** CloudEventSchemaV10 */
    CloudEventSchemaV10 = "CloudEventSchemaV1_0"
}

/** Known values of {@link EventSubscriptionIdentityType} that the service accepts. */
export declare enum KnownEventSubscriptionIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned"
}

/** Known values of {@link EventSubscriptionProvisioningState} that the service accepts. */
export declare enum KnownEventSubscriptionProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** AwaitingManualAction */
    AwaitingManualAction = "AwaitingManualAction"
}

/** Known values of {@link IdentityType} that the service accepts. */
export declare enum KnownIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned, UserAssigned"
}

/** Known values of {@link InputSchema} that the service accepts. */
export declare enum KnownInputSchema {
    /** EventGridSchema */
    EventGridSchema = "EventGridSchema",
    /** CustomEventSchema */
    CustomEventSchema = "CustomEventSchema",
    /** CloudEventSchemaV10 */
    CloudEventSchemaV10 = "CloudEventSchemaV1_0"
}

/** Known values of {@link InputSchemaMappingType} that the service accepts. */
export declare enum KnownInputSchemaMappingType {
    /** Json */
    Json = "Json"
}

/** Known values of {@link IpActionType} that the service accepts. */
export declare enum KnownIpActionType {
    /** Allow */
    Allow = "Allow"
}

/** Known values of {@link PartnerConfigurationProvisioningState} that the service accepts. */
export declare enum KnownPartnerConfigurationProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PartnerNamespaceProvisioningState} that the service accepts. */
export declare enum KnownPartnerNamespaceProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PartnerRegistrationProvisioningState} that the service accepts. */
export declare enum KnownPartnerRegistrationProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PartnerTopicActivationState} that the service accepts. */
export declare enum KnownPartnerTopicActivationState {
    /** NeverActivated */
    NeverActivated = "NeverActivated",
    /** Activated */
    Activated = "Activated",
    /** Deactivated */
    Deactivated = "Deactivated"
}

/** Known values of {@link PartnerTopicProvisioningState} that the service accepts. */
export declare enum KnownPartnerTopicProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed",
    /** IdleDueToMirroredChannelResourceDeletion */
    IdleDueToMirroredChannelResourceDeletion = "IdleDueToMirroredChannelResourceDeletion"
}

/** Known values of {@link PartnerTopicRoutingMode} that the service accepts. */
export declare enum KnownPartnerTopicRoutingMode {
    /** SourceEventAttribute */
    SourceEventAttribute = "SourceEventAttribute",
    /** ChannelNameHeader */
    ChannelNameHeader = "ChannelNameHeader"
}

/** Known values of {@link PersistedConnectionStatus} that the service accepts. */
export declare enum KnownPersistedConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link PrivateEndpointConnectionsParentType} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionsParentType {
    /** Topics */
    Topics = "topics",
    /** Domains */
    Domains = "domains",
    /** PartnerNamespaces */
    PartnerNamespaces = "partnerNamespaces"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link ReadinessState} that the service accepts. */
export declare enum KnownReadinessState {
    /** NeverActivated */
    NeverActivated = "NeverActivated",
    /** Activated */
    Activated = "Activated"
}

/** Known values of {@link ResourceProvisioningState} that the service accepts. */
export declare enum KnownResourceProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link ResourceRegionType} that the service accepts. */
export declare enum KnownResourceRegionType {
    /** RegionalResource */
    RegionalResource = "RegionalResource",
    /** GlobalResource */
    GlobalResource = "GlobalResource"
}

/** Known values of {@link TopicProvisioningState} that the service accepts. */
export declare enum KnownTopicProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link TopicTypeProvisioningState} that the service accepts. */
export declare enum KnownTopicTypeProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link TopicTypeSourceScope} that the service accepts. */
export declare enum KnownTopicTypeSourceScope {
    /** Resource */
    Resource = "Resource",
    /** ResourceGroup */
    ResourceGroup = "ResourceGroup",
    /** AzureSubscription */
    AzureSubscription = "AzureSubscription",
    /** ManagementGroup */
    ManagementGroup = "ManagementGroup"
}

/** Known values of {@link VerifiedPartnerProvisioningState} that the service accepts. */
export declare enum KnownVerifiedPartnerProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** NumberGreaterThan Advanced Filter. */
export declare interface NumberGreaterThanAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "NumberGreaterThan";
    /** The filter value. */
    value?: number;
}

/** NumberGreaterThanOrEquals Advanced Filter. */
export declare interface NumberGreaterThanOrEqualsAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "NumberGreaterThanOrEquals";
    /** The filter value. */
    value?: number;
}

/** NumberIn Advanced Filter. */
export declare interface NumberInAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "NumberIn";
    /** The set of filter values. */
    values?: number[];
}

/** NumberInRange Advanced Filter. */
export declare interface NumberInRangeAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "NumberInRange";
    /** The set of filter values. */
    values?: number[][];
}

/** NumberLessThan Advanced Filter. */
export declare interface NumberLessThanAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "NumberLessThan";
    /** The filter value. */
    value?: number;
}

/** NumberLessThanOrEquals Advanced Filter. */
export declare interface NumberLessThanOrEqualsAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "NumberLessThanOrEquals";
    /** The filter value. */
    value?: number;
}

/** NumberNotIn Advanced Filter. */
export declare interface NumberNotInAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "NumberNotIn";
    /** The set of filter values. */
    values?: number[];
}

/** NumberNotInRange Advanced Filter. */
export declare interface NumberNotInRangeAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "NumberNotInRange";
    /** The set of filter values. */
    values?: number[][];
}

/** Represents an operation returned by the GetOperations request. */
export declare interface Operation {
    /** Name of the operation. */
    name?: string;
    /** Display name of the operation. */
    display?: OperationInfo;
    /** Origin of the operation. */
    origin?: string;
    /** This Boolean is used to determine if the operation is a data plane action or not. */
    isDataAction?: boolean;
    /** Properties of the operation. */
    properties?: Record<string, unknown>;
}

/** Information about an operation */
export declare interface OperationInfo {
    /** Name of the provider */
    provider?: string;
    /** Name of the resource type */
    resource?: string;
    /** Name of the operation */
    operation?: string;
    /** Description of the operation */
    description?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * List the available operations supported by the Microsoft.EventGrid resource provider.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationsListResult;

/** Result of the List Operations operation */
export declare interface OperationsListResult {
    /** A collection of operations */
    value?: Operation[];
}

/** Information about the partner. */
export declare interface Partner {
    /** The immutableId of the corresponding partner registration. */
    partnerRegistrationImmutableId?: string;
    /** The partner name. */
    partnerName?: string;
    /**
     * Expiration time of the partner authorization. If this timer expires, any request from this partner to create, update or delete resources in subscriber's
     * context will fail. If specified, the allowed values are between 1 to the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration.
     * If not specified, the default value will be the value of defaultMaximumExpirationTimeInDays specified in PartnerConfiguration or 7 if this value is not specified.
     */
    authorizationExpirationTimeInUtc?: Date;
}

/** The partner authorization details. */
export declare interface PartnerAuthorization {
    /**
     * Time used to validate the authorization expiration time for each authorized partner. If DefaultMaximumExpirationTimeInDays is
     * not specified, the default is 7 days. Otherwise, allowed values are between 1 and 365 days.
     */
    defaultMaximumExpirationTimeInDays?: number;
    /** The list of authorized partners. */
    authorizedPartnersList?: Partner[];
}

/** Partner configuration information */
export declare interface PartnerConfiguration extends Resource {
    /**
     * The system metadata relating to partner configuration resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Location of the resource. */
    location?: string;
    /** Tags of the resource. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The details of authorized partners. */
    partnerAuthorization?: PartnerAuthorization;
    /** Provisioning state of the partner configuration. */
    provisioningState?: PartnerConfigurationProvisioningState;
}

/**
 * Defines values for PartnerConfigurationProvisioningState. \
 * {@link KnownPartnerConfigurationProvisioningState} can be used interchangeably with PartnerConfigurationProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export declare type PartnerConfigurationProvisioningState = string;

/** Interface representing a PartnerConfigurations. */
export declare interface PartnerConfigurations {
    /**
     * List all the partner configurations under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PartnerConfigurationsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PartnerConfiguration>;
    /**
     * List all the partner configurations under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PartnerConfigurationsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PartnerConfiguration>;
    /**
     * Get properties of a partner configuration.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, options?: PartnerConfigurationsGetOptionalParams): Promise<PartnerConfigurationsGetResponse>;
    /**
     * Synchronously creates or updates a partner configuration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerConfigurationInfo Partner configuration information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, partnerConfigurationInfo: PartnerConfiguration, options?: PartnerConfigurationsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PartnerConfigurationsCreateOrUpdateResponse>, PartnerConfigurationsCreateOrUpdateResponse>>;
    /**
     * Synchronously creates or updates a partner configuration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerConfigurationInfo Partner configuration information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, partnerConfigurationInfo: PartnerConfiguration, options?: PartnerConfigurationsCreateOrUpdateOptionalParams): Promise<PartnerConfigurationsCreateOrUpdateResponse>;
    /**
     * Delete existing partner configuration.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, options?: PartnerConfigurationsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing partner configuration.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, options?: PartnerConfigurationsDeleteOptionalParams): Promise<void>;
    /**
     * Synchronously updates a partner configuration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerConfigurationUpdateParameters Partner configuration update information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, partnerConfigurationUpdateParameters: PartnerConfigurationUpdateParameters, options?: PartnerConfigurationsUpdateOptionalParams): Promise<PollerLike<PollOperationState<PartnerConfigurationsUpdateResponse>, PartnerConfigurationsUpdateResponse>>;
    /**
     * Synchronously updates a partner configuration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerConfigurationUpdateParameters Partner configuration update information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, partnerConfigurationUpdateParameters: PartnerConfigurationUpdateParameters, options?: PartnerConfigurationsUpdateOptionalParams): Promise<PartnerConfigurationsUpdateResponse>;
    /**
     * Authorize a single partner either by partner registration immutable Id or by partner name.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerInfo The information of the partner to be authorized.
     * @param options The options parameters.
     */
    authorizePartner(resourceGroupName: string, partnerInfo: Partner, options?: PartnerConfigurationsAuthorizePartnerOptionalParams): Promise<PartnerConfigurationsAuthorizePartnerResponse>;
    /**
     * Unauthorize a single partner either by partner registration immutable Id or by partner name.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerInfo The information of the partner to be unauthorized.
     * @param options The options parameters.
     */
    unauthorizePartner(resourceGroupName: string, partnerInfo: Partner, options?: PartnerConfigurationsUnauthorizePartnerOptionalParams): Promise<PartnerConfigurationsUnauthorizePartnerResponse>;
}

/** Optional parameters. */
export declare interface PartnerConfigurationsAuthorizePartnerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the authorizePartner operation. */
export declare type PartnerConfigurationsAuthorizePartnerResponse = PartnerConfiguration;

/** Optional parameters. */
export declare interface PartnerConfigurationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PartnerConfigurationsCreateOrUpdateResponse = PartnerConfiguration;

/** Optional parameters. */
export declare interface PartnerConfigurationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PartnerConfigurationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PartnerConfigurationsGetResponse = PartnerConfiguration;

/** Optional parameters. */
export declare interface PartnerConfigurationsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type PartnerConfigurationsListByResourceGroupResponse = PartnerConfigurationsListResult;

/** Optional parameters. */
export declare interface PartnerConfigurationsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type PartnerConfigurationsListBySubscriptionNextResponse = PartnerConfigurationsListResult;

/** Optional parameters. */
export declare interface PartnerConfigurationsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listBySubscription operation. */
export declare type PartnerConfigurationsListBySubscriptionResponse = PartnerConfigurationsListResult;

/** Result of the List partner configurations operation */
export declare interface PartnerConfigurationsListResult {
    /** A collection of partner configurations. */
    value?: PartnerConfiguration[];
    /** A link for the next page of partner configurations. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface PartnerConfigurationsUnauthorizePartnerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the unauthorizePartner operation. */
export declare type PartnerConfigurationsUnauthorizePartnerResponse = PartnerConfiguration;

/** Optional parameters. */
export declare interface PartnerConfigurationsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type PartnerConfigurationsUpdateResponse = PartnerConfiguration;

/** Properties of the partner configuration update. */
export declare interface PartnerConfigurationUpdateParameters {
    /** Tags of the partner configuration resource. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The default time used to validate the maximum expiration time for each authorized partners in days. Allowed values ar between 1 and 365 days. */
    defaultMaximumExpirationTimeInDays?: number;
}

/** Information about the partner. */
export declare interface PartnerDetails {
    /** This is short description about the partner. The length of this description should not exceed 256 characters. */
    description?: string;
    /** Long description for the partner's scenarios and integration.Length of this description should not exceed 2048 characters. */
    longDescription?: string;
    /**
     * URI of the partner website that can be used by Azure customers to setup Event Grid
     * integration on an event source.
     */
    setupUri?: string;
}

/** EventGrid Partner Namespace. */
export declare interface PartnerNamespace extends TrackedResource {
    /**
     * The system metadata relating to Partner Namespace resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /**
     * Provisioning state of the partner namespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PartnerNamespaceProvisioningState;
    /**
     * The fully qualified ARM Id of the partner registration that should be associated with this partner namespace. This takes the following format:
     * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}.
     */
    partnerRegistrationFullyQualifiedId?: string;
    /**
     * Endpoint for the partner namespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoint?: string;
    /**
     * This determines if traffic is allowed over public network. By default it is enabled.
     * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceProperties.InboundIpRules" />
     */
    publicNetworkAccess?: PublicNetworkAccess;
    /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
    inboundIpRules?: InboundIpRule[];
    /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the partner namespace. */
    disableLocalAuth?: boolean;
    /**
     * This determines if events published to this partner namespace should use the source attribute in the event payload
     * or use the channel name in the header when matching to the partner topic. If none is specified, source attribute routing will be used to match the partner topic.
     */
    partnerTopicRoutingMode?: PartnerTopicRoutingMode;
}

/**
 * Defines values for PartnerNamespaceProvisioningState. \
 * {@link KnownPartnerNamespaceProvisioningState} can be used interchangeably with PartnerNamespaceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export declare type PartnerNamespaceProvisioningState = string;

/** PartnerNamespace regenerate shared access key request. */
export declare interface PartnerNamespaceRegenerateKeyRequest {
    /** Key name to regenerate (key1 or key2). */
    keyName: string;
}

/** Interface representing a PartnerNamespaces. */
export declare interface PartnerNamespaces {
    /**
     * List all the partner namespaces under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PartnerNamespacesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PartnerNamespace>;
    /**
     * List all the partner namespaces under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PartnerNamespacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PartnerNamespace>;
    /**
     * Get properties of a partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, partnerNamespaceName: string, options?: PartnerNamespacesGetOptionalParams): Promise<PartnerNamespacesGetResponse>;
    /**
     * Asynchronously creates a new partner namespace with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, partnerNamespaceName: string, partnerNamespaceInfo: PartnerNamespace, options?: PartnerNamespacesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PartnerNamespacesCreateOrUpdateResponse>, PartnerNamespacesCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new partner namespace with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, partnerNamespaceName: string, partnerNamespaceInfo: PartnerNamespace, options?: PartnerNamespacesCreateOrUpdateOptionalParams): Promise<PartnerNamespacesCreateOrUpdateResponse>;
    /**
     * Delete existing partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, partnerNamespaceName: string, options?: PartnerNamespacesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, partnerNamespaceName: string, options?: PartnerNamespacesDeleteOptionalParams): Promise<void>;
    /**
     * Asynchronously updates a partner namespace with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceUpdateParameters Partner namespace update information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, partnerNamespaceName: string, partnerNamespaceUpdateParameters: PartnerNamespaceUpdateParameters, options?: PartnerNamespacesUpdateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Asynchronously updates a partner namespace with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceUpdateParameters Partner namespace update information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, partnerNamespaceName: string, partnerNamespaceUpdateParameters: PartnerNamespaceUpdateParameters, options?: PartnerNamespacesUpdateOptionalParams): Promise<void>;
    /**
     * List the two keys used to publish to a partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param options The options parameters.
     */
    listSharedAccessKeys(resourceGroupName: string, partnerNamespaceName: string, options?: PartnerNamespacesListSharedAccessKeysOptionalParams): Promise<PartnerNamespacesListSharedAccessKeysResponse>;
    /**
     * Regenerate a shared access key for a partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param regenerateKeyRequest Request body to regenerate key.
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName: string, partnerNamespaceName: string, regenerateKeyRequest: PartnerNamespaceRegenerateKeyRequest, options?: PartnerNamespacesRegenerateKeyOptionalParams): Promise<PartnerNamespacesRegenerateKeyResponse>;
}

/** Optional parameters. */
export declare interface PartnerNamespacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PartnerNamespacesCreateOrUpdateResponse = PartnerNamespace;

/** Optional parameters. */
export declare interface PartnerNamespacesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PartnerNamespacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PartnerNamespacesGetResponse = PartnerNamespace;

/** Shared access keys of the partner namespace. */
export declare interface PartnerNamespaceSharedAccessKeys {
    /** Shared access key1 for the partner namespace. */
    key1?: string;
    /** Shared access key2 for the partner namespace. */
    key2?: string;
}

/** Optional parameters. */
export declare interface PartnerNamespacesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type PartnerNamespacesListByResourceGroupNextResponse = PartnerNamespacesListResult;

/** Optional parameters. */
export declare interface PartnerNamespacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type PartnerNamespacesListByResourceGroupResponse = PartnerNamespacesListResult;

/** Optional parameters. */
export declare interface PartnerNamespacesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type PartnerNamespacesListBySubscriptionNextResponse = PartnerNamespacesListResult;

/** Optional parameters. */
export declare interface PartnerNamespacesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listBySubscription operation. */
export declare type PartnerNamespacesListBySubscriptionResponse = PartnerNamespacesListResult;

/** Result of the List Partner Namespaces operation */
export declare interface PartnerNamespacesListResult {
    /** A collection of partner namespaces. */
    value?: PartnerNamespace[];
    /** A link for the next page of partner namespaces. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface PartnerNamespacesListSharedAccessKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSharedAccessKeys operation. */
export declare type PartnerNamespacesListSharedAccessKeysResponse = PartnerNamespaceSharedAccessKeys;

/** Optional parameters. */
export declare interface PartnerNamespacesRegenerateKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKey operation. */
export declare type PartnerNamespacesRegenerateKeyResponse = PartnerNamespaceSharedAccessKeys;

/** Optional parameters. */
export declare interface PartnerNamespacesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Properties of the Partner Namespace update. */
export declare interface PartnerNamespaceUpdateParameters {
    /** Tags of the Partner Namespace. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * This determines if traffic is allowed over public network. By default it is enabled.
     * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.PartnerNamespaceUpdateParameterProperties.InboundIpRules" />
     */
    publicNetworkAccess?: PublicNetworkAccess;
    /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
    inboundIpRules?: InboundIpRule[];
    /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the partner namespace. */
    disableLocalAuth?: boolean;
}

/** Information about a partner registration. */
export declare interface PartnerRegistration extends TrackedResource {
    /**
     * The system metadata relating to Partner Registration resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Provisioning state of the partner registration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PartnerRegistrationProvisioningState;
    /**
     * The immutableId of the corresponding partner registration.
     * Note: This property is marked for deprecation and is not supported in any future GA API version
     */
    partnerRegistrationImmutableId?: string;
}

/**
 * Defines values for PartnerRegistrationProvisioningState. \
 * {@link KnownPartnerRegistrationProvisioningState} can be used interchangeably with PartnerRegistrationProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export declare type PartnerRegistrationProvisioningState = string;

/** Interface representing a PartnerRegistrations. */
export declare interface PartnerRegistrations {
    /**
     * List all the partner registrations under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PartnerRegistrationsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PartnerRegistration>;
    /**
     * List all the partner registrations under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PartnerRegistrationsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PartnerRegistration>;
    /**
     * Gets a partner registration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, partnerRegistrationName: string, options?: PartnerRegistrationsGetOptionalParams): Promise<PartnerRegistrationsGetResponse>;
    /**
     * Creates a new partner registration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationInfo PartnerRegistration information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationInfo: PartnerRegistration, options?: PartnerRegistrationsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PartnerRegistrationsCreateOrUpdateResponse>, PartnerRegistrationsCreateOrUpdateResponse>>;
    /**
     * Creates a new partner registration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationInfo PartnerRegistration information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationInfo: PartnerRegistration, options?: PartnerRegistrationsCreateOrUpdateOptionalParams): Promise<PartnerRegistrationsCreateOrUpdateResponse>;
    /**
     * Deletes a partner registration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, partnerRegistrationName: string, options?: PartnerRegistrationsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a partner registration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, partnerRegistrationName: string, options?: PartnerRegistrationsDeleteOptionalParams): Promise<void>;
    /**
     * Updates a partner registration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationUpdateParameters Partner registration update information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationUpdateParameters: PartnerRegistrationUpdateParameters, options?: PartnerRegistrationsUpdateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Updates a partner registration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationUpdateParameters Partner registration update information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, partnerRegistrationName: string, partnerRegistrationUpdateParameters: PartnerRegistrationUpdateParameters, options?: PartnerRegistrationsUpdateOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PartnerRegistrationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PartnerRegistrationsCreateOrUpdateResponse = PartnerRegistration;

/** Optional parameters. */
export declare interface PartnerRegistrationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PartnerRegistrationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PartnerRegistrationsGetResponse = PartnerRegistration;

/** Optional parameters. */
export declare interface PartnerRegistrationsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type PartnerRegistrationsListByResourceGroupNextResponse = PartnerRegistrationsListResult;

/** Optional parameters. */
export declare interface PartnerRegistrationsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type PartnerRegistrationsListByResourceGroupResponse = PartnerRegistrationsListResult;

/** Optional parameters. */
export declare interface PartnerRegistrationsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type PartnerRegistrationsListBySubscriptionNextResponse = PartnerRegistrationsListResult;

/** Optional parameters. */
export declare interface PartnerRegistrationsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listBySubscription operation. */
export declare type PartnerRegistrationsListBySubscriptionResponse = PartnerRegistrationsListResult;

/** Result of the List Partner Registrations operation. */
export declare interface PartnerRegistrationsListResult {
    /** A collection of partner registrations. */
    value?: PartnerRegistration[];
    /** A link for the next page of partner registrations. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface PartnerRegistrationsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Properties of the Partner Registration update. */
export declare interface PartnerRegistrationUpdateParameters {
    /** Tags of the partner registration resource. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Event Grid Partner Topic. */
export declare interface PartnerTopic extends TrackedResource {
    /**
     * The system metadata relating to Partner Topic resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Identity information for the Partner Topic resource. */
    identity?: IdentityInfo;
    /** The immutableId of the corresponding partner registration. */
    partnerRegistrationImmutableId?: string;
    /** Source associated with this partner topic. This represents a unique partner resource. */
    source?: string;
    /** Event Type information from the corresponding event channel. */
    eventTypeInfo?: EventTypeInfo;
    /**
     * Expiration time of the partner topic. If this timer expires while the partner topic is still never activated,
     * the partner topic and corresponding event channel are deleted.
     */
    expirationTimeIfNotActivatedUtc?: Date;
    /**
     * Provisioning state of the partner topic.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PartnerTopicProvisioningState;
    /** Activation state of the partner topic. */
    activationState?: PartnerTopicActivationState;
    /**
     * Friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     * This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     */
    partnerTopicFriendlyDescription?: string;
    /** Context or helpful message that can be used during the approval process by the subscriber. */
    messageForActivation?: string;
}

/**
 * Defines values for PartnerTopicActivationState. \
 * {@link KnownPartnerTopicActivationState} can be used interchangeably with PartnerTopicActivationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NeverActivated** \
 * **Activated** \
 * **Deactivated**
 */
export declare type PartnerTopicActivationState = string;

/** Interface representing a PartnerTopicEventSubscriptions. */
export declare interface PartnerTopicEventSubscriptions {
    /**
     * List event subscriptions that belong to a specific partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    listByPartnerTopic(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicEventSubscriptionsListByPartnerTopicOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * Get properties of an event subscription of a partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be found. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, partnerTopicName: string, eventSubscriptionName: string, options?: PartnerTopicEventSubscriptionsGetOptionalParams): Promise<PartnerTopicEventSubscriptionsGetResponse>;
    /**
     * Asynchronously creates or updates an event subscription of a partner topic with the specified
     * parameters. Existing event subscriptions will be updated with this API.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, partnerTopicName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: PartnerTopicEventSubscriptionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PartnerTopicEventSubscriptionsCreateOrUpdateResponse>, PartnerTopicEventSubscriptionsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates or updates an event subscription of a partner topic with the specified
     * parameters. Existing event subscriptions will be updated with this API.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, partnerTopicName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: PartnerTopicEventSubscriptionsCreateOrUpdateOptionalParams): Promise<PartnerTopicEventSubscriptionsCreateOrUpdateResponse>;
    /**
     * Delete an existing event subscription of a partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, partnerTopicName: string, eventSubscriptionName: string, options?: PartnerTopicEventSubscriptionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete an existing event subscription of a partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, partnerTopicName: string, eventSubscriptionName: string, options?: PartnerTopicEventSubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Update an existing event subscription of a partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, partnerTopicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: PartnerTopicEventSubscriptionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<PartnerTopicEventSubscriptionsUpdateResponse>, PartnerTopicEventSubscriptionsUpdateResponse>>;
    /**
     * Update an existing event subscription of a partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, partnerTopicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: PartnerTopicEventSubscriptionsUpdateOptionalParams): Promise<PartnerTopicEventSubscriptionsUpdateResponse>;
    /**
     * Get the full endpoint URL for an event subscription of a partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    getFullUrl(resourceGroupName: string, partnerTopicName: string, eventSubscriptionName: string, options?: PartnerTopicEventSubscriptionsGetFullUrlOptionalParams): Promise<PartnerTopicEventSubscriptionsGetFullUrlResponse>;
    /**
     * Get all delivery attributes for an event subscription of a partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    getDeliveryAttributes(resourceGroupName: string, partnerTopicName: string, eventSubscriptionName: string, options?: PartnerTopicEventSubscriptionsGetDeliveryAttributesOptionalParams): Promise<PartnerTopicEventSubscriptionsGetDeliveryAttributesResponse>;
}

/** Optional parameters. */
export declare interface PartnerTopicEventSubscriptionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PartnerTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export declare interface PartnerTopicEventSubscriptionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PartnerTopicEventSubscriptionsGetDeliveryAttributesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDeliveryAttributes operation. */
export declare type PartnerTopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export declare interface PartnerTopicEventSubscriptionsGetFullUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getFullUrl operation. */
export declare type PartnerTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export declare interface PartnerTopicEventSubscriptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PartnerTopicEventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export declare interface PartnerTopicEventSubscriptionsListByPartnerTopicNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByPartnerTopicNext operation. */
export declare type PartnerTopicEventSubscriptionsListByPartnerTopicNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface PartnerTopicEventSubscriptionsListByPartnerTopicOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByPartnerTopic operation. */
export declare type PartnerTopicEventSubscriptionsListByPartnerTopicResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface PartnerTopicEventSubscriptionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type PartnerTopicEventSubscriptionsUpdateResponse = EventSubscription;

/** Properties of the corresponding partner topic of a Channel. */
export declare interface PartnerTopicInfo {
    /**
     * Azure subscription ID of the subscriber. The partner topic associated with the channel will be
     * created under this Azure subscription.
     */
    azureSubscriptionId?: string;
    /**
     * Azure Resource Group of the subscriber. The partner topic associated with the channel will be
     * created under this resource group.
     */
    resourceGroupName?: string;
    /** Name of the partner topic associated with the channel. */
    name?: string;
    /**
     * Event Type Information for the partner topic. This information is provided by the publisher and can be used by the
     * subscriber to view different types of events that are published.
     */
    eventTypeInfo?: EventTypeInfo;
    /**
     * The source information is provided by the publisher to determine the scope or context from which the events
     * are originating. This information can be used by the subscriber during the approval process of the
     * created partner topic.
     */
    source?: string;
}

/**
 * Defines values for PartnerTopicProvisioningState. \
 * {@link KnownPartnerTopicProvisioningState} can be used interchangeably with PartnerTopicProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed** \
 * **IdleDueToMirroredChannelResourceDeletion**
 */
export declare type PartnerTopicProvisioningState = string;

/**
 * Defines values for PartnerTopicRoutingMode. \
 * {@link KnownPartnerTopicRoutingMode} can be used interchangeably with PartnerTopicRoutingMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SourceEventAttribute** \
 * **ChannelNameHeader**
 */
export declare type PartnerTopicRoutingMode = string;

/** Interface representing a PartnerTopics. */
export declare interface PartnerTopics {
    /**
     * List all the partner topics under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PartnerTopicsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PartnerTopic>;
    /**
     * List all the partner topics under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PartnerTopicsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PartnerTopic>;
    /**
     * Get properties of a partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicsGetOptionalParams): Promise<PartnerTopicsGetResponse>;
    /**
     * Asynchronously creates a new partner topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param partnerTopicInfo Partner Topic information.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, partnerTopicName: string, partnerTopicInfo: PartnerTopic, options?: PartnerTopicsCreateOrUpdateOptionalParams): Promise<PartnerTopicsCreateOrUpdateResponse>;
    /**
     * Delete existing partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicsDeleteOptionalParams): Promise<void>;
    /**
     * Asynchronously updates a partner topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param partnerTopicUpdateParameters PartnerTopic update information.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, partnerTopicName: string, partnerTopicUpdateParameters: PartnerTopicUpdateParameters, options?: PartnerTopicsUpdateOptionalParams): Promise<PartnerTopicsUpdateResponse>;
    /**
     * Activate a newly created partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    activate(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicsActivateOptionalParams): Promise<PartnerTopicsActivateResponse>;
    /**
     * Deactivate specific partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    deactivate(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicsDeactivateOptionalParams): Promise<PartnerTopicsDeactivateResponse>;
}

/** Optional parameters. */
export declare interface PartnerTopicsActivateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the activate operation. */
export declare type PartnerTopicsActivateResponse = PartnerTopic;

/** Optional parameters. */
export declare interface PartnerTopicsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PartnerTopicsCreateOrUpdateResponse = PartnerTopic;

/** Optional parameters. */
export declare interface PartnerTopicsDeactivateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the deactivate operation. */
export declare type PartnerTopicsDeactivateResponse = PartnerTopic;

/** Optional parameters. */
export declare interface PartnerTopicsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PartnerTopicsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PartnerTopicsGetResponse = PartnerTopic;

/** Optional parameters. */
export declare interface PartnerTopicsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type PartnerTopicsListByResourceGroupNextResponse = PartnerTopicsListResult;

/** Optional parameters. */
export declare interface PartnerTopicsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type PartnerTopicsListByResourceGroupResponse = PartnerTopicsListResult;

/** Optional parameters. */
export declare interface PartnerTopicsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type PartnerTopicsListBySubscriptionNextResponse = PartnerTopicsListResult;

/** Optional parameters. */
export declare interface PartnerTopicsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listBySubscription operation. */
export declare type PartnerTopicsListBySubscriptionResponse = PartnerTopicsListResult;

/** Result of the List Partner Topics operation. */
export declare interface PartnerTopicsListResult {
    /** A collection of partner topics. */
    value?: PartnerTopic[];
    /** A link for the next page of partner topics. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface PartnerTopicsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type PartnerTopicsUpdateResponse = PartnerTopic;

/** Properties of the Partner Topic update. */
export declare interface PartnerTopicUpdateParameters {
    /** Tags of the Partner Topic resource. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Identity information for the Partner Topic resource. */
    identity?: IdentityInfo;
}

/** Update properties for the corresponding partner topic of a channel. */
export declare interface PartnerUpdateTopicInfo {
    /** Event type info for the partner topic */
    eventTypeInfo?: EventTypeInfo;
}

/**
 * Defines values for PersistedConnectionStatus. \
 * {@link KnownPersistedConnectionStatus} can be used interchangeably with PersistedConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export declare type PersistedConnectionStatus = string;

/** PrivateEndpoint information. */
export declare interface PrivateEndpoint {
    /** The ARM identifier for Private Endpoint. */
    id?: string;
}

export declare interface PrivateEndpointConnection extends Resource {
    /** The Private Endpoint resource for this Connection. */
    privateEndpoint?: PrivateEndpoint;
    /** GroupIds from the private link service resource. */
    groupIds?: string[];
    /** Details about the state of the connection. */
    privateLinkServiceConnectionState?: ConnectionState;
    /** Provisioning state of the Private Endpoint Connection. */
    provisioningState?: ResourceProvisioningState;
}

/** Result of the list of all private endpoint connections operation. */
export declare interface PrivateEndpointConnectionListResult {
    /** A collection of private endpoint connection resources. */
    value?: PrivateEndpointConnection[];
    /** A link for the next page of private endpoint connection resources. */
    nextLink?: string;
}

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * Get all private endpoint connections under a topic, domain, or partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
     *                   \'partnerNamespaces\'.
     * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
     *                   partner namespace name).
     * @param options The options parameters.
     */
    listByResource(resourceGroupName: string, parentType: PrivateEndpointConnectionsParentType, parentName: string, options?: PrivateEndpointConnectionsListByResourceOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Get a specific private endpoint connection under a topic, domain, or partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
     *                   \'partnerNamespaces\'.
     * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
     *                   partner namespace name).
     * @param privateEndpointConnectionName The name of the private endpoint connection connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, parentType: PrivateEndpointConnectionsParentType, parentName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update a specific private endpoint connection under a topic, domain or partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
     *                   \'partnerNamespaces\'.
     * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
     *                   partner namespace name).
     * @param privateEndpointConnectionName The name of the private endpoint connection connection.
     * @param privateEndpointConnection The private endpoint connection object to update.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, parentType: PrivateEndpointConnectionsParentType, parentName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<PrivateEndpointConnectionsUpdateResponse>, PrivateEndpointConnectionsUpdateResponse>>;
    /**
     * Update a specific private endpoint connection under a topic, domain or partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
     *                   \'partnerNamespaces\'.
     * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
     *                   partner namespace name).
     * @param privateEndpointConnectionName The name of the private endpoint connection connection.
     * @param privateEndpointConnection The private endpoint connection object to update.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, parentType: PrivateEndpointConnectionsParentType, parentName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsUpdateOptionalParams): Promise<PrivateEndpointConnectionsUpdateResponse>;
    /**
     * Delete a specific private endpoint connection under a topic, domain, or partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
     *                   \'partnerNamespaces\'.
     * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
     *                   partner namespace name).
     * @param privateEndpointConnectionName The name of the private endpoint connection connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, parentType: PrivateEndpointConnectionsParentType, parentName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a specific private endpoint connection under a topic, domain, or partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
     *                   \'partnerNamespaces\'.
     * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
     *                   partner namespace name).
     * @param privateEndpointConnectionName The name of the private endpoint connection connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, parentType: PrivateEndpointConnectionsParentType, parentName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByResourceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceNext operation. */
export declare type PrivateEndpointConnectionsListByResourceNextResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByResourceOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByResource operation. */
export declare type PrivateEndpointConnectionsListByResourceResponse = PrivateEndpointConnectionListResult;

/**
 * Defines values for PrivateEndpointConnectionsParentType. \
 * {@link KnownPrivateEndpointConnectionsParentType} can be used interchangeably with PrivateEndpointConnectionsParentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **topics** \
 * **domains** \
 * **partnerNamespaces**
 */
export declare type PrivateEndpointConnectionsParentType = string;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type PrivateEndpointConnectionsUpdateResponse = PrivateEndpointConnection;

/** Information of the private link resource. */
export declare interface PrivateLinkResource {
    /** Fully qualified identifier of the resource. */
    id?: string;
    /** Name of the resource. */
    name?: string;
    /** Type of the resource. */
    type?: string;
    groupId?: string;
    displayName?: string;
    requiredMembers?: string[];
    requiredZoneNames?: string[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * List all the private link resources under a topic, domain, or partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
     *                   \'partnerNamespaces\'.
     * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
     *                   partner namespace name).
     * @param options The options parameters.
     */
    listByResource(resourceGroupName: string, parentType: string, parentName: string, options?: PrivateLinkResourcesListByResourceOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
    /**
     * Get properties of a private link resource.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param parentType The type of the parent resource. This can be either \'topics\', \'domains\', or
     *                   \'partnerNamespaces\'.
     * @param parentName The name of the parent resource (namely, either, the topic name, domain name, or
     *                   partner namespace name).
     * @param privateLinkResourceName The name of private link resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, parentType: string, parentName: string, privateLinkResourceName: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByResourceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceNext operation. */
export declare type PrivateLinkResourcesListByResourceNextResponse = PrivateLinkResourcesListResult;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByResourceOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByResource operation. */
export declare type PrivateLinkResourcesListByResourceResponse = PrivateLinkResourcesListResult;

/** Result of the List private link resources operation. */
export declare interface PrivateLinkResourcesListResult {
    /** A collection of private link resources */
    value?: PrivateLinkResource[];
    /** A link for the next page of private link resources. */
    nextLink?: string;
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/**
 * Defines values for ReadinessState. \
 * {@link KnownReadinessState} can be used interchangeably with ReadinessState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NeverActivated** \
 * **Activated**
 */
export declare type ReadinessState = string;

/** Definition of a Resource. */
export declare interface Resource {
    /**
     * Fully qualified identifier of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/**
 * Defines values for ResourceProvisioningState. \
 * {@link KnownResourceProvisioningState} can be used interchangeably with ResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export declare type ResourceProvisioningState = string;

/**
 * Defines values for ResourceRegionType. \
 * {@link KnownResourceRegionType} can be used interchangeably with ResourceRegionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RegionalResource** \
 * **GlobalResource**
 */
export declare type ResourceRegionType = string;

/** Information about the retry policy for an event subscription. */
export declare interface RetryPolicy {
    /** Maximum number of delivery retry attempts for events. */
    maxDeliveryAttempts?: number;
    /** Time To Live (in minutes) for events. */
    eventTimeToLiveInMinutes?: number;
}

/** Information about the service bus destination for an event subscription. */
export declare interface ServiceBusQueueEventSubscriptionDestination extends EventSubscriptionDestination {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "ServiceBusQueue";
    /** The Azure Resource Id that represents the endpoint of the Service Bus destination of an event subscription. */
    resourceId?: string;
    /** Delivery attribute details. */
    deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
}

/** Information about the service bus topic destination for an event subscription. */
export declare interface ServiceBusTopicEventSubscriptionDestination extends EventSubscriptionDestination {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "ServiceBusTopic";
    /** The Azure Resource Id that represents the endpoint of the Service Bus Topic destination of an event subscription. */
    resourceId?: string;
    /** Delivery attribute details. */
    deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
}

/** Static delivery attribute mapping details. */
export declare interface StaticDeliveryAttributeMapping extends DeliveryAttributeMapping {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Static";
    /** Value of the delivery attribute. */
    value?: string;
    /** Boolean flag to tell if the attribute contains sensitive information . */
    isSecret?: boolean;
}

/** Information about the storage blob based dead letter destination. */
export declare interface StorageBlobDeadLetterDestination extends DeadLetterDestination {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "StorageBlob";
    /** The Azure Resource ID of the storage account that is the destination of the deadletter events */
    resourceId?: string;
    /** The name of the Storage blob container that is the destination of the deadletter events */
    blobContainerName?: string;
}

/** Information about the storage queue destination for an event subscription. */
export declare interface StorageQueueEventSubscriptionDestination extends EventSubscriptionDestination {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "StorageQueue";
    /** The Azure Resource ID of the storage account that contains the queue that is the destination of an event subscription. */
    resourceId?: string;
    /** The name of the Storage queue under a storage account that is the destination of an event subscription. */
    queueName?: string;
    /** Storage queue message time to live in seconds. */
    queueMessageTimeToLiveInSeconds?: number;
}

/** StringBeginsWith Advanced Filter. */
export declare interface StringBeginsWithAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "StringBeginsWith";
    /** The set of filter values. */
    values?: string[];
}

/** StringContains Advanced Filter. */
export declare interface StringContainsAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "StringContains";
    /** The set of filter values. */
    values?: string[];
}

/** StringEndsWith Advanced Filter. */
export declare interface StringEndsWithAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "StringEndsWith";
    /** The set of filter values. */
    values?: string[];
}

/** StringIn Advanced Filter. */
export declare interface StringInAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "StringIn";
    /** The set of filter values. */
    values?: string[];
}

/** StringNotBeginsWith Advanced Filter. */
export declare interface StringNotBeginsWithAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "StringNotBeginsWith";
    /** The set of filter values. */
    values?: string[];
}

/** StringNotContains Advanced Filter. */
export declare interface StringNotContainsAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "StringNotContains";
    /** The set of filter values. */
    values?: string[];
}

/** StringNotEndsWith Advanced Filter. */
export declare interface StringNotEndsWithAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "StringNotEndsWith";
    /** The set of filter values. */
    values?: string[];
}

/** StringNotIn Advanced Filter. */
export declare interface StringNotInAdvancedFilter extends AdvancedFilter {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    operatorType: "StringNotIn";
    /** The set of filter values. */
    values?: string[];
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** EventGrid System Topic. */
export declare interface SystemTopic extends TrackedResource {
    /** Identity information for the resource. */
    identity?: IdentityInfo;
    /**
     * The system metadata relating to System Topic resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Provisioning state of the system topic.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
    /** Source for the system topic. */
    source?: string;
    /** TopicType for the system topic. */
    topicType?: string;
    /**
     * Metric resource id for the system topic.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricResourceId?: string;
}

/** Interface representing a SystemTopicEventSubscriptions. */
export declare interface SystemTopicEventSubscriptions {
    /**
     * List event subscriptions that belong to a specific system topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param options The options parameters.
     */
    listBySystemTopic(resourceGroupName: string, systemTopicName: string, options?: SystemTopicEventSubscriptionsListBySystemTopicOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * Get an event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: SystemTopicEventSubscriptionsGetOptionalParams): Promise<SystemTopicEventSubscriptionsGetResponse>;
    /**
     * Asynchronously creates or updates an event subscription with the specified parameters. Existing
     * event subscriptions will be updated with this API.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: SystemTopicEventSubscriptionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<SystemTopicEventSubscriptionsCreateOrUpdateResponse>, SystemTopicEventSubscriptionsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates or updates an event subscription with the specified parameters. Existing
     * event subscriptions will be updated with this API.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: SystemTopicEventSubscriptionsCreateOrUpdateOptionalParams): Promise<SystemTopicEventSubscriptionsCreateOrUpdateResponse>;
    /**
     * Delete an existing event subscription of a system topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: SystemTopicEventSubscriptionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete an existing event subscription of a system topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: SystemTopicEventSubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Update an existing event subscription of a system topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: SystemTopicEventSubscriptionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<SystemTopicEventSubscriptionsUpdateResponse>, SystemTopicEventSubscriptionsUpdateResponse>>;
    /**
     * Update an existing event subscription of a system topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: SystemTopicEventSubscriptionsUpdateOptionalParams): Promise<SystemTopicEventSubscriptionsUpdateResponse>;
    /**
     * Get the full endpoint URL for an event subscription of a system topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    getFullUrl(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: SystemTopicEventSubscriptionsGetFullUrlOptionalParams): Promise<SystemTopicEventSubscriptionsGetFullUrlResponse>;
    /**
     * Get all delivery attributes for an event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    getDeliveryAttributes(resourceGroupName: string, systemTopicName: string, eventSubscriptionName: string, options?: SystemTopicEventSubscriptionsGetDeliveryAttributesOptionalParams): Promise<SystemTopicEventSubscriptionsGetDeliveryAttributesResponse>;
}

/** Optional parameters. */
export declare interface SystemTopicEventSubscriptionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SystemTopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export declare interface SystemTopicEventSubscriptionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SystemTopicEventSubscriptionsGetDeliveryAttributesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDeliveryAttributes operation. */
export declare type SystemTopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export declare interface SystemTopicEventSubscriptionsGetFullUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getFullUrl operation. */
export declare type SystemTopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export declare interface SystemTopicEventSubscriptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SystemTopicEventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export declare interface SystemTopicEventSubscriptionsListBySystemTopicNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySystemTopicNext operation. */
export declare type SystemTopicEventSubscriptionsListBySystemTopicNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface SystemTopicEventSubscriptionsListBySystemTopicOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listBySystemTopic operation. */
export declare type SystemTopicEventSubscriptionsListBySystemTopicResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface SystemTopicEventSubscriptionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type SystemTopicEventSubscriptionsUpdateResponse = EventSubscription;

/** Interface representing a SystemTopics. */
export declare interface SystemTopics {
    /**
     * List all the system topics under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: SystemTopicsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<SystemTopic>;
    /**
     * List all the system topics under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: SystemTopicsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<SystemTopic>;
    /**
     * Get properties of a system topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, systemTopicName: string, options?: SystemTopicsGetOptionalParams): Promise<SystemTopicsGetResponse>;
    /**
     * Asynchronously creates a new system topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param systemTopicInfo System Topic information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, systemTopicName: string, systemTopicInfo: SystemTopic, options?: SystemTopicsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<SystemTopicsCreateOrUpdateResponse>, SystemTopicsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new system topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param systemTopicInfo System Topic information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, systemTopicName: string, systemTopicInfo: SystemTopic, options?: SystemTopicsCreateOrUpdateOptionalParams): Promise<SystemTopicsCreateOrUpdateResponse>;
    /**
     * Delete existing system topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, systemTopicName: string, options?: SystemTopicsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing system topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, systemTopicName: string, options?: SystemTopicsDeleteOptionalParams): Promise<void>;
    /**
     * Asynchronously updates a system topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param systemTopicUpdateParameters SystemTopic update information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, systemTopicName: string, systemTopicUpdateParameters: SystemTopicUpdateParameters, options?: SystemTopicsUpdateOptionalParams): Promise<PollerLike<PollOperationState<SystemTopicsUpdateResponse>, SystemTopicsUpdateResponse>>;
    /**
     * Asynchronously updates a system topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param systemTopicName Name of the system topic.
     * @param systemTopicUpdateParameters SystemTopic update information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, systemTopicName: string, systemTopicUpdateParameters: SystemTopicUpdateParameters, options?: SystemTopicsUpdateOptionalParams): Promise<SystemTopicsUpdateResponse>;
}

/** Optional parameters. */
export declare interface SystemTopicsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SystemTopicsCreateOrUpdateResponse = SystemTopic;

/** Optional parameters. */
export declare interface SystemTopicsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SystemTopicsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SystemTopicsGetResponse = SystemTopic;

/** Optional parameters. */
export declare interface SystemTopicsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type SystemTopicsListByResourceGroupNextResponse = SystemTopicsListResult;

/** Optional parameters. */
export declare interface SystemTopicsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type SystemTopicsListByResourceGroupResponse = SystemTopicsListResult;

/** Optional parameters. */
export declare interface SystemTopicsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type SystemTopicsListBySubscriptionNextResponse = SystemTopicsListResult;

/** Optional parameters. */
export declare interface SystemTopicsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listBySubscription operation. */
export declare type SystemTopicsListBySubscriptionResponse = SystemTopicsListResult;

/** Result of the List System topics operation. */
export declare interface SystemTopicsListResult {
    /** A collection of system Topics. */
    value?: SystemTopic[];
    /** A link for the next page of topics. */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface SystemTopicsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type SystemTopicsUpdateResponse = SystemTopic;

/** Properties of the System Topic update. */
export declare interface SystemTopicUpdateParameters {
    /** Tags of the system topic. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Resource identity information. */
    identity?: IdentityInfo;
}

/** EventGrid Topic */
export declare interface Topic extends TrackedResource {
    /** Identity information for the resource. */
    identity?: IdentityInfo;
    /**
     * The system metadata relating to Topic resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /**
     * Provisioning state of the topic.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: TopicProvisioningState;
    /**
     * Endpoint for the topic.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoint?: string;
    /** This determines the format that Event Grid should expect for incoming events published to the topic. */
    inputSchema?: InputSchema;
    /** This enables publishing using custom event schemas. An InputSchemaMapping can be specified to map various properties of a source schema to various required properties of the EventGridEvent schema. */
    inputSchemaMapping?: InputSchemaMappingUnion;
    /**
     * Metric resource id for the topic.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricResourceId?: string;
    /**
     * This determines if traffic is allowed over public network. By default it is enabled.
     * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicProperties.InboundIpRules" />
     */
    publicNetworkAccess?: PublicNetworkAccess;
    /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
    inboundIpRules?: InboundIpRule[];
    /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the topic. */
    disableLocalAuth?: boolean;
    /** Data Residency Boundary of the resource. */
    dataResidencyBoundary?: DataResidencyBoundary;
}

/** Interface representing a TopicEventSubscriptions. */
export declare interface TopicEventSubscriptions {
    /**
     * List all event subscriptions that have been created for a specific topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, topicName: string, options?: TopicEventSubscriptionsListOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    /**
     * Get all delivery attributes for an event subscription for topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getDeliveryAttributes(resourceGroupName: string, topicName: string, eventSubscriptionName: string, options?: TopicEventSubscriptionsGetDeliveryAttributesOptionalParams): Promise<TopicEventSubscriptionsGetDeliveryAttributesResponse>;
    /**
     * Get properties of an event subscription of a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be found. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, topicName: string, eventSubscriptionName: string, options?: TopicEventSubscriptionsGetOptionalParams): Promise<TopicEventSubscriptionsGetResponse>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: TopicEventSubscriptionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<TopicEventSubscriptionsCreateOrUpdateResponse>, TopicEventSubscriptionsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: TopicEventSubscriptionsCreateOrUpdateOptionalParams): Promise<TopicEventSubscriptionsCreateOrUpdateResponse>;
    /**
     * Delete an existing event subscription for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, topicName: string, eventSubscriptionName: string, options?: TopicEventSubscriptionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete an existing event subscription for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, topicName: string, eventSubscriptionName: string, options?: TopicEventSubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Update an existing event subscription for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the domain.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: TopicEventSubscriptionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<TopicEventSubscriptionsUpdateResponse>, TopicEventSubscriptionsUpdateResponse>>;
    /**
     * Update an existing event subscription for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the domain.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: TopicEventSubscriptionsUpdateOptionalParams): Promise<TopicEventSubscriptionsUpdateResponse>;
    /**
     * Get the full endpoint URL for an event subscription for topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getFullUrl(resourceGroupName: string, topicName: string, eventSubscriptionName: string, options?: TopicEventSubscriptionsGetFullUrlOptionalParams): Promise<TopicEventSubscriptionsGetFullUrlResponse>;
}

/** Optional parameters. */
export declare interface TopicEventSubscriptionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type TopicEventSubscriptionsCreateOrUpdateResponse = EventSubscription;

/** Optional parameters. */
export declare interface TopicEventSubscriptionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface TopicEventSubscriptionsGetDeliveryAttributesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDeliveryAttributes operation. */
export declare type TopicEventSubscriptionsGetDeliveryAttributesResponse = DeliveryAttributeListResult;

/** Optional parameters. */
export declare interface TopicEventSubscriptionsGetFullUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getFullUrl operation. */
export declare type TopicEventSubscriptionsGetFullUrlResponse = EventSubscriptionFullUrl;

/** Optional parameters. */
export declare interface TopicEventSubscriptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TopicEventSubscriptionsGetResponse = EventSubscription;

/** Optional parameters. */
export declare interface TopicEventSubscriptionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type TopicEventSubscriptionsListNextResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface TopicEventSubscriptionsListOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type TopicEventSubscriptionsListResponse = EventSubscriptionsListResult;

/** Optional parameters. */
export declare interface TopicEventSubscriptionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type TopicEventSubscriptionsUpdateResponse = EventSubscription;

/**
 * Defines values for TopicProvisioningState. \
 * {@link KnownTopicProvisioningState} can be used interchangeably with TopicProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export declare type TopicProvisioningState = string;

/** Topic regenerate share access key request */
export declare interface TopicRegenerateKeyRequest {
    /** Key name to regenerate key1 or key2 */
    keyName: string;
}

/** Interface representing a Topics. */
export declare interface Topics {
    /**
     * List all the topics under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: TopicsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Topic>;
    /**
     * List all the topics under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: TopicsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Topic>;
    /**
     * List event types for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic.
     * @param resourceTypeName Name of the topic type.
     * @param resourceName Name of the topic.
     * @param options The options parameters.
     */
    listEventTypes(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options?: TopicsListEventTypesOptionalParams): PagedAsyncIterableIterator<EventType>;
    /**
     * Get properties of a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, topicName: string, options?: TopicsGetOptionalParams): Promise<TopicsGetResponse>;
    /**
     * Asynchronously creates a new topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param topicInfo Topic information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, topicName: string, topicInfo: Topic, options?: TopicsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<TopicsCreateOrUpdateResponse>, TopicsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param topicInfo Topic information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, topicName: string, topicInfo: Topic, options?: TopicsCreateOrUpdateOptionalParams): Promise<TopicsCreateOrUpdateResponse>;
    /**
     * Delete existing topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, topicName: string, options?: TopicsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, topicName: string, options?: TopicsDeleteOptionalParams): Promise<void>;
    /**
     * Asynchronously updates a topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param topicUpdateParameters Topic update information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, topicName: string, topicUpdateParameters: TopicUpdateParameters, options?: TopicsUpdateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Asynchronously updates a topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param topicUpdateParameters Topic update information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, topicName: string, topicUpdateParameters: TopicUpdateParameters, options?: TopicsUpdateOptionalParams): Promise<void>;
    /**
     * List the two keys used to publish to a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param options The options parameters.
     */
    listSharedAccessKeys(resourceGroupName: string, topicName: string, options?: TopicsListSharedAccessKeysOptionalParams): Promise<TopicsListSharedAccessKeysResponse>;
    /**
     * Regenerate a shared access key for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param regenerateKeyRequest Request body to regenerate key.
     * @param options The options parameters.
     */
    beginRegenerateKey(resourceGroupName: string, topicName: string, regenerateKeyRequest: TopicRegenerateKeyRequest, options?: TopicsRegenerateKeyOptionalParams): Promise<PollerLike<PollOperationState<TopicsRegenerateKeyResponse>, TopicsRegenerateKeyResponse>>;
    /**
     * Regenerate a shared access key for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param regenerateKeyRequest Request body to regenerate key.
     * @param options The options parameters.
     */
    beginRegenerateKeyAndWait(resourceGroupName: string, topicName: string, regenerateKeyRequest: TopicRegenerateKeyRequest, options?: TopicsRegenerateKeyOptionalParams): Promise<TopicsRegenerateKeyResponse>;
}

/** Optional parameters. */
export declare interface TopicsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type TopicsCreateOrUpdateResponse = Topic;

/** Optional parameters. */
export declare interface TopicsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface TopicsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TopicsGetResponse = Topic;

/** Shared access keys of the Topic */
export declare interface TopicSharedAccessKeys {
    /** Shared access key1 for the topic. */
    key1?: string;
    /** Shared access key2 for the topic. */
    key2?: string;
}

/** Optional parameters. */
export declare interface TopicsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type TopicsListByResourceGroupNextResponse = TopicsListResult;

/** Optional parameters. */
export declare interface TopicsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type TopicsListByResourceGroupResponse = TopicsListResult;

/** Optional parameters. */
export declare interface TopicsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type TopicsListBySubscriptionNextResponse = TopicsListResult;

/** Optional parameters. */
export declare interface TopicsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the listBySubscription operation. */
export declare type TopicsListBySubscriptionResponse = TopicsListResult;

/** Optional parameters. */
export declare interface TopicsListEventTypesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listEventTypes operation. */
export declare type TopicsListEventTypesResponse = EventTypesListResult;

/** Result of the List Topics operation */
export declare interface TopicsListResult {
    /** A collection of Topics */
    value?: Topic[];
    /** A link for the next page of topics */
    nextLink?: string;
}

/** Optional parameters. */
export declare interface TopicsListSharedAccessKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSharedAccessKeys operation. */
export declare type TopicsListSharedAccessKeysResponse = TopicSharedAccessKeys;

/** Optional parameters. */
export declare interface TopicsRegenerateKeyOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the regenerateKey operation. */
export declare type TopicsRegenerateKeyResponse = TopicSharedAccessKeys;

/** Optional parameters. */
export declare interface TopicsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Properties of a topic type info. */
export declare interface TopicTypeInfo extends Resource {
    /** Namespace of the provider of the topic type. */
    provider?: string;
    /** Display Name for the topic type. */
    displayName?: string;
    /** Description of the topic type. */
    description?: string;
    /** Region type of the resource. */
    resourceRegionType?: ResourceRegionType;
    /** Provisioning state of the topic type */
    provisioningState?: TopicTypeProvisioningState;
    /** List of locations supported by this topic type. */
    supportedLocations?: string[];
    /** Source resource format. */
    sourceResourceFormat?: string;
    /** Supported source scopes. */
    supportedScopesForSource?: TopicTypeSourceScope[];
}

/**
 * Defines values for TopicTypeProvisioningState. \
 * {@link KnownTopicTypeProvisioningState} can be used interchangeably with TopicTypeProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export declare type TopicTypeProvisioningState = string;

/** Interface representing a TopicTypes. */
export declare interface TopicTypes {
    /**
     * List all registered topic types.
     * @param options The options parameters.
     */
    list(options?: TopicTypesListOptionalParams): PagedAsyncIterableIterator<TopicTypeInfo>;
    /**
     * List event types for a topic type.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    listEventTypes(topicTypeName: string, options?: TopicTypesListEventTypesOptionalParams): PagedAsyncIterableIterator<EventType>;
    /**
     * Get information about a topic type.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    get(topicTypeName: string, options?: TopicTypesGetOptionalParams): Promise<TopicTypesGetResponse>;
}

/** Optional parameters. */
export declare interface TopicTypesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TopicTypesGetResponse = TopicTypeInfo;

/** Optional parameters. */
export declare interface TopicTypesListEventTypesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listEventTypes operation. */
export declare type TopicTypesListEventTypesResponse = EventTypesListResult;

/** Optional parameters. */
export declare interface TopicTypesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type TopicTypesListResponse = TopicTypesListResult;

/** Result of the List Topic Types operation */
export declare interface TopicTypesListResult {
    /** A collection of topic types */
    value?: TopicTypeInfo[];
}

/**
 * Defines values for TopicTypeSourceScope. \
 * {@link KnownTopicTypeSourceScope} can be used interchangeably with TopicTypeSourceScope,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Resource** \
 * **ResourceGroup** \
 * **AzureSubscription** \
 * **ManagementGroup**
 */
export declare type TopicTypeSourceScope = string;

/** Properties of the Topic update */
export declare interface TopicUpdateParameters {
    /** Tags of the Topic resource. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Topic resource identity information. */
    identity?: IdentityInfo;
    /**
     * This determines if traffic is allowed over public network. By default it is enabled.
     * You can further restrict to specific IPs by configuring <seealso cref="P:Microsoft.Azure.Events.ResourceProvider.Common.Contracts.TopicUpdateParameterProperties.InboundIpRules" />
     */
    publicNetworkAccess?: PublicNetworkAccess;
    /** This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled. */
    inboundIpRules?: InboundIpRule[];
    /** This boolean is used to enable or disable local auth. Default value is false. When the property is set to true, only AAD token will be used to authenticate if user is allowed to publish to the topic. */
    disableLocalAuth?: boolean;
    /** The data residency boundary for the topic. */
    dataResidencyBoundary?: DataResidencyBoundary;
}

/** Definition of a Tracked Resource. */
export declare interface TrackedResource extends Resource {
    /** Location of the resource. */
    location: string;
    /** Tags of the resource. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The information about the user identity. */
export declare interface UserIdentityProperties {
    /** The principal id of user assigned identity. */
    principalId?: string;
    /** The client id of user assigned identity. */
    clientId?: string;
}

/** Verified partner information */
export declare interface VerifiedPartner extends Resource {
    /**
     * The system metadata relating to Verified Partner resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** ImmutableId of the corresponding partner registration. */
    partnerRegistrationImmutableId?: string;
    /** Official name of the Partner. */
    organizationName?: string;
    /** Display name of the verified partner. */
    partnerDisplayName?: string;
    /** Details of the partner topic scenario. */
    partnerTopicDetails?: PartnerDetails;
    /** Provisioning state of the verified partner. */
    provisioningState?: VerifiedPartnerProvisioningState;
}

/**
 * Defines values for VerifiedPartnerProvisioningState. \
 * {@link KnownVerifiedPartnerProvisioningState} can be used interchangeably with VerifiedPartnerProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export declare type VerifiedPartnerProvisioningState = string;

/** Interface representing a VerifiedPartners. */
export declare interface VerifiedPartners {
    /**
     * Get a list of all verified partners.
     * @param options The options parameters.
     */
    list(options?: VerifiedPartnersListOptionalParams): PagedAsyncIterableIterator<VerifiedPartner>;
    /**
     * Get properties of a verified partner.
     * @param verifiedPartnerName Name of the verified partner.
     * @param options The options parameters.
     */
    get(verifiedPartnerName: string, options?: VerifiedPartnersGetOptionalParams): Promise<VerifiedPartnersGetResponse>;
}

/** Optional parameters. */
export declare interface VerifiedPartnersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VerifiedPartnersGetResponse = VerifiedPartner;

/** Optional parameters. */
export declare interface VerifiedPartnersListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type VerifiedPartnersListNextResponse = VerifiedPartnersListResult;

/** Optional parameters. */
export declare interface VerifiedPartnersListOptionalParams extends coreClient.OperationOptions {
    /** The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'. */
    filter?: string;
    /** The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type VerifiedPartnersListResponse = VerifiedPartnersListResult;

/** Result of the List verified partners operation */
export declare interface VerifiedPartnersListResult {
    /** A collection of verified partners. */
    value?: VerifiedPartner[];
    /** A link for the next page of verified partners if any. */
    nextLink?: string;
}

/** Information about the webhook destination for an event subscription. */
export declare interface WebHookEventSubscriptionDestination extends EventSubscriptionDestination {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    endpointType: "WebHook";
    /** The URL that represents the endpoint of the destination of an event subscription. */
    endpointUrl?: string;
    /**
     * The base URL that represents the endpoint of the destination of an event subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpointBaseUrl?: string;
    /** Maximum number of events per batch. */
    maxEventsPerBatch?: number;
    /** Preferred batch size in Kilobytes. */
    preferredBatchSizeInKilobytes?: number;
    /** The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests. */
    azureActiveDirectoryTenantId?: string;
    /** The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests. */
    azureActiveDirectoryApplicationIdOrUri?: string;
    /** Delivery attribute details. */
    deliveryAttributeMappings?: DeliveryAttributeMappingUnion[];
}

export { }
