/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Channel as ChannelMapper, ChannelUpdateParameters as ChannelUpdateParametersMapper, Domain as DomainMapper, DomainUpdateParameters as DomainUpdateParametersMapper, DomainRegenerateKeyRequest as DomainRegenerateKeyRequestMapper, EventSubscription as EventSubscriptionMapper, EventSubscriptionUpdateParameters as EventSubscriptionUpdateParametersMapper, Topic as TopicMapper, TopicUpdateParameters as TopicUpdateParametersMapper, TopicRegenerateKeyRequest as TopicRegenerateKeyRequestMapper, PartnerConfiguration as PartnerConfigurationMapper, PartnerConfigurationUpdateParameters as PartnerConfigurationUpdateParametersMapper, Partner as PartnerMapper, PartnerNamespace as PartnerNamespaceMapper, PartnerNamespaceUpdateParameters as PartnerNamespaceUpdateParametersMapper, PartnerNamespaceRegenerateKeyRequest as PartnerNamespaceRegenerateKeyRequestMapper, PartnerRegistration as PartnerRegistrationMapper, PartnerRegistrationUpdateParameters as PartnerRegistrationUpdateParametersMapper, PartnerTopic as PartnerTopicMapper, PartnerTopicUpdateParameters as PartnerTopicUpdateParametersMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, SystemTopic as SystemTopicMapper, SystemTopicUpdateParameters as SystemTopicUpdateParametersMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const partnerNamespaceName = {
    parameterPath: "partnerNamespaceName",
    mapper: {
        serializedName: "partnerNamespaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const channelName = {
    parameterPath: "channelName",
    mapper: {
        serializedName: "channelName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-06-15",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const channelInfo = {
    parameterPath: "channelInfo",
    mapper: ChannelMapper
};
export const channelUpdateParameters = {
    parameterPath: "channelUpdateParameters",
    mapper: ChannelUpdateParametersMapper
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const domainName = {
    parameterPath: "domainName",
    mapper: {
        serializedName: "domainName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const domainInfo = {
    parameterPath: "domainInfo",
    mapper: DomainMapper
};
export const domainUpdateParameters = {
    parameterPath: "domainUpdateParameters",
    mapper: DomainUpdateParametersMapper
};
export const regenerateKeyRequest = {
    parameterPath: "regenerateKeyRequest",
    mapper: DomainRegenerateKeyRequestMapper
};
export const domainTopicName = {
    parameterPath: "domainTopicName",
    mapper: {
        serializedName: "domainTopicName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const topicName = {
    parameterPath: "topicName",
    mapper: {
        serializedName: "topicName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const eventSubscriptionName = {
    parameterPath: "eventSubscriptionName",
    mapper: {
        serializedName: "eventSubscriptionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const eventSubscriptionInfo = {
    parameterPath: "eventSubscriptionInfo",
    mapper: EventSubscriptionMapper
};
export const eventSubscriptionUpdateParameters = {
    parameterPath: "eventSubscriptionUpdateParameters",
    mapper: EventSubscriptionUpdateParametersMapper
};
export const scope = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const topicTypeName = {
    parameterPath: "topicTypeName",
    mapper: {
        serializedName: "topicTypeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const providerNamespace = {
    parameterPath: "providerNamespace",
    mapper: {
        serializedName: "providerNamespace",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceTypeName = {
    parameterPath: "resourceTypeName",
    mapper: {
        serializedName: "resourceTypeName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const systemTopicName = {
    parameterPath: "systemTopicName",
    mapper: {
        serializedName: "systemTopicName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const partnerTopicName = {
    parameterPath: "partnerTopicName",
    mapper: {
        serializedName: "partnerTopicName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const topicInfo = {
    parameterPath: "topicInfo",
    mapper: TopicMapper
};
export const topicUpdateParameters = {
    parameterPath: "topicUpdateParameters",
    mapper: TopicUpdateParametersMapper
};
export const regenerateKeyRequest1 = {
    parameterPath: "regenerateKeyRequest",
    mapper: TopicRegenerateKeyRequestMapper
};
export const partnerConfigurationInfo = {
    parameterPath: "partnerConfigurationInfo",
    mapper: PartnerConfigurationMapper
};
export const partnerConfigurationUpdateParameters = {
    parameterPath: "partnerConfigurationUpdateParameters",
    mapper: PartnerConfigurationUpdateParametersMapper
};
export const partnerInfo = {
    parameterPath: "partnerInfo",
    mapper: PartnerMapper
};
export const partnerNamespaceInfo = {
    parameterPath: "partnerNamespaceInfo",
    mapper: PartnerNamespaceMapper
};
export const partnerNamespaceUpdateParameters = {
    parameterPath: "partnerNamespaceUpdateParameters",
    mapper: PartnerNamespaceUpdateParametersMapper
};
export const regenerateKeyRequest2 = {
    parameterPath: "regenerateKeyRequest",
    mapper: PartnerNamespaceRegenerateKeyRequestMapper
};
export const partnerRegistrationName = {
    parameterPath: "partnerRegistrationName",
    mapper: {
        serializedName: "partnerRegistrationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const partnerRegistrationInfo = {
    parameterPath: "partnerRegistrationInfo",
    mapper: PartnerRegistrationMapper
};
export const partnerRegistrationUpdateParameters = {
    parameterPath: "partnerRegistrationUpdateParameters",
    mapper: PartnerRegistrationUpdateParametersMapper
};
export const partnerTopicInfo = {
    parameterPath: "partnerTopicInfo",
    mapper: PartnerTopicMapper
};
export const partnerTopicUpdateParameters = {
    parameterPath: "partnerTopicUpdateParameters",
    mapper: PartnerTopicUpdateParametersMapper
};
export const parentType = {
    parameterPath: "parentType",
    mapper: {
        serializedName: "parentType",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parentName = {
    parameterPath: "parentName",
    mapper: {
        serializedName: "parentName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnectionMapper
};
export const parentType1 = {
    parameterPath: "parentType",
    mapper: {
        serializedName: "parentType",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateLinkResourceName = {
    parameterPath: "privateLinkResourceName",
    mapper: {
        serializedName: "privateLinkResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const systemTopicInfo = {
    parameterPath: "systemTopicInfo",
    mapper: SystemTopicMapper
};
export const systemTopicUpdateParameters = {
    parameterPath: "systemTopicUpdateParameters",
    mapper: SystemTopicUpdateParametersMapper
};
export const scope1 = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const verifiedPartnerName = {
    parameterPath: "verifiedPartnerName",
    mapper: {
        serializedName: "verifiedPartnerName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map