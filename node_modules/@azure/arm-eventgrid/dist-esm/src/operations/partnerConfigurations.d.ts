import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PartnerConfigurations } from "../operationsInterfaces";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { PartnerConfiguration, PartnerConfigurationsListByResourceGroupOptionalParams, PartnerConfigurationsListBySubscriptionOptionalParams, PartnerConfigurationsGetOptionalParams, PartnerConfigurationsGetResponse, PartnerConfigurationsCreateOrUpdateOptionalParams, PartnerConfigurationsCreateOrUpdateResponse, PartnerConfigurationsDeleteOptionalParams, PartnerConfigurationUpdateParameters, PartnerConfigurationsUpdateOptionalParams, PartnerConfigurationsUpdateResponse, Partner, PartnerConfigurationsAuthorizePartnerOptionalParams, PartnerConfigurationsAuthorizePartnerResponse, PartnerConfigurationsUnauthorizePartnerOptionalParams, PartnerConfigurationsUnauthorizePartnerResponse } from "../models";
/** Class containing PartnerConfigurations operations. */
export declare class PartnerConfigurationsImpl implements PartnerConfigurations {
    private readonly client;
    /**
     * Initialize a new instance of the class PartnerConfigurations class.
     * @param client Reference to the service client
     */
    constructor(client: EventGridManagementClient);
    /**
     * List all the partner configurations under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PartnerConfigurationsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PartnerConfiguration>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * List all the partner configurations under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PartnerConfigurationsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PartnerConfiguration>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Get properties of a partner configuration.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, options?: PartnerConfigurationsGetOptionalParams): Promise<PartnerConfigurationsGetResponse>;
    /**
     * Synchronously creates or updates a partner configuration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerConfigurationInfo Partner configuration information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, partnerConfigurationInfo: PartnerConfiguration, options?: PartnerConfigurationsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PartnerConfigurationsCreateOrUpdateResponse>, PartnerConfigurationsCreateOrUpdateResponse>>;
    /**
     * Synchronously creates or updates a partner configuration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerConfigurationInfo Partner configuration information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, partnerConfigurationInfo: PartnerConfiguration, options?: PartnerConfigurationsCreateOrUpdateOptionalParams): Promise<PartnerConfigurationsCreateOrUpdateResponse>;
    /**
     * Delete existing partner configuration.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, options?: PartnerConfigurationsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing partner configuration.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, options?: PartnerConfigurationsDeleteOptionalParams): Promise<void>;
    /**
     * Synchronously updates a partner configuration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerConfigurationUpdateParameters Partner configuration update information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, partnerConfigurationUpdateParameters: PartnerConfigurationUpdateParameters, options?: PartnerConfigurationsUpdateOptionalParams): Promise<PollerLike<PollOperationState<PartnerConfigurationsUpdateResponse>, PartnerConfigurationsUpdateResponse>>;
    /**
     * Synchronously updates a partner configuration with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerConfigurationUpdateParameters Partner configuration update information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, partnerConfigurationUpdateParameters: PartnerConfigurationUpdateParameters, options?: PartnerConfigurationsUpdateOptionalParams): Promise<PartnerConfigurationsUpdateResponse>;
    /**
     * List all the partner configurations under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * List all the partner configurations under an Azure subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Authorize a single partner either by partner registration immutable Id or by partner name.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerInfo The information of the partner to be authorized.
     * @param options The options parameters.
     */
    authorizePartner(resourceGroupName: string, partnerInfo: Partner, options?: PartnerConfigurationsAuthorizePartnerOptionalParams): Promise<PartnerConfigurationsAuthorizePartnerResponse>;
    /**
     * Unauthorize a single partner either by partner registration immutable Id or by partner name.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerInfo The information of the partner to be unauthorized.
     * @param options The options parameters.
     */
    unauthorizePartner(resourceGroupName: string, partnerInfo: Partner, options?: PartnerConfigurationsUnauthorizePartnerOptionalParams): Promise<PartnerConfigurationsUnauthorizePartnerResponse>;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=partnerConfigurations.d.ts.map