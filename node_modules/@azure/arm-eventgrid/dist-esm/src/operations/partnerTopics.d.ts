import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PartnerTopics } from "../operationsInterfaces";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { PartnerTopic, PartnerTopicsListBySubscriptionOptionalParams, PartnerTopicsListByResourceGroupOptionalParams, PartnerTopicsGetOptionalParams, PartnerTopicsGetResponse, PartnerTopicsCreateOrUpdateOptionalParams, PartnerTopicsCreateOrUpdateResponse, PartnerTopicsDeleteOptionalParams, PartnerTopicUpdateParameters, PartnerTopicsUpdateOptionalParams, PartnerTopicsUpdateResponse, PartnerTopicsActivateOptionalParams, PartnerTopicsActivateResponse, PartnerTopicsDeactivateOptionalParams, PartnerTopicsDeactivateResponse } from "../models";
/** Class containing PartnerTopics operations. */
export declare class PartnerTopicsImpl implements PartnerTopics {
    private readonly client;
    /**
     * Initialize a new instance of the class PartnerTopics class.
     * @param client Reference to the service client
     */
    constructor(client: EventGridManagementClient);
    /**
     * List all the partner topics under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PartnerTopicsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PartnerTopic>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * List all the partner topics under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PartnerTopicsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PartnerTopic>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Get properties of a partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicsGetOptionalParams): Promise<PartnerTopicsGetResponse>;
    /**
     * Asynchronously creates a new partner topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param partnerTopicInfo Partner Topic information.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, partnerTopicName: string, partnerTopicInfo: PartnerTopic, options?: PartnerTopicsCreateOrUpdateOptionalParams): Promise<PartnerTopicsCreateOrUpdateResponse>;
    /**
     * Delete existing partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicsDeleteOptionalParams): Promise<void>;
    /**
     * Asynchronously updates a partner topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param partnerTopicUpdateParameters PartnerTopic update information.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, partnerTopicName: string, partnerTopicUpdateParameters: PartnerTopicUpdateParameters, options?: PartnerTopicsUpdateOptionalParams): Promise<PartnerTopicsUpdateResponse>;
    /**
     * List all the partner topics under an Azure subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * List all the partner topics under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Activate a newly created partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    activate(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicsActivateOptionalParams): Promise<PartnerTopicsActivateResponse>;
    /**
     * Deactivate specific partner topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param options The options parameters.
     */
    deactivate(resourceGroupName: string, partnerTopicName: string, options?: PartnerTopicsDeactivateOptionalParams): Promise<PartnerTopicsDeactivateResponse>;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=partnerTopics.d.ts.map