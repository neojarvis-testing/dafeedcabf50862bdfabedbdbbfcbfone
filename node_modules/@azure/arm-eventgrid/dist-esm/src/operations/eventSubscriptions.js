/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing EventSubscriptions operations. */
export class EventSubscriptionsImpl {
    /**
     * Initialize a new instance of the class EventSubscriptions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all aggregated global event subscriptions under a specific Azure subscription.
     * @param options The options parameters.
     */
    listGlobalBySubscription(options) {
        const iter = this.listGlobalBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listGlobalBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listGlobalBySubscriptionPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* listGlobalBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listGlobalBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listGlobalBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listGlobalBySubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listGlobalBySubscriptionPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listGlobalBySubscriptionPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all global event subscriptions under an Azure subscription for a topic type.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    listGlobalBySubscriptionForTopicType(topicTypeName, options) {
        const iter = this.listGlobalBySubscriptionForTopicTypePagingAll(topicTypeName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listGlobalBySubscriptionForTopicTypePagingPage(topicTypeName, options, settings);
            }
        };
    }
    listGlobalBySubscriptionForTopicTypePagingPage(topicTypeName, options, settings) {
        return __asyncGenerator(this, arguments, function* listGlobalBySubscriptionForTopicTypePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listGlobalBySubscriptionForTopicType(topicTypeName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listGlobalBySubscriptionForTopicTypeNext(topicTypeName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listGlobalBySubscriptionForTopicTypePagingAll(topicTypeName, options) {
        return __asyncGenerator(this, arguments, function* listGlobalBySubscriptionForTopicTypePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listGlobalBySubscriptionForTopicTypePagingPage(topicTypeName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List all global event subscriptions under a specific Azure subscription and resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listGlobalByResourceGroup(resourceGroupName, options) {
        const iter = this.listGlobalByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listGlobalByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listGlobalByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* listGlobalByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listGlobalByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listGlobalByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listGlobalByResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listGlobalByResourceGroupPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listGlobalByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * List all global event subscriptions under a resource group for a specific topic type.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    listGlobalByResourceGroupForTopicType(resourceGroupName, topicTypeName, options) {
        const iter = this.listGlobalByResourceGroupForTopicTypePagingAll(resourceGroupName, topicTypeName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listGlobalByResourceGroupForTopicTypePagingPage(resourceGroupName, topicTypeName, options, settings);
            }
        };
    }
    listGlobalByResourceGroupForTopicTypePagingPage(resourceGroupName, topicTypeName, options, settings) {
        return __asyncGenerator(this, arguments, function* listGlobalByResourceGroupForTopicTypePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listGlobalByResourceGroupForTopicType(resourceGroupName, topicTypeName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listGlobalByResourceGroupForTopicTypeNext(resourceGroupName, topicTypeName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listGlobalByResourceGroupForTopicTypePagingAll(resourceGroupName, topicTypeName, options) {
        return __asyncGenerator(this, arguments, function* listGlobalByResourceGroupForTopicTypePagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listGlobalByResourceGroupForTopicTypePagingPage(resourceGroupName, topicTypeName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * List all event subscriptions from the given location under a specific Azure subscription.
     * @param location Name of the location.
     * @param options The options parameters.
     */
    listRegionalBySubscription(location, options) {
        const iter = this.listRegionalBySubscriptionPagingAll(location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listRegionalBySubscriptionPagingPage(location, options, settings);
            }
        };
    }
    listRegionalBySubscriptionPagingPage(location, options, settings) {
        return __asyncGenerator(this, arguments, function* listRegionalBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listRegionalBySubscription(location, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listRegionalBySubscriptionNext(location, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listRegionalBySubscriptionPagingAll(location, options) {
        return __asyncGenerator(this, arguments, function* listRegionalBySubscriptionPagingAll_1() {
            var e_5, _a;
            try {
                for (var _b = __asyncValues(this.listRegionalBySubscriptionPagingPage(location, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * List all event subscriptions from the given location under a specific Azure subscription and
     * resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location.
     * @param options The options parameters.
     */
    listRegionalByResourceGroup(resourceGroupName, location, options) {
        const iter = this.listRegionalByResourceGroupPagingAll(resourceGroupName, location, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listRegionalByResourceGroupPagingPage(resourceGroupName, location, options, settings);
            }
        };
    }
    listRegionalByResourceGroupPagingPage(resourceGroupName, location, options, settings) {
        return __asyncGenerator(this, arguments, function* listRegionalByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listRegionalByResourceGroup(resourceGroupName, location, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listRegionalByResourceGroupNext(resourceGroupName, location, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listRegionalByResourceGroupPagingAll(resourceGroupName, location, options) {
        return __asyncGenerator(this, arguments, function* listRegionalByResourceGroupPagingAll_1() {
            var e_6, _a;
            try {
                for (var _b = __asyncValues(this.listRegionalByResourceGroupPagingPage(resourceGroupName, location, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * List all event subscriptions from the given location under a specific Azure subscription and topic
     * type.
     * @param location Name of the location.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    listRegionalBySubscriptionForTopicType(location, topicTypeName, options) {
        const iter = this.listRegionalBySubscriptionForTopicTypePagingAll(location, topicTypeName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listRegionalBySubscriptionForTopicTypePagingPage(location, topicTypeName, options, settings);
            }
        };
    }
    listRegionalBySubscriptionForTopicTypePagingPage(location, topicTypeName, options, settings) {
        return __asyncGenerator(this, arguments, function* listRegionalBySubscriptionForTopicTypePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listRegionalBySubscriptionForTopicType(location, topicTypeName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listRegionalBySubscriptionForTopicTypeNext(location, topicTypeName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listRegionalBySubscriptionForTopicTypePagingAll(location, topicTypeName, options) {
        return __asyncGenerator(this, arguments, function* listRegionalBySubscriptionForTopicTypePagingAll_1() {
            var e_7, _a;
            try {
                for (var _b = __asyncValues(this.listRegionalBySubscriptionForTopicTypePagingPage(location, topicTypeName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * List all event subscriptions from the given location under a specific Azure subscription and
     * resource group and topic type.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    listRegionalByResourceGroupForTopicType(resourceGroupName, location, topicTypeName, options) {
        const iter = this.listRegionalByResourceGroupForTopicTypePagingAll(resourceGroupName, location, topicTypeName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listRegionalByResourceGroupForTopicTypePagingPage(resourceGroupName, location, topicTypeName, options, settings);
            }
        };
    }
    listRegionalByResourceGroupForTopicTypePagingPage(resourceGroupName, location, topicTypeName, options, settings) {
        return __asyncGenerator(this, arguments, function* listRegionalByResourceGroupForTopicTypePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listRegionalByResourceGroupForTopicType(resourceGroupName, location, topicTypeName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listRegionalByResourceGroupForTopicTypeNext(resourceGroupName, location, topicTypeName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listRegionalByResourceGroupForTopicTypePagingAll(resourceGroupName, location, topicTypeName, options) {
        return __asyncGenerator(this, arguments, function* listRegionalByResourceGroupForTopicTypePagingAll_1() {
            var e_8, _a;
            try {
                for (var _b = __asyncValues(this.listRegionalByResourceGroupForTopicTypePagingPage(resourceGroupName, location, topicTypeName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    }
    /**
     * List all event subscriptions that have been created for a specific resource.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic.
     * @param resourceTypeName Name of the resource type.
     * @param resourceName Name of the resource.
     * @param options The options parameters.
     */
    listByResource(resourceGroupName, providerNamespace, resourceTypeName, resourceName, options) {
        const iter = this.listByResourcePagingAll(resourceGroupName, providerNamespace, resourceTypeName, resourceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourcePagingPage(resourceGroupName, providerNamespace, resourceTypeName, resourceName, options, settings);
            }
        };
    }
    listByResourcePagingPage(resourceGroupName, providerNamespace, resourceTypeName, resourceName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByResourcePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByResource(resourceGroupName, providerNamespace, resourceTypeName, resourceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByResourceNext(resourceGroupName, providerNamespace, resourceTypeName, resourceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByResourcePagingAll(resourceGroupName, providerNamespace, resourceTypeName, resourceName, options) {
        return __asyncGenerator(this, arguments, function* listByResourcePagingAll_1() {
            var e_9, _a;
            try {
                for (var _b = __asyncValues(this.listByResourcePagingPage(resourceGroupName, providerNamespace, resourceTypeName, resourceName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_9) throw e_9.error; }
            }
        });
    }
    /**
     * List all event subscriptions that have been created for a specific domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param options The options parameters.
     */
    listByDomainTopic(resourceGroupName, domainName, topicName, options) {
        const iter = this.listByDomainTopicPagingAll(resourceGroupName, domainName, topicName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByDomainTopicPagingPage(resourceGroupName, domainName, topicName, options, settings);
            }
        };
    }
    listByDomainTopicPagingPage(resourceGroupName, domainName, topicName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByDomainTopicPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByDomainTopic(resourceGroupName, domainName, topicName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByDomainTopicNext(resourceGroupName, domainName, topicName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByDomainTopicPagingAll(resourceGroupName, domainName, topicName, options) {
        return __asyncGenerator(this, arguments, function* listByDomainTopicPagingAll_1() {
            var e_10, _a;
            try {
                for (var _b = __asyncValues(this.listByDomainTopicPagingPage(resourceGroupName, domainName, topicName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_10_1) { e_10 = { error: e_10_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_10) throw e_10.error; }
            }
        });
    }
    /**
     * Get properties of an event subscription.
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
     *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
     *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    get(scope, eventSubscriptionName, options) {
        return this.client.sendOperationRequest({ scope, eventSubscriptionName, options }, getOperationSpec);
    }
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription based on
     * the specified scope.
     * @param scope The identifier of the resource to which the event subscription needs to be created or
     *              updated. The scope can be a subscription, or a resource group, or a top level resource belonging to
     *              a resource provider namespace, or an EventGrid topic. For example, use
     *              '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
     *                              between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(scope, eventSubscriptionName, eventSubscriptionInfo, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { scope, eventSubscriptionName, eventSubscriptionInfo, options }, createOrUpdateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription based on
     * the specified scope.
     * @param scope The identifier of the resource to which the event subscription needs to be created or
     *              updated. The scope can be a subscription, or a resource group, or a top level resource belonging to
     *              a resource provider namespace, or an EventGrid topic. For example, use
     *              '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription. Event subscription names must be
     *                              between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(scope, eventSubscriptionName, eventSubscriptionInfo, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete an existing event subscription.
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
     *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
     *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    beginDelete(scope, eventSubscriptionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { scope, eventSubscriptionName, options }, deleteOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete an existing event subscription.
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
     *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
     *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    beginDeleteAndWait(scope, eventSubscriptionName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(scope, eventSubscriptionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Asynchronously updates an existing event subscription.
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a
     *              resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid
     *              topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdate(scope, eventSubscriptionName, eventSubscriptionUpdateParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                scope,
                eventSubscriptionName,
                eventSubscriptionUpdateParameters,
                options
            }, updateOperationSpec);
            const poller = new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Asynchronously updates an existing event subscription.
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a
     *              resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid
     *              topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(scope, eventSubscriptionName, eventSubscriptionUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get the full endpoint URL for an event subscription.
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
     *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
     *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getFullUrl(scope, eventSubscriptionName, options) {
        return this.client.sendOperationRequest({ scope, eventSubscriptionName, options }, getFullUrlOperationSpec);
    }
    /**
     * List all aggregated global event subscriptions under a specific Azure subscription.
     * @param options The options parameters.
     */
    _listGlobalBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listGlobalBySubscriptionOperationSpec);
    }
    /**
     * List all global event subscriptions under an Azure subscription for a topic type.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    _listGlobalBySubscriptionForTopicType(topicTypeName, options) {
        return this.client.sendOperationRequest({ topicTypeName, options }, listGlobalBySubscriptionForTopicTypeOperationSpec);
    }
    /**
     * List all global event subscriptions under a specific Azure subscription and resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    _listGlobalByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listGlobalByResourceGroupOperationSpec);
    }
    /**
     * List all global event subscriptions under a resource group for a specific topic type.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    _listGlobalByResourceGroupForTopicType(resourceGroupName, topicTypeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, topicTypeName, options }, listGlobalByResourceGroupForTopicTypeOperationSpec);
    }
    /**
     * List all event subscriptions from the given location under a specific Azure subscription.
     * @param location Name of the location.
     * @param options The options parameters.
     */
    _listRegionalBySubscription(location, options) {
        return this.client.sendOperationRequest({ location, options }, listRegionalBySubscriptionOperationSpec);
    }
    /**
     * List all event subscriptions from the given location under a specific Azure subscription and
     * resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location.
     * @param options The options parameters.
     */
    _listRegionalByResourceGroup(resourceGroupName, location, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, options }, listRegionalByResourceGroupOperationSpec);
    }
    /**
     * List all event subscriptions from the given location under a specific Azure subscription and topic
     * type.
     * @param location Name of the location.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    _listRegionalBySubscriptionForTopicType(location, topicTypeName, options) {
        return this.client.sendOperationRequest({ location, topicTypeName, options }, listRegionalBySubscriptionForTopicTypeOperationSpec);
    }
    /**
     * List all event subscriptions from the given location under a specific Azure subscription and
     * resource group and topic type.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    _listRegionalByResourceGroupForTopicType(resourceGroupName, location, topicTypeName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, topicTypeName, options }, listRegionalByResourceGroupForTopicTypeOperationSpec);
    }
    /**
     * List all event subscriptions that have been created for a specific resource.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic.
     * @param resourceTypeName Name of the resource type.
     * @param resourceName Name of the resource.
     * @param options The options parameters.
     */
    _listByResource(resourceGroupName, providerNamespace, resourceTypeName, resourceName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            providerNamespace,
            resourceTypeName,
            resourceName,
            options
        }, listByResourceOperationSpec);
    }
    /**
     * List all event subscriptions that have been created for a specific domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param options The options parameters.
     */
    _listByDomainTopic(resourceGroupName, domainName, topicName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, domainName, topicName, options }, listByDomainTopicOperationSpec);
    }
    /**
     * Get all delivery attributes for an event subscription.
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource
     *              group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic.
     *              For example, use '/subscriptions/{subscriptionId}/' for a subscription,
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}'
     *              for a resource, and
     *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}'
     *              for an EventGrid topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getDeliveryAttributes(scope, eventSubscriptionName, options) {
        return this.client.sendOperationRequest({ scope, eventSubscriptionName, options }, getDeliveryAttributesOperationSpec);
    }
    /**
     * ListGlobalBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListGlobalBySubscription
     *                 method.
     * @param options The options parameters.
     */
    _listGlobalBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listGlobalBySubscriptionNextOperationSpec);
    }
    /**
     * ListGlobalBySubscriptionForTopicTypeNext
     * @param topicTypeName Name of the topic type.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListGlobalBySubscriptionForTopicType method.
     * @param options The options parameters.
     */
    _listGlobalBySubscriptionForTopicTypeNext(topicTypeName, nextLink, options) {
        return this.client.sendOperationRequest({ topicTypeName, nextLink, options }, listGlobalBySubscriptionForTopicTypeNextOperationSpec);
    }
    /**
     * ListGlobalByResourceGroupNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param nextLink The nextLink from the previous successful call to the ListGlobalByResourceGroup
     *                 method.
     * @param options The options parameters.
     */
    _listGlobalByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listGlobalByResourceGroupNextOperationSpec);
    }
    /**
     * ListGlobalByResourceGroupForTopicTypeNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicTypeName Name of the topic type.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListGlobalByResourceGroupForTopicType method.
     * @param options The options parameters.
     */
    _listGlobalByResourceGroupForTopicTypeNext(resourceGroupName, topicTypeName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, topicTypeName, nextLink, options }, listGlobalByResourceGroupForTopicTypeNextOperationSpec);
    }
    /**
     * ListRegionalBySubscriptionNext
     * @param location Name of the location.
     * @param nextLink The nextLink from the previous successful call to the ListRegionalBySubscription
     *                 method.
     * @param options The options parameters.
     */
    _listRegionalBySubscriptionNext(location, nextLink, options) {
        return this.client.sendOperationRequest({ location, nextLink, options }, listRegionalBySubscriptionNextOperationSpec);
    }
    /**
     * ListRegionalByResourceGroupNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location.
     * @param nextLink The nextLink from the previous successful call to the ListRegionalByResourceGroup
     *                 method.
     * @param options The options parameters.
     */
    _listRegionalByResourceGroupNext(resourceGroupName, location, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, nextLink, options }, listRegionalByResourceGroupNextOperationSpec);
    }
    /**
     * ListRegionalBySubscriptionForTopicTypeNext
     * @param location Name of the location.
     * @param topicTypeName Name of the topic type.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListRegionalBySubscriptionForTopicType method.
     * @param options The options parameters.
     */
    _listRegionalBySubscriptionForTopicTypeNext(location, topicTypeName, nextLink, options) {
        return this.client.sendOperationRequest({ location, topicTypeName, nextLink, options }, listRegionalBySubscriptionForTopicTypeNextOperationSpec);
    }
    /**
     * ListRegionalByResourceGroupForTopicTypeNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param location Name of the location.
     * @param topicTypeName Name of the topic type.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListRegionalByResourceGroupForTopicType method.
     * @param options The options parameters.
     */
    _listRegionalByResourceGroupForTopicTypeNext(resourceGroupName, location, topicTypeName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, location, topicTypeName, nextLink, options }, listRegionalByResourceGroupForTopicTypeNextOperationSpec);
    }
    /**
     * ListByResourceNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic.
     * @param resourceTypeName Name of the resource type.
     * @param resourceName Name of the resource.
     * @param nextLink The nextLink from the previous successful call to the ListByResource method.
     * @param options The options parameters.
     */
    _listByResourceNext(resourceGroupName, providerNamespace, resourceTypeName, resourceName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            providerNamespace,
            resourceTypeName,
            resourceName,
            nextLink,
            options
        }, listByResourceNextOperationSpec);
    }
    /**
     * ListByDomainTopicNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param nextLink The nextLink from the previous successful call to the ListByDomainTopic method.
     * @param options The options parameters.
     */
    _listByDomainTopicNext(resourceGroupName, domainName, topicName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, domainName, topicName, nextLink, options }, listByDomainTopicNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscription
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.eventSubscriptionName,
        Parameters.scope
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscription
        },
        201: {
            bodyMapper: Mappers.EventSubscription
        },
        202: {
            bodyMapper: Mappers.EventSubscription
        },
        204: {
            bodyMapper: Mappers.EventSubscription
        },
        default: {}
    },
    requestBody: Parameters.eventSubscriptionInfo,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.eventSubscriptionName,
        Parameters.scope
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.eventSubscriptionName,
        Parameters.scope
    ],
    serializer
};
const updateOperationSpec = {
    path: "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscription
        },
        201: {
            bodyMapper: Mappers.EventSubscription
        },
        202: {
            bodyMapper: Mappers.EventSubscription
        },
        204: {
            bodyMapper: Mappers.EventSubscription
        },
        default: {}
    },
    requestBody: Parameters.eventSubscriptionUpdateParameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.eventSubscriptionName,
        Parameters.scope
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getFullUrlOperationSpec = {
    path: "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionFullUrl
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.eventSubscriptionName,
        Parameters.scope
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listGlobalBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const listGlobalBySubscriptionForTopicTypeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.topicTypeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listGlobalByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listGlobalByResourceGroupForTopicTypeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.topicTypeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listRegionalBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listRegionalByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listRegionalBySubscriptionForTopicTypeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.topicTypeName,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listRegionalByResourceGroupForTopicTypeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.topicTypeName,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.providerNamespace,
        Parameters.resourceTypeName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByDomainTopicOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}/providers/Microsoft.EventGrid/eventSubscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.top],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.domainName,
        Parameters.topicName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDeliveryAttributesOperationSpec = {
    path: "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getDeliveryAttributes",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.DeliveryAttributeListResult
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.eventSubscriptionName,
        Parameters.scope
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listGlobalBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listGlobalBySubscriptionForTopicTypeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.topicTypeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listGlobalByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listGlobalByResourceGroupForTopicTypeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.topicTypeName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listRegionalBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listRegionalByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listRegionalBySubscriptionForTopicTypeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.topicTypeName,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listRegionalByResourceGroupForTopicTypeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.topicTypeName,
        Parameters.location
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByResourceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.providerNamespace,
        Parameters.resourceTypeName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listByDomainTopicNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.EventSubscriptionsListResult
        },
        default: {}
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.domainName,
        Parameters.topicName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=eventSubscriptions.js.map