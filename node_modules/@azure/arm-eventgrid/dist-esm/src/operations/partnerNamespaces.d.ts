import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PartnerNamespaces } from "../operationsInterfaces";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { PartnerNamespace, PartnerNamespacesListBySubscriptionOptionalParams, PartnerNamespacesListByResourceGroupOptionalParams, PartnerNamespacesGetOptionalParams, PartnerNamespacesGetResponse, PartnerNamespacesCreateOrUpdateOptionalParams, PartnerNamespacesCreateOrUpdateResponse, PartnerNamespacesDeleteOptionalParams, PartnerNamespaceUpdateParameters, PartnerNamespacesUpdateOptionalParams, PartnerNamespacesListSharedAccessKeysOptionalParams, PartnerNamespacesListSharedAccessKeysResponse, PartnerNamespaceRegenerateKeyRequest, PartnerNamespacesRegenerateKeyOptionalParams, PartnerNamespacesRegenerateKeyResponse } from "../models";
/** Class containing PartnerNamespaces operations. */
export declare class PartnerNamespacesImpl implements PartnerNamespaces {
    private readonly client;
    /**
     * Initialize a new instance of the class PartnerNamespaces class.
     * @param client Reference to the service client
     */
    constructor(client: EventGridManagementClient);
    /**
     * List all the partner namespaces under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: PartnerNamespacesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<PartnerNamespace>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * List all the partner namespaces under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PartnerNamespacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PartnerNamespace>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Get properties of a partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, partnerNamespaceName: string, options?: PartnerNamespacesGetOptionalParams): Promise<PartnerNamespacesGetResponse>;
    /**
     * Asynchronously creates a new partner namespace with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, partnerNamespaceName: string, partnerNamespaceInfo: PartnerNamespace, options?: PartnerNamespacesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PartnerNamespacesCreateOrUpdateResponse>, PartnerNamespacesCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new partner namespace with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, partnerNamespaceName: string, partnerNamespaceInfo: PartnerNamespace, options?: PartnerNamespacesCreateOrUpdateOptionalParams): Promise<PartnerNamespacesCreateOrUpdateResponse>;
    /**
     * Delete existing partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, partnerNamespaceName: string, options?: PartnerNamespacesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, partnerNamespaceName: string, options?: PartnerNamespacesDeleteOptionalParams): Promise<void>;
    /**
     * Asynchronously updates a partner namespace with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceUpdateParameters Partner namespace update information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, partnerNamespaceName: string, partnerNamespaceUpdateParameters: PartnerNamespaceUpdateParameters, options?: PartnerNamespacesUpdateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Asynchronously updates a partner namespace with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceUpdateParameters Partner namespace update information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, partnerNamespaceName: string, partnerNamespaceUpdateParameters: PartnerNamespaceUpdateParameters, options?: PartnerNamespacesUpdateOptionalParams): Promise<void>;
    /**
     * List all the partner namespaces under an Azure subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * List all the partner namespaces under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * List the two keys used to publish to a partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param options The options parameters.
     */
    listSharedAccessKeys(resourceGroupName: string, partnerNamespaceName: string, options?: PartnerNamespacesListSharedAccessKeysOptionalParams): Promise<PartnerNamespacesListSharedAccessKeysResponse>;
    /**
     * Regenerate a shared access key for a partner namespace.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param regenerateKeyRequest Request body to regenerate key.
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName: string, partnerNamespaceName: string, regenerateKeyRequest: PartnerNamespaceRegenerateKeyRequest, options?: PartnerNamespacesRegenerateKeyOptionalParams): Promise<PartnerNamespacesRegenerateKeyResponse>;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=partnerNamespaces.d.ts.map