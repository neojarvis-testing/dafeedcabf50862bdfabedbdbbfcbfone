import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DomainEventSubscriptions } from "../operationsInterfaces";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { EventSubscription, DomainEventSubscriptionsListOptionalParams, DomainEventSubscriptionsGetDeliveryAttributesOptionalParams, DomainEventSubscriptionsGetDeliveryAttributesResponse, DomainEventSubscriptionsGetOptionalParams, DomainEventSubscriptionsGetResponse, DomainEventSubscriptionsCreateOrUpdateOptionalParams, DomainEventSubscriptionsCreateOrUpdateResponse, DomainEventSubscriptionsDeleteOptionalParams, EventSubscriptionUpdateParameters, DomainEventSubscriptionsUpdateOptionalParams, DomainEventSubscriptionsUpdateResponse, DomainEventSubscriptionsGetFullUrlOptionalParams, DomainEventSubscriptionsGetFullUrlResponse } from "../models";
/** Class containing DomainEventSubscriptions operations. */
export declare class DomainEventSubscriptionsImpl implements DomainEventSubscriptions {
    private readonly client;
    /**
     * Initialize a new instance of the class DomainEventSubscriptions class.
     * @param client Reference to the service client
     */
    constructor(client: EventGridManagementClient);
    /**
     * List all event subscriptions that have been created for a specific topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, domainName: string, options?: DomainEventSubscriptionsListOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get all delivery attributes for an event subscription for domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getDeliveryAttributes(resourceGroupName: string, domainName: string, eventSubscriptionName: string, options?: DomainEventSubscriptionsGetDeliveryAttributesOptionalParams): Promise<DomainEventSubscriptionsGetDeliveryAttributesResponse>;
    /**
     * Get properties of an event subscription of a domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the partner topic.
     * @param eventSubscriptionName Name of the event subscription to be found. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, domainName: string, eventSubscriptionName: string, options?: DomainEventSubscriptionsGetOptionalParams): Promise<DomainEventSubscriptionsGetResponse>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: DomainEventSubscriptionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DomainEventSubscriptionsCreateOrUpdateResponse>, DomainEventSubscriptionsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, domainName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: DomainEventSubscriptionsCreateOrUpdateOptionalParams): Promise<DomainEventSubscriptionsCreateOrUpdateResponse>;
    /**
     * Delete an existing event subscription for a domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, domainName: string, eventSubscriptionName: string, options?: DomainEventSubscriptionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete an existing event subscription for a domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, domainName: string, eventSubscriptionName: string, options?: DomainEventSubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Update an existing event subscription for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, domainName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: DomainEventSubscriptionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<DomainEventSubscriptionsUpdateResponse>, DomainEventSubscriptionsUpdateResponse>>;
    /**
     * Update an existing event subscription for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, domainName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: DomainEventSubscriptionsUpdateOptionalParams): Promise<DomainEventSubscriptionsUpdateResponse>;
    /**
     * Get the full endpoint URL for an event subscription for domain.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getFullUrl(resourceGroupName: string, domainName: string, eventSubscriptionName: string, options?: DomainEventSubscriptionsGetFullUrlOptionalParams): Promise<DomainEventSubscriptionsGetFullUrlResponse>;
    /**
     * List all event subscriptions that have been created for a specific topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=domainEventSubscriptions.d.ts.map