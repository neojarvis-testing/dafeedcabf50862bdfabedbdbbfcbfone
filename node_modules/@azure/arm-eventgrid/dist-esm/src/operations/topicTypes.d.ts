import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { TopicTypes } from "../operationsInterfaces";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { TopicTypeInfo, TopicTypesListOptionalParams, EventType, TopicTypesListEventTypesOptionalParams, TopicTypesGetOptionalParams, TopicTypesGetResponse } from "../models";
/** Class containing TopicTypes operations. */
export declare class TopicTypesImpl implements TopicTypes {
    private readonly client;
    /**
     * Initialize a new instance of the class TopicTypes class.
     * @param client Reference to the service client
     */
    constructor(client: EventGridManagementClient);
    /**
     * List all registered topic types.
     * @param options The options parameters.
     */
    list(options?: TopicTypesListOptionalParams): PagedAsyncIterableIterator<TopicTypeInfo>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List event types for a topic type.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    listEventTypes(topicTypeName: string, options?: TopicTypesListEventTypesOptionalParams): PagedAsyncIterableIterator<EventType>;
    private listEventTypesPagingPage;
    private listEventTypesPagingAll;
    /**
     * List all registered topic types.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get information about a topic type.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    get(topicTypeName: string, options?: TopicTypesGetOptionalParams): Promise<TopicTypesGetResponse>;
    /**
     * List event types for a topic type.
     * @param topicTypeName Name of the topic type.
     * @param options The options parameters.
     */
    private _listEventTypes;
}
//# sourceMappingURL=topicTypes.d.ts.map