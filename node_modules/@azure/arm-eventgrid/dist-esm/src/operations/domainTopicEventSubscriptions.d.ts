import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DomainTopicEventSubscriptions } from "../operationsInterfaces";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { EventSubscription, DomainTopicEventSubscriptionsListOptionalParams, DomainTopicEventSubscriptionsGetOptionalParams, DomainTopicEventSubscriptionsGetResponse, DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams, DomainTopicEventSubscriptionsCreateOrUpdateResponse, DomainTopicEventSubscriptionsDeleteOptionalParams, EventSubscriptionUpdateParameters, DomainTopicEventSubscriptionsUpdateOptionalParams, DomainTopicEventSubscriptionsUpdateResponse, DomainTopicEventSubscriptionsGetFullUrlOptionalParams, DomainTopicEventSubscriptionsGetFullUrlResponse, DomainTopicEventSubscriptionsGetDeliveryAttributesOptionalParams, DomainTopicEventSubscriptionsGetDeliveryAttributesResponse } from "../models";
/** Class containing DomainTopicEventSubscriptions operations. */
export declare class DomainTopicEventSubscriptionsImpl implements DomainTopicEventSubscriptions {
    private readonly client;
    /**
     * Initialize a new instance of the class DomainTopicEventSubscriptions class.
     * @param client Reference to the service client
     */
    constructor(client: EventGridManagementClient);
    /**
     * List all event subscriptions that have been created for a specific domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, domainName: string, topicName: string, options?: DomainTopicEventSubscriptionsListOptionalParams): PagedAsyncIterableIterator<EventSubscription>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get properties of a nested event subscription for a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, options?: DomainTopicEventSubscriptionsGetOptionalParams): Promise<DomainTopicEventSubscriptionsGetResponse>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DomainTopicEventSubscriptionsCreateOrUpdateResponse>, DomainTopicEventSubscriptionsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new event subscription or updates an existing event subscription.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter
     *                              information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionInfo: EventSubscription, options?: DomainTopicEventSubscriptionsCreateOrUpdateOptionalParams): Promise<DomainTopicEventSubscriptionsCreateOrUpdateResponse>;
    /**
     * Delete a nested existing event subscription for a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, options?: DomainTopicEventSubscriptionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a nested existing event subscription for a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription to be deleted. Event subscription names
     *                              must be between 3 and 100 characters in length and use alphanumeric letters only.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, options?: DomainTopicEventSubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Update an existing event subscription for a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param topicName Name of the topic.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: DomainTopicEventSubscriptionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<DomainTopicEventSubscriptionsUpdateResponse>, DomainTopicEventSubscriptionsUpdateResponse>>;
    /**
     * Update an existing event subscription for a domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param topicName Name of the topic.
     * @param eventSubscriptionName Name of the event subscription to be updated.
     * @param eventSubscriptionUpdateParameters Updated event subscription information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, eventSubscriptionUpdateParameters: EventSubscriptionUpdateParameters, options?: DomainTopicEventSubscriptionsUpdateOptionalParams): Promise<DomainTopicEventSubscriptionsUpdateResponse>;
    /**
     * Get the full endpoint URL for a nested event subscription for domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getFullUrl(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, options?: DomainTopicEventSubscriptionsGetFullUrlOptionalParams): Promise<DomainTopicEventSubscriptionsGetFullUrlResponse>;
    /**
     * List all event subscriptions that have been created for a specific domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get all delivery attributes for an event subscription for domain topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param eventSubscriptionName Name of the event subscription.
     * @param options The options parameters.
     */
    getDeliveryAttributes(resourceGroupName: string, domainName: string, topicName: string, eventSubscriptionName: string, options?: DomainTopicEventSubscriptionsGetDeliveryAttributesOptionalParams): Promise<DomainTopicEventSubscriptionsGetDeliveryAttributesResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the top level domain.
     * @param topicName Name of the domain topic.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=domainTopicEventSubscriptions.d.ts.map