import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Topics } from "../operationsInterfaces";
import { EventGridManagementClient } from "../eventGridManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Topic, TopicsListBySubscriptionOptionalParams, TopicsListByResourceGroupOptionalParams, EventType, TopicsListEventTypesOptionalParams, TopicsGetOptionalParams, TopicsGetResponse, TopicsCreateOrUpdateOptionalParams, TopicsCreateOrUpdateResponse, TopicsDeleteOptionalParams, TopicUpdateParameters, TopicsUpdateOptionalParams, TopicsListSharedAccessKeysOptionalParams, TopicsListSharedAccessKeysResponse, TopicRegenerateKeyRequest, TopicsRegenerateKeyOptionalParams, TopicsRegenerateKeyResponse } from "../models";
/** Class containing Topics operations. */
export declare class TopicsImpl implements Topics {
    private readonly client;
    /**
     * Initialize a new instance of the class Topics class.
     * @param client Reference to the service client
     */
    constructor(client: EventGridManagementClient);
    /**
     * List all the topics under an Azure subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: TopicsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Topic>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * List all the topics under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: TopicsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Topic>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * List event types for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic.
     * @param resourceTypeName Name of the topic type.
     * @param resourceName Name of the topic.
     * @param options The options parameters.
     */
    listEventTypes(resourceGroupName: string, providerNamespace: string, resourceTypeName: string, resourceName: string, options?: TopicsListEventTypesOptionalParams): PagedAsyncIterableIterator<EventType>;
    private listEventTypesPagingPage;
    private listEventTypesPagingAll;
    /**
     * Get properties of a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, topicName: string, options?: TopicsGetOptionalParams): Promise<TopicsGetResponse>;
    /**
     * Asynchronously creates a new topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param topicInfo Topic information.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, topicName: string, topicInfo: Topic, options?: TopicsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<TopicsCreateOrUpdateResponse>, TopicsCreateOrUpdateResponse>>;
    /**
     * Asynchronously creates a new topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param topicInfo Topic information.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, topicName: string, topicInfo: Topic, options?: TopicsCreateOrUpdateOptionalParams): Promise<TopicsCreateOrUpdateResponse>;
    /**
     * Delete existing topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, topicName: string, options?: TopicsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete existing topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, topicName: string, options?: TopicsDeleteOptionalParams): Promise<void>;
    /**
     * Asynchronously updates a topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param topicUpdateParameters Topic update information.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, topicName: string, topicUpdateParameters: TopicUpdateParameters, options?: TopicsUpdateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Asynchronously updates a topic with the specified parameters.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param topicUpdateParameters Topic update information.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, topicName: string, topicUpdateParameters: TopicUpdateParameters, options?: TopicsUpdateOptionalParams): Promise<void>;
    /**
     * List all the topics under an Azure subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * List all the topics under a resource group.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * List the two keys used to publish to a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param options The options parameters.
     */
    listSharedAccessKeys(resourceGroupName: string, topicName: string, options?: TopicsListSharedAccessKeysOptionalParams): Promise<TopicsListSharedAccessKeysResponse>;
    /**
     * Regenerate a shared access key for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param regenerateKeyRequest Request body to regenerate key.
     * @param options The options parameters.
     */
    beginRegenerateKey(resourceGroupName: string, topicName: string, regenerateKeyRequest: TopicRegenerateKeyRequest, options?: TopicsRegenerateKeyOptionalParams): Promise<PollerLike<PollOperationState<TopicsRegenerateKeyResponse>, TopicsRegenerateKeyResponse>>;
    /**
     * Regenerate a shared access key for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param topicName Name of the topic.
     * @param regenerateKeyRequest Request body to regenerate key.
     * @param options The options parameters.
     */
    beginRegenerateKeyAndWait(resourceGroupName: string, topicName: string, regenerateKeyRequest: TopicRegenerateKeyRequest, options?: TopicsRegenerateKeyOptionalParams): Promise<TopicsRegenerateKeyResponse>;
    /**
     * List event types for a topic.
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param providerNamespace Namespace of the provider of the topic.
     * @param resourceTypeName Name of the topic type.
     * @param resourceName Name of the topic.
     * @param options The options parameters.
     */
    private _listEventTypes;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
}
//# sourceMappingURL=topics.d.ts.map