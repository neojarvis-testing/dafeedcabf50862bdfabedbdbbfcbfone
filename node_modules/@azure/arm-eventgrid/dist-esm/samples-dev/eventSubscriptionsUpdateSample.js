/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { EventGridManagementClient } from "@azure/arm-eventgrid";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForCustomTopic.json
 */
function eventSubscriptionsUpdateForCustomTopic() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionUpdateParameters = {
            destination: {
                endpointType: "WebHook",
                endpointUrl: "https://requestb.in/15ksip71"
            },
            filter: {
                isSubjectCaseSensitive: true,
                subjectBeginsWith: "existingPrefix",
                subjectEndsWith: "newSuffix"
            },
            labels: ["label1", "label2"]
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForCustomTopic_AzureFunctionDestination.json
 */
function eventSubscriptionsUpdateForCustomTopicAzureFunctionDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionUpdateParameters = {
            deadLetterDestination: {
                blobContainerName: "contosocontainer",
                endpointType: "StorageBlob",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            destination: {
                endpointType: "AzureFunction",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Web/sites/ContosoSite/funtions/ContosoFunc"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForCustomTopic_EventHubDestination.json
 */
function eventSubscriptionsUpdateForCustomTopicEventHubDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionUpdateParameters = {
            destination: {
                endpointType: "EventHub",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"
            },
            filter: {
                isSubjectCaseSensitive: true,
                subjectBeginsWith: "existingPrefix",
                subjectEndsWith: "newSuffix"
            },
            labels: ["label1", "label2"]
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForCustomTopic_HybridConnectionDestination.json
 */
function eventSubscriptionsUpdateForCustomTopicHybridConnectionDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionUpdateParameters = {
            destination: {
                endpointType: "HybridConnection",
                resourceId: "/subscriptions/d33c5f7a-02ea-40f4-bf52-07f17e84d6a8/resourceGroups/TestRG/providers/Microsoft.Relay/namespaces/ContosoNamespace/hybridConnections/HC1"
            },
            filter: {
                isSubjectCaseSensitive: true,
                subjectBeginsWith: "existingPrefix",
                subjectEndsWith: "newSuffix"
            },
            labels: ["label1", "label2"]
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForCustomTopic_ServiceBusQueueDestination.json
 */
function eventSubscriptionsUpdateForCustomTopicServiceBusQueueDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionUpdateParameters = {
            deadLetterDestination: {
                blobContainerName: "contosocontainer",
                endpointType: "StorageBlob",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            destination: {
                endpointType: "ServiceBusQueue",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.ServiceBus/namespaces/ContosoNamespace/queues/SBQ"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForCustomTopic_ServiceBusTopicDestination.json
 */
function eventSubscriptionsUpdateForCustomTopicServiceBusTopicDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionUpdateParameters = {
            destination: {
                endpointType: "ServiceBusTopic",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.ServiceBus/namespaces/ContosoNamespace/topics/SBT"
            },
            filter: {
                isSubjectCaseSensitive: true,
                subjectBeginsWith: "existingPrefix",
                subjectEndsWith: "newSuffix"
            },
            labels: ["label1", "label2"]
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForCustomTopic_StorageQueueDestination.json
 */
function eventSubscriptionsUpdateForCustomTopicStorageQueueDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionUpdateParameters = {
            deadLetterDestination: {
                blobContainerName: "contosocontainer",
                endpointType: "StorageBlob",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            destination: {
                endpointType: "StorageQueue",
                queueMessageTimeToLiveInSeconds: 300,
                queueName: "queue1",
                resourceId: "/subscriptions/d33c5f7a-02ea-40f4-bf52-07f17e84d6a8/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForCustomTopic_WebhookDestination.json
 */
function eventSubscriptionsUpdateForCustomTopicWebhookDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic2";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionUpdateParameters = {
            destination: {
                endpointType: "WebHook",
                endpointUrl: "https://requestb.in/15ksip71"
            },
            filter: {
                isSubjectCaseSensitive: true,
                subjectBeginsWith: "existingPrefix",
                subjectEndsWith: "newSuffix"
            },
            labels: ["label1", "label2"]
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForResource.json
 */
function eventSubscriptionsUpdateForResource() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionUpdateParameters = {
            destination: {
                endpointType: "WebHook",
                endpointUrl: "https://requestb.in/15ksip71"
            },
            filter: {
                isSubjectCaseSensitive: true,
                subjectBeginsWith: "existingPrefix",
                subjectEndsWith: "newSuffix"
            },
            labels: ["label1", "label2"]
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForResourceGroup.json
 */
function eventSubscriptionsUpdateForResourceGroup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg";
        const eventSubscriptionName = "examplesubscription2";
        const eventSubscriptionUpdateParameters = {
            destination: {
                endpointType: "EventHub",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"
            },
            filter: {
                isSubjectCaseSensitive: true,
                subjectBeginsWith: "existingPrefix",
                subjectEndsWith: "newSuffix"
            },
            labels: ["label1", "label2"]
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously updates an existing event subscription.
 *
 * @summary Asynchronously updates an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_UpdateForSubscription.json
 */
function eventSubscriptionsUpdateForSubscription() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4";
        const eventSubscriptionName = "examplesubscription3";
        const eventSubscriptionUpdateParameters = {
            destination: {
                endpointType: "WebHook",
                endpointUrl: "https://requestb.in/15ksip71"
            },
            filter: {
                isSubjectCaseSensitive: true,
                subjectBeginsWith: "existingPrefix",
                subjectEndsWith: "newSuffix"
            },
            labels: ["label1", "label2"]
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionUpdateParameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        eventSubscriptionsUpdateForCustomTopic();
        eventSubscriptionsUpdateForCustomTopicAzureFunctionDestination();
        eventSubscriptionsUpdateForCustomTopicEventHubDestination();
        eventSubscriptionsUpdateForCustomTopicHybridConnectionDestination();
        eventSubscriptionsUpdateForCustomTopicServiceBusQueueDestination();
        eventSubscriptionsUpdateForCustomTopicServiceBusTopicDestination();
        eventSubscriptionsUpdateForCustomTopicStorageQueueDestination();
        eventSubscriptionsUpdateForCustomTopicWebhookDestination();
        eventSubscriptionsUpdateForResource();
        eventSubscriptionsUpdateForResourceGroup();
        eventSubscriptionsUpdateForSubscription();
    });
}
main().catch(console.error);
//# sourceMappingURL=eventSubscriptionsUpdateSample.js.map