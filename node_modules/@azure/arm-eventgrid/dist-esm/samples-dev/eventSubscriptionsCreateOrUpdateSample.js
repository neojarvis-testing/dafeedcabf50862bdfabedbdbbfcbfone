/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { EventGridManagementClient } from "@azure/arm-eventgrid";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForCustomTopic.json
 */
function eventSubscriptionsCreateOrUpdateForCustomTopic() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionInfo = {
            destination: {
                endpointType: "EventHub",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_AzureFunctionDestination.json
 */
function eventSubscriptionsCreateOrUpdateForCustomTopicAzureFunctionDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionInfo = {
            deadLetterDestination: {
                blobContainerName: "contosocontainer",
                endpointType: "StorageBlob",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            destination: {
                endpointType: "AzureFunction",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Web/sites/ContosoSite/funtions/ContosoFunc"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_EventHubDestination.json
 */
function eventSubscriptionsCreateOrUpdateForCustomTopicEventHubDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionInfo = {
            deadLetterDestination: {
                blobContainerName: "contosocontainer",
                endpointType: "StorageBlob",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            destination: {
                endpointType: "EventHub",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_HybridConnectionDestination.json
 */
function eventSubscriptionsCreateOrUpdateForCustomTopicHybridConnectionDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionInfo = {
            deadLetterDestination: {
                blobContainerName: "contosocontainer",
                endpointType: "StorageBlob",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            destination: {
                endpointType: "HybridConnection",
                resourceId: "/subscriptions/d33c5f7a-02ea-40f4-bf52-07f17e84d6a8/resourceGroups/TestRG/providers/Microsoft.Relay/namespaces/ContosoNamespace/hybridConnections/HC1"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_ServiceBusQueueDestination.json
 */
function eventSubscriptionsCreateOrUpdateForCustomTopicServiceBusQueueDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionInfo = {
            deadLetterDestination: {
                blobContainerName: "contosocontainer",
                endpointType: "StorageBlob",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            destination: {
                endpointType: "ServiceBusQueue",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.ServiceBus/namespaces/ContosoNamespace/queues/SBQ"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_ServiceBusTopicDestination.json
 */
function eventSubscriptionsCreateOrUpdateForCustomTopicServiceBusTopicDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionInfo = {
            deadLetterDestination: {
                blobContainerName: "contosocontainer",
                endpointType: "StorageBlob",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            destination: {
                endpointType: "ServiceBusTopic",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.ServiceBus/namespaces/ContosoNamespace/topics/SBT"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_StorageQueueDestination.json
 */
function eventSubscriptionsCreateOrUpdateForCustomTopicStorageQueueDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionInfo = {
            deadLetterDestination: {
                blobContainerName: "contosocontainer",
                endpointType: "StorageBlob",
                resourceId: "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            destination: {
                endpointType: "StorageQueue",
                queueName: "queue1",
                resourceId: "/subscriptions/d33c5f7a-02ea-40f4-bf52-07f17e84d6a8/resourceGroups/TestRG/providers/Microsoft.Storage/storageAccounts/contosostg"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForCustomTopic_WebhookDestination.json
 */
function eventSubscriptionsCreateOrUpdateForCustomTopicWebhookDestination() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const eventSubscriptionInfo = {
            destination: {
                endpointType: "WebHook",
                endpointUrl: "https://azurefunctionexample.azurewebsites.net/runtime/webhooks/EventGrid?functionName=EventGridTrigger1&code=PASSWORDCODE"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForResource.json
 */
function eventSubscriptionsCreateOrUpdateForResource() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1";
        const eventSubscriptionName = "examplesubscription10";
        const eventSubscriptionInfo = {
            destination: {
                endpointType: "WebHook",
                endpointUrl: "https://requestb.in/15ksip71"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForResourceGroup.json
 */
function eventSubscriptionsCreateOrUpdateForResourceGroup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg";
        const eventSubscriptionName = "examplesubscription2";
        const eventSubscriptionInfo = {
            destination: {
                endpointType: "WebHook",
                endpointUrl: "https://requestb.in/15ksip71"
            },
            filter: {
                isSubjectCaseSensitive: false,
                subjectBeginsWith: "ExamplePrefix",
                subjectEndsWith: "ExampleSuffix"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 *
 * @summary Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_CreateOrUpdateForSubscription.json
 */
function eventSubscriptionsCreateOrUpdateForSubscription() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4";
        const eventSubscriptionName = "examplesubscription3";
        const eventSubscriptionInfo = {
            destination: {
                endpointType: "WebHook",
                endpointUrl: "https://requestb.in/15ksip71"
            },
            filter: { isSubjectCaseSensitive: false }
        };
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginCreateOrUpdateAndWait(scope, eventSubscriptionName, eventSubscriptionInfo);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        eventSubscriptionsCreateOrUpdateForCustomTopic();
        eventSubscriptionsCreateOrUpdateForCustomTopicAzureFunctionDestination();
        eventSubscriptionsCreateOrUpdateForCustomTopicEventHubDestination();
        eventSubscriptionsCreateOrUpdateForCustomTopicHybridConnectionDestination();
        eventSubscriptionsCreateOrUpdateForCustomTopicServiceBusQueueDestination();
        eventSubscriptionsCreateOrUpdateForCustomTopicServiceBusTopicDestination();
        eventSubscriptionsCreateOrUpdateForCustomTopicStorageQueueDestination();
        eventSubscriptionsCreateOrUpdateForCustomTopicWebhookDestination();
        eventSubscriptionsCreateOrUpdateForResource();
        eventSubscriptionsCreateOrUpdateForResourceGroup();
        eventSubscriptionsCreateOrUpdateForSubscription();
    });
}
main().catch(console.error);
//# sourceMappingURL=eventSubscriptionsCreateOrUpdateSample.js.map