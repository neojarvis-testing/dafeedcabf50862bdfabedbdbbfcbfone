/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { EventGridManagementClient } from "@azure/arm-eventgrid";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Delete an existing event subscription.
 *
 * @summary Delete an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_DeleteForCustomTopic.json
 */
function eventSubscriptionsDeleteForCustomTopic() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1";
        const eventSubscriptionName = "examplesubscription1";
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginDeleteAndWait(scope, eventSubscriptionName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Delete an existing event subscription.
 *
 * @summary Delete an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_DeleteForResource.json
 */
function eventSubscriptionsDeleteForResource() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1";
        const eventSubscriptionName = "examplesubscription10";
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginDeleteAndWait(scope, eventSubscriptionName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Delete an existing event subscription.
 *
 * @summary Delete an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_DeleteForResourceGroup.json
 */
function eventSubscriptionsDeleteForResourceGroup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg";
        const eventSubscriptionName = "examplesubscription2";
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginDeleteAndWait(scope, eventSubscriptionName);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Delete an existing event subscription.
 *
 * @summary Delete an existing event subscription.
 * x-ms-original-file: specification/eventgrid/resource-manager/Microsoft.EventGrid/stable/2022-06-15/examples/EventSubscriptions_DeleteForSubscription.json
 */
function eventSubscriptionsDeleteForSubscription() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["EVENTGRID_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4";
        const eventSubscriptionName = "examplesubscription3";
        const credential = new DefaultAzureCredential();
        const client = new EventGridManagementClient(credential, subscriptionId);
        const result = yield client.eventSubscriptions.beginDeleteAndWait(scope, eventSubscriptionName);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        eventSubscriptionsDeleteForCustomTopic();
        eventSubscriptionsDeleteForResource();
        eventSubscriptionsDeleteForResourceGroup();
        eventSubscriptionsDeleteForSubscription();
    });
}
main().catch(console.error);
//# sourceMappingURL=eventSubscriptionsDeleteSample.js.map