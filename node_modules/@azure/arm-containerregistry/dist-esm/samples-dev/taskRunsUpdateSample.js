/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ContainerRegistryManagementClient } from "@azure/arm-containerregistry";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Updates a task run with the specified parameters.
 *
 * @summary Updates a task run with the specified parameters.
 * x-ms-original-file: specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/preview/2019-06-01-preview/examples/TaskRunsUpdate.json
 */
function taskRunsUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERREGISTRY_SUBSCRIPTION_ID"] ||
            "4385cf00-2d3a-425a-832f-f4285b1c9dce";
        const resourceGroupName = process.env["CONTAINERREGISTRY_RESOURCE_GROUP"] || "myResourceGroup";
        const registryName = "myRegistry";
        const taskRunName = "myRun";
        const updateParameters = {
            forceUpdateTag: "test",
            runRequest: {
                type: "EncodedTaskRunRequest",
                credentials: {},
                encodedTaskContent: "c3RlcHM6IAogIC0gY21kOiB7eyAuVmFsdWVzLmNvbW1hbmQgfX0K",
                encodedValuesContent: "Y29tbWFuZDogYmFzaCBlY2hvIHt7LlJ1bi5SZWdpc3RyeX19Cg==",
                isArchiveEnabled: true,
                platform: { architecture: "amd64", os: "Linux" },
                values: []
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerRegistryManagementClient(credential, subscriptionId);
        const result = yield client.taskRuns.beginUpdateAndWait(resourceGroupName, registryName, taskRunName, updateParameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        taskRunsUpdate();
    });
}
main().catch(console.error);
//# sourceMappingURL=taskRunsUpdateSample.js.map