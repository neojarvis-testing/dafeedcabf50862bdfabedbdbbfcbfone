/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ContainerRegistryManagementClient } from "@azure/arm-containerregistry";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates a container registry with the specified parameters.
 *
 * @summary Creates a container registry with the specified parameters.
 * x-ms-original-file: specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/stable/2022-12-01/examples/RegistryCreate.json
 */
function registryCreate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERREGISTRY_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERREGISTRY_RESOURCE_GROUP"] || "myResourceGroup";
        const registryName = "myRegistry";
        const registry = {
            adminUserEnabled: true,
            location: "westus",
            sku: { name: "Standard" },
            tags: { key: "value" }
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerRegistryManagementClient(credential, subscriptionId);
        const result = yield client.registries.beginCreateAndWait(resourceGroupName, registryName, registry);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a container registry with the specified parameters.
 *
 * @summary Creates a container registry with the specified parameters.
 * x-ms-original-file: specification/containerregistry/resource-manager/Microsoft.ContainerRegistry/stable/2022-12-01/examples/RegistryCreateZoneRedundant.json
 */
function registryCreateZoneRedundant() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERREGISTRY_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERREGISTRY_RESOURCE_GROUP"] || "myResourceGroup";
        const registryName = "myRegistry";
        const registry = {
            location: "westus",
            sku: { name: "Standard" },
            tags: { key: "value" },
            zoneRedundancy: "Enabled"
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerRegistryManagementClient(credential, subscriptionId);
        const result = yield client.registries.beginCreateAndWait(resourceGroupName, registryName, registry);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        registryCreate();
        registryCreateZoneRedundant();
    });
}
main().catch(console.error);
//# sourceMappingURL=registriesCreateSample.js.map