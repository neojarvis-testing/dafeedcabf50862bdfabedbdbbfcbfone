'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var tslib = require('tslib');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ImportMode} that the service accepts. */
exports.KnownImportMode = void 0;
(function (KnownImportMode) {
    /** NoForce */
    KnownImportMode["NoForce"] = "NoForce";
    /** Force */
    KnownImportMode["Force"] = "Force";
})(exports.KnownImportMode || (exports.KnownImportMode = {}));
/** Known values of {@link ConnectionStatus} that the service accepts. */
exports.KnownConnectionStatus = void 0;
(function (KnownConnectionStatus) {
    /** Approved */
    KnownConnectionStatus["Approved"] = "Approved";
    /** Pending */
    KnownConnectionStatus["Pending"] = "Pending";
    /** Rejected */
    KnownConnectionStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownConnectionStatus["Disconnected"] = "Disconnected";
})(exports.KnownConnectionStatus || (exports.KnownConnectionStatus = {}));
/** Known values of {@link ActionsRequired} that the service accepts. */
exports.KnownActionsRequired = void 0;
(function (KnownActionsRequired) {
    /** None */
    KnownActionsRequired["None"] = "None";
    /** Recreate */
    KnownActionsRequired["Recreate"] = "Recreate";
})(exports.KnownActionsRequired || (exports.KnownActionsRequired = {}));
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link LastModifiedByType} that the service accepts. */
exports.KnownLastModifiedByType = void 0;
(function (KnownLastModifiedByType) {
    /** User */
    KnownLastModifiedByType["User"] = "User";
    /** Application */
    KnownLastModifiedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownLastModifiedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownLastModifiedByType["Key"] = "Key";
})(exports.KnownLastModifiedByType || (exports.KnownLastModifiedByType = {}));
/** Known values of {@link SkuName} that the service accepts. */
exports.KnownSkuName = void 0;
(function (KnownSkuName) {
    /** Classic */
    KnownSkuName["Classic"] = "Classic";
    /** Basic */
    KnownSkuName["Basic"] = "Basic";
    /** Standard */
    KnownSkuName["Standard"] = "Standard";
    /** Premium */
    KnownSkuName["Premium"] = "Premium";
})(exports.KnownSkuName || (exports.KnownSkuName = {}));
/** Known values of {@link SkuTier} that the service accepts. */
exports.KnownSkuTier = void 0;
(function (KnownSkuTier) {
    /** Classic */
    KnownSkuTier["Classic"] = "Classic";
    /** Basic */
    KnownSkuTier["Basic"] = "Basic";
    /** Standard */
    KnownSkuTier["Standard"] = "Standard";
    /** Premium */
    KnownSkuTier["Premium"] = "Premium";
})(exports.KnownSkuTier || (exports.KnownSkuTier = {}));
/** Known values of {@link DefaultAction} that the service accepts. */
exports.KnownDefaultAction = void 0;
(function (KnownDefaultAction) {
    /** Allow */
    KnownDefaultAction["Allow"] = "Allow";
    /** Deny */
    KnownDefaultAction["Deny"] = "Deny";
})(exports.KnownDefaultAction || (exports.KnownDefaultAction = {}));
/** Known values of {@link Action} that the service accepts. */
exports.KnownAction = void 0;
(function (KnownAction) {
    /** Allow */
    KnownAction["Allow"] = "Allow";
})(exports.KnownAction || (exports.KnownAction = {}));
/** Known values of {@link PolicyStatus} that the service accepts. */
exports.KnownPolicyStatus = void 0;
(function (KnownPolicyStatus) {
    /** Enabled */
    KnownPolicyStatus["Enabled"] = "enabled";
    /** Disabled */
    KnownPolicyStatus["Disabled"] = "disabled";
})(exports.KnownPolicyStatus || (exports.KnownPolicyStatus = {}));
/** Known values of {@link TrustPolicyType} that the service accepts. */
exports.KnownTrustPolicyType = void 0;
(function (KnownTrustPolicyType) {
    /** Notary */
    KnownTrustPolicyType["Notary"] = "Notary";
})(exports.KnownTrustPolicyType || (exports.KnownTrustPolicyType = {}));
/** Known values of {@link ExportPolicyStatus} that the service accepts. */
exports.KnownExportPolicyStatus = void 0;
(function (KnownExportPolicyStatus) {
    /** Enabled */
    KnownExportPolicyStatus["Enabled"] = "enabled";
    /** Disabled */
    KnownExportPolicyStatus["Disabled"] = "disabled";
})(exports.KnownExportPolicyStatus || (exports.KnownExportPolicyStatus = {}));
/** Known values of {@link EncryptionStatus} that the service accepts. */
exports.KnownEncryptionStatus = void 0;
(function (KnownEncryptionStatus) {
    /** Enabled */
    KnownEncryptionStatus["Enabled"] = "enabled";
    /** Disabled */
    KnownEncryptionStatus["Disabled"] = "disabled";
})(exports.KnownEncryptionStatus || (exports.KnownEncryptionStatus = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link NetworkRuleBypassOptions} that the service accepts. */
exports.KnownNetworkRuleBypassOptions = void 0;
(function (KnownNetworkRuleBypassOptions) {
    /** AzureServices */
    KnownNetworkRuleBypassOptions["AzureServices"] = "AzureServices";
    /** None */
    KnownNetworkRuleBypassOptions["None"] = "None";
})(exports.KnownNetworkRuleBypassOptions || (exports.KnownNetworkRuleBypassOptions = {}));
/** Known values of {@link ZoneRedundancy} that the service accepts. */
exports.KnownZoneRedundancy = void 0;
(function (KnownZoneRedundancy) {
    /** Enabled */
    KnownZoneRedundancy["Enabled"] = "Enabled";
    /** Disabled */
    KnownZoneRedundancy["Disabled"] = "Disabled";
})(exports.KnownZoneRedundancy || (exports.KnownZoneRedundancy = {}));
/** Known values of {@link RegistryUsageUnit} that the service accepts. */
exports.KnownRegistryUsageUnit = void 0;
(function (KnownRegistryUsageUnit) {
    /** Count */
    KnownRegistryUsageUnit["Count"] = "Count";
    /** Bytes */
    KnownRegistryUsageUnit["Bytes"] = "Bytes";
})(exports.KnownRegistryUsageUnit || (exports.KnownRegistryUsageUnit = {}));
/** Known values of {@link TokenCertificateName} that the service accepts. */
exports.KnownTokenCertificateName = void 0;
(function (KnownTokenCertificateName) {
    /** Certificate1 */
    KnownTokenCertificateName["Certificate1"] = "certificate1";
    /** Certificate2 */
    KnownTokenCertificateName["Certificate2"] = "certificate2";
})(exports.KnownTokenCertificateName || (exports.KnownTokenCertificateName = {}));
/** Known values of {@link TokenPasswordName} that the service accepts. */
exports.KnownTokenPasswordName = void 0;
(function (KnownTokenPasswordName) {
    /** Password1 */
    KnownTokenPasswordName["Password1"] = "password1";
    /** Password2 */
    KnownTokenPasswordName["Password2"] = "password2";
})(exports.KnownTokenPasswordName || (exports.KnownTokenPasswordName = {}));
/** Known values of {@link TokenStatus} that the service accepts. */
exports.KnownTokenStatus = void 0;
(function (KnownTokenStatus) {
    /** Enabled */
    KnownTokenStatus["Enabled"] = "enabled";
    /** Disabled */
    KnownTokenStatus["Disabled"] = "disabled";
})(exports.KnownTokenStatus || (exports.KnownTokenStatus = {}));
/** Known values of {@link WebhookStatus} that the service accepts. */
exports.KnownWebhookStatus = void 0;
(function (KnownWebhookStatus) {
    /** Enabled */
    KnownWebhookStatus["Enabled"] = "enabled";
    /** Disabled */
    KnownWebhookStatus["Disabled"] = "disabled";
})(exports.KnownWebhookStatus || (exports.KnownWebhookStatus = {}));
/** Known values of {@link WebhookAction} that the service accepts. */
exports.KnownWebhookAction = void 0;
(function (KnownWebhookAction) {
    /** Push */
    KnownWebhookAction["Push"] = "push";
    /** Delete */
    KnownWebhookAction["Delete"] = "delete";
    /** Quarantine */
    KnownWebhookAction["Quarantine"] = "quarantine";
    /** ChartPush */
    KnownWebhookAction["ChartPush"] = "chart_push";
    /** ChartDelete */
    KnownWebhookAction["ChartDelete"] = "chart_delete";
})(exports.KnownWebhookAction || (exports.KnownWebhookAction = {}));
/** Known values of {@link OS} that the service accepts. */
exports.KnownOS = void 0;
(function (KnownOS) {
    /** Windows */
    KnownOS["Windows"] = "Windows";
    /** Linux */
    KnownOS["Linux"] = "Linux";
})(exports.KnownOS || (exports.KnownOS = {}));
/** Known values of {@link RunStatus} that the service accepts. */
exports.KnownRunStatus = void 0;
(function (KnownRunStatus) {
    /** Queued */
    KnownRunStatus["Queued"] = "Queued";
    /** Started */
    KnownRunStatus["Started"] = "Started";
    /** Running */
    KnownRunStatus["Running"] = "Running";
    /** Succeeded */
    KnownRunStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownRunStatus["Failed"] = "Failed";
    /** Canceled */
    KnownRunStatus["Canceled"] = "Canceled";
    /** Error */
    KnownRunStatus["Error"] = "Error";
    /** Timeout */
    KnownRunStatus["Timeout"] = "Timeout";
})(exports.KnownRunStatus || (exports.KnownRunStatus = {}));
/** Known values of {@link RunType} that the service accepts. */
exports.KnownRunType = void 0;
(function (KnownRunType) {
    /** QuickBuild */
    KnownRunType["QuickBuild"] = "QuickBuild";
    /** QuickRun */
    KnownRunType["QuickRun"] = "QuickRun";
    /** AutoBuild */
    KnownRunType["AutoBuild"] = "AutoBuild";
    /** AutoRun */
    KnownRunType["AutoRun"] = "AutoRun";
})(exports.KnownRunType || (exports.KnownRunType = {}));
/** Known values of {@link Architecture} that the service accepts. */
exports.KnownArchitecture = void 0;
(function (KnownArchitecture) {
    /** Amd64 */
    KnownArchitecture["Amd64"] = "amd64";
    /** X86 */
    KnownArchitecture["X86"] = "x86";
    /** ThreeHundredEightySix */
    KnownArchitecture["ThreeHundredEightySix"] = "386";
    /** Arm */
    KnownArchitecture["Arm"] = "arm";
    /** Arm64 */
    KnownArchitecture["Arm64"] = "arm64";
})(exports.KnownArchitecture || (exports.KnownArchitecture = {}));
/** Known values of {@link Variant} that the service accepts. */
exports.KnownVariant = void 0;
(function (KnownVariant) {
    /** V6 */
    KnownVariant["V6"] = "v6";
    /** V7 */
    KnownVariant["V7"] = "v7";
    /** V8 */
    KnownVariant["V8"] = "v8";
})(exports.KnownVariant || (exports.KnownVariant = {}));
/** Known values of {@link TaskStatus} that the service accepts. */
exports.KnownTaskStatus = void 0;
(function (KnownTaskStatus) {
    /** Disabled */
    KnownTaskStatus["Disabled"] = "Disabled";
    /** Enabled */
    KnownTaskStatus["Enabled"] = "Enabled";
})(exports.KnownTaskStatus || (exports.KnownTaskStatus = {}));
/** Known values of {@link StepType} that the service accepts. */
exports.KnownStepType = void 0;
(function (KnownStepType) {
    /** Docker */
    KnownStepType["Docker"] = "Docker";
    /** FileTask */
    KnownStepType["FileTask"] = "FileTask";
    /** EncodedTask */
    KnownStepType["EncodedTask"] = "EncodedTask";
})(exports.KnownStepType || (exports.KnownStepType = {}));
/** Known values of {@link BaseImageDependencyType} that the service accepts. */
exports.KnownBaseImageDependencyType = void 0;
(function (KnownBaseImageDependencyType) {
    /** BuildTime */
    KnownBaseImageDependencyType["BuildTime"] = "BuildTime";
    /** RunTime */
    KnownBaseImageDependencyType["RunTime"] = "RunTime";
})(exports.KnownBaseImageDependencyType || (exports.KnownBaseImageDependencyType = {}));
/** Known values of {@link TriggerStatus} that the service accepts. */
exports.KnownTriggerStatus = void 0;
(function (KnownTriggerStatus) {
    /** Disabled */
    KnownTriggerStatus["Disabled"] = "Disabled";
    /** Enabled */
    KnownTriggerStatus["Enabled"] = "Enabled";
})(exports.KnownTriggerStatus || (exports.KnownTriggerStatus = {}));
/** Known values of {@link SourceControlType} that the service accepts. */
exports.KnownSourceControlType = void 0;
(function (KnownSourceControlType) {
    /** Github */
    KnownSourceControlType["Github"] = "Github";
    /** VisualStudioTeamService */
    KnownSourceControlType["VisualStudioTeamService"] = "VisualStudioTeamService";
})(exports.KnownSourceControlType || (exports.KnownSourceControlType = {}));
/** Known values of {@link TokenType} that the service accepts. */
exports.KnownTokenType = void 0;
(function (KnownTokenType) {
    /** PAT */
    KnownTokenType["PAT"] = "PAT";
    /** OAuth */
    KnownTokenType["OAuth"] = "OAuth";
})(exports.KnownTokenType || (exports.KnownTokenType = {}));
/** Known values of {@link SourceTriggerEvent} that the service accepts. */
exports.KnownSourceTriggerEvent = void 0;
(function (KnownSourceTriggerEvent) {
    /** Commit */
    KnownSourceTriggerEvent["Commit"] = "commit";
    /** Pullrequest */
    KnownSourceTriggerEvent["Pullrequest"] = "pullrequest";
})(exports.KnownSourceTriggerEvent || (exports.KnownSourceTriggerEvent = {}));
/** Known values of {@link BaseImageTriggerType} that the service accepts. */
exports.KnownBaseImageTriggerType = void 0;
(function (KnownBaseImageTriggerType) {
    /** All */
    KnownBaseImageTriggerType["All"] = "All";
    /** Runtime */
    KnownBaseImageTriggerType["Runtime"] = "Runtime";
})(exports.KnownBaseImageTriggerType || (exports.KnownBaseImageTriggerType = {}));
/** Known values of {@link UpdateTriggerPayloadType} that the service accepts. */
exports.KnownUpdateTriggerPayloadType = void 0;
(function (KnownUpdateTriggerPayloadType) {
    /** Default */
    KnownUpdateTriggerPayloadType["Default"] = "Default";
    /** Token */
    KnownUpdateTriggerPayloadType["Token"] = "Token";
})(exports.KnownUpdateTriggerPayloadType || (exports.KnownUpdateTriggerPayloadType = {}));
/** Known values of {@link SourceRegistryLoginMode} that the service accepts. */
exports.KnownSourceRegistryLoginMode = void 0;
(function (KnownSourceRegistryLoginMode) {
    /** None */
    KnownSourceRegistryLoginMode["None"] = "None";
    /** Default */
    KnownSourceRegistryLoginMode["Default"] = "Default";
})(exports.KnownSourceRegistryLoginMode || (exports.KnownSourceRegistryLoginMode = {}));
/** Known values of {@link SecretObjectType} that the service accepts. */
exports.KnownSecretObjectType = void 0;
(function (KnownSecretObjectType) {
    /** Opaque */
    KnownSecretObjectType["Opaque"] = "Opaque";
    /** Vaultsecret */
    KnownSecretObjectType["Vaultsecret"] = "Vaultsecret";
})(exports.KnownSecretObjectType || (exports.KnownSecretObjectType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ImportImageParameters = {
    type: {
        name: "Composite",
        className: "ImportImageParameters",
        modelProperties: {
            source: {
                serializedName: "source",
                type: {
                    name: "Composite",
                    className: "ImportSource"
                }
            },
            targetTags: {
                serializedName: "targetTags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            untaggedTargetRepositories: {
                serializedName: "untaggedTargetRepositories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            mode: {
                defaultValue: "NoForce",
                serializedName: "mode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImportSource = {
    type: {
        name: "Composite",
        className: "ImportSource",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            registryUri: {
                serializedName: "registryUri",
                type: {
                    name: "String"
                }
            },
            credentials: {
                serializedName: "credentials",
                type: {
                    name: "Composite",
                    className: "ImportSourceCredentials"
                }
            },
            sourceImage: {
                serializedName: "sourceImage",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImportSourceCredentials = {
    type: {
        name: "Composite",
        className: "ImportSourceCredentials",
        modelProperties: {
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationDefinition"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationDefinition = {
    type: {
        name: "Composite",
        className: "OperationDefinition",
        modelProperties: {
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplayDefinition"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            serviceSpecification: {
                serializedName: "properties.serviceSpecification",
                type: {
                    name: "Composite",
                    className: "OperationServiceSpecificationDefinition"
                }
            }
        }
    }
};
const OperationDisplayDefinition = {
    type: {
        name: "Composite",
        className: "OperationDisplayDefinition",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationServiceSpecificationDefinition = {
    type: {
        name: "Composite",
        className: "OperationServiceSpecificationDefinition",
        modelProperties: {
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricSpecificationDefinition"
                        }
                    }
                }
            },
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationLogSpecificationDefinition"
                        }
                    }
                }
            }
        }
    }
};
const OperationMetricSpecificationDefinition = {
    type: {
        name: "Composite",
        className: "OperationMetricSpecificationDefinition",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            internalMetricName: {
                serializedName: "internalMetricName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationLogSpecificationDefinition = {
    type: {
        name: "Composite",
        className: "OperationLogSpecificationDefinition",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegistryNameCheckRequest = {
    type: {
        name: "Composite",
        className: "RegistryNameCheckRequest",
        modelProperties: {
            name: {
                constraints: {
                    Pattern: new RegExp("^[a-zA-Z0-9]*$"),
                    MaxLength: 50,
                    MinLength: 5
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.ContainerRegistry/registries",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegistryNameStatus = {
    type: {
        name: "Composite",
        className: "RegistryNameStatus",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionListResult = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const RegistryListResult = {
    type: {
        name: "Composite",
        className: "RegistryListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Registry"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IdentityProperties = {
    type: {
        name: "Composite",
        className: "IdentityProperties",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "SystemAssigned",
                        "UserAssigned",
                        "SystemAssigned, UserAssigned",
                        "None"
                    ]
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserIdentityProperties" }
                    }
                }
            }
        }
    }
};
const UserIdentityProperties = {
    type: {
        name: "Composite",
        className: "UserIdentityProperties",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Status = {
    type: {
        name: "Composite",
        className: "Status",
        modelProperties: {
            displayStatus: {
                serializedName: "displayStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const NetworkRuleSet = {
    type: {
        name: "Composite",
        className: "NetworkRuleSet",
        modelProperties: {
            defaultAction: {
                defaultValue: "Allow",
                serializedName: "defaultAction",
                required: true,
                type: {
                    name: "String"
                }
            },
            ipRules: {
                serializedName: "ipRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IPRule"
                        }
                    }
                }
            }
        }
    }
};
const IPRule = {
    type: {
        name: "Composite",
        className: "IPRule",
        modelProperties: {
            action: {
                defaultValue: "Allow",
                serializedName: "action",
                type: {
                    name: "String"
                }
            },
            iPAddressOrRange: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Policies = {
    type: {
        name: "Composite",
        className: "Policies",
        modelProperties: {
            quarantinePolicy: {
                serializedName: "quarantinePolicy",
                type: {
                    name: "Composite",
                    className: "QuarantinePolicy"
                }
            },
            trustPolicy: {
                serializedName: "trustPolicy",
                type: {
                    name: "Composite",
                    className: "TrustPolicy"
                }
            },
            retentionPolicy: {
                serializedName: "retentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            },
            exportPolicy: {
                serializedName: "exportPolicy",
                type: {
                    name: "Composite",
                    className: "ExportPolicy"
                }
            }
        }
    }
};
const QuarantinePolicy = {
    type: {
        name: "Composite",
        className: "QuarantinePolicy",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TrustPolicy = {
    type: {
        name: "Composite",
        className: "TrustPolicy",
        modelProperties: {
            type: {
                defaultValue: "Notary",
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RetentionPolicy = {
    type: {
        name: "Composite",
        className: "RetentionPolicy",
        modelProperties: {
            days: {
                defaultValue: 7,
                serializedName: "days",
                type: {
                    name: "Number"
                }
            },
            lastUpdatedTime: {
                serializedName: "lastUpdatedTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExportPolicy = {
    type: {
        name: "Composite",
        className: "ExportPolicy",
        modelProperties: {
            status: {
                defaultValue: "enabled",
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EncryptionProperty = {
    type: {
        name: "Composite",
        className: "EncryptionProperty",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            keyVaultProperties: {
                serializedName: "keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "KeyVaultProperties"
                }
            }
        }
    }
};
const KeyVaultProperties = {
    type: {
        name: "Composite",
        className: "KeyVaultProperties",
        modelProperties: {
            keyIdentifier: {
                serializedName: "keyIdentifier",
                type: {
                    name: "String"
                }
            },
            versionedKeyIdentifier: {
                serializedName: "versionedKeyIdentifier",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "String"
                }
            },
            keyRotationEnabled: {
                serializedName: "keyRotationEnabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            lastKeyRotationTimestamp: {
                serializedName: "lastKeyRotationTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const RegistryUpdateParameters = {
    type: {
        name: "Composite",
        className: "RegistryUpdateParameters",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            },
            adminUserEnabled: {
                serializedName: "properties.adminUserEnabled",
                type: {
                    name: "Boolean"
                }
            },
            networkRuleSet: {
                serializedName: "properties.networkRuleSet",
                type: {
                    name: "Composite",
                    className: "NetworkRuleSet"
                }
            },
            policies: {
                serializedName: "properties.policies",
                type: {
                    name: "Composite",
                    className: "Policies"
                }
            },
            encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "EncryptionProperty"
                }
            },
            dataEndpointEnabled: {
                serializedName: "properties.dataEndpointEnabled",
                type: {
                    name: "Boolean"
                }
            },
            publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            },
            networkRuleBypassOptions: {
                serializedName: "properties.networkRuleBypassOptions",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegistryUsageListResult = {
    type: {
        name: "Composite",
        className: "RegistryUsageListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RegistryUsage"
                        }
                    }
                }
            }
        }
    }
};
const RegistryUsage = {
    type: {
        name: "Composite",
        className: "RegistryUsage",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Number"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                type: {
                    name: "Number"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourceListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            groupId: {
                serializedName: "properties.groupId",
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "properties.requiredMembers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorResponseBody"
                }
            }
        }
    }
};
const ErrorResponseBody = {
    type: {
        name: "Composite",
        className: "ErrorResponseBody",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InnerErrorDescription"
                        }
                    }
                }
            }
        }
    }
};
const InnerErrorDescription = {
    type: {
        name: "Composite",
        className: "InnerErrorDescription",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegistryListCredentialsResult = {
    type: {
        name: "Composite",
        className: "RegistryListCredentialsResult",
        modelProperties: {
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            passwords: {
                serializedName: "passwords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RegistryPassword"
                        }
                    }
                }
            }
        }
    }
};
const RegistryPassword = {
    type: {
        name: "Composite",
        className: "RegistryPassword",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "Enum",
                    allowedValues: ["password", "password2"]
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegenerateCredentialParameters = {
    type: {
        name: "Composite",
        className: "RegenerateCredentialParameters",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["password", "password2"]
                }
            }
        }
    }
};
const ReplicationListResult = {
    type: {
        name: "Composite",
        className: "ReplicationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Replication"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReplicationUpdateParameters = {
    type: {
        name: "Composite",
        className: "ReplicationUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            regionEndpointEnabled: {
                serializedName: "properties.regionEndpointEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ScopeMapListResult = {
    type: {
        name: "Composite",
        className: "ScopeMapListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScopeMap"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScopeMapUpdateParameters = {
    type: {
        name: "Composite",
        className: "ScopeMapUpdateParameters",
        modelProperties: {
            description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            },
            actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const TokenListResult = {
    type: {
        name: "Composite",
        className: "TokenListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Token"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TokenCredentialsProperties = {
    type: {
        name: "Composite",
        className: "TokenCredentialsProperties",
        modelProperties: {
            certificates: {
                serializedName: "certificates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TokenCertificate"
                        }
                    }
                }
            },
            passwords: {
                serializedName: "passwords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TokenPassword"
                        }
                    }
                }
            }
        }
    }
};
const TokenCertificate = {
    type: {
        name: "Composite",
        className: "TokenCertificate",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            expiry: {
                serializedName: "expiry",
                type: {
                    name: "DateTime"
                }
            },
            thumbprint: {
                serializedName: "thumbprint",
                type: {
                    name: "String"
                }
            },
            encodedPemCertificate: {
                serializedName: "encodedPemCertificate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TokenPassword = {
    type: {
        name: "Composite",
        className: "TokenPassword",
        modelProperties: {
            creationTime: {
                serializedName: "creationTime",
                type: {
                    name: "DateTime"
                }
            },
            expiry: {
                serializedName: "expiry",
                type: {
                    name: "DateTime"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TokenUpdateParameters = {
    type: {
        name: "Composite",
        className: "TokenUpdateParameters",
        modelProperties: {
            scopeMapId: {
                serializedName: "properties.scopeMapId",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            },
            credentials: {
                serializedName: "properties.credentials",
                type: {
                    name: "Composite",
                    className: "TokenCredentialsProperties"
                }
            }
        }
    }
};
const GenerateCredentialsParameters = {
    type: {
        name: "Composite",
        className: "GenerateCredentialsParameters",
        modelProperties: {
            tokenId: {
                serializedName: "tokenId",
                type: {
                    name: "String"
                }
            },
            expiry: {
                serializedName: "expiry",
                type: {
                    name: "DateTime"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const GenerateCredentialsResult = {
    type: {
        name: "Composite",
        className: "GenerateCredentialsResult",
        modelProperties: {
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            passwords: {
                serializedName: "passwords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TokenPassword"
                        }
                    }
                }
            }
        }
    }
};
const WebhookListResult = {
    type: {
        name: "Composite",
        className: "WebhookListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Webhook"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebhookCreateParameters = {
    type: {
        name: "Composite",
        className: "WebhookCreateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            serviceUri: {
                serializedName: "properties.serviceUri",
                type: {
                    name: "String"
                }
            },
            customHeaders: {
                serializedName: "properties.customHeaders",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "properties.scope",
                type: {
                    name: "String"
                }
            },
            actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const WebhookUpdateParameters = {
    type: {
        name: "Composite",
        className: "WebhookUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            serviceUri: {
                serializedName: "properties.serviceUri",
                type: {
                    name: "String"
                }
            },
            customHeaders: {
                serializedName: "properties.customHeaders",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "properties.scope",
                type: {
                    name: "String"
                }
            },
            actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const EventInfo = {
    type: {
        name: "Composite",
        className: "EventInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventListResult = {
    type: {
        name: "Composite",
        className: "EventListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Event"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventRequestMessage = {
    type: {
        name: "Composite",
        className: "EventRequestMessage",
        modelProperties: {
            content: {
                serializedName: "content",
                type: {
                    name: "Composite",
                    className: "EventContent"
                }
            },
            headers: {
                serializedName: "headers",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            method: {
                serializedName: "method",
                type: {
                    name: "String"
                }
            },
            requestUri: {
                serializedName: "requestUri",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventContent = {
    type: {
        name: "Composite",
        className: "EventContent",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                type: {
                    name: "DateTime"
                }
            },
            action: {
                serializedName: "action",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "Composite",
                    className: "Target"
                }
            },
            request: {
                serializedName: "request",
                type: {
                    name: "Composite",
                    className: "Request"
                }
            },
            actor: {
                serializedName: "actor",
                type: {
                    name: "Composite",
                    className: "Actor"
                }
            },
            source: {
                serializedName: "source",
                type: {
                    name: "Composite",
                    className: "Source"
                }
            }
        }
    }
};
const Target = {
    type: {
        name: "Composite",
        className: "Target",
        modelProperties: {
            mediaType: {
                serializedName: "mediaType",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "Number"
                }
            },
            digest: {
                serializedName: "digest",
                type: {
                    name: "String"
                }
            },
            length: {
                serializedName: "length",
                type: {
                    name: "Number"
                }
            },
            repository: {
                serializedName: "repository",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            tag: {
                serializedName: "tag",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Request = {
    type: {
        name: "Composite",
        className: "Request",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            addr: {
                serializedName: "addr",
                type: {
                    name: "String"
                }
            },
            host: {
                serializedName: "host",
                type: {
                    name: "String"
                }
            },
            method: {
                serializedName: "method",
                type: {
                    name: "String"
                }
            },
            useragent: {
                serializedName: "useragent",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Actor = {
    type: {
        name: "Composite",
        className: "Actor",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Source = {
    type: {
        name: "Composite",
        className: "Source",
        modelProperties: {
            addr: {
                serializedName: "addr",
                type: {
                    name: "String"
                }
            },
            instanceID: {
                serializedName: "instanceID",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventResponseMessage = {
    type: {
        name: "Composite",
        className: "EventResponseMessage",
        modelProperties: {
            content: {
                serializedName: "content",
                type: {
                    name: "String"
                }
            },
            headers: {
                serializedName: "headers",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            reasonPhrase: {
                serializedName: "reasonPhrase",
                type: {
                    name: "String"
                }
            },
            statusCode: {
                serializedName: "statusCode",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CallbackConfig = {
    type: {
        name: "Composite",
        className: "CallbackConfig",
        modelProperties: {
            serviceUri: {
                serializedName: "serviceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            customHeaders: {
                serializedName: "customHeaders",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const AgentPoolUpdateParameters = {
    type: {
        name: "Composite",
        className: "AgentPoolUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            count: {
                serializedName: "properties.count",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AgentPoolListResult = {
    type: {
        name: "Composite",
        className: "AgentPoolListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AgentPool"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AgentPoolQueueStatus = {
    type: {
        name: "Composite",
        className: "AgentPoolQueueStatus",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const RunRequest = {
    type: {
        name: "Composite",
        className: "RunRequest",
        uberParent: "RunRequest",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            isArchiveEnabled: {
                defaultValue: false,
                serializedName: "isArchiveEnabled",
                type: {
                    name: "Boolean"
                }
            },
            agentPoolName: {
                serializedName: "agentPoolName",
                type: {
                    name: "String"
                }
            },
            logTemplate: {
                serializedName: "logTemplate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageDescriptor = {
    type: {
        name: "Composite",
        className: "ImageDescriptor",
        modelProperties: {
            registry: {
                serializedName: "registry",
                type: {
                    name: "String"
                }
            },
            repository: {
                serializedName: "repository",
                type: {
                    name: "String"
                }
            },
            tag: {
                serializedName: "tag",
                type: {
                    name: "String"
                }
            },
            digest: {
                serializedName: "digest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ImageUpdateTrigger = {
    type: {
        name: "Composite",
        className: "ImageUpdateTrigger",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                type: {
                    name: "DateTime"
                }
            },
            images: {
                serializedName: "images",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageDescriptor"
                        }
                    }
                }
            }
        }
    }
};
const SourceTriggerDescriptor = {
    type: {
        name: "Composite",
        className: "SourceTriggerDescriptor",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            eventType: {
                serializedName: "eventType",
                type: {
                    name: "String"
                }
            },
            commitId: {
                serializedName: "commitId",
                type: {
                    name: "String"
                }
            },
            pullRequestId: {
                serializedName: "pullRequestId",
                type: {
                    name: "String"
                }
            },
            repositoryUrl: {
                serializedName: "repositoryUrl",
                type: {
                    name: "String"
                }
            },
            branchName: {
                serializedName: "branchName",
                type: {
                    name: "String"
                }
            },
            providerType: {
                serializedName: "providerType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TimerTriggerDescriptor = {
    type: {
        name: "Composite",
        className: "TimerTriggerDescriptor",
        modelProperties: {
            timerTriggerName: {
                serializedName: "timerTriggerName",
                type: {
                    name: "String"
                }
            },
            scheduleOccurrence: {
                serializedName: "scheduleOccurrence",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PlatformProperties = {
    type: {
        name: "Composite",
        className: "PlatformProperties",
        modelProperties: {
            os: {
                serializedName: "os",
                required: true,
                type: {
                    name: "String"
                }
            },
            architecture: {
                serializedName: "architecture",
                type: {
                    name: "String"
                }
            },
            variant: {
                serializedName: "variant",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AgentProperties = {
    type: {
        name: "Composite",
        className: "AgentProperties",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SourceUploadDefinition = {
    type: {
        name: "Composite",
        className: "SourceUploadDefinition",
        modelProperties: {
            uploadUrl: {
                serializedName: "uploadUrl",
                type: {
                    name: "String"
                }
            },
            relativePath: {
                serializedName: "relativePath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RunListResult = {
    type: {
        name: "Composite",
        className: "RunListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Run"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RunUpdateParameters = {
    type: {
        name: "Composite",
        className: "RunUpdateParameters",
        modelProperties: {
            isArchiveEnabled: {
                serializedName: "isArchiveEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const RunGetLogResult = {
    type: {
        name: "Composite",
        className: "RunGetLogResult",
        modelProperties: {
            logLink: {
                serializedName: "logLink",
                type: {
                    name: "String"
                }
            },
            logArtifactLink: {
                serializedName: "logArtifactLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TaskRunUpdateParameters = {
    type: {
        name: "Composite",
        className: "TaskRunUpdateParameters",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            runRequest: {
                serializedName: "properties.runRequest",
                type: {
                    name: "Composite",
                    className: "RunRequest"
                }
            },
            forceUpdateTag: {
                serializedName: "properties.forceUpdateTag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TaskRunListResult = {
    type: {
        name: "Composite",
        className: "TaskRunListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TaskRun"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TaskListResult = {
    type: {
        name: "Composite",
        className: "TaskListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Task"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TaskStepProperties = {
    type: {
        name: "Composite",
        className: "TaskStepProperties",
        uberParent: "TaskStepProperties",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            baseImageDependencies: {
                serializedName: "baseImageDependencies",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BaseImageDependency"
                        }
                    }
                }
            },
            contextPath: {
                serializedName: "contextPath",
                type: {
                    name: "String"
                }
            },
            contextAccessToken: {
                serializedName: "contextAccessToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BaseImageDependency = {
    type: {
        name: "Composite",
        className: "BaseImageDependency",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            registry: {
                serializedName: "registry",
                type: {
                    name: "String"
                }
            },
            repository: {
                serializedName: "repository",
                type: {
                    name: "String"
                }
            },
            tag: {
                serializedName: "tag",
                type: {
                    name: "String"
                }
            },
            digest: {
                serializedName: "digest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerProperties = {
    type: {
        name: "Composite",
        className: "TriggerProperties",
        modelProperties: {
            timerTriggers: {
                serializedName: "timerTriggers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimerTrigger"
                        }
                    }
                }
            },
            sourceTriggers: {
                serializedName: "sourceTriggers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SourceTrigger"
                        }
                    }
                }
            },
            baseImageTrigger: {
                serializedName: "baseImageTrigger",
                type: {
                    name: "Composite",
                    className: "BaseImageTrigger"
                }
            }
        }
    }
};
const TimerTrigger = {
    type: {
        name: "Composite",
        className: "TimerTrigger",
        modelProperties: {
            schedule: {
                serializedName: "schedule",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SourceTrigger = {
    type: {
        name: "Composite",
        className: "SourceTrigger",
        modelProperties: {
            sourceRepository: {
                serializedName: "sourceRepository",
                type: {
                    name: "Composite",
                    className: "SourceProperties"
                }
            },
            sourceTriggerEvents: {
                serializedName: "sourceTriggerEvents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SourceProperties = {
    type: {
        name: "Composite",
        className: "SourceProperties",
        modelProperties: {
            sourceControlType: {
                serializedName: "sourceControlType",
                required: true,
                type: {
                    name: "String"
                }
            },
            repositoryUrl: {
                serializedName: "repositoryUrl",
                required: true,
                type: {
                    name: "String"
                }
            },
            branch: {
                serializedName: "branch",
                type: {
                    name: "String"
                }
            },
            sourceControlAuthProperties: {
                serializedName: "sourceControlAuthProperties",
                type: {
                    name: "Composite",
                    className: "AuthInfo"
                }
            }
        }
    }
};
const AuthInfo = {
    type: {
        name: "Composite",
        className: "AuthInfo",
        modelProperties: {
            tokenType: {
                serializedName: "tokenType",
                required: true,
                type: {
                    name: "String"
                }
            },
            token: {
                serializedName: "token",
                required: true,
                type: {
                    name: "String"
                }
            },
            refreshToken: {
                serializedName: "refreshToken",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            },
            expiresIn: {
                serializedName: "expiresIn",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const BaseImageTrigger = {
    type: {
        name: "Composite",
        className: "BaseImageTrigger",
        modelProperties: {
            baseImageTriggerType: {
                serializedName: "baseImageTriggerType",
                required: true,
                type: {
                    name: "String"
                }
            },
            updateTriggerEndpoint: {
                serializedName: "updateTriggerEndpoint",
                type: {
                    name: "String"
                }
            },
            updateTriggerPayloadType: {
                serializedName: "updateTriggerPayloadType",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Credentials = {
    type: {
        name: "Composite",
        className: "Credentials",
        modelProperties: {
            sourceRegistry: {
                serializedName: "sourceRegistry",
                type: {
                    name: "Composite",
                    className: "SourceRegistryCredentials"
                }
            },
            customRegistries: {
                serializedName: "customRegistries",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "CustomRegistryCredentials" }
                    }
                }
            }
        }
    }
};
const SourceRegistryCredentials = {
    type: {
        name: "Composite",
        className: "SourceRegistryCredentials",
        modelProperties: {
            loginMode: {
                serializedName: "loginMode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CustomRegistryCredentials = {
    type: {
        name: "Composite",
        className: "CustomRegistryCredentials",
        modelProperties: {
            userName: {
                serializedName: "userName",
                type: {
                    name: "Composite",
                    className: "SecretObject"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretObject"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SecretObject = {
    type: {
        name: "Composite",
        className: "SecretObject",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TaskUpdateParameters = {
    type: {
        name: "Composite",
        className: "TaskUpdateParameters",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            },
            platform: {
                serializedName: "properties.platform",
                type: {
                    name: "Composite",
                    className: "PlatformUpdateParameters"
                }
            },
            agentConfiguration: {
                serializedName: "properties.agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            },
            agentPoolName: {
                serializedName: "properties.agentPoolName",
                type: {
                    name: "String"
                }
            },
            timeout: {
                serializedName: "properties.timeout",
                type: {
                    name: "Number"
                }
            },
            step: {
                serializedName: "properties.step",
                type: {
                    name: "Composite",
                    className: "TaskStepUpdateParameters"
                }
            },
            trigger: {
                serializedName: "properties.trigger",
                type: {
                    name: "Composite",
                    className: "TriggerUpdateParameters"
                }
            },
            credentials: {
                serializedName: "properties.credentials",
                type: {
                    name: "Composite",
                    className: "Credentials"
                }
            },
            logTemplate: {
                serializedName: "properties.logTemplate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PlatformUpdateParameters = {
    type: {
        name: "Composite",
        className: "PlatformUpdateParameters",
        modelProperties: {
            os: {
                serializedName: "os",
                type: {
                    name: "String"
                }
            },
            architecture: {
                serializedName: "architecture",
                type: {
                    name: "String"
                }
            },
            variant: {
                serializedName: "variant",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TaskStepUpdateParameters = {
    type: {
        name: "Composite",
        className: "TaskStepUpdateParameters",
        uberParent: "TaskStepUpdateParameters",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            contextPath: {
                serializedName: "contextPath",
                type: {
                    name: "String"
                }
            },
            contextAccessToken: {
                serializedName: "contextAccessToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TriggerUpdateParameters = {
    type: {
        name: "Composite",
        className: "TriggerUpdateParameters",
        modelProperties: {
            timerTriggers: {
                serializedName: "timerTriggers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimerTriggerUpdateParameters"
                        }
                    }
                }
            },
            sourceTriggers: {
                serializedName: "sourceTriggers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SourceTriggerUpdateParameters"
                        }
                    }
                }
            },
            baseImageTrigger: {
                serializedName: "baseImageTrigger",
                type: {
                    name: "Composite",
                    className: "BaseImageTriggerUpdateParameters"
                }
            }
        }
    }
};
const TimerTriggerUpdateParameters = {
    type: {
        name: "Composite",
        className: "TimerTriggerUpdateParameters",
        modelProperties: {
            schedule: {
                serializedName: "schedule",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SourceTriggerUpdateParameters = {
    type: {
        name: "Composite",
        className: "SourceTriggerUpdateParameters",
        modelProperties: {
            sourceRepository: {
                serializedName: "sourceRepository",
                type: {
                    name: "Composite",
                    className: "SourceUpdateParameters"
                }
            },
            sourceTriggerEvents: {
                serializedName: "sourceTriggerEvents",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SourceUpdateParameters = {
    type: {
        name: "Composite",
        className: "SourceUpdateParameters",
        modelProperties: {
            sourceControlType: {
                serializedName: "sourceControlType",
                type: {
                    name: "String"
                }
            },
            repositoryUrl: {
                serializedName: "repositoryUrl",
                type: {
                    name: "String"
                }
            },
            branch: {
                serializedName: "branch",
                type: {
                    name: "String"
                }
            },
            sourceControlAuthProperties: {
                serializedName: "sourceControlAuthProperties",
                type: {
                    name: "Composite",
                    className: "AuthInfoUpdateParameters"
                }
            }
        }
    }
};
const AuthInfoUpdateParameters = {
    type: {
        name: "Composite",
        className: "AuthInfoUpdateParameters",
        modelProperties: {
            tokenType: {
                serializedName: "tokenType",
                type: {
                    name: "String"
                }
            },
            token: {
                serializedName: "token",
                type: {
                    name: "String"
                }
            },
            refreshToken: {
                serializedName: "refreshToken",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            },
            expiresIn: {
                serializedName: "expiresIn",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const BaseImageTriggerUpdateParameters = {
    type: {
        name: "Composite",
        className: "BaseImageTriggerUpdateParameters",
        modelProperties: {
            baseImageTriggerType: {
                serializedName: "baseImageTriggerType",
                type: {
                    name: "String"
                }
            },
            updateTriggerEndpoint: {
                serializedName: "updateTriggerEndpoint",
                type: {
                    name: "String"
                }
            },
            updateTriggerPayloadType: {
                serializedName: "updateTriggerPayloadType",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageAccountProperties = {
    type: {
        name: "Composite",
        className: "StorageAccountProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PackageType = {
    type: {
        name: "Composite",
        className: "PackageType",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            endpoint: {
                serializedName: "endpoint",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ActiveDirectoryObject = {
    type: {
        name: "Composite",
        className: "ActiveDirectoryObject",
        modelProperties: {
            objectId: {
                serializedName: "objectId",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RunFilter = {
    type: {
        name: "Composite",
        className: "RunFilter",
        modelProperties: {
            runId: {
                serializedName: "runId",
                type: {
                    name: "String"
                }
            },
            runType: {
                serializedName: "runType",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            createTime: {
                serializedName: "createTime",
                type: {
                    name: "DateTime"
                }
            },
            finishTime: {
                serializedName: "finishTime",
                type: {
                    name: "DateTime"
                }
            },
            outputImageManifests: {
                serializedName: "outputImageManifests",
                type: {
                    name: "String"
                }
            },
            isArchiveEnabled: {
                serializedName: "isArchiveEnabled",
                type: {
                    name: "Boolean"
                }
            },
            taskName: {
                serializedName: "taskName",
                type: {
                    name: "String"
                }
            },
            agentPoolName: {
                serializedName: "agentPoolName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Argument = {
    type: {
        name: "Composite",
        className: "Argument",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            },
            isSecret: {
                defaultValue: false,
                serializedName: "isSecret",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SetValue = {
    type: {
        name: "Composite",
        className: "SetValue",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            },
            isSecret: {
                defaultValue: false,
                serializedName: "isSecret",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const OverrideTaskStepProperties = {
    type: {
        name: "Composite",
        className: "OverrideTaskStepProperties",
        modelProperties: {
            contextPath: {
                serializedName: "contextPath",
                type: {
                    name: "String"
                }
            },
            file: {
                serializedName: "file",
                type: {
                    name: "String"
                }
            },
            arguments: {
                serializedName: "arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Argument"
                        }
                    }
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            },
            updateTriggerToken: {
                serializedName: "updateTriggerToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ScopeMap = {
    type: {
        name: "Composite",
        className: "ScopeMap",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, typePropertiesType: {
                serializedName: "properties.type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationDate: {
                serializedName: "properties.creationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const Token = {
    type: {
        name: "Composite",
        className: "Token",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { creationDate: {
                serializedName: "properties.creationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, scopeMapId: {
                serializedName: "properties.scopeMapId",
                type: {
                    name: "String"
                }
            }, credentials: {
                serializedName: "properties.credentials",
                type: {
                    name: "Composite",
                    className: "TokenCredentialsProperties"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            } })
    }
};
const Run = {
    type: {
        name: "Composite",
        className: "Run",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { runId: {
                serializedName: "properties.runId",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, lastUpdatedTime: {
                serializedName: "properties.lastUpdatedTime",
                type: {
                    name: "DateTime"
                }
            }, runType: {
                serializedName: "properties.runType",
                type: {
                    name: "String"
                }
            }, agentPoolName: {
                serializedName: "properties.agentPoolName",
                type: {
                    name: "String"
                }
            }, createTime: {
                serializedName: "properties.createTime",
                type: {
                    name: "DateTime"
                }
            }, startTime: {
                serializedName: "properties.startTime",
                type: {
                    name: "DateTime"
                }
            }, finishTime: {
                serializedName: "properties.finishTime",
                type: {
                    name: "DateTime"
                }
            }, outputImages: {
                serializedName: "properties.outputImages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageDescriptor"
                        }
                    }
                }
            }, task: {
                serializedName: "properties.task",
                type: {
                    name: "String"
                }
            }, imageUpdateTrigger: {
                serializedName: "properties.imageUpdateTrigger",
                type: {
                    name: "Composite",
                    className: "ImageUpdateTrigger"
                }
            }, sourceTrigger: {
                serializedName: "properties.sourceTrigger",
                type: {
                    name: "Composite",
                    className: "SourceTriggerDescriptor"
                }
            }, timerTrigger: {
                serializedName: "properties.timerTrigger",
                type: {
                    name: "Composite",
                    className: "TimerTriggerDescriptor"
                }
            }, platform: {
                serializedName: "properties.platform",
                type: {
                    name: "Composite",
                    className: "PlatformProperties"
                }
            }, agentConfiguration: {
                serializedName: "properties.agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            }, sourceRegistryAuth: {
                serializedName: "properties.sourceRegistryAuth",
                type: {
                    name: "String"
                }
            }, customRegistries: {
                serializedName: "properties.customRegistries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, runErrorMessage: {
                serializedName: "properties.runErrorMessage",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, updateTriggerToken: {
                serializedName: "properties.updateTriggerToken",
                type: {
                    name: "String"
                }
            }, logArtifact: {
                serializedName: "properties.logArtifact",
                type: {
                    name: "Composite",
                    className: "ImageDescriptor"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, isArchiveEnabled: {
                defaultValue: false,
                serializedName: "properties.isArchiveEnabled",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const TaskRun = {
    type: {
        name: "Composite",
        className: "TaskRun",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, runRequest: {
                serializedName: "properties.runRequest",
                type: {
                    name: "Composite",
                    className: "RunRequest"
                }
            }, runResult: {
                serializedName: "properties.runResult",
                type: {
                    name: "Composite",
                    className: "Run"
                }
            }, forceUpdateTag: {
                serializedName: "properties.forceUpdateTag",
                type: {
                    name: "String"
                }
            } })
    }
};
const Registry = {
    type: {
        name: "Composite",
        className: "Registry",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            }, loginServer: {
                serializedName: "properties.loginServer",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationDate: {
                serializedName: "properties.creationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Composite",
                    className: "Status"
                }
            }, adminUserEnabled: {
                defaultValue: false,
                serializedName: "properties.adminUserEnabled",
                type: {
                    name: "Boolean"
                }
            }, networkRuleSet: {
                serializedName: "properties.networkRuleSet",
                type: {
                    name: "Composite",
                    className: "NetworkRuleSet"
                }
            }, policies: {
                serializedName: "properties.policies",
                type: {
                    name: "Composite",
                    className: "Policies"
                }
            }, encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "EncryptionProperty"
                }
            }, dataEndpointEnabled: {
                serializedName: "properties.dataEndpointEnabled",
                type: {
                    name: "Boolean"
                }
            }, dataEndpointHostNames: {
                serializedName: "properties.dataEndpointHostNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }, publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            }, networkRuleBypassOptions: {
                serializedName: "properties.networkRuleBypassOptions",
                type: {
                    name: "String"
                }
            }, zoneRedundancy: {
                serializedName: "properties.zoneRedundancy",
                type: {
                    name: "String"
                }
            } })
    }
};
const Replication = {
    type: {
        name: "Composite",
        className: "Replication",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Composite",
                    className: "Status"
                }
            }, regionEndpointEnabled: {
                defaultValue: true,
                serializedName: "properties.regionEndpointEnabled",
                type: {
                    name: "Boolean"
                }
            }, zoneRedundancy: {
                serializedName: "properties.zoneRedundancy",
                type: {
                    name: "String"
                }
            } })
    }
};
const Webhook = {
    type: {
        name: "Composite",
        className: "Webhook",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, scope: {
                serializedName: "properties.scope",
                type: {
                    name: "String"
                }
            }, actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AgentPool = {
    type: {
        name: "Composite",
        className: "AgentPool",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { count: {
                serializedName: "properties.count",
                type: {
                    name: "Number"
                }
            }, tier: {
                serializedName: "properties.tier",
                type: {
                    name: "String"
                }
            }, os: {
                serializedName: "properties.os",
                type: {
                    name: "String"
                }
            }, virtualNetworkSubnetResourceId: {
                serializedName: "properties.virtualNetworkSubnetResourceId",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Task = {
    type: {
        name: "Composite",
        className: "Task",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationDate: {
                serializedName: "properties.creationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, platform: {
                serializedName: "properties.platform",
                type: {
                    name: "Composite",
                    className: "PlatformProperties"
                }
            }, agentConfiguration: {
                serializedName: "properties.agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            }, agentPoolName: {
                serializedName: "properties.agentPoolName",
                type: {
                    name: "String"
                }
            }, timeout: {
                defaultValue: 3600,
                constraints: {
                    InclusiveMaximum: 28800,
                    InclusiveMinimum: 300
                },
                serializedName: "properties.timeout",
                type: {
                    name: "Number"
                }
            }, step: {
                serializedName: "properties.step",
                type: {
                    name: "Composite",
                    className: "TaskStepProperties"
                }
            }, trigger: {
                serializedName: "properties.trigger",
                type: {
                    name: "Composite",
                    className: "TriggerProperties"
                }
            }, credentials: {
                serializedName: "properties.credentials",
                type: {
                    name: "Composite",
                    className: "Credentials"
                }
            }, logTemplate: {
                serializedName: "properties.logTemplate",
                type: {
                    name: "String"
                }
            }, isSystemTask: {
                defaultValue: false,
                serializedName: "properties.isSystemTask",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const Event = {
    type: {
        name: "Composite",
        className: "Event",
        modelProperties: Object.assign(Object.assign({}, EventInfo.type.modelProperties), { eventRequestMessage: {
                serializedName: "eventRequestMessage",
                type: {
                    name: "Composite",
                    className: "EventRequestMessage"
                }
            }, eventResponseMessage: {
                serializedName: "eventResponseMessage",
                type: {
                    name: "Composite",
                    className: "EventResponseMessage"
                }
            } })
    }
};
const DockerBuildRequest = {
    serializedName: "DockerBuildRequest",
    type: {
        name: "Composite",
        className: "DockerBuildRequest",
        uberParent: "RunRequest",
        polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RunRequest.type.modelProperties), { imageNames: {
                serializedName: "imageNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, isPushEnabled: {
                defaultValue: true,
                serializedName: "isPushEnabled",
                type: {
                    name: "Boolean"
                }
            }, noCache: {
                defaultValue: false,
                serializedName: "noCache",
                type: {
                    name: "Boolean"
                }
            }, dockerFilePath: {
                serializedName: "dockerFilePath",
                required: true,
                type: {
                    name: "String"
                }
            }, target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            }, arguments: {
                serializedName: "arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Argument"
                        }
                    }
                }
            }, timeout: {
                defaultValue: 3600,
                constraints: {
                    InclusiveMaximum: 28800,
                    InclusiveMinimum: 300
                },
                serializedName: "timeout",
                type: {
                    name: "Number"
                }
            }, platform: {
                serializedName: "platform",
                type: {
                    name: "Composite",
                    className: "PlatformProperties"
                }
            }, agentConfiguration: {
                serializedName: "agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            }, sourceLocation: {
                serializedName: "sourceLocation",
                type: {
                    name: "String"
                }
            }, credentials: {
                serializedName: "credentials",
                type: {
                    name: "Composite",
                    className: "Credentials"
                }
            } })
    }
};
const FileTaskRunRequest = {
    serializedName: "FileTaskRunRequest",
    type: {
        name: "Composite",
        className: "FileTaskRunRequest",
        uberParent: "RunRequest",
        polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RunRequest.type.modelProperties), { taskFilePath: {
                serializedName: "taskFilePath",
                required: true,
                type: {
                    name: "String"
                }
            }, valuesFilePath: {
                serializedName: "valuesFilePath",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            }, timeout: {
                defaultValue: 3600,
                constraints: {
                    InclusiveMaximum: 28800,
                    InclusiveMinimum: 300
                },
                serializedName: "timeout",
                type: {
                    name: "Number"
                }
            }, platform: {
                serializedName: "platform",
                type: {
                    name: "Composite",
                    className: "PlatformProperties"
                }
            }, agentConfiguration: {
                serializedName: "agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            }, sourceLocation: {
                serializedName: "sourceLocation",
                type: {
                    name: "String"
                }
            }, credentials: {
                serializedName: "credentials",
                type: {
                    name: "Composite",
                    className: "Credentials"
                }
            } })
    }
};
const TaskRunRequest = {
    serializedName: "TaskRunRequest",
    type: {
        name: "Composite",
        className: "TaskRunRequest",
        uberParent: "RunRequest",
        polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RunRequest.type.modelProperties), { taskId: {
                serializedName: "taskId",
                required: true,
                type: {
                    name: "String"
                }
            }, overrideTaskStepProperties: {
                serializedName: "overrideTaskStepProperties",
                type: {
                    name: "Composite",
                    className: "OverrideTaskStepProperties"
                }
            } })
    }
};
const EncodedTaskRunRequest = {
    serializedName: "EncodedTaskRunRequest",
    type: {
        name: "Composite",
        className: "EncodedTaskRunRequest",
        uberParent: "RunRequest",
        polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RunRequest.type.modelProperties), { encodedTaskContent: {
                serializedName: "encodedTaskContent",
                required: true,
                type: {
                    name: "String"
                }
            }, encodedValuesContent: {
                serializedName: "encodedValuesContent",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            }, timeout: {
                defaultValue: 3600,
                constraints: {
                    InclusiveMaximum: 28800,
                    InclusiveMinimum: 300
                },
                serializedName: "timeout",
                type: {
                    name: "Number"
                }
            }, platform: {
                serializedName: "platform",
                type: {
                    name: "Composite",
                    className: "PlatformProperties"
                }
            }, agentConfiguration: {
                serializedName: "agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            }, sourceLocation: {
                serializedName: "sourceLocation",
                type: {
                    name: "String"
                }
            }, credentials: {
                serializedName: "credentials",
                type: {
                    name: "Composite",
                    className: "Credentials"
                }
            } })
    }
};
const DockerBuildStep = {
    serializedName: "Docker",
    type: {
        name: "Composite",
        className: "DockerBuildStep",
        uberParent: "TaskStepProperties",
        polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepProperties.type.modelProperties), { imageNames: {
                serializedName: "imageNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, isPushEnabled: {
                defaultValue: true,
                serializedName: "isPushEnabled",
                type: {
                    name: "Boolean"
                }
            }, noCache: {
                defaultValue: false,
                serializedName: "noCache",
                type: {
                    name: "Boolean"
                }
            }, dockerFilePath: {
                serializedName: "dockerFilePath",
                required: true,
                type: {
                    name: "String"
                }
            }, target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            }, arguments: {
                serializedName: "arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Argument"
                        }
                    }
                }
            } })
    }
};
const FileTaskStep = {
    serializedName: "FileTask",
    type: {
        name: "Composite",
        className: "FileTaskStep",
        uberParent: "TaskStepProperties",
        polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepProperties.type.modelProperties), { taskFilePath: {
                serializedName: "taskFilePath",
                required: true,
                type: {
                    name: "String"
                }
            }, valuesFilePath: {
                serializedName: "valuesFilePath",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            } })
    }
};
const EncodedTaskStep = {
    serializedName: "EncodedTask",
    type: {
        name: "Composite",
        className: "EncodedTaskStep",
        uberParent: "TaskStepProperties",
        polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepProperties.type.modelProperties), { encodedTaskContent: {
                serializedName: "encodedTaskContent",
                required: true,
                type: {
                    name: "String"
                }
            }, encodedValuesContent: {
                serializedName: "encodedValuesContent",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            } })
    }
};
const DockerBuildStepUpdateParameters = {
    serializedName: "Docker",
    type: {
        name: "Composite",
        className: "DockerBuildStepUpdateParameters",
        uberParent: "TaskStepUpdateParameters",
        polymorphicDiscriminator: TaskStepUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepUpdateParameters.type.modelProperties), { imageNames: {
                serializedName: "imageNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, isPushEnabled: {
                serializedName: "isPushEnabled",
                type: {
                    name: "Boolean"
                }
            }, noCache: {
                serializedName: "noCache",
                type: {
                    name: "Boolean"
                }
            }, dockerFilePath: {
                serializedName: "dockerFilePath",
                type: {
                    name: "String"
                }
            }, arguments: {
                serializedName: "arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Argument"
                        }
                    }
                }
            }, target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            } })
    }
};
const FileTaskStepUpdateParameters = {
    serializedName: "FileTask",
    type: {
        name: "Composite",
        className: "FileTaskStepUpdateParameters",
        uberParent: "TaskStepUpdateParameters",
        polymorphicDiscriminator: TaskStepUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepUpdateParameters.type.modelProperties), { taskFilePath: {
                serializedName: "taskFilePath",
                type: {
                    name: "String"
                }
            }, valuesFilePath: {
                serializedName: "valuesFilePath",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            } })
    }
};
const EncodedTaskStepUpdateParameters = {
    serializedName: "EncodedTask",
    type: {
        name: "Composite",
        className: "EncodedTaskStepUpdateParameters",
        uberParent: "TaskStepUpdateParameters",
        polymorphicDiscriminator: TaskStepUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepUpdateParameters.type.modelProperties), { encodedTaskContent: {
                serializedName: "encodedTaskContent",
                type: {
                    name: "String"
                }
            }, encodedValuesContent: {
                serializedName: "encodedValuesContent",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            } })
    }
};
const RegistriesImportImageHeaders = {
    type: {
        name: "Composite",
        className: "RegistriesImportImageHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegistriesCreateHeaders = {
    type: {
        name: "Composite",
        className: "RegistriesCreateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegistriesDeleteHeaders = {
    type: {
        name: "Composite",
        className: "RegistriesDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegistriesUpdateHeaders = {
    type: {
        name: "Composite",
        className: "RegistriesUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegistriesGenerateCredentialsHeaders = {
    type: {
        name: "Composite",
        className: "RegistriesGenerateCredentialsHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionsCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionsCreateOrUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReplicationsCreateHeaders = {
    type: {
        name: "Composite",
        className: "ReplicationsCreateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReplicationsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ReplicationsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ReplicationsUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ReplicationsUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScopeMapsCreateHeaders = {
    type: {
        name: "Composite",
        className: "ScopeMapsCreateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScopeMapsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ScopeMapsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScopeMapsUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ScopeMapsUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TokensCreateHeaders = {
    type: {
        name: "Composite",
        className: "TokensCreateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TokensDeleteHeaders = {
    type: {
        name: "Composite",
        className: "TokensDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TokensUpdateHeaders = {
    type: {
        name: "Composite",
        className: "TokensUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebhooksCreateHeaders = {
    type: {
        name: "Composite",
        className: "WebhooksCreateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebhooksDeleteHeaders = {
    type: {
        name: "Composite",
        className: "WebhooksDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebhooksUpdateHeaders = {
    type: {
        name: "Composite",
        className: "WebhooksUpdateHeaders",
        modelProperties: {
            azureAsyncOperation: {
                serializedName: "azure-asyncoperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
let discriminators = {
    RunRequest: RunRequest,
    TaskStepProperties: TaskStepProperties,
    TaskStepUpdateParameters: TaskStepUpdateParameters,
    "RunRequest.DockerBuildRequest": DockerBuildRequest,
    "RunRequest.FileTaskRunRequest": FileTaskRunRequest,
    "RunRequest.TaskRunRequest": TaskRunRequest,
    "RunRequest.EncodedTaskRunRequest": EncodedTaskRunRequest,
    "TaskStepProperties.Docker": DockerBuildStep,
    "TaskStepProperties.FileTask": FileTaskStep,
    "TaskStepProperties.EncodedTask": EncodedTaskStep,
    "TaskStepUpdateParameters.Docker": DockerBuildStepUpdateParameters,
    "TaskStepUpdateParameters.FileTask": FileTaskStepUpdateParameters,
    "TaskStepUpdateParameters.EncodedTask": EncodedTaskStepUpdateParameters
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ImportImageParameters: ImportImageParameters,
    ImportSource: ImportSource,
    ImportSourceCredentials: ImportSourceCredentials,
    OperationListResult: OperationListResult,
    OperationDefinition: OperationDefinition,
    OperationDisplayDefinition: OperationDisplayDefinition,
    OperationServiceSpecificationDefinition: OperationServiceSpecificationDefinition,
    OperationMetricSpecificationDefinition: OperationMetricSpecificationDefinition,
    OperationLogSpecificationDefinition: OperationLogSpecificationDefinition,
    RegistryNameCheckRequest: RegistryNameCheckRequest,
    RegistryNameStatus: RegistryNameStatus,
    PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
    PrivateEndpoint: PrivateEndpoint,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    ProxyResource: ProxyResource,
    SystemData: SystemData,
    RegistryListResult: RegistryListResult,
    Sku: Sku,
    IdentityProperties: IdentityProperties,
    UserIdentityProperties: UserIdentityProperties,
    Status: Status,
    NetworkRuleSet: NetworkRuleSet,
    IPRule: IPRule,
    Policies: Policies,
    QuarantinePolicy: QuarantinePolicy,
    TrustPolicy: TrustPolicy,
    RetentionPolicy: RetentionPolicy,
    ExportPolicy: ExportPolicy,
    EncryptionProperty: EncryptionProperty,
    KeyVaultProperties: KeyVaultProperties,
    Resource: Resource,
    RegistryUpdateParameters: RegistryUpdateParameters,
    RegistryUsageListResult: RegistryUsageListResult,
    RegistryUsage: RegistryUsage,
    PrivateLinkResourceListResult: PrivateLinkResourceListResult,
    PrivateLinkResource: PrivateLinkResource,
    ErrorResponse: ErrorResponse,
    ErrorResponseBody: ErrorResponseBody,
    InnerErrorDescription: InnerErrorDescription,
    RegistryListCredentialsResult: RegistryListCredentialsResult,
    RegistryPassword: RegistryPassword,
    RegenerateCredentialParameters: RegenerateCredentialParameters,
    ReplicationListResult: ReplicationListResult,
    ReplicationUpdateParameters: ReplicationUpdateParameters,
    ScopeMapListResult: ScopeMapListResult,
    ScopeMapUpdateParameters: ScopeMapUpdateParameters,
    TokenListResult: TokenListResult,
    TokenCredentialsProperties: TokenCredentialsProperties,
    TokenCertificate: TokenCertificate,
    TokenPassword: TokenPassword,
    TokenUpdateParameters: TokenUpdateParameters,
    GenerateCredentialsParameters: GenerateCredentialsParameters,
    GenerateCredentialsResult: GenerateCredentialsResult,
    WebhookListResult: WebhookListResult,
    WebhookCreateParameters: WebhookCreateParameters,
    WebhookUpdateParameters: WebhookUpdateParameters,
    EventInfo: EventInfo,
    EventListResult: EventListResult,
    EventRequestMessage: EventRequestMessage,
    EventContent: EventContent,
    Target: Target,
    Request: Request,
    Actor: Actor,
    Source: Source,
    EventResponseMessage: EventResponseMessage,
    CallbackConfig: CallbackConfig,
    AgentPoolUpdateParameters: AgentPoolUpdateParameters,
    AgentPoolListResult: AgentPoolListResult,
    AgentPoolQueueStatus: AgentPoolQueueStatus,
    RunRequest: RunRequest,
    ImageDescriptor: ImageDescriptor,
    ImageUpdateTrigger: ImageUpdateTrigger,
    SourceTriggerDescriptor: SourceTriggerDescriptor,
    TimerTriggerDescriptor: TimerTriggerDescriptor,
    PlatformProperties: PlatformProperties,
    AgentProperties: AgentProperties,
    SourceUploadDefinition: SourceUploadDefinition,
    RunListResult: RunListResult,
    RunUpdateParameters: RunUpdateParameters,
    RunGetLogResult: RunGetLogResult,
    TaskRunUpdateParameters: TaskRunUpdateParameters,
    TaskRunListResult: TaskRunListResult,
    TaskListResult: TaskListResult,
    TaskStepProperties: TaskStepProperties,
    BaseImageDependency: BaseImageDependency,
    TriggerProperties: TriggerProperties,
    TimerTrigger: TimerTrigger,
    SourceTrigger: SourceTrigger,
    SourceProperties: SourceProperties,
    AuthInfo: AuthInfo,
    BaseImageTrigger: BaseImageTrigger,
    Credentials: Credentials,
    SourceRegistryCredentials: SourceRegistryCredentials,
    CustomRegistryCredentials: CustomRegistryCredentials,
    SecretObject: SecretObject,
    TaskUpdateParameters: TaskUpdateParameters,
    PlatformUpdateParameters: PlatformUpdateParameters,
    TaskStepUpdateParameters: TaskStepUpdateParameters,
    TriggerUpdateParameters: TriggerUpdateParameters,
    TimerTriggerUpdateParameters: TimerTriggerUpdateParameters,
    SourceTriggerUpdateParameters: SourceTriggerUpdateParameters,
    SourceUpdateParameters: SourceUpdateParameters,
    AuthInfoUpdateParameters: AuthInfoUpdateParameters,
    BaseImageTriggerUpdateParameters: BaseImageTriggerUpdateParameters,
    StorageAccountProperties: StorageAccountProperties,
    PackageType: PackageType,
    ActiveDirectoryObject: ActiveDirectoryObject,
    RunFilter: RunFilter,
    Argument: Argument,
    SetValue: SetValue,
    OverrideTaskStepProperties: OverrideTaskStepProperties,
    PrivateEndpointConnection: PrivateEndpointConnection,
    ScopeMap: ScopeMap,
    Token: Token,
    Run: Run,
    TaskRun: TaskRun,
    Registry: Registry,
    Replication: Replication,
    Webhook: Webhook,
    AgentPool: AgentPool,
    Task: Task,
    Event: Event,
    DockerBuildRequest: DockerBuildRequest,
    FileTaskRunRequest: FileTaskRunRequest,
    TaskRunRequest: TaskRunRequest,
    EncodedTaskRunRequest: EncodedTaskRunRequest,
    DockerBuildStep: DockerBuildStep,
    FileTaskStep: FileTaskStep,
    EncodedTaskStep: EncodedTaskStep,
    DockerBuildStepUpdateParameters: DockerBuildStepUpdateParameters,
    FileTaskStepUpdateParameters: FileTaskStepUpdateParameters,
    EncodedTaskStepUpdateParameters: EncodedTaskStepUpdateParameters,
    RegistriesImportImageHeaders: RegistriesImportImageHeaders,
    RegistriesCreateHeaders: RegistriesCreateHeaders,
    RegistriesDeleteHeaders: RegistriesDeleteHeaders,
    RegistriesUpdateHeaders: RegistriesUpdateHeaders,
    RegistriesGenerateCredentialsHeaders: RegistriesGenerateCredentialsHeaders,
    PrivateEndpointConnectionsCreateOrUpdateHeaders: PrivateEndpointConnectionsCreateOrUpdateHeaders,
    PrivateEndpointConnectionsDeleteHeaders: PrivateEndpointConnectionsDeleteHeaders,
    ReplicationsCreateHeaders: ReplicationsCreateHeaders,
    ReplicationsDeleteHeaders: ReplicationsDeleteHeaders,
    ReplicationsUpdateHeaders: ReplicationsUpdateHeaders,
    ScopeMapsCreateHeaders: ScopeMapsCreateHeaders,
    ScopeMapsDeleteHeaders: ScopeMapsDeleteHeaders,
    ScopeMapsUpdateHeaders: ScopeMapsUpdateHeaders,
    TokensCreateHeaders: TokensCreateHeaders,
    TokensDeleteHeaders: TokensDeleteHeaders,
    TokensUpdateHeaders: TokensUpdateHeaders,
    WebhooksCreateHeaders: WebhooksCreateHeaders,
    WebhooksDeleteHeaders: WebhooksDeleteHeaders,
    WebhooksUpdateHeaders: WebhooksUpdateHeaders,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: ImportImageParameters
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-12-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const registryName = {
    parameterPath: "registryName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "registryName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const registryNameCheckRequest = {
    parameterPath: "registryNameCheckRequest",
    mapper: RegistryNameCheckRequest
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const registry = {
    parameterPath: "registry",
    mapper: Registry
};
const registryUpdateParameters = {
    parameterPath: "registryUpdateParameters",
    mapper: RegistryUpdateParameters
};
const groupName = {
    parameterPath: "groupName",
    mapper: {
        serializedName: "groupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const regenerateCredentialParameters = {
    parameterPath: "regenerateCredentialParameters",
    mapper: RegenerateCredentialParameters
};
const generateCredentialsParameters = {
    parameterPath: "generateCredentialsParameters",
    mapper: GenerateCredentialsParameters
};
const runRequest = {
    parameterPath: "runRequest",
    mapper: RunRequest
};
const resourceGroupName1 = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-06-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnection
};
const replicationName = {
    parameterPath: "replicationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "replicationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const replication = {
    parameterPath: "replication",
    mapper: Replication
};
const replicationUpdateParameters = {
    parameterPath: "replicationUpdateParameters",
    mapper: ReplicationUpdateParameters
};
const scopeMapName = {
    parameterPath: "scopeMapName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-_]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "scopeMapName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const scopeMapCreateParameters = {
    parameterPath: "scopeMapCreateParameters",
    mapper: ScopeMap
};
const scopeMapUpdateParameters = {
    parameterPath: "scopeMapUpdateParameters",
    mapper: ScopeMapUpdateParameters
};
const tokenName = {
    parameterPath: "tokenName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "tokenName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const tokenCreateParameters = {
    parameterPath: "tokenCreateParameters",
    mapper: Token
};
const tokenUpdateParameters = {
    parameterPath: "tokenUpdateParameters",
    mapper: TokenUpdateParameters
};
const webhookName = {
    parameterPath: "webhookName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "webhookName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const webhookCreateParameters = {
    parameterPath: "webhookCreateParameters",
    mapper: WebhookCreateParameters
};
const webhookUpdateParameters = {
    parameterPath: "webhookUpdateParameters",
    mapper: WebhookUpdateParameters
};
const agentPoolName = {
    parameterPath: "agentPoolName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]*$"),
            MaxLength: 20,
            MinLength: 3
        },
        serializedName: "agentPoolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const agentPool = {
    parameterPath: "agentPool",
    mapper: AgentPool
};
const updateParameters = {
    parameterPath: "updateParameters",
    mapper: AgentPoolUpdateParameters
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const runId = {
    parameterPath: "runId",
    mapper: {
        serializedName: "runId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const runUpdateParameters = {
    parameterPath: "runUpdateParameters",
    mapper: RunUpdateParameters
};
const taskRunName = {
    parameterPath: "taskRunName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "taskRunName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const taskRun = {
    parameterPath: "taskRun",
    mapper: TaskRun
};
const updateParameters1 = {
    parameterPath: "updateParameters",
    mapper: TaskRunUpdateParameters
};
const taskName = {
    parameterPath: "taskName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-_]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "taskName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const taskCreateParameters = {
    parameterPath: "taskCreateParameters",
    mapper: Task
};
const taskUpdateParameters = {
    parameterPath: "taskUpdateParameters",
    mapper: TaskUpdateParameters
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Registries operations. */
class RegistriesImpl {
    /**
     * Initialize a new instance of the class Registries class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the container registries under the specified subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the container registries under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the private link resources for a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    listPrivateLinkResources(resourceGroupName, registryName, options) {
        const iter = this.listPrivateLinkResourcesPagingAll(resourceGroupName, registryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPrivateLinkResourcesPagingPage(resourceGroupName, registryName, options, settings);
            }
        };
    }
    listPrivateLinkResourcesPagingPage(resourceGroupName, registryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPrivateLinkResourcesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listPrivateLinkResources(resourceGroupName, registryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listPrivateLinkResourcesNext(resourceGroupName, registryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPrivateLinkResourcesPagingAll(resourceGroupName, registryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPrivateLinkResourcesPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPrivateLinkResourcesPagingPage(resourceGroupName, registryName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Copies an image to this container registry from the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param parameters The parameters specifying the image to copy and the source container registry.
     * @param options The options parameters.
     */
    beginImportImage(resourceGroupName, registryName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, parameters, options },
                spec: importImageOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Copies an image to this container registry from the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param parameters The parameters specifying the image to copy and the source container registry.
     * @param options The options parameters.
     */
    beginImportImageAndWait(resourceGroupName, registryName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginImportImage(resourceGroupName, registryName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Checks whether the container registry name is available for use. The name must contain only
     * alphanumeric characters, be globally unique, and between 5 and 50 characters in length.
     * @param registryNameCheckRequest The object containing information for the availability request.
     * @param options The options parameters.
     */
    checkNameAvailability(registryNameCheckRequest, options) {
        return this.client.sendOperationRequest({ registryNameCheckRequest, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Lists all the container registries under the specified subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$a);
    }
    /**
     * Lists all the container registries under the specified resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Gets the properties of the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    get(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, getOperationSpec$9);
    }
    /**
     * Creates a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param registry The parameters for creating a container registry.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, registryName, registry, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, registry, options },
                spec: createOperationSpec$7
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param registry The parameters for creating a container registry.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, registryName, registry, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, registryName, registry, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, registryName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, options },
                spec: deleteOperationSpec$8
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, registryName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, registryName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param registryUpdateParameters The parameters for updating a container registry.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, registryName, registryUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    registryUpdateParameters,
                    options
                },
                spec: updateOperationSpec$8
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param registryUpdateParameters The parameters for updating a container registry.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, registryName, registryUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, registryName, registryUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the quota usages for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    listUsages(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listUsagesOperationSpec);
    }
    /**
     * Lists the private link resources for a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    _listPrivateLinkResources(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listPrivateLinkResourcesOperationSpec);
    }
    /**
     * Gets a private link resource by a specified group name for a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param groupName The name of the private link resource.
     * @param options The options parameters.
     */
    getPrivateLinkResource(resourceGroupName, registryName, groupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, groupName, options }, getPrivateLinkResourceOperationSpec);
    }
    /**
     * Lists the login credentials for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    listCredentials(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listCredentialsOperationSpec);
    }
    /**
     * Regenerates one of the login credentials for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param regenerateCredentialParameters Specifies name of the password which should be regenerated --
     *                                       password or password2.
     * @param options The options parameters.
     */
    regenerateCredential(resourceGroupName, registryName, regenerateCredentialParameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            registryName,
            regenerateCredentialParameters,
            options
        }, regenerateCredentialOperationSpec);
    }
    /**
     * Generate keys for a token of a specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param generateCredentialsParameters The parameters for generating credentials.
     * @param options The options parameters.
     */
    beginGenerateCredentials(resourceGroupName, registryName, generateCredentialsParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    generateCredentialsParameters,
                    options
                },
                spec: generateCredentialsOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Generate keys for a token of a specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param generateCredentialsParameters The parameters for generating credentials.
     * @param options The options parameters.
     */
    beginGenerateCredentialsAndWait(resourceGroupName, registryName, generateCredentialsParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginGenerateCredentials(resourceGroupName, registryName, generateCredentialsParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Schedules a new run based on the request parameters and add it to the run queue.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runRequest The parameters of a run that needs to scheduled.
     * @param options The options parameters.
     */
    beginScheduleRun(resourceGroupName, registryName, runRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, runRequest, options },
                spec: scheduleRunOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Schedules a new run based on the request parameters and add it to the run queue.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runRequest The parameters of a run that needs to scheduled.
     * @param options The options parameters.
     */
    beginScheduleRunAndWait(resourceGroupName, registryName, runRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginScheduleRun(resourceGroupName, registryName, runRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Get the upload location for the user to be able to upload the source.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    getBuildSourceUploadUrl(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, getBuildSourceUploadUrlOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$a);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListPrivateLinkResourcesNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the ListPrivateLinkResources
     *                 method.
     * @param options The options parameters.
     */
    _listPrivateLinkResourcesNext(resourceGroupName, registryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, nextLink, options }, listPrivateLinkResourcesNextOperationSpec);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const importImageOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage",
    httpMethod: "POST",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [contentType],
    mediaType: "json",
    serializer: serializer$a
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RegistryNameStatus
        }
    },
    requestBody: registryNameCheckRequest,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$a
};
const listOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/registries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RegistryListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RegistryListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Registry
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const createOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Registry
        },
        201: {
            bodyMapper: Registry
        },
        202: {
            bodyMapper: Registry
        },
        204: {
            bodyMapper: Registry
        }
    },
    requestBody: registry,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$a
};
const deleteOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    serializer: serializer$a
};
const updateOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Registry
        },
        201: {
            bodyMapper: Registry
        },
        202: {
            bodyMapper: Registry
        },
        204: {
            bodyMapper: Registry
        }
    },
    requestBody: registryUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$a
};
const listUsagesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RegistryUsageListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listPrivateLinkResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const getPrivateLinkResourceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources/{groupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResource
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        groupName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listCredentialsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RegistryListCredentialsResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const regenerateCredentialOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RegistryListCredentialsResult
        }
    },
    requestBody: regenerateCredentialParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$a
};
const generateCredentialsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/generateCredentials",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: GenerateCredentialsResult
        },
        201: {
            bodyMapper: GenerateCredentialsResult
        },
        202: {
            bodyMapper: GenerateCredentialsResult
        },
        204: {
            bodyMapper: GenerateCredentialsResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: generateCredentialsParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$a
};
const scheduleRunOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Run
        },
        201: {
            bodyMapper: Run
        },
        202: {
            bodyMapper: Run
        },
        204: {
            bodyMapper: Run
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: runRequest,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$a
};
const getBuildSourceUploadUrlOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SourceUploadDefinition
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listNextOperationSpec$a = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RegistryListResult
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RegistryListResult
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listPrivateLinkResourcesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available Azure Container Registry REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available Azure Container Registry REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$9);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$9 = {
    path: "/providers/Microsoft.ContainerRegistry/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$9
};
const listNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all private endpoint connections in a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName, registryName, options) {
        const iter = this.listPagingAll(resourceGroupName, registryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, registryName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, registryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, registryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, registryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, registryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, registryName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all private endpoint connections in a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    _list(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listOperationSpec$8);
    }
    /**
     * Get the specified private endpoint connection associated with the container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(resourceGroupName, registryName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            registryName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec$8);
    }
    /**
     * Update the state of specified private endpoint connection associated with the container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param privateEndpointConnection The parameters for creating a private endpoint connection.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, registryName, privateEndpointConnectionName, privateEndpointConnection, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    privateEndpointConnectionName,
                    privateEndpointConnection,
                    options
                },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update the state of specified private endpoint connection associated with the container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param privateEndpointConnection The parameters for creating a private endpoint connection.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, registryName, privateEndpointConnectionName, privateEndpointConnection, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, registryName, privateEndpointConnectionName, privateEndpointConnection, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes the specified private endpoint connection associated with the container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, registryName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    privateEndpointConnectionName,
                    options
                },
                spec: deleteOperationSpec$7
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes the specified private endpoint connection associated with the container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, registryName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, registryName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, registryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, nextLink, options }, listNextOperationSpec$8);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        202: {
            bodyMapper: PrivateEndpointConnection
        },
        204: {
            bodyMapper: PrivateEndpointConnection
        }
    },
    requestBody: privateEndpointConnection,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        privateEndpointConnectionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$8
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        privateEndpointConnectionName
    ],
    serializer: serializer$8
};
const listNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Replications operations. */
class ReplicationsImpl {
    /**
     * Initialize a new instance of the class Replications class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the replications for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName, registryName, options) {
        const iter = this.listPagingAll(resourceGroupName, registryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, registryName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, registryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, registryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, registryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, registryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, registryName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the replications for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    _list(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listOperationSpec$7);
    }
    /**
     * Gets the properties of the specified replication.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param options The options parameters.
     */
    get(resourceGroupName, registryName, replicationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, replicationName, options }, getOperationSpec$7);
    }
    /**
     * Creates a replication for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param replication The parameters for creating a replication.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, registryName, replicationName, replication, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    replicationName,
                    replication,
                    options
                },
                spec: createOperationSpec$6
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a replication for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param replication The parameters for creating a replication.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, registryName, replicationName, replication, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, registryName, replicationName, replication, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a replication from a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, registryName, replicationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, replicationName, options },
                spec: deleteOperationSpec$6
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a replication from a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, registryName, replicationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, registryName, replicationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a replication for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param replicationUpdateParameters The parameters for updating a replication.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, registryName, replicationName, replicationUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    replicationName,
                    replicationUpdateParameters,
                    options
                },
                spec: updateOperationSpec$7
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a replication for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param replicationUpdateParameters The parameters for updating a replication.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, registryName, replicationName, replicationUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, registryName, replicationName, replicationUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, registryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, nextLink, options }, listNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Replication
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        replicationName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const createOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Replication
        },
        201: {
            bodyMapper: Replication
        },
        202: {
            bodyMapper: Replication
        },
        204: {
            bodyMapper: Replication
        }
    },
    requestBody: replication,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        replicationName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$7
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        replicationName
    ],
    serializer: serializer$7
};
const updateOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Replication
        },
        201: {
            bodyMapper: Replication
        },
        202: {
            bodyMapper: Replication
        },
        204: {
            bodyMapper: Replication
        }
    },
    requestBody: replicationUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        replicationName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$7
};
const listNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationListResult
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ScopeMaps operations. */
class ScopeMapsImpl {
    /**
     * Initialize a new instance of the class ScopeMaps class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the scope maps for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName, registryName, options) {
        const iter = this.listPagingAll(resourceGroupName, registryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, registryName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, registryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, registryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, registryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, registryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, registryName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the scope maps for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    _list(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listOperationSpec$6);
    }
    /**
     * Gets the properties of the specified scope map.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param scopeMapName The name of the scope map.
     * @param options The options parameters.
     */
    get(resourceGroupName, registryName, scopeMapName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, scopeMapName, options }, getOperationSpec$6);
    }
    /**
     * Creates a scope map for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param scopeMapName The name of the scope map.
     * @param scopeMapCreateParameters The parameters for creating a scope map.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, registryName, scopeMapName, scopeMapCreateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    scopeMapName,
                    scopeMapCreateParameters,
                    options
                },
                spec: createOperationSpec$5
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a scope map for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param scopeMapName The name of the scope map.
     * @param scopeMapCreateParameters The parameters for creating a scope map.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, registryName, scopeMapName, scopeMapCreateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, registryName, scopeMapName, scopeMapCreateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a scope map from a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param scopeMapName The name of the scope map.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, registryName, scopeMapName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, scopeMapName, options },
                spec: deleteOperationSpec$5
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a scope map from a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param scopeMapName The name of the scope map.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, registryName, scopeMapName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, registryName, scopeMapName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a scope map with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param scopeMapName The name of the scope map.
     * @param scopeMapUpdateParameters The parameters for updating a scope map.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, registryName, scopeMapName, scopeMapUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    scopeMapName,
                    scopeMapUpdateParameters,
                    options
                },
                spec: updateOperationSpec$6
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a scope map with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param scopeMapName The name of the scope map.
     * @param scopeMapUpdateParameters The parameters for updating a scope map.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, registryName, scopeMapName, scopeMapUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, registryName, scopeMapName, scopeMapUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, registryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, nextLink, options }, listNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScopeMapListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScopeMap
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        scopeMapName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ScopeMap
        },
        201: {
            bodyMapper: ScopeMap
        },
        202: {
            bodyMapper: ScopeMap
        },
        204: {
            bodyMapper: ScopeMap
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: scopeMapCreateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        scopeMapName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$6
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        scopeMapName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const updateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ScopeMap
        },
        201: {
            bodyMapper: ScopeMap
        },
        202: {
            bodyMapper: ScopeMap
        },
        204: {
            bodyMapper: ScopeMap
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: scopeMapUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        scopeMapName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$6
};
const listNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScopeMapListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Tokens operations. */
class TokensImpl {
    /**
     * Initialize a new instance of the class Tokens class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the tokens for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName, registryName, options) {
        const iter = this.listPagingAll(resourceGroupName, registryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, registryName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, registryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, registryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, registryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, registryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, registryName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the tokens for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    _list(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listOperationSpec$5);
    }
    /**
     * Gets the properties of the specified token.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param tokenName The name of the token.
     * @param options The options parameters.
     */
    get(resourceGroupName, registryName, tokenName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, tokenName, options }, getOperationSpec$5);
    }
    /**
     * Creates a token for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param tokenName The name of the token.
     * @param tokenCreateParameters The parameters for creating a token.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, registryName, tokenName, tokenCreateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    tokenName,
                    tokenCreateParameters,
                    options
                },
                spec: createOperationSpec$4
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a token for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param tokenName The name of the token.
     * @param tokenCreateParameters The parameters for creating a token.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, registryName, tokenName, tokenCreateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, registryName, tokenName, tokenCreateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a token from a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param tokenName The name of the token.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, registryName, tokenName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, tokenName, options },
                spec: deleteOperationSpec$4
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a token from a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param tokenName The name of the token.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, registryName, tokenName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, registryName, tokenName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a token with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param tokenName The name of the token.
     * @param tokenUpdateParameters The parameters for updating a token.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, registryName, tokenName, tokenUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    tokenName,
                    tokenUpdateParameters,
                    options
                },
                spec: updateOperationSpec$5
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a token with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param tokenName The name of the token.
     * @param tokenUpdateParameters The parameters for updating a token.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, registryName, tokenName, tokenUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, registryName, tokenName, tokenUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, registryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, nextLink, options }, listNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TokenListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Token
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        tokenName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Token
        },
        201: {
            bodyMapper: Token
        },
        202: {
            bodyMapper: Token
        },
        204: {
            bodyMapper: Token
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: tokenCreateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        tokenName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        tokenName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const updateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Token
        },
        201: {
            bodyMapper: Token
        },
        202: {
            bodyMapper: Token
        },
        204: {
            bodyMapper: Token
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: tokenUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        tokenName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$5
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TokenListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Webhooks operations. */
class WebhooksImpl {
    /**
     * Initialize a new instance of the class Webhooks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the webhooks for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName, registryName, options) {
        const iter = this.listPagingAll(resourceGroupName, registryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, registryName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, registryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, registryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, registryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, registryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, registryName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists recent events for the specified webhook.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    listEvents(resourceGroupName, registryName, webhookName, options) {
        const iter = this.listEventsPagingAll(resourceGroupName, registryName, webhookName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listEventsPagingPage(resourceGroupName, registryName, webhookName, options, settings);
            }
        };
    }
    listEventsPagingPage(resourceGroupName, registryName, webhookName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listEventsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listEvents(resourceGroupName, registryName, webhookName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listEventsNext(resourceGroupName, registryName, webhookName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listEventsPagingAll(resourceGroupName, registryName, webhookName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listEventsPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listEventsPagingPage(resourceGroupName, registryName, webhookName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists all the webhooks for the specified container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    _list(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listOperationSpec$4);
    }
    /**
     * Gets the properties of the specified webhook.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    get(resourceGroupName, registryName, webhookName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, webhookName, options }, getOperationSpec$4);
    }
    /**
     * Creates a webhook for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param webhookCreateParameters The parameters for creating a webhook.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, registryName, webhookName, webhookCreateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    webhookName,
                    webhookCreateParameters,
                    options
                },
                spec: createOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a webhook for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param webhookCreateParameters The parameters for creating a webhook.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, registryName, webhookName, webhookCreateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, registryName, webhookName, webhookCreateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a webhook from a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, registryName, webhookName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, webhookName, options },
                spec: deleteOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a webhook from a container registry.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, registryName, webhookName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, registryName, webhookName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a webhook with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param webhookUpdateParameters The parameters for updating a webhook.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, registryName, webhookName, webhookUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    webhookName,
                    webhookUpdateParameters,
                    options
                },
                spec: updateOperationSpec$4
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a webhook with the specified parameters.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param webhookUpdateParameters The parameters for updating a webhook.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, registryName, webhookName, webhookUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, registryName, webhookName, webhookUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Triggers a ping event to be sent to the webhook.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    ping(resourceGroupName, registryName, webhookName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, webhookName, options }, pingOperationSpec);
    }
    /**
     * Lists recent events for the specified webhook.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    _listEvents(resourceGroupName, registryName, webhookName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, webhookName, options }, listEventsOperationSpec);
    }
    /**
     * Gets the configuration of service URI and custom headers for the webhook.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    getCallbackConfig(resourceGroupName, registryName, webhookName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, webhookName, options }, getCallbackConfigOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, registryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, nextLink, options }, listNextOperationSpec$4);
    }
    /**
     * ListEventsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param nextLink The nextLink from the previous successful call to the ListEvents method.
     * @param options The options parameters.
     */
    _listEventsNext(resourceGroupName, registryName, webhookName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, webhookName, nextLink, options }, listEventsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WebhookListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Webhook
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        webhookName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Webhook
        },
        201: {
            bodyMapper: Webhook
        },
        202: {
            bodyMapper: Webhook
        },
        204: {
            bodyMapper: Webhook
        }
    },
    requestBody: webhookCreateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        webhookName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        webhookName
    ],
    serializer: serializer$4
};
const updateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Webhook
        },
        201: {
            bodyMapper: Webhook
        },
        202: {
            bodyMapper: Webhook
        },
        204: {
            bodyMapper: Webhook
        }
    },
    requestBody: webhookUpdateParameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        webhookName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};
const pingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/ping",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EventInfo
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        webhookName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listEventsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/listEvents",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: EventListResult
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        webhookName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getCallbackConfigOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/getCallbackConfig",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CallbackConfig
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        webhookName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WebhookListResult
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listEventsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventListResult
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        registryName,
        nextLink,
        webhookName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing AgentPools operations. */
class AgentPoolsImpl {
    /**
     * Initialize a new instance of the class AgentPools class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the agent pools for a specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName, registryName, options) {
        const iter = this.listPagingAll(resourceGroupName, registryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, registryName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, registryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, registryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, registryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, registryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, registryName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the detailed information for a given agent pool.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param options The options parameters.
     */
    get(resourceGroupName, registryName, agentPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, agentPoolName, options }, getOperationSpec$3);
    }
    /**
     * Creates an agent pool for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param agentPool The parameters of an agent pool that needs to scheduled.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, registryName, agentPoolName, agentPool, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    agentPoolName,
                    agentPool,
                    options
                },
                spec: createOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates an agent pool for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param agentPool The parameters of an agent pool that needs to scheduled.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, registryName, agentPoolName, agentPool, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, registryName, agentPoolName, agentPool, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a specified agent pool resource.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, registryName, agentPoolName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, agentPoolName, options },
                spec: deleteOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a specified agent pool resource.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, registryName, agentPoolName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, registryName, agentPoolName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates an agent pool with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param updateParameters The parameters for updating an agent pool.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, registryName, agentPoolName, updateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    agentPoolName,
                    updateParameters,
                    options
                },
                spec: updateOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an agent pool with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param updateParameters The parameters for updating an agent pool.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, registryName, agentPoolName, updateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, registryName, agentPoolName, updateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists all the agent pools for a specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    _list(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listOperationSpec$3);
    }
    /**
     * Gets the count of queued runs for a given agent pool.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param options The options parameters.
     */
    getQueueStatus(resourceGroupName, registryName, agentPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, agentPoolName, options }, getQueueStatusOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, registryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AgentPool
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        agentPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: AgentPool
        },
        201: {
            bodyMapper: AgentPool
        },
        202: {
            bodyMapper: AgentPool
        },
        204: {
            bodyMapper: AgentPool
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: agentPool,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        agentPoolName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        agentPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const updateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: AgentPool
        },
        201: {
            bodyMapper: AgentPool
        },
        202: {
            bodyMapper: AgentPool
        },
        204: {
            bodyMapper: AgentPool
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: updateParameters,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        agentPoolName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AgentPoolListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getQueueStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}/listQueueStatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AgentPoolQueueStatus
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        agentPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AgentPoolListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Runs operations. */
class RunsImpl {
    /**
     * Initialize a new instance of the class Runs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the runs for a registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName, registryName, options) {
        const iter = this.listPagingAll(resourceGroupName, registryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, registryName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, registryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, registryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, registryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, registryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, registryName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all the runs for a registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    _list(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listOperationSpec$2);
    }
    /**
     * Gets the detailed information for a given run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    get(resourceGroupName, registryName, runId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, runId, options }, getOperationSpec$2);
    }
    /**
     * Patch the run properties.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param runUpdateParameters The run update properties.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, registryName, runId, runUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    runId,
                    runUpdateParameters,
                    options
                },
                spec: updateOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Patch the run properties.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param runUpdateParameters The run update properties.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, registryName, runId, runUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, registryName, runId, runUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a link to download the run logs.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    getLogSasUrl(resourceGroupName, registryName, runId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, runId, options }, getLogSasUrlOperationSpec);
    }
    /**
     * Cancel an existing run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    beginCancel(resourceGroupName, registryName, runId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, runId, options },
                spec: cancelOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Cancel an existing run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceGroupName, registryName, runId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCancel(resourceGroupName, registryName, runId, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, registryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RunListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1, filter, top],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Run
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        runId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Run
        },
        201: {
            bodyMapper: Run
        },
        202: {
            bodyMapper: Run
        },
        204: {
            bodyMapper: Run
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: runUpdateParameters,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        runId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$2
};
const getLogSasUrlOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/listLogSasUrl",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RunGetLogResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        runId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const cancelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/cancel",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        runId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RunListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing TaskRuns operations. */
class TaskRunsImpl {
    /**
     * Initialize a new instance of the class TaskRuns class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the task runs for a specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName, registryName, options) {
        const iter = this.listPagingAll(resourceGroupName, registryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, registryName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, registryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, registryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, registryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, registryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, registryName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the detailed information for a given task run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param options The options parameters.
     */
    get(resourceGroupName, registryName, taskRunName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, taskRunName, options }, getOperationSpec$1);
    }
    /**
     * Creates a task run for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param taskRun The parameters of a run that needs to scheduled.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, registryName, taskRunName, taskRun, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, taskRunName, taskRun, options },
                spec: createOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a task run for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param taskRun The parameters of a run that needs to scheduled.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, registryName, taskRunName, taskRun, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, registryName, taskRunName, taskRun, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a specified task run resource.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, registryName, taskRunName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, taskRunName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a specified task run resource.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, registryName, taskRunName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, registryName, taskRunName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a task run with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param updateParameters The parameters for updating a task run.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, registryName, taskRunName, updateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    taskRunName,
                    updateParameters,
                    options
                },
                spec: updateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a task run with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param updateParameters The parameters for updating a task run.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, registryName, taskRunName, updateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, registryName, taskRunName, updateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the detailed information for a given task run that includes all secrets.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param options The options parameters.
     */
    getDetails(resourceGroupName, registryName, taskRunName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, taskRunName, options }, getDetailsOperationSpec$1);
    }
    /**
     * Lists all the task runs for a specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    _list(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, registryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TaskRun
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        taskRunName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: TaskRun
        },
        201: {
            bodyMapper: TaskRun
        },
        202: {
            bodyMapper: TaskRun
        },
        204: {
            bodyMapper: TaskRun
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: taskRun,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        taskRunName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        taskRunName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: TaskRun
        },
        201: {
            bodyMapper: TaskRun
        },
        202: {
            bodyMapper: TaskRun
        },
        204: {
            bodyMapper: TaskRun
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: updateParameters1,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        taskRunName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$1
};
const getDetailsOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}/listDetails",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TaskRun
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        taskRunName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TaskRunListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TaskRunListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Tasks operations. */
class TasksImpl {
    /**
     * Initialize a new instance of the class Tasks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the tasks for a specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName, registryName, options) {
        const iter = this.listPagingAll(resourceGroupName, registryName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, registryName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, registryName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, registryName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, registryName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, registryName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, registryName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the tasks for a specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    _list(resourceGroupName, registryName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, options }, listOperationSpec);
    }
    /**
     * Get the properties of a specified task.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param options The options parameters.
     */
    get(resourceGroupName, registryName, taskName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, taskName, options }, getOperationSpec);
    }
    /**
     * Creates a task for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param taskCreateParameters The parameters for creating a task.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, registryName, taskName, taskCreateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    taskName,
                    taskCreateParameters,
                    options
                },
                spec: createOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a task for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param taskCreateParameters The parameters for creating a task.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, registryName, taskName, taskCreateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, registryName, taskName, taskCreateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a specified task.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, registryName, taskName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, registryName, taskName, options },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a specified task.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, registryName, taskName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, registryName, taskName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a task with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param taskUpdateParameters The parameters for updating a task.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, registryName, taskName, taskUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    registryName,
                    taskName,
                    taskUpdateParameters,
                    options
                },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a task with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param taskUpdateParameters The parameters for updating a task.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, registryName, taskName, taskUpdateParameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, registryName, taskName, taskUpdateParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns a task with extended information that includes all secrets.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param options The options parameters.
     */
    getDetails(resourceGroupName, registryName, taskName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, taskName, options }, getDetailsOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, registryName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, registryName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TaskListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Task
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        taskName
    ],
    headerParameters: [accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Task
        },
        201: {
            bodyMapper: Task
        },
        202: {
            bodyMapper: Task
        },
        204: {
            bodyMapper: Task
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: taskCreateParameters,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        taskName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        taskName
    ],
    headerParameters: [accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Task
        },
        201: {
            bodyMapper: Task
        },
        202: {
            bodyMapper: Task
        },
        204: {
            bodyMapper: Task
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: taskUpdateParameters,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        taskName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};
const getDetailsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}/listDetails",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Task
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        taskName
    ],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TaskListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        registryName,
        resourceGroupName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class ContainerRegistryManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the ContainerRegistryManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription. The value must be an UUID.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-containerregistry/10.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.registries = new RegistriesImpl(this);
        this.operations = new OperationsImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.replications = new ReplicationsImpl(this);
        this.scopeMaps = new ScopeMapsImpl(this);
        this.tokens = new TokensImpl(this);
        this.webhooks = new WebhooksImpl(this);
        this.agentPools = new AgentPoolsImpl(this);
        this.runs = new RunsImpl(this);
        this.taskRuns = new TaskRunsImpl(this);
        this.tasks = new TasksImpl(this);
    }
}

exports.ContainerRegistryManagementClient = ContainerRegistryManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
