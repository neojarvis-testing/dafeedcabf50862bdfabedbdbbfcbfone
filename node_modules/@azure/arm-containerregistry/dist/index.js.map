{"version":3,"file":"index.js","sources":["../src/pagingHelper.ts","../src/models/index.ts","../src/models/mappers.ts","../src/models/parameters.ts","../src/lroImpl.ts","../src/operations/registries.ts","../src/operations/operations.ts","../src/operations/privateEndpointConnections.ts","../src/operations/replications.ts","../src/operations/scopeMaps.ts","../src/operations/tokens.ts","../src/operations/webhooks.ts","../src/operations/agentPools.ts","../src/operations/runs.ts","../src/operations/taskRuns.ts","../src/operations/tasks.ts","../src/containerRegistryManagementClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nexport interface PageInfo {\n  continuationToken?: string;\n}\n\nconst pageMap = new WeakMap<object, PageInfo>();\n\n/**\n * Given the last `.value` produced by the `byPage` iterator,\n * returns a continuation token that can be used to begin paging from\n * that point later.\n * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.\n * @returns The continuation token that can be passed into byPage() during future calls.\n */\nexport function getContinuationToken(page: unknown): string | undefined {\n  if (typeof page !== \"object\" || page === null) {\n    return undefined;\n  }\n  return pageMap.get(page)?.continuationToken;\n}\n\nexport function setContinuationToken(\n  page: unknown,\n  continuationToken: string | undefined\n): void {\n  if (typeof page !== \"object\" || page === null || !continuationToken) {\n    return;\n  }\n  const pageInfo = pageMap.get(page) ?? {};\n  pageInfo.continuationToken = continuationToken;\n  pageMap.set(page, pageInfo);\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport type RunRequestUnion =\n  | RunRequest\n  | DockerBuildRequest\n  | FileTaskRunRequest\n  | TaskRunRequest\n  | EncodedTaskRunRequest;\nexport type TaskStepPropertiesUnion =\n  | TaskStepProperties\n  | DockerBuildStep\n  | FileTaskStep\n  | EncodedTaskStep;\nexport type TaskStepUpdateParametersUnion =\n  | TaskStepUpdateParameters\n  | DockerBuildStepUpdateParameters\n  | FileTaskStepUpdateParameters\n  | EncodedTaskStepUpdateParameters;\n\nexport interface ImportImageParameters {\n  /** The source of the image. */\n  source: ImportSource;\n  /** List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also omitted). */\n  targetTags?: string[];\n  /** List of strings of repository names to do a manifest only copy. No tag will be created. */\n  untaggedTargetRepositories?: string[];\n  /** When Force, any existing target tags will be overwritten. When NoForce, any existing target tags will fail the operation before any copying begins. */\n  mode?: ImportMode;\n}\n\nexport interface ImportSource {\n  /** The resource identifier of the source Azure Container Registry. */\n  resourceId?: string;\n  /** The address of the source registry (e.g. 'mcr.microsoft.com'). */\n  registryUri?: string;\n  /** Credentials used when importing from a registry uri. */\n  credentials?: ImportSourceCredentials;\n  /**\n   * Repository name of the source image.\n   * Specify an image by repository ('hello-world'). This will use the 'latest' tag.\n   * Specify an image by tag ('hello-world:latest').\n   * Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').\n   */\n  sourceImage: string;\n}\n\nexport interface ImportSourceCredentials {\n  /** The username to authenticate with the source registry. */\n  username?: string;\n  /** The password used to authenticate with the source registry. */\n  password: string;\n}\n\n/** The result of a request to list container registry operations. */\nexport interface OperationListResult {\n  /** The list of container registry operations. Since this list may be incomplete, the nextLink field should be used to request the next list of operations. */\n  value?: OperationDefinition[];\n  /** The URI that can be used to request the next list of container registry operations. */\n  nextLink?: string;\n}\n\n/** The definition of a container registry operation. */\nexport interface OperationDefinition {\n  /** The origin information of the container registry operation. */\n  origin?: string;\n  /** Operation name: {provider}/{resource}/{operation}. */\n  name?: string;\n  /** The display information for the container registry operation. */\n  display?: OperationDisplayDefinition;\n  /**\n   * This property indicates if the operation is an action or a data action\n   * ref: https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#management-and-data-operations\n   */\n  isDataAction?: boolean;\n  /** The definition of Azure Monitoring service. */\n  serviceSpecification?: OperationServiceSpecificationDefinition;\n}\n\n/** The display information for a container registry operation. */\nexport interface OperationDisplayDefinition {\n  /** The resource provider name: Microsoft.ContainerRegistry. */\n  provider?: string;\n  /** The resource on which the operation is performed. */\n  resource?: string;\n  /** The operation that users can perform. */\n  operation?: string;\n  /** The description for the operation. */\n  description?: string;\n}\n\n/** The definition of Azure Monitoring list. */\nexport interface OperationServiceSpecificationDefinition {\n  /** A list of Azure Monitoring metrics definition. */\n  metricSpecifications?: OperationMetricSpecificationDefinition[];\n  /** A list of Azure Monitoring log definitions. */\n  logSpecifications?: OperationLogSpecificationDefinition[];\n}\n\n/** The definition of Azure Monitoring metric. */\nexport interface OperationMetricSpecificationDefinition {\n  /** Metric name. */\n  name?: string;\n  /** Metric display name. */\n  displayName?: string;\n  /** Metric description. */\n  displayDescription?: string;\n  /** Metric unit. */\n  unit?: string;\n  /** Metric aggregation type. */\n  aggregationType?: string;\n  /** Internal metric name. */\n  internalMetricName?: string;\n}\n\n/** The definition of Azure Monitoring log. */\nexport interface OperationLogSpecificationDefinition {\n  /** Log name. */\n  name?: string;\n  /** Log display name. */\n  displayName?: string;\n  /** Log blob duration. */\n  blobDuration?: string;\n}\n\n/** A request to check whether a container registry name is available. */\nexport interface RegistryNameCheckRequest {\n  /** The name of the container registry. */\n  name: string;\n  /** The resource type of the container registry. This field must be set to 'Microsoft.ContainerRegistry/registries'. */\n  type: \"Microsoft.ContainerRegistry/registries\";\n}\n\n/** The result of a request to check the availability of a container registry name. */\nexport interface RegistryNameStatus {\n  /** The value that indicates whether the name is available. */\n  nameAvailable?: boolean;\n  /** If any, the reason that the name is not available. */\n  reason?: string;\n  /** If any, the error message that provides more detail for the reason that the name is not available. */\n  message?: string;\n}\n\n/** The result of a request to list private endpoint connections for a container registry. */\nexport interface PrivateEndpointConnectionListResult {\n  /** The list of private endpoint connections. Since this list may be incomplete, the nextLink field should be used to request the next list of private endpoint connections. */\n  value?: PrivateEndpointConnection[];\n  /** The URI that can be used to request the next list of private endpoint connections. */\n  nextLink?: string;\n}\n\n/** The Private Endpoint resource. */\nexport interface PrivateEndpoint {\n  /** This is private endpoint resource created with Microsoft.Network resource provider. */\n  id?: string;\n}\n\n/** The state of a private link service connection. */\nexport interface PrivateLinkServiceConnectionState {\n  /** The private link service connection status. */\n  status?: ConnectionStatus;\n  /** The description for connection status. For example if connection is rejected it can indicate reason for rejection. */\n  description?: string;\n  /** A message indicating if changes on the service provider require any updates on the consumer. */\n  actionsRequired?: ActionsRequired;\n}\n\n/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags. */\nexport interface ProxyResource {\n  /**\n   * The resource ID.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /**\n   * Metadata pertaining to creation and last modification of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n}\n\n/** Metadata pertaining to creation and last modification of the resource. */\nexport interface SystemData {\n  /** The identity that created the resource. */\n  createdBy?: string;\n  /** The type of identity that created the resource. */\n  createdByType?: CreatedByType;\n  /** The timestamp of resource creation (UTC). */\n  createdAt?: Date;\n  /** The identity that last modified the resource. */\n  lastModifiedBy?: string;\n  /** The type of identity that last modified the resource. */\n  lastModifiedByType?: LastModifiedByType;\n  /** The timestamp of resource modification (UTC). */\n  lastModifiedAt?: Date;\n}\n\n/** The result of a request to list container registries. */\nexport interface RegistryListResult {\n  /** The list of container registries. Since this list may be incomplete, the nextLink field should be used to request the next list of container registries. */\n  value?: Registry[];\n  /** The URI that can be used to request the next list of container registries. */\n  nextLink?: string;\n}\n\n/** The SKU of a container registry. */\nexport interface Sku {\n  /** The SKU name of the container registry. Required for registry creation. */\n  name: SkuName;\n  /**\n   * The SKU tier based on the SKU name.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly tier?: SkuTier;\n}\n\n/** Managed identity for the resource. */\nexport interface IdentityProperties {\n  /** The principal ID of resource identity. */\n  principalId?: string;\n  /** The tenant ID of resource. */\n  tenantId?: string;\n  /** The identity type. */\n  type?: ResourceIdentityType;\n  /**\n   * The list of user identities associated with the resource. The user identity\n   * dictionary key references will be ARM resource ids in the form:\n   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/\n   *     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.\n   */\n  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };\n}\n\nexport interface UserIdentityProperties {\n  /** The principal id of user assigned identity. */\n  principalId?: string;\n  /** The client id of user assigned identity. */\n  clientId?: string;\n}\n\n/** The status of an Azure resource at the time the operation was called. */\nexport interface Status {\n  /**\n   * The short label for the status.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly displayStatus?: string;\n  /**\n   * The detailed message for the status, including alerts and error messages.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly message?: string;\n  /**\n   * The timestamp when the status was changed to the current value.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly timestamp?: Date;\n}\n\n/** The network rule set for a container registry. */\nexport interface NetworkRuleSet {\n  /** The default action of allow or deny when no other rules match. */\n  defaultAction: DefaultAction;\n  /** The IP ACL rules. */\n  ipRules?: IPRule[];\n}\n\n/** IP rule with specific IP or IP range in CIDR format. */\nexport interface IPRule {\n  /** The action of IP ACL rule. */\n  action?: Action;\n  /** Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed. */\n  iPAddressOrRange: string;\n}\n\n/** The policies for a container registry. */\nexport interface Policies {\n  /** The quarantine policy for a container registry. */\n  quarantinePolicy?: QuarantinePolicy;\n  /** The content trust policy for a container registry. */\n  trustPolicy?: TrustPolicy;\n  /** The retention policy for a container registry. */\n  retentionPolicy?: RetentionPolicy;\n  /** The export policy for a container registry. */\n  exportPolicy?: ExportPolicy;\n}\n\n/** The quarantine policy for a container registry. */\nexport interface QuarantinePolicy {\n  /** The value that indicates whether the policy is enabled or not. */\n  status?: PolicyStatus;\n}\n\n/** The content trust policy for a container registry. */\nexport interface TrustPolicy {\n  /** The type of trust policy. */\n  type?: TrustPolicyType;\n  /** The value that indicates whether the policy is enabled or not. */\n  status?: PolicyStatus;\n}\n\n/** The retention policy for a container registry. */\nexport interface RetentionPolicy {\n  /** The number of days to retain an untagged manifest after which it gets purged. */\n  days?: number;\n  /**\n   * The timestamp when the policy was last updated.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly lastUpdatedTime?: Date;\n  /** The value that indicates whether the policy is enabled or not. */\n  status?: PolicyStatus;\n}\n\n/** The export policy for a container registry. */\nexport interface ExportPolicy {\n  /** The value that indicates whether the policy is enabled or not. */\n  status?: ExportPolicyStatus;\n}\n\nexport interface EncryptionProperty {\n  /** Indicates whether or not the encryption is enabled for container registry. */\n  status?: EncryptionStatus;\n  /** Key vault properties. */\n  keyVaultProperties?: KeyVaultProperties;\n}\n\nexport interface KeyVaultProperties {\n  /** Key vault uri to access the encryption key. */\n  keyIdentifier?: string;\n  /**\n   * The fully qualified key identifier that includes the version of the key that is actually used for encryption.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly versionedKeyIdentifier?: string;\n  /** The client id of the identity which will be used to access key vault. */\n  identity?: string;\n  /**\n   * Auto key rotation status for a CMK enabled registry.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly keyRotationEnabled?: boolean;\n  /**\n   * Timestamp of the last successful key rotation.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly lastKeyRotationTimestamp?: Date;\n}\n\n/** An Azure resource. */\nexport interface Resource {\n  /**\n   * The resource ID.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly id?: string;\n  /**\n   * The name of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly name?: string;\n  /**\n   * The type of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The location of the resource. This cannot be changed after the resource is created. */\n  location: string;\n  /** The tags of the resource. */\n  tags?: { [propertyName: string]: string };\n  /**\n   * Metadata pertaining to creation and last modification of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly systemData?: SystemData;\n}\n\n/** The parameters for updating a container registry. */\nexport interface RegistryUpdateParameters {\n  /** The identity of the container registry. */\n  identity?: IdentityProperties;\n  /** The tags for the container registry. */\n  tags?: { [propertyName: string]: string };\n  /** The SKU of the container registry. */\n  sku?: Sku;\n  /** The value that indicates whether the admin user is enabled. */\n  adminUserEnabled?: boolean;\n  /** The network rule set for a container registry. */\n  networkRuleSet?: NetworkRuleSet;\n  /** The policies for a container registry. */\n  policies?: Policies;\n  /** The encryption settings of container registry. */\n  encryption?: EncryptionProperty;\n  /** Enable a single data endpoint per region for serving data. */\n  dataEndpointEnabled?: boolean;\n  /** Whether or not public network access is allowed for the container registry. */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** Whether to allow trusted Azure services to access a network restricted registry. */\n  networkRuleBypassOptions?: NetworkRuleBypassOptions;\n}\n\n/** The result of a request to get container registry quota usages. */\nexport interface RegistryUsageListResult {\n  /** The list of container registry quota usages. */\n  value?: RegistryUsage[];\n}\n\n/** The quota usage for a container registry. */\nexport interface RegistryUsage {\n  /** The name of the usage. */\n  name?: string;\n  /** The limit of the usage. */\n  limit?: number;\n  /** The current value of the usage. */\n  currentValue?: number;\n  /** The unit of measurement. */\n  unit?: RegistryUsageUnit;\n}\n\n/** The result of a request to list private link resources for a container registry. */\nexport interface PrivateLinkResourceListResult {\n  /** The list of private link resources. Since this list may be incomplete, the nextLink field should be used to request the next list of private link resources. */\n  value?: PrivateLinkResource[];\n  /** The URI that can be used to request the next list of private link resources. */\n  nextLink?: string;\n}\n\n/** A resource that supports private link capabilities. */\nexport interface PrivateLinkResource {\n  /**\n   * The resource type is private link resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly type?: string;\n  /** The resource ID. */\n  id?: string;\n  /** The name of the resource. */\n  name?: string;\n  /** The private link resource group id. */\n  groupId?: string;\n  /** The private link resource required member names. */\n  requiredMembers?: string[];\n  /** The private link resource Private link DNS zone name. */\n  requiredZoneNames?: string[];\n}\n\n/** An error response from the Azure Container Registry service. */\nexport interface ErrorResponse {\n  /** Azure container registry build API error body. */\n  error?: ErrorResponseBody;\n}\n\n/** An error response from the Azure Container Registry service. */\nexport interface ErrorResponseBody {\n  /** error code. */\n  code: string;\n  /** error message. */\n  message: string;\n  /** target of the particular error. */\n  target?: string;\n  /** an array of additional nested error response info objects, as described by this contract. */\n  details?: InnerErrorDescription[];\n}\n\n/** inner error. */\nexport interface InnerErrorDescription {\n  /** error code. */\n  code: string;\n  /** error message. */\n  message: string;\n  /** target of the particular error. */\n  target?: string;\n}\n\n/** The response from the ListCredentials operation. */\nexport interface RegistryListCredentialsResult {\n  /** The username for a container registry. */\n  username?: string;\n  /** The list of passwords for a container registry. */\n  passwords?: RegistryPassword[];\n}\n\n/** The login password for the container registry. */\nexport interface RegistryPassword {\n  /** The password name. */\n  name?: PasswordName;\n  /** The password value. */\n  value?: string;\n}\n\n/** The parameters used to regenerate the login credential. */\nexport interface RegenerateCredentialParameters {\n  /** Specifies name of the password which should be regenerated -- password or password2. */\n  name: PasswordName;\n}\n\n/** The result of a request to list replications for a container registry. */\nexport interface ReplicationListResult {\n  /** The list of replications. Since this list may be incomplete, the nextLink field should be used to request the next list of replications. */\n  value?: Replication[];\n  /** The URI that can be used to request the next list of replications. */\n  nextLink?: string;\n}\n\n/** The parameters for updating a replication. */\nexport interface ReplicationUpdateParameters {\n  /** The tags for the replication. */\n  tags?: { [propertyName: string]: string };\n  /** Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications. */\n  regionEndpointEnabled?: boolean;\n}\n\n/** The result of a request to list scope maps for a container registry. */\nexport interface ScopeMapListResult {\n  /** The list of scope maps. Since this list may be incomplete, the nextLink field should be used to request the next list of scope maps. */\n  value?: ScopeMap[];\n  /** The URI that can be used to request the next list of scope maps. */\n  nextLink?: string;\n}\n\n/** The properties for updating the scope map. */\nexport interface ScopeMapUpdateParameters {\n  /** The user friendly description of the scope map. */\n  description?: string;\n  /**\n   * The list of scope permissions for registry artifacts.\n   * E.g. repositories/repository-name/pull,\n   * repositories/repository-name/delete\n   */\n  actions?: string[];\n}\n\n/** The result of a request to list tokens for a container registry. */\nexport interface TokenListResult {\n  /** The list of tokens. Since this list may be incomplete, the nextLink field should be used to request the next list of tokens. */\n  value?: Token[];\n  /** The URI that can be used to request the next list of tokens. */\n  nextLink?: string;\n}\n\n/** The properties of the credentials that can be used for authenticating the token. */\nexport interface TokenCredentialsProperties {\n  certificates?: TokenCertificate[];\n  passwords?: TokenPassword[];\n}\n\n/** The properties of a certificate used for authenticating a token. */\nexport interface TokenCertificate {\n  name?: TokenCertificateName;\n  /** The expiry datetime of the certificate. */\n  expiry?: Date;\n  /** The thumbprint of the certificate. */\n  thumbprint?: string;\n  /** Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token. */\n  encodedPemCertificate?: string;\n}\n\n/** The password that will be used for authenticating the token of a container registry. */\nexport interface TokenPassword {\n  /** The creation datetime of the password. */\n  creationTime?: Date;\n  /** The expiry datetime of the password. */\n  expiry?: Date;\n  /** The password name \"password1\" or \"password2\" */\n  name?: TokenPasswordName;\n  /**\n   * The password value.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: string;\n}\n\n/** The parameters for updating a token. */\nexport interface TokenUpdateParameters {\n  /** The resource ID of the scope map to which the token will be associated with. */\n  scopeMapId?: string;\n  /** The status of the token example enabled or disabled. */\n  status?: TokenStatus;\n  /** The credentials that can be used for authenticating the token. */\n  credentials?: TokenCredentialsProperties;\n}\n\n/** The parameters used to generate credentials for a specified token or user of a container registry. */\nexport interface GenerateCredentialsParameters {\n  /** The resource ID of the token for which credentials have to be generated. */\n  tokenId?: string;\n  /** The expiry date of the generated credentials after which the credentials become invalid. */\n  expiry?: Date;\n  /** Specifies name of the password which should be regenerated if any -- password1 or password2. */\n  name?: TokenPasswordName;\n}\n\n/** The response from the GenerateCredentials operation. */\nexport interface GenerateCredentialsResult {\n  /** The username for a container registry. */\n  username?: string;\n  /** The list of passwords for a container registry. */\n  passwords?: TokenPassword[];\n}\n\n/** The result of a request to list webhooks for a container registry. */\nexport interface WebhookListResult {\n  /** The list of webhooks. Since this list may be incomplete, the nextLink field should be used to request the next list of webhooks. */\n  value?: Webhook[];\n  /** The URI that can be used to request the next list of webhooks. */\n  nextLink?: string;\n}\n\n/** The parameters for creating a webhook. */\nexport interface WebhookCreateParameters {\n  /** The tags for the webhook. */\n  tags?: { [propertyName: string]: string };\n  /** The location of the webhook. This cannot be changed after the resource is created. */\n  location: string;\n  /** The service URI for the webhook to post notifications. */\n  serviceUri?: string;\n  /** Custom headers that will be added to the webhook notifications. */\n  customHeaders?: { [propertyName: string]: string };\n  /** The status of the webhook at the time the operation was called. */\n  status?: WebhookStatus;\n  /** The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events. */\n  scope?: string;\n  /** The list of actions that trigger the webhook to post notifications. */\n  actions?: WebhookAction[];\n}\n\n/** The parameters for updating a webhook. */\nexport interface WebhookUpdateParameters {\n  /** The tags for the webhook. */\n  tags?: { [propertyName: string]: string };\n  /** The service URI for the webhook to post notifications. */\n  serviceUri?: string;\n  /** Custom headers that will be added to the webhook notifications. */\n  customHeaders?: { [propertyName: string]: string };\n  /** The status of the webhook at the time the operation was called. */\n  status?: WebhookStatus;\n  /** The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events. */\n  scope?: string;\n  /** The list of actions that trigger the webhook to post notifications. */\n  actions?: WebhookAction[];\n}\n\n/** The basic information of an event. */\nexport interface EventInfo {\n  /** The event ID. */\n  id?: string;\n}\n\n/** The result of a request to list events for a webhook. */\nexport interface EventListResult {\n  /** The list of events. Since this list may be incomplete, the nextLink field should be used to request the next list of events. */\n  value?: Event[];\n  /** The URI that can be used to request the next list of events. */\n  nextLink?: string;\n}\n\n/** The event request message sent to the service URI. */\nexport interface EventRequestMessage {\n  /** The content of the event request message. */\n  content?: EventContent;\n  /** The headers of the event request message. */\n  headers?: { [propertyName: string]: string };\n  /** The HTTP method used to send the event request message. */\n  method?: string;\n  /** The URI used to send the event request message. */\n  requestUri?: string;\n  /** The HTTP message version. */\n  version?: string;\n}\n\n/** The content of the event request message. */\nexport interface EventContent {\n  /** The event ID. */\n  id?: string;\n  /** The time at which the event occurred. */\n  timestamp?: Date;\n  /** The action that encompasses the provided event. */\n  action?: string;\n  /** The target of the event. */\n  target?: Target;\n  /** The request that generated the event. */\n  request?: Request;\n  /** The agent that initiated the event. For most situations, this could be from the authorization context of the request. */\n  actor?: Actor;\n  /** The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. */\n  source?: Source;\n}\n\n/** The target of the event. */\nexport interface Target {\n  /** The MIME type of the referenced object. */\n  mediaType?: string;\n  /** The number of bytes of the content. Same as Length field. */\n  size?: number;\n  /** The digest of the content, as defined by the Registry V2 HTTP API Specification. */\n  digest?: string;\n  /** The number of bytes of the content. Same as Size field. */\n  length?: number;\n  /** The repository name. */\n  repository?: string;\n  /** The direct URL to the content. */\n  url?: string;\n  /** The tag name. */\n  tag?: string;\n  /** The name of the artifact. */\n  name?: string;\n  /** The version of the artifact. */\n  version?: string;\n}\n\n/** The request that generated the event. */\nexport interface Request {\n  /** The ID of the request that initiated the event. */\n  id?: string;\n  /** The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request. */\n  addr?: string;\n  /** The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests. */\n  host?: string;\n  /** The request method that generated the event. */\n  method?: string;\n  /** The user agent header of the request. */\n  useragent?: string;\n}\n\n/** The agent that initiated the event. For most situations, this could be from the authorization context of the request. */\nexport interface Actor {\n  /** The subject or username associated with the request context that generated the event. */\n  name?: string;\n}\n\n/** The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. */\nexport interface Source {\n  /** The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port. */\n  addr?: string;\n  /** The running instance of an application. Changes after each restart. */\n  instanceID?: string;\n}\n\n/** The event response message received from the service URI. */\nexport interface EventResponseMessage {\n  /** The content of the event response message. */\n  content?: string;\n  /** The headers of the event response message. */\n  headers?: { [propertyName: string]: string };\n  /** The reason phrase of the event response message. */\n  reasonPhrase?: string;\n  /** The status code of the event response message. */\n  statusCode?: string;\n  /** The HTTP message version. */\n  version?: string;\n}\n\n/** The configuration of service URI and custom headers for the webhook. */\nexport interface CallbackConfig {\n  /** The service URI for the webhook to post notifications. */\n  serviceUri: string;\n  /** Custom headers that will be added to the webhook notifications. */\n  customHeaders?: { [propertyName: string]: string };\n}\n\n/** The parameters for updating an agent pool. */\nexport interface AgentPoolUpdateParameters {\n  /** The ARM resource tags. */\n  tags?: { [propertyName: string]: string };\n  /** The count of agent machine */\n  count?: number;\n}\n\n/** The collection of agent pools. */\nexport interface AgentPoolListResult {\n  /** The collection value. */\n  value?: AgentPool[];\n  /** The URI that can be used to request the next set of paged results. */\n  nextLink?: string;\n}\n\n/** The QueueStatus of Agent Pool */\nexport interface AgentPoolQueueStatus {\n  /** The number of pending runs in the queue */\n  count?: number;\n}\n\n/** The request parameters for scheduling a run. */\nexport interface RunRequest {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type:\n    | \"DockerBuildRequest\"\n    | \"FileTaskRunRequest\"\n    | \"TaskRunRequest\"\n    | \"EncodedTaskRunRequest\";\n  /** The value that indicates whether archiving is enabled for the run or not. */\n  isArchiveEnabled?: boolean;\n  /** The dedicated agent pool for the run. */\n  agentPoolName?: string;\n  /** The template that describes the repository and tag information for run log artifact. */\n  logTemplate?: string;\n}\n\n/** Properties for a registry image. */\nexport interface ImageDescriptor {\n  /** The registry login server. */\n  registry?: string;\n  /** The repository name. */\n  repository?: string;\n  /** The tag name. */\n  tag?: string;\n  /** The sha256-based digest of the image manifest. */\n  digest?: string;\n}\n\n/** The image update trigger that caused a build. */\nexport interface ImageUpdateTrigger {\n  /** The unique ID of the trigger. */\n  id?: string;\n  /** The timestamp when the image update happened. */\n  timestamp?: Date;\n  /** The list of image updates that caused the build. */\n  images?: ImageDescriptor[];\n}\n\n/** The source trigger that caused a run. */\nexport interface SourceTriggerDescriptor {\n  /** The unique ID of the trigger. */\n  id?: string;\n  /** The event type of the trigger. */\n  eventType?: string;\n  /** The unique ID that identifies a commit. */\n  commitId?: string;\n  /** The unique ID that identifies pull request. */\n  pullRequestId?: string;\n  /** The repository URL. */\n  repositoryUrl?: string;\n  /** The branch name in the repository. */\n  branchName?: string;\n  /** The source control provider type. */\n  providerType?: string;\n}\n\nexport interface TimerTriggerDescriptor {\n  /** The timer trigger name that caused the run. */\n  timerTriggerName?: string;\n  /** The occurrence that triggered the run. */\n  scheduleOccurrence?: string;\n}\n\n/** The platform properties against which the run has to happen. */\nexport interface PlatformProperties {\n  /** The operating system type required for the run. */\n  os: OS;\n  /** The OS architecture. */\n  architecture?: Architecture;\n  /** Variant of the CPU. */\n  variant?: Variant;\n}\n\n/** The properties that determine the run agent configuration. */\nexport interface AgentProperties {\n  /** The CPU configuration in terms of number of cores required for the run. */\n  cpu?: number;\n}\n\n/** The properties of a response to source upload request. */\nexport interface SourceUploadDefinition {\n  /** The URL where the client can upload the source. */\n  uploadUrl?: string;\n  /** The relative path to the source. This is used to submit the subsequent queue build request. */\n  relativePath?: string;\n}\n\n/** Collection of runs. */\nexport interface RunListResult {\n  /** The collection value. */\n  value?: Run[];\n  /** The URI that can be used to request the next set of paged results. */\n  nextLink?: string;\n}\n\n/** The set of run properties that can be updated. */\nexport interface RunUpdateParameters {\n  /** The value that indicates whether archiving is enabled or not. */\n  isArchiveEnabled?: boolean;\n}\n\n/** The result of get log link operation. */\nexport interface RunGetLogResult {\n  /** The link to logs for a run on a azure container registry. */\n  logLink?: string;\n  /** The link to logs in registry for a run on a azure container registry. */\n  logArtifactLink?: string;\n}\n\n/** The parameters for updating a task run. */\nexport interface TaskRunUpdateParameters {\n  /** Identity for the resource. */\n  identity?: IdentityProperties;\n  /** The location of the resource */\n  location?: string;\n  /** The ARM resource tags. */\n  tags?: { [propertyName: string]: string };\n  /** The request (parameters) for the new run */\n  runRequest?: RunRequestUnion;\n  /** How the run should be forced to rerun even if the run request configuration has not changed */\n  forceUpdateTag?: string;\n}\n\n/** The collection of task runs. */\nexport interface TaskRunListResult {\n  /** The collection value. */\n  value?: TaskRun[];\n  /** The URI that can be used to request the next set of paged results. */\n  nextLink?: string;\n}\n\n/** The collection of tasks. */\nexport interface TaskListResult {\n  /** The collection value. */\n  value?: Task[];\n  /** The URI that can be used to request the next set of paged results. */\n  nextLink?: string;\n}\n\n/** Base properties for any task step. */\nexport interface TaskStepProperties {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"Docker\" | \"FileTask\" | \"EncodedTask\";\n  /**\n   * List of base image dependencies for a step.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly baseImageDependencies?: BaseImageDependency[];\n  /** The URL(absolute or relative) of the source context for the task step. */\n  contextPath?: string;\n  /** The token (git PAT or SAS token of storage account blob) associated with the context for a step. */\n  contextAccessToken?: string;\n}\n\n/** Properties that describe a base image dependency. */\nexport interface BaseImageDependency {\n  /** The type of the base image dependency. */\n  type?: BaseImageDependencyType;\n  /** The registry login server. */\n  registry?: string;\n  /** The repository name. */\n  repository?: string;\n  /** The tag name. */\n  tag?: string;\n  /** The sha256-based digest of the image manifest. */\n  digest?: string;\n}\n\n/** The properties of a trigger. */\nexport interface TriggerProperties {\n  /** The collection of timer triggers. */\n  timerTriggers?: TimerTrigger[];\n  /** The collection of triggers based on source code repository. */\n  sourceTriggers?: SourceTrigger[];\n  /** The trigger based on base image dependencies. */\n  baseImageTrigger?: BaseImageTrigger;\n}\n\n/** The properties of a timer trigger. */\nexport interface TimerTrigger {\n  /** The CRON expression for the task schedule */\n  schedule: string;\n  /** The current status of trigger. */\n  status?: TriggerStatus;\n  /** The name of the trigger. */\n  name: string;\n}\n\n/** The properties of a source based trigger. */\nexport interface SourceTrigger {\n  /** The properties that describes the source(code) for the task. */\n  sourceRepository: SourceProperties;\n  /** The source event corresponding to the trigger. */\n  sourceTriggerEvents: SourceTriggerEvent[];\n  /** The current status of trigger. */\n  status?: TriggerStatus;\n  /** The name of the trigger. */\n  name: string;\n}\n\n/** The properties of the source code repository. */\nexport interface SourceProperties {\n  /** The type of source control service. */\n  sourceControlType: SourceControlType;\n  /** The full URL to the source code repository */\n  repositoryUrl: string;\n  /** The branch name of the source code. */\n  branch?: string;\n  /**\n   * The authorization properties for accessing the source code repository and to set up\n   * webhooks for notifications.\n   */\n  sourceControlAuthProperties?: AuthInfo;\n}\n\n/** The authorization properties for accessing the source code repository. */\nexport interface AuthInfo {\n  /** The type of Auth token. */\n  tokenType: TokenType;\n  /** The access token used to access the source control provider. */\n  token: string;\n  /** The refresh token used to refresh the access token. */\n  refreshToken?: string;\n  /** The scope of the access token. */\n  scope?: string;\n  /** Time in seconds that the token remains valid */\n  expiresIn?: number;\n}\n\n/** The trigger based on base image dependency. */\nexport interface BaseImageTrigger {\n  /** The type of the auto trigger for base image dependency updates. */\n  baseImageTriggerType: BaseImageTriggerType;\n  /** The endpoint URL for receiving update triggers. */\n  updateTriggerEndpoint?: string;\n  /** Type of Payload body for Base image update triggers. */\n  updateTriggerPayloadType?: UpdateTriggerPayloadType;\n  /** The current status of trigger. */\n  status?: TriggerStatus;\n  /** The name of the trigger. */\n  name: string;\n}\n\n/** The parameters that describes a set of credentials that will be used when a run is invoked. */\nexport interface Credentials {\n  /** Describes the credential parameters for accessing the source registry. */\n  sourceRegistry?: SourceRegistryCredentials;\n  /**\n   * Describes the credential parameters for accessing other custom registries. The key\n   * for the dictionary item will be the registry login server (myregistry.azurecr.io) and\n   * the value of the item will be the registry credentials for accessing the registry.\n   */\n  customRegistries?: { [propertyName: string]: CustomRegistryCredentials };\n}\n\n/** Describes the credential parameters for accessing the source registry. */\nexport interface SourceRegistryCredentials {\n  /**\n   * The authentication mode which determines the source registry login scope. The credentials for the source registry\n   * will be generated using the given scope. These credentials will be used to login to\n   * the source registry during the run.\n   */\n  loginMode?: SourceRegistryLoginMode;\n}\n\n/** Describes the credentials that will be used to access a custom registry during a run. */\nexport interface CustomRegistryCredentials {\n  /** The username for logging into the custom registry. */\n  userName?: SecretObject;\n  /**\n   * The password for logging into the custom registry. The password is a secret\n   * object that allows multiple ways of providing the value for it.\n   */\n  password?: SecretObject;\n  /**\n   * Indicates the managed identity assigned to the custom credential. If a user-assigned identity\n   * this value is the Client ID. If a system-assigned identity, the value will be `system`. In\n   * the case of a system-assigned identity, the Client ID will be determined by the runner. This\n   * identity may be used to authenticate to key vault to retrieve credentials or it may be the only\n   * source of authentication used for accessing the registry.\n   */\n  identity?: string;\n}\n\n/** Describes the properties of a secret object value. */\nexport interface SecretObject {\n  /**\n   * The value of the secret. The format of this value will be determined\n   * based on the type of the secret object. If the type is Opaque, the value will be\n   * used as is without any modification.\n   */\n  value?: string;\n  /**\n   * The type of the secret object which determines how the value of the secret object has to be\n   * interpreted.\n   */\n  type?: SecretObjectType;\n}\n\n/** The parameters for updating a task. */\nexport interface TaskUpdateParameters {\n  /** Identity for the resource. */\n  identity?: IdentityProperties;\n  /** The ARM resource tags. */\n  tags?: { [propertyName: string]: string };\n  /** The current status of task. */\n  status?: TaskStatus;\n  /** The platform properties against which the run has to happen. */\n  platform?: PlatformUpdateParameters;\n  /** The machine configuration of the run agent. */\n  agentConfiguration?: AgentProperties;\n  /** The dedicated agent pool for the task. */\n  agentPoolName?: string;\n  /** Run timeout in seconds. */\n  timeout?: number;\n  /** The properties for updating a task step. */\n  step?: TaskStepUpdateParametersUnion;\n  /** The properties for updating trigger properties. */\n  trigger?: TriggerUpdateParameters;\n  /** The parameters that describes a set of credentials that will be used when this run is invoked. */\n  credentials?: Credentials;\n  /** The template that describes the repository and tag information for run log artifact. */\n  logTemplate?: string;\n}\n\n/** The properties for updating the platform configuration. */\nexport interface PlatformUpdateParameters {\n  /** The operating system type required for the run. */\n  os?: OS;\n  /** The OS architecture. */\n  architecture?: Architecture;\n  /** Variant of the CPU. */\n  variant?: Variant;\n}\n\n/** Base properties for updating any task step. */\nexport interface TaskStepUpdateParameters {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"Docker\" | \"FileTask\" | \"EncodedTask\";\n  /** The URL(absolute or relative) of the source context for the task step. */\n  contextPath?: string;\n  /** The token (git PAT or SAS token of storage account blob) associated with the context for a step. */\n  contextAccessToken?: string;\n}\n\n/** The properties for updating triggers. */\nexport interface TriggerUpdateParameters {\n  /** The collection of timer triggers. */\n  timerTriggers?: TimerTriggerUpdateParameters[];\n  /** The collection of triggers based on source code repository. */\n  sourceTriggers?: SourceTriggerUpdateParameters[];\n  /** The trigger based on base image dependencies. */\n  baseImageTrigger?: BaseImageTriggerUpdateParameters;\n}\n\n/** The properties for updating a timer trigger. */\nexport interface TimerTriggerUpdateParameters {\n  /** The CRON expression for the task schedule */\n  schedule?: string;\n  /** The current status of trigger. */\n  status?: TriggerStatus;\n  /** The name of the trigger. */\n  name: string;\n}\n\n/** The properties for updating a source based trigger. */\nexport interface SourceTriggerUpdateParameters {\n  /** The properties that describes the source(code) for the task. */\n  sourceRepository?: SourceUpdateParameters;\n  /** The source event corresponding to the trigger. */\n  sourceTriggerEvents?: SourceTriggerEvent[];\n  /** The current status of trigger. */\n  status?: TriggerStatus;\n  /** The name of the trigger. */\n  name: string;\n}\n\n/** The properties for updating the source code repository. */\nexport interface SourceUpdateParameters {\n  /** The type of source control service. */\n  sourceControlType?: SourceControlType;\n  /** The full URL to the source code repository */\n  repositoryUrl?: string;\n  /** The branch name of the source code. */\n  branch?: string;\n  /**\n   * The authorization properties for accessing the source code repository and to set up\n   * webhooks for notifications.\n   */\n  sourceControlAuthProperties?: AuthInfoUpdateParameters;\n}\n\n/** The authorization properties for accessing the source code repository. */\nexport interface AuthInfoUpdateParameters {\n  /** The type of Auth token. */\n  tokenType?: TokenType;\n  /** The access token used to access the source control provider. */\n  token?: string;\n  /** The refresh token used to refresh the access token. */\n  refreshToken?: string;\n  /** The scope of the access token. */\n  scope?: string;\n  /** Time in seconds that the token remains valid */\n  expiresIn?: number;\n}\n\n/** The properties for updating base image dependency trigger. */\nexport interface BaseImageTriggerUpdateParameters {\n  /** The type of the auto trigger for base image dependency updates. */\n  baseImageTriggerType?: BaseImageTriggerType;\n  /** The endpoint URL for receiving update triggers. */\n  updateTriggerEndpoint?: string;\n  /** Type of Payload body for Base image update triggers. */\n  updateTriggerPayloadType?: UpdateTriggerPayloadType;\n  /** The current status of trigger. */\n  status?: TriggerStatus;\n  /** The name of the trigger. */\n  name: string;\n}\n\n/** The properties of a storage account for a container registry. Only applicable to Classic SKU. */\nexport interface StorageAccountProperties {\n  /** The resource ID of the storage account. */\n  id: string;\n}\n\n/** The properties of a package type. */\nexport interface PackageType {\n  /** The name of the package type. */\n  name?: string;\n  /**\n   * The endpoint of the package type.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly endpoint?: string;\n}\n\n/** The Active Directory Object that will be used for authenticating the token of a container registry. */\nexport interface ActiveDirectoryObject {\n  /** The user/group/application object ID for Active Directory Object that will be used for authenticating the token of a container registry. */\n  objectId?: string;\n  /** The tenant ID of user/group/application object Active Directory Object that will be used for authenticating the token of a container registry. */\n  tenantId?: string;\n}\n\n/** Properties that are enabled for Odata querying on runs. */\nexport interface RunFilter {\n  /** The unique identifier for the run. */\n  runId?: string;\n  /** The type of run. */\n  runType?: RunType;\n  /** The current status of the run. */\n  status?: RunStatus;\n  /** The create time for a run. */\n  createTime?: Date;\n  /** The time the run finished. */\n  finishTime?: Date;\n  /**\n   * The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of\n   * build type.\n   */\n  outputImageManifests?: string;\n  /** The value that indicates whether archiving is enabled or not. */\n  isArchiveEnabled?: boolean;\n  /** The name of the task that the run corresponds to. */\n  taskName?: string;\n  /** The name of the agent pool that the run corresponds to. */\n  agentPoolName?: string;\n}\n\n/** The properties of a run argument. */\nexport interface Argument {\n  /** The name of the argument. */\n  name: string;\n  /** The value of the argument. */\n  value: string;\n  /** Flag to indicate whether the argument represents a secret and want to be removed from build logs. */\n  isSecret?: boolean;\n}\n\n/** The properties of a overridable value that can be passed to a task template. */\nexport interface SetValue {\n  /** The name of the overridable value. */\n  name: string;\n  /** The overridable value. */\n  value: string;\n  /** Flag to indicate whether the value represents a secret or not. */\n  isSecret?: boolean;\n}\n\nexport interface OverrideTaskStepProperties {\n  /** The source context against which run has to be queued. */\n  contextPath?: string;\n  /** The file against which run has to be queued. */\n  file?: string;\n  /**\n   * Gets or sets the collection of override arguments to be used when\n   * executing a build step.\n   */\n  arguments?: Argument[];\n  /** The name of the target build stage for the docker build. */\n  target?: string;\n  /** The collection of overridable values that can be passed when running a Task. */\n  values?: SetValue[];\n  /** Base64 encoded update trigger token that will be attached with the base image trigger webhook. */\n  updateTriggerToken?: string;\n}\n\n/** An object that represents a private endpoint connection for a container registry. */\nexport interface PrivateEndpointConnection extends ProxyResource {\n  /** The resource of private endpoint. */\n  privateEndpoint?: PrivateEndpoint;\n  /** A collection of information about the state of the connection between service consumer and provider. */\n  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;\n  /**\n   * The provisioning state of private endpoint connection resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ProvisioningState;\n}\n\n/** An object that represents a scope map for a container registry. */\nexport interface ScopeMap extends ProxyResource {\n  /** The user friendly description of the scope map. */\n  description?: string;\n  /**\n   * The type of the scope map. E.g. BuildIn scope map.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly typePropertiesType?: string;\n  /**\n   * The creation date of scope map.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly creationDate?: Date;\n  /**\n   * Provisioning state of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ProvisioningState;\n  /**\n   * The list of scoped permissions for registry artifacts.\n   * E.g. repositories/repository-name/content/read,\n   * repositories/repository-name/metadata/write\n   */\n  actions?: string[];\n}\n\n/** An object that represents a token for a container registry. */\nexport interface Token extends ProxyResource {\n  /**\n   * The creation date of scope map.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly creationDate?: Date;\n  /**\n   * Provisioning state of the resource.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ProvisioningState;\n  /** The resource ID of the scope map to which the token will be associated with. */\n  scopeMapId?: string;\n  /** The credentials that can be used for authenticating the token. */\n  credentials?: TokenCredentialsProperties;\n  /** The status of the token example enabled or disabled. */\n  status?: TokenStatus;\n}\n\n/** Run resource properties */\nexport interface Run extends ProxyResource {\n  /** The unique identifier for the run. */\n  runId?: string;\n  /** The current status of the run. */\n  status?: RunStatus;\n  /** The last updated time for the run. */\n  lastUpdatedTime?: Date;\n  /** The type of run. */\n  runType?: RunType;\n  /** The dedicated agent pool for the run. */\n  agentPoolName?: string;\n  /** The time the run was scheduled. */\n  createTime?: Date;\n  /** The time the run started. */\n  startTime?: Date;\n  /** The time the run finished. */\n  finishTime?: Date;\n  /** The list of all images that were generated from the run. This is applicable if the run generates base image dependencies. */\n  outputImages?: ImageDescriptor[];\n  /** The task against which run was scheduled. */\n  task?: string;\n  /** The image update trigger that caused the run. This is applicable if the task has base image trigger configured. */\n  imageUpdateTrigger?: ImageUpdateTrigger;\n  /** The source trigger that caused the run. */\n  sourceTrigger?: SourceTriggerDescriptor;\n  /** The timer trigger that caused the run. */\n  timerTrigger?: TimerTriggerDescriptor;\n  /** The platform properties against which the run will happen. */\n  platform?: PlatformProperties;\n  /** The machine configuration of the run agent. */\n  agentConfiguration?: AgentProperties;\n  /** The scope of the credentials that were used to login to the source registry during this run. */\n  sourceRegistryAuth?: string;\n  /** The list of custom registries that were logged in during this run. */\n  customRegistries?: string[];\n  /**\n   * The error message received from backend systems after the run is scheduled.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly runErrorMessage?: string;\n  /** The update trigger token passed for the Run. */\n  updateTriggerToken?: string;\n  /**\n   * The image description for the log artifact.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly logArtifact?: ImageDescriptor;\n  /** The provisioning state of a run. */\n  provisioningState?: ProvisioningState;\n  /** The value that indicates whether archiving is enabled or not. */\n  isArchiveEnabled?: boolean;\n}\n\n/**\n * The task run that has the ARM resource and properties.\n * The task run will have the information of request and result of a run.\n */\nexport interface TaskRun extends ProxyResource {\n  /** Identity for the resource. */\n  identity?: IdentityProperties;\n  /** The location of the resource */\n  location?: string;\n  /**\n   * The provisioning state of this task run\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ProvisioningState;\n  /** The request (parameters) for the run */\n  runRequest?: RunRequestUnion;\n  /**\n   * The result of this task run\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly runResult?: Run;\n  /** How the run should be forced to rerun even if the run request configuration has not changed */\n  forceUpdateTag?: string;\n}\n\n/** An object that represents a container registry. */\nexport interface Registry extends Resource {\n  /** The SKU of the container registry. */\n  sku: Sku;\n  /** The identity of the container registry. */\n  identity?: IdentityProperties;\n  /**\n   * The URL that can be used to log into the container registry.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly loginServer?: string;\n  /**\n   * The creation date of the container registry in ISO8601 format.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly creationDate?: Date;\n  /**\n   * The provisioning state of the container registry at the time the operation was called.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ProvisioningState;\n  /**\n   * The status of the container registry at the time the operation was called.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly status?: Status;\n  /** The value that indicates whether the admin user is enabled. */\n  adminUserEnabled?: boolean;\n  /** The network rule set for a container registry. */\n  networkRuleSet?: NetworkRuleSet;\n  /** The policies for a container registry. */\n  policies?: Policies;\n  /** The encryption settings of container registry. */\n  encryption?: EncryptionProperty;\n  /** Enable a single data endpoint per region for serving data. */\n  dataEndpointEnabled?: boolean;\n  /**\n   * List of host names that will serve data when dataEndpointEnabled is true.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly dataEndpointHostNames?: string[];\n  /**\n   * List of private endpoint connections for a container registry.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly privateEndpointConnections?: PrivateEndpointConnection[];\n  /** Whether or not public network access is allowed for the container registry. */\n  publicNetworkAccess?: PublicNetworkAccess;\n  /** Whether to allow trusted Azure services to access a network restricted registry. */\n  networkRuleBypassOptions?: NetworkRuleBypassOptions;\n  /** Whether or not zone redundancy is enabled for this container registry */\n  zoneRedundancy?: ZoneRedundancy;\n}\n\n/** An object that represents a replication for a container registry. */\nexport interface Replication extends Resource {\n  /**\n   * The provisioning state of the replication at the time the operation was called.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ProvisioningState;\n  /**\n   * The status of the replication at the time the operation was called.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly status?: Status;\n  /** Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications. */\n  regionEndpointEnabled?: boolean;\n  /** Whether or not zone redundancy is enabled for this container registry replication */\n  zoneRedundancy?: ZoneRedundancy;\n}\n\n/** An object that represents a webhook for a container registry. */\nexport interface Webhook extends Resource {\n  /** The status of the webhook at the time the operation was called. */\n  status?: WebhookStatus;\n  /** The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events. */\n  scope?: string;\n  /** The list of actions that trigger the webhook to post notifications. */\n  actions?: WebhookAction[];\n  /**\n   * The provisioning state of the webhook at the time the operation was called.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ProvisioningState;\n}\n\n/**\n * The agentpool that has the ARM resource and properties.\n * The agentpool will have all information to create an agent pool.\n */\nexport interface AgentPool extends Resource {\n  /** The count of agent machine */\n  count?: number;\n  /** The Tier of agent machine */\n  tier?: string;\n  /** The OS of agent machine */\n  os?: OS;\n  /** The Virtual Network Subnet Resource Id of the agent machine */\n  virtualNetworkSubnetResourceId?: string;\n  /**\n   * The provisioning state of this agent pool\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ProvisioningState;\n}\n\n/**\n * The task that has the ARM resource and task properties.\n * The task will have all information to schedule a run against it.\n */\nexport interface Task extends Resource {\n  /** Identity for the resource. */\n  identity?: IdentityProperties;\n  /**\n   * The provisioning state of the task.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly provisioningState?: ProvisioningState;\n  /**\n   * The creation date of task.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly creationDate?: Date;\n  /** The current status of task. */\n  status?: TaskStatus;\n  /** The platform properties against which the run has to happen. */\n  platform?: PlatformProperties;\n  /** The machine configuration of the run agent. */\n  agentConfiguration?: AgentProperties;\n  /** The dedicated agent pool for the task. */\n  agentPoolName?: string;\n  /** Run timeout in seconds. */\n  timeout?: number;\n  /** The properties of a task step. */\n  step?: TaskStepPropertiesUnion;\n  /** The properties that describe all triggers for the task. */\n  trigger?: TriggerProperties;\n  /** The properties that describes a set of credentials that will be used when this run is invoked. */\n  credentials?: Credentials;\n  /** The template that describes the repository and tag information for run log artifact. */\n  logTemplate?: string;\n  /** The value of this property indicates whether the task resource is system task or not. */\n  isSystemTask?: boolean;\n}\n\n/** The event for a webhook. */\nexport interface Event extends EventInfo {\n  /** The event request message sent to the service URI. */\n  eventRequestMessage?: EventRequestMessage;\n  /** The event response message received from the service URI. */\n  eventResponseMessage?: EventResponseMessage;\n}\n\n/** The parameters for a docker quick build. */\nexport interface DockerBuildRequest extends RunRequest {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"DockerBuildRequest\";\n  /** The fully qualified image names including the repository and tag. */\n  imageNames?: string[];\n  /** The value of this property indicates whether the image built should be pushed to the registry or not. */\n  isPushEnabled?: boolean;\n  /** The value of this property indicates whether the image cache is enabled or not. */\n  noCache?: boolean;\n  /** The Docker file path relative to the source location. */\n  dockerFilePath: string;\n  /** The name of the target build stage for the docker build. */\n  target?: string;\n  /** The collection of override arguments to be used when executing the run. */\n  arguments?: Argument[];\n  /** Run timeout in seconds. */\n  timeout?: number;\n  /** The platform properties against which the run has to happen. */\n  platform: PlatformProperties;\n  /** The machine configuration of the run agent. */\n  agentConfiguration?: AgentProperties;\n  /**\n   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.\n   * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.\n   */\n  sourceLocation?: string;\n  /** The properties that describes a set of credentials that will be used when this run is invoked. */\n  credentials?: Credentials;\n}\n\n/** The request parameters for a scheduling run against a task file. */\nexport interface FileTaskRunRequest extends RunRequest {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"FileTaskRunRequest\";\n  /** The template/definition file path relative to the source. */\n  taskFilePath: string;\n  /** The values/parameters file path relative to the source. */\n  valuesFilePath?: string;\n  /** The collection of overridable values that can be passed when running a task. */\n  values?: SetValue[];\n  /** Run timeout in seconds. */\n  timeout?: number;\n  /** The platform properties against which the run has to happen. */\n  platform: PlatformProperties;\n  /** The machine configuration of the run agent. */\n  agentConfiguration?: AgentProperties;\n  /**\n   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.\n   * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.\n   */\n  sourceLocation?: string;\n  /** The properties that describes a set of credentials that will be used when this run is invoked. */\n  credentials?: Credentials;\n}\n\n/** The parameters for a task run request. */\nexport interface TaskRunRequest extends RunRequest {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"TaskRunRequest\";\n  /** The resource ID of task against which run has to be queued. */\n  taskId: string;\n  /** Set of overridable parameters that can be passed when running a Task. */\n  overrideTaskStepProperties?: OverrideTaskStepProperties;\n}\n\n/** The parameters for a quick task run request. */\nexport interface EncodedTaskRunRequest extends RunRequest {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"EncodedTaskRunRequest\";\n  /** Base64 encoded value of the template/definition file content. */\n  encodedTaskContent: string;\n  /** Base64 encoded value of the parameters/values file content. */\n  encodedValuesContent?: string;\n  /** The collection of overridable values that can be passed when running a task. */\n  values?: SetValue[];\n  /** Run timeout in seconds. */\n  timeout?: number;\n  /** The platform properties against which the run has to happen. */\n  platform: PlatformProperties;\n  /** The machine configuration of the run agent. */\n  agentConfiguration?: AgentProperties;\n  /**\n   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.\n   * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.\n   */\n  sourceLocation?: string;\n  /** The properties that describes a set of credentials that will be used when this run is invoked. */\n  credentials?: Credentials;\n}\n\n/** The Docker build step. */\nexport interface DockerBuildStep extends TaskStepProperties {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"Docker\";\n  /** The fully qualified image names including the repository and tag. */\n  imageNames?: string[];\n  /** The value of this property indicates whether the image built should be pushed to the registry or not. */\n  isPushEnabled?: boolean;\n  /** The value of this property indicates whether the image cache is enabled or not. */\n  noCache?: boolean;\n  /** The Docker file path relative to the source context. */\n  dockerFilePath: string;\n  /** The name of the target build stage for the docker build. */\n  target?: string;\n  /** The collection of override arguments to be used when executing this build step. */\n  arguments?: Argument[];\n}\n\n/** The properties of a task step. */\nexport interface FileTaskStep extends TaskStepProperties {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"FileTask\";\n  /** The task template/definition file path relative to the source context. */\n  taskFilePath: string;\n  /** The task values/parameters file path relative to the source context. */\n  valuesFilePath?: string;\n  /** The collection of overridable values that can be passed when running a task. */\n  values?: SetValue[];\n}\n\n/** The properties of a encoded task step. */\nexport interface EncodedTaskStep extends TaskStepProperties {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"EncodedTask\";\n  /** Base64 encoded value of the template/definition file content. */\n  encodedTaskContent: string;\n  /** Base64 encoded value of the parameters/values file content. */\n  encodedValuesContent?: string;\n  /** The collection of overridable values that can be passed when running a task. */\n  values?: SetValue[];\n}\n\n/** The properties for updating a docker build step. */\nexport interface DockerBuildStepUpdateParameters\n  extends TaskStepUpdateParameters {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"Docker\";\n  /** The fully qualified image names including the repository and tag. */\n  imageNames?: string[];\n  /** The value of this property indicates whether the image built should be pushed to the registry or not. */\n  isPushEnabled?: boolean;\n  /** The value of this property indicates whether the image cache is enabled or not. */\n  noCache?: boolean;\n  /** The Docker file path relative to the source context. */\n  dockerFilePath?: string;\n  /** The collection of override arguments to be used when executing this build step. */\n  arguments?: Argument[];\n  /** The name of the target build stage for the docker build. */\n  target?: string;\n}\n\n/** The properties of updating a task step. */\nexport interface FileTaskStepUpdateParameters extends TaskStepUpdateParameters {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"FileTask\";\n  /** The task template/definition file path relative to the source context. */\n  taskFilePath?: string;\n  /** The values/parameters file path relative to the source context. */\n  valuesFilePath?: string;\n  /** The collection of overridable values that can be passed when running a task. */\n  values?: SetValue[];\n}\n\n/** The properties for updating encoded task step. */\nexport interface EncodedTaskStepUpdateParameters\n  extends TaskStepUpdateParameters {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  type: \"EncodedTask\";\n  /** Base64 encoded value of the template/definition file content. */\n  encodedTaskContent?: string;\n  /** Base64 encoded value of the parameters/values file content. */\n  encodedValuesContent?: string;\n  /** The collection of overridable values that can be passed when running a task. */\n  values?: SetValue[];\n}\n\n/** Defines headers for Registries_importImage operation. */\nexport interface RegistriesImportImageHeaders {\n  location?: string;\n}\n\n/** Defines headers for Registries_create operation. */\nexport interface RegistriesCreateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Defines headers for Registries_delete operation. */\nexport interface RegistriesDeleteHeaders {\n  location?: string;\n}\n\n/** Defines headers for Registries_update operation. */\nexport interface RegistriesUpdateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Defines headers for Registries_generateCredentials operation. */\nexport interface RegistriesGenerateCredentialsHeaders {\n  location?: string;\n}\n\n/** Defines headers for PrivateEndpointConnections_createOrUpdate operation. */\nexport interface PrivateEndpointConnectionsCreateOrUpdateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Defines headers for PrivateEndpointConnections_delete operation. */\nexport interface PrivateEndpointConnectionsDeleteHeaders {\n  location?: string;\n}\n\n/** Defines headers for Replications_create operation. */\nexport interface ReplicationsCreateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Defines headers for Replications_delete operation. */\nexport interface ReplicationsDeleteHeaders {\n  location?: string;\n}\n\n/** Defines headers for Replications_update operation. */\nexport interface ReplicationsUpdateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Defines headers for ScopeMaps_create operation. */\nexport interface ScopeMapsCreateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Defines headers for ScopeMaps_delete operation. */\nexport interface ScopeMapsDeleteHeaders {\n  location?: string;\n}\n\n/** Defines headers for ScopeMaps_update operation. */\nexport interface ScopeMapsUpdateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Defines headers for Tokens_create operation. */\nexport interface TokensCreateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Defines headers for Tokens_delete operation. */\nexport interface TokensDeleteHeaders {\n  location?: string;\n}\n\n/** Defines headers for Tokens_update operation. */\nexport interface TokensUpdateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Defines headers for Webhooks_create operation. */\nexport interface WebhooksCreateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Defines headers for Webhooks_delete operation. */\nexport interface WebhooksDeleteHeaders {\n  location?: string;\n}\n\n/** Defines headers for Webhooks_update operation. */\nexport interface WebhooksUpdateHeaders {\n  azureAsyncOperation?: string;\n}\n\n/** Known values of {@link ImportMode} that the service accepts. */\nexport enum KnownImportMode {\n  /** NoForce */\n  NoForce = \"NoForce\",\n  /** Force */\n  Force = \"Force\"\n}\n\n/**\n * Defines values for ImportMode. \\\n * {@link KnownImportMode} can be used interchangeably with ImportMode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **NoForce** \\\n * **Force**\n */\nexport type ImportMode = string;\n\n/** Known values of {@link ConnectionStatus} that the service accepts. */\nexport enum KnownConnectionStatus {\n  /** Approved */\n  Approved = \"Approved\",\n  /** Pending */\n  Pending = \"Pending\",\n  /** Rejected */\n  Rejected = \"Rejected\",\n  /** Disconnected */\n  Disconnected = \"Disconnected\"\n}\n\n/**\n * Defines values for ConnectionStatus. \\\n * {@link KnownConnectionStatus} can be used interchangeably with ConnectionStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Approved** \\\n * **Pending** \\\n * **Rejected** \\\n * **Disconnected**\n */\nexport type ConnectionStatus = string;\n\n/** Known values of {@link ActionsRequired} that the service accepts. */\nexport enum KnownActionsRequired {\n  /** None */\n  None = \"None\",\n  /** Recreate */\n  Recreate = \"Recreate\"\n}\n\n/**\n * Defines values for ActionsRequired. \\\n * {@link KnownActionsRequired} can be used interchangeably with ActionsRequired,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **None** \\\n * **Recreate**\n */\nexport type ActionsRequired = string;\n\n/** Known values of {@link ProvisioningState} that the service accepts. */\nexport enum KnownProvisioningState {\n  /** Creating */\n  Creating = \"Creating\",\n  /** Updating */\n  Updating = \"Updating\",\n  /** Deleting */\n  Deleting = \"Deleting\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Failed */\n  Failed = \"Failed\",\n  /** Canceled */\n  Canceled = \"Canceled\"\n}\n\n/**\n * Defines values for ProvisioningState. \\\n * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Creating** \\\n * **Updating** \\\n * **Deleting** \\\n * **Succeeded** \\\n * **Failed** \\\n * **Canceled**\n */\nexport type ProvisioningState = string;\n\n/** Known values of {@link CreatedByType} that the service accepts. */\nexport enum KnownCreatedByType {\n  /** User */\n  User = \"User\",\n  /** Application */\n  Application = \"Application\",\n  /** ManagedIdentity */\n  ManagedIdentity = \"ManagedIdentity\",\n  /** Key */\n  Key = \"Key\"\n}\n\n/**\n * Defines values for CreatedByType. \\\n * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **User** \\\n * **Application** \\\n * **ManagedIdentity** \\\n * **Key**\n */\nexport type CreatedByType = string;\n\n/** Known values of {@link LastModifiedByType} that the service accepts. */\nexport enum KnownLastModifiedByType {\n  /** User */\n  User = \"User\",\n  /** Application */\n  Application = \"Application\",\n  /** ManagedIdentity */\n  ManagedIdentity = \"ManagedIdentity\",\n  /** Key */\n  Key = \"Key\"\n}\n\n/**\n * Defines values for LastModifiedByType. \\\n * {@link KnownLastModifiedByType} can be used interchangeably with LastModifiedByType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **User** \\\n * **Application** \\\n * **ManagedIdentity** \\\n * **Key**\n */\nexport type LastModifiedByType = string;\n\n/** Known values of {@link SkuName} that the service accepts. */\nexport enum KnownSkuName {\n  /** Classic */\n  Classic = \"Classic\",\n  /** Basic */\n  Basic = \"Basic\",\n  /** Standard */\n  Standard = \"Standard\",\n  /** Premium */\n  Premium = \"Premium\"\n}\n\n/**\n * Defines values for SkuName. \\\n * {@link KnownSkuName} can be used interchangeably with SkuName,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Classic** \\\n * **Basic** \\\n * **Standard** \\\n * **Premium**\n */\nexport type SkuName = string;\n\n/** Known values of {@link SkuTier} that the service accepts. */\nexport enum KnownSkuTier {\n  /** Classic */\n  Classic = \"Classic\",\n  /** Basic */\n  Basic = \"Basic\",\n  /** Standard */\n  Standard = \"Standard\",\n  /** Premium */\n  Premium = \"Premium\"\n}\n\n/**\n * Defines values for SkuTier. \\\n * {@link KnownSkuTier} can be used interchangeably with SkuTier,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Classic** \\\n * **Basic** \\\n * **Standard** \\\n * **Premium**\n */\nexport type SkuTier = string;\n\n/** Known values of {@link DefaultAction} that the service accepts. */\nexport enum KnownDefaultAction {\n  /** Allow */\n  Allow = \"Allow\",\n  /** Deny */\n  Deny = \"Deny\"\n}\n\n/**\n * Defines values for DefaultAction. \\\n * {@link KnownDefaultAction} can be used interchangeably with DefaultAction,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Allow** \\\n * **Deny**\n */\nexport type DefaultAction = string;\n\n/** Known values of {@link Action} that the service accepts. */\nexport enum KnownAction {\n  /** Allow */\n  Allow = \"Allow\"\n}\n\n/**\n * Defines values for Action. \\\n * {@link KnownAction} can be used interchangeably with Action,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Allow**\n */\nexport type Action = string;\n\n/** Known values of {@link PolicyStatus} that the service accepts. */\nexport enum KnownPolicyStatus {\n  /** Enabled */\n  Enabled = \"enabled\",\n  /** Disabled */\n  Disabled = \"disabled\"\n}\n\n/**\n * Defines values for PolicyStatus. \\\n * {@link KnownPolicyStatus} can be used interchangeably with PolicyStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **enabled** \\\n * **disabled**\n */\nexport type PolicyStatus = string;\n\n/** Known values of {@link TrustPolicyType} that the service accepts. */\nexport enum KnownTrustPolicyType {\n  /** Notary */\n  Notary = \"Notary\"\n}\n\n/**\n * Defines values for TrustPolicyType. \\\n * {@link KnownTrustPolicyType} can be used interchangeably with TrustPolicyType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Notary**\n */\nexport type TrustPolicyType = string;\n\n/** Known values of {@link ExportPolicyStatus} that the service accepts. */\nexport enum KnownExportPolicyStatus {\n  /** Enabled */\n  Enabled = \"enabled\",\n  /** Disabled */\n  Disabled = \"disabled\"\n}\n\n/**\n * Defines values for ExportPolicyStatus. \\\n * {@link KnownExportPolicyStatus} can be used interchangeably with ExportPolicyStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **enabled** \\\n * **disabled**\n */\nexport type ExportPolicyStatus = string;\n\n/** Known values of {@link EncryptionStatus} that the service accepts. */\nexport enum KnownEncryptionStatus {\n  /** Enabled */\n  Enabled = \"enabled\",\n  /** Disabled */\n  Disabled = \"disabled\"\n}\n\n/**\n * Defines values for EncryptionStatus. \\\n * {@link KnownEncryptionStatus} can be used interchangeably with EncryptionStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **enabled** \\\n * **disabled**\n */\nexport type EncryptionStatus = string;\n\n/** Known values of {@link PublicNetworkAccess} that the service accepts. */\nexport enum KnownPublicNetworkAccess {\n  /** Enabled */\n  Enabled = \"Enabled\",\n  /** Disabled */\n  Disabled = \"Disabled\"\n}\n\n/**\n * Defines values for PublicNetworkAccess. \\\n * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Enabled** \\\n * **Disabled**\n */\nexport type PublicNetworkAccess = string;\n\n/** Known values of {@link NetworkRuleBypassOptions} that the service accepts. */\nexport enum KnownNetworkRuleBypassOptions {\n  /** AzureServices */\n  AzureServices = \"AzureServices\",\n  /** None */\n  None = \"None\"\n}\n\n/**\n * Defines values for NetworkRuleBypassOptions. \\\n * {@link KnownNetworkRuleBypassOptions} can be used interchangeably with NetworkRuleBypassOptions,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **AzureServices** \\\n * **None**\n */\nexport type NetworkRuleBypassOptions = string;\n\n/** Known values of {@link ZoneRedundancy} that the service accepts. */\nexport enum KnownZoneRedundancy {\n  /** Enabled */\n  Enabled = \"Enabled\",\n  /** Disabled */\n  Disabled = \"Disabled\"\n}\n\n/**\n * Defines values for ZoneRedundancy. \\\n * {@link KnownZoneRedundancy} can be used interchangeably with ZoneRedundancy,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Enabled** \\\n * **Disabled**\n */\nexport type ZoneRedundancy = string;\n\n/** Known values of {@link RegistryUsageUnit} that the service accepts. */\nexport enum KnownRegistryUsageUnit {\n  /** Count */\n  Count = \"Count\",\n  /** Bytes */\n  Bytes = \"Bytes\"\n}\n\n/**\n * Defines values for RegistryUsageUnit. \\\n * {@link KnownRegistryUsageUnit} can be used interchangeably with RegistryUsageUnit,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Count** \\\n * **Bytes**\n */\nexport type RegistryUsageUnit = string;\n\n/** Known values of {@link TokenCertificateName} that the service accepts. */\nexport enum KnownTokenCertificateName {\n  /** Certificate1 */\n  Certificate1 = \"certificate1\",\n  /** Certificate2 */\n  Certificate2 = \"certificate2\"\n}\n\n/**\n * Defines values for TokenCertificateName. \\\n * {@link KnownTokenCertificateName} can be used interchangeably with TokenCertificateName,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **certificate1** \\\n * **certificate2**\n */\nexport type TokenCertificateName = string;\n\n/** Known values of {@link TokenPasswordName} that the service accepts. */\nexport enum KnownTokenPasswordName {\n  /** Password1 */\n  Password1 = \"password1\",\n  /** Password2 */\n  Password2 = \"password2\"\n}\n\n/**\n * Defines values for TokenPasswordName. \\\n * {@link KnownTokenPasswordName} can be used interchangeably with TokenPasswordName,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **password1** \\\n * **password2**\n */\nexport type TokenPasswordName = string;\n\n/** Known values of {@link TokenStatus} that the service accepts. */\nexport enum KnownTokenStatus {\n  /** Enabled */\n  Enabled = \"enabled\",\n  /** Disabled */\n  Disabled = \"disabled\"\n}\n\n/**\n * Defines values for TokenStatus. \\\n * {@link KnownTokenStatus} can be used interchangeably with TokenStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **enabled** \\\n * **disabled**\n */\nexport type TokenStatus = string;\n\n/** Known values of {@link WebhookStatus} that the service accepts. */\nexport enum KnownWebhookStatus {\n  /** Enabled */\n  Enabled = \"enabled\",\n  /** Disabled */\n  Disabled = \"disabled\"\n}\n\n/**\n * Defines values for WebhookStatus. \\\n * {@link KnownWebhookStatus} can be used interchangeably with WebhookStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **enabled** \\\n * **disabled**\n */\nexport type WebhookStatus = string;\n\n/** Known values of {@link WebhookAction} that the service accepts. */\nexport enum KnownWebhookAction {\n  /** Push */\n  Push = \"push\",\n  /** Delete */\n  Delete = \"delete\",\n  /** Quarantine */\n  Quarantine = \"quarantine\",\n  /** ChartPush */\n  ChartPush = \"chart_push\",\n  /** ChartDelete */\n  ChartDelete = \"chart_delete\"\n}\n\n/**\n * Defines values for WebhookAction. \\\n * {@link KnownWebhookAction} can be used interchangeably with WebhookAction,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **push** \\\n * **delete** \\\n * **quarantine** \\\n * **chart_push** \\\n * **chart_delete**\n */\nexport type WebhookAction = string;\n\n/** Known values of {@link OS} that the service accepts. */\nexport enum KnownOS {\n  /** Windows */\n  Windows = \"Windows\",\n  /** Linux */\n  Linux = \"Linux\"\n}\n\n/**\n * Defines values for OS. \\\n * {@link KnownOS} can be used interchangeably with OS,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Windows** \\\n * **Linux**\n */\nexport type OS = string;\n\n/** Known values of {@link RunStatus} that the service accepts. */\nexport enum KnownRunStatus {\n  /** Queued */\n  Queued = \"Queued\",\n  /** Started */\n  Started = \"Started\",\n  /** Running */\n  Running = \"Running\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Failed */\n  Failed = \"Failed\",\n  /** Canceled */\n  Canceled = \"Canceled\",\n  /** Error */\n  Error = \"Error\",\n  /** Timeout */\n  Timeout = \"Timeout\"\n}\n\n/**\n * Defines values for RunStatus. \\\n * {@link KnownRunStatus} can be used interchangeably with RunStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Queued** \\\n * **Started** \\\n * **Running** \\\n * **Succeeded** \\\n * **Failed** \\\n * **Canceled** \\\n * **Error** \\\n * **Timeout**\n */\nexport type RunStatus = string;\n\n/** Known values of {@link RunType} that the service accepts. */\nexport enum KnownRunType {\n  /** QuickBuild */\n  QuickBuild = \"QuickBuild\",\n  /** QuickRun */\n  QuickRun = \"QuickRun\",\n  /** AutoBuild */\n  AutoBuild = \"AutoBuild\",\n  /** AutoRun */\n  AutoRun = \"AutoRun\"\n}\n\n/**\n * Defines values for RunType. \\\n * {@link KnownRunType} can be used interchangeably with RunType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **QuickBuild** \\\n * **QuickRun** \\\n * **AutoBuild** \\\n * **AutoRun**\n */\nexport type RunType = string;\n\n/** Known values of {@link Architecture} that the service accepts. */\nexport enum KnownArchitecture {\n  /** Amd64 */\n  Amd64 = \"amd64\",\n  /** X86 */\n  X86 = \"x86\",\n  /** ThreeHundredEightySix */\n  ThreeHundredEightySix = \"386\",\n  /** Arm */\n  Arm = \"arm\",\n  /** Arm64 */\n  Arm64 = \"arm64\"\n}\n\n/**\n * Defines values for Architecture. \\\n * {@link KnownArchitecture} can be used interchangeably with Architecture,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **amd64** \\\n * **x86** \\\n * **386** \\\n * **arm** \\\n * **arm64**\n */\nexport type Architecture = string;\n\n/** Known values of {@link Variant} that the service accepts. */\nexport enum KnownVariant {\n  /** V6 */\n  V6 = \"v6\",\n  /** V7 */\n  V7 = \"v7\",\n  /** V8 */\n  V8 = \"v8\"\n}\n\n/**\n * Defines values for Variant. \\\n * {@link KnownVariant} can be used interchangeably with Variant,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **v6** \\\n * **v7** \\\n * **v8**\n */\nexport type Variant = string;\n\n/** Known values of {@link TaskStatus} that the service accepts. */\nexport enum KnownTaskStatus {\n  /** Disabled */\n  Disabled = \"Disabled\",\n  /** Enabled */\n  Enabled = \"Enabled\"\n}\n\n/**\n * Defines values for TaskStatus. \\\n * {@link KnownTaskStatus} can be used interchangeably with TaskStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Disabled** \\\n * **Enabled**\n */\nexport type TaskStatus = string;\n\n/** Known values of {@link StepType} that the service accepts. */\nexport enum KnownStepType {\n  /** Docker */\n  Docker = \"Docker\",\n  /** FileTask */\n  FileTask = \"FileTask\",\n  /** EncodedTask */\n  EncodedTask = \"EncodedTask\"\n}\n\n/**\n * Defines values for StepType. \\\n * {@link KnownStepType} can be used interchangeably with StepType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Docker** \\\n * **FileTask** \\\n * **EncodedTask**\n */\nexport type StepType = string;\n\n/** Known values of {@link BaseImageDependencyType} that the service accepts. */\nexport enum KnownBaseImageDependencyType {\n  /** BuildTime */\n  BuildTime = \"BuildTime\",\n  /** RunTime */\n  RunTime = \"RunTime\"\n}\n\n/**\n * Defines values for BaseImageDependencyType. \\\n * {@link KnownBaseImageDependencyType} can be used interchangeably with BaseImageDependencyType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **BuildTime** \\\n * **RunTime**\n */\nexport type BaseImageDependencyType = string;\n\n/** Known values of {@link TriggerStatus} that the service accepts. */\nexport enum KnownTriggerStatus {\n  /** Disabled */\n  Disabled = \"Disabled\",\n  /** Enabled */\n  Enabled = \"Enabled\"\n}\n\n/**\n * Defines values for TriggerStatus. \\\n * {@link KnownTriggerStatus} can be used interchangeably with TriggerStatus,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Disabled** \\\n * **Enabled**\n */\nexport type TriggerStatus = string;\n\n/** Known values of {@link SourceControlType} that the service accepts. */\nexport enum KnownSourceControlType {\n  /** Github */\n  Github = \"Github\",\n  /** VisualStudioTeamService */\n  VisualStudioTeamService = \"VisualStudioTeamService\"\n}\n\n/**\n * Defines values for SourceControlType. \\\n * {@link KnownSourceControlType} can be used interchangeably with SourceControlType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Github** \\\n * **VisualStudioTeamService**\n */\nexport type SourceControlType = string;\n\n/** Known values of {@link TokenType} that the service accepts. */\nexport enum KnownTokenType {\n  /** PAT */\n  PAT = \"PAT\",\n  /** OAuth */\n  OAuth = \"OAuth\"\n}\n\n/**\n * Defines values for TokenType. \\\n * {@link KnownTokenType} can be used interchangeably with TokenType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **PAT** \\\n * **OAuth**\n */\nexport type TokenType = string;\n\n/** Known values of {@link SourceTriggerEvent} that the service accepts. */\nexport enum KnownSourceTriggerEvent {\n  /** Commit */\n  Commit = \"commit\",\n  /** Pullrequest */\n  Pullrequest = \"pullrequest\"\n}\n\n/**\n * Defines values for SourceTriggerEvent. \\\n * {@link KnownSourceTriggerEvent} can be used interchangeably with SourceTriggerEvent,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **commit** \\\n * **pullrequest**\n */\nexport type SourceTriggerEvent = string;\n\n/** Known values of {@link BaseImageTriggerType} that the service accepts. */\nexport enum KnownBaseImageTriggerType {\n  /** All */\n  All = \"All\",\n  /** Runtime */\n  Runtime = \"Runtime\"\n}\n\n/**\n * Defines values for BaseImageTriggerType. \\\n * {@link KnownBaseImageTriggerType} can be used interchangeably with BaseImageTriggerType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **All** \\\n * **Runtime**\n */\nexport type BaseImageTriggerType = string;\n\n/** Known values of {@link UpdateTriggerPayloadType} that the service accepts. */\nexport enum KnownUpdateTriggerPayloadType {\n  /** Default */\n  Default = \"Default\",\n  /** Token */\n  Token = \"Token\"\n}\n\n/**\n * Defines values for UpdateTriggerPayloadType. \\\n * {@link KnownUpdateTriggerPayloadType} can be used interchangeably with UpdateTriggerPayloadType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Default** \\\n * **Token**\n */\nexport type UpdateTriggerPayloadType = string;\n\n/** Known values of {@link SourceRegistryLoginMode} that the service accepts. */\nexport enum KnownSourceRegistryLoginMode {\n  /** None */\n  None = \"None\",\n  /** Default */\n  Default = \"Default\"\n}\n\n/**\n * Defines values for SourceRegistryLoginMode. \\\n * {@link KnownSourceRegistryLoginMode} can be used interchangeably with SourceRegistryLoginMode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **None** \\\n * **Default**\n */\nexport type SourceRegistryLoginMode = string;\n\n/** Known values of {@link SecretObjectType} that the service accepts. */\nexport enum KnownSecretObjectType {\n  /** Opaque */\n  Opaque = \"Opaque\",\n  /** Vaultsecret */\n  Vaultsecret = \"Vaultsecret\"\n}\n\n/**\n * Defines values for SecretObjectType. \\\n * {@link KnownSecretObjectType} can be used interchangeably with SecretObjectType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Opaque** \\\n * **Vaultsecret**\n */\nexport type SecretObjectType = string;\n/** Defines values for ResourceIdentityType. */\nexport type ResourceIdentityType =\n  | \"SystemAssigned\"\n  | \"UserAssigned\"\n  | \"SystemAssigned, UserAssigned\"\n  | \"None\";\n/** Defines values for PasswordName. */\nexport type PasswordName = \"password\" | \"password2\";\n\n/** Optional parameters. */\nexport interface RegistriesImportImageOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface RegistriesCheckNameAvailabilityOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the checkNameAvailability operation. */\nexport type RegistriesCheckNameAvailabilityResponse = RegistryNameStatus;\n\n/** Optional parameters. */\nexport interface RegistriesListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type RegistriesListResponse = RegistryListResult;\n\n/** Optional parameters. */\nexport interface RegistriesListByResourceGroupOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroup operation. */\nexport type RegistriesListByResourceGroupResponse = RegistryListResult;\n\n/** Optional parameters. */\nexport interface RegistriesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type RegistriesGetResponse = Registry;\n\n/** Optional parameters. */\nexport interface RegistriesCreateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type RegistriesCreateResponse = Registry;\n\n/** Optional parameters. */\nexport interface RegistriesDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface RegistriesUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type RegistriesUpdateResponse = Registry;\n\n/** Optional parameters. */\nexport interface RegistriesListUsagesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listUsages operation. */\nexport type RegistriesListUsagesResponse = RegistryUsageListResult;\n\n/** Optional parameters. */\nexport interface RegistriesListPrivateLinkResourcesOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listPrivateLinkResources operation. */\nexport type RegistriesListPrivateLinkResourcesResponse = PrivateLinkResourceListResult;\n\n/** Optional parameters. */\nexport interface RegistriesGetPrivateLinkResourceOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getPrivateLinkResource operation. */\nexport type RegistriesGetPrivateLinkResourceResponse = PrivateLinkResource;\n\n/** Optional parameters. */\nexport interface RegistriesListCredentialsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listCredentials operation. */\nexport type RegistriesListCredentialsResponse = RegistryListCredentialsResult;\n\n/** Optional parameters. */\nexport interface RegistriesRegenerateCredentialOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the regenerateCredential operation. */\nexport type RegistriesRegenerateCredentialResponse = RegistryListCredentialsResult;\n\n/** Optional parameters. */\nexport interface RegistriesGenerateCredentialsOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the generateCredentials operation. */\nexport type RegistriesGenerateCredentialsResponse = GenerateCredentialsResult;\n\n/** Optional parameters. */\nexport interface RegistriesScheduleRunOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the scheduleRun operation. */\nexport type RegistriesScheduleRunResponse = Run;\n\n/** Optional parameters. */\nexport interface RegistriesGetBuildSourceUploadUrlOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getBuildSourceUploadUrl operation. */\nexport type RegistriesGetBuildSourceUploadUrlResponse = SourceUploadDefinition;\n\n/** Optional parameters. */\nexport interface RegistriesListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type RegistriesListNextResponse = RegistryListResult;\n\n/** Optional parameters. */\nexport interface RegistriesListByResourceGroupNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listByResourceGroupNext operation. */\nexport type RegistriesListByResourceGroupNextResponse = RegistryListResult;\n\n/** Optional parameters. */\nexport interface RegistriesListPrivateLinkResourcesNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listPrivateLinkResourcesNext operation. */\nexport type RegistriesListPrivateLinkResourcesNextResponse = PrivateLinkResourceListResult;\n\n/** Optional parameters. */\nexport interface OperationsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type OperationsListResponse = OperationListResult;\n\n/** Optional parameters. */\nexport interface OperationsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type OperationsListNextResponse = OperationListResult;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the createOrUpdate operation. */\nexport type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface PrivateEndpointConnectionsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type PrivateEndpointConnectionsListNextResponse = PrivateEndpointConnectionListResult;\n\n/** Optional parameters. */\nexport interface ReplicationsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type ReplicationsListResponse = ReplicationListResult;\n\n/** Optional parameters. */\nexport interface ReplicationsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type ReplicationsGetResponse = Replication;\n\n/** Optional parameters. */\nexport interface ReplicationsCreateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type ReplicationsCreateResponse = Replication;\n\n/** Optional parameters. */\nexport interface ReplicationsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface ReplicationsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type ReplicationsUpdateResponse = Replication;\n\n/** Optional parameters. */\nexport interface ReplicationsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type ReplicationsListNextResponse = ReplicationListResult;\n\n/** Optional parameters. */\nexport interface ScopeMapsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type ScopeMapsListResponse = ScopeMapListResult;\n\n/** Optional parameters. */\nexport interface ScopeMapsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type ScopeMapsGetResponse = ScopeMap;\n\n/** Optional parameters. */\nexport interface ScopeMapsCreateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type ScopeMapsCreateResponse = ScopeMap;\n\n/** Optional parameters. */\nexport interface ScopeMapsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface ScopeMapsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type ScopeMapsUpdateResponse = ScopeMap;\n\n/** Optional parameters. */\nexport interface ScopeMapsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type ScopeMapsListNextResponse = ScopeMapListResult;\n\n/** Optional parameters. */\nexport interface TokensListOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type TokensListResponse = TokenListResult;\n\n/** Optional parameters. */\nexport interface TokensGetOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type TokensGetResponse = Token;\n\n/** Optional parameters. */\nexport interface TokensCreateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type TokensCreateResponse = Token;\n\n/** Optional parameters. */\nexport interface TokensDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface TokensUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type TokensUpdateResponse = Token;\n\n/** Optional parameters. */\nexport interface TokensListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type TokensListNextResponse = TokenListResult;\n\n/** Optional parameters. */\nexport interface WebhooksListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type WebhooksListResponse = WebhookListResult;\n\n/** Optional parameters. */\nexport interface WebhooksGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type WebhooksGetResponse = Webhook;\n\n/** Optional parameters. */\nexport interface WebhooksCreateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type WebhooksCreateResponse = Webhook;\n\n/** Optional parameters. */\nexport interface WebhooksDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface WebhooksUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type WebhooksUpdateResponse = Webhook;\n\n/** Optional parameters. */\nexport interface WebhooksPingOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the ping operation. */\nexport type WebhooksPingResponse = EventInfo;\n\n/** Optional parameters. */\nexport interface WebhooksListEventsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listEvents operation. */\nexport type WebhooksListEventsResponse = EventListResult;\n\n/** Optional parameters. */\nexport interface WebhooksGetCallbackConfigOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getCallbackConfig operation. */\nexport type WebhooksGetCallbackConfigResponse = CallbackConfig;\n\n/** Optional parameters. */\nexport interface WebhooksListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type WebhooksListNextResponse = WebhookListResult;\n\n/** Optional parameters. */\nexport interface WebhooksListEventsNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listEventsNext operation. */\nexport type WebhooksListEventsNextResponse = EventListResult;\n\n/** Optional parameters. */\nexport interface AgentPoolsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type AgentPoolsGetResponse = AgentPool;\n\n/** Optional parameters. */\nexport interface AgentPoolsCreateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type AgentPoolsCreateResponse = AgentPool;\n\n/** Optional parameters. */\nexport interface AgentPoolsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface AgentPoolsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type AgentPoolsUpdateResponse = AgentPool;\n\n/** Optional parameters. */\nexport interface AgentPoolsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type AgentPoolsListResponse = AgentPoolListResult;\n\n/** Optional parameters. */\nexport interface AgentPoolsGetQueueStatusOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getQueueStatus operation. */\nexport type AgentPoolsGetQueueStatusResponse = AgentPoolQueueStatus;\n\n/** Optional parameters. */\nexport interface AgentPoolsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type AgentPoolsListNextResponse = AgentPoolListResult;\n\n/** Optional parameters. */\nexport interface RunsListOptionalParams extends coreClient.OperationOptions {\n  /** The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed. */\n  filter?: string;\n  /** $top is supported for get list of runs, which limits the maximum number of runs to return. */\n  top?: number;\n}\n\n/** Contains response data for the list operation. */\nexport type RunsListResponse = RunListResult;\n\n/** Optional parameters. */\nexport interface RunsGetOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type RunsGetResponse = Run;\n\n/** Optional parameters. */\nexport interface RunsUpdateOptionalParams extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type RunsUpdateResponse = Run;\n\n/** Optional parameters. */\nexport interface RunsGetLogSasUrlOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getLogSasUrl operation. */\nexport type RunsGetLogSasUrlResponse = RunGetLogResult;\n\n/** Optional parameters. */\nexport interface RunsCancelOptionalParams extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface RunsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type RunsListNextResponse = RunListResult;\n\n/** Optional parameters. */\nexport interface TaskRunsGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type TaskRunsGetResponse = TaskRun;\n\n/** Optional parameters. */\nexport interface TaskRunsCreateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type TaskRunsCreateResponse = TaskRun;\n\n/** Optional parameters. */\nexport interface TaskRunsDeleteOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface TaskRunsUpdateOptionalParams\n  extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type TaskRunsUpdateResponse = TaskRun;\n\n/** Optional parameters. */\nexport interface TaskRunsGetDetailsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getDetails operation. */\nexport type TaskRunsGetDetailsResponse = TaskRun;\n\n/** Optional parameters. */\nexport interface TaskRunsListOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type TaskRunsListResponse = TaskRunListResult;\n\n/** Optional parameters. */\nexport interface TaskRunsListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type TaskRunsListNextResponse = TaskRunListResult;\n\n/** Optional parameters. */\nexport interface TasksListOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the list operation. */\nexport type TasksListResponse = TaskListResult;\n\n/** Optional parameters. */\nexport interface TasksGetOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type TasksGetResponse = Task;\n\n/** Optional parameters. */\nexport interface TasksCreateOptionalParams extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the create operation. */\nexport type TasksCreateResponse = Task;\n\n/** Optional parameters. */\nexport interface TasksDeleteOptionalParams extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Optional parameters. */\nexport interface TasksUpdateOptionalParams extends coreClient.OperationOptions {\n  /** Delay to wait until next poll, in milliseconds. */\n  updateIntervalInMs?: number;\n  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */\n  resumeFrom?: string;\n}\n\n/** Contains response data for the update operation. */\nexport type TasksUpdateResponse = Task;\n\n/** Optional parameters. */\nexport interface TasksGetDetailsOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getDetails operation. */\nexport type TasksGetDetailsResponse = Task;\n\n/** Optional parameters. */\nexport interface TasksListNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listNext operation. */\nexport type TasksListNextResponse = TaskListResult;\n\n/** Optional parameters. */\nexport interface ContainerRegistryManagementClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** server parameter */\n  $host?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\nexport const ImportImageParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ImportImageParameters\",\n    modelProperties: {\n      source: {\n        serializedName: \"source\",\n        type: {\n          name: \"Composite\",\n          className: \"ImportSource\"\n        }\n      },\n      targetTags: {\n        serializedName: \"targetTags\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      untaggedTargetRepositories: {\n        serializedName: \"untaggedTargetRepositories\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      mode: {\n        defaultValue: \"NoForce\",\n        serializedName: \"mode\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImportSource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ImportSource\",\n    modelProperties: {\n      resourceId: {\n        serializedName: \"resourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      registryUri: {\n        serializedName: \"registryUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"ImportSourceCredentials\"\n        }\n      },\n      sourceImage: {\n        serializedName: \"sourceImage\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImportSourceCredentials: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ImportSourceCredentials\",\n    modelProperties: {\n      username: {\n        serializedName: \"username\",\n        type: {\n          name: \"String\"\n        }\n      },\n      password: {\n        serializedName: \"password\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OperationDefinition\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationDefinition: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationDefinition\",\n    modelProperties: {\n      origin: {\n        serializedName: \"origin\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      display: {\n        serializedName: \"display\",\n        type: {\n          name: \"Composite\",\n          className: \"OperationDisplayDefinition\"\n        }\n      },\n      isDataAction: {\n        serializedName: \"isDataAction\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      serviceSpecification: {\n        serializedName: \"properties.serviceSpecification\",\n        type: {\n          name: \"Composite\",\n          className: \"OperationServiceSpecificationDefinition\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationDisplayDefinition: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationDisplayDefinition\",\n    modelProperties: {\n      provider: {\n        serializedName: \"provider\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resource: {\n        serializedName: \"resource\",\n        type: {\n          name: \"String\"\n        }\n      },\n      operation: {\n        serializedName: \"operation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationServiceSpecificationDefinition: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationServiceSpecificationDefinition\",\n    modelProperties: {\n      metricSpecifications: {\n        serializedName: \"metricSpecifications\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OperationMetricSpecificationDefinition\"\n            }\n          }\n        }\n      },\n      logSpecifications: {\n        serializedName: \"logSpecifications\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"OperationLogSpecificationDefinition\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const OperationMetricSpecificationDefinition: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationMetricSpecificationDefinition\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      displayDescription: {\n        serializedName: \"displayDescription\",\n        type: {\n          name: \"String\"\n        }\n      },\n      unit: {\n        serializedName: \"unit\",\n        type: {\n          name: \"String\"\n        }\n      },\n      aggregationType: {\n        serializedName: \"aggregationType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      internalMetricName: {\n        serializedName: \"internalMetricName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const OperationLogSpecificationDefinition: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OperationLogSpecificationDefinition\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      displayName: {\n        serializedName: \"displayName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobDuration: {\n        serializedName: \"blobDuration\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegistryNameCheckRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistryNameCheckRequest\",\n    modelProperties: {\n      name: {\n        constraints: {\n          Pattern: new RegExp(\"^[a-zA-Z0-9]*$\"),\n          MaxLength: 50,\n          MinLength: 5\n        },\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        defaultValue: \"Microsoft.ContainerRegistry/registries\",\n        isConstant: true,\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegistryNameStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistryNameStatus\",\n    modelProperties: {\n      nameAvailable: {\n        serializedName: \"nameAvailable\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      reason: {\n        serializedName: \"reason\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpointConnectionListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateEndpointConnection\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateEndpoint: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpoint\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateLinkServiceConnectionState\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      description: {\n        serializedName: \"description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      actionsRequired: {\n        serializedName: \"actionsRequired\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ProxyResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ProxyResource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      }\n    }\n  }\n};\n\nexport const SystemData: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SystemData\",\n    modelProperties: {\n      createdBy: {\n        serializedName: \"createdBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdByType: {\n        serializedName: \"createdByType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createdAt: {\n        serializedName: \"createdAt\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      lastModifiedBy: {\n        serializedName: \"lastModifiedBy\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModifiedByType: {\n        serializedName: \"lastModifiedByType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModifiedAt: {\n        serializedName: \"lastModifiedAt\",\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegistryListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistryListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Registry\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Sku: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Sku\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tier: {\n        serializedName: \"tier\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const IdentityProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IdentityProperties\",\n    modelProperties: {\n      principalId: {\n        serializedName: \"principalId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tenantId: {\n        serializedName: \"tenantId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"SystemAssigned\",\n            \"UserAssigned\",\n            \"SystemAssigned, UserAssigned\",\n            \"None\"\n          ]\n        }\n      },\n      userAssignedIdentities: {\n        serializedName: \"userAssignedIdentities\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"UserIdentityProperties\" }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const UserIdentityProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"UserIdentityProperties\",\n    modelProperties: {\n      principalId: {\n        serializedName: \"principalId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientId: {\n        serializedName: \"clientId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Status: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Status\",\n    modelProperties: {\n      displayStatus: {\n        serializedName: \"displayStatus\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      timestamp: {\n        serializedName: \"timestamp\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const NetworkRuleSet: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"NetworkRuleSet\",\n    modelProperties: {\n      defaultAction: {\n        defaultValue: \"Allow\",\n        serializedName: \"defaultAction\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      ipRules: {\n        serializedName: \"ipRules\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"IPRule\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const IPRule: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"IPRule\",\n    modelProperties: {\n      action: {\n        defaultValue: \"Allow\",\n        serializedName: \"action\",\n        type: {\n          name: \"String\"\n        }\n      },\n      iPAddressOrRange: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Policies: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Policies\",\n    modelProperties: {\n      quarantinePolicy: {\n        serializedName: \"quarantinePolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"QuarantinePolicy\"\n        }\n      },\n      trustPolicy: {\n        serializedName: \"trustPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"TrustPolicy\"\n        }\n      },\n      retentionPolicy: {\n        serializedName: \"retentionPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"RetentionPolicy\"\n        }\n      },\n      exportPolicy: {\n        serializedName: \"exportPolicy\",\n        type: {\n          name: \"Composite\",\n          className: \"ExportPolicy\"\n        }\n      }\n    }\n  }\n};\n\nexport const QuarantinePolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"QuarantinePolicy\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TrustPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TrustPolicy\",\n    modelProperties: {\n      type: {\n        defaultValue: \"Notary\",\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RetentionPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RetentionPolicy\",\n    modelProperties: {\n      days: {\n        defaultValue: 7,\n        serializedName: \"days\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      lastUpdatedTime: {\n        serializedName: \"lastUpdatedTime\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ExportPolicy: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ExportPolicy\",\n    modelProperties: {\n      status: {\n        defaultValue: \"enabled\",\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EncryptionProperty: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EncryptionProperty\",\n    modelProperties: {\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keyVaultProperties: {\n        serializedName: \"keyVaultProperties\",\n        type: {\n          name: \"Composite\",\n          className: \"KeyVaultProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyVaultProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"KeyVaultProperties\",\n    modelProperties: {\n      keyIdentifier: {\n        serializedName: \"keyIdentifier\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionedKeyIdentifier: {\n        serializedName: \"versionedKeyIdentifier\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keyRotationEnabled: {\n        serializedName: \"keyRotationEnabled\",\n        readOnly: true,\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      lastKeyRotationTimestamp: {\n        serializedName: \"lastKeyRotationTimestamp\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      }\n    }\n  }\n};\n\nexport const Resource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Resource\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      systemData: {\n        serializedName: \"systemData\",\n        type: {\n          name: \"Composite\",\n          className: \"SystemData\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegistryUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistryUpdateParameters\",\n    modelProperties: {\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityProperties\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      sku: {\n        serializedName: \"sku\",\n        type: {\n          name: \"Composite\",\n          className: \"Sku\"\n        }\n      },\n      adminUserEnabled: {\n        serializedName: \"properties.adminUserEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      networkRuleSet: {\n        serializedName: \"properties.networkRuleSet\",\n        type: {\n          name: \"Composite\",\n          className: \"NetworkRuleSet\"\n        }\n      },\n      policies: {\n        serializedName: \"properties.policies\",\n        type: {\n          name: \"Composite\",\n          className: \"Policies\"\n        }\n      },\n      encryption: {\n        serializedName: \"properties.encryption\",\n        type: {\n          name: \"Composite\",\n          className: \"EncryptionProperty\"\n        }\n      },\n      dataEndpointEnabled: {\n        serializedName: \"properties.dataEndpointEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      networkRuleBypassOptions: {\n        serializedName: \"properties.networkRuleBypassOptions\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegistryUsageListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistryUsageListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RegistryUsage\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RegistryUsage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistryUsage\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      limit: {\n        serializedName: \"limit\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      currentValue: {\n        serializedName: \"currentValue\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      unit: {\n        serializedName: \"unit\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateLinkResourceListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateLinkResourceListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateLinkResource\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateLinkResource: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateLinkResource\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      groupId: {\n        serializedName: \"properties.groupId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requiredMembers: {\n        serializedName: \"properties.requiredMembers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      requiredZoneNames: {\n        serializedName: \"properties.requiredZoneNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponse: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponse\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"ErrorResponseBody\"\n        }\n      }\n    }\n  }\n};\n\nexport const ErrorResponseBody: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ErrorResponseBody\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"InnerErrorDescription\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const InnerErrorDescription: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"InnerErrorDescription\",\n    modelProperties: {\n      code: {\n        serializedName: \"code\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"message\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegistryListCredentialsResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistryListCredentialsResult\",\n    modelProperties: {\n      username: {\n        serializedName: \"username\",\n        type: {\n          name: \"String\"\n        }\n      },\n      passwords: {\n        serializedName: \"passwords\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"RegistryPassword\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RegistryPassword: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistryPassword\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"password\", \"password2\"]\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegenerateCredentialParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegenerateCredentialParameters\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"Enum\",\n          allowedValues: [\"password\", \"password2\"]\n        }\n      }\n    }\n  }\n};\n\nexport const ReplicationListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ReplicationListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Replication\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ReplicationUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ReplicationUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      regionEndpointEnabled: {\n        serializedName: \"properties.regionEndpointEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const ScopeMapListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ScopeMapListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ScopeMap\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ScopeMapUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ScopeMapUpdateParameters\",\n    modelProperties: {\n      description: {\n        serializedName: \"properties.description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      actions: {\n        serializedName: \"properties.actions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TokenListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Token\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokenCredentialsProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenCredentialsProperties\",\n    modelProperties: {\n      certificates: {\n        serializedName: \"certificates\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TokenCertificate\"\n            }\n          }\n        }\n      },\n      passwords: {\n        serializedName: \"passwords\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TokenPassword\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TokenCertificate: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenCertificate\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiry: {\n        serializedName: \"expiry\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      thumbprint: {\n        serializedName: \"thumbprint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encodedPemCertificate: {\n        serializedName: \"encodedPemCertificate\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokenPassword: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenPassword\",\n    modelProperties: {\n      creationTime: {\n        serializedName: \"creationTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      expiry: {\n        serializedName: \"expiry\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokenUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokenUpdateParameters\",\n    modelProperties: {\n      scopeMapId: {\n        serializedName: \"properties.scopeMapId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"properties.status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"properties.credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"TokenCredentialsProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const GenerateCredentialsParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GenerateCredentialsParameters\",\n    modelProperties: {\n      tokenId: {\n        serializedName: \"tokenId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiry: {\n        serializedName: \"expiry\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const GenerateCredentialsResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"GenerateCredentialsResult\",\n    modelProperties: {\n      username: {\n        serializedName: \"username\",\n        type: {\n          name: \"String\"\n        }\n      },\n      passwords: {\n        serializedName: \"passwords\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TokenPassword\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const WebhookListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"WebhookListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Webhook\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const WebhookCreateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"WebhookCreateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      serviceUri: {\n        serializedName: \"properties.serviceUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      customHeaders: {\n        serializedName: \"properties.customHeaders\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      status: {\n        serializedName: \"properties.status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scope: {\n        serializedName: \"properties.scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      actions: {\n        serializedName: \"properties.actions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const WebhookUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"WebhookUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      serviceUri: {\n        serializedName: \"properties.serviceUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      customHeaders: {\n        serializedName: \"properties.customHeaders\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      status: {\n        serializedName: \"properties.status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scope: {\n        serializedName: \"properties.scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      actions: {\n        serializedName: \"properties.actions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EventInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventInfo\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Event\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventRequestMessage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventRequestMessage\",\n    modelProperties: {\n      content: {\n        serializedName: \"content\",\n        type: {\n          name: \"Composite\",\n          className: \"EventContent\"\n        }\n      },\n      headers: {\n        serializedName: \"headers\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      method: {\n        serializedName: \"method\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestUri: {\n        serializedName: \"requestUri\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventContent: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventContent\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      timestamp: {\n        serializedName: \"timestamp\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      action: {\n        serializedName: \"action\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"Composite\",\n          className: \"Target\"\n        }\n      },\n      request: {\n        serializedName: \"request\",\n        type: {\n          name: \"Composite\",\n          className: \"Request\"\n        }\n      },\n      actor: {\n        serializedName: \"actor\",\n        type: {\n          name: \"Composite\",\n          className: \"Actor\"\n        }\n      },\n      source: {\n        serializedName: \"source\",\n        type: {\n          name: \"Composite\",\n          className: \"Source\"\n        }\n      }\n    }\n  }\n};\n\nexport const Target: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Target\",\n    modelProperties: {\n      mediaType: {\n        serializedName: \"mediaType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      size: {\n        serializedName: \"size\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      digest: {\n        serializedName: \"digest\",\n        type: {\n          name: \"String\"\n        }\n      },\n      length: {\n        serializedName: \"length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      repository: {\n        serializedName: \"repository\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tag: {\n        serializedName: \"tag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Request: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Request\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      addr: {\n        serializedName: \"addr\",\n        type: {\n          name: \"String\"\n        }\n      },\n      host: {\n        serializedName: \"host\",\n        type: {\n          name: \"String\"\n        }\n      },\n      method: {\n        serializedName: \"method\",\n        type: {\n          name: \"String\"\n        }\n      },\n      useragent: {\n        serializedName: \"useragent\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Actor: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Actor\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Source: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Source\",\n    modelProperties: {\n      addr: {\n        serializedName: \"addr\",\n        type: {\n          name: \"String\"\n        }\n      },\n      instanceID: {\n        serializedName: \"instanceID\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const EventResponseMessage: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"EventResponseMessage\",\n    modelProperties: {\n      content: {\n        serializedName: \"content\",\n        type: {\n          name: \"String\"\n        }\n      },\n      headers: {\n        serializedName: \"headers\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      reasonPhrase: {\n        serializedName: \"reasonPhrase\",\n        type: {\n          name: \"String\"\n        }\n      },\n      statusCode: {\n        serializedName: \"statusCode\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CallbackConfig: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CallbackConfig\",\n    modelProperties: {\n      serviceUri: {\n        serializedName: \"serviceUri\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      customHeaders: {\n        serializedName: \"customHeaders\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      }\n    }\n  }\n};\n\nexport const AgentPoolUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AgentPoolUpdateParameters\",\n    modelProperties: {\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      count: {\n        serializedName: \"properties.count\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const AgentPoolListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AgentPoolListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AgentPool\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AgentPoolQueueStatus: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AgentPoolQueueStatus\",\n    modelProperties: {\n      count: {\n        serializedName: \"count\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const RunRequest: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RunRequest\",\n    uberParent: \"RunRequest\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      isArchiveEnabled: {\n        defaultValue: false,\n        serializedName: \"isArchiveEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      agentPoolName: {\n        serializedName: \"agentPoolName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      logTemplate: {\n        serializedName: \"logTemplate\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageDescriptor: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ImageDescriptor\",\n    modelProperties: {\n      registry: {\n        serializedName: \"registry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      repository: {\n        serializedName: \"repository\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tag: {\n        serializedName: \"tag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      digest: {\n        serializedName: \"digest\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ImageUpdateTrigger: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ImageUpdateTrigger\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      timestamp: {\n        serializedName: \"timestamp\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      images: {\n        serializedName: \"images\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageDescriptor\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SourceTriggerDescriptor: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SourceTriggerDescriptor\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      eventType: {\n        serializedName: \"eventType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      commitId: {\n        serializedName: \"commitId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      pullRequestId: {\n        serializedName: \"pullRequestId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      repositoryUrl: {\n        serializedName: \"repositoryUrl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      branchName: {\n        serializedName: \"branchName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      providerType: {\n        serializedName: \"providerType\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TimerTriggerDescriptor: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TimerTriggerDescriptor\",\n    modelProperties: {\n      timerTriggerName: {\n        serializedName: \"timerTriggerName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scheduleOccurrence: {\n        serializedName: \"scheduleOccurrence\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PlatformProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PlatformProperties\",\n    modelProperties: {\n      os: {\n        serializedName: \"os\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      architecture: {\n        serializedName: \"architecture\",\n        type: {\n          name: \"String\"\n        }\n      },\n      variant: {\n        serializedName: \"variant\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AgentProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AgentProperties\",\n    modelProperties: {\n      cpu: {\n        serializedName: \"cpu\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SourceUploadDefinition: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SourceUploadDefinition\",\n    modelProperties: {\n      uploadUrl: {\n        serializedName: \"uploadUrl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      relativePath: {\n        serializedName: \"relativePath\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RunListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RunListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Run\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RunUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RunUpdateParameters\",\n    modelProperties: {\n      isArchiveEnabled: {\n        serializedName: \"isArchiveEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const RunGetLogResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RunGetLogResult\",\n    modelProperties: {\n      logLink: {\n        serializedName: \"logLink\",\n        type: {\n          name: \"String\"\n        }\n      },\n      logArtifactLink: {\n        serializedName: \"logArtifactLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TaskRunUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TaskRunUpdateParameters\",\n    modelProperties: {\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityProperties\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      runRequest: {\n        serializedName: \"properties.runRequest\",\n        type: {\n          name: \"Composite\",\n          className: \"RunRequest\"\n        }\n      },\n      forceUpdateTag: {\n        serializedName: \"properties.forceUpdateTag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TaskRunListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TaskRunListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TaskRun\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TaskListResult: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TaskListResult\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Task\"\n            }\n          }\n        }\n      },\n      nextLink: {\n        serializedName: \"nextLink\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TaskStepProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TaskStepProperties\",\n    uberParent: \"TaskStepProperties\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      baseImageDependencies: {\n        serializedName: \"baseImageDependencies\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BaseImageDependency\"\n            }\n          }\n        }\n      },\n      contextPath: {\n        serializedName: \"contextPath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contextAccessToken: {\n        serializedName: \"contextAccessToken\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BaseImageDependency: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BaseImageDependency\",\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      registry: {\n        serializedName: \"registry\",\n        type: {\n          name: \"String\"\n        }\n      },\n      repository: {\n        serializedName: \"repository\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tag: {\n        serializedName: \"tag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      digest: {\n        serializedName: \"digest\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TriggerProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TriggerProperties\",\n    modelProperties: {\n      timerTriggers: {\n        serializedName: \"timerTriggers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TimerTrigger\"\n            }\n          }\n        }\n      },\n      sourceTriggers: {\n        serializedName: \"sourceTriggers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SourceTrigger\"\n            }\n          }\n        }\n      },\n      baseImageTrigger: {\n        serializedName: \"baseImageTrigger\",\n        type: {\n          name: \"Composite\",\n          className: \"BaseImageTrigger\"\n        }\n      }\n    }\n  }\n};\n\nexport const TimerTrigger: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TimerTrigger\",\n    modelProperties: {\n      schedule: {\n        serializedName: \"schedule\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SourceTrigger: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SourceTrigger\",\n    modelProperties: {\n      sourceRepository: {\n        serializedName: \"sourceRepository\",\n        type: {\n          name: \"Composite\",\n          className: \"SourceProperties\"\n        }\n      },\n      sourceTriggerEvents: {\n        serializedName: \"sourceTriggerEvents\",\n        required: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SourceProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SourceProperties\",\n    modelProperties: {\n      sourceControlType: {\n        serializedName: \"sourceControlType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      repositoryUrl: {\n        serializedName: \"repositoryUrl\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      branch: {\n        serializedName: \"branch\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sourceControlAuthProperties: {\n        serializedName: \"sourceControlAuthProperties\",\n        type: {\n          name: \"Composite\",\n          className: \"AuthInfo\"\n        }\n      }\n    }\n  }\n};\n\nexport const AuthInfo: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuthInfo\",\n    modelProperties: {\n      tokenType: {\n        serializedName: \"tokenType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      token: {\n        serializedName: \"token\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      refreshToken: {\n        serializedName: \"refreshToken\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scope: {\n        serializedName: \"scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiresIn: {\n        serializedName: \"expiresIn\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const BaseImageTrigger: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BaseImageTrigger\",\n    modelProperties: {\n      baseImageTriggerType: {\n        serializedName: \"baseImageTriggerType\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      updateTriggerEndpoint: {\n        serializedName: \"updateTriggerEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      updateTriggerPayloadType: {\n        serializedName: \"updateTriggerPayloadType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Credentials: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Credentials\",\n    modelProperties: {\n      sourceRegistry: {\n        serializedName: \"sourceRegistry\",\n        type: {\n          name: \"Composite\",\n          className: \"SourceRegistryCredentials\"\n        }\n      },\n      customRegistries: {\n        serializedName: \"customRegistries\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: { name: \"Composite\", className: \"CustomRegistryCredentials\" }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const SourceRegistryCredentials: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SourceRegistryCredentials\",\n    modelProperties: {\n      loginMode: {\n        serializedName: \"loginMode\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const CustomRegistryCredentials: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"CustomRegistryCredentials\",\n    modelProperties: {\n      userName: {\n        serializedName: \"userName\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretObject\"\n        }\n      },\n      password: {\n        serializedName: \"password\",\n        type: {\n          name: \"Composite\",\n          className: \"SecretObject\"\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SecretObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SecretObject\",\n    modelProperties: {\n      value: {\n        serializedName: \"value\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TaskUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TaskUpdateParameters\",\n    modelProperties: {\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityProperties\"\n        }\n      },\n      tags: {\n        serializedName: \"tags\",\n        type: {\n          name: \"Dictionary\",\n          value: { type: { name: \"String\" } }\n        }\n      },\n      status: {\n        serializedName: \"properties.status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      platform: {\n        serializedName: \"properties.platform\",\n        type: {\n          name: \"Composite\",\n          className: \"PlatformUpdateParameters\"\n        }\n      },\n      agentConfiguration: {\n        serializedName: \"properties.agentConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"AgentProperties\"\n        }\n      },\n      agentPoolName: {\n        serializedName: \"properties.agentPoolName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      timeout: {\n        serializedName: \"properties.timeout\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      step: {\n        serializedName: \"properties.step\",\n        type: {\n          name: \"Composite\",\n          className: \"TaskStepUpdateParameters\"\n        }\n      },\n      trigger: {\n        serializedName: \"properties.trigger\",\n        type: {\n          name: \"Composite\",\n          className: \"TriggerUpdateParameters\"\n        }\n      },\n      credentials: {\n        serializedName: \"properties.credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"Credentials\"\n        }\n      },\n      logTemplate: {\n        serializedName: \"properties.logTemplate\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PlatformUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PlatformUpdateParameters\",\n    modelProperties: {\n      os: {\n        serializedName: \"os\",\n        type: {\n          name: \"String\"\n        }\n      },\n      architecture: {\n        serializedName: \"architecture\",\n        type: {\n          name: \"String\"\n        }\n      },\n      variant: {\n        serializedName: \"variant\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TaskStepUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TaskStepUpdateParameters\",\n    uberParent: \"TaskStepUpdateParameters\",\n    polymorphicDiscriminator: {\n      serializedName: \"type\",\n      clientName: \"type\"\n    },\n    modelProperties: {\n      type: {\n        serializedName: \"type\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      contextPath: {\n        serializedName: \"contextPath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contextAccessToken: {\n        serializedName: \"contextAccessToken\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TriggerUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TriggerUpdateParameters\",\n    modelProperties: {\n      timerTriggers: {\n        serializedName: \"timerTriggers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TimerTriggerUpdateParameters\"\n            }\n          }\n        }\n      },\n      sourceTriggers: {\n        serializedName: \"sourceTriggers\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SourceTriggerUpdateParameters\"\n            }\n          }\n        }\n      },\n      baseImageTrigger: {\n        serializedName: \"baseImageTrigger\",\n        type: {\n          name: \"Composite\",\n          className: \"BaseImageTriggerUpdateParameters\"\n        }\n      }\n    }\n  }\n};\n\nexport const TimerTriggerUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TimerTriggerUpdateParameters\",\n    modelProperties: {\n      schedule: {\n        serializedName: \"schedule\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SourceTriggerUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SourceTriggerUpdateParameters\",\n    modelProperties: {\n      sourceRepository: {\n        serializedName: \"sourceRepository\",\n        type: {\n          name: \"Composite\",\n          className: \"SourceUpdateParameters\"\n        }\n      },\n      sourceTriggerEvents: {\n        serializedName: \"sourceTriggerEvents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const SourceUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SourceUpdateParameters\",\n    modelProperties: {\n      sourceControlType: {\n        serializedName: \"sourceControlType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      repositoryUrl: {\n        serializedName: \"repositoryUrl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      branch: {\n        serializedName: \"branch\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sourceControlAuthProperties: {\n        serializedName: \"sourceControlAuthProperties\",\n        type: {\n          name: \"Composite\",\n          className: \"AuthInfoUpdateParameters\"\n        }\n      }\n    }\n  }\n};\n\nexport const AuthInfoUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AuthInfoUpdateParameters\",\n    modelProperties: {\n      tokenType: {\n        serializedName: \"tokenType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      token: {\n        serializedName: \"token\",\n        type: {\n          name: \"String\"\n        }\n      },\n      refreshToken: {\n        serializedName: \"refreshToken\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scope: {\n        serializedName: \"scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      expiresIn: {\n        serializedName: \"expiresIn\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const BaseImageTriggerUpdateParameters: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"BaseImageTriggerUpdateParameters\",\n    modelProperties: {\n      baseImageTriggerType: {\n        serializedName: \"baseImageTriggerType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      updateTriggerEndpoint: {\n        serializedName: \"updateTriggerEndpoint\",\n        type: {\n          name: \"String\"\n        }\n      },\n      updateTriggerPayloadType: {\n        serializedName: \"updateTriggerPayloadType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageAccountProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"StorageAccountProperties\",\n    modelProperties: {\n      id: {\n        serializedName: \"id\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PackageType: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PackageType\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      endpoint: {\n        serializedName: \"endpoint\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ActiveDirectoryObject: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ActiveDirectoryObject\",\n    modelProperties: {\n      objectId: {\n        serializedName: \"objectId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      tenantId: {\n        serializedName: \"tenantId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RunFilter: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RunFilter\",\n    modelProperties: {\n      runId: {\n        serializedName: \"runId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      runType: {\n        serializedName: \"runType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createTime: {\n        serializedName: \"createTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      finishTime: {\n        serializedName: \"finishTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      outputImageManifests: {\n        serializedName: \"outputImageManifests\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isArchiveEnabled: {\n        serializedName: \"isArchiveEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      taskName: {\n        serializedName: \"taskName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      agentPoolName: {\n        serializedName: \"agentPoolName\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Argument: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Argument\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      isSecret: {\n        defaultValue: false,\n        serializedName: \"isSecret\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const SetValue: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"SetValue\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      value: {\n        serializedName: \"value\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      isSecret: {\n        defaultValue: false,\n        serializedName: \"isSecret\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const OverrideTaskStepProperties: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"OverrideTaskStepProperties\",\n    modelProperties: {\n      contextPath: {\n        serializedName: \"contextPath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      file: {\n        serializedName: \"file\",\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Argument\"\n            }\n          }\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SetValue\"\n            }\n          }\n        }\n      },\n      updateTriggerToken: {\n        serializedName: \"updateTriggerToken\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateEndpointConnection: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpointConnection\",\n    modelProperties: {\n      ...ProxyResource.type.modelProperties,\n      privateEndpoint: {\n        serializedName: \"properties.privateEndpoint\",\n        type: {\n          name: \"Composite\",\n          className: \"PrivateEndpoint\"\n        }\n      },\n      privateLinkServiceConnectionState: {\n        serializedName: \"properties.privateLinkServiceConnectionState\",\n        type: {\n          name: \"Composite\",\n          className: \"PrivateLinkServiceConnectionState\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ScopeMap: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ScopeMap\",\n    modelProperties: {\n      ...ProxyResource.type.modelProperties,\n      description: {\n        serializedName: \"properties.description\",\n        type: {\n          name: \"String\"\n        }\n      },\n      typePropertiesType: {\n        serializedName: \"properties.type\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      creationDate: {\n        serializedName: \"properties.creationDate\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      actions: {\n        serializedName: \"properties.actions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Token: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Token\",\n    modelProperties: {\n      ...ProxyResource.type.modelProperties,\n      creationDate: {\n        serializedName: \"properties.creationDate\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      scopeMapId: {\n        serializedName: \"properties.scopeMapId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"properties.credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"TokenCredentialsProperties\"\n        }\n      },\n      status: {\n        serializedName: \"properties.status\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Run: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Run\",\n    modelProperties: {\n      ...ProxyResource.type.modelProperties,\n      runId: {\n        serializedName: \"properties.runId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"properties.status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastUpdatedTime: {\n        serializedName: \"properties.lastUpdatedTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      runType: {\n        serializedName: \"properties.runType\",\n        type: {\n          name: \"String\"\n        }\n      },\n      agentPoolName: {\n        serializedName: \"properties.agentPoolName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      createTime: {\n        serializedName: \"properties.createTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      startTime: {\n        serializedName: \"properties.startTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      finishTime: {\n        serializedName: \"properties.finishTime\",\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      outputImages: {\n        serializedName: \"properties.outputImages\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"ImageDescriptor\"\n            }\n          }\n        }\n      },\n      task: {\n        serializedName: \"properties.task\",\n        type: {\n          name: \"String\"\n        }\n      },\n      imageUpdateTrigger: {\n        serializedName: \"properties.imageUpdateTrigger\",\n        type: {\n          name: \"Composite\",\n          className: \"ImageUpdateTrigger\"\n        }\n      },\n      sourceTrigger: {\n        serializedName: \"properties.sourceTrigger\",\n        type: {\n          name: \"Composite\",\n          className: \"SourceTriggerDescriptor\"\n        }\n      },\n      timerTrigger: {\n        serializedName: \"properties.timerTrigger\",\n        type: {\n          name: \"Composite\",\n          className: \"TimerTriggerDescriptor\"\n        }\n      },\n      platform: {\n        serializedName: \"properties.platform\",\n        type: {\n          name: \"Composite\",\n          className: \"PlatformProperties\"\n        }\n      },\n      agentConfiguration: {\n        serializedName: \"properties.agentConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"AgentProperties\"\n        }\n      },\n      sourceRegistryAuth: {\n        serializedName: \"properties.sourceRegistryAuth\",\n        type: {\n          name: \"String\"\n        }\n      },\n      customRegistries: {\n        serializedName: \"properties.customRegistries\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      runErrorMessage: {\n        serializedName: \"properties.runErrorMessage\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      updateTriggerToken: {\n        serializedName: \"properties.updateTriggerToken\",\n        type: {\n          name: \"String\"\n        }\n      },\n      logArtifact: {\n        serializedName: \"properties.logArtifact\",\n        type: {\n          name: \"Composite\",\n          className: \"ImageDescriptor\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isArchiveEnabled: {\n        defaultValue: false,\n        serializedName: \"properties.isArchiveEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const TaskRun: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TaskRun\",\n    modelProperties: {\n      ...ProxyResource.type.modelProperties,\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityProperties\"\n        }\n      },\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      runRequest: {\n        serializedName: \"properties.runRequest\",\n        type: {\n          name: \"Composite\",\n          className: \"RunRequest\"\n        }\n      },\n      runResult: {\n        serializedName: \"properties.runResult\",\n        type: {\n          name: \"Composite\",\n          className: \"Run\"\n        }\n      },\n      forceUpdateTag: {\n        serializedName: \"properties.forceUpdateTag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Registry: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Registry\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      sku: {\n        serializedName: \"sku\",\n        type: {\n          name: \"Composite\",\n          className: \"Sku\"\n        }\n      },\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityProperties\"\n        }\n      },\n      loginServer: {\n        serializedName: \"properties.loginServer\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      creationDate: {\n        serializedName: \"properties.creationDate\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"properties.status\",\n        type: {\n          name: \"Composite\",\n          className: \"Status\"\n        }\n      },\n      adminUserEnabled: {\n        defaultValue: false,\n        serializedName: \"properties.adminUserEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      networkRuleSet: {\n        serializedName: \"properties.networkRuleSet\",\n        type: {\n          name: \"Composite\",\n          className: \"NetworkRuleSet\"\n        }\n      },\n      policies: {\n        serializedName: \"properties.policies\",\n        type: {\n          name: \"Composite\",\n          className: \"Policies\"\n        }\n      },\n      encryption: {\n        serializedName: \"properties.encryption\",\n        type: {\n          name: \"Composite\",\n          className: \"EncryptionProperty\"\n        }\n      },\n      dataEndpointEnabled: {\n        serializedName: \"properties.dataEndpointEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      dataEndpointHostNames: {\n        serializedName: \"properties.dataEndpointHostNames\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      privateEndpointConnections: {\n        serializedName: \"properties.privateEndpointConnections\",\n        readOnly: true,\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"PrivateEndpointConnection\"\n            }\n          }\n        }\n      },\n      publicNetworkAccess: {\n        serializedName: \"properties.publicNetworkAccess\",\n        type: {\n          name: \"String\"\n        }\n      },\n      networkRuleBypassOptions: {\n        serializedName: \"properties.networkRuleBypassOptions\",\n        type: {\n          name: \"String\"\n        }\n      },\n      zoneRedundancy: {\n        serializedName: \"properties.zoneRedundancy\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Replication: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Replication\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      status: {\n        serializedName: \"properties.status\",\n        type: {\n          name: \"Composite\",\n          className: \"Status\"\n        }\n      },\n      regionEndpointEnabled: {\n        defaultValue: true,\n        serializedName: \"properties.regionEndpointEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      zoneRedundancy: {\n        serializedName: \"properties.zoneRedundancy\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Webhook: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Webhook\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      status: {\n        serializedName: \"properties.status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      scope: {\n        serializedName: \"properties.scope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      actions: {\n        serializedName: \"properties.actions\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const AgentPool: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"AgentPool\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      count: {\n        serializedName: \"properties.count\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      tier: {\n        serializedName: \"properties.tier\",\n        type: {\n          name: \"String\"\n        }\n      },\n      os: {\n        serializedName: \"properties.os\",\n        type: {\n          name: \"String\"\n        }\n      },\n      virtualNetworkSubnetResourceId: {\n        serializedName: \"properties.virtualNetworkSubnetResourceId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Task: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Task\",\n    modelProperties: {\n      ...Resource.type.modelProperties,\n      identity: {\n        serializedName: \"identity\",\n        type: {\n          name: \"Composite\",\n          className: \"IdentityProperties\"\n        }\n      },\n      provisioningState: {\n        serializedName: \"properties.provisioningState\",\n        readOnly: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      creationDate: {\n        serializedName: \"properties.creationDate\",\n        readOnly: true,\n        type: {\n          name: \"DateTime\"\n        }\n      },\n      status: {\n        serializedName: \"properties.status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      platform: {\n        serializedName: \"properties.platform\",\n        type: {\n          name: \"Composite\",\n          className: \"PlatformProperties\"\n        }\n      },\n      agentConfiguration: {\n        serializedName: \"properties.agentConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"AgentProperties\"\n        }\n      },\n      agentPoolName: {\n        serializedName: \"properties.agentPoolName\",\n        type: {\n          name: \"String\"\n        }\n      },\n      timeout: {\n        defaultValue: 3600,\n        constraints: {\n          InclusiveMaximum: 28800,\n          InclusiveMinimum: 300\n        },\n        serializedName: \"properties.timeout\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      step: {\n        serializedName: \"properties.step\",\n        type: {\n          name: \"Composite\",\n          className: \"TaskStepProperties\"\n        }\n      },\n      trigger: {\n        serializedName: \"properties.trigger\",\n        type: {\n          name: \"Composite\",\n          className: \"TriggerProperties\"\n        }\n      },\n      credentials: {\n        serializedName: \"properties.credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"Credentials\"\n        }\n      },\n      logTemplate: {\n        serializedName: \"properties.logTemplate\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isSystemTask: {\n        defaultValue: false,\n        serializedName: \"properties.isSystemTask\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const Event: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"Event\",\n    modelProperties: {\n      ...EventInfo.type.modelProperties,\n      eventRequestMessage: {\n        serializedName: \"eventRequestMessage\",\n        type: {\n          name: \"Composite\",\n          className: \"EventRequestMessage\"\n        }\n      },\n      eventResponseMessage: {\n        serializedName: \"eventResponseMessage\",\n        type: {\n          name: \"Composite\",\n          className: \"EventResponseMessage\"\n        }\n      }\n    }\n  }\n};\n\nexport const DockerBuildRequest: coreClient.CompositeMapper = {\n  serializedName: \"DockerBuildRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"DockerBuildRequest\",\n    uberParent: \"RunRequest\",\n    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...RunRequest.type.modelProperties,\n      imageNames: {\n        serializedName: \"imageNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      isPushEnabled: {\n        defaultValue: true,\n        serializedName: \"isPushEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      noCache: {\n        defaultValue: false,\n        serializedName: \"noCache\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      dockerFilePath: {\n        serializedName: \"dockerFilePath\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Argument\"\n            }\n          }\n        }\n      },\n      timeout: {\n        defaultValue: 3600,\n        constraints: {\n          InclusiveMaximum: 28800,\n          InclusiveMinimum: 300\n        },\n        serializedName: \"timeout\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      platform: {\n        serializedName: \"platform\",\n        type: {\n          name: \"Composite\",\n          className: \"PlatformProperties\"\n        }\n      },\n      agentConfiguration: {\n        serializedName: \"agentConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"AgentProperties\"\n        }\n      },\n      sourceLocation: {\n        serializedName: \"sourceLocation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"Credentials\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileTaskRunRequest: coreClient.CompositeMapper = {\n  serializedName: \"FileTaskRunRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"FileTaskRunRequest\",\n    uberParent: \"RunRequest\",\n    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...RunRequest.type.modelProperties,\n      taskFilePath: {\n        serializedName: \"taskFilePath\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      valuesFilePath: {\n        serializedName: \"valuesFilePath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SetValue\"\n            }\n          }\n        }\n      },\n      timeout: {\n        defaultValue: 3600,\n        constraints: {\n          InclusiveMaximum: 28800,\n          InclusiveMinimum: 300\n        },\n        serializedName: \"timeout\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      platform: {\n        serializedName: \"platform\",\n        type: {\n          name: \"Composite\",\n          className: \"PlatformProperties\"\n        }\n      },\n      agentConfiguration: {\n        serializedName: \"agentConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"AgentProperties\"\n        }\n      },\n      sourceLocation: {\n        serializedName: \"sourceLocation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"Credentials\"\n        }\n      }\n    }\n  }\n};\n\nexport const TaskRunRequest: coreClient.CompositeMapper = {\n  serializedName: \"TaskRunRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"TaskRunRequest\",\n    uberParent: \"RunRequest\",\n    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...RunRequest.type.modelProperties,\n      taskId: {\n        serializedName: \"taskId\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      overrideTaskStepProperties: {\n        serializedName: \"overrideTaskStepProperties\",\n        type: {\n          name: \"Composite\",\n          className: \"OverrideTaskStepProperties\"\n        }\n      }\n    }\n  }\n};\n\nexport const EncodedTaskRunRequest: coreClient.CompositeMapper = {\n  serializedName: \"EncodedTaskRunRequest\",\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTaskRunRequest\",\n    uberParent: \"RunRequest\",\n    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...RunRequest.type.modelProperties,\n      encodedTaskContent: {\n        serializedName: \"encodedTaskContent\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      encodedValuesContent: {\n        serializedName: \"encodedValuesContent\",\n        type: {\n          name: \"String\"\n        }\n      },\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SetValue\"\n            }\n          }\n        }\n      },\n      timeout: {\n        defaultValue: 3600,\n        constraints: {\n          InclusiveMaximum: 28800,\n          InclusiveMinimum: 300\n        },\n        serializedName: \"timeout\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      platform: {\n        serializedName: \"platform\",\n        type: {\n          name: \"Composite\",\n          className: \"PlatformProperties\"\n        }\n      },\n      agentConfiguration: {\n        serializedName: \"agentConfiguration\",\n        type: {\n          name: \"Composite\",\n          className: \"AgentProperties\"\n        }\n      },\n      sourceLocation: {\n        serializedName: \"sourceLocation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      credentials: {\n        serializedName: \"credentials\",\n        type: {\n          name: \"Composite\",\n          className: \"Credentials\"\n        }\n      }\n    }\n  }\n};\n\nexport const DockerBuildStep: coreClient.CompositeMapper = {\n  serializedName: \"Docker\",\n  type: {\n    name: \"Composite\",\n    className: \"DockerBuildStep\",\n    uberParent: \"TaskStepProperties\",\n    polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TaskStepProperties.type.modelProperties,\n      imageNames: {\n        serializedName: \"imageNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      isPushEnabled: {\n        defaultValue: true,\n        serializedName: \"isPushEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      noCache: {\n        defaultValue: false,\n        serializedName: \"noCache\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      dockerFilePath: {\n        serializedName: \"dockerFilePath\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Argument\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const FileTaskStep: coreClient.CompositeMapper = {\n  serializedName: \"FileTask\",\n  type: {\n    name: \"Composite\",\n    className: \"FileTaskStep\",\n    uberParent: \"TaskStepProperties\",\n    polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TaskStepProperties.type.modelProperties,\n      taskFilePath: {\n        serializedName: \"taskFilePath\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      valuesFilePath: {\n        serializedName: \"valuesFilePath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SetValue\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EncodedTaskStep: coreClient.CompositeMapper = {\n  serializedName: \"EncodedTask\",\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTaskStep\",\n    uberParent: \"TaskStepProperties\",\n    polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TaskStepProperties.type.modelProperties,\n      encodedTaskContent: {\n        serializedName: \"encodedTaskContent\",\n        required: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      encodedValuesContent: {\n        serializedName: \"encodedValuesContent\",\n        type: {\n          name: \"String\"\n        }\n      },\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SetValue\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DockerBuildStepUpdateParameters: coreClient.CompositeMapper = {\n  serializedName: \"Docker\",\n  type: {\n    name: \"Composite\",\n    className: \"DockerBuildStepUpdateParameters\",\n    uberParent: \"TaskStepUpdateParameters\",\n    polymorphicDiscriminator:\n      TaskStepUpdateParameters.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TaskStepUpdateParameters.type.modelProperties,\n      imageNames: {\n        serializedName: \"imageNames\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      isPushEnabled: {\n        serializedName: \"isPushEnabled\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      noCache: {\n        serializedName: \"noCache\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      dockerFilePath: {\n        serializedName: \"dockerFilePath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      arguments: {\n        serializedName: \"arguments\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Argument\"\n            }\n          }\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileTaskStepUpdateParameters: coreClient.CompositeMapper = {\n  serializedName: \"FileTask\",\n  type: {\n    name: \"Composite\",\n    className: \"FileTaskStepUpdateParameters\",\n    uberParent: \"TaskStepUpdateParameters\",\n    polymorphicDiscriminator:\n      TaskStepUpdateParameters.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TaskStepUpdateParameters.type.modelProperties,\n      taskFilePath: {\n        serializedName: \"taskFilePath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      valuesFilePath: {\n        serializedName: \"valuesFilePath\",\n        type: {\n          name: \"String\"\n        }\n      },\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SetValue\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const EncodedTaskStepUpdateParameters: coreClient.CompositeMapper = {\n  serializedName: \"EncodedTask\",\n  type: {\n    name: \"Composite\",\n    className: \"EncodedTaskStepUpdateParameters\",\n    uberParent: \"TaskStepUpdateParameters\",\n    polymorphicDiscriminator:\n      TaskStepUpdateParameters.type.polymorphicDiscriminator,\n    modelProperties: {\n      ...TaskStepUpdateParameters.type.modelProperties,\n      encodedTaskContent: {\n        serializedName: \"encodedTaskContent\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encodedValuesContent: {\n        serializedName: \"encodedValuesContent\",\n        type: {\n          name: \"String\"\n        }\n      },\n      values: {\n        serializedName: \"values\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SetValue\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const RegistriesImportImageHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistriesImportImageHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegistriesCreateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistriesCreateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegistriesDeleteHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistriesDeleteHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegistriesUpdateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistriesUpdateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const RegistriesGenerateCredentialsHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"RegistriesGenerateCredentialsHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateEndpointConnectionsCreateOrUpdateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpointConnectionsCreateOrUpdateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"PrivateEndpointConnectionsDeleteHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ReplicationsCreateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ReplicationsCreateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ReplicationsDeleteHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ReplicationsDeleteHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ReplicationsUpdateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ReplicationsUpdateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ScopeMapsCreateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ScopeMapsCreateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ScopeMapsDeleteHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ScopeMapsDeleteHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ScopeMapsUpdateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"ScopeMapsUpdateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokensCreateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokensCreateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokensDeleteHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokensDeleteHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TokensUpdateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"TokensUpdateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const WebhooksCreateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"WebhooksCreateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const WebhooksDeleteHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"WebhooksDeleteHeaders\",\n    modelProperties: {\n      location: {\n        serializedName: \"location\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const WebhooksUpdateHeaders: coreClient.CompositeMapper = {\n  type: {\n    name: \"Composite\",\n    className: \"WebhooksUpdateHeaders\",\n    modelProperties: {\n      azureAsyncOperation: {\n        serializedName: \"azure-asyncoperation\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport let discriminators = {\n  RunRequest: RunRequest,\n  TaskStepProperties: TaskStepProperties,\n  TaskStepUpdateParameters: TaskStepUpdateParameters,\n  \"RunRequest.DockerBuildRequest\": DockerBuildRequest,\n  \"RunRequest.FileTaskRunRequest\": FileTaskRunRequest,\n  \"RunRequest.TaskRunRequest\": TaskRunRequest,\n  \"RunRequest.EncodedTaskRunRequest\": EncodedTaskRunRequest,\n  \"TaskStepProperties.Docker\": DockerBuildStep,\n  \"TaskStepProperties.FileTask\": FileTaskStep,\n  \"TaskStepProperties.EncodedTask\": EncodedTaskStep,\n  \"TaskStepUpdateParameters.Docker\": DockerBuildStepUpdateParameters,\n  \"TaskStepUpdateParameters.FileTask\": FileTaskStepUpdateParameters,\n  \"TaskStepUpdateParameters.EncodedTask\": EncodedTaskStepUpdateParameters\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter\n} from \"@azure/core-client\";\nimport {\n  ImportImageParameters as ImportImageParametersMapper,\n  RegistryNameCheckRequest as RegistryNameCheckRequestMapper,\n  Registry as RegistryMapper,\n  RegistryUpdateParameters as RegistryUpdateParametersMapper,\n  RegenerateCredentialParameters as RegenerateCredentialParametersMapper,\n  GenerateCredentialsParameters as GenerateCredentialsParametersMapper,\n  RunRequest as RunRequestMapper,\n  PrivateEndpointConnection as PrivateEndpointConnectionMapper,\n  Replication as ReplicationMapper,\n  ReplicationUpdateParameters as ReplicationUpdateParametersMapper,\n  ScopeMap as ScopeMapMapper,\n  ScopeMapUpdateParameters as ScopeMapUpdateParametersMapper,\n  Token as TokenMapper,\n  TokenUpdateParameters as TokenUpdateParametersMapper,\n  WebhookCreateParameters as WebhookCreateParametersMapper,\n  WebhookUpdateParameters as WebhookUpdateParametersMapper,\n  AgentPool as AgentPoolMapper,\n  AgentPoolUpdateParameters as AgentPoolUpdateParametersMapper,\n  RunUpdateParameters as RunUpdateParametersMapper,\n  TaskRun as TaskRunMapper,\n  TaskRunUpdateParameters as TaskRunUpdateParametersMapper,\n  Task as TaskMapper,\n  TaskUpdateParameters as TaskUpdateParametersMapper\n} from \"../models/mappers\";\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const parameters: OperationParameter = {\n  parameterPath: \"parameters\",\n  mapper: ImportImageParametersMapper\n};\n\nexport const $host: OperationURLParameter = {\n  parameterPath: \"$host\",\n  mapper: {\n    serializedName: \"$host\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const apiVersion: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2022-12-01\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const subscriptionId: OperationURLParameter = {\n  parameterPath: \"subscriptionId\",\n  mapper: {\n    serializedName: \"subscriptionId\",\n    required: true,\n    type: {\n      name: \"Uuid\"\n    }\n  }\n};\n\nexport const resourceGroupName: OperationURLParameter = {\n  parameterPath: \"resourceGroupName\",\n  mapper: {\n    constraints: {\n      MaxLength: 90,\n      MinLength: 1\n    },\n    serializedName: \"resourceGroupName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const registryName: OperationURLParameter = {\n  parameterPath: \"registryName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-zA-Z0-9]*$\"),\n      MaxLength: 50,\n      MinLength: 5\n    },\n    serializedName: \"registryName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const registryNameCheckRequest: OperationParameter = {\n  parameterPath: \"registryNameCheckRequest\",\n  mapper: RegistryNameCheckRequestMapper\n};\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const registry: OperationParameter = {\n  parameterPath: \"registry\",\n  mapper: RegistryMapper\n};\n\nexport const registryUpdateParameters: OperationParameter = {\n  parameterPath: \"registryUpdateParameters\",\n  mapper: RegistryUpdateParametersMapper\n};\n\nexport const groupName: OperationURLParameter = {\n  parameterPath: \"groupName\",\n  mapper: {\n    serializedName: \"groupName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const regenerateCredentialParameters: OperationParameter = {\n  parameterPath: \"regenerateCredentialParameters\",\n  mapper: RegenerateCredentialParametersMapper\n};\n\nexport const generateCredentialsParameters: OperationParameter = {\n  parameterPath: \"generateCredentialsParameters\",\n  mapper: GenerateCredentialsParametersMapper\n};\n\nexport const runRequest: OperationParameter = {\n  parameterPath: \"runRequest\",\n  mapper: RunRequestMapper\n};\n\nexport const resourceGroupName1: OperationURLParameter = {\n  parameterPath: \"resourceGroupName\",\n  mapper: {\n    constraints: {\n      MinLength: 1\n    },\n    serializedName: \"resourceGroupName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const apiVersion1: OperationQueryParameter = {\n  parameterPath: \"apiVersion\",\n  mapper: {\n    defaultValue: \"2019-06-01-preview\",\n    isConstant: true,\n    serializedName: \"api-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const nextLink: OperationURLParameter = {\n  parameterPath: \"nextLink\",\n  mapper: {\n    serializedName: \"nextLink\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const privateEndpointConnectionName: OperationURLParameter = {\n  parameterPath: \"privateEndpointConnectionName\",\n  mapper: {\n    serializedName: \"privateEndpointConnectionName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const privateEndpointConnection: OperationParameter = {\n  parameterPath: \"privateEndpointConnection\",\n  mapper: PrivateEndpointConnectionMapper\n};\n\nexport const replicationName: OperationURLParameter = {\n  parameterPath: \"replicationName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-zA-Z0-9]*$\"),\n      MaxLength: 50,\n      MinLength: 5\n    },\n    serializedName: \"replicationName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const replication: OperationParameter = {\n  parameterPath: \"replication\",\n  mapper: ReplicationMapper\n};\n\nexport const replicationUpdateParameters: OperationParameter = {\n  parameterPath: \"replicationUpdateParameters\",\n  mapper: ReplicationUpdateParametersMapper\n};\n\nexport const scopeMapName: OperationURLParameter = {\n  parameterPath: \"scopeMapName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-zA-Z0-9-_]*$\"),\n      MaxLength: 50,\n      MinLength: 5\n    },\n    serializedName: \"scopeMapName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const scopeMapCreateParameters: OperationParameter = {\n  parameterPath: \"scopeMapCreateParameters\",\n  mapper: ScopeMapMapper\n};\n\nexport const scopeMapUpdateParameters: OperationParameter = {\n  parameterPath: \"scopeMapUpdateParameters\",\n  mapper: ScopeMapUpdateParametersMapper\n};\n\nexport const tokenName: OperationURLParameter = {\n  parameterPath: \"tokenName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-zA-Z0-9-]*$\"),\n      MaxLength: 50,\n      MinLength: 5\n    },\n    serializedName: \"tokenName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const tokenCreateParameters: OperationParameter = {\n  parameterPath: \"tokenCreateParameters\",\n  mapper: TokenMapper\n};\n\nexport const tokenUpdateParameters: OperationParameter = {\n  parameterPath: \"tokenUpdateParameters\",\n  mapper: TokenUpdateParametersMapper\n};\n\nexport const webhookName: OperationURLParameter = {\n  parameterPath: \"webhookName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-zA-Z0-9]*$\"),\n      MaxLength: 50,\n      MinLength: 5\n    },\n    serializedName: \"webhookName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const webhookCreateParameters: OperationParameter = {\n  parameterPath: \"webhookCreateParameters\",\n  mapper: WebhookCreateParametersMapper\n};\n\nexport const webhookUpdateParameters: OperationParameter = {\n  parameterPath: \"webhookUpdateParameters\",\n  mapper: WebhookUpdateParametersMapper\n};\n\nexport const agentPoolName: OperationURLParameter = {\n  parameterPath: \"agentPoolName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-zA-Z0-9-]*$\"),\n      MaxLength: 20,\n      MinLength: 3\n    },\n    serializedName: \"agentPoolName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const agentPool: OperationParameter = {\n  parameterPath: \"agentPool\",\n  mapper: AgentPoolMapper\n};\n\nexport const updateParameters: OperationParameter = {\n  parameterPath: \"updateParameters\",\n  mapper: AgentPoolUpdateParametersMapper\n};\n\nexport const filter: OperationQueryParameter = {\n  parameterPath: [\"options\", \"filter\"],\n  mapper: {\n    serializedName: \"$filter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const top: OperationQueryParameter = {\n  parameterPath: [\"options\", \"top\"],\n  mapper: {\n    serializedName: \"$top\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const runId: OperationURLParameter = {\n  parameterPath: \"runId\",\n  mapper: {\n    serializedName: \"runId\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const runUpdateParameters: OperationParameter = {\n  parameterPath: \"runUpdateParameters\",\n  mapper: RunUpdateParametersMapper\n};\n\nexport const taskRunName: OperationURLParameter = {\n  parameterPath: \"taskRunName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-zA-Z0-9-]*$\"),\n      MaxLength: 50,\n      MinLength: 5\n    },\n    serializedName: \"taskRunName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const taskRun: OperationParameter = {\n  parameterPath: \"taskRun\",\n  mapper: TaskRunMapper\n};\n\nexport const updateParameters1: OperationParameter = {\n  parameterPath: \"updateParameters\",\n  mapper: TaskRunUpdateParametersMapper\n};\n\nexport const taskName: OperationURLParameter = {\n  parameterPath: \"taskName\",\n  mapper: {\n    constraints: {\n      Pattern: new RegExp(\"^[a-zA-Z0-9-_]*$\"),\n      MaxLength: 50,\n      MinLength: 5\n    },\n    serializedName: \"taskName\",\n    required: true,\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const taskCreateParameters: OperationParameter = {\n  parameterPath: \"taskCreateParameters\",\n  mapper: TaskMapper\n};\n\nexport const taskUpdateParameters: OperationParameter = {\n  parameterPath: \"taskUpdateParameters\",\n  mapper: TaskUpdateParametersMapper\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { LongRunningOperation, LroResponse } from \"@azure/core-lro\";\n\nexport function createLroSpec<T>(inputs: {\n  sendOperationFn: (args: any, spec: any) => Promise<LroResponse<T>>;\n  args: Record<string, unknown>;\n  spec: {\n    readonly requestBody?: unknown;\n    readonly path?: string;\n    readonly httpMethod: string;\n  } & Record<string, any>;\n}): LongRunningOperation<T> {\n  const { args, spec, sendOperationFn } = inputs;\n  return {\n    requestMethod: spec.httpMethod,\n    requestPath: spec.path!,\n    sendInitialRequest: () => sendOperationFn(args, spec),\n    sendPollRequest: (\n      path: string,\n      options?: { abortSignal?: AbortSignalLike }\n    ) => {\n      const { requestBody, ...restSpec } = spec;\n      return sendOperationFn(args, {\n        ...restSpec,\n        httpMethod: \"GET\",\n        path,\n        abortSignal: options?.abortSignal\n      });\n    }\n  };\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Registries } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  Registry,\n  RegistriesListNextOptionalParams,\n  RegistriesListOptionalParams,\n  RegistriesListResponse,\n  RegistriesListByResourceGroupNextOptionalParams,\n  RegistriesListByResourceGroupOptionalParams,\n  RegistriesListByResourceGroupResponse,\n  PrivateLinkResource,\n  RegistriesListPrivateLinkResourcesNextOptionalParams,\n  RegistriesListPrivateLinkResourcesOptionalParams,\n  RegistriesListPrivateLinkResourcesResponse,\n  ImportImageParameters,\n  RegistriesImportImageOptionalParams,\n  RegistryNameCheckRequest,\n  RegistriesCheckNameAvailabilityOptionalParams,\n  RegistriesCheckNameAvailabilityResponse,\n  RegistriesGetOptionalParams,\n  RegistriesGetResponse,\n  RegistriesCreateOptionalParams,\n  RegistriesCreateResponse,\n  RegistriesDeleteOptionalParams,\n  RegistryUpdateParameters,\n  RegistriesUpdateOptionalParams,\n  RegistriesUpdateResponse,\n  RegistriesListUsagesOptionalParams,\n  RegistriesListUsagesResponse,\n  RegistriesGetPrivateLinkResourceOptionalParams,\n  RegistriesGetPrivateLinkResourceResponse,\n  RegistriesListCredentialsOptionalParams,\n  RegistriesListCredentialsResponse,\n  RegenerateCredentialParameters,\n  RegistriesRegenerateCredentialOptionalParams,\n  RegistriesRegenerateCredentialResponse,\n  GenerateCredentialsParameters,\n  RegistriesGenerateCredentialsOptionalParams,\n  RegistriesGenerateCredentialsResponse,\n  RunRequestUnion,\n  RegistriesScheduleRunOptionalParams,\n  RegistriesScheduleRunResponse,\n  RegistriesGetBuildSourceUploadUrlOptionalParams,\n  RegistriesGetBuildSourceUploadUrlResponse,\n  RegistriesListNextResponse,\n  RegistriesListByResourceGroupNextResponse,\n  RegistriesListPrivateLinkResourcesNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Registries operations. */\nexport class RegistriesImpl implements Registries {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class Registries class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the container registries under the specified subscription.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: RegistriesListOptionalParams\n  ): PagedAsyncIterableIterator<Registry> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: RegistriesListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Registry[]> {\n    let result: RegistriesListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: RegistriesListOptionalParams\n  ): AsyncIterableIterator<Registry> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the container registries under the specified resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  public listByResourceGroup(\n    resourceGroupName: string,\n    options?: RegistriesListByResourceGroupOptionalParams\n  ): PagedAsyncIterableIterator<Registry> {\n    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listByResourceGroupPagingPage(\n          resourceGroupName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listByResourceGroupPagingPage(\n    resourceGroupName: string,\n    options?: RegistriesListByResourceGroupOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Registry[]> {\n    let result: RegistriesListByResourceGroupResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listByResourceGroup(resourceGroupName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listByResourceGroupNext(\n        resourceGroupName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listByResourceGroupPagingAll(\n    resourceGroupName: string,\n    options?: RegistriesListByResourceGroupOptionalParams\n  ): AsyncIterableIterator<Registry> {\n    for await (const page of this.listByResourceGroupPagingPage(\n      resourceGroupName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists the private link resources for a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  public listPrivateLinkResources(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RegistriesListPrivateLinkResourcesOptionalParams\n  ): PagedAsyncIterableIterator<PrivateLinkResource> {\n    const iter = this.listPrivateLinkResourcesPagingAll(\n      resourceGroupName,\n      registryName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPrivateLinkResourcesPagingPage(\n          resourceGroupName,\n          registryName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPrivateLinkResourcesPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RegistriesListPrivateLinkResourcesOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PrivateLinkResource[]> {\n    let result: RegistriesListPrivateLinkResourcesResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listPrivateLinkResources(\n        resourceGroupName,\n        registryName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listPrivateLinkResourcesNext(\n        resourceGroupName,\n        registryName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPrivateLinkResourcesPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RegistriesListPrivateLinkResourcesOptionalParams\n  ): AsyncIterableIterator<PrivateLinkResource> {\n    for await (const page of this.listPrivateLinkResourcesPagingPage(\n      resourceGroupName,\n      registryName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Copies an image to this container registry from the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param parameters The parameters specifying the image to copy and the source container registry.\n   * @param options The options parameters.\n   */\n  async beginImportImage(\n    resourceGroupName: string,\n    registryName: string,\n    parameters: ImportImageParameters,\n    options?: RegistriesImportImageOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, parameters, options },\n      spec: importImageOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Copies an image to this container registry from the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param parameters The parameters specifying the image to copy and the source container registry.\n   * @param options The options parameters.\n   */\n  async beginImportImageAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    parameters: ImportImageParameters,\n    options?: RegistriesImportImageOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginImportImage(\n      resourceGroupName,\n      registryName,\n      parameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Checks whether the container registry name is available for use. The name must contain only\n   * alphanumeric characters, be globally unique, and between 5 and 50 characters in length.\n   * @param registryNameCheckRequest The object containing information for the availability request.\n   * @param options The options parameters.\n   */\n  checkNameAvailability(\n    registryNameCheckRequest: RegistryNameCheckRequest,\n    options?: RegistriesCheckNameAvailabilityOptionalParams\n  ): Promise<RegistriesCheckNameAvailabilityResponse> {\n    return this.client.sendOperationRequest(\n      { registryNameCheckRequest, options },\n      checkNameAvailabilityOperationSpec\n    );\n  }\n\n  /**\n   * Lists all the container registries under the specified subscription.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: RegistriesListOptionalParams\n  ): Promise<RegistriesListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * Lists all the container registries under the specified resource group.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroup(\n    resourceGroupName: string,\n    options?: RegistriesListByResourceGroupOptionalParams\n  ): Promise<RegistriesListByResourceGroupResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, options },\n      listByResourceGroupOperationSpec\n    );\n  }\n\n  /**\n   * Gets the properties of the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RegistriesGetOptionalParams\n  ): Promise<RegistriesGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param registry The parameters for creating a container registry.\n   * @param options The options parameters.\n   */\n  async beginCreate(\n    resourceGroupName: string,\n    registryName: string,\n    registry: Registry,\n    options?: RegistriesCreateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<RegistriesCreateResponse>,\n      RegistriesCreateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<RegistriesCreateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, registry, options },\n      spec: createOperationSpec\n    });\n    const poller = await createHttpPoller<\n      RegistriesCreateResponse,\n      OperationState<RegistriesCreateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param registry The parameters for creating a container registry.\n   * @param options The options parameters.\n   */\n  async beginCreateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    registry: Registry,\n    options?: RegistriesCreateOptionalParams\n  ): Promise<RegistriesCreateResponse> {\n    const poller = await this.beginCreate(\n      resourceGroupName,\n      registryName,\n      registry,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RegistriesDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RegistriesDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      registryName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param registryUpdateParameters The parameters for updating a container registry.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    registryName: string,\n    registryUpdateParameters: RegistryUpdateParameters,\n    options?: RegistriesUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<RegistriesUpdateResponse>,\n      RegistriesUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<RegistriesUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        registryUpdateParameters,\n        options\n      },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      RegistriesUpdateResponse,\n      OperationState<RegistriesUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param registryUpdateParameters The parameters for updating a container registry.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    registryUpdateParameters: RegistryUpdateParameters,\n    options?: RegistriesUpdateOptionalParams\n  ): Promise<RegistriesUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      registryName,\n      registryUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the quota usages for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  listUsages(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RegistriesListUsagesOptionalParams\n  ): Promise<RegistriesListUsagesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listUsagesOperationSpec\n    );\n  }\n\n  /**\n   * Lists the private link resources for a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  private _listPrivateLinkResources(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RegistriesListPrivateLinkResourcesOptionalParams\n  ): Promise<RegistriesListPrivateLinkResourcesResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listPrivateLinkResourcesOperationSpec\n    );\n  }\n\n  /**\n   * Gets a private link resource by a specified group name for a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param groupName The name of the private link resource.\n   * @param options The options parameters.\n   */\n  getPrivateLinkResource(\n    resourceGroupName: string,\n    registryName: string,\n    groupName: string,\n    options?: RegistriesGetPrivateLinkResourceOptionalParams\n  ): Promise<RegistriesGetPrivateLinkResourceResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, groupName, options },\n      getPrivateLinkResourceOperationSpec\n    );\n  }\n\n  /**\n   * Lists the login credentials for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  listCredentials(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RegistriesListCredentialsOptionalParams\n  ): Promise<RegistriesListCredentialsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listCredentialsOperationSpec\n    );\n  }\n\n  /**\n   * Regenerates one of the login credentials for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param regenerateCredentialParameters Specifies name of the password which should be regenerated --\n   *                                       password or password2.\n   * @param options The options parameters.\n   */\n  regenerateCredential(\n    resourceGroupName: string,\n    registryName: string,\n    regenerateCredentialParameters: RegenerateCredentialParameters,\n    options?: RegistriesRegenerateCredentialOptionalParams\n  ): Promise<RegistriesRegenerateCredentialResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        registryName,\n        regenerateCredentialParameters,\n        options\n      },\n      regenerateCredentialOperationSpec\n    );\n  }\n\n  /**\n   * Generate keys for a token of a specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param generateCredentialsParameters The parameters for generating credentials.\n   * @param options The options parameters.\n   */\n  async beginGenerateCredentials(\n    resourceGroupName: string,\n    registryName: string,\n    generateCredentialsParameters: GenerateCredentialsParameters,\n    options?: RegistriesGenerateCredentialsOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<RegistriesGenerateCredentialsResponse>,\n      RegistriesGenerateCredentialsResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<RegistriesGenerateCredentialsResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        generateCredentialsParameters,\n        options\n      },\n      spec: generateCredentialsOperationSpec\n    });\n    const poller = await createHttpPoller<\n      RegistriesGenerateCredentialsResponse,\n      OperationState<RegistriesGenerateCredentialsResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Generate keys for a token of a specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param generateCredentialsParameters The parameters for generating credentials.\n   * @param options The options parameters.\n   */\n  async beginGenerateCredentialsAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    generateCredentialsParameters: GenerateCredentialsParameters,\n    options?: RegistriesGenerateCredentialsOptionalParams\n  ): Promise<RegistriesGenerateCredentialsResponse> {\n    const poller = await this.beginGenerateCredentials(\n      resourceGroupName,\n      registryName,\n      generateCredentialsParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Schedules a new run based on the request parameters and add it to the run queue.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param runRequest The parameters of a run that needs to scheduled.\n   * @param options The options parameters.\n   */\n  async beginScheduleRun(\n    resourceGroupName: string,\n    registryName: string,\n    runRequest: RunRequestUnion,\n    options?: RegistriesScheduleRunOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<RegistriesScheduleRunResponse>,\n      RegistriesScheduleRunResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<RegistriesScheduleRunResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, runRequest, options },\n      spec: scheduleRunOperationSpec\n    });\n    const poller = await createHttpPoller<\n      RegistriesScheduleRunResponse,\n      OperationState<RegistriesScheduleRunResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Schedules a new run based on the request parameters and add it to the run queue.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param runRequest The parameters of a run that needs to scheduled.\n   * @param options The options parameters.\n   */\n  async beginScheduleRunAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    runRequest: RunRequestUnion,\n    options?: RegistriesScheduleRunOptionalParams\n  ): Promise<RegistriesScheduleRunResponse> {\n    const poller = await this.beginScheduleRun(\n      resourceGroupName,\n      registryName,\n      runRequest,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get the upload location for the user to be able to upload the source.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  getBuildSourceUploadUrl(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RegistriesGetBuildSourceUploadUrlOptionalParams\n  ): Promise<RegistriesGetBuildSourceUploadUrlResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      getBuildSourceUploadUrlOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: RegistriesListNextOptionalParams\n  ): Promise<RegistriesListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n\n  /**\n   * ListByResourceGroupNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.\n   * @param options The options parameters.\n   */\n  private _listByResourceGroupNext(\n    resourceGroupName: string,\n    nextLink: string,\n    options?: RegistriesListByResourceGroupNextOptionalParams\n  ): Promise<RegistriesListByResourceGroupNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, nextLink, options },\n      listByResourceGroupNextOperationSpec\n    );\n  }\n\n  /**\n   * ListPrivateLinkResourcesNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param nextLink The nextLink from the previous successful call to the ListPrivateLinkResources\n   *                 method.\n   * @param options The options parameters.\n   */\n  private _listPrivateLinkResourcesNext(\n    resourceGroupName: string,\n    registryName: string,\n    nextLink: string,\n    options?: RegistriesListPrivateLinkResourcesNextOptionalParams\n  ): Promise<RegistriesListPrivateLinkResourcesNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, nextLink, options },\n      listPrivateLinkResourcesNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst importImageOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage\",\n  httpMethod: \"POST\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {} },\n  requestBody: Parameters.parameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/checkNameAvailability\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegistryNameStatus\n    }\n  },\n  requestBody: Parameters.registryNameCheckRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/registries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegistryListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host, Parameters.subscriptionId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegistryListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Registry\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Registry\n    },\n    201: {\n      bodyMapper: Mappers.Registry\n    },\n    202: {\n      bodyMapper: Mappers.Registry\n    },\n    204: {\n      bodyMapper: Mappers.Registry\n    }\n  },\n  requestBody: Parameters.registry,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Registry\n    },\n    201: {\n      bodyMapper: Mappers.Registry\n    },\n    202: {\n      bodyMapper: Mappers.Registry\n    },\n    204: {\n      bodyMapper: Mappers.Registry\n    }\n  },\n  requestBody: Parameters.registryUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst listUsagesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegistryUsageListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listPrivateLinkResourcesOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateLinkResourceListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getPrivateLinkResourceOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources/{groupName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateLinkResource\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.groupName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listCredentialsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegistryListCredentialsResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst regenerateCredentialOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegistryListCredentialsResult\n    }\n  },\n  requestBody: Parameters.regenerateCredentialParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst generateCredentialsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/generateCredentials\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GenerateCredentialsResult\n    },\n    201: {\n      bodyMapper: Mappers.GenerateCredentialsResult\n    },\n    202: {\n      bodyMapper: Mappers.GenerateCredentialsResult\n    },\n    204: {\n      bodyMapper: Mappers.GenerateCredentialsResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.generateCredentialsParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst scheduleRunOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Run\n    },\n    201: {\n      bodyMapper: Mappers.Run\n    },\n    202: {\n      bodyMapper: Mappers.Run\n    },\n    204: {\n      bodyMapper: Mappers.Run\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.runRequest,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getBuildSourceUploadUrlOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SourceUploadDefinition\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegistryListResult\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RegistryListResult\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listPrivateLinkResourcesNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateLinkResourceListResult\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Operations } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  OperationDefinition,\n  OperationsListNextOptionalParams,\n  OperationsListOptionalParams,\n  OperationsListResponse,\n  OperationsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Operations operations. */\nexport class OperationsImpl implements Operations {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class Operations class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all of the available Azure Container Registry REST API operations.\n   * @param options The options parameters.\n   */\n  public list(\n    options?: OperationsListOptionalParams\n  ): PagedAsyncIterableIterator<OperationDefinition> {\n    const iter = this.listPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(options, settings);\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    options?: OperationsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<OperationDefinition[]> {\n    let result: OperationsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    options?: OperationsListOptionalParams\n  ): AsyncIterableIterator<OperationDefinition> {\n    for await (const page of this.listPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all of the available Azure Container Registry REST API operations.\n   * @param options The options parameters.\n   */\n  private _list(\n    options?: OperationsListOptionalParams\n  ): Promise<OperationsListResponse> {\n    return this.client.sendOperationRequest({ options }, listOperationSpec);\n  }\n\n  /**\n   * ListNext\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    nextLink: string,\n    options?: OperationsListNextOptionalParams\n  ): Promise<OperationsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/providers/Microsoft.ContainerRegistry/operations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.$host],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationListResult\n    }\n  },\n  urlParameters: [Parameters.$host, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { PrivateEndpointConnections } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  PrivateEndpointConnection,\n  PrivateEndpointConnectionsListNextOptionalParams,\n  PrivateEndpointConnectionsListOptionalParams,\n  PrivateEndpointConnectionsListResponse,\n  PrivateEndpointConnectionsGetOptionalParams,\n  PrivateEndpointConnectionsGetResponse,\n  PrivateEndpointConnectionsCreateOrUpdateOptionalParams,\n  PrivateEndpointConnectionsCreateOrUpdateResponse,\n  PrivateEndpointConnectionsDeleteOptionalParams,\n  PrivateEndpointConnectionsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing PrivateEndpointConnections operations. */\nexport class PrivateEndpointConnectionsImpl\n  implements PrivateEndpointConnections {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class PrivateEndpointConnections class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all private endpoint connections in a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: PrivateEndpointConnectionsListOptionalParams\n  ): PagedAsyncIterableIterator<PrivateEndpointConnection> {\n    const iter = this.listPagingAll(resourceGroupName, registryName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          registryName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    options?: PrivateEndpointConnectionsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<PrivateEndpointConnection[]> {\n    let result: PrivateEndpointConnectionsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, registryName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        registryName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    options?: PrivateEndpointConnectionsListOptionalParams\n  ): AsyncIterableIterator<PrivateEndpointConnection> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      registryName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * List all private endpoint connections in a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: PrivateEndpointConnectionsListOptionalParams\n  ): Promise<PrivateEndpointConnectionsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Get the specified private endpoint connection associated with the container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    registryName: string,\n    privateEndpointConnectionName: string,\n    options?: PrivateEndpointConnectionsGetOptionalParams\n  ): Promise<PrivateEndpointConnectionsGetResponse> {\n    return this.client.sendOperationRequest(\n      {\n        resourceGroupName,\n        registryName,\n        privateEndpointConnectionName,\n        options\n      },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Update the state of specified private endpoint connection associated with the container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param privateEndpointConnection The parameters for creating a private endpoint connection.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdate(\n    resourceGroupName: string,\n    registryName: string,\n    privateEndpointConnectionName: string,\n    privateEndpointConnection: PrivateEndpointConnection,\n    options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>,\n      PrivateEndpointConnectionsCreateOrUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        privateEndpointConnectionName,\n        privateEndpointConnection,\n        options\n      },\n      spec: createOrUpdateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      PrivateEndpointConnectionsCreateOrUpdateResponse,\n      OperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Update the state of specified private endpoint connection associated with the container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param privateEndpointConnection The parameters for creating a private endpoint connection.\n   * @param options The options parameters.\n   */\n  async beginCreateOrUpdateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    privateEndpointConnectionName: string,\n    privateEndpointConnection: PrivateEndpointConnection,\n    options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams\n  ): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse> {\n    const poller = await this.beginCreateOrUpdate(\n      resourceGroupName,\n      registryName,\n      privateEndpointConnectionName,\n      privateEndpointConnection,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes the specified private endpoint connection associated with the container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    registryName: string,\n    privateEndpointConnectionName: string,\n    options?: PrivateEndpointConnectionsDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        privateEndpointConnectionName,\n        options\n      },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes the specified private endpoint connection associated with the container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param privateEndpointConnectionName The name of the private endpoint connection.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    privateEndpointConnectionName: string,\n    options?: PrivateEndpointConnectionsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      registryName,\n      privateEndpointConnectionName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    registryName: string,\n    nextLink: string,\n    options?: PrivateEndpointConnectionsListNextOptionalParams\n  ): Promise<PrivateEndpointConnectionsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnectionListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.privateEndpointConnectionName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOrUpdateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    201: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    202: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    },\n    204: {\n      bodyMapper: Mappers.PrivateEndpointConnection\n    }\n  },\n  requestBody: Parameters.privateEndpointConnection,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.privateEndpointConnectionName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateEndpointConnections/{privateEndpointConnectionName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.privateEndpointConnectionName\n  ],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PrivateEndpointConnectionListResult\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Replications } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  Replication,\n  ReplicationsListNextOptionalParams,\n  ReplicationsListOptionalParams,\n  ReplicationsListResponse,\n  ReplicationsGetOptionalParams,\n  ReplicationsGetResponse,\n  ReplicationsCreateOptionalParams,\n  ReplicationsCreateResponse,\n  ReplicationsDeleteOptionalParams,\n  ReplicationUpdateParameters,\n  ReplicationsUpdateOptionalParams,\n  ReplicationsUpdateResponse,\n  ReplicationsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Replications operations. */\nexport class ReplicationsImpl implements Replications {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class Replications class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the replications for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: ReplicationsListOptionalParams\n  ): PagedAsyncIterableIterator<Replication> {\n    const iter = this.listPagingAll(resourceGroupName, registryName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          registryName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    options?: ReplicationsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Replication[]> {\n    let result: ReplicationsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, registryName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        registryName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    options?: ReplicationsListOptionalParams\n  ): AsyncIterableIterator<Replication> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      registryName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the replications for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: ReplicationsListOptionalParams\n  ): Promise<ReplicationsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Gets the properties of the specified replication.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param replicationName The name of the replication.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    registryName: string,\n    replicationName: string,\n    options?: ReplicationsGetOptionalParams\n  ): Promise<ReplicationsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, replicationName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates a replication for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param replicationName The name of the replication.\n   * @param replication The parameters for creating a replication.\n   * @param options The options parameters.\n   */\n  async beginCreate(\n    resourceGroupName: string,\n    registryName: string,\n    replicationName: string,\n    replication: Replication,\n    options?: ReplicationsCreateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ReplicationsCreateResponse>,\n      ReplicationsCreateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<ReplicationsCreateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        replicationName,\n        replication,\n        options\n      },\n      spec: createOperationSpec\n    });\n    const poller = await createHttpPoller<\n      ReplicationsCreateResponse,\n      OperationState<ReplicationsCreateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a replication for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param replicationName The name of the replication.\n   * @param replication The parameters for creating a replication.\n   * @param options The options parameters.\n   */\n  async beginCreateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    replicationName: string,\n    replication: Replication,\n    options?: ReplicationsCreateOptionalParams\n  ): Promise<ReplicationsCreateResponse> {\n    const poller = await this.beginCreate(\n      resourceGroupName,\n      registryName,\n      replicationName,\n      replication,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a replication from a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param replicationName The name of the replication.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    registryName: string,\n    replicationName: string,\n    options?: ReplicationsDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, replicationName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a replication from a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param replicationName The name of the replication.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    replicationName: string,\n    options?: ReplicationsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      registryName,\n      replicationName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates a replication for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param replicationName The name of the replication.\n   * @param replicationUpdateParameters The parameters for updating a replication.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    registryName: string,\n    replicationName: string,\n    replicationUpdateParameters: ReplicationUpdateParameters,\n    options?: ReplicationsUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ReplicationsUpdateResponse>,\n      ReplicationsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<ReplicationsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        replicationName,\n        replicationUpdateParameters,\n        options\n      },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      ReplicationsUpdateResponse,\n      OperationState<ReplicationsUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates a replication for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param replicationName The name of the replication.\n   * @param replicationUpdateParameters The parameters for updating a replication.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    replicationName: string,\n    replicationUpdateParameters: ReplicationUpdateParameters,\n    options?: ReplicationsUpdateOptionalParams\n  ): Promise<ReplicationsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      registryName,\n      replicationName,\n      replicationUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    registryName: string,\n    nextLink: string,\n    options?: ReplicationsListNextOptionalParams\n  ): Promise<ReplicationsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ReplicationListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Replication\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.replicationName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Replication\n    },\n    201: {\n      bodyMapper: Mappers.Replication\n    },\n    202: {\n      bodyMapper: Mappers.Replication\n    },\n    204: {\n      bodyMapper: Mappers.Replication\n    }\n  },\n  requestBody: Parameters.replication,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.replicationName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.replicationName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Replication\n    },\n    201: {\n      bodyMapper: Mappers.Replication\n    },\n    202: {\n      bodyMapper: Mappers.Replication\n    },\n    204: {\n      bodyMapper: Mappers.Replication\n    }\n  },\n  requestBody: Parameters.replicationUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.replicationName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ReplicationListResult\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { ScopeMaps } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  ScopeMap,\n  ScopeMapsListNextOptionalParams,\n  ScopeMapsListOptionalParams,\n  ScopeMapsListResponse,\n  ScopeMapsGetOptionalParams,\n  ScopeMapsGetResponse,\n  ScopeMapsCreateOptionalParams,\n  ScopeMapsCreateResponse,\n  ScopeMapsDeleteOptionalParams,\n  ScopeMapUpdateParameters,\n  ScopeMapsUpdateOptionalParams,\n  ScopeMapsUpdateResponse,\n  ScopeMapsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing ScopeMaps operations. */\nexport class ScopeMapsImpl implements ScopeMaps {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class ScopeMaps class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the scope maps for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: ScopeMapsListOptionalParams\n  ): PagedAsyncIterableIterator<ScopeMap> {\n    const iter = this.listPagingAll(resourceGroupName, registryName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          registryName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    options?: ScopeMapsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<ScopeMap[]> {\n    let result: ScopeMapsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, registryName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        registryName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    options?: ScopeMapsListOptionalParams\n  ): AsyncIterableIterator<ScopeMap> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      registryName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the scope maps for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: ScopeMapsListOptionalParams\n  ): Promise<ScopeMapsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Gets the properties of the specified scope map.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param scopeMapName The name of the scope map.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    registryName: string,\n    scopeMapName: string,\n    options?: ScopeMapsGetOptionalParams\n  ): Promise<ScopeMapsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, scopeMapName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates a scope map for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param scopeMapName The name of the scope map.\n   * @param scopeMapCreateParameters The parameters for creating a scope map.\n   * @param options The options parameters.\n   */\n  async beginCreate(\n    resourceGroupName: string,\n    registryName: string,\n    scopeMapName: string,\n    scopeMapCreateParameters: ScopeMap,\n    options?: ScopeMapsCreateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ScopeMapsCreateResponse>,\n      ScopeMapsCreateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<ScopeMapsCreateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        scopeMapName,\n        scopeMapCreateParameters,\n        options\n      },\n      spec: createOperationSpec\n    });\n    const poller = await createHttpPoller<\n      ScopeMapsCreateResponse,\n      OperationState<ScopeMapsCreateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a scope map for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param scopeMapName The name of the scope map.\n   * @param scopeMapCreateParameters The parameters for creating a scope map.\n   * @param options The options parameters.\n   */\n  async beginCreateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    scopeMapName: string,\n    scopeMapCreateParameters: ScopeMap,\n    options?: ScopeMapsCreateOptionalParams\n  ): Promise<ScopeMapsCreateResponse> {\n    const poller = await this.beginCreate(\n      resourceGroupName,\n      registryName,\n      scopeMapName,\n      scopeMapCreateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a scope map from a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param scopeMapName The name of the scope map.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    registryName: string,\n    scopeMapName: string,\n    options?: ScopeMapsDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, scopeMapName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a scope map from a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param scopeMapName The name of the scope map.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    scopeMapName: string,\n    options?: ScopeMapsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      registryName,\n      scopeMapName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates a scope map with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param scopeMapName The name of the scope map.\n   * @param scopeMapUpdateParameters The parameters for updating a scope map.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    registryName: string,\n    scopeMapName: string,\n    scopeMapUpdateParameters: ScopeMapUpdateParameters,\n    options?: ScopeMapsUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<ScopeMapsUpdateResponse>,\n      ScopeMapsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<ScopeMapsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        scopeMapName,\n        scopeMapUpdateParameters,\n        options\n      },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      ScopeMapsUpdateResponse,\n      OperationState<ScopeMapsUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates a scope map with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param scopeMapName The name of the scope map.\n   * @param scopeMapUpdateParameters The parameters for updating a scope map.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    scopeMapName: string,\n    scopeMapUpdateParameters: ScopeMapUpdateParameters,\n    options?: ScopeMapsUpdateOptionalParams\n  ): Promise<ScopeMapsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      registryName,\n      scopeMapName,\n      scopeMapUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    registryName: string,\n    nextLink: string,\n    options?: ScopeMapsListNextOptionalParams\n  ): Promise<ScopeMapsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ScopeMapListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ScopeMap\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.scopeMapName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ScopeMap\n    },\n    201: {\n      bodyMapper: Mappers.ScopeMap\n    },\n    202: {\n      bodyMapper: Mappers.ScopeMap\n    },\n    204: {\n      bodyMapper: Mappers.ScopeMap\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.scopeMapCreateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.scopeMapName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.scopeMapName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ScopeMap\n    },\n    201: {\n      bodyMapper: Mappers.ScopeMap\n    },\n    202: {\n      bodyMapper: Mappers.ScopeMap\n    },\n    204: {\n      bodyMapper: Mappers.ScopeMap\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.scopeMapUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.scopeMapName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ScopeMapListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Tokens } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  Token,\n  TokensListNextOptionalParams,\n  TokensListOptionalParams,\n  TokensListResponse,\n  TokensGetOptionalParams,\n  TokensGetResponse,\n  TokensCreateOptionalParams,\n  TokensCreateResponse,\n  TokensDeleteOptionalParams,\n  TokenUpdateParameters,\n  TokensUpdateOptionalParams,\n  TokensUpdateResponse,\n  TokensListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Tokens operations. */\nexport class TokensImpl implements Tokens {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class Tokens class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the tokens for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TokensListOptionalParams\n  ): PagedAsyncIterableIterator<Token> {\n    const iter = this.listPagingAll(resourceGroupName, registryName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          registryName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TokensListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Token[]> {\n    let result: TokensListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, registryName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        registryName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TokensListOptionalParams\n  ): AsyncIterableIterator<Token> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      registryName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the tokens for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TokensListOptionalParams\n  ): Promise<TokensListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Gets the properties of the specified token.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param tokenName The name of the token.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    registryName: string,\n    tokenName: string,\n    options?: TokensGetOptionalParams\n  ): Promise<TokensGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, tokenName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates a token for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param tokenName The name of the token.\n   * @param tokenCreateParameters The parameters for creating a token.\n   * @param options The options parameters.\n   */\n  async beginCreate(\n    resourceGroupName: string,\n    registryName: string,\n    tokenName: string,\n    tokenCreateParameters: Token,\n    options?: TokensCreateOptionalParams\n  ): Promise<\n    SimplePollerLike<OperationState<TokensCreateResponse>, TokensCreateResponse>\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TokensCreateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        tokenName,\n        tokenCreateParameters,\n        options\n      },\n      spec: createOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TokensCreateResponse,\n      OperationState<TokensCreateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a token for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param tokenName The name of the token.\n   * @param tokenCreateParameters The parameters for creating a token.\n   * @param options The options parameters.\n   */\n  async beginCreateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    tokenName: string,\n    tokenCreateParameters: Token,\n    options?: TokensCreateOptionalParams\n  ): Promise<TokensCreateResponse> {\n    const poller = await this.beginCreate(\n      resourceGroupName,\n      registryName,\n      tokenName,\n      tokenCreateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a token from a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param tokenName The name of the token.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    registryName: string,\n    tokenName: string,\n    options?: TokensDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, tokenName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a token from a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param tokenName The name of the token.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    tokenName: string,\n    options?: TokensDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      registryName,\n      tokenName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates a token with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param tokenName The name of the token.\n   * @param tokenUpdateParameters The parameters for updating a token.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    registryName: string,\n    tokenName: string,\n    tokenUpdateParameters: TokenUpdateParameters,\n    options?: TokensUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<OperationState<TokensUpdateResponse>, TokensUpdateResponse>\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TokensUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        tokenName,\n        tokenUpdateParameters,\n        options\n      },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TokensUpdateResponse,\n      OperationState<TokensUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates a token with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param tokenName The name of the token.\n   * @param tokenUpdateParameters The parameters for updating a token.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    tokenName: string,\n    tokenUpdateParameters: TokenUpdateParameters,\n    options?: TokensUpdateOptionalParams\n  ): Promise<TokensUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      registryName,\n      tokenName,\n      tokenUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    registryName: string,\n    nextLink: string,\n    options?: TokensListNextOptionalParams\n  ): Promise<TokensListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TokenListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Token\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.tokenName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Token\n    },\n    201: {\n      bodyMapper: Mappers.Token\n    },\n    202: {\n      bodyMapper: Mappers.Token\n    },\n    204: {\n      bodyMapper: Mappers.Token\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.tokenCreateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.tokenName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.tokenName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tokens/{tokenName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Token\n    },\n    201: {\n      bodyMapper: Mappers.Token\n    },\n    202: {\n      bodyMapper: Mappers.Token\n    },\n    204: {\n      bodyMapper: Mappers.Token\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.tokenUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.tokenName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TokenListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Webhooks } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  Webhook,\n  WebhooksListNextOptionalParams,\n  WebhooksListOptionalParams,\n  WebhooksListResponse,\n  Event,\n  WebhooksListEventsNextOptionalParams,\n  WebhooksListEventsOptionalParams,\n  WebhooksListEventsResponse,\n  WebhooksGetOptionalParams,\n  WebhooksGetResponse,\n  WebhookCreateParameters,\n  WebhooksCreateOptionalParams,\n  WebhooksCreateResponse,\n  WebhooksDeleteOptionalParams,\n  WebhookUpdateParameters,\n  WebhooksUpdateOptionalParams,\n  WebhooksUpdateResponse,\n  WebhooksPingOptionalParams,\n  WebhooksPingResponse,\n  WebhooksGetCallbackConfigOptionalParams,\n  WebhooksGetCallbackConfigResponse,\n  WebhooksListNextResponse,\n  WebhooksListEventsNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Webhooks operations. */\nexport class WebhooksImpl implements Webhooks {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class Webhooks class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the webhooks for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: WebhooksListOptionalParams\n  ): PagedAsyncIterableIterator<Webhook> {\n    const iter = this.listPagingAll(resourceGroupName, registryName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          registryName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    options?: WebhooksListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Webhook[]> {\n    let result: WebhooksListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, registryName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        registryName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    options?: WebhooksListOptionalParams\n  ): AsyncIterableIterator<Webhook> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      registryName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists recent events for the specified webhook.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param options The options parameters.\n   */\n  public listEvents(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    options?: WebhooksListEventsOptionalParams\n  ): PagedAsyncIterableIterator<Event> {\n    const iter = this.listEventsPagingAll(\n      resourceGroupName,\n      registryName,\n      webhookName,\n      options\n    );\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listEventsPagingPage(\n          resourceGroupName,\n          registryName,\n          webhookName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listEventsPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    options?: WebhooksListEventsOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Event[]> {\n    let result: WebhooksListEventsResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._listEvents(\n        resourceGroupName,\n        registryName,\n        webhookName,\n        options\n      );\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listEventsNext(\n        resourceGroupName,\n        registryName,\n        webhookName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listEventsPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    options?: WebhooksListEventsOptionalParams\n  ): AsyncIterableIterator<Event> {\n    for await (const page of this.listEventsPagingPage(\n      resourceGroupName,\n      registryName,\n      webhookName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the webhooks for the specified container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: WebhooksListOptionalParams\n  ): Promise<WebhooksListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Gets the properties of the specified webhook.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    options?: WebhooksGetOptionalParams\n  ): Promise<WebhooksGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, webhookName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates a webhook for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param webhookCreateParameters The parameters for creating a webhook.\n   * @param options The options parameters.\n   */\n  async beginCreate(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    webhookCreateParameters: WebhookCreateParameters,\n    options?: WebhooksCreateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<WebhooksCreateResponse>,\n      WebhooksCreateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<WebhooksCreateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        webhookName,\n        webhookCreateParameters,\n        options\n      },\n      spec: createOperationSpec\n    });\n    const poller = await createHttpPoller<\n      WebhooksCreateResponse,\n      OperationState<WebhooksCreateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a webhook for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param webhookCreateParameters The parameters for creating a webhook.\n   * @param options The options parameters.\n   */\n  async beginCreateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    webhookCreateParameters: WebhookCreateParameters,\n    options?: WebhooksCreateOptionalParams\n  ): Promise<WebhooksCreateResponse> {\n    const poller = await this.beginCreate(\n      resourceGroupName,\n      registryName,\n      webhookName,\n      webhookCreateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a webhook from a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    options?: WebhooksDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, webhookName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a webhook from a container registry.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    options?: WebhooksDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      registryName,\n      webhookName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates a webhook with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param webhookUpdateParameters The parameters for updating a webhook.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    webhookUpdateParameters: WebhookUpdateParameters,\n    options?: WebhooksUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<WebhooksUpdateResponse>,\n      WebhooksUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<WebhooksUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        webhookName,\n        webhookUpdateParameters,\n        options\n      },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      WebhooksUpdateResponse,\n      OperationState<WebhooksUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"azure-async-operation\"\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates a webhook with the specified parameters.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param webhookUpdateParameters The parameters for updating a webhook.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    webhookUpdateParameters: WebhookUpdateParameters,\n    options?: WebhooksUpdateOptionalParams\n  ): Promise<WebhooksUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      registryName,\n      webhookName,\n      webhookUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Triggers a ping event to be sent to the webhook.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param options The options parameters.\n   */\n  ping(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    options?: WebhooksPingOptionalParams\n  ): Promise<WebhooksPingResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, webhookName, options },\n      pingOperationSpec\n    );\n  }\n\n  /**\n   * Lists recent events for the specified webhook.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param options The options parameters.\n   */\n  private _listEvents(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    options?: WebhooksListEventsOptionalParams\n  ): Promise<WebhooksListEventsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, webhookName, options },\n      listEventsOperationSpec\n    );\n  }\n\n  /**\n   * Gets the configuration of service URI and custom headers for the webhook.\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param options The options parameters.\n   */\n  getCallbackConfig(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    options?: WebhooksGetCallbackConfigOptionalParams\n  ): Promise<WebhooksGetCallbackConfigResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, webhookName, options },\n      getCallbackConfigOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    registryName: string,\n    nextLink: string,\n    options?: WebhooksListNextOptionalParams\n  ): Promise<WebhooksListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n\n  /**\n   * ListEventsNext\n   * @param resourceGroupName The name of the resource group. The name is case insensitive.\n   * @param registryName The name of the container registry.\n   * @param webhookName The name of the webhook.\n   * @param nextLink The nextLink from the previous successful call to the ListEvents method.\n   * @param options The options parameters.\n   */\n  private _listEventsNext(\n    resourceGroupName: string,\n    registryName: string,\n    webhookName: string,\n    nextLink: string,\n    options?: WebhooksListEventsNextOptionalParams\n  ): Promise<WebhooksListEventsNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, webhookName, nextLink, options },\n      listEventsNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.WebhookListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Webhook\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.webhookName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Webhook\n    },\n    201: {\n      bodyMapper: Mappers.Webhook\n    },\n    202: {\n      bodyMapper: Mappers.Webhook\n    },\n    204: {\n      bodyMapper: Mappers.Webhook\n    }\n  },\n  requestBody: Parameters.webhookCreateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.webhookName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {}, 201: {}, 202: {}, 204: {} },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.webhookName\n  ],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Webhook\n    },\n    201: {\n      bodyMapper: Mappers.Webhook\n    },\n    202: {\n      bodyMapper: Mappers.Webhook\n    },\n    204: {\n      bodyMapper: Mappers.Webhook\n    }\n  },\n  requestBody: Parameters.webhookUpdateParameters,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.webhookName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst pingOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/ping\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventInfo\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.webhookName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listEventsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/listEvents\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventListResult\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.webhookName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCallbackConfigOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/webhooks/{webhookName}/getCallbackConfig\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CallbackConfig\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.webhookName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.WebhookListResult\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listEventsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.EventListResult\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.resourceGroupName,\n    Parameters.registryName,\n    Parameters.nextLink,\n    Parameters.webhookName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { AgentPools } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  AgentPool,\n  AgentPoolsListNextOptionalParams,\n  AgentPoolsListOptionalParams,\n  AgentPoolsListResponse,\n  AgentPoolsGetOptionalParams,\n  AgentPoolsGetResponse,\n  AgentPoolsCreateOptionalParams,\n  AgentPoolsCreateResponse,\n  AgentPoolsDeleteOptionalParams,\n  AgentPoolUpdateParameters,\n  AgentPoolsUpdateOptionalParams,\n  AgentPoolsUpdateResponse,\n  AgentPoolsGetQueueStatusOptionalParams,\n  AgentPoolsGetQueueStatusResponse,\n  AgentPoolsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing AgentPools operations. */\nexport class AgentPoolsImpl implements AgentPools {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class AgentPools class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the agent pools for a specified container registry.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: AgentPoolsListOptionalParams\n  ): PagedAsyncIterableIterator<AgentPool> {\n    const iter = this.listPagingAll(resourceGroupName, registryName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          registryName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    options?: AgentPoolsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<AgentPool[]> {\n    let result: AgentPoolsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, registryName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        registryName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    options?: AgentPoolsListOptionalParams\n  ): AsyncIterableIterator<AgentPool> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      registryName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the detailed information for a given agent pool.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param agentPoolName The name of the agent pool.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    registryName: string,\n    agentPoolName: string,\n    options?: AgentPoolsGetOptionalParams\n  ): Promise<AgentPoolsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, agentPoolName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates an agent pool for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param agentPoolName The name of the agent pool.\n   * @param agentPool The parameters of an agent pool that needs to scheduled.\n   * @param options The options parameters.\n   */\n  async beginCreate(\n    resourceGroupName: string,\n    registryName: string,\n    agentPoolName: string,\n    agentPool: AgentPool,\n    options?: AgentPoolsCreateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<AgentPoolsCreateResponse>,\n      AgentPoolsCreateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<AgentPoolsCreateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        agentPoolName,\n        agentPool,\n        options\n      },\n      spec: createOperationSpec\n    });\n    const poller = await createHttpPoller<\n      AgentPoolsCreateResponse,\n      OperationState<AgentPoolsCreateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates an agent pool for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param agentPoolName The name of the agent pool.\n   * @param agentPool The parameters of an agent pool that needs to scheduled.\n   * @param options The options parameters.\n   */\n  async beginCreateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    agentPoolName: string,\n    agentPool: AgentPool,\n    options?: AgentPoolsCreateOptionalParams\n  ): Promise<AgentPoolsCreateResponse> {\n    const poller = await this.beginCreate(\n      resourceGroupName,\n      registryName,\n      agentPoolName,\n      agentPool,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a specified agent pool resource.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param agentPoolName The name of the agent pool.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    registryName: string,\n    agentPoolName: string,\n    options?: AgentPoolsDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, agentPoolName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a specified agent pool resource.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param agentPoolName The name of the agent pool.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    agentPoolName: string,\n    options?: AgentPoolsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      registryName,\n      agentPoolName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates an agent pool with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param agentPoolName The name of the agent pool.\n   * @param updateParameters The parameters for updating an agent pool.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    registryName: string,\n    agentPoolName: string,\n    updateParameters: AgentPoolUpdateParameters,\n    options?: AgentPoolsUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<AgentPoolsUpdateResponse>,\n      AgentPoolsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<AgentPoolsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        agentPoolName,\n        updateParameters,\n        options\n      },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      AgentPoolsUpdateResponse,\n      OperationState<AgentPoolsUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates an agent pool with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param agentPoolName The name of the agent pool.\n   * @param updateParameters The parameters for updating an agent pool.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    agentPoolName: string,\n    updateParameters: AgentPoolUpdateParameters,\n    options?: AgentPoolsUpdateOptionalParams\n  ): Promise<AgentPoolsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      registryName,\n      agentPoolName,\n      updateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Lists all the agent pools for a specified container registry.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: AgentPoolsListOptionalParams\n  ): Promise<AgentPoolsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Gets the count of queued runs for a given agent pool.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param agentPoolName The name of the agent pool.\n   * @param options The options parameters.\n   */\n  getQueueStatus(\n    resourceGroupName: string,\n    registryName: string,\n    agentPoolName: string,\n    options?: AgentPoolsGetQueueStatusOptionalParams\n  ): Promise<AgentPoolsGetQueueStatusResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, agentPoolName, options },\n      getQueueStatusOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    registryName: string,\n    nextLink: string,\n    options?: AgentPoolsListNextOptionalParams\n  ): Promise<AgentPoolsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AgentPool\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.agentPoolName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AgentPool\n    },\n    201: {\n      bodyMapper: Mappers.AgentPool\n    },\n    202: {\n      bodyMapper: Mappers.AgentPool\n    },\n    204: {\n      bodyMapper: Mappers.AgentPool\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.agentPool,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.agentPoolName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.agentPoolName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AgentPool\n    },\n    201: {\n      bodyMapper: Mappers.AgentPool\n    },\n    202: {\n      bodyMapper: Mappers.AgentPool\n    },\n    204: {\n      bodyMapper: Mappers.AgentPool\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.updateParameters,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.agentPoolName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AgentPoolListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getQueueStatusOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/agentPools/{agentPoolName}/listQueueStatus\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AgentPoolQueueStatus\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.agentPoolName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AgentPoolListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Runs } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  Run,\n  RunsListNextOptionalParams,\n  RunsListOptionalParams,\n  RunsListResponse,\n  RunsGetOptionalParams,\n  RunsGetResponse,\n  RunUpdateParameters,\n  RunsUpdateOptionalParams,\n  RunsUpdateResponse,\n  RunsGetLogSasUrlOptionalParams,\n  RunsGetLogSasUrlResponse,\n  RunsCancelOptionalParams,\n  RunsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Runs operations. */\nexport class RunsImpl implements Runs {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class Runs class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Gets all the runs for a registry.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RunsListOptionalParams\n  ): PagedAsyncIterableIterator<Run> {\n    const iter = this.listPagingAll(resourceGroupName, registryName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          registryName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RunsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Run[]> {\n    let result: RunsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, registryName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        registryName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RunsListOptionalParams\n  ): AsyncIterableIterator<Run> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      registryName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets all the runs for a registry.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: RunsListOptionalParams\n  ): Promise<RunsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Gets the detailed information for a given run.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param runId The run ID.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    registryName: string,\n    runId: string,\n    options?: RunsGetOptionalParams\n  ): Promise<RunsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, runId, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Patch the run properties.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param runId The run ID.\n   * @param runUpdateParameters The run update properties.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    registryName: string,\n    runId: string,\n    runUpdateParameters: RunUpdateParameters,\n    options?: RunsUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<OperationState<RunsUpdateResponse>, RunsUpdateResponse>\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<RunsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        runId,\n        runUpdateParameters,\n        options\n      },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      RunsUpdateResponse,\n      OperationState<RunsUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Patch the run properties.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param runId The run ID.\n   * @param runUpdateParameters The run update properties.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    runId: string,\n    runUpdateParameters: RunUpdateParameters,\n    options?: RunsUpdateOptionalParams\n  ): Promise<RunsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      registryName,\n      runId,\n      runUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets a link to download the run logs.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param runId The run ID.\n   * @param options The options parameters.\n   */\n  getLogSasUrl(\n    resourceGroupName: string,\n    registryName: string,\n    runId: string,\n    options?: RunsGetLogSasUrlOptionalParams\n  ): Promise<RunsGetLogSasUrlResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, runId, options },\n      getLogSasUrlOperationSpec\n    );\n  }\n\n  /**\n   * Cancel an existing run.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param runId The run ID.\n   * @param options The options parameters.\n   */\n  async beginCancel(\n    resourceGroupName: string,\n    registryName: string,\n    runId: string,\n    options?: RunsCancelOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, runId, options },\n      spec: cancelOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Cancel an existing run.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param runId The run ID.\n   * @param options The options parameters.\n   */\n  async beginCancelAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    runId: string,\n    options?: RunsCancelOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginCancel(\n      resourceGroupName,\n      registryName,\n      runId,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    registryName: string,\n    nextLink: string,\n    options?: RunsListNextOptionalParams\n  ): Promise<RunsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RunListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1, Parameters.filter, Parameters.top],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Run\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.runId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Run\n    },\n    201: {\n      bodyMapper: Mappers.Run\n    },\n    202: {\n      bodyMapper: Mappers.Run\n    },\n    204: {\n      bodyMapper: Mappers.Run\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.runUpdateParameters,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.runId\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getLogSasUrlOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/listLogSasUrl\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RunGetLogResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.runId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst cancelOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/cancel\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.runId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RunListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { TaskRuns } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  TaskRun,\n  TaskRunsListNextOptionalParams,\n  TaskRunsListOptionalParams,\n  TaskRunsListResponse,\n  TaskRunsGetOptionalParams,\n  TaskRunsGetResponse,\n  TaskRunsCreateOptionalParams,\n  TaskRunsCreateResponse,\n  TaskRunsDeleteOptionalParams,\n  TaskRunUpdateParameters,\n  TaskRunsUpdateOptionalParams,\n  TaskRunsUpdateResponse,\n  TaskRunsGetDetailsOptionalParams,\n  TaskRunsGetDetailsResponse,\n  TaskRunsListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing TaskRuns operations. */\nexport class TaskRunsImpl implements TaskRuns {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class TaskRuns class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the task runs for a specified container registry.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TaskRunsListOptionalParams\n  ): PagedAsyncIterableIterator<TaskRun> {\n    const iter = this.listPagingAll(resourceGroupName, registryName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          registryName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TaskRunsListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<TaskRun[]> {\n    let result: TaskRunsListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, registryName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        registryName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TaskRunsListOptionalParams\n  ): AsyncIterableIterator<TaskRun> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      registryName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Gets the detailed information for a given task run.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskRunName The name of the task run.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    registryName: string,\n    taskRunName: string,\n    options?: TaskRunsGetOptionalParams\n  ): Promise<TaskRunsGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, taskRunName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates a task run for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskRunName The name of the task run.\n   * @param taskRun The parameters of a run that needs to scheduled.\n   * @param options The options parameters.\n   */\n  async beginCreate(\n    resourceGroupName: string,\n    registryName: string,\n    taskRunName: string,\n    taskRun: TaskRun,\n    options?: TaskRunsCreateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TaskRunsCreateResponse>,\n      TaskRunsCreateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TaskRunsCreateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, taskRunName, taskRun, options },\n      spec: createOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TaskRunsCreateResponse,\n      OperationState<TaskRunsCreateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a task run for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskRunName The name of the task run.\n   * @param taskRun The parameters of a run that needs to scheduled.\n   * @param options The options parameters.\n   */\n  async beginCreateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    taskRunName: string,\n    taskRun: TaskRun,\n    options?: TaskRunsCreateOptionalParams\n  ): Promise<TaskRunsCreateResponse> {\n    const poller = await this.beginCreate(\n      resourceGroupName,\n      registryName,\n      taskRunName,\n      taskRun,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a specified task run resource.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskRunName The name of the task run.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    registryName: string,\n    taskRunName: string,\n    options?: TaskRunsDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, taskRunName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a specified task run resource.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskRunName The name of the task run.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    taskRunName: string,\n    options?: TaskRunsDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      registryName,\n      taskRunName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates a task run with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskRunName The name of the task run.\n   * @param updateParameters The parameters for updating a task run.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    registryName: string,\n    taskRunName: string,\n    updateParameters: TaskRunUpdateParameters,\n    options?: TaskRunsUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TaskRunsUpdateResponse>,\n      TaskRunsUpdateResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TaskRunsUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        taskRunName,\n        updateParameters,\n        options\n      },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TaskRunsUpdateResponse,\n      OperationState<TaskRunsUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates a task run with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskRunName The name of the task run.\n   * @param updateParameters The parameters for updating a task run.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    taskRunName: string,\n    updateParameters: TaskRunUpdateParameters,\n    options?: TaskRunsUpdateOptionalParams\n  ): Promise<TaskRunsUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      registryName,\n      taskRunName,\n      updateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets the detailed information for a given task run that includes all secrets.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskRunName The name of the task run.\n   * @param options The options parameters.\n   */\n  getDetails(\n    resourceGroupName: string,\n    registryName: string,\n    taskRunName: string,\n    options?: TaskRunsGetDetailsOptionalParams\n  ): Promise<TaskRunsGetDetailsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, taskRunName, options },\n      getDetailsOperationSpec\n    );\n  }\n\n  /**\n   * Lists all the task runs for a specified container registry.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TaskRunsListOptionalParams\n  ): Promise<TaskRunsListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    registryName: string,\n    nextLink: string,\n    options?: TaskRunsListNextOptionalParams\n  ): Promise<TaskRunsListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TaskRun\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.taskRunName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TaskRun\n    },\n    201: {\n      bodyMapper: Mappers.TaskRun\n    },\n    202: {\n      bodyMapper: Mappers.TaskRun\n    },\n    204: {\n      bodyMapper: Mappers.TaskRun\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.taskRun,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.taskRunName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.taskRunName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TaskRun\n    },\n    201: {\n      bodyMapper: Mappers.TaskRun\n    },\n    202: {\n      bodyMapper: Mappers.TaskRun\n    },\n    204: {\n      bodyMapper: Mappers.TaskRun\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.updateParameters1,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.taskRunName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getDetailsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns/{taskRunName}/listDetails\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TaskRun\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.taskRunName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/taskRuns\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TaskRunListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TaskRunListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper\";\nimport { Tasks } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { ContainerRegistryManagementClient } from \"../containerRegistryManagementClient\";\nimport {\n  SimplePollerLike,\n  OperationState,\n  createHttpPoller\n} from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl\";\nimport {\n  Task,\n  TasksListNextOptionalParams,\n  TasksListOptionalParams,\n  TasksListResponse,\n  TasksGetOptionalParams,\n  TasksGetResponse,\n  TasksCreateOptionalParams,\n  TasksCreateResponse,\n  TasksDeleteOptionalParams,\n  TaskUpdateParameters,\n  TasksUpdateOptionalParams,\n  TasksUpdateResponse,\n  TasksGetDetailsOptionalParams,\n  TasksGetDetailsResponse,\n  TasksListNextResponse\n} from \"../models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Tasks operations. */\nexport class TasksImpl implements Tasks {\n  private readonly client: ContainerRegistryManagementClient;\n\n  /**\n   * Initialize a new instance of the class Tasks class.\n   * @param client Reference to the service client\n   */\n  constructor(client: ContainerRegistryManagementClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all the tasks for a specified container registry.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  public list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TasksListOptionalParams\n  ): PagedAsyncIterableIterator<Task> {\n    const iter = this.listPagingAll(resourceGroupName, registryName, options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.listPagingPage(\n          resourceGroupName,\n          registryName,\n          options,\n          settings\n        );\n      }\n    };\n  }\n\n  private async *listPagingPage(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TasksListOptionalParams,\n    settings?: PageSettings\n  ): AsyncIterableIterator<Task[]> {\n    let result: TasksListResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._list(resourceGroupName, registryName, options);\n      let page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._listNext(\n        resourceGroupName,\n        registryName,\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      let page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *listPagingAll(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TasksListOptionalParams\n  ): AsyncIterableIterator<Task> {\n    for await (const page of this.listPagingPage(\n      resourceGroupName,\n      registryName,\n      options\n    )) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all the tasks for a specified container registry.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param options The options parameters.\n   */\n  private _list(\n    resourceGroupName: string,\n    registryName: string,\n    options?: TasksListOptionalParams\n  ): Promise<TasksListResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, options },\n      listOperationSpec\n    );\n  }\n\n  /**\n   * Get the properties of a specified task.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskName The name of the container registry task.\n   * @param options The options parameters.\n   */\n  get(\n    resourceGroupName: string,\n    registryName: string,\n    taskName: string,\n    options?: TasksGetOptionalParams\n  ): Promise<TasksGetResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, taskName, options },\n      getOperationSpec\n    );\n  }\n\n  /**\n   * Creates a task for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskName The name of the container registry task.\n   * @param taskCreateParameters The parameters for creating a task.\n   * @param options The options parameters.\n   */\n  async beginCreate(\n    resourceGroupName: string,\n    registryName: string,\n    taskName: string,\n    taskCreateParameters: Task,\n    options?: TasksCreateOptionalParams\n  ): Promise<\n    SimplePollerLike<OperationState<TasksCreateResponse>, TasksCreateResponse>\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TasksCreateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        taskName,\n        taskCreateParameters,\n        options\n      },\n      spec: createOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TasksCreateResponse,\n      OperationState<TasksCreateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a task for a container registry with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskName The name of the container registry task.\n   * @param taskCreateParameters The parameters for creating a task.\n   * @param options The options parameters.\n   */\n  async beginCreateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    taskName: string,\n    taskCreateParameters: Task,\n    options?: TasksCreateOptionalParams\n  ): Promise<TasksCreateResponse> {\n    const poller = await this.beginCreate(\n      resourceGroupName,\n      registryName,\n      taskName,\n      taskCreateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Deletes a specified task.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskName The name of the container registry task.\n   * @param options The options parameters.\n   */\n  async beginDelete(\n    resourceGroupName: string,\n    registryName: string,\n    taskName: string,\n    options?: TasksDeleteOptionalParams\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<void> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { resourceGroupName, registryName, taskName, options },\n      spec: deleteOperationSpec\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a specified task.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskName The name of the container registry task.\n   * @param options The options parameters.\n   */\n  async beginDeleteAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    taskName: string,\n    options?: TasksDeleteOptionalParams\n  ): Promise<void> {\n    const poller = await this.beginDelete(\n      resourceGroupName,\n      registryName,\n      taskName,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Updates a task with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskName The name of the container registry task.\n   * @param taskUpdateParameters The parameters for updating a task.\n   * @param options The options parameters.\n   */\n  async beginUpdate(\n    resourceGroupName: string,\n    registryName: string,\n    taskName: string,\n    taskUpdateParameters: TaskUpdateParameters,\n    options?: TasksUpdateOptionalParams\n  ): Promise<\n    SimplePollerLike<OperationState<TasksUpdateResponse>, TasksUpdateResponse>\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ): Promise<TasksUpdateResponse> => {\n      return this.client.sendOperationRequest(args, spec);\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec\n    ) => {\n      let currentRawResponse:\n        | coreClient.FullOperationResponse\n        | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback\n        }\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON()\n        }\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: {\n        resourceGroupName,\n        registryName,\n        taskName,\n        taskUpdateParameters,\n        options\n      },\n      spec: updateOperationSpec\n    });\n    const poller = await createHttpPoller<\n      TasksUpdateResponse,\n      OperationState<TasksUpdateResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Updates a task with the specified parameters.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskName The name of the container registry task.\n   * @param taskUpdateParameters The parameters for updating a task.\n   * @param options The options parameters.\n   */\n  async beginUpdateAndWait(\n    resourceGroupName: string,\n    registryName: string,\n    taskName: string,\n    taskUpdateParameters: TaskUpdateParameters,\n    options?: TasksUpdateOptionalParams\n  ): Promise<TasksUpdateResponse> {\n    const poller = await this.beginUpdate(\n      resourceGroupName,\n      registryName,\n      taskName,\n      taskUpdateParameters,\n      options\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Returns a task with extended information that includes all secrets.\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param taskName The name of the container registry task.\n   * @param options The options parameters.\n   */\n  getDetails(\n    resourceGroupName: string,\n    registryName: string,\n    taskName: string,\n    options?: TasksGetDetailsOptionalParams\n  ): Promise<TasksGetDetailsResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, taskName, options },\n      getDetailsOperationSpec\n    );\n  }\n\n  /**\n   * ListNext\n   * @param resourceGroupName The name of the resource group to which the container registry belongs.\n   * @param registryName The name of the container registry.\n   * @param nextLink The nextLink from the previous successful call to the List method.\n   * @param options The options parameters.\n   */\n  private _listNext(\n    resourceGroupName: string,\n    registryName: string,\n    nextLink: string,\n    options?: TasksListNextOptionalParams\n  ): Promise<TasksListNextResponse> {\n    return this.client.sendOperationRequest(\n      { resourceGroupName, registryName, nextLink, options },\n      listNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TaskListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Task\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.taskName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst createOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Task\n    },\n    201: {\n      bodyMapper: Mappers.Task\n    },\n    202: {\n      bodyMapper: Mappers.Task\n    },\n    204: {\n      bodyMapper: Mappers.Task\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.taskCreateParameters,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.taskName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.taskName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Task\n    },\n    201: {\n      bodyMapper: Mappers.Task\n    },\n    202: {\n      bodyMapper: Mappers.Task\n    },\n    204: {\n      bodyMapper: Mappers.Task\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.taskUpdateParameters,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.taskName\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getDetailsOperationSpec: coreClient.OperationSpec = {\n  path:\n    \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}/listDetails\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Task\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.taskName\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TaskListResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [\n    Parameters.$host,\n    Parameters.subscriptionId,\n    Parameters.registryName,\n    Parameters.resourceGroupName1,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as coreAuth from \"@azure/core-auth\";\nimport {\n  RegistriesImpl,\n  OperationsImpl,\n  PrivateEndpointConnectionsImpl,\n  ReplicationsImpl,\n  ScopeMapsImpl,\n  TokensImpl,\n  WebhooksImpl,\n  AgentPoolsImpl,\n  RunsImpl,\n  TaskRunsImpl,\n  TasksImpl\n} from \"./operations\";\nimport {\n  Registries,\n  Operations,\n  PrivateEndpointConnections,\n  Replications,\n  ScopeMaps,\n  Tokens,\n  Webhooks,\n  AgentPools,\n  Runs,\n  TaskRuns,\n  Tasks\n} from \"./operationsInterfaces\";\nimport { ContainerRegistryManagementClientOptionalParams } from \"./models\";\n\nexport class ContainerRegistryManagementClient extends coreClient.ServiceClient {\n  $host: string;\n  subscriptionId: string;\n\n  /**\n   * Initializes a new instance of the ContainerRegistryManagementClient class.\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param subscriptionId The ID of the target subscription. The value must be an UUID.\n   * @param options The parameter options\n   */\n  constructor(\n    credentials: coreAuth.TokenCredential,\n    subscriptionId: string,\n    options?: ContainerRegistryManagementClientOptionalParams\n  ) {\n    if (credentials === undefined) {\n      throw new Error(\"'credentials' cannot be null\");\n    }\n    if (subscriptionId === undefined) {\n      throw new Error(\"'subscriptionId' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n    const defaults: ContainerRegistryManagementClientOptionalParams = {\n      requestContentType: \"application/json; charset=utf-8\",\n      credential: credentials\n    };\n\n    const packageDetails = `azsdk-js-arm-containerregistry/10.1.0`;\n    const userAgentPrefix =\n      options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n        : `${packageDetails}`;\n\n    const optionsWithDefaults = {\n      ...defaults,\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix\n      },\n      endpoint:\n        options.endpoint ?? options.baseUri ?? \"https://management.azure.com\"\n    };\n    super(optionsWithDefaults);\n\n    let bearerTokenAuthenticationPolicyFound: boolean = false;\n    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {\n      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();\n      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(\n        (pipelinePolicy) =>\n          pipelinePolicy.name ===\n          coreRestPipeline.bearerTokenAuthenticationPolicyName\n      );\n    }\n    if (\n      !options ||\n      !options.pipeline ||\n      options.pipeline.getOrderedPolicies().length == 0 ||\n      !bearerTokenAuthenticationPolicyFound\n    ) {\n      this.pipeline.removePolicy({\n        name: coreRestPipeline.bearerTokenAuthenticationPolicyName\n      });\n      this.pipeline.addPolicy(\n        coreRestPipeline.bearerTokenAuthenticationPolicy({\n          credential: credentials,\n          scopes:\n            optionsWithDefaults.credentialScopes ??\n            `${optionsWithDefaults.endpoint}/.default`,\n          challengeCallbacks: {\n            authorizeRequestOnChallenge:\n              coreClient.authorizeRequestOnClaimChallenge\n          }\n        })\n      );\n    }\n    // Parameter assignments\n    this.subscriptionId = subscriptionId;\n\n    // Assigning values to Constant parameters\n    this.$host = options.$host || \"https://management.azure.com\";\n    this.registries = new RegistriesImpl(this);\n    this.operations = new OperationsImpl(this);\n    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);\n    this.replications = new ReplicationsImpl(this);\n    this.scopeMaps = new ScopeMapsImpl(this);\n    this.tokens = new TokensImpl(this);\n    this.webhooks = new WebhooksImpl(this);\n    this.agentPools = new AgentPoolsImpl(this);\n    this.runs = new RunsImpl(this);\n    this.taskRuns = new TaskRunsImpl(this);\n    this.tasks = new TasksImpl(this);\n  }\n\n  registries: Registries;\n  operations: Operations;\n  privateEndpointConnections: PrivateEndpointConnections;\n  replications: Replications;\n  scopeMaps: ScopeMaps;\n  tokens: Tokens;\n  webhooks: Webhooks;\n  agentPools: AgentPools;\n  runs: Runs;\n  taskRuns: TaskRuns;\n  tasks: Tasks;\n}\n"],"names":["KnownImportMode","KnownConnectionStatus","KnownActionsRequired","KnownProvisioningState","KnownCreatedByType","KnownLastModifiedByType","KnownSkuName","KnownSkuTier","KnownDefaultAction","KnownAction","KnownPolicyStatus","KnownTrustPolicyType","KnownExportPolicyStatus","KnownEncryptionStatus","KnownPublicNetworkAccess","KnownNetworkRuleBypassOptions","KnownZoneRedundancy","KnownRegistryUsageUnit","KnownTokenCertificateName","KnownTokenPasswordName","KnownTokenStatus","KnownWebhookStatus","KnownWebhookAction","KnownOS","KnownRunStatus","KnownRunType","KnownArchitecture","KnownVariant","KnownTaskStatus","KnownStepType","KnownBaseImageDependencyType","KnownTriggerStatus","KnownSourceControlType","KnownTokenType","KnownSourceTriggerEvent","KnownBaseImageTriggerType","KnownUpdateTriggerPayloadType","KnownSourceRegistryLoginMode","KnownSecretObjectType","ImportImageParametersMapper","RegistryNameCheckRequestMapper","RegistryMapper","RegistryUpdateParametersMapper","RegenerateCredentialParametersMapper","GenerateCredentialsParametersMapper","RunRequestMapper","PrivateEndpointConnectionMapper","ReplicationMapper","ReplicationUpdateParametersMapper","ScopeMapMapper","ScopeMapUpdateParametersMapper","TokenMapper","TokenUpdateParametersMapper","WebhookCreateParametersMapper","WebhookUpdateParametersMapper","AgentPoolMapper","AgentPoolUpdateParametersMapper","RunUpdateParametersMapper","TaskRunMapper","TaskRunUpdateParametersMapper","TaskMapper","TaskUpdateParametersMapper","__rest","__await","__asyncValues","__asyncDelegator","__awaiter","createHttpPoller","listOperationSpec","getOperationSpec","createOperationSpec","deleteOperationSpec","updateOperationSpec","listNextOperationSpec","serializer","coreClient","Parameters.parameters","Parameters.apiVersion","Parameters.$host","Parameters.subscriptionId","Parameters.resourceGroupName","Parameters.registryName","Parameters.contentType","Mappers.RegistryNameStatus","Parameters.registryNameCheckRequest","Parameters.accept","Mappers.RegistryListResult","Mappers.Registry","Parameters.registry","Parameters.registryUpdateParameters","Mappers.RegistryUsageListResult","Mappers.PrivateLinkResourceListResult","Mappers.PrivateLinkResource","Mappers.ErrorResponse","Parameters.groupName","Mappers.RegistryListCredentialsResult","Parameters.regenerateCredentialParameters","Mappers.GenerateCredentialsResult","Parameters.generateCredentialsParameters","Mappers.Run","Parameters.runRequest","Parameters.apiVersion1","Parameters.resourceGroupName1","Mappers.SourceUploadDefinition","Parameters.nextLink","Mappers.OperationListResult","Mappers.PrivateEndpointConnectionListResult","Mappers.PrivateEndpointConnection","Parameters.privateEndpointConnectionName","Parameters.privateEndpointConnection","Mappers.ReplicationListResult","Mappers.Replication","Parameters.replicationName","Parameters.replication","Parameters.replicationUpdateParameters","Mappers.ScopeMapListResult","Mappers.ScopeMap","Parameters.scopeMapName","Parameters.scopeMapCreateParameters","Parameters.scopeMapUpdateParameters","Mappers.TokenListResult","Mappers.Token","Parameters.tokenName","Parameters.tokenCreateParameters","Parameters.tokenUpdateParameters","Mappers.WebhookListResult","Mappers.Webhook","Parameters.webhookName","Parameters.webhookCreateParameters","Parameters.webhookUpdateParameters","Mappers.EventInfo","Mappers.EventListResult","Mappers.CallbackConfig","Mappers.AgentPool","Parameters.agentPoolName","Parameters.agentPool","Parameters.updateParameters","Mappers.AgentPoolListResult","Mappers.AgentPoolQueueStatus","Mappers.RunListResult","Parameters.filter","Parameters.top","Parameters.runId","Parameters.runUpdateParameters","Mappers.RunGetLogResult","getDetailsOperationSpec","Mappers.TaskRun","Parameters.taskRunName","Parameters.taskRun","Parameters.updateParameters1","Mappers.TaskRunListResult","Mappers.TaskListResult","Mappers.Task","Parameters.taskName","Parameters.taskCreateParameters","Parameters.taskUpdateParameters","coreRestPipeline"],"mappings":"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"}