import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Administrators } from "../operationsInterfaces";
import { PostgreSQLManagementFlexibleServerClient } from "../postgreSQLManagementFlexibleServerClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { ActiveDirectoryAdministrator, AdministratorsListByServerOptionalParams, ActiveDirectoryAdministratorAdd, AdministratorsCreateOptionalParams, AdministratorsCreateResponse, AdministratorsDeleteOptionalParams, AdministratorsGetOptionalParams, AdministratorsGetResponse } from "../models";
/** Class containing Administrators operations. */
export declare class AdministratorsImpl implements Administrators {
    private readonly client;
    /**
     * Initialize a new instance of the class Administrators class.
     * @param client Reference to the service client
     */
    constructor(client: PostgreSQLManagementFlexibleServerClient);
    /**
     * List all the AAD administrators for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: AdministratorsListByServerOptionalParams): PagedAsyncIterableIterator<ActiveDirectoryAdministrator>;
    private listByServerPagingPage;
    private listByServerPagingAll;
    /**
     * Creates a new server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param parameters The required parameters for adding an active directory administrator for a server.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, serverName: string, objectId: string, parameters: ActiveDirectoryAdministratorAdd, options?: AdministratorsCreateOptionalParams): Promise<SimplePollerLike<OperationState<AdministratorsCreateResponse>, AdministratorsCreateResponse>>;
    /**
     * Creates a new server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param parameters The required parameters for adding an active directory administrator for a server.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, serverName: string, objectId: string, parameters: ActiveDirectoryAdministratorAdd, options?: AdministratorsCreateOptionalParams): Promise<AdministratorsCreateResponse>;
    /**
     * Deletes an Active Directory Administrator associated with the server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, objectId: string, options?: AdministratorsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes an Active Directory Administrator associated with the server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, objectId: string, options?: AdministratorsDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, objectId: string, options?: AdministratorsGetOptionalParams): Promise<AdministratorsGetResponse>;
    /**
     * List all the AAD administrators for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    private _listByServer;
    /**
     * ListByServerNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param nextLink The nextLink from the previous successful call to the ListByServer method.
     * @param options The options parameters.
     */
    private _listByServerNext;
}
//# sourceMappingURL=administrators.d.ts.map