import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Administrators, Backups, LocationBasedCapabilities, CheckNameAvailability, CheckNameAvailabilityWithLocation, Configurations, Databases, FirewallRules, Servers, Operations, GetPrivateDnsZoneSuffix, Replicas, VirtualNetworkSubnetUsage } from "./operationsInterfaces";
import { PostgreSQLManagementFlexibleServerClientOptionalParams } from "./models";
export declare class PostgreSQLManagementFlexibleServerClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the PostgreSQLManagementFlexibleServerClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: PostgreSQLManagementFlexibleServerClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    administrators: Administrators;
    backups: Backups;
    locationBasedCapabilities: LocationBasedCapabilities;
    checkNameAvailability: CheckNameAvailability;
    checkNameAvailabilityWithLocation: CheckNameAvailabilityWithLocation;
    configurations: Configurations;
    databases: Databases;
    firewallRules: FirewallRules;
    servers: Servers;
    operations: Operations;
    getPrivateDnsZoneSuffix: GetPrivateDnsZoneSuffix;
    replicas: Replicas;
    virtualNetworkSubnetUsage: VirtualNetworkSubnetUsage;
}
//# sourceMappingURL=postgreSQLManagementFlexibleServerClient.d.ts.map