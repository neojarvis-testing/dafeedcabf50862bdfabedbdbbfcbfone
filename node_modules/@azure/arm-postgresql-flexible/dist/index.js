'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link PrincipalType} that the service accepts. */
exports.KnownPrincipalType = void 0;
(function (KnownPrincipalType) {
    /** Unknown */
    KnownPrincipalType["Unknown"] = "Unknown";
    /** User */
    KnownPrincipalType["User"] = "User";
    /** Group */
    KnownPrincipalType["Group"] = "Group";
    /** ServicePrincipal */
    KnownPrincipalType["ServicePrincipal"] = "ServicePrincipal";
})(exports.KnownPrincipalType || (exports.KnownPrincipalType = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link Origin} that the service accepts. */
exports.KnownOrigin = void 0;
(function (KnownOrigin) {
    /** Full */
    KnownOrigin["Full"] = "Full";
})(exports.KnownOrigin || (exports.KnownOrigin = {}));
/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
exports.KnownCheckNameAvailabilityReason = void 0;
(function (KnownCheckNameAvailabilityReason) {
    /** Invalid */
    KnownCheckNameAvailabilityReason["Invalid"] = "Invalid";
    /** AlreadyExists */
    KnownCheckNameAvailabilityReason["AlreadyExists"] = "AlreadyExists";
})(exports.KnownCheckNameAvailabilityReason || (exports.KnownCheckNameAvailabilityReason = {}));
/** Known values of {@link ConfigurationDataType} that the service accepts. */
exports.KnownConfigurationDataType = void 0;
(function (KnownConfigurationDataType) {
    /** Boolean */
    KnownConfigurationDataType["Boolean"] = "Boolean";
    /** Numeric */
    KnownConfigurationDataType["Numeric"] = "Numeric";
    /** Integer */
    KnownConfigurationDataType["Integer"] = "Integer";
    /** Enumeration */
    KnownConfigurationDataType["Enumeration"] = "Enumeration";
})(exports.KnownConfigurationDataType || (exports.KnownConfigurationDataType = {}));
/** Known values of {@link SkuTier} that the service accepts. */
exports.KnownSkuTier = void 0;
(function (KnownSkuTier) {
    /** Burstable */
    KnownSkuTier["Burstable"] = "Burstable";
    /** GeneralPurpose */
    KnownSkuTier["GeneralPurpose"] = "GeneralPurpose";
    /** MemoryOptimized */
    KnownSkuTier["MemoryOptimized"] = "MemoryOptimized";
})(exports.KnownSkuTier || (exports.KnownSkuTier = {}));
/** Known values of {@link IdentityType} that the service accepts. */
exports.KnownIdentityType = void 0;
(function (KnownIdentityType) {
    /** None */
    KnownIdentityType["None"] = "None";
    /** SystemAssigned */
    KnownIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownIdentityType["UserAssigned"] = "UserAssigned";
})(exports.KnownIdentityType || (exports.KnownIdentityType = {}));
/** Known values of {@link ServerVersion} that the service accepts. */
exports.KnownServerVersion = void 0;
(function (KnownServerVersion) {
    /** Fourteen */
    KnownServerVersion["Fourteen"] = "14";
    /** Thirteen */
    KnownServerVersion["Thirteen"] = "13";
    /** Twelve */
    KnownServerVersion["Twelve"] = "12";
    /** Eleven */
    KnownServerVersion["Eleven"] = "11";
})(exports.KnownServerVersion || (exports.KnownServerVersion = {}));
/** Known values of {@link ServerState} that the service accepts. */
exports.KnownServerState = void 0;
(function (KnownServerState) {
    /** Ready */
    KnownServerState["Ready"] = "Ready";
    /** Dropping */
    KnownServerState["Dropping"] = "Dropping";
    /** Disabled */
    KnownServerState["Disabled"] = "Disabled";
    /** Starting */
    KnownServerState["Starting"] = "Starting";
    /** Stopping */
    KnownServerState["Stopping"] = "Stopping";
    /** Stopped */
    KnownServerState["Stopped"] = "Stopped";
    /** Updating */
    KnownServerState["Updating"] = "Updating";
})(exports.KnownServerState || (exports.KnownServerState = {}));
/** Known values of {@link ActiveDirectoryAuthEnum} that the service accepts. */
exports.KnownActiveDirectoryAuthEnum = void 0;
(function (KnownActiveDirectoryAuthEnum) {
    /** Enabled */
    KnownActiveDirectoryAuthEnum["Enabled"] = "Enabled";
    /** Disabled */
    KnownActiveDirectoryAuthEnum["Disabled"] = "Disabled";
})(exports.KnownActiveDirectoryAuthEnum || (exports.KnownActiveDirectoryAuthEnum = {}));
/** Known values of {@link PasswordAuthEnum} that the service accepts. */
exports.KnownPasswordAuthEnum = void 0;
(function (KnownPasswordAuthEnum) {
    /** Enabled */
    KnownPasswordAuthEnum["Enabled"] = "Enabled";
    /** Disabled */
    KnownPasswordAuthEnum["Disabled"] = "Disabled";
})(exports.KnownPasswordAuthEnum || (exports.KnownPasswordAuthEnum = {}));
/** Known values of {@link ArmServerKeyType} that the service accepts. */
exports.KnownArmServerKeyType = void 0;
(function (KnownArmServerKeyType) {
    /** SystemManaged */
    KnownArmServerKeyType["SystemManaged"] = "SystemManaged";
    /** AzureKeyVault */
    KnownArmServerKeyType["AzureKeyVault"] = "AzureKeyVault";
})(exports.KnownArmServerKeyType || (exports.KnownArmServerKeyType = {}));
/** Known values of {@link GeoRedundantBackupEnum} that the service accepts. */
exports.KnownGeoRedundantBackupEnum = void 0;
(function (KnownGeoRedundantBackupEnum) {
    /** Enabled */
    KnownGeoRedundantBackupEnum["Enabled"] = "Enabled";
    /** Disabled */
    KnownGeoRedundantBackupEnum["Disabled"] = "Disabled";
})(exports.KnownGeoRedundantBackupEnum || (exports.KnownGeoRedundantBackupEnum = {}));
/** Known values of {@link ServerPublicNetworkAccessState} that the service accepts. */
exports.KnownServerPublicNetworkAccessState = void 0;
(function (KnownServerPublicNetworkAccessState) {
    /** Enabled */
    KnownServerPublicNetworkAccessState["Enabled"] = "Enabled";
    /** Disabled */
    KnownServerPublicNetworkAccessState["Disabled"] = "Disabled";
})(exports.KnownServerPublicNetworkAccessState || (exports.KnownServerPublicNetworkAccessState = {}));
/** Known values of {@link HighAvailabilityMode} that the service accepts. */
exports.KnownHighAvailabilityMode = void 0;
(function (KnownHighAvailabilityMode) {
    /** Disabled */
    KnownHighAvailabilityMode["Disabled"] = "Disabled";
    /** ZoneRedundant */
    KnownHighAvailabilityMode["ZoneRedundant"] = "ZoneRedundant";
    /** SameZone */
    KnownHighAvailabilityMode["SameZone"] = "SameZone";
})(exports.KnownHighAvailabilityMode || (exports.KnownHighAvailabilityMode = {}));
/** Known values of {@link ServerHAState} that the service accepts. */
exports.KnownServerHAState = void 0;
(function (KnownServerHAState) {
    /** NotEnabled */
    KnownServerHAState["NotEnabled"] = "NotEnabled";
    /** CreatingStandby */
    KnownServerHAState["CreatingStandby"] = "CreatingStandby";
    /** ReplicatingData */
    KnownServerHAState["ReplicatingData"] = "ReplicatingData";
    /** FailingOver */
    KnownServerHAState["FailingOver"] = "FailingOver";
    /** Healthy */
    KnownServerHAState["Healthy"] = "Healthy";
    /** RemovingStandby */
    KnownServerHAState["RemovingStandby"] = "RemovingStandby";
})(exports.KnownServerHAState || (exports.KnownServerHAState = {}));
/** Known values of {@link ReplicationRole} that the service accepts. */
exports.KnownReplicationRole = void 0;
(function (KnownReplicationRole) {
    /** None */
    KnownReplicationRole["None"] = "None";
    /** Primary */
    KnownReplicationRole["Primary"] = "Primary";
    /** AsyncReplica */
    KnownReplicationRole["AsyncReplica"] = "AsyncReplica";
    /** GeoAsyncReplica */
    KnownReplicationRole["GeoAsyncReplica"] = "GeoAsyncReplica";
})(exports.KnownReplicationRole || (exports.KnownReplicationRole = {}));
/** Known values of {@link CreateMode} that the service accepts. */
exports.KnownCreateMode = void 0;
(function (KnownCreateMode) {
    /** Default */
    KnownCreateMode["Default"] = "Default";
    /** Create */
    KnownCreateMode["Create"] = "Create";
    /** Update */
    KnownCreateMode["Update"] = "Update";
    /** PointInTimeRestore */
    KnownCreateMode["PointInTimeRestore"] = "PointInTimeRestore";
    /** GeoRestore */
    KnownCreateMode["GeoRestore"] = "GeoRestore";
    /** Replica */
    KnownCreateMode["Replica"] = "Replica";
})(exports.KnownCreateMode || (exports.KnownCreateMode = {}));
/** Known values of {@link CreateModeForUpdate} that the service accepts. */
exports.KnownCreateModeForUpdate = void 0;
(function (KnownCreateModeForUpdate) {
    /** Default */
    KnownCreateModeForUpdate["Default"] = "Default";
    /** Update */
    KnownCreateModeForUpdate["Update"] = "Update";
})(exports.KnownCreateModeForUpdate || (exports.KnownCreateModeForUpdate = {}));
/** Known values of {@link OperationOrigin} that the service accepts. */
exports.KnownOperationOrigin = void 0;
(function (KnownOperationOrigin) {
    /** NotSpecified */
    KnownOperationOrigin["NotSpecified"] = "NotSpecified";
    /** User */
    KnownOperationOrigin["User"] = "user";
    /** System */
    KnownOperationOrigin["System"] = "system";
})(exports.KnownOperationOrigin || (exports.KnownOperationOrigin = {}));
/** Known values of {@link FailoverMode} that the service accepts. */
exports.KnownFailoverMode = void 0;
(function (KnownFailoverMode) {
    /** PlannedFailover */
    KnownFailoverMode["PlannedFailover"] = "PlannedFailover";
    /** ForcedFailover */
    KnownFailoverMode["ForcedFailover"] = "ForcedFailover";
    /** PlannedSwitchover */
    KnownFailoverMode["PlannedSwitchover"] = "PlannedSwitchover";
    /** ForcedSwitchover */
    KnownFailoverMode["ForcedSwitchover"] = "ForcedSwitchover";
})(exports.KnownFailoverMode || (exports.KnownFailoverMode = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ActiveDirectoryAdministratorAdd = {
    type: {
        name: "Composite",
        className: "ActiveDirectoryAdministratorAdd",
        modelProperties: {
            principalType: {
                serializedName: "properties.principalType",
                type: {
                    name: "String"
                }
            },
            principalName: {
                serializedName: "properties.principalName",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const AdministratorListResult = {
    type: {
        name: "Composite",
        className: "AdministratorListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActiveDirectoryAdministrator"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerBackupListResult = {
    type: {
        name: "Composite",
        className: "ServerBackupListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServerBackup"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CapabilitiesListResult = {
    type: {
        name: "Composite",
        className: "CapabilitiesListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CapabilityProperties"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CapabilityProperties = {
    type: {
        name: "Composite",
        className: "CapabilityProperties",
        modelProperties: {
            zone: {
                serializedName: "zone",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportedHAMode: {
                serializedName: "supportedHAMode",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            geoBackupSupported: {
                serializedName: "geoBackupSupported",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            zoneRedundantHaSupported: {
                serializedName: "zoneRedundantHaSupported",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            zoneRedundantHaAndGeoBackupSupported: {
                serializedName: "zoneRedundantHaAndGeoBackupSupported",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            supportedFlexibleServerEditions: {
                serializedName: "supportedFlexibleServerEditions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FlexibleServerEditionCapability"
                        }
                    }
                }
            },
            supportedHyperscaleNodeEditions: {
                serializedName: "supportedHyperscaleNodeEditions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HyperscaleNodeEditionCapability"
                        }
                    }
                }
            },
            fastProvisioningSupported: {
                serializedName: "fastProvisioningSupported",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            supportedFastProvisioningEditions: {
                serializedName: "supportedFastProvisioningEditions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FastProvisioningEditionCapability"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FlexibleServerEditionCapability = {
    type: {
        name: "Composite",
        className: "FlexibleServerEditionCapability",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportedStorageEditions: {
                serializedName: "supportedStorageEditions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageEditionCapability"
                        }
                    }
                }
            },
            supportedServerVersions: {
                serializedName: "supportedServerVersions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServerVersionCapability"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageEditionCapability = {
    type: {
        name: "Composite",
        className: "StorageEditionCapability",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportedStorageMB: {
                serializedName: "supportedStorageMB",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageMBCapability"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageMBCapability = {
    type: {
        name: "Composite",
        className: "StorageMBCapability",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportedIops: {
                serializedName: "supportedIops",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            storageSizeMB: {
                serializedName: "storageSizeMB",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            supportedUpgradableTierList: {
                serializedName: "supportedUpgradableTierList",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageTierCapability"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageTierCapability = {
    type: {
        name: "Composite",
        className: "StorageTierCapability",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tierName: {
                serializedName: "tierName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            iops: {
                serializedName: "iops",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            isBaseline: {
                serializedName: "isBaseline",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerVersionCapability = {
    type: {
        name: "Composite",
        className: "ServerVersionCapability",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportedVersionsToUpgrade: {
                serializedName: "supportedVersionsToUpgrade",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            supportedVcores: {
                serializedName: "supportedVcores",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VcoreCapability"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VcoreCapability = {
    type: {
        name: "Composite",
        className: "VcoreCapability",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            vCores: {
                serializedName: "vCores",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            supportedIops: {
                serializedName: "supportedIops",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            supportedMemoryPerVcoreMB: {
                serializedName: "supportedMemoryPerVcoreMB",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HyperscaleNodeEditionCapability = {
    type: {
        name: "Composite",
        className: "HyperscaleNodeEditionCapability",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportedStorageEditions: {
                serializedName: "supportedStorageEditions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageEditionCapability"
                        }
                    }
                }
            },
            supportedServerVersions: {
                serializedName: "supportedServerVersions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ServerVersionCapability"
                        }
                    }
                }
            },
            supportedNodeTypes: {
                serializedName: "supportedNodeTypes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NodeTypeCapability"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NodeTypeCapability = {
    type: {
        name: "Composite",
        className: "NodeTypeCapability",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            nodeType: {
                serializedName: "nodeType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FastProvisioningEditionCapability = {
    type: {
        name: "Composite",
        className: "FastProvisioningEditionCapability",
        modelProperties: {
            supportedSku: {
                serializedName: "supportedSku",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            supportedStorageGb: {
                serializedName: "supportedStorageGb",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            supportedServerVersions: {
                serializedName: "supportedServerVersions",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityRequest = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityResponse = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityResponse",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigurationListResult = {
    type: {
        name: "Composite",
        className: "ConfigurationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Configuration"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigurationForUpdate = {
    type: {
        name: "Composite",
        className: "ConfigurationForUpdate",
        modelProperties: {
            value: {
                serializedName: "properties.value",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            defaultValue: {
                serializedName: "properties.defaultValue",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dataType: {
                serializedName: "properties.dataType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            allowedValues: {
                serializedName: "properties.allowedValues",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "properties.source",
                type: {
                    name: "String"
                }
            },
            isDynamicConfig: {
                serializedName: "properties.isDynamicConfig",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            isReadOnly: {
                serializedName: "properties.isReadOnly",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            isConfigPendingRestart: {
                serializedName: "properties.isConfigPendingRestart",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            unit: {
                serializedName: "properties.unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            documentationLink: {
                serializedName: "properties.documentationLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabaseListResult = {
    type: {
        name: "Composite",
        className: "DatabaseListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Database"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FirewallRuleListResult = {
    type: {
        name: "Composite",
        className: "FirewallRuleListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FirewallRule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserAssignedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentity",
        modelProperties: {
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Composite", className: "UserIdentity" } }
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserIdentity = {
    type: {
        name: "Composite",
        className: "UserIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Storage = {
    type: {
        name: "Composite",
        className: "Storage",
        modelProperties: {
            storageSizeGB: {
                serializedName: "storageSizeGB",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AuthConfig = {
    type: {
        name: "Composite",
        className: "AuthConfig",
        modelProperties: {
            activeDirectoryAuth: {
                serializedName: "activeDirectoryAuth",
                type: {
                    name: "String"
                }
            },
            passwordAuth: {
                defaultValue: "Enabled",
                serializedName: "passwordAuth",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                defaultValue: "",
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataEncryption = {
    type: {
        name: "Composite",
        className: "DataEncryption",
        modelProperties: {
            primaryKeyURI: {
                serializedName: "primaryKeyURI",
                type: {
                    name: "String"
                }
            },
            primaryUserAssignedIdentityId: {
                serializedName: "primaryUserAssignedIdentityId",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Backup = {
    type: {
        name: "Composite",
        className: "Backup",
        modelProperties: {
            backupRetentionDays: {
                defaultValue: 7,
                serializedName: "backupRetentionDays",
                type: {
                    name: "Number"
                }
            },
            geoRedundantBackup: {
                defaultValue: "Disabled",
                serializedName: "geoRedundantBackup",
                type: {
                    name: "String"
                }
            },
            earliestRestoreDate: {
                serializedName: "earliestRestoreDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Network = {
    type: {
        name: "Composite",
        className: "Network",
        modelProperties: {
            publicNetworkAccess: {
                serializedName: "publicNetworkAccess",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            delegatedSubnetResourceId: {
                defaultValue: "",
                serializedName: "delegatedSubnetResourceId",
                type: {
                    name: "String"
                }
            },
            privateDnsZoneArmResourceId: {
                defaultValue: "",
                serializedName: "privateDnsZoneArmResourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HighAvailability = {
    type: {
        name: "Composite",
        className: "HighAvailability",
        modelProperties: {
            mode: {
                defaultValue: "Disabled",
                serializedName: "mode",
                type: {
                    name: "String"
                }
            },
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            standbyAvailabilityZone: {
                defaultValue: "",
                serializedName: "standbyAvailabilityZone",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MaintenanceWindow = {
    type: {
        name: "Composite",
        className: "MaintenanceWindow",
        modelProperties: {
            customWindow: {
                defaultValue: "Disabled",
                serializedName: "customWindow",
                type: {
                    name: "String"
                }
            },
            startHour: {
                defaultValue: 0,
                serializedName: "startHour",
                type: {
                    name: "Number"
                }
            },
            startMinute: {
                defaultValue: 0,
                serializedName: "startMinute",
                type: {
                    name: "Number"
                }
            },
            dayOfWeek: {
                defaultValue: 0,
                serializedName: "dayOfWeek",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ServerForUpdate = {
    type: {
        name: "Composite",
        className: "ServerForUpdate",
        modelProperties: {
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "UserAssignedIdentity"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            administratorLoginPassword: {
                serializedName: "properties.administratorLoginPassword",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            },
            storage: {
                serializedName: "properties.storage",
                type: {
                    name: "Composite",
                    className: "Storage"
                }
            },
            backup: {
                serializedName: "properties.backup",
                type: {
                    name: "Composite",
                    className: "Backup"
                }
            },
            highAvailability: {
                serializedName: "properties.highAvailability",
                type: {
                    name: "Composite",
                    className: "HighAvailability"
                }
            },
            maintenanceWindow: {
                serializedName: "properties.maintenanceWindow",
                type: {
                    name: "Composite",
                    className: "MaintenanceWindow"
                }
            },
            authConfig: {
                serializedName: "properties.authConfig",
                type: {
                    name: "Composite",
                    className: "AuthConfig"
                }
            },
            dataEncryption: {
                serializedName: "properties.dataEncryption",
                type: {
                    name: "Composite",
                    className: "DataEncryption"
                }
            },
            createMode: {
                serializedName: "properties.createMode",
                type: {
                    name: "String"
                }
            },
            replicationRole: {
                serializedName: "properties.replicationRole",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServerListResult = {
    type: {
        name: "Composite",
        className: "ServerListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Server"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Dictionary", value: { type: { name: "any" } } }
                    }
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RestartParameter = {
    type: {
        name: "Composite",
        className: "RestartParameter",
        modelProperties: {
            restartWithFailover: {
                serializedName: "restartWithFailover",
                type: {
                    name: "Boolean"
                }
            },
            failoverMode: {
                serializedName: "failoverMode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VirtualNetworkSubnetUsageParameter = {
    type: {
        name: "Composite",
        className: "VirtualNetworkSubnetUsageParameter",
        modelProperties: {
            virtualNetworkArmResourceId: {
                serializedName: "virtualNetworkArmResourceId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const VirtualNetworkSubnetUsageResult = {
    type: {
        name: "Composite",
        className: "VirtualNetworkSubnetUsageResult",
        modelProperties: {
            delegatedSubnetsUsage: {
                serializedName: "delegatedSubnetsUsage",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DelegatedSubnetUsage"
                        }
                    }
                }
            },
            location: {
                serializedName: "location",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DelegatedSubnetUsage = {
    type: {
        name: "Composite",
        className: "DelegatedSubnetUsage",
        modelProperties: {
            subnetName: {
                serializedName: "subnetName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            usage: {
                serializedName: "usage",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const NameAvailability = {
    type: {
        name: "Composite",
        className: "NameAvailability",
        modelProperties: Object.assign(Object.assign({}, CheckNameAvailabilityResponse.type.modelProperties), { name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const ActiveDirectoryAdministrator = {
    type: {
        name: "Composite",
        className: "ActiveDirectoryAdministrator",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { principalType: {
                serializedName: "properties.principalType",
                type: {
                    name: "String"
                }
            }, principalName: {
                serializedName: "properties.principalName",
                type: {
                    name: "String"
                }
            }, objectId: {
                serializedName: "properties.objectId",
                type: {
                    name: "String"
                }
            }, tenantId: {
                serializedName: "properties.tenantId",
                type: {
                    name: "String"
                }
            } })
    }
};
const ServerBackup = {
    type: {
        name: "Composite",
        className: "ServerBackup",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { backupType: {
                serializedName: "properties.backupType",
                type: {
                    name: "String"
                }
            }, completedTime: {
                serializedName: "properties.completedTime",
                type: {
                    name: "DateTime"
                }
            }, source: {
                serializedName: "properties.source",
                type: {
                    name: "String"
                }
            } })
    }
};
const Configuration = {
    type: {
        name: "Composite",
        className: "Configuration",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { value: {
                serializedName: "properties.value",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, defaultValue: {
                serializedName: "properties.defaultValue",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, dataType: {
                serializedName: "properties.dataType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, allowedValues: {
                serializedName: "properties.allowedValues",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, source: {
                serializedName: "properties.source",
                type: {
                    name: "String"
                }
            }, isDynamicConfig: {
                serializedName: "properties.isDynamicConfig",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, isReadOnly: {
                serializedName: "properties.isReadOnly",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, isConfigPendingRestart: {
                serializedName: "properties.isConfigPendingRestart",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, unit: {
                serializedName: "properties.unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, documentationLink: {
                serializedName: "properties.documentationLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Database = {
    type: {
        name: "Composite",
        className: "Database",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { charset: {
                constraints: {
                    Pattern: new RegExp("^[a-zA-Z]+\\w*$")
                },
                serializedName: "properties.charset",
                type: {
                    name: "String"
                }
            }, collation: {
                constraints: {
                    Pattern: new RegExp("^[a-zA-Z\\-]+([. ]|\\w)*$")
                },
                serializedName: "properties.collation",
                type: {
                    name: "String"
                }
            } })
    }
};
const FirewallRule = {
    type: {
        name: "Composite",
        className: "FirewallRule",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { startIpAddress: {
                constraints: {
                    Pattern: new RegExp("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")
                },
                serializedName: "properties.startIpAddress",
                required: true,
                type: {
                    name: "String"
                }
            }, endIpAddress: {
                constraints: {
                    Pattern: new RegExp("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")
                },
                serializedName: "properties.endIpAddress",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const Server = {
    type: {
        name: "Composite",
        className: "Server",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "UserAssignedIdentity"
                }
            }, administratorLogin: {
                serializedName: "properties.administratorLogin",
                type: {
                    name: "String"
                }
            }, administratorLoginPassword: {
                serializedName: "properties.administratorLoginPassword",
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            }, minorVersion: {
                serializedName: "properties.minorVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, state: {
                serializedName: "properties.state",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, fullyQualifiedDomainName: {
                serializedName: "properties.fullyQualifiedDomainName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, storage: {
                serializedName: "properties.storage",
                type: {
                    name: "Composite",
                    className: "Storage"
                }
            }, authConfig: {
                serializedName: "properties.authConfig",
                type: {
                    name: "Composite",
                    className: "AuthConfig"
                }
            }, dataEncryption: {
                serializedName: "properties.dataEncryption",
                type: {
                    name: "Composite",
                    className: "DataEncryption"
                }
            }, backup: {
                serializedName: "properties.backup",
                type: {
                    name: "Composite",
                    className: "Backup"
                }
            }, network: {
                serializedName: "properties.network",
                type: {
                    name: "Composite",
                    className: "Network"
                }
            }, highAvailability: {
                serializedName: "properties.highAvailability",
                type: {
                    name: "Composite",
                    className: "HighAvailability"
                }
            }, maintenanceWindow: {
                serializedName: "properties.maintenanceWindow",
                type: {
                    name: "Composite",
                    className: "MaintenanceWindow"
                }
            }, sourceServerResourceId: {
                serializedName: "properties.sourceServerResourceId",
                type: {
                    name: "String"
                }
            }, pointInTimeUTC: {
                serializedName: "properties.pointInTimeUTC",
                type: {
                    name: "DateTime"
                }
            }, availabilityZone: {
                defaultValue: "",
                serializedName: "properties.availabilityZone",
                type: {
                    name: "String"
                }
            }, replicationRole: {
                serializedName: "properties.replicationRole",
                type: {
                    name: "String"
                }
            }, replicaCapacity: {
                serializedName: "properties.replicaCapacity",
                type: {
                    name: "Number"
                }
            }, createMode: {
                serializedName: "properties.createMode",
                type: {
                    name: "String"
                }
            } })
    }
};
const AdministratorsCreateHeaders = {
    type: {
        name: "Composite",
        className: "AdministratorsCreateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AdministratorsDeleteHeaders = {
    type: {
        name: "Composite",
        className: "AdministratorsDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigurationsUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ConfigurationsUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConfigurationsPutHeaders = {
    type: {
        name: "Composite",
        className: "ConfigurationsPutHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabasesCreateHeaders = {
    type: {
        name: "Composite",
        className: "DatabasesCreateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DatabasesDeleteHeaders = {
    type: {
        name: "Composite",
        className: "DatabasesDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FirewallRulesCreateOrUpdateHeaders = {
    type: {
        name: "Composite",
        className: "FirewallRulesCreateOrUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FirewallRulesDeleteHeaders = {
    type: {
        name: "Composite",
        className: "FirewallRulesDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServersCreateHeaders = {
    type: {
        name: "Composite",
        className: "ServersCreateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServersUpdateHeaders = {
    type: {
        name: "Composite",
        className: "ServersUpdateHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServersDeleteHeaders = {
    type: {
        name: "Composite",
        className: "ServersDeleteHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServersRestartHeaders = {
    type: {
        name: "Composite",
        className: "ServersRestartHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServersStartHeaders = {
    type: {
        name: "Composite",
        className: "ServersStartHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServersStopHeaders = {
    type: {
        name: "Composite",
        className: "ServersStopHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ActiveDirectoryAdministratorAdd: ActiveDirectoryAdministratorAdd,
    Resource: Resource,
    SystemData: SystemData,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    AdministratorListResult: AdministratorListResult,
    ServerBackupListResult: ServerBackupListResult,
    CapabilitiesListResult: CapabilitiesListResult,
    CapabilityProperties: CapabilityProperties,
    FlexibleServerEditionCapability: FlexibleServerEditionCapability,
    StorageEditionCapability: StorageEditionCapability,
    StorageMBCapability: StorageMBCapability,
    StorageTierCapability: StorageTierCapability,
    ServerVersionCapability: ServerVersionCapability,
    VcoreCapability: VcoreCapability,
    HyperscaleNodeEditionCapability: HyperscaleNodeEditionCapability,
    NodeTypeCapability: NodeTypeCapability,
    FastProvisioningEditionCapability: FastProvisioningEditionCapability,
    CheckNameAvailabilityRequest: CheckNameAvailabilityRequest,
    CheckNameAvailabilityResponse: CheckNameAvailabilityResponse,
    ConfigurationListResult: ConfigurationListResult,
    ConfigurationForUpdate: ConfigurationForUpdate,
    DatabaseListResult: DatabaseListResult,
    FirewallRuleListResult: FirewallRuleListResult,
    Sku: Sku,
    UserAssignedIdentity: UserAssignedIdentity,
    UserIdentity: UserIdentity,
    Storage: Storage,
    AuthConfig: AuthConfig,
    DataEncryption: DataEncryption,
    Backup: Backup,
    Network: Network,
    HighAvailability: HighAvailability,
    MaintenanceWindow: MaintenanceWindow,
    ServerForUpdate: ServerForUpdate,
    ServerListResult: ServerListResult,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    RestartParameter: RestartParameter,
    VirtualNetworkSubnetUsageParameter: VirtualNetworkSubnetUsageParameter,
    VirtualNetworkSubnetUsageResult: VirtualNetworkSubnetUsageResult,
    DelegatedSubnetUsage: DelegatedSubnetUsage,
    ProxyResource: ProxyResource,
    TrackedResource: TrackedResource,
    NameAvailability: NameAvailability,
    ActiveDirectoryAdministrator: ActiveDirectoryAdministrator,
    ServerBackup: ServerBackup,
    Configuration: Configuration,
    Database: Database,
    FirewallRule: FirewallRule,
    Server: Server,
    AdministratorsCreateHeaders: AdministratorsCreateHeaders,
    AdministratorsDeleteHeaders: AdministratorsDeleteHeaders,
    ConfigurationsUpdateHeaders: ConfigurationsUpdateHeaders,
    ConfigurationsPutHeaders: ConfigurationsPutHeaders,
    DatabasesCreateHeaders: DatabasesCreateHeaders,
    DatabasesDeleteHeaders: DatabasesDeleteHeaders,
    FirewallRulesCreateOrUpdateHeaders: FirewallRulesCreateOrUpdateHeaders,
    FirewallRulesDeleteHeaders: FirewallRulesDeleteHeaders,
    ServersCreateHeaders: ServersCreateHeaders,
    ServersUpdateHeaders: ServersUpdateHeaders,
    ServersDeleteHeaders: ServersDeleteHeaders,
    ServersRestartHeaders: ServersRestartHeaders,
    ServersStartHeaders: ServersStartHeaders,
    ServersStopHeaders: ServersStopHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: ActiveDirectoryAdministratorAdd
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const serverName = {
    parameterPath: "serverName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*"),
            MaxLength: 63,
            MinLength: 3
        },
        serializedName: "serverName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const objectId = {
    parameterPath: "objectId",
    mapper: {
        serializedName: "objectId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-12-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const backupName = {
    parameterPath: "backupName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._]+$"),
            MinLength: 1
        },
        serializedName: "backupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const locationName = {
    parameterPath: "locationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._]+$"),
            MinLength: 1
        },
        serializedName: "locationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const nameAvailabilityRequest = {
    parameterPath: "nameAvailabilityRequest",
    mapper: CheckNameAvailabilityRequest
};
const configurationName = {
    parameterPath: "configurationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._]+$"),
            MinLength: 1
        },
        serializedName: "configurationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: ConfigurationForUpdate
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: Configuration
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: Database
};
const databaseName = {
    parameterPath: "databaseName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._]+$"),
            MinLength: 1
        },
        serializedName: "databaseName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: FirewallRule
};
const firewallRuleName = {
    parameterPath: "firewallRuleName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[-\\w\\._]+$"),
            MinLength: 1
        },
        serializedName: "firewallRuleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: Server
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: ServerForUpdate
};
const parameters7 = {
    parameterPath: ["options", "parameters"],
    mapper: RestartParameter
};
const parameters8 = {
    parameterPath: "parameters",
    mapper: VirtualNetworkSubnetUsageParameter
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Administrators operations. */
class AdministratorsImpl {
    /**
     * Initialize a new instance of the class Administrators class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the AAD administrators for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName, serverName, options) {
        const iter = this.listByServerPagingAll(resourceGroupName, serverName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByServerPagingPage(resourceGroupName, serverName, options, settings);
            }
        };
    }
    listByServerPagingPage(resourceGroupName, serverName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByServer(resourceGroupName, serverName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByServerNext(resourceGroupName, serverName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByServerPagingAll(resourceGroupName, serverName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByServerPagingPage(resourceGroupName, serverName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates a new server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param parameters The required parameters for adding an active directory administrator for a server.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, serverName, objectId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serverName, objectId, parameters, options },
                spec: createOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a new server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param parameters The required parameters for adding an active directory administrator for a server.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, serverName, objectId, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, serverName, objectId, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes an Active Directory Administrator associated with the server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serverName, objectId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serverName, objectId, options },
                spec: deleteOperationSpec$3
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an Active Directory Administrator associated with the server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serverName, objectId, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serverName, objectId, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets information about a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param options The options parameters.
     */
    get(resourceGroupName, serverName, objectId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, objectId, options }, getOperationSpec$5);
    }
    /**
     * List all the AAD administrators for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    _listByServer(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, listByServerOperationSpec$5);
    }
    /**
     * ListByServerNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param nextLink The nextLink from the previous successful call to the ListByServer method.
     * @param options The options parameters.
     */
    _listByServerNext(resourceGroupName, serverName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, nextLink, options }, listByServerNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/administrators/{objectId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ActiveDirectoryAdministrator
        },
        201: {
            bodyMapper: ActiveDirectoryAdministrator
        },
        202: {
            bodyMapper: ActiveDirectoryAdministrator
        },
        204: {
            bodyMapper: ActiveDirectoryAdministrator
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        objectId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$c
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/administrators/{objectId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        objectId
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/administrators/{objectId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ActiveDirectoryAdministrator
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        objectId
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByServerOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/administrators",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AdministratorListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByServerNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AdministratorListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Backups operations. */
class BackupsImpl {
    /**
     * Initialize a new instance of the class Backups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the backups for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName, serverName, options) {
        const iter = this.listByServerPagingAll(resourceGroupName, serverName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByServerPagingPage(resourceGroupName, serverName, options, settings);
            }
        };
    }
    listByServerPagingPage(resourceGroupName, serverName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByServer(resourceGroupName, serverName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByServerNext(resourceGroupName, serverName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByServerPagingAll(resourceGroupName, serverName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByServerPagingPage(resourceGroupName, serverName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get specific backup for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param options The options parameters.
     */
    get(resourceGroupName, serverName, backupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, backupName, options }, getOperationSpec$4);
    }
    /**
     * List all the backups for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    _listByServer(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, listByServerOperationSpec$4);
    }
    /**
     * ListByServerNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param nextLink The nextLink from the previous successful call to the ListByServer method.
     * @param options The options parameters.
     */
    _listByServerNext(resourceGroupName, serverName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, nextLink, options }, listByServerNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/backups/{backupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerBackup
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        backupName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByServerOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/backups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerBackupListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByServerNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerBackupListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing LocationBasedCapabilities operations. */
class LocationBasedCapabilitiesImpl {
    /**
     * Initialize a new instance of the class LocationBasedCapabilities class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get capabilities at specified location in a given subscription.
     * @param locationName The name of the location.
     * @param options The options parameters.
     */
    listExecute(locationName, options) {
        const iter = this.executePagingAll(locationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.executePagingPage(locationName, options, settings);
            }
        };
    }
    executePagingPage(locationName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* executePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._execute(locationName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._executeNext(locationName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    executePagingAll(locationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* executePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.executePagingPage(locationName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get capabilities at specified location in a given subscription.
     * @param locationName The name of the location.
     * @param options The options parameters.
     */
    _execute(locationName, options) {
        return this.client.sendOperationRequest({ locationName, options }, executeOperationSpec$4);
    }
    /**
     * ExecuteNext
     * @param locationName The name of the location.
     * @param nextLink The nextLink from the previous successful call to the Execute method.
     * @param options The options parameters.
     */
    _executeNext(locationName, nextLink, options) {
        return this.client.sendOperationRequest({ locationName, nextLink, options }, executeNextOperationSpec);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const executeOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/locations/{locationName}/capabilities",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CapabilitiesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        locationName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const executeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: CapabilitiesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink,
        locationName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing CheckNameAvailability operations. */
class CheckNameAvailabilityImpl {
    /**
     * Initialize a new instance of the class CheckNameAvailability class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Check the availability of name for resource
     * @param nameAvailabilityRequest The required parameters for checking if resource name is available.
     * @param options The options parameters.
     */
    execute(nameAvailabilityRequest, options) {
        return this.client.sendOperationRequest({ nameAvailabilityRequest, options }, executeOperationSpec$3);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const executeOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: NameAvailability
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: nameAvailabilityRequest,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing CheckNameAvailabilityWithLocation operations. */
class CheckNameAvailabilityWithLocationImpl {
    /**
     * Initialize a new instance of the class CheckNameAvailabilityWithLocation class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Check the availability of name for resource
     * @param locationName The name of the location.
     * @param nameAvailabilityRequest The required parameters for checking if resource name is available.
     * @param options The options parameters.
     */
    execute(locationName, nameAvailabilityRequest, options) {
        return this.client.sendOperationRequest({ locationName, nameAvailabilityRequest, options }, executeOperationSpec$2);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const executeOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/locations/{locationName}/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: NameAvailability
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: nameAvailabilityRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        locationName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Configurations operations. */
class ConfigurationsImpl {
    /**
     * Initialize a new instance of the class Configurations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the configurations in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName, serverName, options) {
        const iter = this.listByServerPagingAll(resourceGroupName, serverName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByServerPagingPage(resourceGroupName, serverName, options, settings);
            }
        };
    }
    listByServerPagingPage(resourceGroupName, serverName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByServer(resourceGroupName, serverName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByServerNext(resourceGroupName, serverName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByServerPagingAll(resourceGroupName, serverName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByServerPagingPage(resourceGroupName, serverName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all the configurations in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    _listByServer(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, listByServerOperationSpec$3);
    }
    /**
     * Gets information about a configuration of server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName, serverName, configurationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, configurationName, options }, getOperationSpec$3);
    }
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serverName, configurationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serverName,
                    configurationName,
                    parameters,
                    options
                },
                spec: updateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serverName, configurationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serverName, configurationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginPut(resourceGroupName, serverName, configurationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serverName,
                    configurationName,
                    parameters,
                    options
                },
                spec: putOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginPutAndWait(resourceGroupName, serverName, configurationName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPut(resourceGroupName, serverName, configurationName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByServerNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param nextLink The nextLink from the previous successful call to the ListByServer method.
     * @param options The options parameters.
     */
    _listByServerNext(resourceGroupName, serverName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, nextLink, options }, listByServerNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByServerOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/configurations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/configurations/{configurationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Configuration
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        configurationName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/configurations/{configurationName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Configuration
        },
        201: {
            bodyMapper: Configuration
        },
        202: {
            bodyMapper: Configuration
        },
        204: {
            bodyMapper: Configuration
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        configurationName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$7
};
const putOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/configurations/{configurationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Configuration
        },
        201: {
            bodyMapper: Configuration
        },
        202: {
            bodyMapper: Configuration
        },
        204: {
            bodyMapper: Configuration
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        configurationName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$7
};
const listByServerNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ConfigurationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Databases operations. */
class DatabasesImpl {
    /**
     * Initialize a new instance of the class Databases class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the databases in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName, serverName, options) {
        const iter = this.listByServerPagingAll(resourceGroupName, serverName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByServerPagingPage(resourceGroupName, serverName, options, settings);
            }
        };
    }
    listByServerPagingPage(resourceGroupName, serverName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByServer(resourceGroupName, serverName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByServerNext(resourceGroupName, serverName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByServerPagingAll(resourceGroupName, serverName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByServerPagingPage(resourceGroupName, serverName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates a new database or updates an existing database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param parameters The required parameters for creating or updating a database.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, serverName, databaseName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serverName,
                    databaseName,
                    parameters,
                    options
                },
                spec: createOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a new database or updates an existing database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param parameters The required parameters for creating or updating a database.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, serverName, databaseName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, serverName, databaseName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serverName, databaseName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serverName, databaseName, options },
                spec: deleteOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serverName, databaseName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serverName, databaseName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets information about a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    get(resourceGroupName, serverName, databaseName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, databaseName, options }, getOperationSpec$2);
    }
    /**
     * List all the databases in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    _listByServer(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, listByServerOperationSpec$2);
    }
    /**
     * ListByServerNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param nextLink The nextLink from the previous successful call to the ListByServer method.
     * @param options The options parameters.
     */
    _listByServerNext(resourceGroupName, serverName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, nextLink, options }, listByServerNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/databases/{databaseName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Database
        },
        201: {
            bodyMapper: Database
        },
        202: {
            bodyMapper: Database
        },
        204: {
            bodyMapper: Database
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        databaseName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$6
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/databases/{databaseName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        databaseName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/databases/{databaseName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Database
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        databaseName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listByServerOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/databases",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatabaseListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listByServerNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DatabaseListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing FirewallRules operations. */
class FirewallRulesImpl {
    /**
     * Initialize a new instance of the class FirewallRules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the firewall rules in a given PostgreSQL server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName, serverName, options) {
        const iter = this.listByServerPagingAll(resourceGroupName, serverName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByServerPagingPage(resourceGroupName, serverName, options, settings);
            }
        };
    }
    listByServerPagingPage(resourceGroupName, serverName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByServer(resourceGroupName, serverName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByServerNext(resourceGroupName, serverName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByServerPagingAll(resourceGroupName, serverName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByServerPagingPage(resourceGroupName, serverName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates a new firewall rule or updates an existing firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param parameters The required parameters for creating or updating a firewall rule.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, serverName, firewallRuleName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    serverName,
                    firewallRuleName,
                    parameters,
                    options
                },
                spec: createOrUpdateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a new firewall rule or updates an existing firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param parameters The required parameters for creating or updating a firewall rule.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, serverName, firewallRuleName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, serverName, firewallRuleName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a PostgreSQL server firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serverName, firewallRuleName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serverName, firewallRuleName, options },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a PostgreSQL server firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serverName, firewallRuleName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serverName, firewallRuleName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all the firewall rules in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param options The options parameters.
     */
    get(resourceGroupName, serverName, firewallRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, firewallRuleName, options }, getOperationSpec$1);
    }
    /**
     * List all the firewall rules in a given PostgreSQL server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    _listByServer(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, listByServerOperationSpec$1);
    }
    /**
     * ListByServerNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param nextLink The nextLink from the previous successful call to the ListByServer method.
     * @param options The options parameters.
     */
    _listByServerNext(resourceGroupName, serverName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, nextLink, options }, listByServerNextOperationSpec);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/firewallRules/{firewallRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: FirewallRule
        },
        201: {
            bodyMapper: FirewallRule
        },
        202: {
            bodyMapper: FirewallRule
        },
        204: {
            bodyMapper: FirewallRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        firewallRuleName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/firewallRules/{firewallRuleName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        firewallRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/firewallRules/{firewallRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FirewallRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        firewallRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByServerOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/firewallRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FirewallRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listByServerNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FirewallRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Servers operations. */
class ServersImpl {
    /**
     * Initialize a new instance of the class Servers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the servers in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all the servers in a given subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Creates a new server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for creating or updating a server.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, serverName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serverName, parameters, options },
                spec: createOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates a new server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for creating or updating a server.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, serverName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, serverName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Updates an existing server. The request body can contain one to many of the properties present in
     * the normal server definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a server.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, serverName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serverName, parameters, options },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates an existing server. The request body can contain one to many of the properties present in
     * the normal server definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a server.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, serverName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, serverName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serverName, options },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, serverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets information about a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    get(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, getOperationSpec);
    }
    /**
     * List all the servers in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * List all the servers in a given subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * Restarts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serverName, options },
                spec: restartOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Restarts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRestart(resourceGroupName, serverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Starts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serverName, options },
                spec: startOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Starts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(resourceGroupName, serverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Stops a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, serverName, options },
                spec: stopOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Stops a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName, serverName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(resourceGroupName, serverName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Server
        },
        201: {
            bodyMapper: Server
        },
        202: {
            bodyMapper: Server
        },
        204: {
            bodyMapper: Server
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Server
        },
        201: {
            bodyMapper: Server
        },
        202: {
            bodyMapper: Server
        },
        204: {
            bodyMapper: Server
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Server
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/flexibleServers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const restartOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/restart",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};
const startOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const stopOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.DBforPostgreSQL/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing GetPrivateDnsZoneSuffix operations. */
class GetPrivateDnsZoneSuffixImpl {
    /**
     * Initialize a new instance of the class GetPrivateDnsZoneSuffix class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get private DNS zone suffix in the cloud
     * @param options The options parameters.
     */
    execute(options) {
        return this.client.sendOperationRequest({ options }, executeOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const executeOperationSpec$1 = {
    path: "/providers/Microsoft.DBforPostgreSQL/getPrivateDnsZoneSuffix",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: { type: { name: "String" } }
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Replicas operations. */
class ReplicasImpl {
    /**
     * Initialize a new instance of the class Replicas class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the replicas for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName, serverName, options) {
        const iter = this.listByServerPagingAll(resourceGroupName, serverName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByServerPagingPage(resourceGroupName, serverName, options, settings);
            }
        };
    }
    listByServerPagingPage(resourceGroupName, serverName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByServer(resourceGroupName, serverName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByServerPagingAll(resourceGroupName, serverName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByServerPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByServerPagingPage(resourceGroupName, serverName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all the replicas for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    _listByServer(resourceGroupName, serverName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, serverName, options }, listByServerOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByServerOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DBforPostgreSQL/flexibleServers/{serverName}/replicas",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ServerListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        serverName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing VirtualNetworkSubnetUsage operations. */
class VirtualNetworkSubnetUsageImpl {
    /**
     * Initialize a new instance of the class VirtualNetworkSubnetUsage class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get virtual network subnet usage for a given vNet resource id.
     * @param locationName The name of the location.
     * @param parameters The required parameters for creating or updating a server.
     * @param options The options parameters.
     */
    execute(locationName, parameters, options) {
        return this.client.sendOperationRequest({ locationName, parameters, options }, executeOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const executeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DBforPostgreSQL/locations/{locationName}/checkVirtualNetworkSubnetUsage",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: VirtualNetworkSubnetUsageResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        locationName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class PostgreSQLManagementFlexibleServerClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the PostgreSQLManagementFlexibleServerClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-postgresql-flexible/7.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-12-01";
        this.administrators = new AdministratorsImpl(this);
        this.backups = new BackupsImpl(this);
        this.locationBasedCapabilities = new LocationBasedCapabilitiesImpl(this);
        this.checkNameAvailability = new CheckNameAvailabilityImpl(this);
        this.checkNameAvailabilityWithLocation = new CheckNameAvailabilityWithLocationImpl(this);
        this.configurations = new ConfigurationsImpl(this);
        this.databases = new DatabasesImpl(this);
        this.firewallRules = new FirewallRulesImpl(this);
        this.servers = new ServersImpl(this);
        this.operations = new OperationsImpl(this);
        this.getPrivateDnsZoneSuffix = new GetPrivateDnsZoneSuffixImpl(this);
        this.replicas = new ReplicasImpl(this);
        this.virtualNetworkSubnetUsage = new VirtualNetworkSubnetUsageImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.PostgreSQLManagementFlexibleServerClient = PostgreSQLManagementFlexibleServerClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
