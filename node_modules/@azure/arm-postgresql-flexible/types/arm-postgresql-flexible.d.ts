import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Represents an Active Directory administrator. */
export declare interface ActiveDirectoryAdministrator extends ProxyResource {
    /** The principal type used to represent the type of Active Directory Administrator. */
    principalType?: PrincipalType;
    /** Active Directory administrator principal name. */
    principalName?: string;
    /** The objectId of the Active Directory administrator. */
    objectId?: string;
    /** The tenantId of the Active Directory administrator. */
    tenantId?: string;
}

/** Represents an Active Directory administrator. */
export declare interface ActiveDirectoryAdministratorAdd {
    /** The principal type used to represent the type of Active Directory Administrator. */
    principalType?: PrincipalType;
    /** Active Directory administrator principal name. */
    principalName?: string;
    /** The tenantId of the Active Directory administrator. */
    tenantId?: string;
}

/**
 * Defines values for ActiveDirectoryAuthEnum. \
 * {@link KnownActiveDirectoryAuthEnum} can be used interchangeably with ActiveDirectoryAuthEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type ActiveDirectoryAuthEnum = string;

/** A list of active directory administrators. */
export declare interface AdministratorListResult {
    /** The list of active directory administrators */
    value?: ActiveDirectoryAdministrator[];
    /** The link used to get the next page of active directory. */
    nextLink?: string;
}

/** Interface representing a Administrators. */
export declare interface Administrators {
    /**
     * List all the AAD administrators for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: AdministratorsListByServerOptionalParams): PagedAsyncIterableIterator<ActiveDirectoryAdministrator>;
    /**
     * Creates a new server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param parameters The required parameters for adding an active directory administrator for a server.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, serverName: string, objectId: string, parameters: ActiveDirectoryAdministratorAdd, options?: AdministratorsCreateOptionalParams): Promise<SimplePollerLike<OperationState<AdministratorsCreateResponse>, AdministratorsCreateResponse>>;
    /**
     * Creates a new server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param parameters The required parameters for adding an active directory administrator for a server.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, serverName: string, objectId: string, parameters: ActiveDirectoryAdministratorAdd, options?: AdministratorsCreateOptionalParams): Promise<AdministratorsCreateResponse>;
    /**
     * Deletes an Active Directory Administrator associated with the server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, objectId: string, options?: AdministratorsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes an Active Directory Administrator associated with the server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, objectId: string, options?: AdministratorsDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param objectId Guid of the objectId for the administrator.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, objectId: string, options?: AdministratorsGetOptionalParams): Promise<AdministratorsGetResponse>;
}

/** Defines headers for Administrators_create operation. */
export declare interface AdministratorsCreateHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface AdministratorsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type AdministratorsCreateResponse = ActiveDirectoryAdministrator;

/** Defines headers for Administrators_delete operation. */
export declare interface AdministratorsDeleteHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface AdministratorsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AdministratorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AdministratorsGetResponse = ActiveDirectoryAdministrator;

/** Optional parameters. */
export declare interface AdministratorsListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type AdministratorsListByServerNextResponse = AdministratorListResult;

/** Optional parameters. */
export declare interface AdministratorsListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type AdministratorsListByServerResponse = AdministratorListResult;

/**
 * Defines values for ArmServerKeyType. \
 * {@link KnownArmServerKeyType} can be used interchangeably with ArmServerKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemManaged** \
 * **AzureKeyVault**
 */
export declare type ArmServerKeyType = string;

/** Authentication configuration properties of a server */
export declare interface AuthConfig {
    /** If Enabled, Azure Active Directory authentication is enabled. */
    activeDirectoryAuth?: ActiveDirectoryAuthEnum;
    /** If Enabled, Password authentication is enabled. */
    passwordAuth?: PasswordAuthEnum;
    /** Tenant id of the server. */
    tenantId?: string;
}

/** Backup properties of a server */
export declare interface Backup {
    /** Backup retention days for the server. */
    backupRetentionDays?: number;
    /** A value indicating whether Geo-Redundant backup is enabled on the server. */
    geoRedundantBackup?: GeoRedundantBackupEnum;
    /**
     * The earliest restore point time (ISO8601 format) for server.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly earliestRestoreDate?: Date;
}

/** Interface representing a Backups. */
export declare interface Backups {
    /**
     * List all the backups for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: BackupsListByServerOptionalParams): PagedAsyncIterableIterator<ServerBackup>;
    /**
     * Get specific backup for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param backupName The name of the backup.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, backupName: string, options?: BackupsGetOptionalParams): Promise<BackupsGetResponse>;
}

/** Optional parameters. */
export declare interface BackupsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BackupsGetResponse = ServerBackup;

/** Optional parameters. */
export declare interface BackupsListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type BackupsListByServerNextResponse = ServerBackupListResult;

/** Optional parameters. */
export declare interface BackupsListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type BackupsListByServerResponse = ServerBackupListResult;

/** location capability */
export declare interface CapabilitiesListResult {
    /**
     * A list of supported capabilities.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: CapabilityProperties[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Location capabilities. */
export declare interface CapabilityProperties {
    /**
     * zone name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zone?: string;
    /**
     * Supported high availability mode
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedHAMode?: string[];
    /**
     * A value indicating whether a new server in this region can have geo-backups to paired region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly geoBackupSupported?: boolean;
    /**
     * A value indicating whether a new server in this region can support multi zone HA.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zoneRedundantHaSupported?: boolean;
    /**
     * A value indicating whether a new server in this region can have geo-backups to paired region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly zoneRedundantHaAndGeoBackupSupported?: boolean;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly supportedFlexibleServerEditions?: FlexibleServerEditionCapability[];
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly supportedHyperscaleNodeEditions?: HyperscaleNodeEditionCapability[];
    /**
     * A value indicating whether fast provisioning is supported in this region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fastProvisioningSupported?: boolean;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly supportedFastProvisioningEditions?: FastProvisioningEditionCapability[];
    /**
     * The status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Interface representing a CheckNameAvailability. */
export declare interface CheckNameAvailability {
    /**
     * Check the availability of name for resource
     * @param nameAvailabilityRequest The required parameters for checking if resource name is available.
     * @param options The options parameters.
     */
    execute(nameAvailabilityRequest: CheckNameAvailabilityRequest, options?: CheckNameAvailabilityExecuteOptionalParams): Promise<CheckNameAvailabilityExecuteResponse>;
}

/** Optional parameters. */
export declare interface CheckNameAvailabilityExecuteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the execute operation. */
export declare type CheckNameAvailabilityExecuteResponse = NameAvailability;

/**
 * Defines values for CheckNameAvailabilityReason. \
 * {@link KnownCheckNameAvailabilityReason} can be used interchangeably with CheckNameAvailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export declare type CheckNameAvailabilityReason = string;

/** The check availability request body. */
export declare interface CheckNameAvailabilityRequest {
    /** The name of the resource for which availability needs to be checked. */
    name?: string;
    /** The resource type. */
    type?: string;
}

/** The check availability result. */
export declare interface CheckNameAvailabilityResponse {
    /** Indicates if the resource name is available. */
    nameAvailable?: boolean;
    /** The reason why the given name is not available. */
    reason?: CheckNameAvailabilityReason;
    /** Detailed reason why the given name is available. */
    message?: string;
}

/** Interface representing a CheckNameAvailabilityWithLocation. */
export declare interface CheckNameAvailabilityWithLocation {
    /**
     * Check the availability of name for resource
     * @param locationName The name of the location.
     * @param nameAvailabilityRequest The required parameters for checking if resource name is available.
     * @param options The options parameters.
     */
    execute(locationName: string, nameAvailabilityRequest: CheckNameAvailabilityRequest, options?: CheckNameAvailabilityWithLocationExecuteOptionalParams): Promise<CheckNameAvailabilityWithLocationExecuteResponse>;
}

/** Optional parameters. */
export declare interface CheckNameAvailabilityWithLocationExecuteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the execute operation. */
export declare type CheckNameAvailabilityWithLocationExecuteResponse = NameAvailability;

/** Represents a Configuration. */
export declare interface Configuration extends ProxyResource {
    /** Value of the configuration. */
    value?: string;
    /**
     * Description of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Default value of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultValue?: string;
    /**
     * Data type of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataType?: ConfigurationDataType;
    /**
     * Allowed values of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly allowedValues?: string;
    /** Source of the configuration. */
    source?: string;
    /**
     * Configuration dynamic or static.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDynamicConfig?: boolean;
    /**
     * Configuration read-only or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isReadOnly?: boolean;
    /**
     * Configuration is pending restart or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isConfigPendingRestart?: boolean;
    /**
     * Configuration unit.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: string;
    /**
     * Configuration documentation link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly documentationLink?: string;
}

/**
 * Defines values for ConfigurationDataType. \
 * {@link KnownConfigurationDataType} can be used interchangeably with ConfigurationDataType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Boolean** \
 * **Numeric** \
 * **Integer** \
 * **Enumeration**
 */
export declare type ConfigurationDataType = string;

/** Represents a Configuration. */
export declare interface ConfigurationForUpdate {
    /** Value of the configuration. */
    value?: string;
    /**
     * Description of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Default value of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultValue?: string;
    /**
     * Data type of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataType?: ConfigurationDataType;
    /**
     * Allowed values of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly allowedValues?: string;
    /** Source of the configuration. */
    source?: string;
    /**
     * Configuration dynamic or static.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDynamicConfig?: boolean;
    /**
     * Configuration read-only or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isReadOnly?: boolean;
    /**
     * Configuration is pending restart or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isConfigPendingRestart?: boolean;
    /**
     * Configuration unit.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: string;
    /**
     * Configuration documentation link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly documentationLink?: string;
}

/** A list of server configurations. */
export declare interface ConfigurationListResult {
    /** The list of server configurations. */
    value?: Configuration[];
    /** The link used to get the next page of operations. */
    nextLink?: string;
}

/** Interface representing a Configurations. */
export declare interface Configurations {
    /**
     * List all the configurations in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: ConfigurationsListByServerOptionalParams): PagedAsyncIterableIterator<Configuration>;
    /**
     * Gets information about a configuration of server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, configurationName: string, options?: ConfigurationsGetOptionalParams): Promise<ConfigurationsGetResponse>;
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serverName: string, configurationName: string, parameters: ConfigurationForUpdate, options?: ConfigurationsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ConfigurationsUpdateResponse>, ConfigurationsUpdateResponse>>;
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serverName: string, configurationName: string, parameters: ConfigurationForUpdate, options?: ConfigurationsUpdateOptionalParams): Promise<ConfigurationsUpdateResponse>;
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginPut(resourceGroupName: string, serverName: string, configurationName: string, parameters: Configuration, options?: ConfigurationsPutOptionalParams): Promise<SimplePollerLike<OperationState<ConfigurationsPutResponse>, ConfigurationsPutResponse>>;
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginPutAndWait(resourceGroupName: string, serverName: string, configurationName: string, parameters: Configuration, options?: ConfigurationsPutOptionalParams): Promise<ConfigurationsPutResponse>;
}

/** Optional parameters. */
export declare interface ConfigurationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConfigurationsGetResponse = Configuration;

/** Optional parameters. */
export declare interface ConfigurationsListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type ConfigurationsListByServerNextResponse = ConfigurationListResult;

/** Optional parameters. */
export declare interface ConfigurationsListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type ConfigurationsListByServerResponse = ConfigurationListResult;

/** Defines headers for Configurations_put operation. */
export declare interface ConfigurationsPutHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ConfigurationsPutOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the put operation. */
export declare type ConfigurationsPutResponse = Configuration;

/** Defines headers for Configurations_update operation. */
export declare interface ConfigurationsUpdateHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ConfigurationsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ConfigurationsUpdateResponse = Configuration;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for CreateMode. \
 * {@link KnownCreateMode} can be used interchangeably with CreateMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Create** \
 * **Update** \
 * **PointInTimeRestore** \
 * **GeoRestore** \
 * **Replica**
 */
export declare type CreateMode = string;

/**
 * Defines values for CreateModeForUpdate. \
 * {@link KnownCreateModeForUpdate} can be used interchangeably with CreateModeForUpdate,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Update**
 */
export declare type CreateModeForUpdate = string;

/** Represents a Database. */
export declare interface Database extends ProxyResource {
    /** The charset of the database. */
    charset?: string;
    /** The collation of the database. */
    collation?: string;
}

/** A List of databases. */
export declare interface DatabaseListResult {
    /** The list of databases housed in a server */
    value?: Database[];
    /** The link used to get the next page of databases. */
    nextLink?: string;
}

/** Interface representing a Databases. */
export declare interface Databases {
    /**
     * List all the databases in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: DatabasesListByServerOptionalParams): PagedAsyncIterableIterator<Database>;
    /**
     * Creates a new database or updates an existing database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param parameters The required parameters for creating or updating a database.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, serverName: string, databaseName: string, parameters: Database, options?: DatabasesCreateOptionalParams): Promise<SimplePollerLike<OperationState<DatabasesCreateResponse>, DatabasesCreateResponse>>;
    /**
     * Creates a new database or updates an existing database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param parameters The required parameters for creating or updating a database.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, serverName: string, databaseName: string, parameters: Database, options?: DatabasesCreateOptionalParams): Promise<DatabasesCreateResponse>;
    /**
     * Deletes a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, databaseName: string, options?: DatabasesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, databaseName: string, options?: DatabasesDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: DatabasesGetOptionalParams): Promise<DatabasesGetResponse>;
}

/** Defines headers for Databases_create operation. */
export declare interface DatabasesCreateHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface DatabasesCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type DatabasesCreateResponse = Database;

/** Defines headers for Databases_delete operation. */
export declare interface DatabasesDeleteHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface DatabasesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DatabasesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DatabasesGetResponse = Database;

/** Optional parameters. */
export declare interface DatabasesListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type DatabasesListByServerNextResponse = DatabaseListResult;

/** Optional parameters. */
export declare interface DatabasesListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type DatabasesListByServerResponse = DatabaseListResult;

/** Data encryption properties of a server */
export declare interface DataEncryption {
    /** URI for the key for data encryption for primary server. */
    primaryKeyURI?: string;
    /** Resource Id for the User assigned identity to be used for data encryption for primary server. */
    primaryUserAssignedIdentityId?: string;
    /** Data encryption type to depict if it is System Managed vs Azure Key vault. */
    type?: ArmServerKeyType;
}

/** Delegated subnet usage data. */
export declare interface DelegatedSubnetUsage {
    /**
     * Name of the delegated subnet for which IP addresses are in use
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subnetName?: string;
    /**
     * Number of IP addresses used by the delegated subnet
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly usage?: number;
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/**
 * Defines values for FailoverMode. \
 * {@link KnownFailoverMode} can be used interchangeably with FailoverMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PlannedFailover** \
 * **ForcedFailover** \
 * **PlannedSwitchover** \
 * **ForcedSwitchover**
 */
export declare type FailoverMode = string;

export declare interface FastProvisioningEditionCapability {
    /**
     * Fast provisioning supported sku name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedSku?: string;
    /**
     * Fast provisioning supported storage in Gb
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedStorageGb?: number;
    /**
     * Fast provisioning supported version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedServerVersions?: string;
}

/** Represents a server firewall rule. */
export declare interface FirewallRule extends ProxyResource {
    /** The start IP address of the server firewall rule. Must be IPv4 format. */
    startIpAddress: string;
    /** The end IP address of the server firewall rule. Must be IPv4 format. */
    endIpAddress: string;
}

/** A list of firewall rules. */
export declare interface FirewallRuleListResult {
    /** The list of firewall rules in a server. */
    value?: FirewallRule[];
    /** The link used to get the next page of operations. */
    nextLink?: string;
}

/** Interface representing a FirewallRules. */
export declare interface FirewallRules {
    /**
     * List all the firewall rules in a given PostgreSQL server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: FirewallRulesListByServerOptionalParams): PagedAsyncIterableIterator<FirewallRule>;
    /**
     * Creates a new firewall rule or updates an existing firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param parameters The required parameters for creating or updating a firewall rule.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: FirewallRule, options?: FirewallRulesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<FirewallRulesCreateOrUpdateResponse>, FirewallRulesCreateOrUpdateResponse>>;
    /**
     * Creates a new firewall rule or updates an existing firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param parameters The required parameters for creating or updating a firewall rule.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: FirewallRule, options?: FirewallRulesCreateOrUpdateOptionalParams): Promise<FirewallRulesCreateOrUpdateResponse>;
    /**
     * Deletes a PostgreSQL server firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: FirewallRulesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a PostgreSQL server firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: FirewallRulesDeleteOptionalParams): Promise<void>;
    /**
     * List all the firewall rules in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: FirewallRulesGetOptionalParams): Promise<FirewallRulesGetResponse>;
}

/** Defines headers for FirewallRules_createOrUpdate operation. */
export declare interface FirewallRulesCreateOrUpdateHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface FirewallRulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type FirewallRulesCreateOrUpdateResponse = FirewallRule;

/** Defines headers for FirewallRules_delete operation. */
export declare interface FirewallRulesDeleteHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface FirewallRulesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface FirewallRulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type FirewallRulesGetResponse = FirewallRule;

/** Optional parameters. */
export declare interface FirewallRulesListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type FirewallRulesListByServerNextResponse = FirewallRuleListResult;

/** Optional parameters. */
export declare interface FirewallRulesListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type FirewallRulesListByServerResponse = FirewallRuleListResult;

/** Flexible server edition capabilities. */
export declare interface FlexibleServerEditionCapability {
    /**
     * Server edition name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The list of editions supported by this server edition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedStorageEditions?: StorageEditionCapability[];
    /**
     * The list of server versions supported by this server edition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedServerVersions?: ServerVersionCapability[];
    /**
     * The status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/**
 * Defines values for GeoRedundantBackupEnum. \
 * {@link KnownGeoRedundantBackupEnum} can be used interchangeably with GeoRedundantBackupEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type GeoRedundantBackupEnum = string;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Interface representing a GetPrivateDnsZoneSuffix. */
export declare interface GetPrivateDnsZoneSuffix {
    /**
     * Get private DNS zone suffix in the cloud
     * @param options The options parameters.
     */
    execute(options?: GetPrivateDnsZoneSuffixExecuteOptionalParams): Promise<GetPrivateDnsZoneSuffixExecuteResponse>;
}

/** Optional parameters. */
export declare interface GetPrivateDnsZoneSuffixExecuteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the execute operation. */
export declare type GetPrivateDnsZoneSuffixExecuteResponse = {
    /** The parsed response body. */
    body: string;
};

/** High availability properties of a server */
export declare interface HighAvailability {
    /** The HA mode for the server. */
    mode?: HighAvailabilityMode;
    /**
     * A state of a HA server that is visible to user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: ServerHAState;
    /** availability zone information of the standby. */
    standbyAvailabilityZone?: string;
}

/**
 * Defines values for HighAvailabilityMode. \
 * {@link KnownHighAvailabilityMode} can be used interchangeably with HighAvailabilityMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **ZoneRedundant** \
 * **SameZone**
 */
export declare type HighAvailabilityMode = string;

/** Hyperscale node edition capabilities. */
export declare interface HyperscaleNodeEditionCapability {
    /**
     * Server edition name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The list of editions supported by this server edition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedStorageEditions?: StorageEditionCapability[];
    /**
     * The list of server versions supported by this server edition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedServerVersions?: ServerVersionCapability[];
    /**
     * The list of Node Types supported by this server edition.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedNodeTypes?: NodeTypeCapability[];
    /**
     * The status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned**
 */
export declare type IdentityType = string;

/** Known values of {@link ActiveDirectoryAuthEnum} that the service accepts. */
export declare enum KnownActiveDirectoryAuthEnum {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link ArmServerKeyType} that the service accepts. */
export declare enum KnownArmServerKeyType {
    /** SystemManaged */
    SystemManaged = "SystemManaged",
    /** AzureKeyVault */
    AzureKeyVault = "AzureKeyVault"
}

/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
export declare enum KnownCheckNameAvailabilityReason {
    /** Invalid */
    Invalid = "Invalid",
    /** AlreadyExists */
    AlreadyExists = "AlreadyExists"
}

/** Known values of {@link ConfigurationDataType} that the service accepts. */
export declare enum KnownConfigurationDataType {
    /** Boolean */
    Boolean = "Boolean",
    /** Numeric */
    Numeric = "Numeric",
    /** Integer */
    Integer = "Integer",
    /** Enumeration */
    Enumeration = "Enumeration"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link CreateMode} that the service accepts. */
export declare enum KnownCreateMode {
    /** Default */
    Default = "Default",
    /** Create */
    Create = "Create",
    /** Update */
    Update = "Update",
    /** PointInTimeRestore */
    PointInTimeRestore = "PointInTimeRestore",
    /** GeoRestore */
    GeoRestore = "GeoRestore",
    /** Replica */
    Replica = "Replica"
}

/** Known values of {@link CreateModeForUpdate} that the service accepts. */
export declare enum KnownCreateModeForUpdate {
    /** Default */
    Default = "Default",
    /** Update */
    Update = "Update"
}

/** Known values of {@link FailoverMode} that the service accepts. */
export declare enum KnownFailoverMode {
    /** PlannedFailover */
    PlannedFailover = "PlannedFailover",
    /** ForcedFailover */
    ForcedFailover = "ForcedFailover",
    /** PlannedSwitchover */
    PlannedSwitchover = "PlannedSwitchover",
    /** ForcedSwitchover */
    ForcedSwitchover = "ForcedSwitchover"
}

/** Known values of {@link GeoRedundantBackupEnum} that the service accepts. */
export declare enum KnownGeoRedundantBackupEnum {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link HighAvailabilityMode} that the service accepts. */
export declare enum KnownHighAvailabilityMode {
    /** Disabled */
    Disabled = "Disabled",
    /** ZoneRedundant */
    ZoneRedundant = "ZoneRedundant",
    /** SameZone */
    SameZone = "SameZone"
}

/** Known values of {@link IdentityType} that the service accepts. */
export declare enum KnownIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned"
}

/** Known values of {@link OperationOrigin} that the service accepts. */
export declare enum KnownOperationOrigin {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** User */
    User = "user",
    /** System */
    System = "system"
}

/** Known values of {@link Origin} that the service accepts. */
export declare enum KnownOrigin {
    /** Full */
    Full = "Full"
}

/** Known values of {@link PasswordAuthEnum} that the service accepts. */
export declare enum KnownPasswordAuthEnum {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link PrincipalType} that the service accepts. */
export declare enum KnownPrincipalType {
    /** Unknown */
    Unknown = "Unknown",
    /** User */
    User = "User",
    /** Group */
    Group = "Group",
    /** ServicePrincipal */
    ServicePrincipal = "ServicePrincipal"
}

/** Known values of {@link ReplicationRole} that the service accepts. */
export declare enum KnownReplicationRole {
    /** None */
    None = "None",
    /** Primary */
    Primary = "Primary",
    /** AsyncReplica */
    AsyncReplica = "AsyncReplica",
    /** GeoAsyncReplica */
    GeoAsyncReplica = "GeoAsyncReplica"
}

/** Known values of {@link ServerHAState} that the service accepts. */
export declare enum KnownServerHAState {
    /** NotEnabled */
    NotEnabled = "NotEnabled",
    /** CreatingStandby */
    CreatingStandby = "CreatingStandby",
    /** ReplicatingData */
    ReplicatingData = "ReplicatingData",
    /** FailingOver */
    FailingOver = "FailingOver",
    /** Healthy */
    Healthy = "Healthy",
    /** RemovingStandby */
    RemovingStandby = "RemovingStandby"
}

/** Known values of {@link ServerPublicNetworkAccessState} that the service accepts. */
export declare enum KnownServerPublicNetworkAccessState {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link ServerState} that the service accepts. */
export declare enum KnownServerState {
    /** Ready */
    Ready = "Ready",
    /** Dropping */
    Dropping = "Dropping",
    /** Disabled */
    Disabled = "Disabled",
    /** Starting */
    Starting = "Starting",
    /** Stopping */
    Stopping = "Stopping",
    /** Stopped */
    Stopped = "Stopped",
    /** Updating */
    Updating = "Updating"
}

/** Known values of {@link ServerVersion} that the service accepts. */
export declare enum KnownServerVersion {
    /** Fourteen */
    Fourteen = "14",
    /** Thirteen */
    Thirteen = "13",
    /** Twelve */
    Twelve = "12",
    /** Eleven */
    Eleven = "11"
}

/** Known values of {@link SkuTier} that the service accepts. */
export declare enum KnownSkuTier {
    /** Burstable */
    Burstable = "Burstable",
    /** GeneralPurpose */
    GeneralPurpose = "GeneralPurpose",
    /** MemoryOptimized */
    MemoryOptimized = "MemoryOptimized"
}

/** Interface representing a LocationBasedCapabilities. */
export declare interface LocationBasedCapabilities {
    /**
     * Get capabilities at specified location in a given subscription.
     * @param locationName The name of the location.
     * @param options The options parameters.
     */
    listExecute(locationName: string, options?: LocationBasedCapabilitiesExecuteOptionalParams): PagedAsyncIterableIterator<CapabilityProperties>;
}

/** Optional parameters. */
export declare interface LocationBasedCapabilitiesExecuteNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the executeNext operation. */
export declare type LocationBasedCapabilitiesExecuteNextResponse = CapabilitiesListResult;

/** Optional parameters. */
export declare interface LocationBasedCapabilitiesExecuteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the execute operation. */
export declare type LocationBasedCapabilitiesExecuteResponse = CapabilitiesListResult;

/** Maintenance window properties of a server. */
export declare interface MaintenanceWindow {
    /** indicates whether custom window is enabled or disabled */
    customWindow?: string;
    /** start hour for maintenance window */
    startHour?: number;
    /** start minute for maintenance window */
    startMinute?: number;
    /** day of week for maintenance window */
    dayOfWeek?: number;
}

/** Represents a resource name availability. */
export declare interface NameAvailability extends CheckNameAvailabilityResponse {
    /**
     * name of the PostgreSQL server.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * type of the server
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Network properties of a server */
export declare interface Network {
    /**
     * public network access is enabled or not
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicNetworkAccess?: ServerPublicNetworkAccessState;
    /** delegated subnet arm resource id. */
    delegatedSubnetResourceId?: string;
    /** private dns zone arm resource id. */
    privateDnsZoneArmResourceId?: string;
}

/** node type capability */
export declare interface NodeTypeCapability {
    /**
     * note type name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * note type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeType?: string;
    /**
     * The status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** REST API operation definition. */
export declare interface Operation {
    /**
     * The name of the operation being performed on this particular object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The localized display information for this particular operation or action.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly display?: OperationDisplay;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /**
     * The intended executor of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: OperationOrigin;
    /**
     * Additional descriptions for the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** Display metadata associated with the operation. */
export declare interface OperationDisplay {
    /**
     * Operation resource provider name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource on which the operation is performed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Localized friendly name for the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * Operation description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of resource provider operations. */
export declare interface OperationListResult {
    /** Collection of available operation details */
    value?: Operation[];
    /**
     * URL client should use to fetch the next page (per server side paging).
     * It's null for now, added for future use.
     */
    nextLink?: string;
}

/**
 * Defines values for OperationOrigin. \
 * {@link KnownOperationOrigin} can be used interchangeably with OperationOrigin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **user** \
 * **system**
 */
export declare type OperationOrigin = string;

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): Promise<OperationsListResponse>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Full**
 */
export declare type Origin = string;

/**
 * Defines values for PasswordAuthEnum. \
 * {@link KnownPasswordAuthEnum} can be used interchangeably with PasswordAuthEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PasswordAuthEnum = string;

export declare class PostgreSQLManagementFlexibleServerClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the PostgreSQLManagementFlexibleServerClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: PostgreSQLManagementFlexibleServerClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    administrators: Administrators;
    backups: Backups;
    locationBasedCapabilities: LocationBasedCapabilities;
    checkNameAvailability: CheckNameAvailability;
    checkNameAvailabilityWithLocation: CheckNameAvailabilityWithLocation;
    configurations: Configurations;
    databases: Databases;
    firewallRules: FirewallRules;
    servers: Servers;
    operations: Operations;
    getPrivateDnsZoneSuffix: GetPrivateDnsZoneSuffix;
    replicas: Replicas;
    virtualNetworkSubnetUsage: VirtualNetworkSubnetUsage;
}

/** Optional parameters. */
export declare interface PostgreSQLManagementFlexibleServerClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/**
 * Defines values for PrincipalType. \
 * {@link KnownPrincipalType} can be used interchangeably with PrincipalType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **User** \
 * **Group** \
 * **ServicePrincipal**
 */
export declare type PrincipalType = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** Interface representing a Replicas. */
export declare interface Replicas {
    /**
     * List all the replicas for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: ReplicasListByServerOptionalParams): PagedAsyncIterableIterator<Server>;
}

/** Optional parameters. */
export declare interface ReplicasListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type ReplicasListByServerResponse = ServerListResult;

/**
 * Defines values for ReplicationRole. \
 * {@link KnownReplicationRole} can be used interchangeably with ReplicationRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Primary** \
 * **AsyncReplica** \
 * **GeoAsyncReplica**
 */
export declare type ReplicationRole = string;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Represents server restart parameters. */
export declare interface RestartParameter {
    /** Indicates whether to restart the server with failover. */
    restartWithFailover?: boolean;
    /** Failover mode. */
    failoverMode?: FailoverMode;
}

/** Represents a server. */
export declare interface Server extends TrackedResource {
    /** The SKU (pricing tier) of the server. */
    sku?: Sku;
    /** Describes the identity of the application. */
    identity?: UserAssignedIdentity;
    /** The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation). */
    administratorLogin?: string;
    /**
     * The administrator login password (required for server creation).
     * This value contains a credential. Consider obscuring before showing to users
     */
    administratorLoginPassword?: string;
    /** PostgreSQL Server version. */
    version?: ServerVersion;
    /**
     * The minor version of the server.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minorVersion?: string;
    /**
     * A state of a server that is visible to user.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: ServerState;
    /**
     * The fully qualified domain name of a server.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fullyQualifiedDomainName?: string;
    /** Storage properties of a server. */
    storage?: Storage_2;
    /** AuthConfig properties of a server. */
    authConfig?: AuthConfig;
    /** Data encryption properties of a server. */
    dataEncryption?: DataEncryption;
    /** Backup properties of a server. */
    backup?: Backup;
    /** Network properties of a server. */
    network?: Network;
    /** High availability properties of a server. */
    highAvailability?: HighAvailability;
    /** Maintenance window properties of a server. */
    maintenanceWindow?: MaintenanceWindow;
    /** The source server resource ID to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'GeoRestore' or 'Replica'. */
    sourceServerResourceId?: string;
    /** Restore point creation time (ISO8601 format), specifying the time to restore from. It's required when 'createMode' is 'PointInTimeRestore' or 'GeoRestore'. */
    pointInTimeUTC?: Date;
    /** availability zone information of the server. */
    availabilityZone?: string;
    /** Replication role of the server */
    replicationRole?: ReplicationRole;
    /** Replicas allowed for a server. */
    replicaCapacity?: number;
    /** The mode to create a new PostgreSQL server. */
    createMode?: CreateMode;
}

/** Server backup properties */
export declare interface ServerBackup extends ProxyResource {
    /** Backup type. */
    backupType?: Origin;
    /** Backup completed time (ISO8601 format). */
    completedTime?: Date;
    /** Backup source */
    source?: string;
}

/** A list of server backups. */
export declare interface ServerBackupListResult {
    /** The list of backups of a server. */
    value?: ServerBackup[];
    /** The link used to get the next page of operations. */
    nextLink?: string;
}

/** Represents a server to be updated. */
export declare interface ServerForUpdate {
    /** The SKU (pricing tier) of the server. */
    sku?: Sku;
    /** Describes the identity of the application. */
    identity?: UserAssignedIdentity;
    /** Application-specific metadata in the form of key-value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * The password of the administrator login.
     * This value contains a credential. Consider obscuring before showing to users
     */
    administratorLoginPassword?: string;
    /** PostgreSQL Server version. */
    version?: ServerVersion;
    /** Storage properties of a server. */
    storage?: Storage_2;
    /** Backup properties of a server. */
    backup?: Backup;
    /** High availability properties of a server. */
    highAvailability?: HighAvailability;
    /** Maintenance window properties of a server. */
    maintenanceWindow?: MaintenanceWindow;
    /** AuthConfig properties of a server. */
    authConfig?: AuthConfig;
    /** Data encryption properties of a server. */
    dataEncryption?: DataEncryption;
    /** The mode to update a new PostgreSQL server. */
    createMode?: CreateModeForUpdate;
    /** Replication role of the server */
    replicationRole?: ReplicationRole;
}

/**
 * Defines values for ServerHAState. \
 * {@link KnownServerHAState} can be used interchangeably with ServerHAState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotEnabled** \
 * **CreatingStandby** \
 * **ReplicatingData** \
 * **FailingOver** \
 * **Healthy** \
 * **RemovingStandby**
 */
export declare type ServerHAState = string;

/** A list of servers. */
export declare interface ServerListResult {
    /** The list of flexible servers */
    value?: Server[];
    /** The link used to get the next page of operations. */
    nextLink?: string;
}

/**
 * Defines values for ServerPublicNetworkAccessState. \
 * {@link KnownServerPublicNetworkAccessState} can be used interchangeably with ServerPublicNetworkAccessState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type ServerPublicNetworkAccessState = string;

/** Interface representing a Servers. */
export declare interface Servers {
    /**
     * List all the servers in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ServersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Server>;
    /**
     * List all the servers in a given subscription.
     * @param options The options parameters.
     */
    list(options?: ServersListOptionalParams): PagedAsyncIterableIterator<Server>;
    /**
     * Creates a new server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for creating or updating a server.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, serverName: string, parameters: Server, options?: ServersCreateOptionalParams): Promise<SimplePollerLike<OperationState<ServersCreateResponse>, ServersCreateResponse>>;
    /**
     * Creates a new server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for creating or updating a server.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, serverName: string, parameters: Server, options?: ServersCreateOptionalParams): Promise<ServersCreateResponse>;
    /**
     * Updates an existing server. The request body can contain one to many of the properties present in
     * the normal server definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a server.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serverName: string, parameters: ServerForUpdate, options?: ServersUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ServersUpdateResponse>, ServersUpdateResponse>>;
    /**
     * Updates an existing server. The request body can contain one to many of the properties present in
     * the normal server definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a server.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serverName: string, parameters: ServerForUpdate, options?: ServersUpdateOptionalParams): Promise<ServersUpdateResponse>;
    /**
     * Deletes a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, options?: ServersDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, options?: ServersDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, options?: ServersGetOptionalParams): Promise<ServersGetResponse>;
    /**
     * Restarts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, serverName: string, options?: ServersRestartOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Restarts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, serverName: string, options?: ServersRestartOptionalParams): Promise<void>;
    /**
     * Starts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, serverName: string, options?: ServersStartOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Starts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, serverName: string, options?: ServersStartOptionalParams): Promise<void>;
    /**
     * Stops a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, serverName: string, options?: ServersStopOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Stops a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, serverName: string, options?: ServersStopOptionalParams): Promise<void>;
}

/** Defines headers for Servers_create operation. */
export declare interface ServersCreateHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ServersCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ServersCreateResponse = Server;

/** Defines headers for Servers_delete operation. */
export declare interface ServersDeleteHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ServersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServersGetResponse = Server;

/** Optional parameters. */
export declare interface ServersListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ServersListByResourceGroupNextResponse = ServerListResult;

/** Optional parameters. */
export declare interface ServersListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ServersListByResourceGroupResponse = ServerListResult;

/** Optional parameters. */
export declare interface ServersListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ServersListNextResponse = ServerListResult;

/** Optional parameters. */
export declare interface ServersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServersListResponse = ServerListResult;

/** Defines headers for Servers_restart operation. */
export declare interface ServersRestartHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ServersRestartOptionalParams extends coreClient.OperationOptions {
    /** The parameters for restarting a server. */
    parameters?: RestartParameter;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for Servers_start operation. */
export declare interface ServersStartHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ServersStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for Servers_stop operation. */
export declare interface ServersStopHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ServersStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for ServerState. \
 * {@link KnownServerState} can be used interchangeably with ServerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ready** \
 * **Dropping** \
 * **Disabled** \
 * **Starting** \
 * **Stopping** \
 * **Stopped** \
 * **Updating**
 */
export declare type ServerState = string;

/** Defines headers for Servers_update operation. */
export declare interface ServersUpdateHeaders {
    location?: string;
}

/** Optional parameters. */
export declare interface ServersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ServersUpdateResponse = Server;

/**
 * Defines values for ServerVersion. \
 * {@link KnownServerVersion} can be used interchangeably with ServerVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **14** \
 * **13** \
 * **12** \
 * **11**
 */
export declare type ServerVersion = string;

/** Server version capabilities. */
export declare interface ServerVersionCapability {
    /**
     * server version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Supported servers versions to upgrade
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedVersionsToUpgrade?: string[];
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly supportedVcores?: VcoreCapability[];
    /**
     * The status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Sku information related properties of a server. */
export declare interface Sku {
    /** The name of the sku, typically, tier + family + cores, e.g. Standard_D4s_v3. */
    name: string;
    /** The tier of the particular SKU, e.g. Burstable. */
    tier: SkuTier;
}

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Burstable** \
 * **GeneralPurpose** \
 * **MemoryOptimized**
 */
export declare type SkuTier = string;

/** Storage properties of a server */
declare interface Storage_2 {
    /** Max storage allowed for a server. */
    storageSizeGB?: number;
}
export { Storage_2 as Storage }

/** storage edition capability */
export declare interface StorageEditionCapability {
    /**
     * storage edition name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly supportedStorageMB?: StorageMBCapability[];
    /**
     * The status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** storage size in MB capability */
export declare interface StorageMBCapability {
    /**
     * storage MB name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * supported IOPS
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedIops?: number;
    /**
     * storage size in MB
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageSizeMB?: number;
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly supportedUpgradableTierList?: StorageTierCapability[];
    /**
     * The status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

export declare interface StorageTierCapability {
    /**
     * Name to represent Storage tier capability
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Storage tier name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tierName?: string;
    /**
     * Supported IOPS for this storage tier
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iops?: number;
    /**
     * Indicates if this is a baseline storage tier or not
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isBaseline?: boolean;
    /**
     * Status os this storage tier
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** Information describing the identities associated with this application. */
export declare interface UserAssignedIdentity {
    /** represents user assigned identities map. */
    userAssignedIdentities?: {
        [propertyName: string]: UserIdentity;
    };
    /** the types of identities associated with this resource; currently restricted to 'SystemAssigned and UserAssigned' */
    type: IdentityType;
}

/** Describes a single user-assigned identity associated with the application. */
export declare interface UserIdentity {
    /** the object identifier of the Service Principal which this identity represents. */
    principalId?: string;
    /** the client identifier of the Service Principal which this identity represents. */
    clientId?: string;
}

/** Vcores capability */
export declare interface VcoreCapability {
    /**
     * vCore name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * supported vCores
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vCores?: number;
    /**
     * supported IOPS
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedIops?: number;
    /**
     * supported memory per vCore in MB
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportedMemoryPerVcoreMB?: number;
    /**
     * The status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** Interface representing a VirtualNetworkSubnetUsage. */
export declare interface VirtualNetworkSubnetUsage {
    /**
     * Get virtual network subnet usage for a given vNet resource id.
     * @param locationName The name of the location.
     * @param parameters The required parameters for creating or updating a server.
     * @param options The options parameters.
     */
    execute(locationName: string, parameters: VirtualNetworkSubnetUsageParameter, options?: VirtualNetworkSubnetUsageExecuteOptionalParams): Promise<VirtualNetworkSubnetUsageExecuteResponse>;
}

/** Optional parameters. */
export declare interface VirtualNetworkSubnetUsageExecuteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the execute operation. */
export declare type VirtualNetworkSubnetUsageExecuteResponse = VirtualNetworkSubnetUsageResult;

/** Virtual network subnet usage parameter */
export declare interface VirtualNetworkSubnetUsageParameter {
    /** Virtual network resource id. */
    virtualNetworkArmResourceId?: string;
}

/** Virtual network subnet usage data. */
export declare interface VirtualNetworkSubnetUsageResult {
    /** NOTE: This property will not be serialized. It can only be populated by the server. */
    readonly delegatedSubnetsUsage?: DelegatedSubnetUsage[];
    /**
     * location of the delegated subnet usage
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * subscriptionId of the delegated subnet usage
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
}

export { }
