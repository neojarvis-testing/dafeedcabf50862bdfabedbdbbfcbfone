import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Represents a recommendation action advisor. */
export declare interface Advisor extends ProxyResource {
    /** The properties of a recommendation action advisor. */
    properties?: Record<string, unknown>;
}

/** Interface representing a Advisors. */
export declare interface Advisors {
    /**
     * List recommendation action advisors.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: AdvisorsListByServerOptionalParams): PagedAsyncIterableIterator<Advisor>;
    /**
     * Get a recommendation action advisor.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param advisorName The advisor name for recommendation action.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, advisorName: string, options?: AdvisorsGetOptionalParams): Promise<AdvisorsGetResponse>;
}

/** Optional parameters. */
export declare interface AdvisorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AdvisorsGetResponse = Advisor;

/** Optional parameters. */
export declare interface AdvisorsListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type AdvisorsListByServerNextResponse = AdvisorsResultList;

/** Optional parameters. */
export declare interface AdvisorsListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type AdvisorsListByServerResponse = AdvisorsResultList;

/** A list of query statistics. */
export declare interface AdvisorsResultList {
    /**
     * The list of recommendation action advisors.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Advisor[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a CheckNameAvailability. */
export declare interface CheckNameAvailability {
    /**
     * Check the availability of name for resource
     * @param nameAvailabilityRequest The required parameters for checking if resource name is available.
     * @param options The options parameters.
     */
    execute(nameAvailabilityRequest: NameAvailabilityRequest, options?: CheckNameAvailabilityExecuteOptionalParams): Promise<CheckNameAvailabilityExecuteResponse>;
}

/** Optional parameters. */
export declare interface CheckNameAvailabilityExecuteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the execute operation. */
export declare type CheckNameAvailabilityExecuteResponse = NameAvailability;

/** An error response from the Batch service. */
export declare interface CloudError {
    /** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
    error?: ErrorResponse;
}

/** An error response from the Batch service. */
export declare interface CloudErrorAutoGenerated {
    /** Error message */
    error?: ErrorResponse;
}

/** Represents a Configuration. */
export declare interface Configuration extends ProxyResource {
    /** Value of the configuration. */
    value?: string;
    /**
     * Description of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Default value of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultValue?: string;
    /**
     * Data type of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataType?: string;
    /**
     * Allowed values of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly allowedValues?: string;
    /** Source of the configuration. */
    source?: string;
}

/** A list of server configurations. */
export declare interface ConfigurationListResult {
    /** The list of server configurations. */
    value?: Configuration[];
}

/** Interface representing a Configurations. */
export declare interface Configurations {
    /**
     * List all the configurations in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: ConfigurationsListByServerOptionalParams): PagedAsyncIterableIterator<Configuration>;
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, configurationName: string, parameters: Configuration, options?: ConfigurationsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ConfigurationsCreateOrUpdateResponse>, ConfigurationsCreateOrUpdateResponse>>;
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, configurationName: string, parameters: Configuration, options?: ConfigurationsCreateOrUpdateOptionalParams): Promise<ConfigurationsCreateOrUpdateResponse>;
    /**
     * Gets information about a configuration of server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, configurationName: string, options?: ConfigurationsGetOptionalParams): Promise<ConfigurationsGetResponse>;
}

/** Optional parameters. */
export declare interface ConfigurationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ConfigurationsCreateOrUpdateResponse = Configuration;

/** Optional parameters. */
export declare interface ConfigurationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConfigurationsGetResponse = Configuration;

/** Optional parameters. */
export declare interface ConfigurationsListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type ConfigurationsListByServerResponse = ConfigurationListResult;

/**
 * Defines values for CreateMode. \
 * {@link KnownCreateMode} can be used interchangeably with CreateMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **PointInTimeRestore** \
 * **GeoRestore** \
 * **Replica**
 */
export declare type CreateMode = string;

/** Optional parameters. */
export declare interface CreateRecommendedActionSessionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Represents a Database. */
export declare interface Database extends ProxyResource {
    /** The charset of the database. */
    charset?: string;
    /** The collation of the database. */
    collation?: string;
}

/** A List of databases. */
export declare interface DatabaseListResult {
    /** The list of databases housed in a server */
    value?: Database[];
}

/** Interface representing a Databases. */
export declare interface Databases {
    /**
     * List all the databases in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: DatabasesListByServerOptionalParams): PagedAsyncIterableIterator<Database>;
    /**
     * Creates a new database or updates an existing database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param parameters The required parameters for creating or updating a database.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, databaseName: string, parameters: Database, options?: DatabasesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<DatabasesCreateOrUpdateResponse>, DatabasesCreateOrUpdateResponse>>;
    /**
     * Creates a new database or updates an existing database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param parameters The required parameters for creating or updating a database.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, databaseName: string, parameters: Database, options?: DatabasesCreateOrUpdateOptionalParams): Promise<DatabasesCreateOrUpdateResponse>;
    /**
     * Deletes a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, databaseName: string, options?: DatabasesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, databaseName: string, options?: DatabasesDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, databaseName: string, options?: DatabasesGetOptionalParams): Promise<DatabasesGetResponse>;
}

/** Optional parameters. */
export declare interface DatabasesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DatabasesCreateOrUpdateResponse = Database;

/** Optional parameters. */
export declare interface DatabasesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DatabasesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DatabasesGetResponse = Database;

/** Optional parameters. */
export declare interface DatabasesListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type DatabasesListByServerResponse = DatabaseListResult;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.) */
export declare interface ErrorResponse {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorResponse[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Represents a server firewall rule. */
export declare interface FirewallRule extends ProxyResource {
    /** The start IP address of the server firewall rule. Must be IPv4 format. */
    startIpAddress: string;
    /** The end IP address of the server firewall rule. Must be IPv4 format. */
    endIpAddress: string;
}

/** A list of firewall rules. */
export declare interface FirewallRuleListResult {
    /** The list of firewall rules in a server. */
    value?: FirewallRule[];
}

/** Interface representing a FirewallRules. */
export declare interface FirewallRules {
    /**
     * List all the firewall rules in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: FirewallRulesListByServerOptionalParams): PagedAsyncIterableIterator<FirewallRule>;
    /**
     * Creates a new firewall rule or updates an existing firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param parameters The required parameters for creating or updating a firewall rule.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: FirewallRule, options?: FirewallRulesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<FirewallRulesCreateOrUpdateResponse>, FirewallRulesCreateOrUpdateResponse>>;
    /**
     * Creates a new firewall rule or updates an existing firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param parameters The required parameters for creating or updating a firewall rule.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, firewallRuleName: string, parameters: FirewallRule, options?: FirewallRulesCreateOrUpdateOptionalParams): Promise<FirewallRulesCreateOrUpdateResponse>;
    /**
     * Deletes a server firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: FirewallRulesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a server firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: FirewallRulesDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about a server firewall rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param firewallRuleName The name of the server firewall rule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, firewallRuleName: string, options?: FirewallRulesGetOptionalParams): Promise<FirewallRulesGetResponse>;
}

/** Optional parameters. */
export declare interface FirewallRulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type FirewallRulesCreateOrUpdateResponse = FirewallRule;

/** Optional parameters. */
export declare interface FirewallRulesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface FirewallRulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type FirewallRulesGetResponse = FirewallRule;

/** Optional parameters. */
export declare interface FirewallRulesListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type FirewallRulesListByServerResponse = FirewallRuleListResult;

/**
 * Defines values for GeoRedundantBackup. \
 * {@link KnownGeoRedundantBackup} can be used interchangeably with GeoRedundantBackup,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type GeoRedundantBackup = string;

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned**
 */
export declare type IdentityType = string;

/**
 * Defines values for InfrastructureEncryption. \
 * {@link KnownInfrastructureEncryption} can be used interchangeably with InfrastructureEncryption,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Default value for single layer of encryption for data at rest. \
 * **Disabled**: Additional (2nd) layer of encryption for data at rest
 */
export declare type InfrastructureEncryption = string;

/** Known values of {@link CreateMode} that the service accepts. */
export declare enum KnownCreateMode {
    /** Default */
    Default = "Default",
    /** PointInTimeRestore */
    PointInTimeRestore = "PointInTimeRestore",
    /** GeoRestore */
    GeoRestore = "GeoRestore",
    /** Replica */
    Replica = "Replica"
}

/** Known values of {@link GeoRedundantBackup} that the service accepts. */
export declare enum KnownGeoRedundantBackup {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link IdentityType} that the service accepts. */
export declare enum KnownIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned"
}

/** Known values of {@link InfrastructureEncryption} that the service accepts. */
export declare enum KnownInfrastructureEncryption {
    /** Default value for single layer of encryption for data at rest. */
    Enabled = "Enabled",
    /** Additional (2nd) layer of encryption for data at rest */
    Disabled = "Disabled"
}

/** Known values of {@link MinimalTlsVersionEnum} that the service accepts. */
export declare enum KnownMinimalTlsVersionEnum {
    /** TLS10 */
    TLS10 = "TLS1_0",
    /** TLS11 */
    TLS11 = "TLS1_1",
    /** TLS12 */
    TLS12 = "TLS1_2",
    /** TLSEnforcementDisabled */
    TLSEnforcementDisabled = "TLSEnforcementDisabled"
}

/** Known values of {@link OperationOrigin} that the service accepts. */
export declare enum KnownOperationOrigin {
    /** NotSpecified */
    NotSpecified = "NotSpecified",
    /** User */
    User = "user",
    /** System */
    System = "system"
}

/** Known values of {@link PrivateEndpointProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointProvisioningState {
    /** Approving */
    Approving = "Approving",
    /** Ready */
    Ready = "Ready",
    /** Dropping */
    Dropping = "Dropping",
    /** Failed */
    Failed = "Failed",
    /** Rejecting */
    Rejecting = "Rejecting"
}

/** Known values of {@link PrivateLinkServiceConnectionStateActionsRequire} that the service accepts. */
export declare enum KnownPrivateLinkServiceConnectionStateActionsRequire {
    /** None */
    None = "None"
}

/** Known values of {@link PrivateLinkServiceConnectionStateStatus} that the service accepts. */
export declare enum KnownPrivateLinkServiceConnectionStateStatus {
    /** Approved */
    Approved = "Approved",
    /** Pending */
    Pending = "Pending",
    /** Rejected */
    Rejected = "Rejected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link PublicNetworkAccessEnum} that the service accepts. */
export declare enum KnownPublicNetworkAccessEnum {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link QueryPerformanceInsightResetDataResultState} that the service accepts. */
export declare enum KnownQueryPerformanceInsightResetDataResultState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link SecurityAlertPolicyName} that the service accepts. */
export declare enum KnownSecurityAlertPolicyName {
    /** Default */
    Default = "Default"
}

/** Known values of {@link ServerKeyType} that the service accepts. */
export declare enum KnownServerKeyType {
    /** AzureKeyVault */
    AzureKeyVault = "AzureKeyVault"
}

/** Known values of {@link ServerState} that the service accepts. */
export declare enum KnownServerState {
    /** Ready */
    Ready = "Ready",
    /** Dropping */
    Dropping = "Dropping",
    /** Disabled */
    Disabled = "Disabled",
    /** Inaccessible */
    Inaccessible = "Inaccessible"
}

/** Known values of {@link ServerVersion} that the service accepts. */
export declare enum KnownServerVersion {
    /** Five6 */
    Five6 = "5.6",
    /** Five7 */
    Five7 = "5.7",
    /** Eight0 */
    Eight0 = "8.0"
}

/** Known values of {@link SkuTier} that the service accepts. */
export declare enum KnownSkuTier {
    /** Basic */
    Basic = "Basic",
    /** GeneralPurpose */
    GeneralPurpose = "GeneralPurpose",
    /** MemoryOptimized */
    MemoryOptimized = "MemoryOptimized"
}

/** Known values of {@link StorageAutogrow} that the service accepts. */
export declare enum KnownStorageAutogrow {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link VirtualNetworkRuleState} that the service accepts. */
export declare enum KnownVirtualNetworkRuleState {
    /** Initializing */
    Initializing = "Initializing",
    /** InProgress */
    InProgress = "InProgress",
    /** Ready */
    Ready = "Ready",
    /** Deleting */
    Deleting = "Deleting",
    /** Unknown */
    Unknown = "Unknown"
}

/** Interface representing a LocationBasedPerformanceTier. */
export declare interface LocationBasedPerformanceTier {
    /**
     * List all the performance tiers at specified location in a given subscription.
     * @param locationName The name of the location.
     * @param options The options parameters.
     */
    list(locationName: string, options?: LocationBasedPerformanceTierListOptionalParams): PagedAsyncIterableIterator<PerformanceTierProperties>;
}

/** Optional parameters. */
export declare interface LocationBasedPerformanceTierListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type LocationBasedPerformanceTierListResponse = PerformanceTierListResult;

/** Interface representing a LocationBasedRecommendedActionSessionsOperationStatus. */
export declare interface LocationBasedRecommendedActionSessionsOperationStatus {
    /**
     * Recommendation action session operation status.
     * @param locationName The name of the location.
     * @param operationId The operation identifier.
     * @param options The options parameters.
     */
    get(locationName: string, operationId: string, options?: LocationBasedRecommendedActionSessionsOperationStatusGetOptionalParams): Promise<LocationBasedRecommendedActionSessionsOperationStatusGetResponse>;
}

/** Optional parameters. */
export declare interface LocationBasedRecommendedActionSessionsOperationStatusGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LocationBasedRecommendedActionSessionsOperationStatusGetResponse = RecommendedActionSessionsOperationStatus;

/** Interface representing a LocationBasedRecommendedActionSessionsResult. */
export declare interface LocationBasedRecommendedActionSessionsResult {
    /**
     * Recommendation action session operation result.
     * @param locationName The name of the location.
     * @param operationId The operation identifier.
     * @param options The options parameters.
     */
    list(locationName: string, operationId: string, options?: LocationBasedRecommendedActionSessionsResultListOptionalParams): PagedAsyncIterableIterator<RecommendationAction>;
}

/** Optional parameters. */
export declare interface LocationBasedRecommendedActionSessionsResultListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type LocationBasedRecommendedActionSessionsResultListNextResponse = RecommendationActionsResultList;

/** Optional parameters. */
export declare interface LocationBasedRecommendedActionSessionsResultListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type LocationBasedRecommendedActionSessionsResultListResponse = RecommendationActionsResultList;

/** Represents a log file. */
export declare interface LogFile extends ProxyResource {
    /** Size of the log file. */
    sizeInKB?: number;
    /**
     * Creation timestamp of the log file.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdTime?: Date;
    /**
     * Last modified timestamp of the log file.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedTime?: Date;
    /** Type of the log file. */
    typePropertiesType?: string;
    /** The url to download the log file from. */
    url?: string;
}

/** A list of log files. */
export declare interface LogFileListResult {
    /** The list of log files. */
    value?: LogFile[];
}

/** Interface representing a LogFiles. */
export declare interface LogFiles {
    /**
     * List all the log files in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: LogFilesListByServerOptionalParams): PagedAsyncIterableIterator<LogFile>;
}

/** Optional parameters. */
export declare interface LogFilesListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type LogFilesListByServerResponse = LogFileListResult;

/**
 * Defines values for MinimalTlsVersionEnum. \
 * {@link KnownMinimalTlsVersionEnum} can be used interchangeably with MinimalTlsVersionEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TLS1_0** \
 * **TLS1_1** \
 * **TLS1_2** \
 * **TLSEnforcementDisabled**
 */
export declare type MinimalTlsVersionEnum = string;

export declare class MySQLManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the MySQLManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MySQLManagementClientOptionalParams);
    /**
     * Reset data for Query Performance Insight.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    resetQueryPerformanceInsightData(resourceGroupName: string, serverName: string, options?: ResetQueryPerformanceInsightDataOptionalParams): Promise<ResetQueryPerformanceInsightDataResponse>;
    /**
     * Create recommendation action session for the advisor.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param advisorName The advisor name for recommendation action.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    beginCreateRecommendedActionSession(resourceGroupName: string, serverName: string, advisorName: string, databaseName: string, options?: CreateRecommendedActionSessionOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Create recommendation action session for the advisor.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param advisorName The advisor name for recommendation action.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    beginCreateRecommendedActionSessionAndWait(resourceGroupName: string, serverName: string, advisorName: string, databaseName: string, options?: CreateRecommendedActionSessionOptionalParams): Promise<void>;
    servers: Servers;
    replicas: Replicas;
    firewallRules: FirewallRules;
    virtualNetworkRules: VirtualNetworkRules;
    databases: Databases;
    configurations: Configurations;
    serverParameters: ServerParameters;
    logFiles: LogFiles;
    serverAdministrators: ServerAdministrators;
    recoverableServers: RecoverableServers;
    serverBasedPerformanceTier: ServerBasedPerformanceTier;
    locationBasedPerformanceTier: LocationBasedPerformanceTier;
    checkNameAvailability: CheckNameAvailability;
    operations: Operations;
    serverSecurityAlertPolicies: ServerSecurityAlertPolicies;
    queryTexts: QueryTexts;
    topQueryStatistics: TopQueryStatistics;
    waitStatistics: WaitStatistics;
    advisors: Advisors;
    recommendedActions: RecommendedActions;
    locationBasedRecommendedActionSessionsOperationStatus: LocationBasedRecommendedActionSessionsOperationStatus;
    locationBasedRecommendedActionSessionsResult: LocationBasedRecommendedActionSessionsResult;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    serverKeys: ServerKeys;
}

/** Optional parameters. */
export declare interface MySQLManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Represents a resource name availability. */
export declare interface NameAvailability {
    /** Error Message. */
    message?: string;
    /** Indicates whether the resource name is available. */
    nameAvailable?: boolean;
    /** Reason for name being unavailable. */
    reason?: string;
}

/** Request from client to check resource name availability. */
export declare interface NameAvailabilityRequest {
    /** Resource name to verify. */
    name: string;
    /** Resource type used for verification. */
    type?: string;
}

/** REST API operation definition. */
export declare interface Operation {
    /**
     * The name of the operation being performed on this particular object.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The localized display information for this particular operation or action.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly display?: OperationDisplay;
    /**
     * The intended executor of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: OperationOrigin;
    /**
     * Additional descriptions for the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: {
        [propertyName: string]: Record<string, unknown>;
    };
}

/** Display metadata associated with the operation. */
export declare interface OperationDisplay {
    /**
     * Operation resource provider name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource on which the operation is performed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Localized friendly name for the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * Operation description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** A list of resource provider operations. */
export declare interface OperationListResult {
    /** The list of resource provider operations. */
    value?: Operation[];
}

/**
 * Defines values for OperationOrigin. \
 * {@link KnownOperationOrigin} can be used interchangeably with OperationOrigin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSpecified** \
 * **user** \
 * **system**
 */
export declare type OperationOrigin = string;

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): Promise<OperationsListResponse>;
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** A list of performance tiers. */
export declare interface PerformanceTierListResult {
    /** The list of performance tiers */
    value?: PerformanceTierProperties[];
}

/** Performance tier properties */
export declare interface PerformanceTierProperties {
    /** ID of the performance tier. */
    id?: string;
    /** Maximum Backup retention in days for the performance tier edition */
    maxBackupRetentionDays?: number;
    /** Minimum Backup retention in days for the performance tier edition */
    minBackupRetentionDays?: number;
    /** Max storage allowed for a server. */
    maxStorageMB?: number;
    /** Max storage allowed for a server. */
    minLargeStorageMB?: number;
    /** Max storage allowed for a server. */
    maxLargeStorageMB?: number;
    /** Max storage allowed for a server. */
    minStorageMB?: number;
    /** Service level objectives associated with the performance tier */
    serviceLevelObjectives?: PerformanceTierServiceLevelObjectives[];
}

/** Service level objectives for performance tier. */
export declare interface PerformanceTierServiceLevelObjectives {
    /** ID for the service level objective. */
    id?: string;
    /** Edition of the performance tier. */
    edition?: string;
    /** vCore associated with the service level objective */
    vCore?: number;
    /** Hardware generation associated with the service level objective */
    hardwareGeneration?: string;
    /** Maximum Backup retention in days for the performance tier edition */
    maxBackupRetentionDays?: number;
    /** Minimum Backup retention in days for the performance tier edition */
    minBackupRetentionDays?: number;
    /** Max storage allowed for a server. */
    maxStorageMB?: number;
    /** Max storage allowed for a server. */
    minStorageMB?: number;
}

/** A private endpoint connection */
export declare interface PrivateEndpointConnection extends ProxyResource {
    /** Private endpoint which the connection belongs to. */
    privateEndpoint?: PrivateEndpointProperty;
    /** Connection state of the private endpoint connection. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionStateProperty;
    /**
     * State of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** A list of private endpoint connections. */
export declare interface PrivateEndpointConnectionListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PrivateEndpointConnection[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * Gets all private endpoint connections on a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: PrivateEndpointConnectionsListByServerOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Approve or reject a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param parameters A private endpoint connection
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>, PrivateEndpointConnectionsCreateOrUpdateResponse>>;
    /**
     * Approve or reject a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param parameters A private endpoint connection
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
    /**
     * Updates private endpoint connection with the specified tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param parameters Parameters supplied to the Update private endpoint connection Tags operation.
     * @param options The options parameters.
     */
    beginUpdateTags(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, parameters: TagsObject, options?: PrivateEndpointConnectionsUpdateTagsOptionalParams): Promise<PollerLike<PollOperationState<PrivateEndpointConnectionsUpdateTagsResponse>, PrivateEndpointConnectionsUpdateTagsResponse>>;
    /**
     * Updates private endpoint connection with the specified tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param parameters Parameters supplied to the Update private endpoint connection Tags operation.
     * @param options The options parameters.
     */
    beginUpdateTagsAndWait(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, parameters: TagsObject, options?: PrivateEndpointConnectionsUpdateTagsOptionalParams): Promise<PrivateEndpointConnectionsUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type PrivateEndpointConnectionsListByServerNextResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type PrivateEndpointConnectionsListByServerResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsUpdateTagsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateTags operation. */
export declare type PrivateEndpointConnectionsUpdateTagsResponse = PrivateEndpointConnection;

export declare interface PrivateEndpointProperty {
    /** Resource id of the private endpoint. */
    id?: string;
}

/**
 * Defines values for PrivateEndpointProvisioningState. \
 * {@link KnownPrivateEndpointProvisioningState} can be used interchangeably with PrivateEndpointProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approving** \
 * **Ready** \
 * **Dropping** \
 * **Failed** \
 * **Rejecting**
 */
export declare type PrivateEndpointProvisioningState = string;

/** A private link resource */
export declare interface PrivateLinkResource extends ProxyResource {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: PrivateLinkResourceProperties;
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PrivateLinkResource[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Properties of a private link resource. */
export declare interface PrivateLinkResourceProperties {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Gets the private link resources for MySQL server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: PrivateLinkResourcesListByServerOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
    /**
     * Gets a private link resource for MySQL server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param groupName The name of the private link resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, groupName: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type PrivateLinkResourcesListByServerNextResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type PrivateLinkResourcesListByServerResponse = PrivateLinkResourceListResult;

/**
 * Defines values for PrivateLinkServiceConnectionStateActionsRequire. \
 * {@link KnownPrivateLinkServiceConnectionStateActionsRequire} can be used interchangeably with PrivateLinkServiceConnectionStateActionsRequire,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**
 */
export declare type PrivateLinkServiceConnectionStateActionsRequire = string;

export declare interface PrivateLinkServiceConnectionStateProperty {
    /** The private link service connection status. */
    status: string;
    /** The private link service connection description. */
    description: string;
    /**
     * The actions required for private link service connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionsRequired?: string;
}

/**
 * Defines values for PrivateLinkServiceConnectionStateStatus. \
 * {@link KnownPrivateLinkServiceConnectionStateStatus} can be used interchangeably with PrivateLinkServiceConnectionStateStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approved** \
 * **Pending** \
 * **Rejected** \
 * **Disconnected**
 */
export declare type PrivateLinkServiceConnectionStateStatus = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/**
 * Defines values for PublicNetworkAccessEnum. \
 * {@link KnownPublicNetworkAccessEnum} can be used interchangeably with PublicNetworkAccessEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccessEnum = string;

/** Result of Query Performance Insight data reset. */
export declare interface QueryPerformanceInsightResetDataResult {
    /** Indicates result of the operation. */
    status?: QueryPerformanceInsightResetDataResultState;
    /** operation message. */
    message?: string;
}

/**
 * Defines values for QueryPerformanceInsightResetDataResultState. \
 * {@link KnownQueryPerformanceInsightResetDataResultState} can be used interchangeably with QueryPerformanceInsightResetDataResultState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed**
 */
export declare type QueryPerformanceInsightResetDataResultState = string;

/** Represents a Query Statistic. */
export declare interface QueryStatistic extends ProxyResource {
    /** Database query identifier. */
    queryId?: string;
    /** Observation start time. */
    startTime?: Date;
    /** Observation end time. */
    endTime?: Date;
    /** Aggregation function name. */
    aggregationFunction?: string;
    /** The list of database names. */
    databaseNames?: string[];
    /** Number of query executions in this time interval. */
    queryExecutionCount?: number;
    /** Metric name. */
    metricName?: string;
    /** Metric display name. */
    metricDisplayName?: string;
    /** Metric value. */
    metricValue?: number;
    /** Metric value unit. */
    metricValueUnit?: string;
}

/** Represents a Query Text. */
export declare interface QueryText extends ProxyResource {
    /** Query identifier unique to the server. */
    queryId?: string;
    /** Query text. */
    queryText?: string;
}

/** Interface representing a QueryTexts. */
export declare interface QueryTexts {
    /**
     * Retrieve the Query-Store query texts for specified queryIds.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryIds The query identifiers
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, queryIds: string[], options?: QueryTextsListByServerOptionalParams): PagedAsyncIterableIterator<QueryText>;
    /**
     * Retrieve the Query-Store query texts for the queryId.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryId The Query-Store query identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, queryId: string, options?: QueryTextsGetOptionalParams): Promise<QueryTextsGetResponse>;
}

/** Optional parameters. */
export declare interface QueryTextsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type QueryTextsGetResponse = QueryText;

/** Optional parameters. */
export declare interface QueryTextsListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type QueryTextsListByServerNextResponse = QueryTextsResultList;

/** Optional parameters. */
export declare interface QueryTextsListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type QueryTextsListByServerResponse = QueryTextsResultList;

/** A list of query texts. */
export declare interface QueryTextsResultList {
    /**
     * The list of query texts.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: QueryText[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Represents a Recommendation Action. */
export declare interface RecommendationAction extends ProxyResource {
    /** Advisor name. */
    advisorName?: string;
    /** Recommendation action session identifier. */
    sessionId?: string;
    /** Recommendation action identifier. */
    actionId?: number;
    /** Recommendation action creation time. */
    createdTime?: Date;
    /** Recommendation action expiration time. */
    expirationTime?: Date;
    /** Recommendation action reason. */
    reason?: string;
    /** Recommendation action type. */
    recommendationType?: string;
    /** Recommendation action details. */
    details?: {
        [propertyName: string]: string;
    };
}

/** A list of recommendation actions. */
export declare interface RecommendationActionsResultList {
    /**
     * The list of recommendation action advisors.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RecommendationAction[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a RecommendedActions. */
export declare interface RecommendedActions {
    /**
     * Retrieve recommended actions from the advisor.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param advisorName The advisor name for recommendation action.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, advisorName: string, options?: RecommendedActionsListByServerOptionalParams): PagedAsyncIterableIterator<RecommendationAction>;
    /**
     * Retrieve recommended actions from the advisor.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param advisorName The advisor name for recommendation action.
     * @param recommendedActionName The recommended action name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, advisorName: string, recommendedActionName: string, options?: RecommendedActionsGetOptionalParams): Promise<RecommendedActionsGetResponse>;
}

/** Recommendation action session operation status. */
export declare interface RecommendedActionSessionsOperationStatus {
    /** Operation identifier. */
    name?: string;
    /** Operation start time. */
    startTime?: Date;
    /** Operation status. */
    status?: string;
}

/** Optional parameters. */
export declare interface RecommendedActionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RecommendedActionsGetResponse = RecommendationAction;

/** Optional parameters. */
export declare interface RecommendedActionsListByServerNextOptionalParams extends coreClient.OperationOptions {
    /** The recommendation action session identifier. */
    sessionId?: string;
}

/** Contains response data for the listByServerNext operation. */
export declare type RecommendedActionsListByServerNextResponse = RecommendationActionsResultList;

/** Optional parameters. */
export declare interface RecommendedActionsListByServerOptionalParams extends coreClient.OperationOptions {
    /** The recommendation action session identifier. */
    sessionId?: string;
}

/** Contains response data for the listByServer operation. */
export declare type RecommendedActionsListByServerResponse = RecommendationActionsResultList;

/** A recoverable server resource. */
export declare interface RecoverableServerResource extends ProxyResource {
    /**
     * The last available backup date time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastAvailableBackupDateTime?: string;
    /**
     * The service level objective
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceLevelObjective?: string;
    /**
     * Edition of the performance tier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly edition?: string;
    /**
     * vCore associated with the service level objective
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly vCore?: number;
    /**
     * Hardware generation associated with the service level objective
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hardwareGeneration?: string;
    /**
     * The MySQL version
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
}

/** Interface representing a RecoverableServers. */
export declare interface RecoverableServers {
    /**
     * Gets a recoverable MySQL Server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, options?: RecoverableServersGetOptionalParams): Promise<RecoverableServersGetResponse>;
}

/** Optional parameters. */
export declare interface RecoverableServersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RecoverableServersGetResponse = RecoverableServerResource;

/** Interface representing a Replicas. */
export declare interface Replicas {
    /**
     * List all the replicas for a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: ReplicasListByServerOptionalParams): PagedAsyncIterableIterator<Server>;
}

/** Optional parameters. */
export declare interface ReplicasListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type ReplicasListByServerResponse = ServerListResult;

/** Optional parameters. */
export declare interface ResetQueryPerformanceInsightDataOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the resetQueryPerformanceInsightData operation. */
export declare type ResetQueryPerformanceInsightDataResponse = QueryPerformanceInsightResetDataResult;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Azure Active Directory identity configuration for a resource. */
export declare interface ResourceIdentity {
    /**
     * The Azure Active Directory principal id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /** The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource. */
    type?: IdentityType;
    /**
     * The Azure Active Directory tenant id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
}

/**
 * Defines values for SecurityAlertPolicyName. \
 * {@link KnownSecurityAlertPolicyName} can be used interchangeably with SecurityAlertPolicyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**
 */
export declare type SecurityAlertPolicyName = string;

/** Represents a server. */
export declare interface Server extends TrackedResource {
    /** The Azure Active Directory identity of the server. */
    identity?: ResourceIdentity;
    /** The SKU (pricing tier) of the server. */
    sku?: Sku;
    /** The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation). */
    administratorLogin?: string;
    /** Server version. */
    version?: ServerVersion;
    /** Enable ssl enforcement or not when connect to server. */
    sslEnforcement?: SslEnforcementEnum;
    /** Enforce a minimal Tls version for the server. */
    minimalTlsVersion?: MinimalTlsVersionEnum;
    /**
     * Status showing whether the server data encryption is enabled with customer-managed keys.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly byokEnforcement?: string;
    /** Status showing whether the server enabled infrastructure encryption. */
    infrastructureEncryption?: InfrastructureEncryption;
    /** A state of a server that is visible to user. */
    userVisibleState?: ServerState;
    /** The fully qualified domain name of a server. */
    fullyQualifiedDomainName?: string;
    /** Earliest restore point creation time (ISO8601 format) */
    earliestRestoreDate?: Date;
    /** Storage profile of a server. */
    storageProfile?: StorageProfile;
    /** The replication role of the server. */
    replicationRole?: string;
    /** The master server id of a replica server. */
    masterServerId?: string;
    /** The maximum number of replicas that a master server can have. */
    replicaCapacity?: number;
    /** Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled' */
    publicNetworkAccess?: PublicNetworkAccessEnum;
    /**
     * List of private endpoint connections on a server
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: ServerPrivateEndpointConnection[];
}

/** Represents a and external administrator to be created. */
export declare interface ServerAdministratorResource extends ProxyResource {
    /** The type of administrator. */
    administratorType?: "ActiveDirectory";
    /** The server administrator login account name. */
    login?: string;
    /** The server administrator Sid (Secure ID). */
    sid?: string;
    /** The server Active Directory Administrator tenant id. */
    tenantId?: string;
}

/** The response to a list Active Directory Administrators request. */
export declare interface ServerAdministratorResourceListResult {
    /** The list of server Active Directory Administrators for the server. */
    value?: ServerAdministratorResource[];
}

/** Interface representing a ServerAdministrators. */
export declare interface ServerAdministrators {
    /**
     * Returns a list of server Administrators.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serverName: string, options?: ServerAdministratorsListOptionalParams): PagedAsyncIterableIterator<ServerAdministratorResource>;
    /**
     * Gets information about a AAD server administrator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, options?: ServerAdministratorsGetOptionalParams): Promise<ServerAdministratorsGetResponse>;
    /**
     * Creates or update active directory administrator on an existing server. The update action will
     * overwrite the existing administrator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param properties The required parameters for creating or updating an AAD server administrator.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, properties: ServerAdministratorResource, options?: ServerAdministratorsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServerAdministratorsCreateOrUpdateResponse>, ServerAdministratorsCreateOrUpdateResponse>>;
    /**
     * Creates or update active directory administrator on an existing server. The update action will
     * overwrite the existing administrator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param properties The required parameters for creating or updating an AAD server administrator.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, properties: ServerAdministratorResource, options?: ServerAdministratorsCreateOrUpdateOptionalParams): Promise<ServerAdministratorsCreateOrUpdateResponse>;
    /**
     * Deletes server active directory administrator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, options?: ServerAdministratorsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes server active directory administrator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, options?: ServerAdministratorsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ServerAdministratorsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServerAdministratorsCreateOrUpdateResponse = ServerAdministratorResource;

/** Optional parameters. */
export declare interface ServerAdministratorsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServerAdministratorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServerAdministratorsGetResponse = ServerAdministratorResource;

/** Optional parameters. */
export declare interface ServerAdministratorsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServerAdministratorsListResponse = ServerAdministratorResourceListResult;

/** Interface representing a ServerBasedPerformanceTier. */
export declare interface ServerBasedPerformanceTier {
    /**
     * List all the performance tiers for a MySQL server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serverName: string, options?: ServerBasedPerformanceTierListOptionalParams): PagedAsyncIterableIterator<PerformanceTierProperties>;
}

/** Optional parameters. */
export declare interface ServerBasedPerformanceTierListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServerBasedPerformanceTierListResponse = PerformanceTierListResult;

/** Represents a server to be created. */
export declare interface ServerForCreate {
    /** The Azure Active Directory identity of the server. */
    identity?: ResourceIdentity;
    /** The SKU (pricing tier) of the server. */
    sku?: Sku;
    /** Properties of the server. */
    properties: ServerPropertiesForCreateUnion;
    /** The location the resource resides in. */
    location: string;
    /** Application-specific metadata in the form of key-value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** A MySQL Server key. */
export declare interface ServerKey extends ProxyResource {
    /**
     * Kind of encryption protector used to protect the key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /** The key type like 'AzureKeyVault'. */
    serverKeyType?: ServerKeyType;
    /** The URI of the key. */
    uri?: string;
    /**
     * The key creation date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
}

/** A list of MySQL Server keys. */
export declare interface ServerKeyListResult {
    /**
     * A list of MySQL Server keys.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ServerKey[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a ServerKeys. */
export declare interface ServerKeys {
    /**
     * Gets a list of  Server keys.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serverName: string, options?: ServerKeysListOptionalParams): PagedAsyncIterableIterator<ServerKey>;
    /**
     * Gets a MySQL Server key.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be retrieved.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, keyName: string, options?: ServerKeysGetOptionalParams): Promise<ServerKeysGetResponse>;
    /**
     * Creates or updates a MySQL Server key.
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The requested MySQL Server key resource state.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(serverName: string, keyName: string, resourceGroupName: string, parameters: ServerKey, options?: ServerKeysCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServerKeysCreateOrUpdateResponse>, ServerKeysCreateOrUpdateResponse>>;
    /**
     * Creates or updates a MySQL Server key.
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be operated on (updated or created).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The requested MySQL Server key resource state.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(serverName: string, keyName: string, resourceGroupName: string, parameters: ServerKey, options?: ServerKeysCreateOrUpdateOptionalParams): Promise<ServerKeysCreateOrUpdateResponse>;
    /**
     * Deletes the MySQL Server key with the given name.
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginDelete(serverName: string, keyName: string, resourceGroupName: string, options?: ServerKeysDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the MySQL Server key with the given name.
     * @param serverName The name of the server.
     * @param keyName The name of the MySQL Server key to be deleted.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginDeleteAndWait(serverName: string, keyName: string, resourceGroupName: string, options?: ServerKeysDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ServerKeysCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServerKeysCreateOrUpdateResponse = ServerKey;

/** Optional parameters. */
export declare interface ServerKeysDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServerKeysGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServerKeysGetResponse = ServerKey;

/** Optional parameters. */
export declare interface ServerKeysListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ServerKeysListNextResponse = ServerKeyListResult;

/** Optional parameters. */
export declare interface ServerKeysListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServerKeysListResponse = ServerKeyListResult;

/**
 * Defines values for ServerKeyType. \
 * {@link KnownServerKeyType} can be used interchangeably with ServerKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureKeyVault**
 */
export declare type ServerKeyType = string;

/** A list of servers. */
export declare interface ServerListResult {
    /** The list of servers */
    value?: Server[];
}

/** Interface representing a ServerParameters. */
export declare interface ServerParameters {
    /**
     * Update a list of configurations in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param value The parameters for updating a list of server configuration.
     * @param options The options parameters.
     */
    beginListUpdateConfigurations(resourceGroupName: string, serverName: string, value: ConfigurationListResult, options?: ServerParametersListUpdateConfigurationsOptionalParams): Promise<PollerLike<PollOperationState<ServerParametersListUpdateConfigurationsResponse>, ServerParametersListUpdateConfigurationsResponse>>;
    /**
     * Update a list of configurations in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param value The parameters for updating a list of server configuration.
     * @param options The options parameters.
     */
    beginListUpdateConfigurationsAndWait(resourceGroupName: string, serverName: string, value: ConfigurationListResult, options?: ServerParametersListUpdateConfigurationsOptionalParams): Promise<ServerParametersListUpdateConfigurationsResponse>;
}

/** Optional parameters. */
export declare interface ServerParametersListUpdateConfigurationsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the listUpdateConfigurations operation. */
export declare type ServerParametersListUpdateConfigurationsResponse = ConfigurationListResult;

/** A private endpoint connection under a server */
export declare interface ServerPrivateEndpointConnection {
    /**
     * Resource Id of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Private endpoint connection properties
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: ServerPrivateEndpointConnectionProperties;
}

/** Properties of a private endpoint connection. */
export declare interface ServerPrivateEndpointConnectionProperties {
    /** Private endpoint which the connection belongs to. */
    privateEndpoint?: PrivateEndpointProperty;
    /** Connection state of the private endpoint connection. */
    privateLinkServiceConnectionState?: ServerPrivateLinkServiceConnectionStateProperty;
    /**
     * State of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointProvisioningState;
}

export declare interface ServerPrivateLinkServiceConnectionStateProperty {
    /** The private link service connection status. */
    status: PrivateLinkServiceConnectionStateStatus;
    /** The private link service connection description. */
    description: string;
    /**
     * The actions required for private link service connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionsRequired?: PrivateLinkServiceConnectionStateActionsRequire;
}

/** The properties used to create a new server. */
export declare interface ServerPropertiesForCreate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    createMode: "Default" | "PointInTimeRestore" | "GeoRestore" | "Replica";
    /** Server version. */
    version?: ServerVersion;
    /** Enable ssl enforcement or not when connect to server. */
    sslEnforcement?: SslEnforcementEnum;
    /** Enforce a minimal Tls version for the server. */
    minimalTlsVersion?: MinimalTlsVersionEnum;
    /** Status showing whether the server enabled infrastructure encryption. */
    infrastructureEncryption?: InfrastructureEncryption;
    /** Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled' */
    publicNetworkAccess?: PublicNetworkAccessEnum;
    /** Storage profile of a server. */
    storageProfile?: StorageProfile;
}

export declare type ServerPropertiesForCreateUnion = ServerPropertiesForCreate | ServerPropertiesForDefaultCreate | ServerPropertiesForRestore | ServerPropertiesForGeoRestore | ServerPropertiesForReplica;

/** The properties used to create a new server. */
export declare interface ServerPropertiesForDefaultCreate extends ServerPropertiesForCreate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    createMode: "Default";
    /** The administrator's login name of a server. Can only be specified when the server is being created (and is required for creation). The login name is required when updating password. */
    administratorLogin: string;
    /**
     * The password of the administrator login.
     * This value contains a credential. Consider obscuring before showing to users
     */
    administratorLoginPassword: string;
}

/** The properties used to create a new server by restoring to a different region from a geo replicated backup. */
export declare interface ServerPropertiesForGeoRestore extends ServerPropertiesForCreate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    createMode: "GeoRestore";
    /** The source server id to restore from. */
    sourceServerId: string;
}

/** The properties to create a new replica. */
export declare interface ServerPropertiesForReplica extends ServerPropertiesForCreate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    createMode: "Replica";
    /** The master server id to create replica from. */
    sourceServerId: string;
}

/** The properties used to create a new server by restoring from a backup. */
export declare interface ServerPropertiesForRestore extends ServerPropertiesForCreate {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    createMode: "PointInTimeRestore";
    /** The source server id to restore from. */
    sourceServerId: string;
    /** Restore point creation time (ISO8601 format), specifying the time to restore from. */
    restorePointInTime: Date;
}

/** Interface representing a Servers. */
export declare interface Servers {
    /**
     * List all the servers in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ServersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Server>;
    /**
     * List all the servers in a given subscription.
     * @param options The options parameters.
     */
    list(options?: ServersListOptionalParams): PagedAsyncIterableIterator<Server>;
    /**
     * Creates a new server or updates an existing server. The update action will overwrite the existing
     * server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for creating or updating a server.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, serverName: string, parameters: ServerForCreate, options?: ServersCreateOptionalParams): Promise<PollerLike<PollOperationState<ServersCreateResponse>, ServersCreateResponse>>;
    /**
     * Creates a new server or updates an existing server. The update action will overwrite the existing
     * server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for creating or updating a server.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, serverName: string, parameters: ServerForCreate, options?: ServersCreateOptionalParams): Promise<ServersCreateResponse>;
    /**
     * Updates an existing server. The request body can contain one to many of the properties present in
     * the normal server definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a server.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serverName: string, parameters: ServerUpdateParameters, options?: ServersUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServersUpdateResponse>, ServersUpdateResponse>>;
    /**
     * Updates an existing server. The request body can contain one to many of the properties present in
     * the normal server definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a server.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serverName: string, parameters: ServerUpdateParameters, options?: ServersUpdateOptionalParams): Promise<ServersUpdateResponse>;
    /**
     * Deletes a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, options?: ServersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, options?: ServersDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, options?: ServersGetOptionalParams): Promise<ServersGetResponse>;
    /**
     * Restarts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, serverName: string, options?: ServersRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restarts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, serverName: string, options?: ServersRestartOptionalParams): Promise<void>;
    /**
     * Starts a stopped server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, serverName: string, options?: ServersStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Starts a stopped server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, serverName: string, options?: ServersStartOptionalParams): Promise<void>;
    /**
     * Stops a running server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, serverName: string, options?: ServersStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stops a running server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, serverName: string, options?: ServersStopOptionalParams): Promise<void>;
    /**
     * Upgrade server version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a server.
     * @param options The options parameters.
     */
    beginUpgrade(resourceGroupName: string, serverName: string, parameters: ServerUpgradeParameters, options?: ServersUpgradeOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Upgrade server version.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a server.
     * @param options The options parameters.
     */
    beginUpgradeAndWait(resourceGroupName: string, serverName: string, parameters: ServerUpgradeParameters, options?: ServersUpgradeOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ServersCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ServersCreateResponse = Server;

/** Optional parameters. */
export declare interface ServersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Interface representing a ServerSecurityAlertPolicies. */
export declare interface ServerSecurityAlertPolicies {
    /**
     * Get the server's threat detection policies.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: ServerSecurityAlertPoliciesListByServerOptionalParams): PagedAsyncIterableIterator<ServerSecurityAlertPolicy>;
    /**
     * Get a server's security alert policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, securityAlertPolicyName: SecurityAlertPolicyName, options?: ServerSecurityAlertPoliciesGetOptionalParams): Promise<ServerSecurityAlertPoliciesGetResponse>;
    /**
     * Creates or updates a threat detection policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param securityAlertPolicyName The name of the threat detection policy.
     * @param parameters The server security alert policy.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, securityAlertPolicyName: SecurityAlertPolicyName, parameters: ServerSecurityAlertPolicy, options?: ServerSecurityAlertPoliciesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServerSecurityAlertPoliciesCreateOrUpdateResponse>, ServerSecurityAlertPoliciesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a threat detection policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param securityAlertPolicyName The name of the threat detection policy.
     * @param parameters The server security alert policy.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, securityAlertPolicyName: SecurityAlertPolicyName, parameters: ServerSecurityAlertPolicy, options?: ServerSecurityAlertPoliciesCreateOrUpdateOptionalParams): Promise<ServerSecurityAlertPoliciesCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface ServerSecurityAlertPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ServerSecurityAlertPoliciesCreateOrUpdateResponse = ServerSecurityAlertPolicy;

/** Optional parameters. */
export declare interface ServerSecurityAlertPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServerSecurityAlertPoliciesGetResponse = ServerSecurityAlertPolicy;

/** Optional parameters. */
export declare interface ServerSecurityAlertPoliciesListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type ServerSecurityAlertPoliciesListByServerNextResponse = ServerSecurityAlertPolicyListResult;

/** Optional parameters. */
export declare interface ServerSecurityAlertPoliciesListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type ServerSecurityAlertPoliciesListByServerResponse = ServerSecurityAlertPolicyListResult;

/** A server security alert policy. */
export declare interface ServerSecurityAlertPolicy extends ProxyResource {
    /** Specifies the state of the policy, whether it is enabled or disabled. */
    state?: ServerSecurityAlertPolicyState;
    /** Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly */
    disabledAlerts?: string[];
    /** Specifies an array of e-mail addresses to which the alert is sent. */
    emailAddresses?: string[];
    /** Specifies that the alert is sent to the account administrators. */
    emailAccountAdmins?: boolean;
    /** Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. */
    storageEndpoint?: string;
    /** Specifies the identifier key of the Threat Detection audit storage account. */
    storageAccountAccessKey?: string;
    /** Specifies the number of days to keep in the Threat Detection audit logs. */
    retentionDays?: number;
}

/** A list of the server's security alert policies. */
export declare interface ServerSecurityAlertPolicyListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ServerSecurityAlertPolicy[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Defines values for ServerSecurityAlertPolicyState. */
export declare type ServerSecurityAlertPolicyState = "Enabled" | "Disabled";

/** Optional parameters. */
export declare interface ServersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServersGetResponse = Server;

/** Optional parameters. */
export declare interface ServersListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ServersListByResourceGroupResponse = ServerListResult;

/** Optional parameters. */
export declare interface ServersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServersListResponse = ServerListResult;

/** Optional parameters. */
export declare interface ServersRestartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServersStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServersStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for ServerState. \
 * {@link KnownServerState} can be used interchangeably with ServerState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ready** \
 * **Dropping** \
 * **Disabled** \
 * **Inaccessible**
 */
export declare type ServerState = string;

/** Optional parameters. */
export declare interface ServersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ServersUpdateResponse = Server;

/** Optional parameters. */
export declare interface ServersUpgradeOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Parameters allowed to update for a server. */
export declare interface ServerUpdateParameters {
    /** The Azure Active Directory identity of the server. */
    identity?: ResourceIdentity;
    /** The SKU (pricing tier) of the server. */
    sku?: Sku;
    /** Application-specific metadata in the form of key-value pairs. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Storage profile of a server. */
    storageProfile?: StorageProfile;
    /**
     * The password of the administrator login.
     * This value contains a credential. Consider obscuring before showing to users
     */
    administratorLoginPassword?: string;
    /** The version of a server. */
    version?: ServerVersion;
    /** Enable ssl enforcement or not when connect to server. */
    sslEnforcement?: SslEnforcementEnum;
    /** Enforce a minimal Tls version for the server. */
    minimalTlsVersion?: MinimalTlsVersionEnum;
    /** Whether or not public network access is allowed for this server. Value is optional but if passed in, must be 'Enabled' or 'Disabled' */
    publicNetworkAccess?: PublicNetworkAccessEnum;
    /** The replication role of the server. */
    replicationRole?: string;
}

export declare interface ServerUpgradeParameters {
    /** Represents an server storage profile. */
    targetServerVersion?: string;
}

/**
 * Defines values for ServerVersion. \
 * {@link KnownServerVersion} can be used interchangeably with ServerVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **5.6** \
 * **5.7** \
 * **8.0**
 */
export declare type ServerVersion = string;

/** Billing information related properties of a server. */
export declare interface Sku {
    /** The name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8. */
    name: string;
    /** The tier of the particular SKU, e.g. Basic. */
    tier?: SkuTier;
    /** The scale up/out capacity, representing server's compute units. */
    capacity?: number;
    /** The size code, to be interpreted by resource as appropriate. */
    size?: string;
    /** The family of hardware. */
    family?: string;
}

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **GeneralPurpose** \
 * **MemoryOptimized**
 */
export declare type SkuTier = string;

/** Defines values for SslEnforcementEnum. */
export declare type SslEnforcementEnum = "Enabled" | "Disabled";

/**
 * Defines values for StorageAutogrow. \
 * {@link KnownStorageAutogrow} can be used interchangeably with StorageAutogrow,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type StorageAutogrow = string;

/** Storage Profile properties of a server */
export declare interface StorageProfile {
    /** Backup retention days for the server. */
    backupRetentionDays?: number;
    /** Enable Geo-redundant or not for server backup. */
    geoRedundantBackup?: GeoRedundantBackup;
    /** Max storage allowed for a server. */
    storageMB?: number;
    /** Enable Storage Auto Grow. */
    storageAutogrow?: StorageAutogrow;
}

/** Tags object for patch operations. */
export declare interface TagsObject {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a TopQueryStatistics. */
export declare interface TopQueryStatistics {
    /**
     * Retrieve the Query-Store top queries for specified metric and aggregation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for retrieving top query statistics.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, parameters: TopQueryStatisticsInput, options?: TopQueryStatisticsListByServerOptionalParams): PagedAsyncIterableIterator<QueryStatistic>;
    /**
     * Retrieve the query statistic for specified identifier.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param queryStatisticId The Query Statistic identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, queryStatisticId: string, options?: TopQueryStatisticsGetOptionalParams): Promise<TopQueryStatisticsGetResponse>;
}

/** Optional parameters. */
export declare interface TopQueryStatisticsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TopQueryStatisticsGetResponse = QueryStatistic;

/** Input to get top query statistics */
export declare interface TopQueryStatisticsInput {
    /** Max number of top queries to return. */
    numberOfTopQueries: number;
    /** Aggregation function name. */
    aggregationFunction: string;
    /** Observed metric name. */
    observedMetric: string;
    /** Observation start time. */
    observationStartTime: Date;
    /** Observation end time. */
    observationEndTime: Date;
    /** Aggregation interval type in ISO 8601 format. */
    aggregationWindow: string;
}

/** Optional parameters. */
export declare interface TopQueryStatisticsListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type TopQueryStatisticsListByServerNextResponse = TopQueryStatisticsResultList;

/** Optional parameters. */
export declare interface TopQueryStatisticsListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type TopQueryStatisticsListByServerResponse = TopQueryStatisticsResultList;

/** A list of query statistics. */
export declare interface TopQueryStatisticsResultList {
    /**
     * The list of top query statistics.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: QueryStatistic[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** A virtual network rule. */
export declare interface VirtualNetworkRule extends ProxyResource {
    /** The ARM resource id of the virtual network subnet. */
    virtualNetworkSubnetId?: string;
    /** Create firewall rule before the virtual network has vnet service endpoint enabled. */
    ignoreMissingVnetServiceEndpoint?: boolean;
    /**
     * Virtual Network Rule State
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: VirtualNetworkRuleState;
}

/** A list of virtual network rules. */
export declare interface VirtualNetworkRuleListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: VirtualNetworkRule[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a VirtualNetworkRules. */
export declare interface VirtualNetworkRules {
    /**
     * Gets a list of virtual network rules in a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: VirtualNetworkRulesListByServerOptionalParams): PagedAsyncIterableIterator<VirtualNetworkRule>;
    /**
     * Gets a virtual network rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param virtualNetworkRuleName The name of the virtual network rule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: VirtualNetworkRulesGetOptionalParams): Promise<VirtualNetworkRulesGetResponse>;
    /**
     * Creates or updates an existing virtual network rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param virtualNetworkRuleName The name of the virtual network rule.
     * @param parameters The requested virtual Network Rule Resource state.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: VirtualNetworkRule, options?: VirtualNetworkRulesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<VirtualNetworkRulesCreateOrUpdateResponse>, VirtualNetworkRulesCreateOrUpdateResponse>>;
    /**
     * Creates or updates an existing virtual network rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param virtualNetworkRuleName The name of the virtual network rule.
     * @param parameters The requested virtual Network Rule Resource state.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, parameters: VirtualNetworkRule, options?: VirtualNetworkRulesCreateOrUpdateOptionalParams): Promise<VirtualNetworkRulesCreateOrUpdateResponse>;
    /**
     * Deletes the virtual network rule with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param virtualNetworkRuleName The name of the virtual network rule.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: VirtualNetworkRulesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the virtual network rule with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param virtualNetworkRuleName The name of the virtual network rule.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, virtualNetworkRuleName: string, options?: VirtualNetworkRulesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface VirtualNetworkRulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type VirtualNetworkRulesCreateOrUpdateResponse = VirtualNetworkRule;

/** Optional parameters. */
export declare interface VirtualNetworkRulesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface VirtualNetworkRulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type VirtualNetworkRulesGetResponse = VirtualNetworkRule;

/** Optional parameters. */
export declare interface VirtualNetworkRulesListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type VirtualNetworkRulesListByServerNextResponse = VirtualNetworkRuleListResult;

/** Optional parameters. */
export declare interface VirtualNetworkRulesListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type VirtualNetworkRulesListByServerResponse = VirtualNetworkRuleListResult;

/**
 * Defines values for VirtualNetworkRuleState. \
 * {@link KnownVirtualNetworkRuleState} can be used interchangeably with VirtualNetworkRuleState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initializing** \
 * **InProgress** \
 * **Ready** \
 * **Deleting** \
 * **Unknown**
 */
export declare type VirtualNetworkRuleState = string;

/** Represents a Wait Statistic. */
export declare interface WaitStatistic extends ProxyResource {
    /** Observation start time. */
    startTime?: Date;
    /** Observation end time. */
    endTime?: Date;
    /** Wait event name. */
    eventName?: string;
    /** Wait event type name. */
    eventTypeName?: string;
    /** Database query identifier. */
    queryId?: number;
    /** Database Name. */
    databaseName?: string;
    /** Database user identifier. */
    userId?: number;
    /** Wait event count observed in this time interval. */
    count?: number;
    /** Total time of wait in milliseconds in this time interval. */
    totalTimeInMs?: number;
}

/** Interface representing a WaitStatistics. */
export declare interface WaitStatistics {
    /**
     * Retrieve wait statistics for specified aggregation window.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for retrieving wait statistics.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, parameters: WaitStatisticsInput, options?: WaitStatisticsListByServerOptionalParams): PagedAsyncIterableIterator<WaitStatistic>;
    /**
     * Retrieve wait statistics for specified identifier.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param waitStatisticsId The Wait Statistic identifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, waitStatisticsId: string, options?: WaitStatisticsGetOptionalParams): Promise<WaitStatisticsGetResponse>;
}

/** Optional parameters. */
export declare interface WaitStatisticsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WaitStatisticsGetResponse = WaitStatistic;

/** Input to get wait statistics */
export declare interface WaitStatisticsInput {
    /** Observation start time. */
    observationStartTime: Date;
    /** Observation end time. */
    observationEndTime: Date;
    /** Aggregation interval type in ISO 8601 format. */
    aggregationWindow: string;
}

/** Optional parameters. */
export declare interface WaitStatisticsListByServerNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServerNext operation. */
export declare type WaitStatisticsListByServerNextResponse = WaitStatisticsResultList;

/** Optional parameters. */
export declare interface WaitStatisticsListByServerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByServer operation. */
export declare type WaitStatisticsListByServerResponse = WaitStatisticsResultList;

/** A list of wait statistics. */
export declare interface WaitStatisticsResultList {
    /**
     * The list of wait statistics.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WaitStatistic[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

export { }
