import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PrivateEndpointConnections } from "../operationsInterfaces";
import { MySQLManagementClient } from "../mySQLManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { PrivateEndpointConnection, PrivateEndpointConnectionsListByServerOptionalParams, PrivateEndpointConnectionsGetOptionalParams, PrivateEndpointConnectionsGetResponse, PrivateEndpointConnectionsCreateOrUpdateOptionalParams, PrivateEndpointConnectionsCreateOrUpdateResponse, PrivateEndpointConnectionsDeleteOptionalParams, TagsObject, PrivateEndpointConnectionsUpdateTagsOptionalParams, PrivateEndpointConnectionsUpdateTagsResponse } from "../models";
/** Class containing PrivateEndpointConnections operations. */
export declare class PrivateEndpointConnectionsImpl implements PrivateEndpointConnections {
    private readonly client;
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client: MySQLManagementClient);
    /**
     * Gets all private endpoint connections on a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: PrivateEndpointConnectionsListByServerOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    private listByServerPagingPage;
    private listByServerPagingAll;
    /**
     * Gets a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Approve or reject a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param parameters A private endpoint connection
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>, PrivateEndpointConnectionsCreateOrUpdateResponse>>;
    /**
     * Approve or reject a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param parameters A private endpoint connection
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
    /**
     * Updates private endpoint connection with the specified tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param parameters Parameters supplied to the Update private endpoint connection Tags operation.
     * @param options The options parameters.
     */
    beginUpdateTags(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, parameters: TagsObject, options?: PrivateEndpointConnectionsUpdateTagsOptionalParams): Promise<PollerLike<PollOperationState<PrivateEndpointConnectionsUpdateTagsResponse>, PrivateEndpointConnectionsUpdateTagsResponse>>;
    /**
     * Updates private endpoint connection with the specified tags.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param privateEndpointConnectionName
     * @param parameters Parameters supplied to the Update private endpoint connection Tags operation.
     * @param options The options parameters.
     */
    beginUpdateTagsAndWait(resourceGroupName: string, serverName: string, privateEndpointConnectionName: string, parameters: TagsObject, options?: PrivateEndpointConnectionsUpdateTagsOptionalParams): Promise<PrivateEndpointConnectionsUpdateTagsResponse>;
    /**
     * Gets all private endpoint connections on a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    private _listByServer;
    /**
     * ListByServerNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param nextLink The nextLink from the previous successful call to the ListByServer method.
     * @param options The options parameters.
     */
    private _listByServerNext;
}
//# sourceMappingURL=privateEndpointConnections.d.ts.map