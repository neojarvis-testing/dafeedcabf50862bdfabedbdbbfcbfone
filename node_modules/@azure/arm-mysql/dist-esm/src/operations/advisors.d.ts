import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Advisors } from "../operationsInterfaces";
import { MySQLManagementClient } from "../mySQLManagementClient";
import { Advisor, AdvisorsListByServerOptionalParams, AdvisorsGetOptionalParams, AdvisorsGetResponse } from "../models";
/** Class containing Advisors operations. */
export declare class AdvisorsImpl implements Advisors {
    private readonly client;
    /**
     * Initialize a new instance of the class Advisors class.
     * @param client Reference to the service client
     */
    constructor(client: MySQLManagementClient);
    /**
     * List recommendation action advisors.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: AdvisorsListByServerOptionalParams): PagedAsyncIterableIterator<Advisor>;
    private listByServerPagingPage;
    private listByServerPagingAll;
    /**
     * Get a recommendation action advisor.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param advisorName The advisor name for recommendation action.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, advisorName: string, options?: AdvisorsGetOptionalParams): Promise<AdvisorsGetResponse>;
    /**
     * List recommendation action advisors.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    private _listByServer;
    /**
     * ListByServerNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param nextLink The nextLink from the previous successful call to the ListByServer method.
     * @param options The options parameters.
     */
    private _listByServerNext;
}
//# sourceMappingURL=advisors.d.ts.map