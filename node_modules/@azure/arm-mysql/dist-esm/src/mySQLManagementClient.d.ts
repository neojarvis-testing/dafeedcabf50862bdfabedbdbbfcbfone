import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Servers, Replicas, FirewallRules, VirtualNetworkRules, Databases, Configurations, ServerParameters, LogFiles, ServerAdministrators, RecoverableServers, ServerBasedPerformanceTier, LocationBasedPerformanceTier, CheckNameAvailability, Operations, ServerSecurityAlertPolicies, QueryTexts, TopQueryStatistics, WaitStatistics, Advisors, RecommendedActions, LocationBasedRecommendedActionSessionsOperationStatus, LocationBasedRecommendedActionSessionsResult, PrivateEndpointConnections, PrivateLinkResources, ServerKeys } from "./operationsInterfaces";
import { MySQLManagementClientOptionalParams, ResetQueryPerformanceInsightDataOptionalParams, ResetQueryPerformanceInsightDataResponse, CreateRecommendedActionSessionOptionalParams } from "./models";
export declare class MySQLManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the MySQLManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: MySQLManagementClientOptionalParams);
    /**
     * Reset data for Query Performance Insight.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    resetQueryPerformanceInsightData(resourceGroupName: string, serverName: string, options?: ResetQueryPerformanceInsightDataOptionalParams): Promise<ResetQueryPerformanceInsightDataResponse>;
    /**
     * Create recommendation action session for the advisor.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param advisorName The advisor name for recommendation action.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    beginCreateRecommendedActionSession(resourceGroupName: string, serverName: string, advisorName: string, databaseName: string, options?: CreateRecommendedActionSessionOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Create recommendation action session for the advisor.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param advisorName The advisor name for recommendation action.
     * @param databaseName The name of the database.
     * @param options The options parameters.
     */
    beginCreateRecommendedActionSessionAndWait(resourceGroupName: string, serverName: string, advisorName: string, databaseName: string, options?: CreateRecommendedActionSessionOptionalParams): Promise<void>;
    servers: Servers;
    replicas: Replicas;
    firewallRules: FirewallRules;
    virtualNetworkRules: VirtualNetworkRules;
    databases: Databases;
    configurations: Configurations;
    serverParameters: ServerParameters;
    logFiles: LogFiles;
    serverAdministrators: ServerAdministrators;
    recoverableServers: RecoverableServers;
    serverBasedPerformanceTier: ServerBasedPerformanceTier;
    locationBasedPerformanceTier: LocationBasedPerformanceTier;
    checkNameAvailability: CheckNameAvailability;
    operations: Operations;
    serverSecurityAlertPolicies: ServerSecurityAlertPolicies;
    queryTexts: QueryTexts;
    topQueryStatistics: TopQueryStatistics;
    waitStatistics: WaitStatistics;
    advisors: Advisors;
    recommendedActions: RecommendedActions;
    locationBasedRecommendedActionSessionsOperationStatus: LocationBasedRecommendedActionSessionsOperationStatus;
    locationBasedRecommendedActionSessionsResult: LocationBasedRecommendedActionSessionsResult;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    serverKeys: ServerKeys;
}
//# sourceMappingURL=mySQLManagementClient.d.ts.map