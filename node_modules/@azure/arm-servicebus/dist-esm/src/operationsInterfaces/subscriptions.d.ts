import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SBSubscription, SubscriptionsListByTopicOptionalParams, SubscriptionsCreateOrUpdateOptionalParams, SubscriptionsCreateOrUpdateResponse, SubscriptionsDeleteOptionalParams, SubscriptionsGetOptionalParams, SubscriptionsGetResponse } from "../models";
/** Interface representing a Subscriptions. */
export interface Subscriptions {
    /**
     * List all the subscriptions under a specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, options?: SubscriptionsListByTopicOptionalParams): PagedAsyncIterableIterator<SBSubscription>;
    /**
     * Creates a topic subscription.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param parameters Parameters supplied to create a subscription resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: SBSubscription, options?: SubscriptionsCreateOrUpdateOptionalParams): Promise<SubscriptionsCreateOrUpdateResponse>;
    /**
     * Deletes a subscription from the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: SubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Returns a subscription description for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: SubscriptionsGetOptionalParams): Promise<SubscriptionsGetResponse>;
}
//# sourceMappingURL=subscriptions.d.ts.map