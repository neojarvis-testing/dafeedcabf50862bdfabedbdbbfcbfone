import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { MigrationConfigs } from "../operationsInterfaces";
import { ServiceBusManagementClient } from "../serviceBusManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { MigrationConfigProperties, MigrationConfigsListOptionalParams, MigrationConfigurationName, MigrationConfigsCreateAndStartMigrationOptionalParams, MigrationConfigsCreateAndStartMigrationResponse, MigrationConfigsDeleteOptionalParams, MigrationConfigsGetOptionalParams, MigrationConfigsGetResponse, MigrationConfigsCompleteMigrationOptionalParams, MigrationConfigsRevertOptionalParams } from "../models";
/** Class containing MigrationConfigs operations. */
export declare class MigrationConfigsImpl implements MigrationConfigs {
    private readonly client;
    /**
     * Initialize a new instance of the class MigrationConfigs class.
     * @param client Reference to the service client
     */
    constructor(client: ServiceBusManagementClient);
    /**
     * Gets all migrationConfigurations
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, namespaceName: string, options?: MigrationConfigsListOptionalParams): PagedAsyncIterableIterator<MigrationConfigProperties>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all migrationConfigurations
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    private _list;
    /**
     * Creates Migration configuration and starts migration of entities from Standard to Premium namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param parameters Parameters required to create Migration Configuration
     * @param options The options parameters.
     */
    beginCreateAndStartMigration(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, parameters: MigrationConfigProperties, options?: MigrationConfigsCreateAndStartMigrationOptionalParams): Promise<PollerLike<PollOperationState<MigrationConfigsCreateAndStartMigrationResponse>, MigrationConfigsCreateAndStartMigrationResponse>>;
    /**
     * Creates Migration configuration and starts migration of entities from Standard to Premium namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param parameters Parameters required to create Migration Configuration
     * @param options The options parameters.
     */
    beginCreateAndStartMigrationAndWait(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, parameters: MigrationConfigProperties, options?: MigrationConfigsCreateAndStartMigrationOptionalParams): Promise<MigrationConfigsCreateAndStartMigrationResponse>;
    /**
     * Deletes a MigrationConfiguration
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, options?: MigrationConfigsDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves Migration Config
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, options?: MigrationConfigsGetOptionalParams): Promise<MigrationConfigsGetResponse>;
    /**
     * This operation Completes Migration of entities by pointing the connection strings to Premium
     * namespace and any entities created after the operation will be under Premium Namespace.
     * CompleteMigration operation will fail when entity migration is in-progress.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    completeMigration(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, options?: MigrationConfigsCompleteMigrationOptionalParams): Promise<void>;
    /**
     * This operation reverts Migration
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    revert(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, options?: MigrationConfigsRevertOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=migrationConfigs.d.ts.map