import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Queues } from "../operationsInterfaces";
import { ServiceBusManagementClient } from "../serviceBusManagementClient";
import { SBAuthorizationRule, QueuesListAuthorizationRulesOptionalParams, SBQueue, QueuesListByNamespaceOptionalParams, QueuesCreateOrUpdateAuthorizationRuleOptionalParams, QueuesCreateOrUpdateAuthorizationRuleResponse, QueuesDeleteAuthorizationRuleOptionalParams, QueuesGetAuthorizationRuleOptionalParams, QueuesGetAuthorizationRuleResponse, QueuesListKeysOptionalParams, QueuesListKeysResponse, RegenerateAccessKeyParameters, QueuesRegenerateKeysOptionalParams, QueuesRegenerateKeysResponse, QueuesCreateOrUpdateOptionalParams, QueuesCreateOrUpdateResponse, QueuesDeleteOptionalParams, QueuesGetOptionalParams, QueuesGetResponse } from "../models";
/** Class containing Queues operations. */
export declare class QueuesImpl implements Queues {
    private readonly client;
    /**
     * Initialize a new instance of the class Queues class.
     * @param client Reference to the service client
     */
    constructor(client: ServiceBusManagementClient);
    /**
     * Gets all authorization rules for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, queueName: string, options?: QueuesListAuthorizationRulesOptionalParams): PagedAsyncIterableIterator<SBAuthorizationRule>;
    private listAuthorizationRulesPagingPage;
    private listAuthorizationRulesPagingAll;
    /**
     * Gets the queues within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: QueuesListByNamespaceOptionalParams): PagedAsyncIterableIterator<SBQueue>;
    private listByNamespacePagingPage;
    private listByNamespacePagingAll;
    /**
     * Gets all authorization rules for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    private _listAuthorizationRules;
    /**
     * Creates an authorization rule for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: SBAuthorizationRule, options?: QueuesCreateOrUpdateAuthorizationRuleOptionalParams): Promise<QueuesCreateOrUpdateAuthorizationRuleResponse>;
    /**
     * Deletes a queue authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: QueuesDeleteAuthorizationRuleOptionalParams): Promise<void>;
    /**
     * Gets an authorization rule for a queue by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: QueuesGetAuthorizationRuleOptionalParams): Promise<QueuesGetAuthorizationRuleResponse>;
    /**
     * Primary and secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: QueuesListKeysOptionalParams): Promise<QueuesListKeysResponse>;
    /**
     * Regenerates the primary or secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate the authorization rule.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: RegenerateAccessKeyParameters, options?: QueuesRegenerateKeysOptionalParams): Promise<QueuesRegenerateKeysResponse>;
    /**
     * Gets the queues within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    private _listByNamespace;
    /**
     * Creates or updates a Service Bus queue. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param parameters Parameters supplied to create or update a queue resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, queueName: string, parameters: SBQueue, options?: QueuesCreateOrUpdateOptionalParams): Promise<QueuesCreateOrUpdateResponse>;
    /**
     * Deletes a queue from the specified namespace in a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, queueName: string, options?: QueuesDeleteOptionalParams): Promise<void>;
    /**
     * Returns a description for the specified queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, queueName: string, options?: QueuesGetOptionalParams): Promise<QueuesGetResponse>;
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    private _listAuthorizationRulesNext;
    /**
     * ListByNamespaceNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the ListByNamespace method.
     * @param options The options parameters.
     */
    private _listByNamespaceNext;
}
//# sourceMappingURL=queues.d.ts.map