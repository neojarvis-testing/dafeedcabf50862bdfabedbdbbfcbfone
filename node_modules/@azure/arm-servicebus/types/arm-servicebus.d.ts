import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Namespace/ServiceBus Connection String */
export declare interface AccessKeys {
    /**
     * Primary connection string of the created namespace authorization rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryConnectionString?: string;
    /**
     * Secondary connection string of the created namespace authorization rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryConnectionString?: string;
    /**
     * Primary connection string of the alias if GEO DR is enabled
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aliasPrimaryConnectionString?: string;
    /**
     * Secondary  connection string of the alias if GEO DR is enabled
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aliasSecondaryConnectionString?: string;
    /**
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryKey?: string;
    /**
     * A base64-encoded 256-bit primary key for signing and validating the SAS token.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryKey?: string;
    /**
     * A string that describes the authorization rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keyName?: string;
}

/** Defines values for AccessRights. */
export declare type AccessRights = "Manage" | "Send" | "Listen";

/** Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression. */
export declare interface Action {
    /** SQL expression. e.g. MyProperty='ABC' */
    sqlExpression?: string;
    /** This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20. */
    compatibilityLevel?: number;
    /** Value that indicates whether the rule action requires preprocessing. */
    requiresPreprocessing?: boolean;
}

/** Single item in List or Get Alias(Disaster Recovery configuration) operation */
export declare interface ArmDisasterRecovery extends ProxyResource {
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Provisioning state of the Alias(Disaster Recovery configuration) - possible values 'Accepted' or 'Succeeded' or 'Failed'
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStateDR;
    /**
     * Number of entities pending to be replicated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pendingReplicationOperationsCount?: number;
    /** ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing */
    partnerNamespace?: string;
    /** Primary/Secondary eventhub namespace name, which is part of GEO DR pairing */
    alternateName?: string;
    /**
     * role of namespace in GEO DR - possible values 'Primary' or 'PrimaryNotReplicating' or 'Secondary'
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly role?: RoleDisasterRecovery;
}

/** The result of the List Alias(Disaster Recovery configuration) operation. */
export declare interface ArmDisasterRecoveryListResult {
    /** List of Alias(Disaster Recovery configurations) */
    value?: ArmDisasterRecovery[];
    /**
     * Link to the next set of results. Not empty if Value contains incomplete list of Alias(Disaster Recovery configuration)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Description of a Check Name availability request properties. */
export declare interface CheckNameAvailability {
    /** The Name to check the namespace name availability and The namespace name can contain only letters, numbers, and hyphens. The namespace must start with a letter, and it must end with a letter or number. */
    name: string;
}

/** Description of a Check Name availability request properties. */
export declare interface CheckNameAvailabilityResult {
    /**
     * The detailed info regarding the reason associated with the namespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /** Value indicating namespace is availability, true if the namespace is available; otherwise, false. */
    nameAvailable?: boolean;
    /** The reason for unavailability of a namespace. */
    reason?: UnavailableReason;
}

/** ConnectionState information. */
export declare interface ConnectionState {
    /** Status of the connection. */
    status?: PrivateLinkConnectionStatus;
    /** Description of the connection state. */
    description?: string;
}

/** Represents the correlation filter expression. */
export declare interface CorrelationFilter {
    /** dictionary object for custom filters */
    properties?: {
        [propertyName: string]: string;
    };
    /** Identifier of the correlation. */
    correlationId?: string;
    /** Identifier of the message. */
    messageId?: string;
    /** Address to send to. */
    to?: string;
    /** Address of the queue to reply to. */
    replyTo?: string;
    /** Application specific label. */
    label?: string;
    /** Session identifier. */
    sessionId?: string;
    /** Session identifier to reply to. */
    replyToSessionId?: string;
    /** Content type of the message. */
    contentType?: string;
    /** Value that indicates whether the rule action requires preprocessing. */
    requiresPreprocessing?: boolean;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for DefaultAction. \
 * {@link KnownDefaultAction} can be used interchangeably with DefaultAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny**
 */
export declare type DefaultAction = string;

/** Interface representing a DisasterRecoveryConfigs. */
export declare interface DisasterRecoveryConfigs {
    /**
     * Gets all Alias(Disaster Recovery configurations)
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, namespaceName: string, options?: DisasterRecoveryConfigsListOptionalParams): PagedAsyncIterableIterator<ArmDisasterRecovery>;
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, alias: string, options?: DisasterRecoveryConfigsListAuthorizationRulesOptionalParams): PagedAsyncIterableIterator<SBAuthorizationRule>;
    /**
     * Creates or updates a new Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param parameters Parameters required to create an Alias(Disaster Recovery configuration)
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, alias: string, parameters: ArmDisasterRecovery, options?: DisasterRecoveryConfigsCreateOrUpdateOptionalParams): Promise<DisasterRecoveryConfigsCreateOrUpdateResponse>;
    /**
     * Deletes an Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, alias: string, options?: DisasterRecoveryConfigsDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, alias: string, options?: DisasterRecoveryConfigsGetOptionalParams): Promise<DisasterRecoveryConfigsGetResponse>;
    /**
     * This operation disables the Disaster Recovery and stops replicating changes from primary to
     * secondary namespaces
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    breakPairing(resourceGroupName: string, namespaceName: string, alias: string, options?: DisasterRecoveryConfigsBreakPairingOptionalParams): Promise<void>;
    /**
     * Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    failOver(resourceGroupName: string, namespaceName: string, alias: string, options?: DisasterRecoveryConfigsFailOverOptionalParams): Promise<void>;
    /**
     * Gets an authorization rule for a namespace by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, alias: string, authorizationRuleName: string, options?: DisasterRecoveryConfigsGetAuthorizationRuleOptionalParams): Promise<DisasterRecoveryConfigsGetAuthorizationRuleResponse>;
    /**
     * Gets the primary and secondary connection strings for the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, namespaceName: string, alias: string, authorizationRuleName: string, options?: DisasterRecoveryConfigsListKeysOptionalParams): Promise<DisasterRecoveryConfigsListKeysResponse>;
    /**
     * Check the give namespace name availability.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param parameters Parameters to check availability of the given namespace name
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName: string, namespaceName: string, parameters: CheckNameAvailability, options?: DisasterRecoveryConfigsCheckNameAvailabilityOptionalParams): Promise<DisasterRecoveryConfigsCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsBreakPairingOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type DisasterRecoveryConfigsCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DisasterRecoveryConfigsCreateOrUpdateResponse = ArmDisasterRecovery;

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsFailOverOptionalParams extends coreClient.OperationOptions {
    /** Parameters required to create an Alias(Disaster Recovery configuration) */
    parameters?: FailoverProperties;
}

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsGetAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthorizationRule operation. */
export declare type DisasterRecoveryConfigsGetAuthorizationRuleResponse = SBAuthorizationRule;

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DisasterRecoveryConfigsGetResponse = ArmDisasterRecovery;

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsListAuthorizationRulesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRulesNext operation. */
export declare type DisasterRecoveryConfigsListAuthorizationRulesNextResponse = SBAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsListAuthorizationRulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRules operation. */
export declare type DisasterRecoveryConfigsListAuthorizationRulesResponse = SBAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type DisasterRecoveryConfigsListKeysResponse = AccessKeys;

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DisasterRecoveryConfigsListNextResponse = ArmDisasterRecoveryListResult;

/** Optional parameters. */
export declare interface DisasterRecoveryConfigsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type DisasterRecoveryConfigsListResponse = ArmDisasterRecoveryListResult;

/** Properties to configure Encryption */
export declare interface Encryption {
    /** Properties of KeyVault */
    keyVaultProperties?: KeyVaultProperties[];
    /** Enumerates the possible value of keySource for Encryption */
    keySource?: "Microsoft.KeyVault";
    /** Enable Infrastructure Encryption (Double Encryption) */
    requireInfrastructureEncryption?: boolean;
}

/**
 * Defines values for EndPointProvisioningState. \
 * {@link KnownEndPointProvisioningState} can be used interchangeably with EndPointProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Canceled** \
 * **Failed**
 */
export declare type EndPointProvisioningState = string;

/** Defines values for EntityStatus. */
export declare type EntityStatus = "Active" | "Disabled" | "Restoring" | "SendDisabled" | "ReceiveDisabled" | "Creating" | "Deleting" | "Renaming" | "Unknown";

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The resource management error response. */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorResponseError;
}

/** The error object. */
export declare interface ErrorResponseError {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorResponse[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Safe failover is to indicate the service should wait for pending replication to finish before switching to the secondary. */
export declare interface FailoverProperties {
    /** Safe failover is to indicate the service should wait for pending replication to finish before switching to the secondary. */
    isSafeFailover?: boolean;
}

/** Defines values for FilterType. */
export declare type FilterType = "SqlFilter" | "CorrelationFilter";

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Properties to configure User Assigned Identities for Bring your Own Keys */
export declare interface Identity {
    /**
     * ObjectId from the KeyVault
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * TenantId from the KeyVault
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Type of managed service identity. */
    type?: ManagedServiceIdentityType;
    /** Properties for User Assigned Identities */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedIdentity;
    };
}

/** Defines values for KeyType. */
declare type KeyType_2 = "PrimaryKey" | "SecondaryKey";
export { KeyType_2 as KeyType }

/** Properties to configure keyVault Properties */
export declare interface KeyVaultProperties {
    /** Name of the Key from KeyVault */
    keyName?: string;
    /** Uri of KeyVault */
    keyVaultUri?: string;
    /** Version of KeyVault */
    keyVersion?: string;
    identity?: UserAssignedIdentityProperties;
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DefaultAction} that the service accepts. */
export declare enum KnownDefaultAction {
    /** Allow */
    Allow = "Allow",
    /** Deny */
    Deny = "Deny"
}

/** Known values of {@link EndPointProvisioningState} that the service accepts. */
export declare enum KnownEndPointProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Canceled */
    Canceled = "Canceled",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link MigrationConfigurationName} that the service accepts. */
export declare enum KnownMigrationConfigurationName {
    /** Default */
    Default = "$default"
}

/** Known values of {@link NetworkRuleIPAction} that the service accepts. */
export declare enum KnownNetworkRuleIPAction {
    /** Allow */
    Allow = "Allow"
}

/** Known values of {@link PrivateLinkConnectionStatus} that the service accepts. */
export declare enum KnownPrivateLinkConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link PublicNetworkAccessFlag} that the service accepts. */
export declare enum KnownPublicNetworkAccessFlag {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Defines values for ManagedServiceIdentityType. */
export declare type ManagedServiceIdentityType = "SystemAssigned" | "UserAssigned" | "SystemAssigned, UserAssigned" | "None";

/** Message Count Details. */
export declare interface MessageCountDetails {
    /**
     * Number of active messages in the queue, topic, or subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activeMessageCount?: number;
    /**
     * Number of messages that are dead lettered.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deadLetterMessageCount?: number;
    /**
     * Number of scheduled messages.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scheduledMessageCount?: number;
    /**
     * Number of messages transferred to another queue, topic, or subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transferMessageCount?: number;
    /**
     * Number of messages transferred into dead letters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly transferDeadLetterMessageCount?: number;
}

/** The result of the List migrationConfigurations operation. */
export declare interface MigrationConfigListResult {
    /** List of Migration Configs */
    value?: MigrationConfigProperties[];
    /**
     * Link to the next set of results. Not empty if Value contains incomplete list of migrationConfigurations
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Single item in List or Get Migration Config operation */
export declare interface MigrationConfigProperties extends ProxyResource {
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Provisioning state of Migration Configuration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * Number of entities pending to be replicated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pendingReplicationOperationsCount?: number;
    /** Existing premium Namespace ARM Id name which has no entities, will be used for migration */
    targetNamespace?: string;
    /** Name to access Standard Namespace after migration */
    postMigrationName?: string;
    /**
     * State in which Standard to Premium Migration is, possible values : Unknown, Reverting, Completing, Initiating, Syncing, Active
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly migrationState?: string;
}

/** Interface representing a MigrationConfigs. */
export declare interface MigrationConfigs {
    /**
     * Gets all migrationConfigurations
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, namespaceName: string, options?: MigrationConfigsListOptionalParams): PagedAsyncIterableIterator<MigrationConfigProperties>;
    /**
     * Creates Migration configuration and starts migration of entities from Standard to Premium namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param parameters Parameters required to create Migration Configuration
     * @param options The options parameters.
     */
    beginCreateAndStartMigration(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, parameters: MigrationConfigProperties, options?: MigrationConfigsCreateAndStartMigrationOptionalParams): Promise<PollerLike<PollOperationState<MigrationConfigsCreateAndStartMigrationResponse>, MigrationConfigsCreateAndStartMigrationResponse>>;
    /**
     * Creates Migration configuration and starts migration of entities from Standard to Premium namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param parameters Parameters required to create Migration Configuration
     * @param options The options parameters.
     */
    beginCreateAndStartMigrationAndWait(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, parameters: MigrationConfigProperties, options?: MigrationConfigsCreateAndStartMigrationOptionalParams): Promise<MigrationConfigsCreateAndStartMigrationResponse>;
    /**
     * Deletes a MigrationConfiguration
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, options?: MigrationConfigsDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves Migration Config
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, options?: MigrationConfigsGetOptionalParams): Promise<MigrationConfigsGetResponse>;
    /**
     * This operation Completes Migration of entities by pointing the connection strings to Premium
     * namespace and any entities created after the operation will be under Premium Namespace.
     * CompleteMigration operation will fail when entity migration is in-progress.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    completeMigration(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, options?: MigrationConfigsCompleteMigrationOptionalParams): Promise<void>;
    /**
     * This operation reverts Migration
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    revert(resourceGroupName: string, namespaceName: string, configName: MigrationConfigurationName, options?: MigrationConfigsRevertOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface MigrationConfigsCompleteMigrationOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface MigrationConfigsCreateAndStartMigrationOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createAndStartMigration operation. */
export declare type MigrationConfigsCreateAndStartMigrationResponse = MigrationConfigProperties;

/** Optional parameters. */
export declare interface MigrationConfigsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface MigrationConfigsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MigrationConfigsGetResponse = MigrationConfigProperties;

/** Optional parameters. */
export declare interface MigrationConfigsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type MigrationConfigsListNextResponse = MigrationConfigListResult;

/** Optional parameters. */
export declare interface MigrationConfigsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type MigrationConfigsListResponse = MigrationConfigListResult;

/** Optional parameters. */
export declare interface MigrationConfigsRevertOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for MigrationConfigurationName. \
 * {@link KnownMigrationConfigurationName} can be used interchangeably with MigrationConfigurationName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **$default**
 */
export declare type MigrationConfigurationName = string;

/** Interface representing a Namespaces. */
export declare interface Namespaces {
    /**
     * Gets all the available namespaces within the subscription, irrespective of the resource groups.
     * @param options The options parameters.
     */
    list(options?: NamespacesListOptionalParams): PagedAsyncIterableIterator<SBNamespace>;
    /**
     * Gets the available namespaces within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: NamespacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<SBNamespace>;
    /**
     * Gets list of NetworkRuleSet for a Namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listNetworkRuleSets(resourceGroupName: string, namespaceName: string, options?: NamespacesListNetworkRuleSetsOptionalParams): PagedAsyncIterableIterator<NetworkRuleSet>;
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, options?: NamespacesListAuthorizationRulesOptionalParams): PagedAsyncIterableIterator<SBAuthorizationRule>;
    /**
     * Creates or updates a service namespace. Once created, this namespace's resource manifest is
     * immutable. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name.
     * @param parameters Parameters supplied to create a namespace resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, namespaceName: string, parameters: SBNamespace, options?: NamespacesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<NamespacesCreateOrUpdateResponse>, NamespacesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a service namespace. Once created, this namespace's resource manifest is
     * immutable. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name.
     * @param parameters Parameters supplied to create a namespace resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, namespaceName: string, parameters: SBNamespace, options?: NamespacesCreateOrUpdateOptionalParams): Promise<NamespacesCreateOrUpdateResponse>;
    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the
     * namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, namespaceName: string, options?: NamespacesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the
     * namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, namespaceName: string, options?: NamespacesDeleteOptionalParams): Promise<void>;
    /**
     * Gets a description for the specified namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, options?: NamespacesGetOptionalParams): Promise<NamespacesGetResponse>;
    /**
     * Updates a service namespace. Once created, this namespace's resource manifest is immutable. This
     * operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param parameters Parameters supplied to update a namespace resource.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, namespaceName: string, parameters: SBNamespaceUpdateParameters, options?: NamespacesUpdateOptionalParams): Promise<NamespacesUpdateResponse>;
    /**
     * Create or update NetworkRuleSet for a Namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param parameters The Namespace IpFilterRule.
     * @param options The options parameters.
     */
    createOrUpdateNetworkRuleSet(resourceGroupName: string, namespaceName: string, parameters: NetworkRuleSet, options?: NamespacesCreateOrUpdateNetworkRuleSetOptionalParams): Promise<NamespacesCreateOrUpdateNetworkRuleSetResponse>;
    /**
     * Gets NetworkRuleSet for a Namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    getNetworkRuleSet(resourceGroupName: string, namespaceName: string, options?: NamespacesGetNetworkRuleSetOptionalParams): Promise<NamespacesGetNetworkRuleSetResponse>;
    /**
     * Creates or updates an authorization rule for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: SBAuthorizationRule, options?: NamespacesCreateOrUpdateAuthorizationRuleOptionalParams): Promise<NamespacesCreateOrUpdateAuthorizationRuleResponse>;
    /**
     * Deletes a namespace authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: NamespacesDeleteAuthorizationRuleOptionalParams): Promise<void>;
    /**
     * Gets an authorization rule for a namespace by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: NamespacesGetAuthorizationRuleOptionalParams): Promise<NamespacesGetAuthorizationRuleResponse>;
    /**
     * Gets the primary and secondary connection strings for the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, options?: NamespacesListKeysOptionalParams): Promise<NamespacesListKeysResponse>;
    /**
     * Regenerates the primary or secondary connection strings for the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate the authorization rule.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, authorizationRuleName: string, parameters: RegenerateAccessKeyParameters, options?: NamespacesRegenerateKeysOptionalParams): Promise<NamespacesRegenerateKeysResponse>;
    /**
     * Check the give namespace name availability.
     * @param parameters Parameters to check availability of the given namespace name
     * @param options The options parameters.
     */
    checkNameAvailability(parameters: CheckNameAvailability, options?: NamespacesCheckNameAvailabilityOptionalParams): Promise<NamespacesCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface NamespacesCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type NamespacesCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export declare interface NamespacesCreateOrUpdateAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAuthorizationRule operation. */
export declare type NamespacesCreateOrUpdateAuthorizationRuleResponse = SBAuthorizationRule;

/** Optional parameters. */
export declare interface NamespacesCreateOrUpdateNetworkRuleSetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateNetworkRuleSet operation. */
export declare type NamespacesCreateOrUpdateNetworkRuleSetResponse = NetworkRuleSet;

/** Optional parameters. */
export declare interface NamespacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type NamespacesCreateOrUpdateResponse = SBNamespace;

/** Optional parameters. */
export declare interface NamespacesDeleteAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface NamespacesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface NamespacesGetAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthorizationRule operation. */
export declare type NamespacesGetAuthorizationRuleResponse = SBAuthorizationRule;

/** Optional parameters. */
export declare interface NamespacesGetNetworkRuleSetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getNetworkRuleSet operation. */
export declare type NamespacesGetNetworkRuleSetResponse = NetworkRuleSet;

/** Optional parameters. */
export declare interface NamespacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type NamespacesGetResponse = SBNamespace;

/** Optional parameters. */
export declare interface NamespacesListAuthorizationRulesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRulesNext operation. */
export declare type NamespacesListAuthorizationRulesNextResponse = SBAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface NamespacesListAuthorizationRulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRules operation. */
export declare type NamespacesListAuthorizationRulesResponse = SBAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface NamespacesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type NamespacesListByResourceGroupNextResponse = SBNamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type NamespacesListByResourceGroupResponse = SBNamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type NamespacesListKeysResponse = AccessKeys;

/** Optional parameters. */
export declare interface NamespacesListNetworkRuleSetsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNetworkRuleSetsNext operation. */
export declare type NamespacesListNetworkRuleSetsNextResponse = NetworkRuleSetListResult;

/** Optional parameters. */
export declare interface NamespacesListNetworkRuleSetsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNetworkRuleSets operation. */
export declare type NamespacesListNetworkRuleSetsResponse = NetworkRuleSetListResult;

/** Optional parameters. */
export declare interface NamespacesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type NamespacesListNextResponse = SBNamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type NamespacesListResponse = SBNamespaceListResult;

/** Optional parameters. */
export declare interface NamespacesRegenerateKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKeys operation. */
export declare type NamespacesRegenerateKeysResponse = AccessKeys;

/** Optional parameters. */
export declare interface NamespacesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type NamespacesUpdateResponse = SBNamespace;

/**
 * Defines values for NetworkRuleIPAction. \
 * {@link KnownNetworkRuleIPAction} can be used interchangeably with NetworkRuleIPAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow**
 */
export declare type NetworkRuleIPAction = string;

/** Description of NetworkRuleSet resource. */
export declare interface NetworkRuleSet extends ProxyResource {
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Value that indicates whether Trusted Service Access is Enabled or not. */
    trustedServiceAccessEnabled?: boolean;
    /** Default Action for Network Rule Set */
    defaultAction?: DefaultAction;
    /** List VirtualNetwork Rules */
    virtualNetworkRules?: NWRuleSetVirtualNetworkRules[];
    /** List of IpRules */
    ipRules?: NWRuleSetIpRules[];
    /** This determines if traffic is allowed over public network. By default it is enabled. */
    publicNetworkAccess?: PublicNetworkAccessFlag;
}

/** The response of the List NetworkRuleSet operation. */
export declare interface NetworkRuleSetListResult {
    /** Result of the List NetworkRuleSet operation. */
    value?: NetworkRuleSet[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of NetworkRuleSet. */
    nextLink?: string;
}

/** Description of NetWorkRuleSet - IpRules resource. */
export declare interface NWRuleSetIpRules {
    /** IP Mask */
    ipMask?: string;
    /** The IP Filter Action */
    action?: NetworkRuleIPAction;
}

/** Description of VirtualNetworkRules - NetworkRules resource. */
export declare interface NWRuleSetVirtualNetworkRules {
    /** Subnet properties */
    subnet?: Subnet;
    /** Value that indicates whether to ignore missing VNet Service Endpoint */
    ignoreMissingVnetServiceEndpoint?: boolean;
}

/** A Service Bus REST API operation */
export declare interface Operation {
    /**
     * Operation name: {provider}/{resource}/{operation}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /** Display of the operation */
    display?: OperationDisplay;
    /** Origin of the operation */
    origin?: string;
    /** Properties of the operation */
    properties?: Record<string, unknown>;
}

/** Operation display payload */
export declare interface OperationDisplay {
    /**
     * Resource provider of the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /**
     * Resource of the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resource?: string;
    /**
     * Localized friendly name for the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * Localized friendly description for the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
}

/** Result of the request to list ServiceBus operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /**
     * List of ServiceBus operations supported by the Microsoft.ServiceBus resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available ServiceBus REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** PrivateEndpoint information. */
export declare interface PrivateEndpoint {
    /** The ARM identifier for Private Endpoint. */
    id?: string;
}

/** Properties of the PrivateEndpointConnection. */
export declare interface PrivateEndpointConnection extends ProxyResource {
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The Private Endpoint resource for this Connection. */
    privateEndpoint?: PrivateEndpoint;
    /** Details about the state of the connection. */
    privateLinkServiceConnectionState?: ConnectionState;
    /** Provisioning state of the Private Endpoint Connection. */
    provisioningState?: EndPointProvisioningState;
}

/** Result of the list of all private endpoint connections operation. */
export declare interface PrivateEndpointConnectionListResult {
    /** A collection of private endpoint connection resources. */
    value?: PrivateEndpointConnection[];
    /** A link for the next page of private endpoint connection resources. */
    nextLink?: string;
}

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * Gets the available PrivateEndpointConnections within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, namespaceName: string, options?: PrivateEndpointConnectionsListOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Creates or updates PrivateEndpointConnections of service namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param parameters Parameters supplied to update Status of PrivateEndPoint Connection to namespace
     *                   resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, privateEndpointConnectionName: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes an existing Private Endpoint Connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, namespaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an existing Private Endpoint Connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, namespaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
    /**
     * Gets a description for the specified Private Endpoint Connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateEndpointConnectionsListNextResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/**
 * Defines values for PrivateLinkConnectionStatus. \
 * {@link KnownPrivateLinkConnectionStatus} can be used interchangeably with PrivateLinkConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export declare type PrivateLinkConnectionStatus = string;

/** Information of the private link resource. */
export declare interface PrivateLinkResource {
    /** Fully qualified identifier of the resource. */
    id?: string;
    /** Name of the resource */
    name?: string;
    /** Type of the resource */
    type?: string;
    groupId?: string;
    /** Required Members */
    requiredMembers?: string[];
    /** Required Zone Names */
    requiredZoneNames?: string[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Gets lists of resources that supports Privatelinks.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResourcesListResult;

/** Result of the List private link resources operation. */
export declare interface PrivateLinkResourcesListResult {
    /** A collection of private link resources */
    value?: PrivateLinkResource[];
    /** A link for the next page of private link resources. */
    nextLink?: string;
}

/** Defines values for ProvisioningStateDR. */
export declare type ProvisioningStateDR = "Accepted" | "Succeeded" | "Failed";

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface ProxyResource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.EventHub/Namespaces" or "Microsoft.EventHub/Namespaces/EventHubs"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The geo-location where the resource lives
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
}

/**
 * Defines values for PublicNetworkAccessFlag. \
 * {@link KnownPublicNetworkAccessFlag} can be used interchangeably with PublicNetworkAccessFlag,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccessFlag = string;

/** Interface representing a Queues. */
export declare interface Queues {
    /**
     * Gets all authorization rules for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, queueName: string, options?: QueuesListAuthorizationRulesOptionalParams): PagedAsyncIterableIterator<SBAuthorizationRule>;
    /**
     * Gets the queues within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: QueuesListByNamespaceOptionalParams): PagedAsyncIterableIterator<SBQueue>;
    /**
     * Creates an authorization rule for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: SBAuthorizationRule, options?: QueuesCreateOrUpdateAuthorizationRuleOptionalParams): Promise<QueuesCreateOrUpdateAuthorizationRuleResponse>;
    /**
     * Deletes a queue authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: QueuesDeleteAuthorizationRuleOptionalParams): Promise<void>;
    /**
     * Gets an authorization rule for a queue by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: QueuesGetAuthorizationRuleOptionalParams): Promise<QueuesGetAuthorizationRuleResponse>;
    /**
     * Primary and secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, options?: QueuesListKeysOptionalParams): Promise<QueuesListKeysResponse>;
    /**
     * Regenerates the primary or secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate the authorization rule.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, queueName: string, authorizationRuleName: string, parameters: RegenerateAccessKeyParameters, options?: QueuesRegenerateKeysOptionalParams): Promise<QueuesRegenerateKeysResponse>;
    /**
     * Creates or updates a Service Bus queue. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param parameters Parameters supplied to create or update a queue resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, queueName: string, parameters: SBQueue, options?: QueuesCreateOrUpdateOptionalParams): Promise<QueuesCreateOrUpdateResponse>;
    /**
     * Deletes a queue from the specified namespace in a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, queueName: string, options?: QueuesDeleteOptionalParams): Promise<void>;
    /**
     * Returns a description for the specified queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, queueName: string, options?: QueuesGetOptionalParams): Promise<QueuesGetResponse>;
}

/** Optional parameters. */
export declare interface QueuesCreateOrUpdateAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAuthorizationRule operation. */
export declare type QueuesCreateOrUpdateAuthorizationRuleResponse = SBAuthorizationRule;

/** Optional parameters. */
export declare interface QueuesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type QueuesCreateOrUpdateResponse = SBQueue;

/** Optional parameters. */
export declare interface QueuesDeleteAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface QueuesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface QueuesGetAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthorizationRule operation. */
export declare type QueuesGetAuthorizationRuleResponse = SBAuthorizationRule;

/** Optional parameters. */
export declare interface QueuesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type QueuesGetResponse = SBQueue;

/** Optional parameters. */
export declare interface QueuesListAuthorizationRulesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRulesNext operation. */
export declare type QueuesListAuthorizationRulesNextResponse = SBAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface QueuesListAuthorizationRulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRules operation. */
export declare type QueuesListAuthorizationRulesResponse = SBAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface QueuesListByNamespaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByNamespaceNext operation. */
export declare type QueuesListByNamespaceNextResponse = SBQueueListResult;

/** Optional parameters. */
export declare interface QueuesListByNamespaceOptionalParams extends coreClient.OperationOptions {
    /** Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. */
    skip?: number;
    /** May be used to limit the number of results to the most recent N usageDetails. */
    top?: number;
}

/** Contains response data for the listByNamespace operation. */
export declare type QueuesListByNamespaceResponse = SBQueueListResult;

/** Optional parameters. */
export declare interface QueuesListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type QueuesListKeysResponse = AccessKeys;

/** Optional parameters. */
export declare interface QueuesRegenerateKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKeys operation. */
export declare type QueuesRegenerateKeysResponse = AccessKeys;

/** Parameters supplied to the Regenerate Authorization Rule operation, specifies which key needs to be reset. */
export declare interface RegenerateAccessKeyParameters {
    /** The access key to regenerate. */
    keyType: KeyType_2;
    /** Optional, if the key value provided, is reset for KeyType value or autogenerate Key value set for keyType */
    key?: string;
}

/** The Resource definition for other than namespace. */
export declare interface Resource {
    /**
     * Resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The Resource definition. */
export declare interface ResourceNamespacePatch extends Resource {
    /** Resource location */
    location?: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Defines values for RoleDisasterRecovery. */
export declare type RoleDisasterRecovery = "Primary" | "PrimaryNotReplicating" | "Secondary";

/** Description of Rule Resource. */
export declare interface Rule extends ProxyResource {
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Represents the filter actions which are allowed for the transformation of a message that have been matched by a filter expression. */
    action?: Action;
    /** Filter type that is evaluated against a BrokeredMessage. */
    filterType?: FilterType;
    /** Properties of sqlFilter */
    sqlFilter?: SqlFilter;
    /** Properties of correlationFilter */
    correlationFilter?: CorrelationFilter;
}

/** The response of the List rule operation. */
export declare interface RuleListResult {
    /** Result of the List Rules operation. */
    value?: Rule[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of rules */
    nextLink?: string;
}

/** Interface representing a Rules. */
export declare interface Rules {
    /**
     * List all the rules within given topic-subscription
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param options The options parameters.
     */
    listBySubscriptions(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: RulesListBySubscriptionsOptionalParams): PagedAsyncIterableIterator<Rule>;
    /**
     * Creates a new rule and updates an existing rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param ruleName The rule name.
     * @param parameters Parameters supplied to create a rule.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, parameters: Rule, options?: RulesCreateOrUpdateOptionalParams): Promise<RulesCreateOrUpdateResponse>;
    /**
     * Deletes an existing rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param ruleName The rule name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, options?: RulesDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves the description for the specified rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param ruleName The rule name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, ruleName: string, options?: RulesGetOptionalParams): Promise<RulesGetResponse>;
}

/** Optional parameters. */
export declare interface RulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type RulesCreateOrUpdateResponse = Rule;

/** Optional parameters. */
export declare interface RulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface RulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RulesGetResponse = Rule;

/** Optional parameters. */
export declare interface RulesListBySubscriptionsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionsNext operation. */
export declare type RulesListBySubscriptionsNextResponse = RuleListResult;

/** Optional parameters. */
export declare interface RulesListBySubscriptionsOptionalParams extends coreClient.OperationOptions {
    /** Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. */
    skip?: number;
    /** May be used to limit the number of results to the most recent N usageDetails. */
    top?: number;
}

/** Contains response data for the listBySubscriptions operation. */
export declare type RulesListBySubscriptionsResponse = RuleListResult;

/** Description of a namespace authorization rule. */
export declare interface SBAuthorizationRule extends ProxyResource {
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The rights associated with the rule. */
    rights?: AccessRights[];
}

/** The response to the List Namespace operation. */
export declare interface SBAuthorizationRuleListResult {
    /** Result of the List Authorization Rules operation. */
    value?: SBAuthorizationRule[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of Authorization Rules. */
    nextLink?: string;
}

/** Properties specific to client affine subscriptions. */
export declare interface SBClientAffineProperties {
    /** Indicates the Client ID of the application that created the client-affine subscription. */
    clientId?: string;
    /** For client-affine subscriptions, this value indicates whether the subscription is durable or not. */
    isDurable?: boolean;
    /** For client-affine subscriptions, this value indicates whether the subscription is shared or not. */
    isShared?: boolean;
}

/** Description of a namespace resource. */
export declare interface SBNamespace extends TrackedResource {
    /** Properties of SKU */
    sku?: SBSku;
    /** Properties of BYOK Identity description */
    identity?: Identity;
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Provisioning state of the namespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * Status of the namespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The time the namespace was created
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * The time the namespace was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedAt?: Date;
    /**
     * Endpoint you can use to perform Service Bus operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceBusEndpoint?: string;
    /**
     * Identifier for Azure Insights metrics
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricId?: string;
    /** Enabling this property creates a Premium Service Bus Namespace in regions supported availability zones. */
    zoneRedundant?: boolean;
    /** Properties of BYOK Encryption description */
    encryption?: Encryption;
    /** List of private endpoint connections. */
    privateEndpointConnections?: PrivateEndpointConnection[];
    /** This property disables SAS authentication for the Service Bus namespace. */
    disableLocalAuth?: boolean;
    /** Alternate name for namespace */
    alternateName?: string;
}

/** The response of the List Namespace operation. */
export declare interface SBNamespaceListResult {
    /** Result of the List Namespace operation. */
    value?: SBNamespace[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of Namespaces. */
    nextLink?: string;
}

/** Description of a namespace resource. */
export declare interface SBNamespaceUpdateParameters extends ResourceNamespacePatch {
    /** Properties of SKU */
    sku?: SBSku;
    /** Properties of BYOK Identity description */
    identity?: Identity;
    /**
     * Provisioning state of the namespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * Status of the namespace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /**
     * The time the namespace was created
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * The time the namespace was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedAt?: Date;
    /**
     * Endpoint you can use to perform Service Bus operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceBusEndpoint?: string;
    /**
     * Identifier for Azure Insights metrics
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricId?: string;
    /** Properties of BYOK Encryption description */
    encryption?: Encryption;
    /** List of private endpoint connections. */
    privateEndpointConnections?: PrivateEndpointConnection[];
    /** This property disables SAS authentication for the Service Bus namespace. */
    disableLocalAuth?: boolean;
    /** Alternate name for namespace */
    alternateName?: string;
}

/** Description of queue Resource. */
export declare interface SBQueue extends ProxyResource {
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Message Count Details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countDetails?: MessageCountDetails;
    /**
     * The exact time the message was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * The exact time the message was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedAt?: Date;
    /**
     * Last time a message was sent, or the last time there was a receive request to this queue.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accessedAt?: Date;
    /**
     * The size of the queue, in bytes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sizeInBytes?: number;
    /**
     * The number of messages in the queue.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly messageCount?: number;
    /** ISO 8601 timespan duration of a peek-lock; that is, the amount of time that the message is locked for other receivers. The maximum value for LockDuration is 5 minutes; the default value is 1 minute. */
    lockDuration?: string;
    /** The maximum size of the queue in megabytes, which is the size of memory allocated for the queue. Default is 1024. */
    maxSizeInMegabytes?: number;
    /** Maximum size (in KB) of the message payload that can be accepted by the queue. This property is only used in Premium today and default is 1024. */
    maxMessageSizeInKilobytes?: number;
    /** A value indicating if this queue requires duplicate detection. */
    requiresDuplicateDetection?: boolean;
    /** A value that indicates whether the queue supports the concept of sessions. */
    requiresSession?: boolean;
    /** ISO 8601 default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself. */
    defaultMessageTimeToLive?: string;
    /** A value that indicates whether this queue has dead letter support when a message expires. */
    deadLetteringOnMessageExpiration?: boolean;
    /** ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes. */
    duplicateDetectionHistoryTimeWindow?: string;
    /** The maximum delivery count. A message is automatically deadlettered after this number of deliveries. default value is 10. */
    maxDeliveryCount?: number;
    /** Enumerates the possible values for the status of a messaging entity. */
    status?: EntityStatus;
    /** Value that indicates whether server-side batched operations are enabled. */
    enableBatchedOperations?: boolean;
    /** ISO 8061 timeSpan idle interval after which the queue is automatically deleted. The minimum duration is 5 minutes. */
    autoDeleteOnIdle?: string;
    /** A value that indicates whether the queue is to be partitioned across multiple message brokers. */
    enablePartitioning?: boolean;
    /** A value that indicates whether Express Entities are enabled. An express queue holds a message in memory temporarily before writing it to persistent storage. */
    enableExpress?: boolean;
    /** Queue/Topic name to forward the messages */
    forwardTo?: string;
    /** Queue/Topic name to forward the Dead Letter message */
    forwardDeadLetteredMessagesTo?: string;
}

/** The response to the List Queues operation. */
export declare interface SBQueueListResult {
    /** Result of the List Queues operation. */
    value?: SBQueue[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of queues. */
    nextLink?: string;
}

/** SKU of the namespace. */
export declare interface SBSku {
    /** Name of this SKU. */
    name: SkuName;
    /** The billing tier of this particular SKU. */
    tier?: SkuTier;
    /** The specified messaging units for the tier. For Premium tier, capacity are 1,2 and 4. */
    capacity?: number;
}

/** Description of subscription resource. */
export declare interface SBSubscription extends ProxyResource {
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Number of messages.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly messageCount?: number;
    /**
     * Exact time the message was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * Last time there was a receive request to this subscription.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accessedAt?: Date;
    /**
     * The exact time the message was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedAt?: Date;
    /**
     * Message count details
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countDetails?: MessageCountDetails;
    /** ISO 8061 lock duration timespan for the subscription. The default value is 1 minute. */
    lockDuration?: string;
    /** Value indicating if a subscription supports the concept of sessions. */
    requiresSession?: boolean;
    /** ISO 8061 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself. */
    defaultMessageTimeToLive?: string;
    /** Value that indicates whether a subscription has dead letter support on filter evaluation exceptions. */
    deadLetteringOnFilterEvaluationExceptions?: boolean;
    /** Value that indicates whether a subscription has dead letter support when a message expires. */
    deadLetteringOnMessageExpiration?: boolean;
    /** ISO 8601 timeSpan structure that defines the duration of the duplicate detection history. The default value is 10 minutes. */
    duplicateDetectionHistoryTimeWindow?: string;
    /** Number of maximum deliveries. */
    maxDeliveryCount?: number;
    /** Enumerates the possible values for the status of a messaging entity. */
    status?: EntityStatus;
    /** Value that indicates whether server-side batched operations are enabled. */
    enableBatchedOperations?: boolean;
    /** ISO 8061 timeSpan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes. */
    autoDeleteOnIdle?: string;
    /** Queue/Topic name to forward the messages */
    forwardTo?: string;
    /** Queue/Topic name to forward the Dead Letter message */
    forwardDeadLetteredMessagesTo?: string;
    /** Value that indicates whether the subscription has an affinity to the client id. */
    isClientAffine?: boolean;
    /** Properties specific to client affine subscriptions. */
    clientAffineProperties?: SBClientAffineProperties;
}

/** The response to the List Subscriptions operation. */
export declare interface SBSubscriptionListResult {
    /** Result of the List Subscriptions operation. */
    value?: SBSubscription[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of subscriptions. */
    nextLink?: string;
}

/** Description of topic resource. */
export declare interface SBTopic extends ProxyResource {
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * Size of the topic, in bytes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sizeInBytes?: number;
    /**
     * Exact time the message was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdAt?: Date;
    /**
     * The exact time the message was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updatedAt?: Date;
    /**
     * Last time the message was sent, or a request was received, for this topic.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly accessedAt?: Date;
    /**
     * Number of subscriptions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionCount?: number;
    /**
     * Message count details
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly countDetails?: MessageCountDetails;
    /** ISO 8601 Default message timespan to live value. This is the duration after which the message expires, starting from when the message is sent to Service Bus. This is the default value used when TimeToLive is not set on a message itself. */
    defaultMessageTimeToLive?: string;
    /** Maximum size of the topic in megabytes, which is the size of the memory allocated for the topic. Default is 1024. */
    maxSizeInMegabytes?: number;
    /** Maximum size (in KB) of the message payload that can be accepted by the topic. This property is only used in Premium today and default is 1024. */
    maxMessageSizeInKilobytes?: number;
    /** Value indicating if this topic requires duplicate detection. */
    requiresDuplicateDetection?: boolean;
    /** ISO8601 timespan structure that defines the duration of the duplicate detection history. The default value is 10 minutes. */
    duplicateDetectionHistoryTimeWindow?: string;
    /** Value that indicates whether server-side batched operations are enabled. */
    enableBatchedOperations?: boolean;
    /** Enumerates the possible values for the status of a messaging entity. */
    status?: EntityStatus;
    /** Value that indicates whether the topic supports ordering. */
    supportOrdering?: boolean;
    /** ISO 8601 timespan idle interval after which the topic is automatically deleted. The minimum duration is 5 minutes. */
    autoDeleteOnIdle?: string;
    /** Value that indicates whether the topic to be partitioned across multiple message brokers is enabled. */
    enablePartitioning?: boolean;
    /** Value that indicates whether Express Entities are enabled. An express topic holds a message in memory temporarily before writing it to persistent storage. */
    enableExpress?: boolean;
}

/** The response to the List Topics operation. */
export declare interface SBTopicListResult {
    /** Result of the List Topics operation. */
    value?: SBTopic[];
    /** Link to the next set of results. Not empty if Value contains incomplete list of topics. */
    nextLink?: string;
}

export declare class ServiceBusManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the ServiceBusManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ServiceBusManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    namespaces: Namespaces;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    operations: Operations;
    disasterRecoveryConfigs: DisasterRecoveryConfigs;
    migrationConfigs: MigrationConfigs;
    queues: Queues;
    topics: Topics;
    rules: Rules;
    subscriptions: Subscriptions;
}

/** Optional parameters. */
export declare interface ServiceBusManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Defines values for SkuName. */
export declare type SkuName = "Basic" | "Standard" | "Premium";

/** Defines values for SkuTier. */
export declare type SkuTier = "Basic" | "Standard" | "Premium";

/** Represents a filter which is a composition of an expression and an action that is executed in the pub/sub pipeline. */
export declare interface SqlFilter {
    /** The SQL expression. e.g. MyProperty='ABC' */
    sqlExpression?: string;
    /** This property is reserved for future use. An integer value showing the compatibility level, currently hard-coded to 20. */
    compatibilityLevel?: number;
    /** Value that indicates whether the rule action requires preprocessing. */
    requiresPreprocessing?: boolean;
}

/** Represents set of actions written in SQL language-based syntax that is performed against a ServiceBus.Messaging.BrokeredMessage */
export declare interface SqlRuleAction extends Action {
}

/** Properties supplied for Subnet */
export declare interface Subnet {
    /** Resource ID of Virtual Network Subnet */
    id: string;
}

/** Interface representing a Subscriptions. */
export declare interface Subscriptions {
    /**
     * List all the subscriptions under a specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    listByTopic(resourceGroupName: string, namespaceName: string, topicName: string, options?: SubscriptionsListByTopicOptionalParams): PagedAsyncIterableIterator<SBSubscription>;
    /**
     * Creates a topic subscription.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param parameters Parameters supplied to create a subscription resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, parameters: SBSubscription, options?: SubscriptionsCreateOrUpdateOptionalParams): Promise<SubscriptionsCreateOrUpdateResponse>;
    /**
     * Deletes a subscription from the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: SubscriptionsDeleteOptionalParams): Promise<void>;
    /**
     * Returns a subscription description for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, subscriptionName: string, options?: SubscriptionsGetOptionalParams): Promise<SubscriptionsGetResponse>;
}

/** Optional parameters. */
export declare interface SubscriptionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SubscriptionsCreateOrUpdateResponse = SBSubscription;

/** Optional parameters. */
export declare interface SubscriptionsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SubscriptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SubscriptionsGetResponse = SBSubscription;

/** Optional parameters. */
export declare interface SubscriptionsListByTopicNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByTopicNext operation. */
export declare type SubscriptionsListByTopicNextResponse = SBSubscriptionListResult;

/** Optional parameters. */
export declare interface SubscriptionsListByTopicOptionalParams extends coreClient.OperationOptions {
    /** Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. */
    skip?: number;
    /** May be used to limit the number of results to the most recent N usageDetails. */
    top?: number;
}

/** Contains response data for the listByTopic operation. */
export declare type SubscriptionsListByTopicResponse = SBSubscriptionListResult;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The type of identity that last modified the resource. */
    lastModifiedAt?: Date;
}

/** Interface representing a Topics. */
export declare interface Topics {
    /**
     * Gets authorization rules for a topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName: string, namespaceName: string, topicName: string, options?: TopicsListAuthorizationRulesOptionalParams): PagedAsyncIterableIterator<SBAuthorizationRule>;
    /**
     * Gets all the topics in a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listByNamespace(resourceGroupName: string, namespaceName: string, options?: TopicsListByNamespaceOptionalParams): PagedAsyncIterableIterator<SBTopic>;
    /**
     * Creates an authorization rule for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: SBAuthorizationRule, options?: TopicsCreateOrUpdateAuthorizationRuleOptionalParams): Promise<TopicsCreateOrUpdateAuthorizationRuleResponse>;
    /**
     * Returns the specified authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options?: TopicsGetAuthorizationRuleOptionalParams): Promise<TopicsGetAuthorizationRuleResponse>;
    /**
     * Deletes a topic authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options?: TopicsDeleteAuthorizationRuleOptionalParams): Promise<void>;
    /**
     * Gets the primary and secondary connection strings for the topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, options?: TopicsListKeysOptionalParams): Promise<TopicsListKeysResponse>;
    /**
     * Regenerates primary or secondary connection strings for the topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate the authorization rule.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName: string, namespaceName: string, topicName: string, authorizationRuleName: string, parameters: RegenerateAccessKeyParameters, options?: TopicsRegenerateKeysOptionalParams): Promise<TopicsRegenerateKeysResponse>;
    /**
     * Creates a topic in the specified namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param parameters Parameters supplied to create a topic resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, namespaceName: string, topicName: string, parameters: SBTopic, options?: TopicsCreateOrUpdateOptionalParams): Promise<TopicsCreateOrUpdateResponse>;
    /**
     * Deletes a topic from the specified namespace and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, namespaceName: string, topicName: string, options?: TopicsDeleteOptionalParams): Promise<void>;
    /**
     * Returns a description for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, namespaceName: string, topicName: string, options?: TopicsGetOptionalParams): Promise<TopicsGetResponse>;
}

/** Optional parameters. */
export declare interface TopicsCreateOrUpdateAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateAuthorizationRule operation. */
export declare type TopicsCreateOrUpdateAuthorizationRuleResponse = SBAuthorizationRule;

/** Optional parameters. */
export declare interface TopicsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type TopicsCreateOrUpdateResponse = SBTopic;

/** Optional parameters. */
export declare interface TopicsDeleteAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TopicsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TopicsGetAuthorizationRuleOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAuthorizationRule operation. */
export declare type TopicsGetAuthorizationRuleResponse = SBAuthorizationRule;

/** Optional parameters. */
export declare interface TopicsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TopicsGetResponse = SBTopic;

/** Optional parameters. */
export declare interface TopicsListAuthorizationRulesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRulesNext operation. */
export declare type TopicsListAuthorizationRulesNextResponse = SBAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface TopicsListAuthorizationRulesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listAuthorizationRules operation. */
export declare type TopicsListAuthorizationRulesResponse = SBAuthorizationRuleListResult;

/** Optional parameters. */
export declare interface TopicsListByNamespaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByNamespaceNext operation. */
export declare type TopicsListByNamespaceNextResponse = SBTopicListResult;

/** Optional parameters. */
export declare interface TopicsListByNamespaceOptionalParams extends coreClient.OperationOptions {
    /** Skip is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skip parameter that specifies a starting point to use for subsequent calls. */
    skip?: number;
    /** May be used to limit the number of results to the most recent N usageDetails. */
    top?: number;
}

/** Contains response data for the listByNamespace operation. */
export declare type TopicsListByNamespaceResponse = SBTopicListResult;

/** Optional parameters. */
export declare interface TopicsListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type TopicsListKeysResponse = AccessKeys;

/** Optional parameters. */
export declare interface TopicsRegenerateKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKeys operation. */
export declare type TopicsRegenerateKeysResponse = AccessKeys;

/** The Resource definition. */
export declare interface TrackedResource extends Resource {
    /** The Geo-location where the resource lives */
    location: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Defines values for UnavailableReason. */
export declare type UnavailableReason = "None" | "InvalidName" | "SubscriptionIsDisabled" | "NameInUse" | "NameInLockdown" | "TooManyNamespaceInCurrentSubscription";

/** Recognized Dictionary value. */
export declare interface UserAssignedIdentity {
    /**
     * Principal Id of user assigned identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * Client Id of user assigned identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

export declare interface UserAssignedIdentityProperties {
    /** ARM ID of user Identity selected for encryption */
    userAssignedIdentity?: string;
}

export { }
