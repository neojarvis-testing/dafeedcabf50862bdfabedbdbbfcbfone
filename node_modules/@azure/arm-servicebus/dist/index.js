'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link PrivateLinkConnectionStatus} that the service accepts. */
exports.KnownPrivateLinkConnectionStatus = void 0;
(function (KnownPrivateLinkConnectionStatus) {
    /** Pending */
    KnownPrivateLinkConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateLinkConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateLinkConnectionStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownPrivateLinkConnectionStatus["Disconnected"] = "Disconnected";
})(exports.KnownPrivateLinkConnectionStatus || (exports.KnownPrivateLinkConnectionStatus = {}));
/** Known values of {@link EndPointProvisioningState} that the service accepts. */
exports.KnownEndPointProvisioningState = void 0;
(function (KnownEndPointProvisioningState) {
    /** Creating */
    KnownEndPointProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownEndPointProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownEndPointProvisioningState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownEndPointProvisioningState["Succeeded"] = "Succeeded";
    /** Canceled */
    KnownEndPointProvisioningState["Canceled"] = "Canceled";
    /** Failed */
    KnownEndPointProvisioningState["Failed"] = "Failed";
})(exports.KnownEndPointProvisioningState || (exports.KnownEndPointProvisioningState = {}));
/** Known values of {@link MigrationConfigurationName} that the service accepts. */
exports.KnownMigrationConfigurationName = void 0;
(function (KnownMigrationConfigurationName) {
    /** Default */
    KnownMigrationConfigurationName["Default"] = "$default";
})(exports.KnownMigrationConfigurationName || (exports.KnownMigrationConfigurationName = {}));
/** Known values of {@link DefaultAction} that the service accepts. */
exports.KnownDefaultAction = void 0;
(function (KnownDefaultAction) {
    /** Allow */
    KnownDefaultAction["Allow"] = "Allow";
    /** Deny */
    KnownDefaultAction["Deny"] = "Deny";
})(exports.KnownDefaultAction || (exports.KnownDefaultAction = {}));
/** Known values of {@link NetworkRuleIPAction} that the service accepts. */
exports.KnownNetworkRuleIPAction = void 0;
(function (KnownNetworkRuleIPAction) {
    /** Allow */
    KnownNetworkRuleIPAction["Allow"] = "Allow";
})(exports.KnownNetworkRuleIPAction || (exports.KnownNetworkRuleIPAction = {}));
/** Known values of {@link PublicNetworkAccessFlag} that the service accepts. */
exports.KnownPublicNetworkAccessFlag = void 0;
(function (KnownPublicNetworkAccessFlag) {
    /** Enabled */
    KnownPublicNetworkAccessFlag["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccessFlag["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccessFlag || (exports.KnownPublicNetworkAccessFlag = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const SBNamespaceListResult = {
    type: {
        name: "Composite",
        className: "SBNamespaceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SBNamespace"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SBSku = {
    type: {
        name: "Composite",
        className: "SBSku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Basic", "Standard", "Premium"]
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "Enum",
                    allowedValues: ["Basic", "Standard", "Premium"]
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Identity = {
    type: {
        name: "Composite",
        className: "Identity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "SystemAssigned",
                        "UserAssigned",
                        "SystemAssigned, UserAssigned",
                        "None"
                    ]
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserAssignedIdentity" }
                    }
                }
            }
        }
    }
};
const UserAssignedIdentity = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Encryption = {
    type: {
        name: "Composite",
        className: "Encryption",
        modelProperties: {
            keyVaultProperties: {
                serializedName: "keyVaultProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KeyVaultProperties"
                        }
                    }
                }
            },
            keySource: {
                defaultValue: "Microsoft.KeyVault",
                isConstant: true,
                serializedName: "keySource",
                type: {
                    name: "String"
                }
            },
            requireInfrastructureEncryption: {
                serializedName: "requireInfrastructureEncryption",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const KeyVaultProperties = {
    type: {
        name: "Composite",
        className: "KeyVaultProperties",
        modelProperties: {
            keyName: {
                serializedName: "keyName",
                type: {
                    name: "String"
                }
            },
            keyVaultUri: {
                serializedName: "keyVaultUri",
                type: {
                    name: "String"
                }
            },
            keyVersion: {
                serializedName: "keyVersion",
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "UserAssignedIdentityProperties"
                }
            }
        }
    }
};
const UserAssignedIdentityProperties = {
    type: {
        name: "Composite",
        className: "UserAssignedIdentityProperties",
        modelProperties: {
            userAssignedIdentity: {
                serializedName: "userAssignedIdentity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ConnectionState = {
    type: {
        name: "Composite",
        className: "ConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorResponseError"
                }
            }
        }
    }
};
const ErrorResponseError = {
    type: {
        name: "Composite",
        className: "ErrorResponseError",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorResponse"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const PrivateEndpointConnectionListResult = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourcesListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourcesListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            groupId: {
                serializedName: "properties.groupId",
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "properties.requiredMembers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ArmDisasterRecoveryListResult = {
    type: {
        name: "Composite",
        className: "ArmDisasterRecoveryListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ArmDisasterRecovery"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const FailoverProperties = {
    type: {
        name: "Composite",
        className: "FailoverProperties",
        modelProperties: {
            isSafeFailover: {
                serializedName: "properties.IsSafeFailover",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const MigrationConfigListResult = {
    type: {
        name: "Composite",
        className: "MigrationConfigListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrationConfigProperties"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NWRuleSetVirtualNetworkRules = {
    type: {
        name: "Composite",
        className: "NWRuleSetVirtualNetworkRules",
        modelProperties: {
            subnet: {
                serializedName: "subnet",
                type: {
                    name: "Composite",
                    className: "Subnet"
                }
            },
            ignoreMissingVnetServiceEndpoint: {
                serializedName: "ignoreMissingVnetServiceEndpoint",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const Subnet = {
    type: {
        name: "Composite",
        className: "Subnet",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NWRuleSetIpRules = {
    type: {
        name: "Composite",
        className: "NWRuleSetIpRules",
        modelProperties: {
            ipMask: {
                serializedName: "ipMask",
                type: {
                    name: "String"
                }
            },
            action: {
                defaultValue: "Allow",
                serializedName: "action",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NetworkRuleSetListResult = {
    type: {
        name: "Composite",
        className: "NetworkRuleSetListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkRuleSet"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SBAuthorizationRuleListResult = {
    type: {
        name: "Composite",
        className: "SBAuthorizationRuleListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SBAuthorizationRule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AccessKeys = {
    type: {
        name: "Composite",
        className: "AccessKeys",
        modelProperties: {
            primaryConnectionString: {
                serializedName: "primaryConnectionString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            secondaryConnectionString: {
                serializedName: "secondaryConnectionString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            aliasPrimaryConnectionString: {
                serializedName: "aliasPrimaryConnectionString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            aliasSecondaryConnectionString: {
                serializedName: "aliasSecondaryConnectionString",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            primaryKey: {
                serializedName: "primaryKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            secondaryKey: {
                serializedName: "secondaryKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            keyName: {
                serializedName: "keyName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegenerateAccessKeyParameters = {
    type: {
        name: "Composite",
        className: "RegenerateAccessKeyParameters",
        modelProperties: {
            keyType: {
                serializedName: "keyType",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["PrimaryKey", "SecondaryKey"]
                }
            },
            key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SBQueueListResult = {
    type: {
        name: "Composite",
        className: "SBQueueListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SBQueue"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MessageCountDetails = {
    type: {
        name: "Composite",
        className: "MessageCountDetails",
        modelProperties: {
            activeMessageCount: {
                serializedName: "activeMessageCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            deadLetterMessageCount: {
                serializedName: "deadLetterMessageCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            scheduledMessageCount: {
                serializedName: "scheduledMessageCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            transferMessageCount: {
                serializedName: "transferMessageCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            transferDeadLetterMessageCount: {
                serializedName: "transferDeadLetterMessageCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SBTopicListResult = {
    type: {
        name: "Composite",
        className: "SBTopicListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SBTopic"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RuleListResult = {
    type: {
        name: "Composite",
        className: "RuleListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Rule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Action = {
    type: {
        name: "Composite",
        className: "Action",
        modelProperties: {
            sqlExpression: {
                serializedName: "sqlExpression",
                type: {
                    name: "String"
                }
            },
            compatibilityLevel: {
                serializedName: "compatibilityLevel",
                type: {
                    name: "Number"
                }
            },
            requiresPreprocessing: {
                defaultValue: true,
                serializedName: "requiresPreprocessing",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SqlFilter = {
    type: {
        name: "Composite",
        className: "SqlFilter",
        modelProperties: {
            sqlExpression: {
                serializedName: "sqlExpression",
                type: {
                    name: "String"
                }
            },
            compatibilityLevel: {
                serializedName: "compatibilityLevel",
                type: {
                    name: "Number"
                }
            },
            requiresPreprocessing: {
                defaultValue: true,
                serializedName: "requiresPreprocessing",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const CorrelationFilter = {
    type: {
        name: "Composite",
        className: "CorrelationFilter",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            correlationId: {
                serializedName: "correlationId",
                type: {
                    name: "String"
                }
            },
            messageId: {
                serializedName: "messageId",
                type: {
                    name: "String"
                }
            },
            to: {
                serializedName: "to",
                type: {
                    name: "String"
                }
            },
            replyTo: {
                serializedName: "replyTo",
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String"
                }
            },
            replyToSessionId: {
                serializedName: "replyToSessionId",
                type: {
                    name: "String"
                }
            },
            contentType: {
                serializedName: "contentType",
                type: {
                    name: "String"
                }
            },
            requiresPreprocessing: {
                defaultValue: true,
                serializedName: "requiresPreprocessing",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SBSubscriptionListResult = {
    type: {
        name: "Composite",
        className: "SBSubscriptionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SBSubscription"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SBClientAffineProperties = {
    type: {
        name: "Composite",
        className: "SBClientAffineProperties",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            },
            isDurable: {
                serializedName: "isDurable",
                type: {
                    name: "Boolean"
                }
            },
            isShared: {
                serializedName: "isShared",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const CheckNameAvailability = {
    type: {
        name: "Composite",
        className: "CheckNameAvailability",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CheckNameAvailabilityResult = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityResult",
        modelProperties: {
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "None",
                        "InvalidName",
                        "SubscriptionIsDisabled",
                        "NameInUse",
                        "NameInLockdown",
                        "TooManyNamespaceInCurrentSubscription"
                    ]
                }
            }
        }
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "ConnectionState"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            } })
    }
};
const ArmDisasterRecovery = {
    type: {
        name: "Composite",
        className: "ArmDisasterRecovery",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Accepted", "Succeeded", "Failed"]
                }
            }, pendingReplicationOperationsCount: {
                serializedName: "properties.pendingReplicationOperationsCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, partnerNamespace: {
                serializedName: "properties.partnerNamespace",
                type: {
                    name: "String"
                }
            }, alternateName: {
                serializedName: "properties.alternateName",
                type: {
                    name: "String"
                }
            }, role: {
                serializedName: "properties.role",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Primary", "PrimaryNotReplicating", "Secondary"]
                }
            } })
    }
};
const MigrationConfigProperties = {
    type: {
        name: "Composite",
        className: "MigrationConfigProperties",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, pendingReplicationOperationsCount: {
                serializedName: "properties.pendingReplicationOperationsCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, targetNamespace: {
                serializedName: "properties.targetNamespace",
                type: {
                    name: "String"
                }
            }, postMigrationName: {
                serializedName: "properties.postMigrationName",
                type: {
                    name: "String"
                }
            }, migrationState: {
                serializedName: "properties.migrationState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const NetworkRuleSet = {
    type: {
        name: "Composite",
        className: "NetworkRuleSet",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, trustedServiceAccessEnabled: {
                serializedName: "properties.trustedServiceAccessEnabled",
                type: {
                    name: "Boolean"
                }
            }, defaultAction: {
                serializedName: "properties.defaultAction",
                type: {
                    name: "String"
                }
            }, virtualNetworkRules: {
                serializedName: "properties.virtualNetworkRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NWRuleSetVirtualNetworkRules"
                        }
                    }
                }
            }, ipRules: {
                serializedName: "properties.ipRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NWRuleSetIpRules"
                        }
                    }
                }
            }, publicNetworkAccess: {
                defaultValue: "Enabled",
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            } })
    }
};
const SBAuthorizationRule = {
    type: {
        name: "Composite",
        className: "SBAuthorizationRule",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, rights: {
                serializedName: "properties.rights",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: ["Manage", "Send", "Listen"]
                        }
                    }
                }
            } })
    }
};
const SBQueue = {
    type: {
        name: "Composite",
        className: "SBQueue",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, countDetails: {
                serializedName: "properties.countDetails",
                type: {
                    name: "Composite",
                    className: "MessageCountDetails"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, accessedAt: {
                serializedName: "properties.accessedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, sizeInBytes: {
                serializedName: "properties.sizeInBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, messageCount: {
                serializedName: "properties.messageCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, lockDuration: {
                serializedName: "properties.lockDuration",
                type: {
                    name: "TimeSpan"
                }
            }, maxSizeInMegabytes: {
                serializedName: "properties.maxSizeInMegabytes",
                type: {
                    name: "Number"
                }
            }, maxMessageSizeInKilobytes: {
                serializedName: "properties.maxMessageSizeInKilobytes",
                type: {
                    name: "Number"
                }
            }, requiresDuplicateDetection: {
                serializedName: "properties.requiresDuplicateDetection",
                type: {
                    name: "Boolean"
                }
            }, requiresSession: {
                serializedName: "properties.requiresSession",
                type: {
                    name: "Boolean"
                }
            }, defaultMessageTimeToLive: {
                serializedName: "properties.defaultMessageTimeToLive",
                type: {
                    name: "TimeSpan"
                }
            }, deadLetteringOnMessageExpiration: {
                serializedName: "properties.deadLetteringOnMessageExpiration",
                type: {
                    name: "Boolean"
                }
            }, duplicateDetectionHistoryTimeWindow: {
                serializedName: "properties.duplicateDetectionHistoryTimeWindow",
                type: {
                    name: "TimeSpan"
                }
            }, maxDeliveryCount: {
                serializedName: "properties.maxDeliveryCount",
                type: {
                    name: "Number"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Active",
                        "Disabled",
                        "Restoring",
                        "SendDisabled",
                        "ReceiveDisabled",
                        "Creating",
                        "Deleting",
                        "Renaming",
                        "Unknown"
                    ]
                }
            }, enableBatchedOperations: {
                serializedName: "properties.enableBatchedOperations",
                type: {
                    name: "Boolean"
                }
            }, autoDeleteOnIdle: {
                serializedName: "properties.autoDeleteOnIdle",
                type: {
                    name: "TimeSpan"
                }
            }, enablePartitioning: {
                serializedName: "properties.enablePartitioning",
                type: {
                    name: "Boolean"
                }
            }, enableExpress: {
                serializedName: "properties.enableExpress",
                type: {
                    name: "Boolean"
                }
            }, forwardTo: {
                serializedName: "properties.forwardTo",
                type: {
                    name: "String"
                }
            }, forwardDeadLetteredMessagesTo: {
                serializedName: "properties.forwardDeadLetteredMessagesTo",
                type: {
                    name: "String"
                }
            } })
    }
};
const SBTopic = {
    type: {
        name: "Composite",
        className: "SBTopic",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, sizeInBytes: {
                serializedName: "properties.sizeInBytes",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, accessedAt: {
                serializedName: "properties.accessedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, subscriptionCount: {
                serializedName: "properties.subscriptionCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, countDetails: {
                serializedName: "properties.countDetails",
                type: {
                    name: "Composite",
                    className: "MessageCountDetails"
                }
            }, defaultMessageTimeToLive: {
                serializedName: "properties.defaultMessageTimeToLive",
                type: {
                    name: "TimeSpan"
                }
            }, maxSizeInMegabytes: {
                serializedName: "properties.maxSizeInMegabytes",
                type: {
                    name: "Number"
                }
            }, maxMessageSizeInKilobytes: {
                serializedName: "properties.maxMessageSizeInKilobytes",
                type: {
                    name: "Number"
                }
            }, requiresDuplicateDetection: {
                serializedName: "properties.requiresDuplicateDetection",
                type: {
                    name: "Boolean"
                }
            }, duplicateDetectionHistoryTimeWindow: {
                serializedName: "properties.duplicateDetectionHistoryTimeWindow",
                type: {
                    name: "TimeSpan"
                }
            }, enableBatchedOperations: {
                serializedName: "properties.enableBatchedOperations",
                type: {
                    name: "Boolean"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Active",
                        "Disabled",
                        "Restoring",
                        "SendDisabled",
                        "ReceiveDisabled",
                        "Creating",
                        "Deleting",
                        "Renaming",
                        "Unknown"
                    ]
                }
            }, supportOrdering: {
                serializedName: "properties.supportOrdering",
                type: {
                    name: "Boolean"
                }
            }, autoDeleteOnIdle: {
                serializedName: "properties.autoDeleteOnIdle",
                type: {
                    name: "TimeSpan"
                }
            }, enablePartitioning: {
                serializedName: "properties.enablePartitioning",
                type: {
                    name: "Boolean"
                }
            }, enableExpress: {
                serializedName: "properties.enableExpress",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const Rule = {
    type: {
        name: "Composite",
        className: "Rule",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, action: {
                serializedName: "properties.action",
                type: {
                    name: "Composite",
                    className: "Action"
                }
            }, filterType: {
                serializedName: "properties.filterType",
                type: {
                    name: "Enum",
                    allowedValues: ["SqlFilter", "CorrelationFilter"]
                }
            }, sqlFilter: {
                serializedName: "properties.sqlFilter",
                type: {
                    name: "Composite",
                    className: "SqlFilter"
                }
            }, correlationFilter: {
                serializedName: "properties.correlationFilter",
                type: {
                    name: "Composite",
                    className: "CorrelationFilter"
                }
            } })
    }
};
const SBSubscription = {
    type: {
        name: "Composite",
        className: "SBSubscription",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, messageCount: {
                serializedName: "properties.messageCount",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, accessedAt: {
                serializedName: "properties.accessedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, countDetails: {
                serializedName: "properties.countDetails",
                type: {
                    name: "Composite",
                    className: "MessageCountDetails"
                }
            }, lockDuration: {
                serializedName: "properties.lockDuration",
                type: {
                    name: "TimeSpan"
                }
            }, requiresSession: {
                serializedName: "properties.requiresSession",
                type: {
                    name: "Boolean"
                }
            }, defaultMessageTimeToLive: {
                serializedName: "properties.defaultMessageTimeToLive",
                type: {
                    name: "TimeSpan"
                }
            }, deadLetteringOnFilterEvaluationExceptions: {
                serializedName: "properties.deadLetteringOnFilterEvaluationExceptions",
                type: {
                    name: "Boolean"
                }
            }, deadLetteringOnMessageExpiration: {
                serializedName: "properties.deadLetteringOnMessageExpiration",
                type: {
                    name: "Boolean"
                }
            }, duplicateDetectionHistoryTimeWindow: {
                serializedName: "properties.duplicateDetectionHistoryTimeWindow",
                type: {
                    name: "TimeSpan"
                }
            }, maxDeliveryCount: {
                serializedName: "properties.maxDeliveryCount",
                type: {
                    name: "Number"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Active",
                        "Disabled",
                        "Restoring",
                        "SendDisabled",
                        "ReceiveDisabled",
                        "Creating",
                        "Deleting",
                        "Renaming",
                        "Unknown"
                    ]
                }
            }, enableBatchedOperations: {
                serializedName: "properties.enableBatchedOperations",
                type: {
                    name: "Boolean"
                }
            }, autoDeleteOnIdle: {
                serializedName: "properties.autoDeleteOnIdle",
                type: {
                    name: "TimeSpan"
                }
            }, forwardTo: {
                serializedName: "properties.forwardTo",
                type: {
                    name: "String"
                }
            }, forwardDeadLetteredMessagesTo: {
                serializedName: "properties.forwardDeadLetteredMessagesTo",
                type: {
                    name: "String"
                }
            }, isClientAffine: {
                serializedName: "properties.isClientAffine",
                type: {
                    name: "Boolean"
                }
            }, clientAffineProperties: {
                serializedName: "properties.clientAffineProperties",
                type: {
                    name: "Composite",
                    className: "SBClientAffineProperties"
                }
            } })
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const ResourceNamespacePatch = {
    type: {
        name: "Composite",
        className: "ResourceNamespacePatch",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const SqlRuleAction = {
    type: {
        name: "Composite",
        className: "SqlRuleAction",
        modelProperties: Object.assign({}, Action.type.modelProperties)
    }
};
const SBNamespace = {
    type: {
        name: "Composite",
        className: "SBNamespace",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "SBSku"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, serviceBusEndpoint: {
                serializedName: "properties.serviceBusEndpoint",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, metricId: {
                serializedName: "properties.metricId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, zoneRedundant: {
                serializedName: "properties.zoneRedundant",
                type: {
                    name: "Boolean"
                }
            }, encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "Encryption"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }, disableLocalAuth: {
                serializedName: "properties.disableLocalAuth",
                type: {
                    name: "Boolean"
                }
            }, alternateName: {
                serializedName: "properties.alternateName",
                type: {
                    name: "String"
                }
            } })
    }
};
const SBNamespaceUpdateParameters = {
    type: {
        name: "Composite",
        className: "SBNamespaceUpdateParameters",
        modelProperties: Object.assign(Object.assign({}, ResourceNamespacePatch.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "SBSku"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdAt: {
                serializedName: "properties.createdAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updatedAt: {
                serializedName: "properties.updatedAt",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, serviceBusEndpoint: {
                serializedName: "properties.serviceBusEndpoint",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, metricId: {
                serializedName: "properties.metricId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "Encryption"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }, disableLocalAuth: {
                serializedName: "properties.disableLocalAuth",
                type: {
                    name: "Boolean"
                }
            }, alternateName: {
                serializedName: "properties.alternateName",
                type: {
                    name: "String"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SBNamespaceListResult: SBNamespaceListResult,
    SBSku: SBSku,
    Identity: Identity,
    UserAssignedIdentity: UserAssignedIdentity,
    SystemData: SystemData,
    Encryption: Encryption,
    KeyVaultProperties: KeyVaultProperties,
    UserAssignedIdentityProperties: UserAssignedIdentityProperties,
    PrivateEndpoint: PrivateEndpoint,
    ConnectionState: ConnectionState,
    ProxyResource: ProxyResource,
    Resource: Resource,
    ErrorResponse: ErrorResponse,
    ErrorResponseError: ErrorResponseError,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    PrivateEndpointConnectionListResult: PrivateEndpointConnectionListResult,
    PrivateLinkResourcesListResult: PrivateLinkResourcesListResult,
    PrivateLinkResource: PrivateLinkResource,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    ArmDisasterRecoveryListResult: ArmDisasterRecoveryListResult,
    FailoverProperties: FailoverProperties,
    MigrationConfigListResult: MigrationConfigListResult,
    NWRuleSetVirtualNetworkRules: NWRuleSetVirtualNetworkRules,
    Subnet: Subnet,
    NWRuleSetIpRules: NWRuleSetIpRules,
    NetworkRuleSetListResult: NetworkRuleSetListResult,
    SBAuthorizationRuleListResult: SBAuthorizationRuleListResult,
    AccessKeys: AccessKeys,
    RegenerateAccessKeyParameters: RegenerateAccessKeyParameters,
    SBQueueListResult: SBQueueListResult,
    MessageCountDetails: MessageCountDetails,
    SBTopicListResult: SBTopicListResult,
    RuleListResult: RuleListResult,
    Action: Action,
    SqlFilter: SqlFilter,
    CorrelationFilter: CorrelationFilter,
    SBSubscriptionListResult: SBSubscriptionListResult,
    SBClientAffineProperties: SBClientAffineProperties,
    CheckNameAvailability: CheckNameAvailability,
    CheckNameAvailabilityResult: CheckNameAvailabilityResult,
    PrivateEndpointConnection: PrivateEndpointConnection,
    ArmDisasterRecovery: ArmDisasterRecovery,
    MigrationConfigProperties: MigrationConfigProperties,
    NetworkRuleSet: NetworkRuleSet,
    SBAuthorizationRule: SBAuthorizationRule,
    SBQueue: SBQueue,
    SBTopic: SBTopic,
    Rule: Rule,
    SBSubscription: SBSubscription,
    TrackedResource: TrackedResource,
    ResourceNamespacePatch: ResourceNamespacePatch,
    SqlRuleAction: SqlRuleAction,
    SBNamespace: SBNamespace,
    SBNamespaceUpdateParameters: SBNamespaceUpdateParameters
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-11-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: SBNamespace
};
const namespaceName = {
    parameterPath: "namespaceName",
    mapper: {
        serializedName: "namespaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const namespaceName1 = {
    parameterPath: "namespaceName",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 6
        },
        serializedName: "namespaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: SBNamespaceUpdateParameters
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: NetworkRuleSet
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: SBAuthorizationRule
};
const authorizationRuleName = {
    parameterPath: "authorizationRuleName",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 1
        },
        serializedName: "authorizationRuleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: RegenerateAccessKeyParameters
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: CheckNameAvailability
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: PrivateEndpointConnection
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: ArmDisasterRecovery
};
const alias = {
    parameterPath: "alias",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 1
        },
        serializedName: "alias",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters8 = {
    parameterPath: ["options", "parameters"],
    mapper: FailoverProperties
};
const parameters9 = {
    parameterPath: "parameters",
    mapper: MigrationConfigProperties
};
const configName = {
    parameterPath: "configName",
    mapper: {
        serializedName: "configName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const queueName = {
    parameterPath: "queueName",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "queueName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const skip = {
    parameterPath: ["options", "skip"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 0
        },
        serializedName: "$skip",
        type: {
            name: "Number"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        constraints: {
            InclusiveMaximum: 1000,
            InclusiveMinimum: 1
        },
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const parameters10 = {
    parameterPath: "parameters",
    mapper: SBQueue
};
const topicName = {
    parameterPath: "topicName",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "topicName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters11 = {
    parameterPath: "parameters",
    mapper: SBTopic
};
const subscriptionName = {
    parameterPath: "subscriptionName",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 1
        },
        serializedName: "subscriptionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters12 = {
    parameterPath: "parameters",
    mapper: Rule
};
const ruleName = {
    parameterPath: "ruleName",
    mapper: {
        constraints: {
            MaxLength: 50,
            MinLength: 1
        },
        serializedName: "ruleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters13 = {
    parameterPath: "parameters",
    mapper: SBSubscription
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Namespaces operations. */
class NamespacesImpl {
    /**
     * Initialize a new instance of the class Namespaces class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the available namespaces within the subscription, irrespective of the resource groups.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the available namespaces within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets list of NetworkRuleSet for a Namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listNetworkRuleSets(resourceGroupName, namespaceName, options) {
        const iter = this.listNetworkRuleSetsPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listNetworkRuleSetsPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listNetworkRuleSetsPagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listNetworkRuleSetsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listNetworkRuleSets(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNetworkRuleSetsNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listNetworkRuleSetsPagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listNetworkRuleSetsPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listNetworkRuleSetsPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName, namespaceName, options) {
        const iter = this.listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRules(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRulesNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Gets all the available namespaces within the subscription, irrespective of the resource groups.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$4);
    }
    /**
     * Gets the available namespaces within a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Creates or updates a service namespace. Once created, this namespace's resource manifest is
     * immutable. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name.
     * @param parameters Parameters supplied to create a namespace resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, namespaceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, namespaceName, parameters, options }, createOrUpdateOperationSpec$6);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates or updates a service namespace. Once created, this namespace's resource manifest is
     * immutable. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name.
     * @param parameters Parameters supplied to create a namespace resource.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, namespaceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, namespaceName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the
     * namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, namespaceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, namespaceName, options }, deleteOperationSpec$7);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an existing namespace. This operation also removes all associated resources under the
     * namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, namespaceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, namespaceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a description for the specified namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, getOperationSpec$8);
    }
    /**
     * Updates a service namespace. Once created, this namespace's resource manifest is immutable. This
     * operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param parameters Parameters supplied to update a namespace resource.
     * @param options The options parameters.
     */
    update(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, updateOperationSpec);
    }
    /**
     * Create or update NetworkRuleSet for a Namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param parameters The Namespace IpFilterRule.
     * @param options The options parameters.
     */
    createOrUpdateNetworkRuleSet(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, createOrUpdateNetworkRuleSetOperationSpec);
    }
    /**
     * Gets NetworkRuleSet for a Namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    getNetworkRuleSet(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, getNetworkRuleSetOperationSpec);
    }
    /**
     * Gets list of NetworkRuleSet for a Namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    _listNetworkRuleSets(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listNetworkRuleSetsOperationSpec);
    }
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    _listAuthorizationRules(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listAuthorizationRulesOperationSpec$3);
    }
    /**
     * Creates or updates an authorization rule for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            parameters,
            options
        }, createOrUpdateAuthorizationRuleOperationSpec$2);
    }
    /**
     * Deletes a namespace authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, deleteAuthorizationRuleOperationSpec$2);
    }
    /**
     * Gets an authorization rule for a namespace by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, getAuthorizationRuleOperationSpec$3);
    }
    /**
     * Gets the primary and secondary connection strings for the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, namespaceName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, authorizationRuleName, options }, listKeysOperationSpec$3);
    }
    /**
     * Regenerates the primary or secondary connection strings for the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate the authorization rule.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName, namespaceName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            authorizationRuleName,
            parameters,
            options
        }, regenerateKeysOperationSpec$2);
    }
    /**
     * Check the give namespace name availability.
     * @param parameters Parameters to check availability of the given namespace name
     * @param options The options parameters.
     */
    checkNameAvailability(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, checkNameAvailabilityOperationSpec$1);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$4);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListNetworkRuleSetsNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the ListNetworkRuleSets method.
     * @param options The options parameters.
     */
    _listNetworkRuleSetsNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listNetworkRuleSetsNextOperationSpec);
    }
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    _listAuthorizationRulesNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listAuthorizationRulesNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/namespaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBNamespaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBNamespaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const createOrUpdateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SBNamespace
        },
        201: {
            bodyMapper: SBNamespace
        },
        202: {
            bodyMapper: SBNamespace
        },
        204: {
            bodyMapper: SBNamespace
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBNamespace
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: SBNamespace
        },
        201: {
            bodyMapper: SBNamespace
        },
        202: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const createOrUpdateNetworkRuleSetOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/networkRuleSets/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: NetworkRuleSet
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const getNetworkRuleSetOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/networkRuleSets/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkRuleSet
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listNetworkRuleSetsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/networkRuleSets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkRuleSetListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listAuthorizationRulesOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const createOrUpdateAuthorizationRuleOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const deleteAuthorizationRuleOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const getAuthorizationRuleOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listKeysOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const regenerateKeysOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const checkNameAvailabilityOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.ServiceBus/CheckNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBNamespaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBNamespaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listNetworkRuleSetsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkRuleSetListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listAuthorizationRulesNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the available PrivateEndpointConnections within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    list(resourceGroupName, namespaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the available PrivateEndpointConnections within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    _list(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listOperationSpec$3);
    }
    /**
     * Creates or updates PrivateEndpointConnections of service namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param parameters Parameters supplied to update Status of PrivateEndPoint Connection to namespace
     *                   resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, privateEndpointConnectionName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            privateEndpointConnectionName,
            parameters,
            options
        }, createOrUpdateOperationSpec$5);
    }
    /**
     * Deletes an existing Private Endpoint Connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, namespaceName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                namespaceName,
                privateEndpointConnectionName,
                options
            }, deleteOperationSpec$6);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an existing Private Endpoint Connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, namespaceName, privateEndpointConnectionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, namespaceName, privateEndpointConnectionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a description for the specified Private Endpoint Connection.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param privateEndpointConnectionName The PrivateEndpointConnection name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            privateEndpointConnectionName,
            options
        }, getOperationSpec$7);
    }
    /**
     * ListNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const createOrUpdateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        201: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnection
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing PrivateLinkResources operations. */
class PrivateLinkResourcesImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets lists of resources that supports Privatelinks.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, getOperationSpec$6);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourcesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available ServiceBus REST API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available ServiceBus REST API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.ServiceBus/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DisasterRecoveryConfigs operations. */
class DisasterRecoveryConfigsImpl {
    /**
     * Initialize a new instance of the class DisasterRecoveryConfigs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all Alias(Disaster Recovery configurations)
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    list(resourceGroupName, namespaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName, namespaceName, alias, options) {
        const iter = this.listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, alias, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, alias, options, settings);
            }
        };
    }
    listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, alias, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRules(resourceGroupName, namespaceName, alias, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRulesNext(resourceGroupName, namespaceName, alias, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, alias, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, alias, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets all Alias(Disaster Recovery configurations)
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    _list(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listOperationSpec$1);
    }
    /**
     * Creates or updates a new Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param parameters Parameters required to create an Alias(Disaster Recovery configuration)
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, alias, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, parameters, options }, createOrUpdateOperationSpec$4);
    }
    /**
     * Deletes an Alias(Disaster Recovery configuration)
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, alias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, options }, deleteOperationSpec$5);
    }
    /**
     * Retrieves Alias(Disaster Recovery configuration) for primary or secondary namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, alias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, options }, getOperationSpec$5);
    }
    /**
     * This operation disables the Disaster Recovery and stops replicating changes from primary to
     * secondary namespaces
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    breakPairing(resourceGroupName, namespaceName, alias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, options }, breakPairingOperationSpec);
    }
    /**
     * Invokes GEO DR failover and reconfigure the alias to point to the secondary namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    failOver(resourceGroupName, namespaceName, alias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, options }, failOverOperationSpec);
    }
    /**
     * Gets the authorization rules for a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param options The options parameters.
     */
    _listAuthorizationRules(resourceGroupName, namespaceName, alias, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, options }, listAuthorizationRulesOperationSpec$2);
    }
    /**
     * Gets an authorization rule for a namespace by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName, namespaceName, alias, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            alias,
            authorizationRuleName,
            options
        }, getAuthorizationRuleOperationSpec$2);
    }
    /**
     * Gets the primary and secondary connection strings for the namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, namespaceName, alias, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            alias,
            authorizationRuleName,
            options
        }, listKeysOperationSpec$2);
    }
    /**
     * Check the give namespace name availability.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param parameters Parameters to check availability of the given namespace name
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName, namespaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, parameters, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listNextOperationSpec$1);
    }
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param alias The Disaster Recovery configuration name
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    _listAuthorizationRulesNext(resourceGroupName, namespaceName, alias, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, alias, nextLink, options }, listAuthorizationRulesNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ArmDisasterRecoveryListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ArmDisasterRecovery
        },
        201: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        alias
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ArmDisasterRecovery
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const breakPairingOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/breakPairing",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const failOverOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/failover",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        alias
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const listAuthorizationRulesOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/authorizationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const getAuthorizationRuleOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/authorizationRules/{authorizationRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listKeysOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/{alias}/authorizationRules/{authorizationRuleName}/listKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/disasterRecoveryConfigs/CheckNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: CheckNameAvailabilityResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ArmDisasterRecoveryListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listAuthorizationRulesNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink,
        alias
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing MigrationConfigs operations. */
class MigrationConfigsImpl {
    /**
     * Initialize a new instance of the class MigrationConfigs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all migrationConfigurations
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    list(resourceGroupName, namespaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all migrationConfigurations
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    _list(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listOperationSpec);
    }
    /**
     * Creates Migration configuration and starts migration of entities from Standard to Premium namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param parameters Parameters required to create Migration Configuration
     * @param options The options parameters.
     */
    beginCreateAndStartMigration(resourceGroupName, namespaceName, configName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, namespaceName, configName, parameters, options }, createAndStartMigrationOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Creates Migration configuration and starts migration of entities from Standard to Premium namespace
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param parameters Parameters required to create Migration Configuration
     * @param options The options parameters.
     */
    beginCreateAndStartMigrationAndWait(resourceGroupName, namespaceName, configName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateAndStartMigration(resourceGroupName, namespaceName, configName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a MigrationConfiguration
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, configName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, configName, options }, deleteOperationSpec$4);
    }
    /**
     * Retrieves Migration Config
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, configName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, configName, options }, getOperationSpec$4);
    }
    /**
     * This operation Completes Migration of entities by pointing the connection strings to Premium
     * namespace and any entities created after the operation will be under Premium Namespace.
     * CompleteMigration operation will fail when entity migration is in-progress.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    completeMigration(resourceGroupName, namespaceName, configName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, configName, options }, completeMigrationOperationSpec);
    }
    /**
     * This operation reverts Migration
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param configName The configuration name. Should always be "$default".
     * @param options The options parameters.
     */
    revert(resourceGroupName, namespaceName, configName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, configName, options }, revertOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationConfigListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createAndStartMigrationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MigrationConfigProperties
        },
        201: {
            bodyMapper: MigrationConfigProperties
        },
        202: {
            bodyMapper: MigrationConfigProperties
        },
        204: {
            bodyMapper: MigrationConfigProperties
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        configName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        configName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationConfigProperties
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        configName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const completeMigrationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}/upgrade",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        configName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const revertOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/migrationConfigurations/{configName}/revert",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        configName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationConfigListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Queues operations. */
class QueuesImpl {
    /**
     * Initialize a new instance of the class Queues class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all authorization rules for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName, namespaceName, queueName, options) {
        const iter = this.listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, queueName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, queueName, options, settings);
            }
        };
    }
    listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, queueName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRules(resourceGroupName, namespaceName, queueName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRulesNext(resourceGroupName, namespaceName, queueName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, queueName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, queueName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the queues within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listByNamespace(resourceGroupName, namespaceName, options) {
        const iter = this.listByNamespacePagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByNamespacePagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listByNamespacePagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByNamespacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByNamespace(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByNamespaceNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByNamespacePagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByNamespacePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByNamespacePagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets all authorization rules for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    _listAuthorizationRules(resourceGroupName, namespaceName, queueName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, queueName, options }, listAuthorizationRulesOperationSpec$1);
    }
    /**
     * Creates an authorization rule for a queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName, namespaceName, queueName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            queueName,
            authorizationRuleName,
            parameters,
            options
        }, createOrUpdateAuthorizationRuleOperationSpec$1);
    }
    /**
     * Deletes a queue authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName, namespaceName, queueName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            queueName,
            authorizationRuleName,
            options
        }, deleteAuthorizationRuleOperationSpec$1);
    }
    /**
     * Gets an authorization rule for a queue by rule name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName, namespaceName, queueName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            queueName,
            authorizationRuleName,
            options
        }, getAuthorizationRuleOperationSpec$1);
    }
    /**
     * Primary and secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, namespaceName, queueName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            queueName,
            authorizationRuleName,
            options
        }, listKeysOperationSpec$1);
    }
    /**
     * Regenerates the primary or secondary connection strings to the queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate the authorization rule.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName, namespaceName, queueName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            queueName,
            authorizationRuleName,
            parameters,
            options
        }, regenerateKeysOperationSpec$1);
    }
    /**
     * Gets the queues within a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    _listByNamespace(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listByNamespaceOperationSpec$1);
    }
    /**
     * Creates or updates a Service Bus queue. This operation is idempotent.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param parameters Parameters supplied to create or update a queue resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, queueName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, queueName, parameters, options }, createOrUpdateOperationSpec$3);
    }
    /**
     * Deletes a queue from the specified namespace in a resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, queueName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, queueName, options }, deleteOperationSpec$3);
    }
    /**
     * Returns a description for the specified queue.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, queueName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, queueName, options }, getOperationSpec$3);
    }
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param queueName The queue name.
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    _listAuthorizationRulesNext(resourceGroupName, namespaceName, queueName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, queueName, nextLink, options }, listAuthorizationRulesNextOperationSpec$1);
    }
    /**
     * ListByNamespaceNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the ListByNamespace method.
     * @param options The options parameters.
     */
    _listByNamespaceNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listByNamespaceNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listAuthorizationRulesOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        queueName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateAuthorizationRuleOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        queueName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteAuthorizationRuleOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        queueName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getAuthorizationRuleOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        queueName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listKeysOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}/ListKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        queueName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const regenerateKeysOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}/authorizationRules/{authorizationRuleName}/regenerateKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        queueName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listByNamespaceOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBQueueListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skip, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SBQueue
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        queueName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        queueName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/queues/{queueName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBQueue
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        queueName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listAuthorizationRulesNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink,
        queueName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listByNamespaceNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBQueueListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Topics operations. */
class TopicsImpl {
    /**
     * Initialize a new instance of the class Topics class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets authorization rules for a topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    listAuthorizationRules(resourceGroupName, namespaceName, topicName, options) {
        const iter = this.listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, topicName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, topicName, options, settings);
            }
        };
    }
    listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, topicName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRules(resourceGroupName, namespaceName, topicName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAuthorizationRulesNext(resourceGroupName, namespaceName, topicName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAuthorizationRulesPagingAll(resourceGroupName, namespaceName, topicName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAuthorizationRulesPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAuthorizationRulesPagingPage(resourceGroupName, namespaceName, topicName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all the topics in a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    listByNamespace(resourceGroupName, namespaceName, options) {
        const iter = this.listByNamespacePagingAll(resourceGroupName, namespaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByNamespacePagingPage(resourceGroupName, namespaceName, options, settings);
            }
        };
    }
    listByNamespacePagingPage(resourceGroupName, namespaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByNamespacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByNamespace(resourceGroupName, namespaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByNamespaceNext(resourceGroupName, namespaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByNamespacePagingAll(resourceGroupName, namespaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByNamespacePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByNamespacePagingPage(resourceGroupName, namespaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets authorization rules for a topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    _listAuthorizationRules(resourceGroupName, namespaceName, topicName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, topicName, options }, listAuthorizationRulesOperationSpec);
    }
    /**
     * Creates an authorization rule for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters The shared access authorization rule.
     * @param options The options parameters.
     */
    createOrUpdateAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            authorizationRuleName,
            parameters,
            options
        }, createOrUpdateAuthorizationRuleOperationSpec);
    }
    /**
     * Returns the specified authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    getAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            authorizationRuleName,
            options
        }, getAuthorizationRuleOperationSpec);
    }
    /**
     * Deletes a topic authorization rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    deleteAuthorizationRule(resourceGroupName, namespaceName, topicName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            authorizationRuleName,
            options
        }, deleteAuthorizationRuleOperationSpec);
    }
    /**
     * Gets the primary and secondary connection strings for the topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param authorizationRuleName The authorization rule name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName, namespaceName, topicName, authorizationRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            authorizationRuleName,
            options
        }, listKeysOperationSpec);
    }
    /**
     * Regenerates primary or secondary connection strings for the topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param authorizationRuleName The authorization rule name.
     * @param parameters Parameters supplied to regenerate the authorization rule.
     * @param options The options parameters.
     */
    regenerateKeys(resourceGroupName, namespaceName, topicName, authorizationRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            authorizationRuleName,
            parameters,
            options
        }, regenerateKeysOperationSpec);
    }
    /**
     * Gets all the topics in a namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param options The options parameters.
     */
    _listByNamespace(resourceGroupName, namespaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, options }, listByNamespaceOperationSpec);
    }
    /**
     * Creates a topic in the specified namespace.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param parameters Parameters supplied to create a topic resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, topicName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, topicName, parameters, options }, createOrUpdateOperationSpec$2);
    }
    /**
     * Deletes a topic from the specified namespace and resource group.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, topicName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, topicName, options }, deleteOperationSpec$2);
    }
    /**
     * Returns a description for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, topicName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, topicName, options }, getOperationSpec$2);
    }
    /**
     * ListAuthorizationRulesNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param nextLink The nextLink from the previous successful call to the ListAuthorizationRules method.
     * @param options The options parameters.
     */
    _listAuthorizationRulesNext(resourceGroupName, namespaceName, topicName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, topicName, nextLink, options }, listAuthorizationRulesNextOperationSpec);
    }
    /**
     * ListByNamespaceNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param nextLink The nextLink from the previous successful call to the ListByNamespace method.
     * @param options The options parameters.
     */
    _listByNamespaceNext(resourceGroupName, namespaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, nextLink, options }, listByNamespaceNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listAuthorizationRulesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        topicName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const getAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        topicName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const deleteAuthorizationRuleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        topicName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}/ListKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        topicName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const regenerateKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/authorizationRules/{authorizationRuleName}/regenerateKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: AccessKeys
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        authorizationRuleName,
        topicName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listByNamespaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBTopicListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skip, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SBTopic
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters11,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBTopic
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listAuthorizationRulesNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBAuthorizationRuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink,
        topicName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByNamespaceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBTopicListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Rules operations. */
class RulesImpl {
    /**
     * Initialize a new instance of the class Rules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the rules within given topic-subscription
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param options The options parameters.
     */
    listBySubscriptions(resourceGroupName, namespaceName, topicName, subscriptionName, options) {
        const iter = this.listBySubscriptionsPagingAll(resourceGroupName, namespaceName, topicName, subscriptionName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionsPagingPage(resourceGroupName, namespaceName, topicName, subscriptionName, options, settings);
            }
        };
    }
    listBySubscriptionsPagingPage(resourceGroupName, namespaceName, topicName, subscriptionName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscriptions(resourceGroupName, namespaceName, topicName, subscriptionName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionsNext(resourceGroupName, namespaceName, topicName, subscriptionName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionsPagingAll(resourceGroupName, namespaceName, topicName, subscriptionName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionsPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listBySubscriptionsPagingPage(resourceGroupName, namespaceName, topicName, subscriptionName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all the rules within given topic-subscription
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param options The options parameters.
     */
    _listBySubscriptions(resourceGroupName, namespaceName, topicName, subscriptionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            subscriptionName,
            options
        }, listBySubscriptionsOperationSpec);
    }
    /**
     * Creates a new rule and updates an existing rule
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param ruleName The rule name.
     * @param parameters Parameters supplied to create a rule.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            subscriptionName,
            ruleName,
            parameters,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Deletes an existing rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param ruleName The rule name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            subscriptionName,
            ruleName,
            options
        }, deleteOperationSpec$1);
    }
    /**
     * Retrieves the description for the specified rule.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param ruleName The rule name.
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, topicName, subscriptionName, ruleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            subscriptionName,
            ruleName,
            options
        }, getOperationSpec$1);
    }
    /**
     * ListBySubscriptionsNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param nextLink The nextLink from the previous successful call to the ListBySubscriptions method.
     * @param options The options parameters.
     */
    _listBySubscriptionsNext(resourceGroupName, namespaceName, topicName, subscriptionName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            subscriptionName,
            nextLink,
            options
        }, listBySubscriptionsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listBySubscriptionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skip, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName,
        subscriptionName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Rule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters12,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName,
        subscriptionName,
        ruleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName,
        subscriptionName,
        ruleName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}/rules/{ruleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Rule
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName,
        subscriptionName,
        ruleName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listBySubscriptionsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RuleListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink,
        topicName,
        subscriptionName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Subscriptions operations. */
class SubscriptionsImpl {
    /**
     * Initialize a new instance of the class Subscriptions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the subscriptions under a specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    listByTopic(resourceGroupName, namespaceName, topicName, options) {
        const iter = this.listByTopicPagingAll(resourceGroupName, namespaceName, topicName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByTopicPagingPage(resourceGroupName, namespaceName, topicName, options, settings);
            }
        };
    }
    listByTopicPagingPage(resourceGroupName, namespaceName, topicName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByTopicPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByTopic(resourceGroupName, namespaceName, topicName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByTopicNext(resourceGroupName, namespaceName, topicName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByTopicPagingAll(resourceGroupName, namespaceName, topicName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByTopicPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByTopicPagingPage(resourceGroupName, namespaceName, topicName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all the subscriptions under a specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param options The options parameters.
     */
    _listByTopic(resourceGroupName, namespaceName, topicName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, topicName, options }, listByTopicOperationSpec);
    }
    /**
     * Creates a topic subscription.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param parameters Parameters supplied to create a subscription resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, namespaceName, topicName, subscriptionName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            subscriptionName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes a subscription from the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, namespaceName, topicName, subscriptionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            subscriptionName,
            options
        }, deleteOperationSpec);
    }
    /**
     * Returns a subscription description for the specified topic.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param subscriptionName The subscription name.
     * @param options The options parameters.
     */
    get(resourceGroupName, namespaceName, topicName, subscriptionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            namespaceName,
            topicName,
            subscriptionName,
            options
        }, getOperationSpec);
    }
    /**
     * ListByTopicNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param namespaceName The namespace name
     * @param topicName The topic name.
     * @param nextLink The nextLink from the previous successful call to the ListByTopic method.
     * @param options The options parameters.
     */
    _listByTopicNext(resourceGroupName, namespaceName, topicName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, namespaceName, topicName, nextLink, options }, listByTopicNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByTopicOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBSubscriptionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, skip, top],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName
    ],
    headerParameters: [accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SBSubscription
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters13,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName,
        subscriptionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName,
        subscriptionName
    ],
    headerParameters: [accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceBus/namespaces/{namespaceName}/topics/{topicName}/subscriptions/{subscriptionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBSubscription
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        topicName,
        subscriptionName
    ],
    headerParameters: [accept],
    serializer
};
const listByTopicNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SBSubscriptionListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        namespaceName1,
        nextLink,
        topicName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class ServiceBusManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the ServiceBusManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure
     *                       subscription. The subscription ID forms part of the URI for every service call.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-servicebus/6.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2021-11-01";
        this.namespaces = new NamespacesImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.operations = new OperationsImpl(this);
        this.disasterRecoveryConfigs = new DisasterRecoveryConfigsImpl(this);
        this.migrationConfigs = new MigrationConfigsImpl(this);
        this.queues = new QueuesImpl(this);
        this.topics = new TopicsImpl(this);
        this.rules = new RulesImpl(this);
        this.subscriptions = new SubscriptionsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.ServiceBusManagementClient = ServiceBusManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
