{"version":3,"file":"updateSyncTokenSample.js","sourceRoot":"","sources":["../../samples-dev/updateSyncTokenSample.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @summary The AppConfiguration service supports EventGrid-based setting change notifications.\n * This sample shows how to process these notifications. Due to the distributed nature of the\n * AppConfiguration service, the synchronization token needs to be registered with the client\n * to get the most up-to-date value of the setting. The ConfigurationClient.UpdateSyncToken\n * is used to register the synchronization token.\n * @azsdk-weight 70\n */\n\nimport { AppConfigurationClient } from \"@azure/app-configuration\";\nimport { isSystemEvent, EventGridEvent, EventGridDeserializer } from \"@azure/eventgrid\";\nimport { appConfigTestEvent } from \"./testData\";\n\n// Load the .env file if it exists\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\n// Create an Event Grid Consumer which will decode a hard coded test object into an EventGridEvent object.\nconst consumer = new EventGridDeserializer();\n\n/**\n * For a full implementation, another service would act as a receiver for events {@link https://docs.microsoft.com/en-us/azure/event-grid/event-handlers}.\n * However, to avoid additional complexity for this sample, a hardcoded test event is being used. For full EventGrid samples, see\n * {@link https://github.com/Azure/azure-sdk-for-js/tree/ebbfcff02ca15b1792dc6c45d8ba10913891c530/sdk/eventgrid/eventgrid/samples-dev}.\n */\nasync function processEvent(): Promise<EventGridEvent<unknown>[]> {\n  return consumer.deserializeEventGridEvents(appConfigTestEvent);\n}\n\nexport async function main() {\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"<connection string>\";\n  const client = new AppConfigurationClient(connectionString);\n\n  const greetingKey = \"Samples:Greeting\";\n\n  await cleanupSampleValues([greetingKey], client);\n\n  // creating a new setting\n  console.log(`Adding in new setting ${greetingKey}`);\n  await client.addConfigurationSetting({ key: greetingKey, value: \"Hello!\" });\n\n  // Simulate receiving events from EventGrid\n  const events = await processEvent();\n\n  // Iterate through events and log updated key-value pairs.\n  events.forEach(async (eventData) => {\n    if (isSystemEvent(\"Microsoft.AppConfiguration.KeyValueModified\", eventData)) {\n      client.updateSyncToken(eventData.data.syncToken);\n      const newSetting = await client.getConfigurationSetting({\n        key: eventData.data.key,\n        label: eventData.data.label,\n      });\n      console.log(`Setting was updated. Key: ${newSetting.key} value ${newSetting.value}`);\n    }\n  });\n\n  // Run for 2 seconds, allowing events to be processed.\n  await new Promise((resolve) => {\n    setTimeout(resolve, 1000 * 2);\n  });\n\n  await cleanupSampleValues([greetingKey], client);\n}\n\nasync function cleanupSampleValues(keys: string[], client: AppConfigurationClient) {\n  const settingsIterator = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\"),\n  });\n\n  for await (const setting of settingsIterator) {\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"Failed to run sample:\", err);\n  process.exit(1);\n});\n"]}