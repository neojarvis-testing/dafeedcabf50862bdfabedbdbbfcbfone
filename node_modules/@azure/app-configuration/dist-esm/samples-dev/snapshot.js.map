{"version":3,"file":"snapshot.js","sourceRoot":"","sources":["../../samples-dev/snapshot.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @summary Demonstrates the CRUD operations on the snapshot.\n * @azsdk-weight 100\n */\nimport { AppConfigurationClient } from \"@azure/app-configuration\";\n\n// Load the .env file if it exists\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n\nexport async function main() {\n  console.log(`Running snapshot sample`);\n\n  // Set the following environment variable or edit the value on the following line.\n  const connectionString = process.env[\"APPCONFIG_CONNECTION_STRING\"] || \"<connection string>\";\n  const client = new AppConfigurationClient(connectionString);\n\n  const key2 = \"Samples:key2\";\n  const key1 = \"Samples:key1\";\n\n  // creating a new setting\n  console.log(`Adding in new setting ${key1}`);\n  await client.addConfigurationSetting({ key: key1, value: \"value1\" });\n\n  // creating a new setting\n  console.log(`Adding in new setting ${key2}`);\n  await client.addConfigurationSetting({ key: key2, value: \"value2\" });\n\n  // creating a new snapshot\n  const newSnapshot = await client.beginCreateSnapshotAndWait({\n    name: \"mySnapshot\",\n    filters: [\n      {\n        keyFilter: key1,\n      },\n    ],\n  });\n  console.log(`New snapshot object added ${newSnapshot}`);\n\n  // getting the configuration settting of the snapshot\n  const snapshotConfigurationSettings = await client.listConfigurationSettingsForSnapshot(\n    newSnapshot.name,\n  );\n\n  for await (const setting of snapshotConfigurationSettings) {\n    console.log(`  Found key: ${setting.key}, label: ${setting.label}`);\n  }\n\n  await client.getSnapshot(newSnapshot.name);\n\n  // creating a new snapshot\n  const newSnapshot2 = await client.beginCreateSnapshotAndWait({\n    name: \"mySnapshot2\",\n    filters: [\n      {\n        keyFilter: key2,\n      },\n    ],\n  });\n  console.log(`New snapshot object added ${newSnapshot2}`);\n\n  // list all the snapshots\n  console.log(`List all the snapshots`);\n  const snapshotsList = await client.listSnapshots();\n  for await (const snapshot of snapshotsList) {\n    console.log(`  Found snapshot: ${snapshot.name}`);\n  }\n  // archive snapshot\n  await client.archiveSnapshot(newSnapshot.name);\n  console.log(`${newSnapshot.name} has been archived with the status ${newSnapshot.status}`);\n\n  await cleanupSampleValues([key1], client);\n}\n\nasync function cleanupSampleValues(keys: string[], client: AppConfigurationClient) {\n  const settingsIterator = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\"),\n  });\n\n  for await (const setting of settingsIterator) {\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"Failed to run sample:\", err);\n  process.exit(1);\n});\n"]}