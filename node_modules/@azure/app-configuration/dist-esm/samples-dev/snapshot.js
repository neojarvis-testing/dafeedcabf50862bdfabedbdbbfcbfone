// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { __asyncValues } from "tslib";
/**
 * @summary Demonstrates the CRUD operations on the snapshot.
 * @azsdk-weight 100
 */
import { AppConfigurationClient } from "@azure/app-configuration";
// Load the .env file if it exists
import * as dotenv from "dotenv";
dotenv.config();
export async function main() {
    var _a, e_1, _b, _c, _d, e_2, _e, _f;
    console.log(`Running snapshot sample`);
    // Set the following environment variable or edit the value on the following line.
    const connectionString = process.env["APPCONFIG_CONNECTION_STRING"] || "<connection string>";
    const client = new AppConfigurationClient(connectionString);
    const key2 = "Samples:key2";
    const key1 = "Samples:key1";
    // creating a new setting
    console.log(`Adding in new setting ${key1}`);
    await client.addConfigurationSetting({ key: key1, value: "value1" });
    // creating a new setting
    console.log(`Adding in new setting ${key2}`);
    await client.addConfigurationSetting({ key: key2, value: "value2" });
    // creating a new snapshot
    const newSnapshot = await client.beginCreateSnapshotAndWait({
        name: "mySnapshot",
        filters: [
            {
                keyFilter: key1,
            },
        ],
    });
    console.log(`New snapshot object added ${newSnapshot}`);
    // getting the configuration settting of the snapshot
    const snapshotConfigurationSettings = await client.listConfigurationSettingsForSnapshot(newSnapshot.name);
    try {
        for (var _g = true, snapshotConfigurationSettings_1 = __asyncValues(snapshotConfigurationSettings), snapshotConfigurationSettings_1_1; snapshotConfigurationSettings_1_1 = await snapshotConfigurationSettings_1.next(), _a = snapshotConfigurationSettings_1_1.done, !_a; _g = true) {
            _c = snapshotConfigurationSettings_1_1.value;
            _g = false;
            const setting = _c;
            console.log(`  Found key: ${setting.key}, label: ${setting.label}`);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (!_g && !_a && (_b = snapshotConfigurationSettings_1.return)) await _b.call(snapshotConfigurationSettings_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    await client.getSnapshot(newSnapshot.name);
    // creating a new snapshot
    const newSnapshot2 = await client.beginCreateSnapshotAndWait({
        name: "mySnapshot2",
        filters: [
            {
                keyFilter: key2,
            },
        ],
    });
    console.log(`New snapshot object added ${newSnapshot2}`);
    // list all the snapshots
    console.log(`List all the snapshots`);
    const snapshotsList = await client.listSnapshots();
    try {
        for (var _h = true, snapshotsList_1 = __asyncValues(snapshotsList), snapshotsList_1_1; snapshotsList_1_1 = await snapshotsList_1.next(), _d = snapshotsList_1_1.done, !_d; _h = true) {
            _f = snapshotsList_1_1.value;
            _h = false;
            const snapshot = _f;
            console.log(`  Found snapshot: ${snapshot.name}`);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (!_h && !_d && (_e = snapshotsList_1.return)) await _e.call(snapshotsList_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    // archive snapshot
    await client.archiveSnapshot(newSnapshot.name);
    console.log(`${newSnapshot.name} has been archived with the status ${newSnapshot.status}`);
    await cleanupSampleValues([key1], client);
}
async function cleanupSampleValues(keys, client) {
    var _a, e_3, _b, _c;
    const settingsIterator = client.listConfigurationSettings({
        keyFilter: keys.join(","),
    });
    try {
        for (var _d = true, settingsIterator_1 = __asyncValues(settingsIterator), settingsIterator_1_1; settingsIterator_1_1 = await settingsIterator_1.next(), _a = settingsIterator_1_1.done, !_a; _d = true) {
            _c = settingsIterator_1_1.value;
            _d = false;
            const setting = _c;
            await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (!_d && !_a && (_b = settingsIterator_1.return)) await _b.call(settingsIterator_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
}
main().catch((err) => {
    console.error("Failed to run sample:", err);
    process.exit(1);
});
//# sourceMappingURL=snapshot.js.map