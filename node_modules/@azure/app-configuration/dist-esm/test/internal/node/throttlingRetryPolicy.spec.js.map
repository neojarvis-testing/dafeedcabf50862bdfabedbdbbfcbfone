{"version":3,"file":"throttlingRetryPolicy.spec.js","sourceRoot":"","sources":["../../../../test/internal/node/throttlingRetryPolicy.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortController } from \"@azure/abort-controller\";\nimport { AppConfigurationClient } from \"../../../src\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport chai from \"chai\";\nimport { randomUUID } from \"@azure/core-util\";\nimport nock from \"nock\";\n\ndescribe(\"Should not retry forever\", () => {\n  let client: AppConfigurationClient;\n  const connectionString = \"Endpoint=https://myappconfig.azconfig.io;Id=key:ai/u/fake;Secret=abcd=\";\n\n  function mockErrorResponse(retryAfterMs: string, persistence: boolean = true): void {\n    if (!nock.isActive()) {\n      nock.activate();\n    }\n    nock(\"https://myappconfig.azconfig.io:443\").persist(persistence).put(/.*/g).reply(\n      429,\n      {\n        type: \"https://azconfig.io/errors/too-many-requests\",\n        title: \"Resource utilization has surpassed the assigned quota\",\n        policy: \"Total Requests\",\n        status: 429,\n      },\n      [\"retry-after-ms\", retryAfterMs],\n    );\n  }\n\n  beforeEach(() => {\n    client = new AppConfigurationClient(connectionString, { retryOptions: { maxRetries: 3 } });\n  });\n\n  afterEach(async function () {\n    nock.restore();\n    nock.cleanAll();\n    nock.enableNetConnect();\n  });\n\n  it(\"simulate the service throttling - honors the abort signal passed\", async () => {\n    mockErrorResponse(\"123456\");\n    const key = randomUUID();\n    const numberOfSettings = 200;\n    const promises = [];\n    let errorWasThrown = false;\n    try {\n      for (let index = 0; index < numberOfSettings; index++) {\n        promises.push(\n          client.addConfigurationSetting(\n            {\n              key: key + \"-\" + index,\n              value: \"added\",\n            },\n            {\n              abortSignal: AbortController.timeout(1000),\n            },\n          ),\n        );\n      }\n      await Promise.all(promises);\n    } catch (error: any) {\n      errorWasThrown = true;\n      chai.assert.equal((error as any).name, \"AbortError\", \"Unexpected error thrown\");\n    }\n    chai.assert.equal(errorWasThrown, true, \"Error was not thrown\");\n  });\n\n  it(\"should not retry forever without abortSignal\", async () => {\n    const responseCount = 10;\n    for (let index = 0; index < responseCount; index++) {\n      mockErrorResponse(\"100\", false);\n    }\n    const key = randomUUID();\n    let errorWasThrown = false;\n\n    chai.assert.equal(\n      nock.pendingMocks().length,\n      responseCount,\n      \"unexpected pending mocks before making the request\",\n    );\n    try {\n      await client.addConfigurationSetting({\n        key: key,\n        value: \"added\",\n      });\n    } catch (error: any) {\n      errorWasThrown = true;\n      const err = error as RestError;\n      chai.assert.equal(err.name, \"RestError\", \"Unexpected error thrown\");\n      chai.assert.equal(JSON.parse(err.message).status, 429, \"Unexpected error thrown\");\n      chai.assert.equal(\n        JSON.parse(err.message).title,\n        \"Resource utilization has surpassed the assigned quota\",\n        \"Unexpected error thrown\",\n      );\n    }\n    chai.assert.equal(errorWasThrown, true, \"Error was not thrown\");\n    chai.assert.equal(\n      nock.pendingMocks().length,\n      responseCount - 1 - 3, // one attempt + three retries\n      \"unexpected pending mocks after the test was run\",\n    );\n  });\n});\n"]}