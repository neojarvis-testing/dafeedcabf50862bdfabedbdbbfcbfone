{"version":3,"file":"package.spec.js","sourceRoot":"","sources":["../../../../test/internal/node/package.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAE7E,OAAO,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAC;AAEjE,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,2FAA2F;IAC3F,yBAAyB;IACzB,EAAE,CAAC,+CAA+C,EAAE,KAAK;QACvD,IAAI,SAA6B,CAAC;QAClC,MAAM,MAAM,GAAG,IAAI,sBAAsB,CACvC,gCAAgC,EAChC;YACE,QAAQ,EAAE,CAAC,OAAO,EAAE,EAAE;gBACpB,OAAO,OAAO,CAAC,OAAO,CAAC;oBACrB,KAAK,EAAE,WAAW;oBAClB,kBAAkB,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;iBAC/D,CAAC,CAAC;YACL,CAAC;SACiB,EACpB;YACE,UAAU,EAAE;gBACV,WAAW,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;;oBAC7B,SAAS,GAAG,MAAA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,mCAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBACvF,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;gBACjC,CAAC;aACF;SACF,CACF,CAAC;QAEF,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC;QAAC,WAAM,CAAC;YACP,sEAAsE;QACxE,CAAC;QACD,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,yCAAyC,CAAC,CAAC;QACpE,MAAM,CAAC,OAAO,CAAC,SAAU,EAAE,8BAA8B,cAAc,EAAE,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Context } from \"mocha\";\nimport { assert } from \"chai\";\nimport { AppConfigurationClient } from \"../../../src/appConfigurationClient\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { packageVersion } from \"../../../src/internal/constants\";\n\ndescribe(\"packagejson related tests\", () => {\n  // if this test is failing you need to update the contant `packageVersion` referenced above\n  // in the generated code.\n  it(\"user agent string matches the package version\", async function (this: Context) {\n    let userAgent: string | undefined;\n    const client = new AppConfigurationClient(\n      \"https://myresource.azconfig.io\",\n      {\n        getToken: (_scopes) => {\n          return Promise.resolve({\n            token: \"fakevalue\",\n            expiresOnTimestamp: new Date().getTime() + 24 * 60 * 60 * 1000,\n          });\n        },\n      } as TokenCredential,\n      {\n        httpClient: {\n          sendRequest: async (request) => {\n            userAgent = request.headers.get(\"user-agent\") ?? request.headers.get(\"x-ms-useragent\");\n            throw new Error(\"only a test\");\n          },\n        },\n      },\n    );\n\n    try {\n      await client.getSnapshot(\"name\");\n    } catch {\n      // no-op, we don't care about the response, only the user-agent header\n    }\n    assert.exists(userAgent, \"Expected a User-Agent header to be sent\");\n    assert.include(userAgent!, `azsdk-js-app-configuration/${packageVersion}`);\n  });\n});\n"]}