{"version":3,"file":"testHelpers.js","sourceRoot":"","sources":["../../../../test/public/utils/testHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AppConfigurationClient,\n  AppConfigurationClientOptions,\n  ListSnapshotsPage,\n  ConfigurationSnapshot,\n} from \"../../../src\";\nimport {\n  ConfigurationSetting,\n  ListConfigurationSettingPage,\n  ListRevisionsPage,\n} from \"../../../src\";\nimport { Recorder, RecorderStartOptions, env, isPlaybackMode } from \"@azure-tools/test-recorder\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport { TokenCredential } from \"@azure/identity\";\nimport { assert } from \"chai\";\nimport { createTestCredential } from \"@azure-tools/test-credential\";\n\nlet connectionStringNotPresentWarning = false;\nlet tokenCredentialsNotPresentWarning = false;\n\nexport interface CredsAndEndpoint {\n  credential: TokenCredential;\n  endpoint: string;\n}\n\nexport async function startRecorder(that: Mocha.Context): Promise<Recorder> {\n  const recorderStartOptions: RecorderStartOptions = {\n    envSetupForPlayback: {\n      APPCONFIG_CONNECTION_STRING:\n        \"Endpoint=https://myappconfig.azconfig.io;Id=123456;Secret=123456\",\n      AZ_CONFIG_ENDPOINT: \"https://myappconfig.azconfig.io\",\n      AZURE_CLIENT_ID: \"azure_client_id\",\n      AZURE_CLIENT_SECRET: \"azure_client_secret\",\n      AZURE_TENANT_ID: \"azuretenantid\",\n    },\n    sanitizerOptions: {\n      connectionStringSanitizers: [\n        {\n          fakeConnString: \"Endpoint=https://myappconfig.azconfig.io;Id=123456;Secret=123456\",\n          actualConnString: env.APPCONFIG_CONNECTION_STRING,\n        },\n      ],\n    },\n  };\n\n  const recorder = new Recorder(that.currentTest);\n  await recorder.start(recorderStartOptions);\n  return recorder;\n}\n\nexport function getTokenAuthenticationCredential(): CredsAndEndpoint {\n  const requiredEnvironmentVariables = [\n    \"AZ_CONFIG_ENDPOINT\",\n    \"AZURE_CLIENT_ID\",\n    \"AZURE_TENANT_ID\",\n    \"AZURE_CLIENT_SECRET\",\n  ];\n\n  for (const name of requiredEnvironmentVariables) {\n    const value = env[name];\n\n    if (value == null) {\n      if (tokenCredentialsNotPresentWarning) {\n        tokenCredentialsNotPresentWarning = true;\n      }\n\n      throw new Error(\"Invalid value for requiredEnvironmentVariables\");\n    }\n  }\n\n  return {\n    credential: createTestCredential(),\n    endpoint: env[\"AZ_CONFIG_ENDPOINT\"]!,\n  };\n}\n\nexport function createAppConfigurationClientForTests(\n  options?: AppConfigurationClientOptions,\n): AppConfigurationClient {\n  const connectionString = env[\"APPCONFIG_CONNECTION_STRING\"];\n\n  if (connectionString == null) {\n    if (!connectionStringNotPresentWarning) {\n      connectionStringNotPresentWarning = true;\n    }\n    throw new Error(\"Invalid value for APPCONFIG_CONNECTION_STRING\");\n  }\n\n  return new AppConfigurationClient(connectionString, options);\n}\n\nexport async function deleteKeyCompletely(\n  keys: string[],\n  client: AppConfigurationClient,\n): Promise<void> {\n  const settingsIterator = client.listConfigurationSettings({\n    keyFilter: keys.join(\",\"),\n  });\n\n  for await (const setting of settingsIterator) {\n    if (setting.isReadOnly) {\n      await client.setReadOnly(setting, false);\n    }\n\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\nexport async function deleteEverySetting(): Promise<void> {\n  const client = createAppConfigurationClientForTests();\n  const settingsList = client.listConfigurationSettings({});\n\n  for await (const setting of settingsList) {\n    await client.setReadOnly({ key: setting.key, label: setting.label }, false);\n    await client.deleteConfigurationSetting({ key: setting.key, label: setting.label });\n  }\n}\n\nexport async function toSortedArray(\n  pagedIterator: PagedAsyncIterableIterator<\n    ConfigurationSetting,\n    ListConfigurationSettingPage | ListRevisionsPage\n  >,\n  compareFn?: (a: ConfigurationSetting, b: ConfigurationSetting) => number,\n): Promise<ConfigurationSetting[]> {\n  const settings: ConfigurationSetting[] = [];\n\n  for await (const setting of pagedIterator) {\n    settings.push(setting);\n  }\n\n  let settingsViaPageIterator: ConfigurationSetting[] = [];\n\n  for await (const page of pagedIterator.byPage()) {\n    settingsViaPageIterator = settingsViaPageIterator.concat(page.items);\n  }\n\n  // just a sanity-check\n  assert.deepEqual(settings, settingsViaPageIterator);\n\n  settings.sort((a, b) =>\n    compareFn\n      ? compareFn(a, b)\n      : `${a.key}-${a.label}-${a.value}`.localeCompare(`${b.key}-${b.label}-${b.value}`),\n  );\n\n  return settings;\n}\n\nexport async function toSortedSnapshotArray(\n  pagedIterator: PagedAsyncIterableIterator<ConfigurationSnapshot, ListSnapshotsPage>,\n  compareFn?: (a: ConfigurationSnapshot, b: ConfigurationSnapshot) => number,\n): Promise<ConfigurationSnapshot[]> {\n  const snapshots: ConfigurationSnapshot[] = [];\n\n  for await (const snapshot of pagedIterator) {\n    snapshots.push(snapshot);\n  }\n\n  let snapshotsViaPageIterator: ConfigurationSnapshot[] = [];\n\n  for await (const page of pagedIterator.byPage()) {\n    snapshotsViaPageIterator = snapshotsViaPageIterator.concat(page.items);\n  }\n\n  // just a sanity-check\n  assert.deepEqual(snapshots, snapshotsViaPageIterator);\n\n  snapshots.sort((a, b) =>\n    compareFn\n      ? compareFn(a, b)\n      : `${a.name}-${a.itemCount}-${a.status}`.localeCompare(\n          `${b.name}-${b.itemCount}-${b.status}`,\n        ),\n  );\n  return snapshots;\n}\n\nexport function assertEqualSettings(\n  expected: Pick<ConfigurationSetting, \"key\" | \"value\" | \"label\" | \"isReadOnly\">[],\n  actual: ConfigurationSetting[],\n): void {\n  actual = actual.map((setting) => {\n    return {\n      key: setting.key,\n      label: setting.label || undefined,\n      value: setting.value,\n      isReadOnly: setting.isReadOnly,\n    };\n  });\n\n  assert.deepEqual(expected, actual);\n}\n\nexport async function assertThrowsRestError(\n  testFunction: () => Promise<any>,\n  expectedStatusCode: number,\n  message: string = \"\",\n): Promise<Error> {\n  try {\n    await testFunction();\n    assert.fail(`${message}: No error thrown`);\n  } catch (err: any) {\n    if (!(err instanceof Error)) {\n      throw new Error(\"Error is not recognized\");\n    }\n    if (err.name === \"RestError\") {\n      const restError = err as RestError;\n      assert.equal(expectedStatusCode, restError.statusCode, message);\n      return err;\n    }\n\n    assert.fail(`${message}: Caught error but wasn't a RestError: ${err}`);\n  }\n\n  return new Error(\"We won't reach this - both cases above throw because of assert.fail()\");\n}\n\nexport async function assertThrowsAbortError(\n  testFunction: () => Promise<any>,\n  message = \"\",\n): Promise<Error> {\n  try {\n    await testFunction();\n    assert.fail(`${message}: No error thrown`);\n  } catch (e: any) {\n    if (!(e instanceof Error)) {\n      throw new Error(\"Error is not recognized\");\n    }\n    if (isPlaybackMode() && (e.name === \"FetchError\" || e.name === \"AbortError\")) {\n      return e;\n    } else {\n      assert.equal(e.name, \"AbortError\");\n      return e;\n    }\n  }\n}\n\n/**\n * Assert 2 snapshots with name, retentionPeriod and filters are equal\n */\nexport function assertEqualSnapshot(\n  snapshot1: ConfigurationSnapshot,\n  snapshot2: ConfigurationSnapshot,\n): void {\n  assert.equal(snapshot1.name, snapshot2.name, \"Unexpected name in result from getSnapshot().\");\n  assert.equal(\n    snapshot1.retentionPeriodInSeconds,\n    snapshot2.retentionPeriodInSeconds,\n    \"Unexpected retentionPeriod in result from getSnapshot().\",\n  );\n  assert.deepEqual(\n    snapshot1.filters,\n    snapshot2.filters,\n    \"Unexpected filters in result from getSnapshot().\",\n  );\n}\n"]}