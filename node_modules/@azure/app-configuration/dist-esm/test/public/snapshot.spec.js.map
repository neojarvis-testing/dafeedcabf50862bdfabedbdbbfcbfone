{"version":3,"file":"snapshot.spec.js","sourceRoot":"","sources":["../../../test/public/snapshot.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Recorder, isPlaybackMode, testPollingOptions } from \"@azure-tools/test-recorder\";\nimport { assert } from \"chai\";\nimport { Context } from \"mocha\";\nimport { AppConfigurationClient } from \"../../src/appConfigurationClient\";\nimport {\n  ConfigurationSnapshot,\n  ConfigurationSettingsFilter,\n  CreateSnapshotResponse,\n  ConfigurationSettingId,\n} from \"../../src/models\";\nimport {\n  assertEqualSnapshot,\n  assertThrowsAbortError,\n  createAppConfigurationClientForTests,\n  startRecorder,\n} from \"./utils/testHelpers\";\n\ndescribe(\"AppConfigurationClient snapshot\", () => {\n  let client: AppConfigurationClient;\n  let recorder: Recorder;\n  let key1: string;\n  let key2: string;\n  let configSetting1: ConfigurationSettingId;\n  let configSetting2: ConfigurationSettingId;\n  let snapshot1: ConfigurationSnapshot;\n  let filter1: ConfigurationSettingsFilter;\n  let filter2: ConfigurationSettingsFilter;\n  let newSnapshot: CreateSnapshotResponse;\n\n  beforeEach(async function (this: Context) {\n    recorder = await startRecorder(this);\n    client = createAppConfigurationClientForTests(recorder.configureClientOptions({}));\n    key1 = recorder.variable(\"key1\", `key1-${new Date().getTime()}`);\n    key2 = recorder.variable(\"key2\", `key2-${new Date().getTime()}`);\n    const label1 = \"label1\";\n    const label2 = \"label2\";\n    configSetting1 = {\n      key: key1,\n      label: label1,\n    };\n    configSetting2 = {\n      key: key2,\n      label: label2,\n    };\n    filter1 = {\n      keyFilter: key1,\n      labelFilter: label1,\n    };\n    filter2 = {\n      keyFilter: key2,\n      labelFilter: label2,\n    };\n    snapshot1 = {\n      name: recorder.variable(\"snapshot1\", `snapshot-${new Date().getTime()}`),\n      retentionPeriodInSeconds: 2592000,\n      filters: [filter1],\n    };\n\n    await client.addConfigurationSetting({ ...configSetting1, value: \"value1\" });\n    await client.addConfigurationSetting({ ...configSetting2, value: \"value2\" });\n  });\n\n  afterEach(async function (this: Context) {\n    await client.deleteConfigurationSetting({ ...configSetting1 });\n    await client.deleteConfigurationSetting({ ...configSetting2 });\n    await recorder.stop();\n  });\n\n  describe(\"createSnapshot\", () => {\n    it(\"create a snapshot\", async () => {\n      const poller = await client.beginCreateSnapshot(snapshot1, testPollingOptions);\n      newSnapshot = await poller.pollUntilDone();\n      assertEqualSnapshot(newSnapshot, snapshot1);\n\n      await client.archiveSnapshot(newSnapshot.name);\n    });\n\n    it(\"service throws error when tried to create a snapshot with same name\", async () => {\n      newSnapshot = await client.beginCreateSnapshotAndWait(snapshot1, testPollingOptions);\n      assertEqualSnapshot(newSnapshot, snapshot1);\n\n      const errorExpected = {\n        type: \"https://azconfig.io/errors/already-exists\",\n        title: \"The resource already exists.\",\n        status: 409,\n        detail: \"\",\n      };\n\n      // attempt to add the same snapshot\n      try {\n        await client.beginCreateSnapshotAndWait(snapshot1, testPollingOptions);\n        throw new Error(\"Test failure\");\n      } catch (err: any) {\n        assert.equal(err.message, JSON.stringify(errorExpected));\n        assert.notEqual((err as { message: string }).message, \"Test failure\");\n      }\n\n      await client.archiveSnapshot(newSnapshot.name);\n    });\n\n    // Skipping all \"accepts operation options flaky tests\" https://github.com/Azure/azure-sdk-for-js/issues/26447\n    it.skip(\"accepts  operation options\", async function () {\n      if (isPlaybackMode()) this.skip();\n      await assertThrowsAbortError(async () => {\n        await client.beginCreateSnapshotAndWait(snapshot1, {\n          requestOptions: {\n            timeout: 1,\n          },\n          updateIntervalInMs: testPollingOptions.updateIntervalInMs,\n        });\n      });\n    });\n  });\n\n  describe(\"listConfigurationSettings of a Snapshot\", () => {\n    it(\"list configuration settings\", async () => {\n      newSnapshot = await client.beginCreateSnapshotAndWait(snapshot1, testPollingOptions);\n\n      await client.setConfigurationSetting({ ...configSetting1, value: \"value2\" });\n\n      const snapshotConfigurationSettings = client.listConfigurationSettingsForSnapshot(\n        newSnapshot.name,\n      );\n\n      for await (const setting of snapshotConfigurationSettings) {\n        assert.equal(setting.key, key1);\n        assert.equal(setting.label, \"label1\");\n        assert.equal(setting.value, \"value1\", \"Should not get the updated value of the setting\");\n      }\n\n      await client.archiveSnapshot(newSnapshot.name);\n    });\n  });\n\n  describe(\"archiveSnapshot\", () => {\n    it(\"archive a snapshot\", async () => {\n      newSnapshot = await client.beginCreateSnapshotAndWait(snapshot1, testPollingOptions);\n      const archivedSnapshot = await client.archiveSnapshot(newSnapshot.name);\n\n      assert.equal(\n        archivedSnapshot.status,\n        \"archived\",\n        \"Unexpected status in result from archiveSnapshot().\",\n      );\n    });\n\n    it.skip(\"accepts operation options\", async function () {\n      if (isPlaybackMode()) this.skip();\n      await assertThrowsAbortError(async () => {\n        await client.archiveSnapshot(newSnapshot.name, {\n          requestOptions: {\n            timeout: 1,\n          },\n        });\n      });\n    });\n  });\n\n  describe(\"recoverSnapshot\", () => {\n    it(\"recover a snapshot\", async () => {\n      newSnapshot = await client.beginCreateSnapshotAndWait(snapshot1);\n      const archivedSnapshot = await client.archiveSnapshot(newSnapshot.name);\n\n      const unarchivedSnapshot = await client.recoverSnapshot(archivedSnapshot.name);\n      assert.equal(\n        unarchivedSnapshot.status,\n        \"ready\",\n        \"Unexpected status in result from archiveSnapshot().\",\n      );\n\n      await client.archiveSnapshot(newSnapshot.name);\n    });\n\n    it.skip(\"accepts operation options\", async function () {\n      if (isPlaybackMode()) this.skip();\n      await assertThrowsAbortError(async () => {\n        await client.recoverSnapshot(newSnapshot.name, {\n          requestOptions: {\n            timeout: 1,\n          },\n        });\n      });\n    });\n  });\n\n  describe(\"getSnapshot\", () => {\n    it(\"get a snapshot\", async () => {\n      newSnapshot = await client.beginCreateSnapshotAndWait(snapshot1, testPollingOptions);\n\n      const snapshot = await client.getSnapshot(newSnapshot.name);\n      assertEqualSnapshot(snapshot, newSnapshot);\n\n      await client.archiveSnapshot(newSnapshot.name);\n    });\n\n    // Check issue https://github.com/Azure/azure-sdk-for-js/issues/26447\n    it.skip(\"accepts operation options\", async function () {\n      if (isPlaybackMode()) this.skip();\n      newSnapshot = await client.beginCreateSnapshotAndWait(snapshot1, testPollingOptions);\n      await assertThrowsAbortError(async () => {\n        await client.getSnapshot(newSnapshot.name, {\n          requestOptions: {\n            timeout: 1,\n          },\n        });\n      });\n\n      await client.archiveSnapshot(newSnapshot.name);\n    });\n  });\n\n  describe(\"listSnapshots\", () => {\n    it(\"list all snapshots with ready filter\", async function () {\n      const list = client.listSnapshots();\n      for await (const snapshot of list) {\n        await client.archiveSnapshot(snapshot.name);\n      }\n      const readyList = client.listSnapshots({ statusFilter: [\"ready\"] });\n      let num = 0;\n      for await (const snapshot of readyList) {\n        assert.equal(snapshot, undefined, \"There should be no snapshot in ready status\");\n        num++;\n      }\n      assert.equal(num, 0, \"There should be no snapshot in ready status\");\n\n      await client.beginCreateSnapshotAndWait(snapshot1, testPollingOptions);\n\n      const snapshot2 = {\n        name: recorder.variable(\"snapshot2\", `snapshot-${new Date().getTime()}`),\n        filters: [filter1, filter2],\n      };\n      await client.beginCreateSnapshotAndWait(snapshot2, testPollingOptions);\n\n      const listAfter = await client.listSnapshots({ statusFilter: [\"ready\"] });\n      let total = 0;\n      for await (const snapshot of listAfter) {\n        await client.archiveSnapshot(snapshot.name);\n        total++;\n      }\n      assert.equal(total, 2, \"Unexpected number of snapshots in result from listSnapshots().\");\n    });\n  });\n});\n"]}