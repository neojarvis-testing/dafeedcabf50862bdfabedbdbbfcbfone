{"version":3,"file":"secretReference.spec.js","sourceRoot":"","sources":["../../../test/public/secretReference.spec.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AddConfigurationSettingResponse,\n  AppConfigurationClient,\n  ConfigurationSetting,\n  SecretReferenceValue,\n  isSecretReference,\n  parseSecretReference,\n  secretReferenceContentType,\n} from \"../../src\";\nimport { Recorder } from \"@azure-tools/test-recorder\";\nimport { createAppConfigurationClientForTests, startRecorder } from \"./utils/testHelpers\";\nimport { Context } from \"mocha\";\nimport { assert } from \"chai\";\n\ndescribe(\"AppConfigurationClient - SecretReference\", () => {\n  let client: AppConfigurationClient;\n  let recorder: Recorder;\n\n  beforeEach(async function (this: Context) {\n    recorder = await startRecorder(this);\n    client = createAppConfigurationClientForTests(recorder.configureClientOptions({}));\n  });\n\n  afterEach(async function (this: Context) {\n    await recorder.stop();\n  });\n\n  describe(\"SecretReference configuration setting\", () => {\n    const getBaseSetting = (): ConfigurationSetting<SecretReferenceValue> => {\n      return {\n        value: {\n          secretId: `https://vault_name.vault.azure.net/secrets/${recorder.variable(\n            \"name-2\",\n            `name-2${Math.floor(Math.random() * 1000)}`,\n          )}`,\n        },\n        isReadOnly: false,\n        key: recorder.variable(\"name-3\", `name-3${Math.floor(Math.random() * 1000)}`),\n        label: \"label-s\",\n        contentType: secretReferenceContentType,\n      };\n    };\n\n    function assertSecretReferenceProps(\n      actual: Omit<AddConfigurationSettingResponse, \"_response\">,\n      expected: ConfigurationSetting<SecretReferenceValue>,\n    ): void {\n      assert.equal(isSecretReference(actual), true, \"Expected to get the SecretReference\");\n      const actualSecretReference = parseSecretReference(actual);\n      if (isSecretReference(actual)) {\n        assert.equal(\n          actual.key,\n          expected.key,\n          \"Key from the response from get request is not as expected\",\n        );\n        assert.equal(actualSecretReference.value.secretId, expected.value.secretId);\n        assert.equal(actual.isReadOnly, expected.isReadOnly);\n        assert.equal(actual.label, expected.label);\n        assert.equal(actual.contentType, expected.contentType);\n      }\n    }\n\n    let addResponse: AddConfigurationSettingResponse;\n    let baseSetting: ConfigurationSetting<SecretReferenceValue>;\n    beforeEach(async () => {\n      baseSetting = getBaseSetting();\n      addResponse = await client.addConfigurationSetting(baseSetting);\n    });\n\n    afterEach(async () => {\n      await client.setReadOnly(\n        {\n          key: baseSetting.key,\n          label: baseSetting.label,\n        },\n        false,\n      );\n      await client.deleteConfigurationSetting({\n        key: baseSetting.key,\n        label: baseSetting.label,\n      });\n    });\n\n    it(\"can add and get SecretReference\", async () => {\n      assertSecretReferenceProps(addResponse, baseSetting);\n      const getResponse = await client.getConfigurationSetting({\n        key: baseSetting.key,\n        label: baseSetting.label,\n      });\n      assertSecretReferenceProps(getResponse, baseSetting);\n    });\n\n    it(\"can add and update SecretReference\", async () => {\n      const getResponse = await client.getConfigurationSetting({\n        key: baseSetting.key,\n        label: baseSetting.label,\n      });\n      const newSecretId = `https://vault_name.vault.azure.net/secrets/${recorder.variable(\n        \"name-4\",\n        `name-4${Math.floor(Math.random() * 1000)}`,\n      )}`;\n\n      assertSecretReferenceProps(getResponse, baseSetting);\n      const secretReference = parseSecretReference(getResponse);\n      secretReference.value.secretId = newSecretId;\n\n      const setResponse = await client.setConfigurationSetting(secretReference);\n      assertSecretReferenceProps(setResponse, {\n        ...baseSetting,\n        value: { secretId: newSecretId },\n      });\n\n      const getResponseAfterUpdate = await client.getConfigurationSetting({\n        key: baseSetting.key,\n        label: baseSetting.label,\n      });\n      assertSecretReferenceProps(getResponseAfterUpdate, {\n        ...baseSetting,\n        value: { secretId: newSecretId },\n      });\n    });\n\n    it(\"can add, list and update multiple SecretReferences\", async () => {\n      const secondSetting = {\n        ...baseSetting,\n        key: `${baseSetting.key}-2`,\n      };\n      const newSecretId = `https://vault_name.vault.azure.net/secrets/${recorder.variable(\n        \"name-5\",\n        `name-5${Math.floor(Math.random() * 1000)}`,\n      )}`;\n      await client.addConfigurationSetting(secondSetting);\n\n      let numberOFSecretReferencesReceived = 0;\n      for await (const setting of client.listConfigurationSettings({\n        keyFilter: `${baseSetting.key}*`,\n      })) {\n        numberOFSecretReferencesReceived++;\n        if (setting.key === baseSetting.key) {\n          assertSecretReferenceProps(setting, baseSetting);\n          await client.setConfigurationSetting({\n            ...baseSetting,\n            value: { secretId: newSecretId },\n          });\n        } else {\n          assertSecretReferenceProps(setting, secondSetting);\n          await client.setReadOnly(\n            { key: setting.key, label: setting.label },\n            !secondSetting.isReadOnly,\n          );\n        }\n      }\n      assert.equal(numberOFSecretReferencesReceived, 2, \"Unexpected number of FeatureFlags seen\");\n      for await (const setting of client.listConfigurationSettings({\n        keyFilter: `${baseSetting.key}*`,\n      })) {\n        numberOFSecretReferencesReceived--;\n        if (setting.key === baseSetting.key) {\n          assertSecretReferenceProps(setting, { ...baseSetting, value: { secretId: newSecretId } });\n        } else {\n          assertSecretReferenceProps(setting, {\n            ...secondSetting,\n            isReadOnly: !secondSetting.isReadOnly,\n          });\n        }\n      }\n\n      assert.equal(\n        numberOFSecretReferencesReceived,\n        0,\n        \"Unexpected number of SecretReferences seen after updating\",\n      );\n      await client.setReadOnly({ key: secondSetting.key, label: secondSetting.label }, false);\n      await client.deleteConfigurationSetting({\n        key: secondSetting.key,\n        label: secondSetting.label,\n      });\n    });\n  });\n\n  describe(\"serializeAsConfigurationSettingParam\", () => {\n    [`[]`, \"Hello World\"].forEach((value) => {\n      it(`Unexpected value ${value} as secret reference value`, async () => {\n        const setting: ConfigurationSetting<SecretReferenceValue> = {\n          contentType: secretReferenceContentType,\n          key: recorder.variable(\"name-1\", `name-1${Math.floor(Math.random() * 1000)}`),\n          isReadOnly: false,\n          value: { secretId: \"id\" },\n        };\n        setting.value = value as any;\n        await client.addConfigurationSetting(setting);\n        assert.equal(\n          (await client.getConfigurationSetting({ key: setting.key })).value,\n          value,\n          \"message\",\n        );\n        await client.deleteConfigurationSetting({ key: setting.key });\n      });\n    });\n  });\n});\n"]}