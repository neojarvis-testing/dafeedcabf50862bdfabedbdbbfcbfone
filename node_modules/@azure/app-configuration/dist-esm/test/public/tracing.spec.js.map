{"version":3,"file":"tracing.spec.js","sourceRoot":"","sources":["../../../test/public/tracing.spec.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,oCAAoC,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAG1F,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAC;AAE3C,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,MAA8B,CAAC;IACnC,IAAI,QAAkB,CAAC;IAEvB,UAAU,CAAC,KAAK;QACd,QAAQ,GAAG,MAAM,aAAa,CAAC,IAAI,CAAC,CAAC;QACrC,MAAM,GAAG,oCAAoC,CAAC,QAAQ,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC,CAAC;IACrF,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK;QAC/C,MAAM,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAC3B,cAAc,EACd,eAAe,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAClD,CAAC;QACF,MAAM,MAAM,CAAC,eAAe,CAC1B,KAAK,EAAE,OAAO,EAAE,EAAE;YAChB,MAAM,QAAQ,GAAmB;gBAC/B,MAAM,CAAC,uBAAuB,CAAC,EAAE,GAAG,EAAE,EAAE,OAAO,CAAC;gBAChD,MAAM,CAAC,uBAAuB,CAAC,EAAE,GAAG,EAAE,EAAE,OAAO,CAAC;gBAChD,MAAM,CAAC,uBAAuB,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE,OAAO,CAAC;gBACpE,MAAM,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,CAAC;gBAC1C,MAAM,CAAC,0BAA0B,CAAC,EAAE,GAAG,EAAE,EAAE,OAAO,CAAC;aACpD,CAAC;YACF,uFAAuF;YACvF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACnE,CAAC,EACD;YACE,gDAAgD;YAChD,gDAAgD;YAChD,gDAAgD;YAChD,oCAAoC;YACpC,mDAAmD;SACpD,CACF,CAAC;QACF,IAAI,CAAC;YACH,MAAM,MAAM,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;YAC9C,MAAM,MAAM,CAAC,0BAA0B,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QACxD,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,2CAA2C;QAC7C,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Recorder } from \"@azure-tools/test-recorder\";\nimport { createAppConfigurationClientForTests, startRecorder } from \"./utils/testHelpers\";\nimport { AppConfigurationClient } from \"../../src/appConfigurationClient\";\nimport { Context } from \"mocha\";\nimport { assert } from \"@azure/test-utils\";\n\ndescribe(\"supports tracing\", () => {\n  let client: AppConfigurationClient;\n  let recorder: Recorder;\n\n  beforeEach(async function (this: Context) {\n    recorder = await startRecorder(this);\n    client = createAppConfigurationClientForTests(recorder.configureClientOptions({}));\n  });\n\n  afterEach(async () => {\n    await recorder.stop();\n  });\n\n  it(\"can trace through the various options\", async function () {\n    const key = recorder.variable(\n      \"noLabelTests\",\n      `noLabelTests${Math.floor(Math.random() * 1000)}`,\n    );\n    await assert.supportsTracing(\n      async (options) => {\n        const promises: Promise<any>[] = [\n          client.addConfigurationSetting({ key }, options),\n          client.getConfigurationSetting({ key }, options),\n          client.setConfigurationSetting({ key, value: \"new-value\" }, options),\n          client.setReadOnly({ key }, true, options),\n          client.deleteConfigurationSetting({ key }, options),\n        ];\n        // We don't care about errors, only that we created (and closed) the appropriate spans.\n        await Promise.all(promises.map((p) => p.catch(() => undefined)));\n      },\n      [\n        \"AppConfigurationClient.addConfigurationSetting\",\n        \"AppConfigurationClient.getConfigurationSetting\",\n        \"AppConfigurationClient.setConfigurationSetting\",\n        \"AppConfigurationClient.setReadOnly\",\n        \"AppConfigurationClient.deleteConfigurationSetting\",\n      ],\n    );\n    try {\n      await client.setReadOnly({ key: key }, false);\n      await client.deleteConfigurationSetting({ key: key });\n    } catch (e: any) {\n      /** empty because key is already deleted */\n    }\n  });\n});\n"]}