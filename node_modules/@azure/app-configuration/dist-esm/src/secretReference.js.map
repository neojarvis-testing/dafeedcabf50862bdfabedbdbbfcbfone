{"version":3,"file":"secretReference.js","sourceRoot":"","sources":["../../src/secretReference.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAElC;;GAEG;AACH,MAAM,CAAC,MAAM,0BAA0B,GACrC,oEAAoE,CAAC;AAYvE;;GAEG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG;IACnC;;OAEG;IACH,2BAA2B,EAAE,CAC3B,eAAgE,EACrC,EAAE;QAC7B,MAAM,CAAC,IAAI,CAAC,2DAA2D,EAAE,eAAe,CAAC,CAAC;QAC1F,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;YAC3B,MAAM,CAAC,KAAK,CAAC,yCAAyC,EAAE,eAAe,CAAC,CAAC;YACzE,MAAM,IAAI,SAAS,CAAC,6CAA6C,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC;QAC5F,CAAC;QAED,MAAM,wBAAwB,GAA6B;YACzD,GAAG,EAAE,eAAe,CAAC,KAAK,CAAC,QAAQ;SACpC,CAAC;QAEF,MAAM,aAAa,mCACd,eAAe,KAClB,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,GAChD,CAAC;QACF,OAAO,aAAa,CAAC;IACvB,CAAC;CACF,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAClC,OAA6B;IAE7B,MAAM,CAAC,IAAI,CACT,6EAA6E,EAC7E,OAAO,CACR,CAAC;IACF,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC;QAChC,MAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,OAAO,CAAC,CAAC;QACvD,MAAM,SAAS,CACb,oBAAoB,OAAO,CAAC,GAAG,yGAAyG,CACzI,CAAC;IACJ,CAAC;IAED,MAAM,wBAAwB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAA6B,CAAC;IAEvF,MAAM,eAAe,mCAChB,OAAO,KACV,KAAK,EAAE,EAAE,QAAQ,EAAE,wBAAwB,CAAC,GAAG,EAAE,GAClD,CAAC;IACF,OAAO,eAAe,CAAC;AACzB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,iBAAiB,CAC/B,OAA6B;IAE7B,OAAO,CACL,OAAO;QACP,OAAO,CAAC,WAAW,KAAK,0BAA0B;QAClD,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ,CAClC,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ConfigurationSetting, ConfigurationSettingParam } from \"./models\";\nimport { JsonSecretReferenceValue } from \"./internal/jsonModels\";\nimport { logger } from \"./logger\";\n\n/**\n * content-type for the secret reference.\n */\nexport const secretReferenceContentType =\n  \"application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8\";\n\n/**\n * Necessary fields for updating or creating a new secret reference.\n */\nexport interface SecretReferenceValue {\n  /**\n   * Id for the secret reference.\n   */\n  secretId: string;\n}\n\n/**\n * @internal\n */\nexport const SecretReferenceHelper = {\n  /**\n   * Takes the SecretReference (JSON) and returns a ConfigurationSetting (with the props encodeed in the value).\n   */\n  toConfigurationSettingParam: (\n    secretReference: ConfigurationSettingParam<SecretReferenceValue>,\n  ): ConfigurationSettingParam => {\n    logger.info(\"Encoding SecretReference value in a ConfigurationSetting:\", secretReference);\n    if (!secretReference.value) {\n      logger.error(`SecretReference has an unexpected value`, secretReference);\n      throw new TypeError(`SecretReference has an unexpected value - ${secretReference.value}`);\n    }\n\n    const jsonSecretReferenceValue: JsonSecretReferenceValue = {\n      uri: secretReference.value.secretId,\n    };\n\n    const configSetting = {\n      ...secretReference,\n      value: JSON.stringify(jsonSecretReferenceValue),\n    };\n    return configSetting;\n  },\n};\n\n/**\n * Takes the ConfigurationSetting as input and returns the ConfigurationSetting<SecretReferenceValue> by parsing the value string.\n */\nexport function parseSecretReference(\n  setting: ConfigurationSetting,\n): ConfigurationSetting<SecretReferenceValue> {\n  logger.info(\n    \"[parseSecretReference] Parsing the value to return the SecretReferenceValue\",\n    setting,\n  );\n  if (!isSecretReference(setting)) {\n    logger.error(\"Invalid SecretReference input\", setting);\n    throw TypeError(\n      `Setting with key ${setting.key} is not a valid SecretReference, make sure to have the correct content-type and a valid non-null value.`,\n    );\n  }\n\n  const jsonSecretReferenceValue = JSON.parse(setting.value) as JsonSecretReferenceValue;\n\n  const secretReference: ConfigurationSetting<SecretReferenceValue> = {\n    ...setting,\n    value: { secretId: jsonSecretReferenceValue.uri },\n  };\n  return secretReference;\n}\n\n/**\n * Lets you know if the ConfigurationSetting is a secret reference.\n *\n * [Checks if the content type is secretReferenceContentType `\"application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8\"`]\n */\nexport function isSecretReference(\n  setting: ConfigurationSetting,\n): setting is ConfigurationSetting & Required<Pick<ConfigurationSetting, \"value\">> {\n  return (\n    setting &&\n    setting.contentType === secretReferenceContentType &&\n    typeof setting.value === \"string\"\n  );\n}\n"]}