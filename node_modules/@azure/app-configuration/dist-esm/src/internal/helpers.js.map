{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/internal/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  ConfigurationSetting,\n  ConfigurationSettingParam,\n  HttpOnlyIfChangedField,\n  HttpOnlyIfUnchangedField,\n  HttpResponseField,\n  HttpResponseFields,\n  ListRevisionsOptions,\n  ListSettingsOptions,\n  ListSnapshotsOptions,\n  ConfigurationSnapshot,\n  SnapshotResponse,\n  EtagEntity,\n} from \"../models\";\nimport { FeatureFlagHelper, FeatureFlagValue, featureFlagContentType } from \"../featureFlag\";\nimport {\n  GetKeyValuesOptionalParams,\n  GetSnapshotsOptionalParams,\n  KeyValue,\n} from \"../generated/src/models\";\nimport {\n  SecretReferenceHelper,\n  SecretReferenceValue,\n  secretReferenceContentType,\n} from \"../secretReference\";\nimport { isDefined } from \"@azure/core-util\";\nimport { logger } from \"../logger\";\nimport { OperationOptions } from \"@azure/core-client\";\n\n/**\n * Options for listConfigurationSettings that allow for filtering based on keys, labels and other fields.\n * Also provides `fields` which allows you to selectively choose which fields are populated in the\n * result.\n */\nexport interface SendConfigurationSettingsOptions\n  extends OperationOptions,\n    ListSettingsOptions,\n    EtagEntity {\n  /**\n   * A filter used get configuration setting for a snapshot. Not valid when used with 'key' and 'label' filters\n   */\n  snapshotName?: string;\n}\n\n/**\n * Formats the etag so it can be used with a If-Match/If-None-Match header\n * @internal\n */\nexport function quoteETag(etag: string | undefined): string | undefined {\n  // https://tools.ietf.org/html/rfc7232#section-3.1\n  if (etag === undefined || etag === \"*\") {\n    return etag;\n  }\n\n  if (etag.startsWith('\"') && etag.endsWith('\"')) {\n    return etag;\n  }\n\n  if (etag.startsWith(\"'\") && etag.endsWith(\"'\")) {\n    return etag;\n  }\n\n  return `\"${etag}\"`;\n}\n\n/**\n * Checks the onlyIfChanged/onlyIfUnchanged properties to make sure we haven't specified both\n * and throws an Error. Otherwise, returns the properties properly quoted.\n * @param options - An options object with onlyIfChanged/onlyIfUnchanged fields\n * @internal\n */\nexport function checkAndFormatIfAndIfNoneMatch(\n  objectWithEtag: EtagEntity,\n  options: HttpOnlyIfChangedField & HttpOnlyIfUnchangedField,\n): { ifMatch: string | undefined; ifNoneMatch: string | undefined } {\n  if (options.onlyIfChanged && options.onlyIfUnchanged) {\n    logger.error(\n      \"onlyIfChanged and onlyIfUnchanged are both specified\",\n      options.onlyIfChanged,\n      options.onlyIfUnchanged,\n    );\n    throw new Error(\"onlyIfChanged and onlyIfUnchanged are mutually-exclusive\");\n  }\n\n  let ifMatch;\n  let ifNoneMatch;\n\n  if (options.onlyIfUnchanged) {\n    ifMatch = quoteETag(objectWithEtag.etag);\n  }\n\n  if (options.onlyIfChanged) {\n    ifNoneMatch = quoteETag(objectWithEtag.etag);\n  }\n\n  return {\n    ifMatch: ifMatch,\n    ifNoneMatch: ifNoneMatch,\n  };\n}\n\n/**\n * Transforms some of the key fields in SendConfigurationSettingsOptions and ListRevisionsOptions\n * so they can be added to a request using AppConfigurationGetKeyValuesOptionalParams.\n * - `options.acceptDateTime` is converted into an ISO string\n * - `select` is populated with the proper field names from `options.fields`\n * - keyFilter and labelFilter are moved to key and label, respectively.\n *\n * @internal\n */\nexport function formatFiltersAndSelect(\n  listConfigOptions: ListRevisionsOptions,\n): Pick<GetKeyValuesOptionalParams, \"key\" | \"label\" | \"select\" | \"acceptDatetime\"> {\n  let acceptDatetime: string | undefined = undefined;\n\n  if (listConfigOptions.acceptDateTime) {\n    acceptDatetime = listConfigOptions.acceptDateTime.toISOString();\n  }\n  return {\n    key: listConfigOptions.keyFilter,\n    label: listConfigOptions.labelFilter,\n    acceptDatetime,\n    select: formatFieldsForSelect(listConfigOptions.fields),\n  };\n}\n\n/**\n * Transforms some of the key fields in SendConfigurationSettingsOptions\n * so they can be added to a request using AppConfigurationGetKeyValuesOptionalParams.\n * - `options.acceptDateTime` is converted into an ISO string\n * - `select` is populated with the proper field names from `options.fields`\n * - keyFilter, labelFilter, snapshotName are moved to key, label, and snapshot respectively.\n *\n * @internal\n */\nexport function formatConfigurationSettingsFiltersAndSelect(\n  listConfigOptions: SendConfigurationSettingsOptions,\n): Pick<GetKeyValuesOptionalParams, \"key\" | \"label\" | \"select\" | \"acceptDatetime\" | \"snapshot\"> {\n  const { snapshotName: snapshot, ...options } = listConfigOptions;\n  return {\n    ...formatFiltersAndSelect(options),\n    snapshot,\n  };\n}\n/**\n * Transforms some of the key fields in ListSnapshotsOptions\n * so they can be added to a request using AppConfigurationGetSnapshotsOptionalParams.\n * - `select` is populated with the proper field names from `options.fields`\n * - keyFilter and labelFilter are moved to key and label, respectively.\n *\n * @internal\n */\nexport function formatSnapshotFiltersAndSelect(\n  listSnapshotOptions: ListSnapshotsOptions,\n): Pick<GetSnapshotsOptionalParams, \"name\" | \"select\" | \"status\"> {\n  return {\n    name: listSnapshotOptions.nameFilter,\n    status: listSnapshotOptions.statusFilter,\n    select: listSnapshotOptions.fields,\n  };\n}\n/**\n * Handles translating a Date acceptDateTime into a string as needed by the API\n * @param newOptions - A newer style options with acceptDateTime as a date (and with proper casing!)\n * @internal\n */\nexport function formatAcceptDateTime(newOptions: { acceptDateTime?: Date }): {\n  acceptDatetime?: string;\n} {\n  return {\n    acceptDatetime: newOptions.acceptDateTime && newOptions.acceptDateTime.toISOString(),\n  };\n}\n\n/**\n * Take the URL that gets returned from next link and extract the 'after' token needed\n * to get the next page of results.\n * @internal\n */\nexport function extractAfterTokenFromNextLink(nextLink: string): string {\n  const searchParams = new URLSearchParams(nextLink);\n  const afterToken = searchParams.get(\"after\");\n\n  if (afterToken == null || Array.isArray(afterToken)) {\n    logger.error(\"Invalid nextLink - invalid after token\", afterToken, Array.isArray(afterToken));\n    throw new Error(\"Invalid nextLink - invalid after token\");\n  }\n\n  return decodeURIComponent(afterToken);\n}\n\n/**\n * Take the header link that gets returned from 304 response and extract the 'after' token needed\n * to get the next page of results.\n *\n * @internal\n */\nexport function extractAfterTokenFromLinkHeader(link: string): string {\n  // Example transformation of the link header\n  // link:\n  // '</kv?api-version=2023-10-01&key=listResults714&after=bGlzdE4>; rel=\"next\"'\n  //\n  // linkValue:\n  // </kv?api-version=2023-10-01&key=listResults714&after=bGlzdE4>\n  //\n  // nextLink:\n  // /kv?api-version=2023-10-01&key=listResults714&after=bGlzdE4\n  const linkValue = link.split(\";\")[0];\n  const nextLink = linkValue.substring(1, linkValue.length - 1);\n  return extractAfterTokenFromNextLink(nextLink);\n}\n\n/**\n * Makes a ConfigurationSetting-based response throw for all of the data members. Used primarily\n * to prevent possible errors by the user in accessing a model that is uninitialized. This can happen\n * in cases like HTTP status code 204 or 304, which return an empty response body.\n *\n * @param configurationSetting - The configuration setting to alter\n */\nexport function makeConfigurationSettingEmpty(\n  configurationSetting: Partial<Record<Exclude<keyof ConfigurationSetting, \"key\">, any>>,\n): void {\n  const names: Exclude<keyof ConfigurationSetting, \"key\">[] = [\n    \"contentType\",\n    \"etag\",\n    \"label\",\n    \"lastModified\",\n    \"isReadOnly\",\n    \"tags\",\n    \"value\",\n  ];\n\n  for (const name of names) {\n    configurationSetting[name] = undefined;\n  }\n}\n\n/**\n * @internal\n */\nexport function transformKeyValue<T>(kvp: T & KeyValue): T & ConfigurationSetting {\n  const setting: T & ConfigurationSetting & KeyValue = {\n    value: undefined,\n    ...kvp,\n    isReadOnly: !!kvp.locked,\n  };\n  delete setting.locked;\n  if (!setting.label) {\n    delete setting.label;\n  }\n  if (!setting.contentType) {\n    delete setting.contentType;\n  }\n  return setting;\n}\n\n/**\n * @internal\n */\nfunction isConfigSettingWithSecretReferenceValue(\n  setting: any,\n): setting is ConfigurationSetting<SecretReferenceValue> {\n  return (\n    setting.contentType === secretReferenceContentType &&\n    isDefined(setting.value) &&\n    typeof setting.value !== \"string\"\n  );\n}\n\n/**\n * @internal\n */\nfunction isConfigSettingWithFeatureFlagValue(\n  setting: any,\n): setting is ConfigurationSetting<FeatureFlagValue> {\n  return (\n    setting.contentType === featureFlagContentType &&\n    isDefined(setting.value) &&\n    typeof setting.value !== \"string\"\n  );\n}\n\n/**\n * @internal\n */\nfunction isSimpleConfigSetting(setting: any): setting is ConfigurationSetting {\n  return typeof setting.value === \"string\" || !isDefined(setting.value);\n}\n\n/**\n * @internal\n */\nexport function serializeAsConfigurationSettingParam(\n  setting:\n    | ConfigurationSettingParam\n    | ConfigurationSettingParam<FeatureFlagValue>\n    | ConfigurationSettingParam<SecretReferenceValue>,\n): ConfigurationSettingParam {\n  if (isSimpleConfigSetting(setting)) {\n    return setting as ConfigurationSettingParam;\n  }\n  try {\n    if (isConfigSettingWithFeatureFlagValue(setting)) {\n      return FeatureFlagHelper.toConfigurationSettingParam(setting);\n    }\n    if (isConfigSettingWithSecretReferenceValue(setting)) {\n      return SecretReferenceHelper.toConfigurationSettingParam(setting);\n    }\n  } catch (error: any) {\n    return setting as ConfigurationSettingParam;\n  }\n  logger.error(\"Unable to serialize to a configuration setting\", setting);\n  throw new TypeError(\n    `Unable to serialize the setting with key \"${setting.key}\" as a configuration setting`,\n  );\n}\n\n/**\n * @internal\n */\nexport function transformKeyValueResponseWithStatusCode<T extends KeyValue>(\n  kvp: T,\n  status: number | undefined,\n): ConfigurationSetting & { eTag?: string } & HttpResponseFields {\n  const response = {\n    ...transformKeyValue(kvp),\n    statusCode: status ?? -1,\n  };\n\n  if (hasUnderscoreResponse(kvp)) {\n    Object.defineProperty(response, \"_response\", {\n      enumerable: false,\n      value: kvp._response,\n    });\n  }\n  return response;\n}\n\n/**\n * @internal\n */\nexport function transformKeyValueResponse<T extends KeyValue & { eTag?: string }>(\n  kvp: T,\n): ConfigurationSetting {\n  const setting = transformKeyValue(kvp);\n  if (hasUnderscoreResponse(kvp)) {\n    Object.defineProperty(setting, \"_response\", {\n      enumerable: false,\n      value: kvp._response,\n    });\n  }\n\n  delete setting.eTag;\n  return setting;\n}\n\n/**\n * @internal\n */\nexport function transformSnapshotResponse<T extends ConfigurationSnapshot>(\n  snapshot: T,\n): SnapshotResponse {\n  if (hasUnderscoreResponse(snapshot)) {\n    Object.defineProperty(snapshot, \"_response\", {\n      enumerable: false,\n      value: snapshot._response,\n    });\n  }\n  return snapshot as any;\n}\n\n/**\n * Translates user-facing field names into their `select` equivalents (these can be\n * seen in the `KnownEnum5`)\n *\n * @param fieldNames - fieldNames from users.\n * @returns The field names translated into the `select` field equivalents.\n *\n * @internal\n */\nexport function formatFieldsForSelect(\n  fieldNames: (keyof ConfigurationSetting)[] | undefined,\n): string[] | undefined {\n  if (fieldNames == null) {\n    return undefined;\n  }\n\n  const mappedFieldNames = fieldNames.map((fn) => {\n    switch (fn) {\n      case \"lastModified\":\n        return \"last_modified\";\n      case \"contentType\":\n        return \"content_type\";\n      case \"isReadOnly\":\n        return \"locked\";\n      default:\n        return fn;\n    }\n  });\n\n  return mappedFieldNames;\n}\n\n/**\n * @internal\n */\nexport function errorMessageForUnexpectedSetting(\n  key: string,\n  expectedType: \"FeatureFlag\" | \"SecretReference\",\n): string {\n  return `Setting with key ${key} is not a valid ${expectedType}, make sure to have the correct content-type and a valid non-null value.`;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function assertResponse<T extends object>(\n  result: T,\n): asserts result is T & HttpResponseField<any> {\n  if (!hasUnderscoreResponse(result)) {\n    Object.defineProperty(result, \"_response\", {\n      enumerable: false,\n      value:\n        \"Something went wrong, _response(raw response) is supposed to be part of the response. Please file a bug at https://github.com/Azure/azure-sdk-for-js\",\n    });\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function hasUnderscoreResponse<T extends object>(\n  result: T,\n): result is T & HttpResponseField<any> {\n  return Object.prototype.hasOwnProperty.call(result, \"_response\");\n}\n"]}