{"version":3,"file":"appConfigurationClient.js","sourceRoot":"","sources":["../../src/appConfigurationClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// https://azure.github.io/azure-sdk/typescript_design.html#ts-config-lib\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  AddConfigurationSettingOptions,\n  AddConfigurationSettingParam,\n  AddConfigurationSettingResponse,\n  AppConfigurationClientOptions,\n  ConfigurationSetting,\n  ConfigurationSettingId,\n  CreateSnapshotOptions,\n  CreateSnapshotResponse,\n  DeleteConfigurationSettingOptions,\n  DeleteConfigurationSettingResponse,\n  GetConfigurationSettingOptions,\n  GetConfigurationSettingResponse,\n  GetSnapshotOptions,\n  GetSnapshotResponse,\n  HttpResponseField,\n  ListConfigurationSettingPage,\n  ListConfigurationSettingsForSnapshotOptions,\n  ListConfigurationSettingsOptions,\n  ListRevisionsOptions,\n  ListRevisionsPage,\n  ListSnapshotsOptions,\n  ListSnapshotsPage,\n  PageSettings,\n  SetConfigurationSettingOptions,\n  SetConfigurationSettingParam,\n  SetConfigurationSettingResponse,\n  SetReadOnlyOptions,\n  SetReadOnlyResponse,\n  SnapshotInfo,\n  UpdateSnapshotOptions,\n  UpdateSnapshotResponse,\n} from \"./models\";\nimport {\n  AppConfigurationGetKeyValuesHeaders,\n  AppConfigurationGetRevisionsHeaders,\n  AppConfigurationGetSnapshotsHeaders,\n  GetKeyValuesResponse,\n  GetRevisionsResponse,\n  GetSnapshotsResponse,\n  ConfigurationSnapshot,\n} from \"./generated/src/models\";\nimport { InternalClientPipelineOptions } from \"@azure/core-client\";\nimport { PagedAsyncIterableIterator, PagedResult, getPagedAsyncIterator } from \"@azure/core-paging\";\nimport {\n  PipelinePolicy,\n  bearerTokenAuthenticationPolicy,\n  RestError,\n} from \"@azure/core-rest-pipeline\";\nimport { SyncTokens, syncTokenPolicy } from \"./internal/synctokenpolicy\";\nimport { TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport {\n  SendConfigurationSettingsOptions,\n  assertResponse,\n  checkAndFormatIfAndIfNoneMatch,\n  extractAfterTokenFromLinkHeader,\n  extractAfterTokenFromNextLink,\n  formatAcceptDateTime,\n  formatConfigurationSettingsFiltersAndSelect,\n  formatFieldsForSelect,\n  formatFiltersAndSelect,\n  formatSnapshotFiltersAndSelect,\n  makeConfigurationSettingEmpty,\n  serializeAsConfigurationSettingParam,\n  transformKeyValue,\n  transformKeyValueResponse,\n  transformKeyValueResponseWithStatusCode,\n  transformSnapshotResponse,\n} from \"./internal/helpers\";\nimport { AppConfiguration } from \"./generated/src/appConfiguration\";\nimport { FeatureFlagValue } from \"./featureFlag\";\nimport { SecretReferenceValue } from \"./secretReference\";\nimport { appConfigKeyCredentialPolicy } from \"./appConfigCredential\";\nimport { tracingClient } from \"./internal/tracing\";\nimport { logger } from \"./logger\";\nimport { OperationState, SimplePollerLike } from \"@azure/core-lro\";\nimport { appConfigurationApiVersion } from \"./internal/constants\";\n\nconst ConnectionStringRegex = /Endpoint=(.*);Id=(.*);Secret=(.*)/;\nconst deserializationContentTypes = {\n  json: [\n    \"application/vnd.microsoft.appconfig.kvset+json\",\n    \"application/vnd.microsoft.appconfig.kv+json\",\n    \"application/vnd.microsoft.appconfig.kvs+json\",\n    \"application/vnd.microsoft.appconfig.keyset+json\",\n    \"application/vnd.microsoft.appconfig.revs+json\",\n    \"application/vnd.microsoft.appconfig.snapshotset+json\",\n    \"application/vnd.microsoft.appconfig.snapshot+json\",\n    \"application/json\",\n  ],\n};\n\n/**\n * Provides internal configuration options for AppConfigurationClient.\n * @internal\n */\nexport interface InternalAppConfigurationClientOptions extends AppConfigurationClientOptions {\n  /**\n   * The sync token cache to use for this client.\n   * NOTE: this is an internal option, not for general client usage.\n   */\n  syncTokens?: SyncTokens;\n}\n\n/**\n * Client for the Azure App Configuration service.\n */\nexport class AppConfigurationClient {\n  private client: AppConfiguration;\n  private _syncTokens: SyncTokens;\n\n  /**\n   * Initializes a new instance of the AppConfigurationClient class.\n   * @param connectionString - Connection string needed for a client to connect to Azure.\n   * @param options - Options for the AppConfigurationClient.\n   */\n  constructor(connectionString: string, options?: AppConfigurationClientOptions);\n  /**\n   * Initializes a new instance of the AppConfigurationClient class using\n   * a TokenCredential.\n   * @param endpoint - The endpoint of the App Configuration service (ex: https://sample.azconfig.io).\n   * @param tokenCredential - An object that implements the `TokenCredential` interface used to authenticate requests to the service. Use the \\@azure/identity package to create a credential that suits your needs.\n   * @param options - Options for the AppConfigurationClient.\n   */\n  constructor(\n    endpoint: string,\n    tokenCredential: TokenCredential,\n    options?: AppConfigurationClientOptions,\n  );\n  constructor(\n    connectionStringOrEndpoint: string,\n    tokenCredentialOrOptions?: TokenCredential | AppConfigurationClientOptions,\n    options?: AppConfigurationClientOptions,\n  ) {\n    let appConfigOptions: InternalAppConfigurationClientOptions = {};\n    let appConfigCredential: TokenCredential;\n    let appConfigEndpoint: string;\n    let authPolicy: PipelinePolicy;\n\n    if (isTokenCredential(tokenCredentialOrOptions)) {\n      appConfigOptions = (options as InternalAppConfigurationClientOptions) || {};\n      appConfigCredential = tokenCredentialOrOptions;\n      appConfigEndpoint = connectionStringOrEndpoint.endsWith(\"/\")\n        ? connectionStringOrEndpoint.slice(0, -1)\n        : connectionStringOrEndpoint;\n      authPolicy = bearerTokenAuthenticationPolicy({\n        scopes: `${appConfigEndpoint}/.default`,\n        credential: appConfigCredential,\n      });\n    } else {\n      appConfigOptions = (tokenCredentialOrOptions as InternalAppConfigurationClientOptions) || {};\n      const regexMatch = connectionStringOrEndpoint?.match(ConnectionStringRegex);\n      if (regexMatch) {\n        appConfigEndpoint = regexMatch[1];\n        authPolicy = appConfigKeyCredentialPolicy(regexMatch[2], regexMatch[3]);\n      } else {\n        throw new Error(\n          `Invalid connection string. Valid connection strings should match the regex '${ConnectionStringRegex.source}'.` +\n            ` To mitigate the issue, please refer to the troubleshooting guide here at https://aka.ms/azsdk/js/app-configuration/troubleshoot.`,\n        );\n      }\n    }\n\n    const internalClientPipelineOptions: InternalClientPipelineOptions = {\n      ...appConfigOptions,\n      loggingOptions: {\n        logger: logger.info,\n      },\n      deserializationOptions: {\n        expectedContentTypes: deserializationContentTypes,\n      },\n    };\n\n    this._syncTokens = appConfigOptions.syncTokens || new SyncTokens();\n    this.client = new AppConfiguration(\n      appConfigEndpoint,\n      appConfigurationApiVersion,\n      internalClientPipelineOptions,\n    );\n    this.client.pipeline.addPolicy(authPolicy, { phase: \"Sign\" });\n    this.client.pipeline.addPolicy(syncTokenPolicy(this._syncTokens), { afterPhase: \"Retry\" });\n  }\n\n  /**\n   * Add a setting into the Azure App Configuration service, failing if it\n   * already exists.\n   *\n   * Example usage:\n   * ```ts\n   * const result = await client.addConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\", value: \"MyValue\" });\n   * ```\n   * @param configurationSetting - A configuration setting.\n   * @param options - Optional parameters for the request.\n   */\n  addConfigurationSetting(\n    configurationSetting:\n      | AddConfigurationSettingParam\n      | AddConfigurationSettingParam<FeatureFlagValue>\n      | AddConfigurationSettingParam<SecretReferenceValue>,\n    options: AddConfigurationSettingOptions = {},\n  ): Promise<AddConfigurationSettingResponse> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.addConfigurationSetting\",\n      options,\n      async (updatedOptions) => {\n        const keyValue = serializeAsConfigurationSettingParam(configurationSetting);\n        logger.info(\"[addConfigurationSetting] Creating a key value pair\");\n        try {\n          const originalResponse = await this.client.putKeyValue(configurationSetting.key, {\n            ifNoneMatch: \"*\",\n            label: configurationSetting.label,\n            entity: keyValue,\n            ...updatedOptions,\n          });\n          const response = transformKeyValueResponse(originalResponse);\n          assertResponse(response);\n          return response;\n        } catch (error) {\n          const err = error as RestError;\n          // Service does not return an error message. Raise a 412 error similar to .NET\n          if (err.statusCode === 412) {\n            err.message = `Status 412: Setting was already present`;\n          }\n          throw err;\n        }\n        throw new Error(\"Unreachable code\");\n      },\n    );\n  }\n\n  /**\n   * Delete a setting from the Azure App Configuration service\n   *\n   * Example usage:\n   * ```ts\n   * const deletedSetting = await client.deleteConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\" });\n   * ```\n   * @param id - The id of the configuration setting to delete.\n   * @param options - Optional parameters for the request (ex: etag, label)\n   */\n  deleteConfigurationSetting(\n    id: ConfigurationSettingId,\n    options: DeleteConfigurationSettingOptions = {},\n  ): Promise<DeleteConfigurationSettingResponse> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.deleteConfigurationSetting\",\n      options,\n      async (updatedOptions) => {\n        let status;\n        logger.info(\"[deleteConfigurationSetting] Deleting key value pair\");\n        const originalResponse = await this.client.deleteKeyValue(id.key, {\n          label: id.label,\n          ...updatedOptions,\n          ...checkAndFormatIfAndIfNoneMatch(id, options),\n          onResponse: (response) => {\n            status = response.status;\n          },\n        });\n\n        const response = transformKeyValueResponseWithStatusCode(originalResponse, status);\n        assertResponse(response);\n        return response;\n      },\n    );\n  }\n\n  /**\n   * Gets a setting from the Azure App Configuration service.\n   *\n   * Example code:\n   * ```ts\n   * const setting = await client.getConfigurationSetting({ key: \"MyKey\", label: \"MyLabel\" });\n   * ```\n   * @param id - The id of the configuration setting to get.\n   * @param options - Optional parameters for the request.\n   */\n  async getConfigurationSetting(\n    id: ConfigurationSettingId,\n    options: GetConfigurationSettingOptions = {},\n  ): Promise<GetConfigurationSettingResponse> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.getConfigurationSetting\",\n      options,\n      async (updatedOptions) => {\n        let status;\n        logger.info(\"[getConfigurationSetting] Getting key value pair\");\n        const originalResponse = await this.client.getKeyValue(id.key, {\n          ...updatedOptions,\n          label: id.label,\n          select: formatFieldsForSelect(options.fields),\n          ...formatAcceptDateTime(options),\n          ...checkAndFormatIfAndIfNoneMatch(id, options),\n          onResponse: (response) => {\n            status = response.status;\n          },\n        });\n\n        const response = transformKeyValueResponseWithStatusCode(originalResponse, status);\n\n        // 304 only comes back if the user has passed a conditional option in their\n        // request _and_ the remote object has the same etag as what the user passed.\n        if (response.statusCode === 304) {\n          // this is one of our few 'required' fields so we'll make sure it does get initialized\n          // with a value\n          response.key = id.key;\n\n          // and now we'll undefine all the other properties that are not HTTP related\n          makeConfigurationSettingEmpty(response);\n        }\n        assertResponse(response);\n        return response;\n      },\n    );\n  }\n\n  /**\n   * Lists settings from the Azure App Configuration service, optionally\n   * filtered by key names, labels and accept datetime.\n   *\n   * Example code:\n   * ```ts\n   * const allSettingsWithLabel = client.listConfigurationSettings({ labelFilter: \"MyLabel\" });\n   * ```\n   * @param options - Optional parameters for the request.\n   */\n  listConfigurationSettings(\n    options: ListConfigurationSettingsOptions = {},\n  ): PagedAsyncIterableIterator<ConfigurationSetting, ListConfigurationSettingPage, PageSettings> {\n    const pageEtags = options.pageEtags ? [...options.pageEtags] : undefined;\n    delete options.pageEtags;\n    const etag = pageEtags?.shift();\n    const pagedResult: PagedResult<ListConfigurationSettingPage, PageSettings, string | undefined> =\n      {\n        firstPageLink: undefined,\n        getPage: async (pageLink: string | undefined) => {\n          try {\n            const response = await this.sendConfigurationSettingsRequest(\n              { ...options, etag },\n              pageLink,\n            );\n            const currentResponse: ListConfigurationSettingPage = {\n              ...response,\n              items: response.items != null ? response.items?.map(transformKeyValue) : [],\n              continuationToken: response.nextLink\n                ? extractAfterTokenFromNextLink(response.nextLink)\n                : undefined,\n              _response: response._response,\n            };\n            return {\n              page: currentResponse,\n              nextPageLink: currentResponse.continuationToken,\n            };\n          } catch (error) {\n            const err = error as RestError;\n\n            const link = err.response?.headers?.get(\"link\");\n            const continuationToken = link ? extractAfterTokenFromLinkHeader(link) : undefined;\n\n            if (err.statusCode === 304) {\n              err.message = `Status 304: No updates for this page`;\n              logger.info(\n                `[listConfigurationSettings] No updates for this page. The current etag for the page is ${etag}`,\n              );\n              return {\n                page: {\n                  items: [],\n                  etag,\n                  _response: { ...err.response, status: 304 },\n                } as unknown as ListConfigurationSettingPage,\n                nextPageLink: continuationToken,\n              };\n            }\n\n            throw err;\n          }\n        },\n        toElements: (page) => page.items,\n      };\n    return getPagedAsyncIterator(pagedResult);\n  }\n\n  /**\n   * Lists settings from the Azure App Configuration service for snapshots based on name, optionally\n   * filtered by key names, labels and accept datetime.\n   *\n   * Example code:\n   * ```ts\n   * const allSettingsWithLabel = client.listConfigurationSettingsForSnashots({ snapshotName: \"MySnapshot\" });\n   * ```\n   * @param options - Optional parameters for the request.\n   */\n  listConfigurationSettingsForSnapshot(\n    snapshotName: string,\n    options: ListConfigurationSettingsForSnapshotOptions = {},\n  ): PagedAsyncIterableIterator<ConfigurationSetting, ListConfigurationSettingPage, PageSettings> {\n    const pagedResult: PagedResult<ListConfigurationSettingPage, PageSettings, string | undefined> =\n      {\n        firstPageLink: undefined,\n        getPage: async (pageLink: string | undefined) => {\n          const response = await this.sendConfigurationSettingsRequest(\n            { snapshotName, ...options },\n            pageLink,\n          );\n          const currentResponse = {\n            ...response,\n            items: response.items != null ? response.items?.map(transformKeyValue) : [],\n            continuationToken: response.nextLink\n              ? extractAfterTokenFromNextLink(response.nextLink)\n              : undefined,\n          };\n          return {\n            page: currentResponse,\n            nextPageLink: currentResponse.continuationToken,\n          };\n        },\n        toElements: (page) => page.items,\n      };\n    return getPagedAsyncIterator(pagedResult);\n  }\n\n  private async sendConfigurationSettingsRequest(\n    options: SendConfigurationSettingsOptions & PageSettings = {},\n    pageLink: string | undefined,\n  ): Promise<GetKeyValuesResponse & HttpResponseField<AppConfigurationGetKeyValuesHeaders>> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.listConfigurationSettings\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.getKeyValues({\n          ...updatedOptions,\n          ...formatAcceptDateTime(options),\n          ...formatConfigurationSettingsFiltersAndSelect(options),\n          ...checkAndFormatIfAndIfNoneMatch({ etag: options.etag }, { onlyIfChanged: true }),\n          after: pageLink,\n        });\n\n        return response as GetKeyValuesResponse &\n          HttpResponseField<AppConfigurationGetKeyValuesHeaders>;\n      },\n    );\n  }\n  /**\n   * Lists revisions of a set of keys, optionally filtered by key names,\n   * labels and accept datetime.\n   *\n   * Example code:\n   * ```ts\n   * const revisionsIterator = client.listRevisions({ keys: [\"MyKey\"] });\n   * ```\n   * @param options - Optional parameters for the request.\n   */\n  listRevisions(\n    options?: ListRevisionsOptions,\n  ): PagedAsyncIterableIterator<ConfigurationSetting, ListRevisionsPage, PageSettings> {\n    const pagedResult: PagedResult<ListRevisionsPage, PageSettings, string | undefined> = {\n      firstPageLink: undefined,\n      getPage: async (pageLink: string | undefined) => {\n        const response = await this.sendRevisionsRequest(options, pageLink);\n        const currentResponse = {\n          ...response,\n          items: response.items != null ? response.items.map(transformKeyValue) : [],\n          continuationToken: response.nextLink\n            ? extractAfterTokenFromNextLink(response.nextLink)\n            : undefined,\n        };\n        // let itemList = currentResponse.items;\n        return {\n          page: currentResponse,\n          nextPageLink: currentResponse.continuationToken,\n        };\n      },\n      toElements: (page) => page.items,\n    };\n    return getPagedAsyncIterator(pagedResult);\n  }\n\n  private async sendRevisionsRequest(\n    options: ListConfigurationSettingsOptions & PageSettings = {},\n    pageLink: string | undefined,\n  ): Promise<GetKeyValuesResponse & HttpResponseField<AppConfigurationGetKeyValuesHeaders>> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.listRevisions\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.getRevisions({\n          ...updatedOptions,\n          ...formatAcceptDateTime(options),\n          ...formatFiltersAndSelect(updatedOptions),\n          after: pageLink,\n        });\n\n        return response as GetRevisionsResponse &\n          HttpResponseField<AppConfigurationGetRevisionsHeaders>;\n      },\n    );\n  }\n\n  /**\n   * Sets the value of a key in the Azure App Configuration service, allowing for an optional etag.\n   * @param key - The name of the key.\n   * @param configurationSetting - A configuration value.\n   * @param options - Optional parameters for the request.\n   *\n   * Example code:\n   * ```ts\n   * await client.setConfigurationSetting({ key: \"MyKey\", value: \"MyValue\" });\n   * ```\n   */\n  async setConfigurationSetting(\n    configurationSetting:\n      | SetConfigurationSettingParam\n      | SetConfigurationSettingParam<FeatureFlagValue>\n      | SetConfigurationSettingParam<SecretReferenceValue>,\n    options: SetConfigurationSettingOptions = {},\n  ): Promise<SetConfigurationSettingResponse> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.setConfigurationSetting\",\n      options,\n      async (updatedOptions) => {\n        const keyValue = serializeAsConfigurationSettingParam(configurationSetting);\n        logger.info(\"[setConfigurationSetting] Setting new key value\");\n        const response = transformKeyValueResponse(\n          await this.client.putKeyValue(configurationSetting.key, {\n            ...updatedOptions,\n            label: configurationSetting.label,\n            entity: keyValue,\n            ...checkAndFormatIfAndIfNoneMatch(configurationSetting, options),\n          }),\n        );\n        assertResponse(response);\n        return response;\n      },\n    );\n  }\n\n  /**\n   * Sets or clears a key's read-only status.\n   * @param id - The id of the configuration setting to modify.\n   */\n  async setReadOnly(\n    id: ConfigurationSettingId,\n    readOnly: boolean,\n    options: SetReadOnlyOptions = {},\n  ): Promise<SetReadOnlyResponse> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.setReadOnly\",\n      options,\n      async (newOptions) => {\n        let response;\n        if (readOnly) {\n          logger.info(\"[setReadOnly] Setting read-only status to ${readOnly}\");\n          response = await this.client.putLock(id.key, {\n            ...newOptions,\n            label: id.label,\n            ...checkAndFormatIfAndIfNoneMatch(id, options),\n          });\n        } else {\n          logger.info(\"[setReadOnly] Deleting read-only lock\");\n          response = await this.client.deleteLock(id.key, {\n            ...newOptions,\n            label: id.label,\n            ...checkAndFormatIfAndIfNoneMatch(id, options),\n          });\n        }\n        response = transformKeyValueResponse(response);\n        assertResponse(response);\n        return response;\n      },\n    );\n  }\n\n  /**\n   * Adds an external synchronization token to ensure service requests receive up-to-date values.\n   *\n   * @param syncToken - The synchronization token value.\n   */\n  updateSyncToken(syncToken: string): void {\n    this._syncTokens.addSyncTokenFromHeaderValue(syncToken);\n  }\n\n  /**\n   * Begins creating a snapshot for Azure App Configuration service, fails if it\n   * already exists.\n   */\n  beginCreateSnapshot(\n    snapshot: SnapshotInfo,\n    options: CreateSnapshotOptions = {},\n  ): Promise<SimplePollerLike<OperationState<CreateSnapshotResponse>, CreateSnapshotResponse>> {\n    return tracingClient.withSpan(\n      `${AppConfigurationClient.name}.beginCreateSnapshot`,\n      options,\n      (updatedOptions) =>\n        this.client.beginCreateSnapshot(snapshot.name, snapshot, { ...updatedOptions }),\n    );\n  }\n\n  /**\n   * Begins creating a snapshot for Azure App Configuration service, waits until it is done,\n   * fails if it already exists.\n   */\n  beginCreateSnapshotAndWait(\n    snapshot: SnapshotInfo,\n    options: CreateSnapshotOptions = {},\n  ): Promise<CreateSnapshotResponse> {\n    return tracingClient.withSpan(\n      `${AppConfigurationClient.name}.beginCreateSnapshotAndWait`,\n      options,\n      (updatedOptions) =>\n        this.client.beginCreateSnapshotAndWait(snapshot.name, snapshot, { ...updatedOptions }),\n    );\n  }\n\n  /**\n   * Get a snapshot from Azure App Configuration service\n   *\n   * Example usage:\n   * ```ts\n   * const result = await client.getSnapshot(\"MySnapshot\");\n   * ```\n   * @param name - The name of the snapshot.\n   * @param options - Optional parameters for the request.\n   */\n  getSnapshot(name: string, options: GetSnapshotOptions = {}): Promise<GetSnapshotResponse> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.getSnapshot\",\n      options,\n      async (updatedOptions) => {\n        logger.info(\"[getSnapshot] Get a snapshot\");\n        const originalResponse = await this.client.getSnapshot(name, {\n          ...updatedOptions,\n        });\n        const response = transformSnapshotResponse(originalResponse);\n        assertResponse(response);\n        return response;\n      },\n    );\n  }\n\n  /**\n   * Recover an archived snapshot back to ready status\n   *\n   * Example usage:\n   * ```ts\n   * const result = await client.recoverSnapshot(\"MySnapshot\");\n   * ```\n   * @param name - The name of the snapshot.\n   * @param options - Optional parameters for the request.\n   */\n  recoverSnapshot(\n    name: string,\n    options: UpdateSnapshotOptions = {},\n  ): Promise<UpdateSnapshotResponse> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.recoverSnapshot\",\n      options,\n      async (updatedOptions) => {\n        logger.info(\"[recoverSnapshot] Recover a snapshot\");\n        const originalResponse = await this.client.updateSnapshot(\n          name,\n          { status: \"ready\" },\n          {\n            ...updatedOptions,\n            ...checkAndFormatIfAndIfNoneMatch(\n              { etag: options.etag },\n              { onlyIfUnchanged: true, ...options },\n            ),\n          },\n        );\n        const response = transformSnapshotResponse(originalResponse);\n        assertResponse(response);\n        return response;\n      },\n    );\n  }\n  /**\n   * Archive a ready snapshot\n   *\n   * Example usage:\n   * ```ts\n   * const result = await client.archiveSnapshot({name: \"MySnapshot\"});\n   * ```\n   * @param name - The name of the snapshot.\n   * @param options - Optional parameters for the request.\n   */\n  archiveSnapshot(\n    name: string,\n    options: UpdateSnapshotOptions = {},\n  ): Promise<UpdateSnapshotResponse> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.archiveSnapshot\",\n      options,\n      async (updatedOptions) => {\n        logger.info(\"[archiveSnapshot] Archive a snapshot\");\n        const originalResponse = await this.client.updateSnapshot(\n          name,\n          { status: \"archived\" },\n          {\n            ...updatedOptions,\n            ...checkAndFormatIfAndIfNoneMatch(\n              { etag: options.etag },\n              { onlyIfUnchanged: true, ...options },\n            ),\n          },\n        );\n        const response = transformSnapshotResponse(originalResponse);\n        assertResponse(response);\n        return response;\n      },\n    );\n  }\n\n  /**\n   * List all snapshots from Azure App Configuration service\n   *\n   * Example usage:\n   * ```ts\n   * const result = await client.listSnapshots();\n   * ```\n   * @param options - Optional parameters for the request.\n   */\n  listSnapshots(\n    options: ListSnapshotsOptions = {},\n  ): PagedAsyncIterableIterator<ConfigurationSnapshot, ListSnapshotsPage, PageSettings> {\n    const pagedResult: PagedResult<ListSnapshotsPage, PageSettings, string | undefined> = {\n      firstPageLink: undefined,\n      getPage: async (pageLink: string | undefined) => {\n        const response = await this.sendSnapShotsRequest(options, pageLink);\n        const currentResponse = {\n          ...response,\n          items: response.items != null ? response.items : [],\n          continuationToken: response.nextLink\n            ? extractAfterTokenFromNextLink(response.nextLink)\n            : undefined,\n        };\n        return {\n          page: currentResponse,\n          nextPageLink: currentResponse.continuationToken,\n        };\n      },\n      toElements: (page) => page.items,\n    };\n    return getPagedAsyncIterator(pagedResult);\n  }\n\n  private async sendSnapShotsRequest(\n    options: ListSnapshotsOptions & PageSettings = {},\n    pageLink: string | undefined,\n  ): Promise<GetSnapshotsResponse & HttpResponseField<AppConfigurationGetSnapshotsHeaders>> {\n    return tracingClient.withSpan(\n      \"AppConfigurationClient.listSnapshots\",\n      options,\n      async (updatedOptions) => {\n        const response = await this.client.getSnapshots({\n          ...updatedOptions,\n          ...formatSnapshotFiltersAndSelect(options),\n          after: pageLink,\n        });\n\n        return response as GetSnapshotsResponse &\n          HttpResponseField<AppConfigurationGetSnapshotsHeaders>;\n      },\n    );\n  }\n}\n"]}