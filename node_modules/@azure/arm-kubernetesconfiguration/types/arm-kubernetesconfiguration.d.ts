import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** Defines values for AKSIdentityType. */
export declare type AKSIdentityType = "SystemAssigned" | "UserAssigned";

/** Parameters to reconcile to the AzureBlob source kind type. */
export declare interface AzureBlobDefinition {
    /** The URL to sync for the flux configuration Azure Blob storage account. */
    url?: string;
    /** The Azure Blob container name to sync from the url endpoint for the flux configuration. */
    containerName?: string;
    /** The maximum time to attempt to reconcile the cluster Azure Blob source with the remote. */
    timeoutInSeconds?: number;
    /** The interval at which to re-reconcile the cluster Azure Blob source with the remote. */
    syncIntervalInSeconds?: number;
    /** Parameters to authenticate using Service Principal. */
    servicePrincipal?: ServicePrincipalDefinition;
    /** The account key (shared key) to access the storage account */
    accountKey?: string;
    /** The Shared Access token to access the storage container */
    sasToken?: string;
    /** Parameters to authenticate using a Managed Identity. */
    managedIdentity?: ManagedIdentityDefinition;
    /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
    localAuthRef?: string;
}

/** Parameters to reconcile to the AzureBlob source kind type. */
export declare interface AzureBlobPatchDefinition {
    /** The URL to sync for the flux configuration Azure Blob storage account. */
    url?: string;
    /** The Azure Blob container name to sync from the url endpoint for the flux configuration. */
    containerName?: string;
    /** The maximum time to attempt to reconcile the cluster Azure Blob source with the remote. */
    timeoutInSeconds?: number;
    /** The interval at which to re-reconcile the cluster Azure Blob source with the remote. */
    syncIntervalInSeconds?: number;
    /** Parameters to authenticate using Service Principal. */
    servicePrincipal?: ServicePrincipalPatchDefinition;
    /** The account key (shared key) to access the storage account */
    accountKey?: string;
    /** The Shared Access token to access the storage container */
    sasToken?: string;
    /** Parameters to authenticate using a Managed Identity. */
    managedIdentity?: ManagedIdentityPatchDefinition;
    /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
    localAuthRef?: string;
}

/** Parameters to reconcile to the Bucket source kind type. */
export declare interface BucketDefinition {
    /** The URL to sync for the flux configuration S3 bucket. */
    url?: string;
    /** The bucket name to sync from the url endpoint for the flux configuration. */
    bucketName?: string;
    /** Specify whether to use insecure communication when puling data from the S3 bucket. */
    insecure?: boolean;
    /** The maximum time to attempt to reconcile the cluster bucket source with the remote. */
    timeoutInSeconds?: number;
    /** The interval at which to re-reconcile the cluster bucket source with the remote. */
    syncIntervalInSeconds?: number;
    /** Plaintext access key used to securely access the S3 bucket */
    accessKey?: string;
    /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
    localAuthRef?: string;
}

/** Parameters to reconcile to the Bucket source kind type. */
export declare interface BucketPatchDefinition {
    /** The URL to sync for the flux configuration S3 bucket. */
    url?: string;
    /** The bucket name to sync from the url endpoint for the flux configuration. */
    bucketName?: string;
    /** Specify whether to use insecure communication when puling data from the S3 bucket. */
    insecure?: boolean;
    /** The maximum time to attempt to reconcile the cluster bucket source with the remote. */
    timeoutInSeconds?: number;
    /** The interval at which to re-reconcile the cluster bucket source with the remote. */
    syncIntervalInSeconds?: number;
    /** Plaintext access key used to securely access the S3 bucket */
    accessKey?: string;
    /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
    localAuthRef?: string;
}

/**
 * Defines values for ComplianceStateType. \
 * {@link KnownComplianceStateType} can be used interchangeably with ComplianceStateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Compliant** \
 * **Noncompliant** \
 * **Installed** \
 * **Failed**
 */
export declare type ComplianceStateType = string;

/** Compliance Status details */
export declare interface ComplianceStatus {
    /**
     * The compliance state of the configuration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly complianceState?: ComplianceStateType;
    /** Datetime the configuration was last applied. */
    lastConfigApplied?: Date;
    /** Message from when the configuration was applied. */
    message?: string;
    /** Level of the message. */
    messageLevel?: MessageLevelType;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** The Extension object. */
export declare interface Extension extends ProxyResource {
    /** Identity of the Extension resource */
    identity?: Identity;
    /**
     * Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The plan information. */
    plan?: Plan;
    /** Type of the Extension, of which this resource is an instance of.  It must be one of the Extension Types registered with Microsoft.KubernetesConfiguration by the Extension publisher. */
    extensionType?: string;
    /** Flag to note if this extension participates in auto upgrade of minor version, or not. */
    autoUpgradeMinorVersion?: boolean;
    /** ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'. */
    releaseTrain?: string;
    /** User-specified version of the extension for this extension to 'pin'. To use 'version', autoUpgradeMinorVersion must be 'false'. */
    version?: string;
    /** Scope at which the extension is installed. */
    scope?: Scope;
    /** Configuration settings, as name-value pairs for configuring this extension. */
    configurationSettings?: {
        [propertyName: string]: string;
    };
    /** Configuration settings that are sensitive, as name-value pairs for configuring this extension. */
    configurationProtectedSettings?: {
        [propertyName: string]: string;
    };
    /**
     * Currently installed version of the extension.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentVersion?: string;
    /**
     * Status of installation of this extension.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** Status from this extension. */
    statuses?: ExtensionStatus[];
    /**
     * Error information from the Agent - e.g. errors during installation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorInfo?: ErrorDetail;
    /**
     * Custom Location settings properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customLocationSettings?: {
        [propertyName: string]: string;
    };
    /**
     * Uri of the Helm package
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly packageUri?: string;
    /** Identity of the Extension resource in an AKS cluster */
    aksAssignedIdentity?: ExtensionPropertiesAksAssignedIdentity;
    /**
     * Flag to note if this extension is a system extension
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isSystemExtension?: boolean;
}

/** Identity of the Extension resource in an AKS cluster */
export declare interface ExtensionPropertiesAksAssignedIdentity {
    /**
     * The principal ID of resource identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The identity type. */
    type?: AKSIdentityType;
}

/** Interface representing a Extensions. */
export declare interface Extensions {
    /**
     * List all Extensions in the cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, options?: ExtensionsListOptionalParams): PagedAsyncIterableIterator<Extension>;
    /**
     * Create a new Kubernetes Cluster Extension.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param extension Properties necessary to Create an Extension.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, extensionName: string, extension: Extension, options?: ExtensionsCreateOptionalParams): Promise<SimplePollerLike<OperationState<ExtensionsCreateResponse>, ExtensionsCreateResponse>>;
    /**
     * Create a new Kubernetes Cluster Extension.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param extension Properties necessary to Create an Extension.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, extensionName: string, extension: Extension, options?: ExtensionsCreateOptionalParams): Promise<ExtensionsCreateResponse>;
    /**
     * Gets Kubernetes Cluster Extension.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, extensionName: string, options?: ExtensionsGetOptionalParams): Promise<ExtensionsGetResponse>;
    /**
     * Delete a Kubernetes Cluster Extension. This will cause the Agent to Uninstall the extension from the
     * cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, extensionName: string, options?: ExtensionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a Kubernetes Cluster Extension. This will cause the Agent to Uninstall the extension from the
     * cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, extensionName: string, options?: ExtensionsDeleteOptionalParams): Promise<void>;
    /**
     * Patch an existing Kubernetes Cluster Extension.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param patchExtension Properties to Patch in an existing Extension.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, extensionName: string, patchExtension: PatchExtension, options?: ExtensionsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ExtensionsUpdateResponse>, ExtensionsUpdateResponse>>;
    /**
     * Patch an existing Kubernetes Cluster Extension.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param patchExtension Properties to Patch in an existing Extension.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, extensionName: string, patchExtension: PatchExtension, options?: ExtensionsUpdateOptionalParams): Promise<ExtensionsUpdateResponse>;
}

/** Optional parameters. */
export declare interface ExtensionsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ExtensionsCreateResponse = Extension;

/** Optional parameters. */
export declare interface ExtensionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delete the extension resource in Azure - not the normal asynchronous delete. */
    forceDelete?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ExtensionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ExtensionsGetResponse = Extension;

/** Result of the request to list Extensions.  It contains a list of Extension objects and a URL link to get the next set of results. */
export declare interface ExtensionsList {
    /**
     * List of Extensions within a Kubernetes cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Extension[];
    /**
     * URL to get the next set of extension objects, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface ExtensionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ExtensionsListNextResponse = ExtensionsList;

/** Optional parameters. */
export declare interface ExtensionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ExtensionsListResponse = ExtensionsList;

/** Status from the extension. */
export declare interface ExtensionStatus {
    /** Status code provided by the Extension */
    code?: string;
    /** Short description of status of the extension. */
    displayStatus?: string;
    /** Level of the status. */
    level?: LevelType;
    /** Detailed message of the status from the Extension. */
    message?: string;
    /** DateLiteral (per ISO8601) noting the time of installation status. */
    time?: string;
}

/** Optional parameters. */
export declare interface ExtensionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ExtensionsUpdateResponse = Extension;

/**
 * Defines values for FluxComplianceState. \
 * {@link KnownFluxComplianceState} can be used interchangeably with FluxComplianceState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Compliant** \
 * **Non-Compliant** \
 * **Pending** \
 * **Suspended** \
 * **Unknown**
 */
export declare type FluxComplianceState = string;

/** Interface representing a FluxConfigOperationStatus. */
export declare interface FluxConfigOperationStatus {
    /**
     * Get Async Operation status
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param operationId operation Id
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, fluxConfigurationName: string, operationId: string, options?: FluxConfigOperationStatusGetOptionalParams): Promise<FluxConfigOperationStatusGetResponse>;
}

/** Optional parameters. */
export declare interface FluxConfigOperationStatusGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type FluxConfigOperationStatusGetResponse = OperationStatusResult;

/** The Flux Configuration object returned in Get & Put response. */
export declare interface FluxConfiguration extends ProxyResource {
    /**
     * Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Scope at which the operator will be installed. */
    scope?: ScopeType;
    /** The namespace to which this configuration is installed to. Maximum of 253 lower case alphanumeric characters, hyphen and period only. */
    namespace?: string;
    /** Source Kind to pull the configuration data from. */
    sourceKind?: SourceKindType;
    /** Whether this configuration should suspend its reconciliation of its kustomizations and sources. */
    suspend?: boolean;
    /** Parameters to reconcile to the GitRepository source kind type. */
    gitRepository?: GitRepositoryDefinition;
    /** Parameters to reconcile to the Bucket source kind type. */
    bucket?: BucketDefinition;
    /** Parameters to reconcile to the AzureBlob source kind type. */
    azureBlob?: AzureBlobDefinition;
    /** Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster. */
    kustomizations?: {
        [propertyName: string]: KustomizationDefinition | null;
    };
    /** Key-value pairs of protected configuration settings for the configuration */
    configurationProtectedSettings?: {
        [propertyName: string]: string;
    };
    /**
     * Statuses of the Flux Kubernetes resources created by the fluxConfiguration or created by the managed objects provisioned by the fluxConfiguration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statuses?: (ObjectStatusDefinition | null)[];
    /**
     * Public Key associated with this fluxConfiguration (either generated within the cluster or provided by the user).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly repositoryPublicKey?: string;
    /**
     * Branch and/or SHA of the source commit synced with the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceSyncedCommitId?: string;
    /**
     * Datetime the fluxConfiguration synced its source on the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceUpdatedAt?: Date;
    /**
     * Datetime the fluxConfiguration synced its status on the cluster with Azure.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statusUpdatedAt?: Date;
    /** Whether flux configuration deployment should wait for cluster to reconcile the kustomizations. */
    waitForReconciliation?: boolean;
    /** Maximum duration to wait for flux configuration reconciliation. E.g PT1H, PT5M, P1D */
    reconciliationWaitDuration?: string;
    /**
     * Combined status of the Flux Kubernetes resources created by the fluxConfiguration or created by the managed objects.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly complianceState?: FluxComplianceState;
    /**
     * Status of the creation of the fluxConfiguration.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * Error message returned to the user in the case of provisioning failure.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorMessage?: string;
}

/** The Flux Configuration Patch Request object. */
export declare interface FluxConfigurationPatch {
    /** Source Kind to pull the configuration data from. */
    sourceKind?: SourceKindType;
    /** Whether this configuration should suspend its reconciliation of its kustomizations and sources. */
    suspend?: boolean;
    /** Parameters to reconcile to the GitRepository source kind type. */
    gitRepository?: GitRepositoryPatchDefinition;
    /** Parameters to reconcile to the Bucket source kind type. */
    bucket?: BucketPatchDefinition;
    /** Parameters to reconcile to the AzureBlob source kind type. */
    azureBlob?: AzureBlobPatchDefinition;
    /** Array of kustomizations used to reconcile the artifact pulled by the source type on the cluster. */
    kustomizations?: {
        [propertyName: string]: KustomizationPatchDefinition | null;
    };
    /** Key-value pairs of protected configuration settings for the configuration */
    configurationProtectedSettings?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a FluxConfigurations. */
export declare interface FluxConfigurations {
    /**
     * List all Flux Configurations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, options?: FluxConfigurationsListOptionalParams): PagedAsyncIterableIterator<FluxConfiguration>;
    /**
     * Gets details of the Flux Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, fluxConfigurationName: string, options?: FluxConfigurationsGetOptionalParams): Promise<FluxConfigurationsGetResponse>;
    /**
     * Create a new Kubernetes Flux Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param fluxConfiguration Properties necessary to Create a FluxConfiguration.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, fluxConfigurationName: string, fluxConfiguration: FluxConfiguration, options?: FluxConfigurationsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<FluxConfigurationsCreateOrUpdateResponse>, FluxConfigurationsCreateOrUpdateResponse>>;
    /**
     * Create a new Kubernetes Flux Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param fluxConfiguration Properties necessary to Create a FluxConfiguration.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, fluxConfigurationName: string, fluxConfiguration: FluxConfiguration, options?: FluxConfigurationsCreateOrUpdateOptionalParams): Promise<FluxConfigurationsCreateOrUpdateResponse>;
    /**
     * Update an existing Kubernetes Flux Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param fluxConfigurationPatch Properties to Patch in an existing Flux Configuration.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, fluxConfigurationName: string, fluxConfigurationPatch: FluxConfigurationPatch, options?: FluxConfigurationsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<FluxConfigurationsUpdateResponse>, FluxConfigurationsUpdateResponse>>;
    /**
     * Update an existing Kubernetes Flux Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param fluxConfigurationPatch Properties to Patch in an existing Flux Configuration.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, fluxConfigurationName: string, fluxConfigurationPatch: FluxConfigurationPatch, options?: FluxConfigurationsUpdateOptionalParams): Promise<FluxConfigurationsUpdateResponse>;
    /**
     * This will delete the YAML file used to set up the Flux Configuration, thus stopping future sync from
     * the source repo.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, fluxConfigurationName: string, options?: FluxConfigurationsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * This will delete the YAML file used to set up the Flux Configuration, thus stopping future sync from
     * the source repo.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, fluxConfigurationName: string, options?: FluxConfigurationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface FluxConfigurationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type FluxConfigurationsCreateOrUpdateResponse = FluxConfiguration;

/** Optional parameters. */
export declare interface FluxConfigurationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delete the extension resource in Azure - not the normal asynchronous delete. */
    forceDelete?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface FluxConfigurationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type FluxConfigurationsGetResponse = FluxConfiguration;

/** Result of the request to list Flux Configurations.  It contains a list of FluxConfiguration objects and a URL link to get the next set of results. */
export declare interface FluxConfigurationsList {
    /**
     * List of Flux Configurations within a Kubernetes cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: FluxConfiguration[];
    /**
     * URL to get the next set of configuration objects, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface FluxConfigurationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type FluxConfigurationsListNextResponse = FluxConfigurationsList;

/** Optional parameters. */
export declare interface FluxConfigurationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type FluxConfigurationsListResponse = FluxConfigurationsList;

/** Optional parameters. */
export declare interface FluxConfigurationsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type FluxConfigurationsUpdateResponse = FluxConfiguration;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Parameters to reconcile to the GitRepository source kind type. */
export declare interface GitRepositoryDefinition {
    /** The URL to sync for the flux configuration git repository. */
    url?: string;
    /** The maximum time to attempt to reconcile the cluster git repository source with the remote. */
    timeoutInSeconds?: number;
    /** The interval at which to re-reconcile the cluster git repository source with the remote. */
    syncIntervalInSeconds?: number;
    /** The source reference for the GitRepository object. */
    repositoryRef?: RepositoryRefDefinition;
    /** Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH */
    sshKnownHosts?: string;
    /** Plaintext HTTPS username used to access private git repositories over HTTPS */
    httpsUser?: string;
    /** Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS */
    httpsCACert?: string;
    /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
    localAuthRef?: string;
}

/** Parameters to reconcile to the GitRepository source kind type. */
export declare interface GitRepositoryPatchDefinition {
    /** The URL to sync for the flux configuration git repository. */
    url?: string;
    /** The maximum time to attempt to reconcile the cluster git repository source with the remote. */
    timeoutInSeconds?: number;
    /** The interval at which to re-reconcile the cluster git repository source with the remote. */
    syncIntervalInSeconds?: number;
    /** The source reference for the GitRepository object. */
    repositoryRef?: RepositoryRefDefinition;
    /** Base64-encoded known_hosts value containing public SSH keys required to access private git repositories over SSH */
    sshKnownHosts?: string;
    /** Plaintext HTTPS username used to access private git repositories over HTTPS */
    httpsUser?: string;
    /** Base64-encoded HTTPS certificate authority contents used to access git private git repositories over HTTPS */
    httpsCACert?: string;
    /** Name of a local secret on the Kubernetes cluster to use as the authentication secret rather than the managed or user-provided configuration secrets. */
    localAuthRef?: string;
}

/** Properties for Helm operator. */
export declare interface HelmOperatorProperties {
    /** Version of the operator Helm chart. */
    chartVersion?: string;
    /** Values override for the operator Helm chart. */
    chartValues?: string;
}

/** Properties for HelmRelease objects */
export declare interface HelmReleasePropertiesDefinition {
    /** The revision number of the last released object change */
    lastRevisionApplied?: number;
    /** The reference to the HelmChart object used as the source to this HelmRelease */
    helmChartRef?: ObjectReferenceDefinition;
    /** Total number of times that the HelmRelease failed to install or upgrade */
    failureCount?: number;
    /** Number of times that the HelmRelease failed to install */
    installFailureCount?: number;
    /** Number of times that the HelmRelease failed to upgrade */
    upgradeFailureCount?: number;
}

/** Identity for the resource. */
export declare interface Identity {
    /**
     * The principal ID of resource identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The identity type. */
    type?: "SystemAssigned";
}

/** Known values of {@link ComplianceStateType} that the service accepts. */
export declare enum KnownComplianceStateType {
    /** Pending */
    Pending = "Pending",
    /** Compliant */
    Compliant = "Compliant",
    /** Noncompliant */
    Noncompliant = "Noncompliant",
    /** Installed */
    Installed = "Installed",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link FluxComplianceState} that the service accepts. */
export declare enum KnownFluxComplianceState {
    /** Compliant */
    Compliant = "Compliant",
    /** NonCompliant */
    NonCompliant = "Non-Compliant",
    /** Pending */
    Pending = "Pending",
    /** Suspended */
    Suspended = "Suspended",
    /** Unknown */
    Unknown = "Unknown"
}

/** Known values of {@link KustomizationValidationType} that the service accepts. */
export declare enum KnownKustomizationValidationType {
    /** None */
    None = "none",
    /** Client */
    Client = "client",
    /** Server */
    Server = "server"
}

/** Known values of {@link LevelType} that the service accepts. */
export declare enum KnownLevelType {
    /** Error */
    Error = "Error",
    /** Warning */
    Warning = "Warning",
    /** Information */
    Information = "Information"
}

/** Known values of {@link MessageLevelType} that the service accepts. */
export declare enum KnownMessageLevelType {
    /** Error */
    Error = "Error",
    /** Warning */
    Warning = "Warning",
    /** Information */
    Information = "Information"
}

/** Known values of {@link OperatorScopeType} that the service accepts. */
export declare enum KnownOperatorScopeType {
    /** Cluster */
    Cluster = "cluster",
    /** Namespace */
    Namespace = "namespace"
}

/** Known values of {@link OperatorType} that the service accepts. */
export declare enum KnownOperatorType {
    /** Flux */
    Flux = "Flux"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link ProvisioningStateType} that the service accepts. */
export declare enum KnownProvisioningStateType {
    /** Accepted */
    Accepted = "Accepted",
    /** Deleting */
    Deleting = "Deleting",
    /** Running */
    Running = "Running",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link ScopeType} that the service accepts. */
export declare enum KnownScopeType {
    /** Cluster */
    Cluster = "cluster",
    /** Namespace */
    Namespace = "namespace"
}

/** Known values of {@link SourceKindType} that the service accepts. */
export declare enum KnownSourceKindType {
    /** GitRepository */
    GitRepository = "GitRepository",
    /** Bucket */
    Bucket = "Bucket",
    /** AzureBlob */
    AzureBlob = "AzureBlob"
}

/** The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster. */
export declare interface KustomizationDefinition {
    /**
     * Name of the Kustomization, matching the key in the Kustomizations object map.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** The path in the source reference to reconcile on the cluster. */
    path?: string;
    /** Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation. */
    dependsOn?: string[];
    /** The maximum time to attempt to reconcile the Kustomization on the cluster. */
    timeoutInSeconds?: number;
    /** The interval at which to re-reconcile the Kustomization on the cluster. */
    syncIntervalInSeconds?: number;
    /** The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation. */
    retryIntervalInSeconds?: number;
    /** Enable/disable garbage collections of Kubernetes objects created by this Kustomization. */
    prune?: boolean;
    /** Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change. */
    force?: boolean;
    /** Enable/disable health check for all Kubernetes objects created by this Kustomization. */
    wait?: boolean;
    /** Used for variable substitution for this Kustomization after kustomize build. */
    postBuild?: PostBuildDefinition;
}

/** The Kustomization defining how to reconcile the artifact pulled by the source type on the cluster. */
export declare interface KustomizationPatchDefinition {
    /** The path in the source reference to reconcile on the cluster. */
    path?: string;
    /** Specifies other Kustomizations that this Kustomization depends on. This Kustomization will not reconcile until all dependencies have completed their reconciliation. */
    dependsOn?: string[];
    /** The maximum time to attempt to reconcile the Kustomization on the cluster. */
    timeoutInSeconds?: number;
    /** The interval at which to re-reconcile the Kustomization on the cluster. */
    syncIntervalInSeconds?: number;
    /** The interval at which to re-reconcile the Kustomization on the cluster in the event of failure on reconciliation. */
    retryIntervalInSeconds?: number;
    /** Enable/disable garbage collections of Kubernetes objects created by this Kustomization. */
    prune?: boolean;
    /** Enable/disable re-creating Kubernetes resources on the cluster when patching fails due to an immutable field change. */
    force?: boolean;
    /** Enable/disable health check for all Kubernetes objects created by this Kustomization. */
    wait?: boolean;
    /** Used for variable substitution for this Kustomization after kustomize build. */
    postBuild?: PostBuildDefinition;
}

/**
 * Defines values for KustomizationValidationType. \
 * {@link KnownKustomizationValidationType} can be used interchangeably with KustomizationValidationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **none** \
 * **client** \
 * **server**
 */
export declare type KustomizationValidationType = string;

/**
 * Defines values for LevelType. \
 * {@link KnownLevelType} can be used interchangeably with LevelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Warning** \
 * **Information**
 */
export declare type LevelType = string;

/** Parameters to authenticate using a Managed Identity. */
export declare interface ManagedIdentityDefinition {
    /** The client Id for authenticating a Managed Identity. */
    clientId?: string;
}

/** Parameters to authenticate using a Managed Identity. */
export declare interface ManagedIdentityPatchDefinition {
    /** The client Id for authenticating a Managed Identity. */
    clientId?: string;
}

/**
 * Defines values for MessageLevelType. \
 * {@link KnownMessageLevelType} can be used interchangeably with MessageLevelType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Error** \
 * **Warning** \
 * **Information**
 */
export declare type MessageLevelType = string;

/** Object reference to a Kubernetes object on a cluster */
export declare interface ObjectReferenceDefinition {
    /** Name of the object */
    name?: string;
    /** Namespace of the object */
    namespace?: string;
}

/** Status condition of Kubernetes object */
export declare interface ObjectStatusConditionDefinition {
    /** Last time this status condition has changed */
    lastTransitionTime?: Date;
    /** A more verbose description of the object status condition */
    message?: string;
    /** Reason for the specified status condition type status */
    reason?: string;
    /** Status of the Kubernetes object condition type */
    status?: string;
    /** Object status condition type for this object */
    type?: string;
}

/** Statuses of objects deployed by the user-specified kustomizations from the git repository. */
export declare interface ObjectStatusDefinition {
    /** Name of the applied object */
    name?: string;
    /** Namespace of the applied object */
    namespace?: string;
    /** Kind of the applied object */
    kind?: string;
    /** Compliance state of the applied object showing whether the applied object has come into a ready state on the cluster. */
    complianceState?: FluxComplianceState;
    /** Object reference to the Kustomization that applied this object */
    appliedBy?: ObjectReferenceDefinition;
    /** List of Kubernetes object status conditions present on the cluster */
    statusConditions?: ObjectStatusConditionDefinition[];
    /** Additional properties that are provided from objects of the HelmRelease kind */
    helmReleaseProperties?: HelmReleasePropertiesDefinition;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * List all the available operations the KubernetesConfiguration resource provider supports.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<ResourceProviderOperation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = ResourceProviderOperationList;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = ResourceProviderOperationList;

/** Interface representing a OperationStatus. */
export declare interface OperationStatus {
    /**
     * List Async Operations, currently in progress, in a cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, options?: OperationStatusListOptionalParams): PagedAsyncIterableIterator<OperationStatusResult>;
    /**
     * Get Async Operation status
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param operationId operation Id
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, extensionName: string, operationId: string, options?: OperationStatusGetOptionalParams): Promise<OperationStatusGetResponse>;
}

/** Optional parameters. */
export declare interface OperationStatusGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationStatusGetResponse = OperationStatusResult;

/** The async operations in progress, in the cluster. */
export declare interface OperationStatusList {
    /**
     * List of async operations in progress, in the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: OperationStatusResult[];
    /**
     * URL to get the next set of Operation Result objects, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Optional parameters. */
export declare interface OperationStatusListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationStatusListNextResponse = OperationStatusList;

/** Optional parameters. */
export declare interface OperationStatusListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationStatusListResponse = OperationStatusList;

/** The current status of an async operation. */
export declare interface OperationStatusResult {
    /** Fully qualified ID for the async operation. */
    id?: string;
    /** Name of the async operation. */
    name?: string;
    /** Operation status. */
    status: string;
    /** Additional information, if available. */
    properties?: {
        [propertyName: string]: string;
    };
    /**
     * If present, details of the operation error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly error?: ErrorDetail;
}

/**
 * Defines values for OperatorScopeType. \
 * {@link KnownOperatorScopeType} can be used interchangeably with OperatorScopeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **cluster** \
 * **namespace**
 */
export declare type OperatorScopeType = string;

/**
 * Defines values for OperatorType. \
 * {@link KnownOperatorType} can be used interchangeably with OperatorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Flux**
 */
export declare type OperatorType = string;

/** The Extension Patch Request object. */
export declare interface PatchExtension {
    /** Flag to note if this extension participates in auto upgrade of minor version, or not. */
    autoUpgradeMinorVersion?: boolean;
    /** ReleaseTrain this extension participates in for auto-upgrade (e.g. Stable, Preview, etc.) - only if autoUpgradeMinorVersion is 'true'. */
    releaseTrain?: string;
    /** Version of the extension for this extension, if it is 'pinned' to a specific version. autoUpgradeMinorVersion must be 'false'. */
    version?: string;
    /** Configuration settings, as name-value pairs for configuring this extension. */
    configurationSettings?: {
        [propertyName: string]: string;
    };
    /** Configuration settings that are sensitive, as name-value pairs for configuring this extension. */
    configurationProtectedSettings?: {
        [propertyName: string]: string;
    };
}

/** Plan for the resource. */
export declare interface Plan {
    /** A user defined name of the 3rd Party Artifact that is being procured. */
    name: string;
    /** The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic */
    publisher: string;
    /** The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. */
    product: string;
    /** A publisher provided promotion code as provisioned in Data Market for the said product/artifact. */
    promotionCode?: string;
    /** The version of the desired product/artifact. */
    version?: string;
}

/** The postBuild definitions defining variable substitutions for this Kustomization after kustomize build. */
export declare interface PostBuildDefinition {
    /** Key/value pairs holding the variables to be substituted in this Kustomization. */
    substitute?: {
        [propertyName: string]: string;
    };
    /** Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization. */
    substituteFrom?: (SubstituteFromDefinition | null)[];
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Creating** \
 * **Updating** \
 * **Deleting**
 */
export declare type ProvisioningState = string;

/**
 * Defines values for ProvisioningStateType. \
 * {@link KnownProvisioningStateType} can be used interchangeably with ProvisioningStateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Deleting** \
 * **Running** \
 * **Succeeded** \
 * **Failed**
 */
export declare type ProvisioningStateType = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/** The source reference for the GitRepository object. */
export declare interface RepositoryRefDefinition {
    /** The git repository branch name to checkout. */
    branch?: string;
    /** The git repository tag name to checkout. This takes precedence over branch. */
    tag?: string;
    /** The semver range used to match against git repository tags. This takes precedence over tag. */
    semver?: string;
    /** The commit SHA to checkout. This value must be combined with the branch name to be valid. This takes precedence over semver. */
    commit?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Supported operation of this resource provider. */
export declare interface ResourceProviderOperation {
    /** Operation name, in format of {provider}/{resource}/{operation} */
    name?: string;
    /** Display metadata associated with the operation. */
    display?: ResourceProviderOperationDisplay;
    /**
     * The flag that indicates whether the operation applies to data plane.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDataAction?: boolean;
    /**
     * Origin of the operation
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly origin?: string;
}

/** Display metadata associated with the operation. */
export declare interface ResourceProviderOperationDisplay {
    /** Resource provider: Microsoft KubernetesConfiguration. */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
    /** Type of operation: get, read, delete, etc. */
    operation?: string;
    /** Description of this operation. */
    description?: string;
}

/** Result of the request to list operations. */
export declare interface ResourceProviderOperationList {
    /** List of operations supported by this resource provider. */
    value?: ResourceProviderOperation[];
    /**
     * URL to the next set of results, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Scope of the extension. It can be either Cluster or Namespace; but not both. */
export declare interface Scope {
    /** Specifies that the scope of the extension is Cluster */
    cluster?: ScopeCluster;
    /** Specifies that the scope of the extension is Namespace */
    namespace?: ScopeNamespace;
}

/** Specifies that the scope of the extension is Cluster */
export declare interface ScopeCluster {
    /** Namespace where the extension Release must be placed, for a Cluster scoped extension.  If this namespace does not exist, it will be created */
    releaseNamespace?: string;
}

/** Specifies that the scope of the extension is Namespace */
export declare interface ScopeNamespace {
    /** Namespace where the extension will be created for an Namespace scoped extension.  If this namespace does not exist, it will be created */
    targetNamespace?: string;
}

/**
 * Defines values for ScopeType. \
 * {@link KnownScopeType} can be used interchangeably with ScopeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **cluster** \
 * **namespace**
 */
export declare type ScopeType = string;

/** Parameters to authenticate using Service Principal. */
export declare interface ServicePrincipalDefinition {
    /** The client Id for authenticating a Service Principal. */
    clientId?: string;
    /** The tenant Id for authenticating a Service Principal */
    tenantId?: string;
    /** The client secret for authenticating a Service Principal */
    clientSecret?: string;
    /** Base64-encoded certificate used to authenticate a Service Principal */
    clientCertificate?: string;
    /** The password for the certificate used to authenticate a Service Principal */
    clientCertificatePassword?: string;
    /** Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate */
    clientCertificateSendChain?: boolean;
}

/** Parameters to authenticate using Service Principal. */
export declare interface ServicePrincipalPatchDefinition {
    /** The client Id for authenticating a Service Principal. */
    clientId?: string;
    /** The tenant Id for authenticating a Service Principal */
    tenantId?: string;
    /** The client secret for authenticating a Service Principal */
    clientSecret?: string;
    /** Base64-encoded certificate used to authenticate a Service Principal */
    clientCertificate?: string;
    /** The password for the certificate used to authenticate a Service Principal */
    clientCertificatePassword?: string;
    /** Specifies whether to include x5c header in client claims when acquiring a token to enable subject name / issuer based authentication for the Client Certificate */
    clientCertificateSendChain?: boolean;
}

/** The SourceControl Configuration object returned in Get & Put response. */
export declare interface SourceControlConfiguration extends ProxyResource {
    /**
     * Top level metadata https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/common-api-contracts.md#system-metadata-for-all-azure-resources
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Url of the SourceControl Repository. */
    repositoryUrl?: string;
    /** The namespace to which this operator is installed to. Maximum of 253 lower case alphanumeric characters, hyphen and period only. */
    operatorNamespace?: string;
    /** Instance name of the operator - identifying the specific configuration. */
    operatorInstanceName?: string;
    /** Type of the operator */
    operatorType?: OperatorType;
    /** Any Parameters for the Operator instance in string format. */
    operatorParams?: string;
    /** Name-value pairs of protected configuration settings for the configuration */
    configurationProtectedSettings?: {
        [propertyName: string]: string;
    };
    /** Scope at which the operator will be installed. */
    operatorScope?: OperatorScopeType;
    /**
     * Public Key associated with this SourceControl configuration (either generated within the cluster or provided by the user).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly repositoryPublicKey?: string;
    /** Base64-encoded known_hosts contents containing public SSH keys required to access private Git instances */
    sshKnownHostsContents?: string;
    /** Option to enable Helm Operator for this git configuration. */
    enableHelmOperator?: boolean;
    /** Properties for Helm operator. */
    helmOperatorProperties?: HelmOperatorProperties;
    /**
     * The provisioning state of the resource provider.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStateType;
    /**
     * Compliance Status of the Configuration
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly complianceStatus?: ComplianceStatus;
}

export declare class SourceControlConfigurationClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the SourceControlConfigurationClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: SourceControlConfigurationClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    extensions: Extensions;
    operationStatus: OperationStatus;
    fluxConfigurations: FluxConfigurations;
    fluxConfigOperationStatus: FluxConfigOperationStatus;
    sourceControlConfigurations: SourceControlConfigurations;
    operations: Operations;
}

/** Optional parameters. */
export declare interface SourceControlConfigurationClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Result of the request to list Source Control Configurations.  It contains a list of SourceControlConfiguration objects and a URL link to get the next set of results. */
export declare interface SourceControlConfigurationList {
    /**
     * List of Source Control Configurations within a Kubernetes cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SourceControlConfiguration[];
    /**
     * URL to get the next set of configuration objects, if any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a SourceControlConfigurations. */
export declare interface SourceControlConfigurations {
    /**
     * List all Source Control Configurations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, options?: SourceControlConfigurationsListOptionalParams): PagedAsyncIterableIterator<SourceControlConfiguration>;
    /**
     * Gets details of the Source Control Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, sourceControlConfigurationName: string, options?: SourceControlConfigurationsGetOptionalParams): Promise<SourceControlConfigurationsGetResponse>;
    /**
     * Create a new Kubernetes Source Control Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param sourceControlConfiguration Properties necessary to Create KubernetesConfiguration.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, sourceControlConfigurationName: string, sourceControlConfiguration: SourceControlConfiguration, options?: SourceControlConfigurationsCreateOrUpdateOptionalParams): Promise<SourceControlConfigurationsCreateOrUpdateResponse>;
    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future
     * sync from the source repo.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, sourceControlConfigurationName: string, options?: SourceControlConfigurationsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future
     * sync from the source repo.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterRp: string, clusterResourceName: string, clusterName: string, sourceControlConfigurationName: string, options?: SourceControlConfigurationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SourceControlConfigurationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SourceControlConfigurationsCreateOrUpdateResponse = SourceControlConfiguration;

/** Optional parameters. */
export declare interface SourceControlConfigurationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SourceControlConfigurationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SourceControlConfigurationsGetResponse = SourceControlConfiguration;

/** Optional parameters. */
export declare interface SourceControlConfigurationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SourceControlConfigurationsListNextResponse = SourceControlConfigurationList;

/** Optional parameters. */
export declare interface SourceControlConfigurationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SourceControlConfigurationsListResponse = SourceControlConfigurationList;

/**
 * Defines values for SourceKindType. \
 * {@link KnownSourceKindType} can be used interchangeably with SourceKindType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GitRepository** \
 * **Bucket** \
 * **AzureBlob**
 */
export declare type SourceKindType = string;

/** Array of ConfigMaps/Secrets from which the variables are substituted for this Kustomization. */
export declare interface SubstituteFromDefinition {
    /** Define whether it is ConfigMap or Secret that holds the variables to be used in substitution. */
    kind?: string;
    /** Name of the ConfigMap/Secret that holds the variables to be used in substitution. */
    name?: string;
    /** Set to True to proceed without ConfigMap/Secret, if it is not present. */
    optional?: boolean;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

export { }
