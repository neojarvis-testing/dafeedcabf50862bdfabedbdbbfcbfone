'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link ProvisioningState} that the service accepts. */
exports.KnownProvisioningState = void 0;
(function (KnownProvisioningState) {
    /** Succeeded */
    KnownProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownProvisioningState["Canceled"] = "Canceled";
    /** Creating */
    KnownProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownProvisioningState["Deleting"] = "Deleting";
})(exports.KnownProvisioningState || (exports.KnownProvisioningState = {}));
/** Known values of {@link LevelType} that the service accepts. */
exports.KnownLevelType = void 0;
(function (KnownLevelType) {
    /** Error */
    KnownLevelType["Error"] = "Error";
    /** Warning */
    KnownLevelType["Warning"] = "Warning";
    /** Information */
    KnownLevelType["Information"] = "Information";
})(exports.KnownLevelType || (exports.KnownLevelType = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link ScopeType} that the service accepts. */
exports.KnownScopeType = void 0;
(function (KnownScopeType) {
    /** Cluster */
    KnownScopeType["Cluster"] = "cluster";
    /** Namespace */
    KnownScopeType["Namespace"] = "namespace";
})(exports.KnownScopeType || (exports.KnownScopeType = {}));
/** Known values of {@link SourceKindType} that the service accepts. */
exports.KnownSourceKindType = void 0;
(function (KnownSourceKindType) {
    /** GitRepository */
    KnownSourceKindType["GitRepository"] = "GitRepository";
    /** Bucket */
    KnownSourceKindType["Bucket"] = "Bucket";
    /** AzureBlob */
    KnownSourceKindType["AzureBlob"] = "AzureBlob";
})(exports.KnownSourceKindType || (exports.KnownSourceKindType = {}));
/** Known values of {@link FluxComplianceState} that the service accepts. */
exports.KnownFluxComplianceState = void 0;
(function (KnownFluxComplianceState) {
    /** Compliant */
    KnownFluxComplianceState["Compliant"] = "Compliant";
    /** NonCompliant */
    KnownFluxComplianceState["NonCompliant"] = "Non-Compliant";
    /** Pending */
    KnownFluxComplianceState["Pending"] = "Pending";
    /** Suspended */
    KnownFluxComplianceState["Suspended"] = "Suspended";
    /** Unknown */
    KnownFluxComplianceState["Unknown"] = "Unknown";
})(exports.KnownFluxComplianceState || (exports.KnownFluxComplianceState = {}));
/** Known values of {@link OperatorType} that the service accepts. */
exports.KnownOperatorType = void 0;
(function (KnownOperatorType) {
    /** Flux */
    KnownOperatorType["Flux"] = "Flux";
})(exports.KnownOperatorType || (exports.KnownOperatorType = {}));
/** Known values of {@link OperatorScopeType} that the service accepts. */
exports.KnownOperatorScopeType = void 0;
(function (KnownOperatorScopeType) {
    /** Cluster */
    KnownOperatorScopeType["Cluster"] = "cluster";
    /** Namespace */
    KnownOperatorScopeType["Namespace"] = "namespace";
})(exports.KnownOperatorScopeType || (exports.KnownOperatorScopeType = {}));
/** Known values of {@link ProvisioningStateType} that the service accepts. */
exports.KnownProvisioningStateType = void 0;
(function (KnownProvisioningStateType) {
    /** Accepted */
    KnownProvisioningStateType["Accepted"] = "Accepted";
    /** Deleting */
    KnownProvisioningStateType["Deleting"] = "Deleting";
    /** Running */
    KnownProvisioningStateType["Running"] = "Running";
    /** Succeeded */
    KnownProvisioningStateType["Succeeded"] = "Succeeded";
    /** Failed */
    KnownProvisioningStateType["Failed"] = "Failed";
})(exports.KnownProvisioningStateType || (exports.KnownProvisioningStateType = {}));
/** Known values of {@link ComplianceStateType} that the service accepts. */
exports.KnownComplianceStateType = void 0;
(function (KnownComplianceStateType) {
    /** Pending */
    KnownComplianceStateType["Pending"] = "Pending";
    /** Compliant */
    KnownComplianceStateType["Compliant"] = "Compliant";
    /** Noncompliant */
    KnownComplianceStateType["Noncompliant"] = "Noncompliant";
    /** Installed */
    KnownComplianceStateType["Installed"] = "Installed";
    /** Failed */
    KnownComplianceStateType["Failed"] = "Failed";
})(exports.KnownComplianceStateType || (exports.KnownComplianceStateType = {}));
/** Known values of {@link MessageLevelType} that the service accepts. */
exports.KnownMessageLevelType = void 0;
(function (KnownMessageLevelType) {
    /** Error */
    KnownMessageLevelType["Error"] = "Error";
    /** Warning */
    KnownMessageLevelType["Warning"] = "Warning";
    /** Information */
    KnownMessageLevelType["Information"] = "Information";
})(exports.KnownMessageLevelType || (exports.KnownMessageLevelType = {}));
/** Known values of {@link KustomizationValidationType} that the service accepts. */
exports.KnownKustomizationValidationType = void 0;
(function (KnownKustomizationValidationType) {
    /** None */
    KnownKustomizationValidationType["None"] = "none";
    /** Client */
    KnownKustomizationValidationType["Client"] = "client";
    /** Server */
    KnownKustomizationValidationType["Server"] = "server";
})(exports.KnownKustomizationValidationType || (exports.KnownKustomizationValidationType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const Scope = {
    type: {
        name: "Composite",
        className: "Scope",
        modelProperties: {
            cluster: {
                serializedName: "cluster",
                type: {
                    name: "Composite",
                    className: "ScopeCluster"
                }
            },
            namespace: {
                serializedName: "namespace",
                type: {
                    name: "Composite",
                    className: "ScopeNamespace"
                }
            }
        }
    }
};
const ScopeCluster = {
    type: {
        name: "Composite",
        className: "ScopeCluster",
        modelProperties: {
            releaseNamespace: {
                serializedName: "releaseNamespace",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScopeNamespace = {
    type: {
        name: "Composite",
        className: "ScopeNamespace",
        modelProperties: {
            targetNamespace: {
                serializedName: "targetNamespace",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExtensionStatus = {
    type: {
        name: "Composite",
        className: "ExtensionStatus",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            displayStatus: {
                serializedName: "displayStatus",
                type: {
                    name: "String"
                }
            },
            level: {
                defaultValue: "Information",
                serializedName: "level",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            time: {
                serializedName: "time",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const ExtensionPropertiesAksAssignedIdentity = {
    type: {
        name: "Composite",
        className: "ExtensionPropertiesAksAssignedIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: ["SystemAssigned", "UserAssigned"]
                }
            }
        }
    }
};
const Identity = {
    type: {
        name: "Composite",
        className: "Identity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "SystemAssigned",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const Plan = {
    type: {
        name: "Composite",
        className: "Plan",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            publisher: {
                serializedName: "publisher",
                required: true,
                type: {
                    name: "String"
                }
            },
            product: {
                serializedName: "product",
                required: true,
                type: {
                    name: "String"
                }
            },
            promotionCode: {
                serializedName: "promotionCode",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const PatchExtension = {
    type: {
        name: "Composite",
        className: "PatchExtension",
        modelProperties: {
            autoUpgradeMinorVersion: {
                defaultValue: true,
                serializedName: "properties.autoUpgradeMinorVersion",
                type: {
                    name: "Boolean"
                }
            },
            releaseTrain: {
                defaultValue: "Stable",
                serializedName: "properties.releaseTrain",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "properties.version",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            configurationSettings: {
                serializedName: "properties.configurationSettings",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            configurationProtectedSettings: {
                serializedName: "properties.configurationProtectedSettings",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ExtensionsList = {
    type: {
        name: "Composite",
        className: "ExtensionsList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Extension"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationStatusResult = {
    type: {
        name: "Composite",
        className: "OperationStatusResult",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const GitRepositoryDefinition = {
    type: {
        name: "Composite",
        className: "GitRepositoryDefinition",
        modelProperties: {
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            timeoutInSeconds: {
                defaultValue: 600,
                serializedName: "timeoutInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            syncIntervalInSeconds: {
                defaultValue: 600,
                serializedName: "syncIntervalInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            repositoryRef: {
                serializedName: "repositoryRef",
                type: {
                    name: "Composite",
                    className: "RepositoryRefDefinition"
                }
            },
            sshKnownHosts: {
                serializedName: "sshKnownHosts",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            httpsUser: {
                serializedName: "httpsUser",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            httpsCACert: {
                serializedName: "httpsCACert",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            localAuthRef: {
                serializedName: "localAuthRef",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RepositoryRefDefinition = {
    type: {
        name: "Composite",
        className: "RepositoryRefDefinition",
        modelProperties: {
            branch: {
                serializedName: "branch",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            tag: {
                serializedName: "tag",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            semver: {
                serializedName: "semver",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            commit: {
                serializedName: "commit",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BucketDefinition = {
    type: {
        name: "Composite",
        className: "BucketDefinition",
        modelProperties: {
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "String"
                }
            },
            insecure: {
                defaultValue: true,
                serializedName: "insecure",
                type: {
                    name: "Boolean"
                }
            },
            timeoutInSeconds: {
                defaultValue: 600,
                serializedName: "timeoutInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            syncIntervalInSeconds: {
                defaultValue: 600,
                serializedName: "syncIntervalInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            accessKey: {
                serializedName: "accessKey",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            localAuthRef: {
                serializedName: "localAuthRef",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureBlobDefinition = {
    type: {
        name: "Composite",
        className: "AzureBlobDefinition",
        modelProperties: {
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "containerName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            timeoutInSeconds: {
                defaultValue: 600,
                serializedName: "timeoutInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            syncIntervalInSeconds: {
                defaultValue: 600,
                serializedName: "syncIntervalInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            servicePrincipal: {
                serializedName: "servicePrincipal",
                type: {
                    name: "Composite",
                    className: "ServicePrincipalDefinition"
                }
            },
            accountKey: {
                serializedName: "accountKey",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            sasToken: {
                serializedName: "sasToken",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            managedIdentity: {
                serializedName: "managedIdentity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentityDefinition"
                }
            },
            localAuthRef: {
                serializedName: "localAuthRef",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServicePrincipalDefinition = {
    type: {
        name: "Composite",
        className: "ServicePrincipalDefinition",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            clientSecret: {
                serializedName: "clientSecret",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            clientCertificate: {
                serializedName: "clientCertificate",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            clientCertificatePassword: {
                serializedName: "clientCertificatePassword",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            clientCertificateSendChain: {
                defaultValue: false,
                serializedName: "clientCertificateSendChain",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ManagedIdentityDefinition = {
    type: {
        name: "Composite",
        className: "ManagedIdentityDefinition",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KustomizationDefinition = {
    type: {
        name: "Composite",
        className: "KustomizationDefinition",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            path: {
                defaultValue: "",
                serializedName: "path",
                type: {
                    name: "String"
                }
            },
            dependsOn: {
                serializedName: "dependsOn",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            timeoutInSeconds: {
                defaultValue: 600,
                serializedName: "timeoutInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            syncIntervalInSeconds: {
                defaultValue: 600,
                serializedName: "syncIntervalInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            retryIntervalInSeconds: {
                serializedName: "retryIntervalInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            prune: {
                defaultValue: false,
                serializedName: "prune",
                type: {
                    name: "Boolean"
                }
            },
            force: {
                defaultValue: false,
                serializedName: "force",
                type: {
                    name: "Boolean"
                }
            },
            wait: {
                defaultValue: true,
                serializedName: "wait",
                type: {
                    name: "Boolean"
                }
            },
            postBuild: {
                serializedName: "postBuild",
                type: {
                    name: "Composite",
                    className: "PostBuildDefinition"
                }
            }
        }
    }
};
const PostBuildDefinition = {
    type: {
        name: "Composite",
        className: "PostBuildDefinition",
        modelProperties: {
            substitute: {
                serializedName: "substitute",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            substituteFrom: {
                serializedName: "substituteFrom",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubstituteFromDefinition"
                        }
                    }
                }
            }
        }
    }
};
const SubstituteFromDefinition = {
    type: {
        name: "Composite",
        className: "SubstituteFromDefinition",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            optional: {
                defaultValue: false,
                serializedName: "optional",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ObjectStatusDefinition = {
    type: {
        name: "Composite",
        className: "ObjectStatusDefinition",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            namespace: {
                serializedName: "namespace",
                type: {
                    name: "String"
                }
            },
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            complianceState: {
                defaultValue: "Unknown",
                serializedName: "complianceState",
                type: {
                    name: "String"
                }
            },
            appliedBy: {
                serializedName: "appliedBy",
                type: {
                    name: "Composite",
                    className: "ObjectReferenceDefinition"
                }
            },
            statusConditions: {
                serializedName: "statusConditions",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ObjectStatusConditionDefinition"
                        }
                    }
                }
            },
            helmReleaseProperties: {
                serializedName: "helmReleaseProperties",
                type: {
                    name: "Composite",
                    className: "HelmReleasePropertiesDefinition"
                }
            }
        }
    }
};
const ObjectReferenceDefinition = {
    type: {
        name: "Composite",
        className: "ObjectReferenceDefinition",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            namespace: {
                serializedName: "namespace",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ObjectStatusConditionDefinition = {
    type: {
        name: "Composite",
        className: "ObjectStatusConditionDefinition",
        modelProperties: {
            lastTransitionTime: {
                serializedName: "lastTransitionTime",
                type: {
                    name: "DateTime"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HelmReleasePropertiesDefinition = {
    type: {
        name: "Composite",
        className: "HelmReleasePropertiesDefinition",
        modelProperties: {
            lastRevisionApplied: {
                serializedName: "lastRevisionApplied",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            helmChartRef: {
                serializedName: "helmChartRef",
                type: {
                    name: "Composite",
                    className: "ObjectReferenceDefinition"
                }
            },
            failureCount: {
                serializedName: "failureCount",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            installFailureCount: {
                serializedName: "installFailureCount",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            upgradeFailureCount: {
                serializedName: "upgradeFailureCount",
                nullable: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const FluxConfigurationPatch = {
    type: {
        name: "Composite",
        className: "FluxConfigurationPatch",
        modelProperties: {
            sourceKind: {
                serializedName: "properties.sourceKind",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            suspend: {
                serializedName: "properties.suspend",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            gitRepository: {
                serializedName: "properties.gitRepository",
                type: {
                    name: "Composite",
                    className: "GitRepositoryPatchDefinition"
                }
            },
            bucket: {
                serializedName: "properties.bucket",
                type: {
                    name: "Composite",
                    className: "BucketPatchDefinition"
                }
            },
            azureBlob: {
                serializedName: "properties.azureBlob",
                type: {
                    name: "Composite",
                    className: "AzureBlobPatchDefinition"
                }
            },
            kustomizations: {
                serializedName: "properties.kustomizations",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Composite",
                            className: "KustomizationPatchDefinition"
                        }
                    }
                }
            },
            configurationProtectedSettings: {
                serializedName: "properties.configurationProtectedSettings",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const GitRepositoryPatchDefinition = {
    type: {
        name: "Composite",
        className: "GitRepositoryPatchDefinition",
        modelProperties: {
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            timeoutInSeconds: {
                serializedName: "timeoutInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            syncIntervalInSeconds: {
                serializedName: "syncIntervalInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            repositoryRef: {
                serializedName: "repositoryRef",
                type: {
                    name: "Composite",
                    className: "RepositoryRefDefinition"
                }
            },
            sshKnownHosts: {
                serializedName: "sshKnownHosts",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            httpsUser: {
                serializedName: "httpsUser",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            httpsCACert: {
                serializedName: "httpsCACert",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            localAuthRef: {
                serializedName: "localAuthRef",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const BucketPatchDefinition = {
    type: {
        name: "Composite",
        className: "BucketPatchDefinition",
        modelProperties: {
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            bucketName: {
                serializedName: "bucketName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            insecure: {
                serializedName: "insecure",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            timeoutInSeconds: {
                serializedName: "timeoutInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            syncIntervalInSeconds: {
                serializedName: "syncIntervalInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            accessKey: {
                serializedName: "accessKey",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            localAuthRef: {
                serializedName: "localAuthRef",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AzureBlobPatchDefinition = {
    type: {
        name: "Composite",
        className: "AzureBlobPatchDefinition",
        modelProperties: {
            url: {
                serializedName: "url",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            containerName: {
                serializedName: "containerName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            timeoutInSeconds: {
                serializedName: "timeoutInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            syncIntervalInSeconds: {
                serializedName: "syncIntervalInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            servicePrincipal: {
                serializedName: "servicePrincipal",
                type: {
                    name: "Composite",
                    className: "ServicePrincipalPatchDefinition"
                }
            },
            accountKey: {
                serializedName: "accountKey",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            sasToken: {
                serializedName: "sasToken",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            managedIdentity: {
                serializedName: "managedIdentity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentityPatchDefinition"
                }
            },
            localAuthRef: {
                serializedName: "localAuthRef",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServicePrincipalPatchDefinition = {
    type: {
        name: "Composite",
        className: "ServicePrincipalPatchDefinition",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            clientSecret: {
                serializedName: "clientSecret",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            clientCertificate: {
                serializedName: "clientCertificate",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            clientCertificatePassword: {
                serializedName: "clientCertificatePassword",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            clientCertificateSendChain: {
                serializedName: "clientCertificateSendChain",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ManagedIdentityPatchDefinition = {
    type: {
        name: "Composite",
        className: "ManagedIdentityPatchDefinition",
        modelProperties: {
            clientId: {
                serializedName: "clientId",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KustomizationPatchDefinition = {
    type: {
        name: "Composite",
        className: "KustomizationPatchDefinition",
        modelProperties: {
            path: {
                serializedName: "path",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            dependsOn: {
                serializedName: "dependsOn",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            timeoutInSeconds: {
                serializedName: "timeoutInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            syncIntervalInSeconds: {
                serializedName: "syncIntervalInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            retryIntervalInSeconds: {
                serializedName: "retryIntervalInSeconds",
                nullable: true,
                type: {
                    name: "Number"
                }
            },
            prune: {
                serializedName: "prune",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            force: {
                serializedName: "force",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            wait: {
                serializedName: "wait",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            postBuild: {
                serializedName: "postBuild",
                type: {
                    name: "Composite",
                    className: "PostBuildDefinition"
                }
            }
        }
    }
};
const FluxConfigurationsList = {
    type: {
        name: "Composite",
        className: "FluxConfigurationsList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FluxConfiguration"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HelmOperatorProperties = {
    type: {
        name: "Composite",
        className: "HelmOperatorProperties",
        modelProperties: {
            chartVersion: {
                serializedName: "chartVersion",
                type: {
                    name: "String"
                }
            },
            chartValues: {
                serializedName: "chartValues",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ComplianceStatus = {
    type: {
        name: "Composite",
        className: "ComplianceStatus",
        modelProperties: {
            complianceState: {
                serializedName: "complianceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastConfigApplied: {
                serializedName: "lastConfigApplied",
                type: {
                    name: "DateTime"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            messageLevel: {
                serializedName: "messageLevel",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SourceControlConfigurationList = {
    type: {
        name: "Composite",
        className: "SourceControlConfigurationList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SourceControlConfiguration"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationStatusList = {
    type: {
        name: "Composite",
        className: "OperationStatusList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationStatusResult"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceProviderOperationList = {
    type: {
        name: "Composite",
        className: "ResourceProviderOperationList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceProviderOperation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceProviderOperation = {
    type: {
        name: "Composite",
        className: "ResourceProviderOperation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "ResourceProviderOperationDisplay"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceProviderOperationDisplay = {
    type: {
        name: "Composite",
        className: "ResourceProviderOperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const Extension = {
    type: {
        name: "Composite",
        className: "Extension",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, plan: {
                serializedName: "plan",
                type: {
                    name: "Composite",
                    className: "Plan"
                }
            }, extensionType: {
                serializedName: "properties.extensionType",
                type: {
                    name: "String"
                }
            }, autoUpgradeMinorVersion: {
                defaultValue: true,
                serializedName: "properties.autoUpgradeMinorVersion",
                type: {
                    name: "Boolean"
                }
            }, releaseTrain: {
                defaultValue: "Stable",
                serializedName: "properties.releaseTrain",
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "properties.version",
                nullable: true,
                type: {
                    name: "String"
                }
            }, scope: {
                serializedName: "properties.scope",
                type: {
                    name: "Composite",
                    className: "Scope"
                }
            }, configurationSettings: {
                serializedName: "properties.configurationSettings",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, configurationProtectedSettings: {
                serializedName: "properties.configurationProtectedSettings",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, currentVersion: {
                serializedName: "properties.currentVersion",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, statuses: {
                serializedName: "properties.statuses",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExtensionStatus"
                        }
                    }
                }
            }, errorInfo: {
                serializedName: "properties.errorInfo",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }, customLocationSettings: {
                serializedName: "properties.customLocationSettings",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, packageUri: {
                serializedName: "properties.packageUri",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }, aksAssignedIdentity: {
                serializedName: "properties.aksAssignedIdentity",
                type: {
                    name: "Composite",
                    className: "ExtensionPropertiesAksAssignedIdentity"
                }
            }, isSystemExtension: {
                defaultValue: false,
                serializedName: "properties.isSystemExtension",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const FluxConfiguration = {
    type: {
        name: "Composite",
        className: "FluxConfiguration",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, scope: {
                defaultValue: "cluster",
                serializedName: "properties.scope",
                type: {
                    name: "String"
                }
            }, namespace: {
                defaultValue: "default",
                serializedName: "properties.namespace",
                type: {
                    name: "String"
                }
            }, sourceKind: {
                serializedName: "properties.sourceKind",
                type: {
                    name: "String"
                }
            }, suspend: {
                defaultValue: false,
                serializedName: "properties.suspend",
                type: {
                    name: "Boolean"
                }
            }, gitRepository: {
                serializedName: "properties.gitRepository",
                type: {
                    name: "Composite",
                    className: "GitRepositoryDefinition"
                }
            }, bucket: {
                serializedName: "properties.bucket",
                type: {
                    name: "Composite",
                    className: "BucketDefinition"
                }
            }, azureBlob: {
                serializedName: "properties.azureBlob",
                type: {
                    name: "Composite",
                    className: "AzureBlobDefinition"
                }
            }, kustomizations: {
                serializedName: "properties.kustomizations",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "KustomizationDefinition" }
                    }
                }
            }, configurationProtectedSettings: {
                serializedName: "properties.configurationProtectedSettings",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, statuses: {
                serializedName: "properties.statuses",
                readOnly: true,
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ObjectStatusDefinition"
                        }
                    }
                }
            }, repositoryPublicKey: {
                serializedName: "properties.repositoryPublicKey",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }, sourceSyncedCommitId: {
                serializedName: "properties.sourceSyncedCommitId",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            }, sourceUpdatedAt: {
                serializedName: "properties.sourceUpdatedAt",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }, statusUpdatedAt: {
                serializedName: "properties.statusUpdatedAt",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime"
                }
            }, waitForReconciliation: {
                serializedName: "properties.waitForReconciliation",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            }, reconciliationWaitDuration: {
                serializedName: "properties.reconciliationWaitDuration",
                nullable: true,
                type: {
                    name: "String"
                }
            }, complianceState: {
                defaultValue: "Unknown",
                serializedName: "properties.complianceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, errorMessage: {
                serializedName: "properties.errorMessage",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const SourceControlConfiguration = {
    type: {
        name: "Composite",
        className: "SourceControlConfiguration",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, repositoryUrl: {
                serializedName: "properties.repositoryUrl",
                type: {
                    name: "String"
                }
            }, operatorNamespace: {
                defaultValue: "default",
                serializedName: "properties.operatorNamespace",
                type: {
                    name: "String"
                }
            }, operatorInstanceName: {
                serializedName: "properties.operatorInstanceName",
                type: {
                    name: "String"
                }
            }, operatorType: {
                serializedName: "properties.operatorType",
                type: {
                    name: "String"
                }
            }, operatorParams: {
                serializedName: "properties.operatorParams",
                type: {
                    name: "String"
                }
            }, configurationProtectedSettings: {
                serializedName: "properties.configurationProtectedSettings",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, operatorScope: {
                defaultValue: "cluster",
                serializedName: "properties.operatorScope",
                type: {
                    name: "String"
                }
            }, repositoryPublicKey: {
                serializedName: "properties.repositoryPublicKey",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, sshKnownHostsContents: {
                serializedName: "properties.sshKnownHostsContents",
                type: {
                    name: "String"
                }
            }, enableHelmOperator: {
                serializedName: "properties.enableHelmOperator",
                type: {
                    name: "Boolean"
                }
            }, helmOperatorProperties: {
                serializedName: "properties.helmOperatorProperties",
                type: {
                    name: "Composite",
                    className: "HelmOperatorProperties"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, complianceStatus: {
                serializedName: "properties.complianceStatus",
                type: {
                    name: "Composite",
                    className: "ComplianceStatus"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Scope: Scope,
    ScopeCluster: ScopeCluster,
    ScopeNamespace: ScopeNamespace,
    ExtensionStatus: ExtensionStatus,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    ExtensionPropertiesAksAssignedIdentity: ExtensionPropertiesAksAssignedIdentity,
    Identity: Identity,
    SystemData: SystemData,
    Plan: Plan,
    Resource: Resource,
    ErrorResponse: ErrorResponse,
    PatchExtension: PatchExtension,
    ExtensionsList: ExtensionsList,
    OperationStatusResult: OperationStatusResult,
    GitRepositoryDefinition: GitRepositoryDefinition,
    RepositoryRefDefinition: RepositoryRefDefinition,
    BucketDefinition: BucketDefinition,
    AzureBlobDefinition: AzureBlobDefinition,
    ServicePrincipalDefinition: ServicePrincipalDefinition,
    ManagedIdentityDefinition: ManagedIdentityDefinition,
    KustomizationDefinition: KustomizationDefinition,
    PostBuildDefinition: PostBuildDefinition,
    SubstituteFromDefinition: SubstituteFromDefinition,
    ObjectStatusDefinition: ObjectStatusDefinition,
    ObjectReferenceDefinition: ObjectReferenceDefinition,
    ObjectStatusConditionDefinition: ObjectStatusConditionDefinition,
    HelmReleasePropertiesDefinition: HelmReleasePropertiesDefinition,
    FluxConfigurationPatch: FluxConfigurationPatch,
    GitRepositoryPatchDefinition: GitRepositoryPatchDefinition,
    BucketPatchDefinition: BucketPatchDefinition,
    AzureBlobPatchDefinition: AzureBlobPatchDefinition,
    ServicePrincipalPatchDefinition: ServicePrincipalPatchDefinition,
    ManagedIdentityPatchDefinition: ManagedIdentityPatchDefinition,
    KustomizationPatchDefinition: KustomizationPatchDefinition,
    FluxConfigurationsList: FluxConfigurationsList,
    HelmOperatorProperties: HelmOperatorProperties,
    ComplianceStatus: ComplianceStatus,
    SourceControlConfigurationList: SourceControlConfigurationList,
    OperationStatusList: OperationStatusList,
    ResourceProviderOperationList: ResourceProviderOperationList,
    ResourceProviderOperation: ResourceProviderOperation,
    ResourceProviderOperationDisplay: ResourceProviderOperationDisplay,
    ProxyResource: ProxyResource,
    Extension: Extension,
    FluxConfiguration: FluxConfiguration,
    SourceControlConfiguration: SourceControlConfiguration
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const extension = {
    parameterPath: "extension",
    mapper: Extension
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const clusterRp = {
    parameterPath: "clusterRp",
    mapper: {
        serializedName: "clusterRp",
        required: true,
        type: {
            name: "String"
        }
    }
};
const clusterResourceName = {
    parameterPath: "clusterResourceName",
    mapper: {
        serializedName: "clusterResourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const clusterName = {
    parameterPath: "clusterName",
    mapper: {
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const extensionName = {
    parameterPath: "extensionName",
    mapper: {
        serializedName: "extensionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const forceDelete = {
    parameterPath: ["options", "forceDelete"],
    mapper: {
        serializedName: "forceDelete",
        type: {
            name: "Boolean"
        }
    }
};
const patchExtension = {
    parameterPath: "patchExtension",
    mapper: PatchExtension
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const fluxConfigurationName = {
    parameterPath: "fluxConfigurationName",
    mapper: {
        serializedName: "fluxConfigurationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const fluxConfiguration = {
    parameterPath: "fluxConfiguration",
    mapper: FluxConfiguration
};
const fluxConfigurationPatch = {
    parameterPath: "fluxConfigurationPatch",
    mapper: FluxConfigurationPatch
};
const sourceControlConfigurationName = {
    parameterPath: "sourceControlConfigurationName",
    mapper: {
        serializedName: "sourceControlConfigurationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const sourceControlConfiguration = {
    parameterPath: "sourceControlConfiguration",
    mapper: SourceControlConfiguration
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        }
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Extensions operations. */
class ExtensionsImpl {
    /**
     * Initialize a new instance of the class Extensions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all Extensions in the cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        const iter = this.listPagingAll(resourceGroupName, clusterRp, clusterResourceName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, clusterRp, clusterResourceName, clusterName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create a new Kubernetes Cluster Extension.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param extension Properties necessary to Create an Extension.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, extension, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    extensionName,
                    extension,
                    options
                },
                spec: createOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new Kubernetes Cluster Extension.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param extension Properties necessary to Create an Extension.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, extension, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, extension, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets Kubernetes Cluster Extension.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            extensionName,
            options
        }, getOperationSpec$4);
    }
    /**
     * Delete a Kubernetes Cluster Extension. This will cause the Agent to Uninstall the extension from the
     * cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    extensionName,
                    options
                },
                spec: deleteOperationSpec$2
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a Kubernetes Cluster Extension. This will cause the Agent to Uninstall the extension from the
     * cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Patch an existing Kubernetes Cluster Extension.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param patchExtension Properties to Patch in an existing Extension.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, patchExtension, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    extensionName,
                    patchExtension,
                    options
                },
                spec: updateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Patch an existing Kubernetes Cluster Extension.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param patchExtension Properties to Patch in an existing Extension.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, patchExtension, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, patchExtension, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all Extensions in the cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    _list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            options
        }, listOperationSpec$4);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, clusterRp, clusterResourceName, clusterName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            nextLink,
            options
        }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Extension
        },
        201: {
            bodyMapper: Extension
        },
        202: {
            bodyMapper: Extension
        },
        204: {
            bodyMapper: Extension
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: extension,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$5
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Extension
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, forceDelete],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Extension
        },
        201: {
            bodyMapper: Extension
        },
        202: {
            bodyMapper: Extension
        },
        204: {
            bodyMapper: Extension
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: patchExtension,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$5
};
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExtensionsList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExtensionsList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing OperationStatus operations. */
class OperationStatusImpl {
    /**
     * Initialize a new instance of the class OperationStatus class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Async Operations, currently in progress, in a cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        const iter = this.listPagingAll(resourceGroupName, clusterRp, clusterResourceName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, clusterRp, clusterResourceName, clusterName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get Async Operation status
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param extensionName Name of the Extension.
     * @param operationId operation Id
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterRp, clusterResourceName, clusterName, extensionName, operationId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            extensionName,
            operationId,
            options
        }, getOperationSpec$3);
    }
    /**
     * List Async Operations, currently in progress, in a cluster
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    _list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            options
        }, listOperationSpec$3);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, clusterRp, clusterResourceName, clusterName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            nextLink,
            options
        }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/extensions/{extensionName}/operations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatusResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        extensionName,
        operationId
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatusList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatusList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing FluxConfigurations operations. */
class FluxConfigurationsImpl {
    /**
     * Initialize a new instance of the class FluxConfigurations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all Flux Configurations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        const iter = this.listPagingAll(resourceGroupName, clusterRp, clusterResourceName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, clusterRp, clusterResourceName, clusterName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets details of the Flux Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            fluxConfigurationName,
            options
        }, getOperationSpec$2);
    }
    /**
     * Create a new Kubernetes Flux Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param fluxConfiguration Properties necessary to Create a FluxConfiguration.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, fluxConfiguration, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    fluxConfigurationName,
                    fluxConfiguration,
                    options
                },
                spec: createOrUpdateOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create a new Kubernetes Flux Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param fluxConfiguration Properties necessary to Create a FluxConfiguration.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, fluxConfiguration, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, fluxConfiguration, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update an existing Kubernetes Flux Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param fluxConfigurationPatch Properties to Patch in an existing Flux Configuration.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, fluxConfigurationPatch, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    fluxConfigurationName,
                    fluxConfigurationPatch,
                    options
                },
                spec: updateOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update an existing Kubernetes Flux Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param fluxConfigurationPatch Properties to Patch in an existing Flux Configuration.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, fluxConfigurationPatch, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, fluxConfigurationPatch, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * This will delete the YAML file used to set up the Flux Configuration, thus stopping future sync from
     * the source repo.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    fluxConfigurationName,
                    options
                },
                spec: deleteOperationSpec$1
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * This will delete the YAML file used to set up the Flux Configuration, thus stopping future sync from
     * the source repo.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all Flux Configurations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    _list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            options
        }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, clusterRp, clusterResourceName, clusterName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            nextLink,
            options
        }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FluxConfiguration
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: FluxConfiguration
        },
        201: {
            bodyMapper: FluxConfiguration
        },
        202: {
            bodyMapper: FluxConfiguration
        },
        204: {
            bodyMapper: FluxConfiguration
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: fluxConfiguration,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: FluxConfiguration
        },
        201: {
            bodyMapper: FluxConfiguration
        },
        202: {
            bodyMapper: FluxConfiguration
        },
        204: {
            bodyMapper: FluxConfiguration
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: fluxConfigurationPatch,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion, forceDelete],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        fluxConfigurationName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FluxConfigurationsList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FluxConfigurationsList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing FluxConfigOperationStatus operations. */
class FluxConfigOperationStatusImpl {
    /**
     * Initialize a new instance of the class FluxConfigOperationStatus class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get Async Operation status
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param fluxConfigurationName Name of the Flux Configuration.
     * @param operationId operation Id
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterRp, clusterResourceName, clusterName, fluxConfigurationName, operationId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            fluxConfigurationName,
            operationId,
            options
        }, getOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/fluxConfigurations/{fluxConfigurationName}/operations/{operationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatusResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        operationId,
        fluxConfigurationName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SourceControlConfigurations operations. */
class SourceControlConfigurationsImpl {
    /**
     * Initialize a new instance of the class SourceControlConfigurations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all Source Control Configurations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        const iter = this.listPagingAll(resourceGroupName, clusterRp, clusterResourceName, clusterName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, clusterRp, clusterResourceName, clusterName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, clusterRp, clusterResourceName, clusterName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets details of the Source Control Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            sourceControlConfigurationName,
            options
        }, getOperationSpec);
    }
    /**
     * Create a new Kubernetes Source Control Configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param sourceControlConfiguration Properties necessary to Create KubernetesConfiguration.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, sourceControlConfiguration, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            sourceControlConfigurationName,
            sourceControlConfiguration,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future
     * sync from the source repo.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    clusterRp,
                    clusterResourceName,
                    clusterName,
                    sourceControlConfigurationName,
                    options
                },
                spec: deleteOperationSpec
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * This will delete the YAML file used to set up the Source control configuration, thus stopping future
     * sync from the source repo.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param sourceControlConfigurationName Name of the Source Control Configuration.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterRp, clusterResourceName, clusterName, sourceControlConfigurationName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * List all Source Control Configurations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param options The options parameters.
     */
    _list(resourceGroupName, clusterRp, clusterResourceName, clusterName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            options
        }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterRp The Kubernetes cluster RP - i.e. Microsoft.ContainerService, Microsoft.Kubernetes,
     *                  Microsoft.HybridContainerService.
     * @param clusterResourceName The Kubernetes cluster resource name - i.e. managedClusters,
     *                            connectedClusters, provisionedClusters.
     * @param clusterName The name of the kubernetes cluster.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, clusterRp, clusterResourceName, clusterName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            clusterRp,
            clusterResourceName,
            clusterName,
            nextLink,
            options
        }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/{sourceControlConfigurationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SourceControlConfiguration
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        sourceControlConfigurationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/{sourceControlConfigurationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SourceControlConfiguration
        },
        201: {
            bodyMapper: SourceControlConfiguration
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: sourceControlConfiguration,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        sourceControlConfigurationName
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations/{sourceControlConfigurationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        sourceControlConfigurationName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{clusterRp}/{clusterResourceName}/{clusterName}/providers/Microsoft.KubernetesConfiguration/sourceControlConfigurations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SourceControlConfigurationList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SourceControlConfigurationList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterRp,
        clusterResourceName,
        clusterName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all the available operations the KubernetesConfiguration resource provider supports.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all the available operations the KubernetesConfiguration resource provider supports.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/providers/Microsoft.KubernetesConfiguration/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceProviderOperationList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceProviderOperationList
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class SourceControlConfigurationClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the SourceControlConfigurationClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-kubernetesconfiguration/6.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-05-01";
        this.extensions = new ExtensionsImpl(this);
        this.operationStatus = new OperationStatusImpl(this);
        this.fluxConfigurations = new FluxConfigurationsImpl(this);
        this.fluxConfigOperationStatus = new FluxConfigOperationStatusImpl(this);
        this.sourceControlConfigurations = new SourceControlConfigurationsImpl(this);
        this.operations = new OperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.SourceControlConfigurationClient = SourceControlConfigurationClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
