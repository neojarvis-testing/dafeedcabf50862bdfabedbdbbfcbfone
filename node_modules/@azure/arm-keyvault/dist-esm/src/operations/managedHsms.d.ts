import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ManagedHsms } from "../operationsInterfaces";
import { KeyVaultManagementClient } from "../keyVaultManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { ManagedHsm, ManagedHsmsListByResourceGroupOptionalParams, ManagedHsmsListBySubscriptionOptionalParams, DeletedManagedHsm, ManagedHsmsListDeletedOptionalParams, ManagedHsmsCreateOrUpdateOptionalParams, ManagedHsmsCreateOrUpdateResponse, ManagedHsmsUpdateOptionalParams, ManagedHsmsUpdateResponse, ManagedHsmsDeleteOptionalParams, ManagedHsmsGetOptionalParams, ManagedHsmsGetResponse, ManagedHsmsGetDeletedOptionalParams, ManagedHsmsGetDeletedResponse, ManagedHsmsPurgeDeletedOptionalParams, ManagedHsmsPurgeDeletedResponse, CheckMhsmNameAvailabilityParameters, ManagedHsmsCheckMhsmNameAvailabilityOptionalParams, ManagedHsmsCheckMhsmNameAvailabilityResponse } from "../models";
/** Class containing ManagedHsms operations. */
export declare class ManagedHsmsImpl implements ManagedHsms {
    private readonly client;
    /**
     * Initialize a new instance of the class ManagedHsms class.
     * @param client Reference to the service client
     */
    constructor(client: KeyVaultManagementClient);
    /**
     * The List operation gets information about the managed HSM Pools associated with the subscription and
     * within the specified resource group.
     * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ManagedHsmsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ManagedHsm>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * The List operation gets information about the managed HSM Pools associated with the subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ManagedHsmsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ManagedHsm>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * The List operation gets information about the deleted managed HSMs associated with the subscription.
     * @param options The options parameters.
     */
    listDeleted(options?: ManagedHsmsListDeletedOptionalParams): PagedAsyncIterableIterator<DeletedManagedHsm>;
    private listDeletedPagingPage;
    private listDeletedPagingAll;
    /**
     * Create or update a managed HSM Pool in the specified subscription.
     * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
     * @param name Name of the managed HSM Pool
     * @param parameters Parameters to create or update the managed HSM Pool
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, name: string, parameters: ManagedHsm, options?: ManagedHsmsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ManagedHsmsCreateOrUpdateResponse>, ManagedHsmsCreateOrUpdateResponse>>;
    /**
     * Create or update a managed HSM Pool in the specified subscription.
     * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
     * @param name Name of the managed HSM Pool
     * @param parameters Parameters to create or update the managed HSM Pool
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, name: string, parameters: ManagedHsm, options?: ManagedHsmsCreateOrUpdateOptionalParams): Promise<ManagedHsmsCreateOrUpdateResponse>;
    /**
     * Update a managed HSM Pool in the specified subscription.
     * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
     * @param name Name of the managed HSM Pool
     * @param parameters Parameters to patch the managed HSM Pool
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, name: string, parameters: ManagedHsm, options?: ManagedHsmsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ManagedHsmsUpdateResponse>, ManagedHsmsUpdateResponse>>;
    /**
     * Update a managed HSM Pool in the specified subscription.
     * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
     * @param name Name of the managed HSM Pool
     * @param parameters Parameters to patch the managed HSM Pool
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, name: string, parameters: ManagedHsm, options?: ManagedHsmsUpdateOptionalParams): Promise<ManagedHsmsUpdateResponse>;
    /**
     * Deletes the specified managed HSM Pool.
     * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
     * @param name The name of the managed HSM Pool to delete
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, name: string, options?: ManagedHsmsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the specified managed HSM Pool.
     * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
     * @param name The name of the managed HSM Pool to delete
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, name: string, options?: ManagedHsmsDeleteOptionalParams): Promise<void>;
    /**
     * Gets the specified managed HSM Pool.
     * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
     * @param name The name of the managed HSM Pool.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, name: string, options?: ManagedHsmsGetOptionalParams): Promise<ManagedHsmsGetResponse>;
    /**
     * The List operation gets information about the managed HSM Pools associated with the subscription and
     * within the specified resource group.
     * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * The List operation gets information about the managed HSM Pools associated with the subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * The List operation gets information about the deleted managed HSMs associated with the subscription.
     * @param options The options parameters.
     */
    private _listDeleted;
    /**
     * Gets the specified deleted managed HSM.
     * @param name The name of the deleted managed HSM.
     * @param location The location of the deleted managed HSM.
     * @param options The options parameters.
     */
    getDeleted(name: string, location: string, options?: ManagedHsmsGetDeletedOptionalParams): Promise<ManagedHsmsGetDeletedResponse>;
    /**
     * Permanently deletes the specified managed HSM.
     * @param name The name of the soft-deleted managed HSM.
     * @param location The location of the soft-deleted managed HSM.
     * @param options The options parameters.
     */
    beginPurgeDeleted(name: string, location: string, options?: ManagedHsmsPurgeDeletedOptionalParams): Promise<SimplePollerLike<OperationState<ManagedHsmsPurgeDeletedResponse>, ManagedHsmsPurgeDeletedResponse>>;
    /**
     * Permanently deletes the specified managed HSM.
     * @param name The name of the soft-deleted managed HSM.
     * @param location The location of the soft-deleted managed HSM.
     * @param options The options parameters.
     */
    beginPurgeDeletedAndWait(name: string, location: string, options?: ManagedHsmsPurgeDeletedOptionalParams): Promise<ManagedHsmsPurgeDeletedResponse>;
    /**
     * Checks that the managed hsm name is valid and is not already in use.
     * @param mhsmName The name of the managed hsm.
     * @param options The options parameters.
     */
    checkMhsmNameAvailability(mhsmName: CheckMhsmNameAvailabilityParameters, options?: ManagedHsmsCheckMhsmNameAvailabilityOptionalParams): Promise<ManagedHsmsCheckMhsmNameAvailabilityResponse>;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName Name of the resource group that contains the managed HSM pool.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
    /**
     * ListDeletedNext
     * @param nextLink The nextLink from the previous successful call to the ListDeleted method.
     * @param options The options parameters.
     */
    private _listDeletedNext;
}
//# sourceMappingURL=managedHsms.d.ts.map