import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Documentation } from "../operationsInterfaces";
import { ApiManagementClient } from "../apiManagementClient";
import { DocumentationContract, DocumentationListByServiceOptionalParams, DocumentationGetEntityTagOptionalParams, DocumentationGetEntityTagResponse, DocumentationGetOptionalParams, DocumentationGetResponse, DocumentationCreateOrUpdateOptionalParams, DocumentationCreateOrUpdateResponse, DocumentationUpdateContract, DocumentationUpdateOptionalParams, DocumentationUpdateResponse, DocumentationDeleteOptionalParams } from "../models";
/** Class containing Documentation operations. */
export declare class DocumentationImpl implements Documentation {
    private readonly client;
    /**
     * Initialize a new instance of the class Documentation class.
     * @param client Reference to the service client
     */
    constructor(client: ApiManagementClient);
    /**
     * Lists all Documentations of the API Management service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    listByService(resourceGroupName: string, serviceName: string, options?: DocumentationListByServiceOptionalParams): PagedAsyncIterableIterator<DocumentationContract>;
    private listByServicePagingPage;
    private listByServicePagingAll;
    /**
     * Lists all Documentations of the API Management service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceName The name of the API Management service.
     * @param options The options parameters.
     */
    private _listByService;
    /**
     * Gets the entity state (Etag) version of the Documentation by its identifier.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceName The name of the API Management service.
     * @param documentationId Documentation identifier. Must be unique in the current API Management
     *                        service instance.
     * @param options The options parameters.
     */
    getEntityTag(resourceGroupName: string, serviceName: string, documentationId: string, options?: DocumentationGetEntityTagOptionalParams): Promise<DocumentationGetEntityTagResponse>;
    /**
     * Gets the details of the Documentation specified by its identifier.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceName The name of the API Management service.
     * @param documentationId Documentation identifier. Must be unique in the current API Management
     *                        service instance.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serviceName: string, documentationId: string, options?: DocumentationGetOptionalParams): Promise<DocumentationGetResponse>;
    /**
     * Creates a new Documentation or updates an existing one.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceName The name of the API Management service.
     * @param documentationId Documentation identifier. Must be unique in the current API Management
     *                        service instance.
     * @param parameters Create parameters.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, serviceName: string, documentationId: string, parameters: DocumentationContract, options?: DocumentationCreateOrUpdateOptionalParams): Promise<DocumentationCreateOrUpdateResponse>;
    /**
     * Updates the details of the Documentation for an API specified by its identifier.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceName The name of the API Management service.
     * @param documentationId Documentation identifier. Must be unique in the current API Management
     *                        service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param parameters Documentation Update parameters.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, serviceName: string, documentationId: string, ifMatch: string, parameters: DocumentationUpdateContract, options?: DocumentationUpdateOptionalParams): Promise<DocumentationUpdateResponse>;
    /**
     * Deletes the specified Documentation from an API.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceName The name of the API Management service.
     * @param documentationId Documentation identifier. Must be unique in the current API Management
     *                        service instance.
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header
     *                response of the GET request or it should be * for unconditional update.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, serviceName: string, documentationId: string, ifMatch: string, options?: DocumentationDeleteOptionalParams): Promise<void>;
    /**
     * ListByServiceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceName The name of the API Management service.
     * @param nextLink The nextLink from the previous successful call to the ListByService method.
     * @param options The options parameters.
     */
    private _listByServiceNext;
}
//# sourceMappingURL=documentation.d.ts.map