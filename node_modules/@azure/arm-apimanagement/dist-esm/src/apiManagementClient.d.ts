import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { Api, ApiRevision, ApiRelease, ApiOperation, ApiOperationPolicy, Tag, GraphQLApiResolver, GraphQLApiResolverPolicy, ApiProduct, ApiPolicy, ApiSchema, ApiDiagnostic, ApiIssue, ApiIssueComment, ApiIssueAttachment, ApiTagDescription, OperationOperations, ApiWiki, ApiWikis, ApiExport, ApiVersionSet, AuthorizationServer, AuthorizationProvider, Authorization, AuthorizationLoginLinks, AuthorizationAccessPolicy, Backend, Cache, Certificate, ContentType, ContentItem, DeletedServices, ApiManagementOperations, ApiManagementServiceSkus, ApiManagementService, Diagnostic, EmailTemplate, Gateway, GatewayHostnameConfiguration, GatewayApi, GatewayCertificateAuthority, Group, GroupUser, IdentityProvider, Issue, Logger, NamedValue, NetworkStatus, Notification, NotificationRecipientUser, NotificationRecipientEmail, OpenIdConnectProvider, OutboundNetworkDependenciesEndpoints, Policy, PolicyDescription, PolicyFragment, PortalConfig, PortalRevision, PortalSettings, SignInSettings, SignUpSettings, DelegationSettings, PrivateEndpointConnectionOperations, Product, ProductApi, ProductGroup, ProductSubscriptions, ProductPolicy, ProductWiki, ProductWikis, QuotaByCounterKeys, QuotaByPeriodKeys, Region, Reports, GlobalSchema, TenantSettings, ApiManagementSkus, Subscription, TagResource, TenantAccess, TenantAccessGit, TenantConfiguration, User, UserGroup, UserSubscription, UserIdentities, UserConfirmationPassword, Documentation } from "./operationsInterfaces";
import { ApiManagementClientOptionalParams, ConnectivityCheckRequest, PerformConnectivityCheckAsyncOptionalParams, PerformConnectivityCheckAsyncResponse } from "./models";
export declare class ApiManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId?: string;
    /**
     * Initializes a new instance of the ApiManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ApiManagementClientOptionalParams);
    constructor(credentials: coreAuth.TokenCredential, options?: ApiManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Performs a connectivity check between the API Management service and a given destination, and
     * returns metrics for the connection, as well as errors encountered while trying to establish it.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceName The name of the API Management service.
     * @param connectivityCheckRequestParams Connectivity Check request parameters.
     * @param options The options parameters.
     */
    beginPerformConnectivityCheckAsync(resourceGroupName: string, serviceName: string, connectivityCheckRequestParams: ConnectivityCheckRequest, options?: PerformConnectivityCheckAsyncOptionalParams): Promise<SimplePollerLike<OperationState<PerformConnectivityCheckAsyncResponse>, PerformConnectivityCheckAsyncResponse>>;
    /**
     * Performs a connectivity check between the API Management service and a given destination, and
     * returns metrics for the connection, as well as errors encountered while trying to establish it.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceName The name of the API Management service.
     * @param connectivityCheckRequestParams Connectivity Check request parameters.
     * @param options The options parameters.
     */
    beginPerformConnectivityCheckAsyncAndWait(resourceGroupName: string, serviceName: string, connectivityCheckRequestParams: ConnectivityCheckRequest, options?: PerformConnectivityCheckAsyncOptionalParams): Promise<PerformConnectivityCheckAsyncResponse>;
    api: Api;
    apiRevision: ApiRevision;
    apiRelease: ApiRelease;
    apiOperation: ApiOperation;
    apiOperationPolicy: ApiOperationPolicy;
    tag: Tag;
    graphQLApiResolver: GraphQLApiResolver;
    graphQLApiResolverPolicy: GraphQLApiResolverPolicy;
    apiProduct: ApiProduct;
    apiPolicy: ApiPolicy;
    apiSchema: ApiSchema;
    apiDiagnostic: ApiDiagnostic;
    apiIssue: ApiIssue;
    apiIssueComment: ApiIssueComment;
    apiIssueAttachment: ApiIssueAttachment;
    apiTagDescription: ApiTagDescription;
    operationOperations: OperationOperations;
    apiWiki: ApiWiki;
    apiWikis: ApiWikis;
    apiExport: ApiExport;
    apiVersionSet: ApiVersionSet;
    authorizationServer: AuthorizationServer;
    authorizationProvider: AuthorizationProvider;
    authorization: Authorization;
    authorizationLoginLinks: AuthorizationLoginLinks;
    authorizationAccessPolicy: AuthorizationAccessPolicy;
    backend: Backend;
    cache: Cache;
    certificate: Certificate;
    contentType: ContentType;
    contentItem: ContentItem;
    deletedServices: DeletedServices;
    apiManagementOperations: ApiManagementOperations;
    apiManagementServiceSkus: ApiManagementServiceSkus;
    apiManagementService: ApiManagementService;
    diagnostic: Diagnostic;
    emailTemplate: EmailTemplate;
    gateway: Gateway;
    gatewayHostnameConfiguration: GatewayHostnameConfiguration;
    gatewayApi: GatewayApi;
    gatewayCertificateAuthority: GatewayCertificateAuthority;
    group: Group;
    groupUser: GroupUser;
    identityProvider: IdentityProvider;
    issue: Issue;
    logger: Logger;
    namedValue: NamedValue;
    networkStatus: NetworkStatus;
    notification: Notification;
    notificationRecipientUser: NotificationRecipientUser;
    notificationRecipientEmail: NotificationRecipientEmail;
    openIdConnectProvider: OpenIdConnectProvider;
    outboundNetworkDependenciesEndpoints: OutboundNetworkDependenciesEndpoints;
    policy: Policy;
    policyDescription: PolicyDescription;
    policyFragment: PolicyFragment;
    portalConfig: PortalConfig;
    portalRevision: PortalRevision;
    portalSettings: PortalSettings;
    signInSettings: SignInSettings;
    signUpSettings: SignUpSettings;
    delegationSettings: DelegationSettings;
    privateEndpointConnectionOperations: PrivateEndpointConnectionOperations;
    product: Product;
    productApi: ProductApi;
    productGroup: ProductGroup;
    productSubscriptions: ProductSubscriptions;
    productPolicy: ProductPolicy;
    productWiki: ProductWiki;
    productWikis: ProductWikis;
    quotaByCounterKeys: QuotaByCounterKeys;
    quotaByPeriodKeys: QuotaByPeriodKeys;
    region: Region;
    reports: Reports;
    globalSchema: GlobalSchema;
    tenantSettings: TenantSettings;
    apiManagementSkus: ApiManagementSkus;
    subscription: Subscription;
    tagResource: TagResource;
    tenantAccess: TenantAccess;
    tenantAccessGit: TenantAccessGit;
    tenantConfiguration: TenantConfiguration;
    user: User;
    userGroup: UserGroup;
    userSubscription: UserSubscription;
    userIdentities: UserIdentities;
    userConfirmationPassword: UserConfirmationPassword;
    documentation: Documentation;
}
//# sourceMappingURL=apiManagementClient.d.ts.map