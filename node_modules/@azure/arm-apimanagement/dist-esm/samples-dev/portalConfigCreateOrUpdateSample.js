/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ApiManagementClient } from "@azure/arm-apimanagement";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Create or update the developer portal configuration.
 *
 * @summary Create or update the developer portal configuration.
 * x-ms-original-file: specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/examples/ApiManagementCreatePortalConfig.json
 */
function apiManagementCreatePortalConfig() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["APIMANAGEMENT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["APIMANAGEMENT_RESOURCE_GROUP"] || "rg1";
        const serviceName = "apimService1";
        const portalConfigId = "default";
        const ifMatch = "*";
        const parameters = {
            cors: { allowedOrigins: ["https://contoso.com"] },
            csp: {
                allowedSources: ["*.contoso.com"],
                mode: "reportOnly",
                reportUri: ["https://report.contoso.com"]
            },
            delegation: {
                delegateRegistration: false,
                delegateSubscription: false,
                delegationUrl: undefined,
                validationKey: undefined
            },
            enableBasicAuth: true,
            signin: { require: false },
            signup: {
                termsOfService: {
                    requireConsent: false,
                    text: "I agree to the service terms and conditions."
                }
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new ApiManagementClient(credential, subscriptionId);
        const result = yield client.portalConfig.createOrUpdate(resourceGroupName, serviceName, portalConfigId, ifMatch, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        apiManagementCreatePortalConfig();
    });
}
main().catch(console.error);
//# sourceMappingURL=portalConfigCreateOrUpdateSample.js.map