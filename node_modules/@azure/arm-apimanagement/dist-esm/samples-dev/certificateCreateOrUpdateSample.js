/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ApiManagementClient } from "@azure/arm-apimanagement";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates the certificate being used for authentication with the backend.
 *
 * @summary Creates or updates the certificate being used for authentication with the backend.
 * x-ms-original-file: specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/examples/ApiManagementCreateCertificate.json
 */
function apiManagementCreateCertificate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["APIMANAGEMENT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["APIMANAGEMENT_RESOURCE_GROUP"] || "rg1";
        const serviceName = "apimService1";
        const certificateId = "tempcert";
        const parameters = {
            data: "****************Base 64 Encoded Certificate *******************************",
            password: "****Certificate Password******"
        };
        const credential = new DefaultAzureCredential();
        const client = new ApiManagementClient(credential, subscriptionId);
        const result = yield client.certificate.createOrUpdate(resourceGroupName, serviceName, certificateId, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates the certificate being used for authentication with the backend.
 *
 * @summary Creates or updates the certificate being used for authentication with the backend.
 * x-ms-original-file: specification/apimanagement/resource-manager/Microsoft.ApiManagement/stable/2022-08-01/examples/ApiManagementCreateCertificateWithKeyVault.json
 */
function apiManagementCreateCertificateWithKeyVault() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["APIMANAGEMENT_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["APIMANAGEMENT_RESOURCE_GROUP"] || "rg1";
        const serviceName = "apimService1";
        const certificateId = "templateCertkv";
        const parameters = {
            keyVault: {
                identityClientId: "ceaa6b06-c00f-43ef-99ac-f53d1fe876a0",
                secretIdentifier: "https://rpbvtkeyvaultintegration.vault-int.azure-int.net/secrets/msitestingCert"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new ApiManagementClient(credential, subscriptionId);
        const result = yield client.certificate.createOrUpdate(resourceGroupName, serviceName, certificateId, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        apiManagementCreateCertificate();
        apiManagementCreateCertificateWithKeyVault();
    });
}
main().catch(console.error);
//# sourceMappingURL=certificateCreateOrUpdateSample.js.map