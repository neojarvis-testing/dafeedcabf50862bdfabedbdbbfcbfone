/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { OperationalInsightsManagementClient } from "../src/operationalInsightsManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("operationalinsights test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let workspaceName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new OperationalInsightsManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            // workspaceName = "workspacetest";
            workspaceName = "oiautorest6685";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("workspaces create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.workspaces.beginCreateOrUpdateAndWait(resourceGroup, workspaceName, {
                location,
                retentionInDays: 30,
                sku: { name: "PerGB2018" },
                tags: { tag1: "val1" }
            }, testPollingOptions);
            assert.equal(res.name, workspaceName);
        });
    });
    it("workspaces get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.workspaces.get(resourceGroup, workspaceName);
            assert.equal(res.name, workspaceName);
        });
    });
    it("workspaces list test", function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.workspaces.listByResourceGroup(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // There are two workspace work for other services on the portal, so now after creating this service ,it is 3 .Next time it will be reverted to 1
            assert.equal(resArray.length, 3);
        });
    });
    it("table list test", function () {
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _b = __asyncValues(client.tables.listByWorkspace(resourceGroup, workspaceName)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    });
    it("workspaces delete test", function () {
        var e_3, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.workspaces.beginDeleteAndWait(resourceGroup, workspaceName);
            try {
                for (var _b = __asyncValues(client.workspaces.listByResourceGroup(resourceGroup)), _c; _c = yield _b.next(), !_c.done;) {
                    let item = _c.value;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            // There are two workspace work for other services on the portal, so it is 2. Next time it will be reverted to 0
            assert.equal(resArray.length, 2);
        });
    });
});
//# sourceMappingURL=operationalinsights_operations_test.spec.js.map