'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var tslib = require('tslib');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link IdentityType} that the service accepts. */
exports.KnownIdentityType = void 0;
(function (KnownIdentityType) {
    /** User */
    KnownIdentityType["User"] = "user";
    /** Application */
    KnownIdentityType["Application"] = "application";
    /** ManagedIdentity */
    KnownIdentityType["ManagedIdentity"] = "managedIdentity";
    /** Key */
    KnownIdentityType["Key"] = "key";
    /** SystemAssigned */
    KnownIdentityType["SystemAssigned"] = "SystemAssigned";
    /** UserAssigned */
    KnownIdentityType["UserAssigned"] = "UserAssigned";
    /** None */
    KnownIdentityType["None"] = "None";
})(exports.KnownIdentityType || (exports.KnownIdentityType = {}));
/** Known values of {@link Type} that the service accepts. */
exports.KnownType = void 0;
(function (KnownType) {
    /** StorageAccount */
    KnownType["StorageAccount"] = "StorageAccount";
    /** EventHub */
    KnownType["EventHub"] = "EventHub";
})(exports.KnownType || (exports.KnownType = {}));
/** Known values of {@link DataSourceKind} that the service accepts. */
exports.KnownDataSourceKind = void 0;
(function (KnownDataSourceKind) {
    /** WindowsEvent */
    KnownDataSourceKind["WindowsEvent"] = "WindowsEvent";
    /** WindowsPerformanceCounter */
    KnownDataSourceKind["WindowsPerformanceCounter"] = "WindowsPerformanceCounter";
    /** IISLogs */
    KnownDataSourceKind["IISLogs"] = "IISLogs";
    /** LinuxSyslog */
    KnownDataSourceKind["LinuxSyslog"] = "LinuxSyslog";
    /** LinuxSyslogCollection */
    KnownDataSourceKind["LinuxSyslogCollection"] = "LinuxSyslogCollection";
    /** LinuxPerformanceObject */
    KnownDataSourceKind["LinuxPerformanceObject"] = "LinuxPerformanceObject";
    /** LinuxPerformanceCollection */
    KnownDataSourceKind["LinuxPerformanceCollection"] = "LinuxPerformanceCollection";
    /** CustomLog */
    KnownDataSourceKind["CustomLog"] = "CustomLog";
    /** CustomLogCollection */
    KnownDataSourceKind["CustomLogCollection"] = "CustomLogCollection";
    /** AzureAuditLog */
    KnownDataSourceKind["AzureAuditLog"] = "AzureAuditLog";
    /** AzureActivityLog */
    KnownDataSourceKind["AzureActivityLog"] = "AzureActivityLog";
    /** GenericDataSource */
    KnownDataSourceKind["GenericDataSource"] = "GenericDataSource";
    /** ChangeTrackingCustomPath */
    KnownDataSourceKind["ChangeTrackingCustomPath"] = "ChangeTrackingCustomPath";
    /** ChangeTrackingPath */
    KnownDataSourceKind["ChangeTrackingPath"] = "ChangeTrackingPath";
    /** ChangeTrackingServices */
    KnownDataSourceKind["ChangeTrackingServices"] = "ChangeTrackingServices";
    /** ChangeTrackingDataTypeConfiguration */
    KnownDataSourceKind["ChangeTrackingDataTypeConfiguration"] = "ChangeTrackingDataTypeConfiguration";
    /** ChangeTrackingDefaultRegistry */
    KnownDataSourceKind["ChangeTrackingDefaultRegistry"] = "ChangeTrackingDefaultRegistry";
    /** ChangeTrackingRegistry */
    KnownDataSourceKind["ChangeTrackingRegistry"] = "ChangeTrackingRegistry";
    /** ChangeTrackingLinuxPath */
    KnownDataSourceKind["ChangeTrackingLinuxPath"] = "ChangeTrackingLinuxPath";
    /** LinuxChangeTrackingPath */
    KnownDataSourceKind["LinuxChangeTrackingPath"] = "LinuxChangeTrackingPath";
    /** ChangeTrackingContentLocation */
    KnownDataSourceKind["ChangeTrackingContentLocation"] = "ChangeTrackingContentLocation";
    /** WindowsTelemetry */
    KnownDataSourceKind["WindowsTelemetry"] = "WindowsTelemetry";
    /** Office365 */
    KnownDataSourceKind["Office365"] = "Office365";
    /** SecurityWindowsBaselineConfiguration */
    KnownDataSourceKind["SecurityWindowsBaselineConfiguration"] = "SecurityWindowsBaselineConfiguration";
    /** SecurityCenterSecurityWindowsBaselineConfiguration */
    KnownDataSourceKind["SecurityCenterSecurityWindowsBaselineConfiguration"] = "SecurityCenterSecurityWindowsBaselineConfiguration";
    /** SecurityEventCollectionConfiguration */
    KnownDataSourceKind["SecurityEventCollectionConfiguration"] = "SecurityEventCollectionConfiguration";
    /** SecurityInsightsSecurityEventCollectionConfiguration */
    KnownDataSourceKind["SecurityInsightsSecurityEventCollectionConfiguration"] = "SecurityInsightsSecurityEventCollectionConfiguration";
    /** ImportComputerGroup */
    KnownDataSourceKind["ImportComputerGroup"] = "ImportComputerGroup";
    /** NetworkMonitoring */
    KnownDataSourceKind["NetworkMonitoring"] = "NetworkMonitoring";
    /** Itsm */
    KnownDataSourceKind["Itsm"] = "Itsm";
    /** DnsAnalytics */
    KnownDataSourceKind["DnsAnalytics"] = "DnsAnalytics";
    /** ApplicationInsights */
    KnownDataSourceKind["ApplicationInsights"] = "ApplicationInsights";
    /** SqlDataClassification */
    KnownDataSourceKind["SqlDataClassification"] = "SqlDataClassification";
})(exports.KnownDataSourceKind || (exports.KnownDataSourceKind = {}));
/** Known values of {@link LinkedServiceEntityStatus} that the service accepts. */
exports.KnownLinkedServiceEntityStatus = void 0;
(function (KnownLinkedServiceEntityStatus) {
    /** Succeeded */
    KnownLinkedServiceEntityStatus["Succeeded"] = "Succeeded";
    /** Deleting */
    KnownLinkedServiceEntityStatus["Deleting"] = "Deleting";
    /** ProvisioningAccount */
    KnownLinkedServiceEntityStatus["ProvisioningAccount"] = "ProvisioningAccount";
    /** Updating */
    KnownLinkedServiceEntityStatus["Updating"] = "Updating";
})(exports.KnownLinkedServiceEntityStatus || (exports.KnownLinkedServiceEntityStatus = {}));
/** Known values of {@link StorageInsightState} that the service accepts. */
exports.KnownStorageInsightState = void 0;
(function (KnownStorageInsightState) {
    /** OK */
    KnownStorageInsightState["OK"] = "OK";
    /** Error */
    KnownStorageInsightState["Error"] = "ERROR";
})(exports.KnownStorageInsightState || (exports.KnownStorageInsightState = {}));
/** Known values of {@link SkuNameEnum} that the service accepts. */
exports.KnownSkuNameEnum = void 0;
(function (KnownSkuNameEnum) {
    /** Free */
    KnownSkuNameEnum["Free"] = "Free";
    /** Standard */
    KnownSkuNameEnum["Standard"] = "Standard";
    /** Premium */
    KnownSkuNameEnum["Premium"] = "Premium";
    /** PerNode */
    KnownSkuNameEnum["PerNode"] = "PerNode";
    /** PerGB2018 */
    KnownSkuNameEnum["PerGB2018"] = "PerGB2018";
    /** Standalone */
    KnownSkuNameEnum["Standalone"] = "Standalone";
    /** CapacityReservation */
    KnownSkuNameEnum["CapacityReservation"] = "CapacityReservation";
})(exports.KnownSkuNameEnum || (exports.KnownSkuNameEnum = {}));
/** Known values of {@link SearchSortEnum} that the service accepts. */
exports.KnownSearchSortEnum = void 0;
(function (KnownSearchSortEnum) {
    /** Asc */
    KnownSearchSortEnum["Asc"] = "asc";
    /** Desc */
    KnownSearchSortEnum["Desc"] = "desc";
})(exports.KnownSearchSortEnum || (exports.KnownSearchSortEnum = {}));
/** Known values of {@link PurgeState} that the service accepts. */
exports.KnownPurgeState = void 0;
(function (KnownPurgeState) {
    /** Pending */
    KnownPurgeState["Pending"] = "pending";
    /** Completed */
    KnownPurgeState["Completed"] = "completed";
})(exports.KnownPurgeState || (exports.KnownPurgeState = {}));
/** Known values of {@link ClusterSkuNameEnum} that the service accepts. */
exports.KnownClusterSkuNameEnum = void 0;
(function (KnownClusterSkuNameEnum) {
    /** CapacityReservation */
    KnownClusterSkuNameEnum["CapacityReservation"] = "CapacityReservation";
})(exports.KnownClusterSkuNameEnum || (exports.KnownClusterSkuNameEnum = {}));
/** Known values of {@link ClusterEntityStatus} that the service accepts. */
exports.KnownClusterEntityStatus = void 0;
(function (KnownClusterEntityStatus) {
    /** Creating */
    KnownClusterEntityStatus["Creating"] = "Creating";
    /** Succeeded */
    KnownClusterEntityStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownClusterEntityStatus["Failed"] = "Failed";
    /** Canceled */
    KnownClusterEntityStatus["Canceled"] = "Canceled";
    /** Deleting */
    KnownClusterEntityStatus["Deleting"] = "Deleting";
    /** ProvisioningAccount */
    KnownClusterEntityStatus["ProvisioningAccount"] = "ProvisioningAccount";
    /** Updating */
    KnownClusterEntityStatus["Updating"] = "Updating";
})(exports.KnownClusterEntityStatus || (exports.KnownClusterEntityStatus = {}));
/** Known values of {@link BillingType} that the service accepts. */
exports.KnownBillingType = void 0;
(function (KnownBillingType) {
    /** Cluster */
    KnownBillingType["Cluster"] = "Cluster";
    /** Workspaces */
    KnownBillingType["Workspaces"] = "Workspaces";
})(exports.KnownBillingType || (exports.KnownBillingType = {}));
/** Known values of {@link WorkspaceEntityStatus} that the service accepts. */
exports.KnownWorkspaceEntityStatus = void 0;
(function (KnownWorkspaceEntityStatus) {
    /** Creating */
    KnownWorkspaceEntityStatus["Creating"] = "Creating";
    /** Succeeded */
    KnownWorkspaceEntityStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownWorkspaceEntityStatus["Failed"] = "Failed";
    /** Canceled */
    KnownWorkspaceEntityStatus["Canceled"] = "Canceled";
    /** Deleting */
    KnownWorkspaceEntityStatus["Deleting"] = "Deleting";
    /** ProvisioningAccount */
    KnownWorkspaceEntityStatus["ProvisioningAccount"] = "ProvisioningAccount";
    /** Updating */
    KnownWorkspaceEntityStatus["Updating"] = "Updating";
})(exports.KnownWorkspaceEntityStatus || (exports.KnownWorkspaceEntityStatus = {}));
/** Known values of {@link WorkspaceSkuNameEnum} that the service accepts. */
exports.KnownWorkspaceSkuNameEnum = void 0;
(function (KnownWorkspaceSkuNameEnum) {
    /** Free */
    KnownWorkspaceSkuNameEnum["Free"] = "Free";
    /** Standard */
    KnownWorkspaceSkuNameEnum["Standard"] = "Standard";
    /** Premium */
    KnownWorkspaceSkuNameEnum["Premium"] = "Premium";
    /** PerNode */
    KnownWorkspaceSkuNameEnum["PerNode"] = "PerNode";
    /** PerGB2018 */
    KnownWorkspaceSkuNameEnum["PerGB2018"] = "PerGB2018";
    /** Standalone */
    KnownWorkspaceSkuNameEnum["Standalone"] = "Standalone";
    /** CapacityReservation */
    KnownWorkspaceSkuNameEnum["CapacityReservation"] = "CapacityReservation";
    /** LACluster */
    KnownWorkspaceSkuNameEnum["LACluster"] = "LACluster";
})(exports.KnownWorkspaceSkuNameEnum || (exports.KnownWorkspaceSkuNameEnum = {}));
/** Known values of {@link DataIngestionStatus} that the service accepts. */
exports.KnownDataIngestionStatus = void 0;
(function (KnownDataIngestionStatus) {
    /** Ingestion enabled following daily cap quota reset, or subscription enablement. */
    KnownDataIngestionStatus["RespectQuota"] = "RespectQuota";
    /** Ingestion started following service setting change. */
    KnownDataIngestionStatus["ForceOn"] = "ForceOn";
    /** Ingestion stopped following service setting change. */
    KnownDataIngestionStatus["ForceOff"] = "ForceOff";
    /** Reached daily cap quota, ingestion stopped. */
    KnownDataIngestionStatus["OverQuota"] = "OverQuota";
    /** Ingestion stopped following suspended subscription. */
    KnownDataIngestionStatus["SubscriptionSuspended"] = "SubscriptionSuspended";
    /** 80% of daily cap quota reached. */
    KnownDataIngestionStatus["ApproachingQuota"] = "ApproachingQuota";
})(exports.KnownDataIngestionStatus || (exports.KnownDataIngestionStatus = {}));
/** Known values of {@link PublicNetworkAccessType} that the service accepts. */
exports.KnownPublicNetworkAccessType = void 0;
(function (KnownPublicNetworkAccessType) {
    /** Enables connectivity to Log Analytics through public DNS. */
    KnownPublicNetworkAccessType["Enabled"] = "Enabled";
    /** Disables public connectivity to Log Analytics through public DNS. */
    KnownPublicNetworkAccessType["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccessType || (exports.KnownPublicNetworkAccessType = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link TablePlanEnum} that the service accepts. */
exports.KnownTablePlanEnum = void 0;
(function (KnownTablePlanEnum) {
    /** Logs  that are adjusted to support high volume low value verbose logs. */
    KnownTablePlanEnum["Basic"] = "Basic";
    /** Logs  that allow monitoring and analytics. */
    KnownTablePlanEnum["Analytics"] = "Analytics";
})(exports.KnownTablePlanEnum || (exports.KnownTablePlanEnum = {}));
/** Known values of {@link ColumnTypeEnum} that the service accepts. */
exports.KnownColumnTypeEnum = void 0;
(function (KnownColumnTypeEnum) {
    /** String */
    KnownColumnTypeEnum["String"] = "string";
    /** Int */
    KnownColumnTypeEnum["Int"] = "int";
    /** Long */
    KnownColumnTypeEnum["Long"] = "long";
    /** Real */
    KnownColumnTypeEnum["Real"] = "real";
    /** Boolean */
    KnownColumnTypeEnum["Boolean"] = "boolean";
    /** DateTime */
    KnownColumnTypeEnum["DateTime"] = "dateTime";
    /** Guid */
    KnownColumnTypeEnum["Guid"] = "guid";
    /** Dynamic */
    KnownColumnTypeEnum["Dynamic"] = "dynamic";
})(exports.KnownColumnTypeEnum || (exports.KnownColumnTypeEnum = {}));
/** Known values of {@link ColumnDataTypeHintEnum} that the service accepts. */
exports.KnownColumnDataTypeHintEnum = void 0;
(function (KnownColumnDataTypeHintEnum) {
    /** A string that matches the pattern of a URI, for example, scheme://username:password@host:1234/this/is/a/path?k1=v1&k2=v2#fragment */
    KnownColumnDataTypeHintEnum["Uri"] = "uri";
    /** A standard 128-bit GUID following the standard shape, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx */
    KnownColumnDataTypeHintEnum["Guid"] = "guid";
    /** An Azure Resource Model (ARM) path: /subscriptions/{...}/resourceGroups/{...}/providers/Microsoft.{...}/{...}/{...}/{...}... */
    KnownColumnDataTypeHintEnum["ArmPath"] = "armPath";
    /** A standard V4/V6 ip address following the standard shape, x.x.x.x/y:y:y:y:y:y:y:y */
    KnownColumnDataTypeHintEnum["Ip"] = "ip";
})(exports.KnownColumnDataTypeHintEnum || (exports.KnownColumnDataTypeHintEnum = {}));
/** Known values of {@link SourceEnum} that the service accepts. */
exports.KnownSourceEnum = void 0;
(function (KnownSourceEnum) {
    /** Tables provisioned by the system, as collected via Diagnostic Settings, the Agents, or any other standard data collection means. */
    KnownSourceEnum["Microsoft"] = "microsoft";
    /** Tables created by the owner of the Workspace, and only found in this Workspace. */
    KnownSourceEnum["Customer"] = "customer";
})(exports.KnownSourceEnum || (exports.KnownSourceEnum = {}));
/** Known values of {@link TableTypeEnum} that the service accepts. */
exports.KnownTableTypeEnum = void 0;
(function (KnownTableTypeEnum) {
    /** Standard data collected by Azure Monitor. */
    KnownTableTypeEnum["Microsoft"] = "Microsoft";
    /** Custom log table. */
    KnownTableTypeEnum["CustomLog"] = "CustomLog";
    /** Restored data. */
    KnownTableTypeEnum["RestoredLogs"] = "RestoredLogs";
    /** Data collected by a search job. */
    KnownTableTypeEnum["SearchResults"] = "SearchResults";
})(exports.KnownTableTypeEnum || (exports.KnownTableTypeEnum = {}));
/** Known values of {@link TableSubTypeEnum} that the service accepts. */
exports.KnownTableSubTypeEnum = void 0;
(function (KnownTableSubTypeEnum) {
    /** The default subtype with which built-in tables are created. */
    KnownTableSubTypeEnum["Any"] = "Any";
    /** Indicates a table created through the Data Collector API or with the custom logs feature of the MMA agent, or any table against which Custom Fields were created. */
    KnownTableSubTypeEnum["Classic"] = "Classic";
    /** A table eligible to have data sent into it via any of the means supported by Data Collection Rules: the Data Collection Endpoint API, ingestion-time transformations, or any other mechanism provided by Data Collection Rules */
    KnownTableSubTypeEnum["DataCollectionRuleBased"] = "DataCollectionRuleBased";
})(exports.KnownTableSubTypeEnum || (exports.KnownTableSubTypeEnum = {}));
/** Known values of {@link ProvisioningStateEnum} that the service accepts. */
exports.KnownProvisioningStateEnum = void 0;
(function (KnownProvisioningStateEnum) {
    /** Table schema is still being built and updated, table is currently locked for any changes till the procedure is done. */
    KnownProvisioningStateEnum["Updating"] = "Updating";
    /** Table schema is stable and without changes, table data is being updated. */
    KnownProvisioningStateEnum["InProgress"] = "InProgress";
    /** Table state is stable and without changes, table is unlocked and open for new updates. */
    KnownProvisioningStateEnum["Succeeded"] = "Succeeded";
})(exports.KnownProvisioningStateEnum || (exports.KnownProvisioningStateEnum = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const LogAnalyticsQueryPackListResult = {
    type: {
        name: "Composite",
        className: "LogAnalyticsQueryPackListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogAnalyticsQueryPack"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const QueryPacksResource = {
    type: {
        name: "Composite",
        className: "QueryPacksResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
const TagsResource = {
    type: {
        name: "Composite",
        className: "TagsResource",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const LogAnalyticsQueryPackQueryListResult = {
    type: {
        name: "Composite",
        className: "LogAnalyticsQueryPackQueryListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogAnalyticsQueryPackQuery"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LogAnalyticsQueryPackQueryPropertiesRelated = {
    type: {
        name: "Composite",
        className: "LogAnalyticsQueryPackQueryPropertiesRelated",
        modelProperties: {
            categories: {
                serializedName: "categories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            resourceTypes: {
                serializedName: "resourceTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            solutions: {
                serializedName: "solutions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const AzureResourceProperties = {
    type: {
        name: "Composite",
        className: "AzureResourceProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const LogAnalyticsQueryPackQuerySearchProperties = {
    type: {
        name: "Composite",
        className: "LogAnalyticsQueryPackQuerySearchProperties",
        modelProperties: {
            related: {
                serializedName: "related",
                type: {
                    name: "Composite",
                    className: "LogAnalyticsQueryPackQuerySearchPropertiesRelated"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Sequence", element: { type: { name: "String" } } }
                    }
                }
            }
        }
    }
};
const LogAnalyticsQueryPackQuerySearchPropertiesRelated = {
    type: {
        name: "Composite",
        className: "LogAnalyticsQueryPackQuerySearchPropertiesRelated",
        modelProperties: {
            categories: {
                serializedName: "categories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            resourceTypes: {
                serializedName: "resourceTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            solutions: {
                serializedName: "solutions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const DataExportListResult = {
    type: {
        name: "Composite",
        className: "DataExportListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataExport"
                        }
                    }
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DataSourceListResult = {
    type: {
        name: "Composite",
        className: "DataSourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataSource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const IntelligencePack = {
    type: {
        name: "Composite",
        className: "IntelligencePack",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LinkedServiceListResult = {
    type: {
        name: "Composite",
        className: "LinkedServiceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedService"
                        }
                    }
                }
            }
        }
    }
};
const LinkedStorageAccountsListResult = {
    type: {
        name: "Composite",
        className: "LinkedStorageAccountsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedStorageAccountsResource"
                        }
                    }
                }
            }
        }
    }
};
const WorkspaceListManagementGroupsResult = {
    type: {
        name: "Composite",
        className: "WorkspaceListManagementGroupsResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagementGroup"
                        }
                    }
                }
            }
        }
    }
};
const ManagementGroup = {
    type: {
        name: "Composite",
        className: "ManagementGroup",
        modelProperties: {
            serverCount: {
                serializedName: "properties.serverCount",
                type: {
                    name: "Number"
                }
            },
            isGateway: {
                serializedName: "properties.isGateway",
                type: {
                    name: "Boolean"
                }
            },
            name: {
                serializedName: "properties.name",
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "properties.id",
                type: {
                    name: "String"
                }
            },
            created: {
                serializedName: "properties.created",
                type: {
                    name: "DateTime"
                }
            },
            dataReceived: {
                serializedName: "properties.dataReceived",
                type: {
                    name: "DateTime"
                }
            },
            version: {
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            },
            sku: {
                serializedName: "properties.sku",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationStatus = {
    type: {
        name: "Composite",
        className: "OperationStatus",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "String"
                }
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorResponse"
                }
            }
        }
    }
};
const SharedKeys = {
    type: {
        name: "Composite",
        className: "SharedKeys",
        modelProperties: {
            primarySharedKey: {
                serializedName: "primarySharedKey",
                type: {
                    name: "String"
                }
            },
            secondarySharedKey: {
                serializedName: "secondarySharedKey",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkspaceListUsagesResult = {
    type: {
        name: "Composite",
        className: "WorkspaceListUsagesResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UsageMetric"
                        }
                    }
                }
            }
        }
    }
};
const UsageMetric = {
    type: {
        name: "Composite",
        className: "UsageMetric",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "MetricName"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                type: {
                    name: "Number"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Number"
                }
            },
            nextResetTime: {
                serializedName: "nextResetTime",
                type: {
                    name: "DateTime"
                }
            },
            quotaPeriod: {
                serializedName: "quotaPeriod",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MetricName = {
    type: {
        name: "Composite",
        className: "MetricName",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            localizedValue: {
                serializedName: "localizedValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageAccount = {
    type: {
        name: "Composite",
        className: "StorageAccount",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            key: {
                serializedName: "key",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageInsightStatus = {
    type: {
        name: "Composite",
        className: "StorageInsightStatus",
        modelProperties: {
            state: {
                serializedName: "state",
                required: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageInsightListResult = {
    type: {
        name: "Composite",
        className: "StorageInsightListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageInsight"
                        }
                    }
                }
            },
            odataNextLink: {
                serializedName: "@odata\\.nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Tag = {
    type: {
        name: "Composite",
        className: "Tag",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SavedSearchesListResult = {
    type: {
        name: "Composite",
        className: "SavedSearchesListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SavedSearch"
                        }
                    }
                }
            }
        }
    }
};
const AvailableServiceTier = {
    type: {
        name: "Composite",
        className: "AvailableServiceTier",
        modelProperties: {
            serviceTier: {
                serializedName: "serviceTier",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            enabled: {
                serializedName: "enabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            minimumRetention: {
                serializedName: "minimumRetention",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            maximumRetention: {
                serializedName: "maximumRetention",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            defaultRetention: {
                serializedName: "defaultRetention",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            capacityReservationLevel: {
                serializedName: "capacityReservationLevel",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            lastSkuUpdate: {
                serializedName: "lastSkuUpdate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SearchGetSchemaResponse = {
    type: {
        name: "Composite",
        className: "SearchGetSchemaResponse",
        modelProperties: {
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "SearchMetadata"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SearchSchemaValue"
                        }
                    }
                }
            }
        }
    }
};
const SearchMetadata = {
    type: {
        name: "Composite",
        className: "SearchMetadata",
        modelProperties: {
            searchId: {
                serializedName: "requestId",
                type: {
                    name: "String"
                }
            },
            resultType: {
                serializedName: "resultType",
                type: {
                    name: "String"
                }
            },
            total: {
                serializedName: "total",
                type: {
                    name: "Number"
                }
            },
            top: {
                serializedName: "top",
                type: {
                    name: "Number"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            coreSummaries: {
                serializedName: "coreSummaries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CoreSummary"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime"
                }
            },
            lastUpdated: {
                serializedName: "lastUpdated",
                type: {
                    name: "DateTime"
                }
            },
            eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            },
            sort: {
                serializedName: "sort",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SearchSort"
                        }
                    }
                }
            },
            requestTime: {
                serializedName: "requestTime",
                type: {
                    name: "Number"
                }
            },
            aggregatedValueField: {
                serializedName: "aggregatedValueField",
                type: {
                    name: "String"
                }
            },
            aggregatedGroupingFields: {
                serializedName: "aggregatedGroupingFields",
                type: {
                    name: "String"
                }
            },
            sum: {
                serializedName: "sum",
                type: {
                    name: "Number"
                }
            },
            max: {
                serializedName: "max",
                type: {
                    name: "Number"
                }
            },
            schema: {
                serializedName: "schema",
                type: {
                    name: "Composite",
                    className: "SearchMetadataSchema"
                }
            }
        }
    }
};
const CoreSummary = {
    type: {
        name: "Composite",
        className: "CoreSummary",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            numberOfDocuments: {
                serializedName: "numberOfDocuments",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SearchSort = {
    type: {
        name: "Composite",
        className: "SearchSort",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            order: {
                serializedName: "order",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SearchMetadataSchema = {
    type: {
        name: "Composite",
        className: "SearchMetadataSchema",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const SearchSchemaValue = {
    type: {
        name: "Composite",
        className: "SearchSchemaValue",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            indexed: {
                serializedName: "indexed",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            stored: {
                serializedName: "stored",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            facet: {
                serializedName: "facet",
                required: true,
                type: {
                    name: "Boolean"
                }
            },
            ownerType: {
                serializedName: "ownerType",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const WorkspacePurgeBody = {
    type: {
        name: "Composite",
        className: "WorkspacePurgeBody",
        modelProperties: {
            table: {
                serializedName: "table",
                required: true,
                type: {
                    name: "String"
                }
            },
            filters: {
                serializedName: "filters",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WorkspacePurgeBodyFilters"
                        }
                    }
                }
            }
        }
    }
};
const WorkspacePurgeBodyFilters = {
    type: {
        name: "Composite",
        className: "WorkspacePurgeBodyFilters",
        modelProperties: {
            column: {
                serializedName: "column",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any"
                }
            },
            key: {
                serializedName: "key",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkspacePurgeResponse = {
    type: {
        name: "Composite",
        className: "WorkspacePurgeResponse",
        modelProperties: {
            operationId: {
                serializedName: "operationId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkspacePurgeStatusResponse = {
    type: {
        name: "Composite",
        className: "WorkspacePurgeStatusResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterListResult = {
    type: {
        name: "Composite",
        className: "ClusterListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Cluster"
                        }
                    }
                }
            }
        }
    }
};
const Identity = {
    type: {
        name: "Composite",
        className: "Identity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserIdentityProperties" }
                    }
                }
            }
        }
    }
};
const UserIdentityProperties = {
    type: {
        name: "Composite",
        className: "UserIdentityProperties",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ClusterSku = {
    type: {
        name: "Composite",
        className: "ClusterSku",
        modelProperties: {
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Enum",
                    allowedValues: [500, 1000, 2000, 5000]
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KeyVaultProperties = {
    type: {
        name: "Composite",
        className: "KeyVaultProperties",
        modelProperties: {
            keyVaultUri: {
                serializedName: "keyVaultUri",
                type: {
                    name: "String"
                }
            },
            keyName: {
                serializedName: "keyName",
                type: {
                    name: "String"
                }
            },
            keyVersion: {
                serializedName: "keyVersion",
                type: {
                    name: "String"
                }
            },
            keyRsaSize: {
                serializedName: "keyRsaSize",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AssociatedWorkspace = {
    type: {
        name: "Composite",
        className: "AssociatedWorkspace",
        modelProperties: {
            workspaceId: {
                serializedName: "workspaceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            workspaceName: {
                serializedName: "workspaceName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resourceId: {
                serializedName: "resourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            associateDate: {
                serializedName: "associateDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CapacityReservationProperties = {
    type: {
        name: "Composite",
        className: "CapacityReservationProperties",
        modelProperties: {
            lastSkuUpdate: {
                serializedName: "lastSkuUpdate",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            minCapacity: {
                serializedName: "minCapacity",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ClusterPatch = {
    type: {
        name: "Composite",
        className: "ClusterPatch",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ClusterSku"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            keyVaultProperties: {
                serializedName: "properties.keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "KeyVaultProperties"
                }
            },
            billingType: {
                serializedName: "properties.billingType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            }
        }
    }
};
const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkspaceListResult = {
    type: {
        name: "Composite",
        className: "WorkspaceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Workspace"
                        }
                    }
                }
            }
        }
    }
};
const WorkspaceSku = {
    type: {
        name: "Composite",
        className: "WorkspaceSku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            capacityReservationLevel: {
                serializedName: "capacityReservationLevel",
                type: {
                    name: "Enum",
                    allowedValues: [100, 200, 300, 400, 500, 1000, 2000, 5000]
                }
            },
            lastSkuUpdate: {
                serializedName: "lastSkuUpdate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkspaceCapping = {
    type: {
        name: "Composite",
        className: "WorkspaceCapping",
        modelProperties: {
            dailyQuotaGb: {
                serializedName: "dailyQuotaGb",
                type: {
                    name: "Number"
                }
            },
            quotaNextResetTime: {
                serializedName: "quotaNextResetTime",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dataIngestionStatus: {
                serializedName: "dataIngestionStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkScopedResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkScopedResource",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            scopeId: {
                serializedName: "scopeId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkspaceFeatures = {
    type: {
        name: "Composite",
        className: "WorkspaceFeatures",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            enableDataExport: {
                serializedName: "enableDataExport",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            immediatePurgeDataOn30Days: {
                serializedName: "immediatePurgeDataOn30Days",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            enableLogAccessUsingOnlyResourcePermissions: {
                serializedName: "enableLogAccessUsingOnlyResourcePermissions",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            },
            clusterResourceId: {
                serializedName: "clusterResourceId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            disableLocalAuth: {
                serializedName: "disableLocalAuth",
                nullable: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const SystemDataAutoGenerated = {
    type: {
        name: "Composite",
        className: "SystemDataAutoGenerated",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const TablesListResult = {
    type: {
        name: "Composite",
        className: "TablesListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Table"
                        }
                    }
                }
            }
        }
    }
};
const SearchResults = {
    type: {
        name: "Composite",
        className: "SearchResults",
        modelProperties: {
            query: {
                serializedName: "query",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Number"
                }
            },
            startSearchTime: {
                serializedName: "startSearchTime",
                type: {
                    name: "DateTime"
                }
            },
            endSearchTime: {
                serializedName: "endSearchTime",
                type: {
                    name: "DateTime"
                }
            },
            sourceTable: {
                serializedName: "sourceTable",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            azureAsyncOperationId: {
                serializedName: "azureAsyncOperationId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RestoredLogs = {
    type: {
        name: "Composite",
        className: "RestoredLogs",
        modelProperties: {
            startRestoreTime: {
                serializedName: "startRestoreTime",
                type: {
                    name: "DateTime"
                }
            },
            endRestoreTime: {
                serializedName: "endRestoreTime",
                type: {
                    name: "DateTime"
                }
            },
            sourceTable: {
                serializedName: "sourceTable",
                type: {
                    name: "String"
                }
            },
            azureAsyncOperationId: {
                serializedName: "azureAsyncOperationId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResultStatistics = {
    type: {
        name: "Composite",
        className: "ResultStatistics",
        modelProperties: {
            progress: {
                constraints: {
                    MultipleOf: 0.01
                },
                serializedName: "progress",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            ingestedRecords: {
                serializedName: "ingestedRecords",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            scannedGb: {
                constraints: {
                    MultipleOf: 0.01
                },
                serializedName: "scannedGb",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Schema = {
    type: {
        name: "Composite",
        className: "Schema",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            columns: {
                serializedName: "columns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Column"
                        }
                    }
                }
            },
            standardColumns: {
                serializedName: "standardColumns",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Column"
                        }
                    }
                }
            },
            categories: {
                serializedName: "categories",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            labels: {
                serializedName: "labels",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            source: {
                serializedName: "source",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tableType: {
                serializedName: "tableType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tableSubType: {
                serializedName: "tableSubType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            solutions: {
                serializedName: "solutions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const Column = {
    type: {
        name: "Composite",
        className: "Column",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            dataTypeHint: {
                serializedName: "dataTypeHint",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            isDefaultDisplay: {
                serializedName: "isDefaultDisplay",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            isHidden: {
                serializedName: "isHidden",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const DataSourceFilter = {
    type: {
        name: "Composite",
        className: "DataSourceFilter",
        modelProperties: {
            kind: {
                serializedName: "kind",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const LogAnalyticsQueryPack = {
    type: {
        name: "Composite",
        className: "LogAnalyticsQueryPack",
        modelProperties: Object.assign(Object.assign({}, QueryPacksResource.type.modelProperties), { queryPackId: {
                serializedName: "properties.queryPackId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, timeCreated: {
                serializedName: "properties.timeCreated",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timeModified: {
                serializedName: "properties.timeModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const LogAnalyticsQueryPackQuery = {
    type: {
        name: "Composite",
        className: "LogAnalyticsQueryPackQuery",
        modelProperties: Object.assign(Object.assign({}, AzureResourceProperties.type.modelProperties), { idPropertiesId: {
                serializedName: "properties.id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            }, timeCreated: {
                serializedName: "properties.timeCreated",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, timeModified: {
                serializedName: "properties.timeModified",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, author: {
                serializedName: "properties.author",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, body: {
                serializedName: "properties.body",
                type: {
                    name: "String"
                }
            }, related: {
                serializedName: "properties.related",
                type: {
                    name: "Composite",
                    className: "LogAnalyticsQueryPackQueryPropertiesRelated"
                }
            }, tags: {
                serializedName: "properties.tags",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Sequence", element: { type: { name: "String" } } }
                    }
                }
            }, properties: {
                serializedName: "properties.properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AzureEntityResource = {
    type: {
        name: "Composite",
        className: "AzureEntityResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const DataExport = {
    type: {
        name: "Composite",
        className: "DataExport",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { dataExportId: {
                serializedName: "properties.dataExportId",
                type: {
                    name: "String"
                }
            }, tableNames: {
                serializedName: "properties.tableNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, enable: {
                serializedName: "properties.enable",
                type: {
                    name: "Boolean"
                }
            }, createdDate: {
                serializedName: "properties.createdDate",
                type: {
                    name: "String"
                }
            }, lastModifiedDate: {
                serializedName: "properties.lastModifiedDate",
                type: {
                    name: "String"
                }
            }, resourceId: {
                serializedName: "properties.destination.resourceId",
                type: {
                    name: "String"
                }
            }, typePropertiesDestinationType: {
                serializedName: "properties.destination.type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, eventHubName: {
                serializedName: "properties.destination.metaData.eventHubName",
                type: {
                    name: "String"
                }
            } })
    }
};
const DataSource = {
    type: {
        name: "Composite",
        className: "DataSource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }, kind: {
                serializedName: "kind",
                required: true,
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const LinkedService = {
    type: {
        name: "Composite",
        className: "LinkedService",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, resourceId: {
                serializedName: "properties.resourceId",
                type: {
                    name: "String"
                }
            }, writeAccessResourceId: {
                serializedName: "properties.writeAccessResourceId",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            } })
    }
};
const LinkedStorageAccountsResource = {
    type: {
        name: "Composite",
        className: "LinkedStorageAccountsResource",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { dataSourceType: {
                serializedName: "properties.dataSourceType",
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "CustomLogs",
                        "AzureWatson",
                        "Query",
                        "Ingestion",
                        "Alerts"
                    ]
                }
            }, storageAccountIds: {
                serializedName: "properties.storageAccountIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const StorageInsight = {
    type: {
        name: "Composite",
        className: "StorageInsight",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { eTag: {
                serializedName: "eTag",
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, containers: {
                serializedName: "properties.containers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, tables: {
                serializedName: "properties.tables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, storageAccount: {
                serializedName: "properties.storageAccount",
                type: {
                    name: "Composite",
                    className: "StorageAccount"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Composite",
                    className: "StorageInsightStatus"
                }
            } })
    }
};
const SavedSearch = {
    type: {
        name: "Composite",
        className: "SavedSearch",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }, category: {
                serializedName: "properties.category",
                required: true,
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                required: true,
                type: {
                    name: "String"
                }
            }, query: {
                serializedName: "properties.query",
                required: true,
                type: {
                    name: "String"
                }
            }, functionAlias: {
                serializedName: "properties.functionAlias",
                type: {
                    name: "String"
                }
            }, functionParameters: {
                serializedName: "properties.functionParameters",
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "properties.version",
                type: {
                    name: "Number"
                }
            }, tags: {
                serializedName: "properties.tags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Tag"
                        }
                    }
                }
            } })
    }
};
const Table = {
    type: {
        name: "Composite",
        className: "Table",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemDataAutoGenerated"
                }
            }, retentionInDays: {
                constraints: {
                    InclusiveMaximum: 730,
                    InclusiveMinimum: 4
                },
                serializedName: "properties.retentionInDays",
                type: {
                    name: "Number"
                }
            }, totalRetentionInDays: {
                constraints: {
                    InclusiveMaximum: 2555,
                    InclusiveMinimum: 4
                },
                serializedName: "properties.totalRetentionInDays",
                type: {
                    name: "Number"
                }
            }, archiveRetentionInDays: {
                serializedName: "properties.archiveRetentionInDays",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, searchResults: {
                serializedName: "properties.searchResults",
                type: {
                    name: "Composite",
                    className: "SearchResults"
                }
            }, restoredLogs: {
                serializedName: "properties.restoredLogs",
                type: {
                    name: "Composite",
                    className: "RestoredLogs"
                }
            }, resultStatistics: {
                serializedName: "properties.resultStatistics",
                type: {
                    name: "Composite",
                    className: "ResultStatistics"
                }
            }, plan: {
                serializedName: "properties.plan",
                type: {
                    name: "String"
                }
            }, lastPlanModifiedDate: {
                serializedName: "properties.lastPlanModifiedDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, schema: {
                serializedName: "properties.schema",
                type: {
                    name: "Composite",
                    className: "Schema"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, retentionInDaysAsDefault: {
                serializedName: "properties.retentionInDaysAsDefault",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, totalRetentionInDaysAsDefault: {
                serializedName: "properties.totalRetentionInDaysAsDefault",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const Cluster = {
    type: {
        name: "Composite",
        className: "Cluster",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ClusterSku"
                }
            }, clusterId: {
                serializedName: "properties.clusterId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, isDoubleEncryptionEnabled: {
                serializedName: "properties.isDoubleEncryptionEnabled",
                type: {
                    name: "Boolean"
                }
            }, isAvailabilityZonesEnabled: {
                serializedName: "properties.isAvailabilityZonesEnabled",
                type: {
                    name: "Boolean"
                }
            }, billingType: {
                serializedName: "properties.billingType",
                type: {
                    name: "String"
                }
            }, keyVaultProperties: {
                serializedName: "properties.keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "KeyVaultProperties"
                }
            }, lastModifiedDate: {
                serializedName: "properties.lastModifiedDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, createdDate: {
                serializedName: "properties.createdDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, associatedWorkspaces: {
                serializedName: "properties.associatedWorkspaces",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AssociatedWorkspace"
                        }
                    }
                }
            }, capacityReservationProperties: {
                serializedName: "properties.capacityReservationProperties",
                type: {
                    name: "Composite",
                    className: "CapacityReservationProperties"
                }
            } })
    }
};
const Workspace = {
    type: {
        name: "Composite",
        className: "Workspace",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemDataAutoGenerated"
                }
            }, etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerId: {
                serializedName: "properties.customerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "properties.sku",
                type: {
                    name: "Composite",
                    className: "WorkspaceSku"
                }
            }, retentionInDays: {
                serializedName: "properties.retentionInDays",
                nullable: true,
                type: {
                    name: "Number"
                }
            }, workspaceCapping: {
                serializedName: "properties.workspaceCapping",
                type: {
                    name: "Composite",
                    className: "WorkspaceCapping"
                }
            }, createdDate: {
                serializedName: "properties.createdDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, modifiedDate: {
                serializedName: "properties.modifiedDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, publicNetworkAccessForIngestion: {
                defaultValue: "Enabled",
                serializedName: "properties.publicNetworkAccessForIngestion",
                type: {
                    name: "String"
                }
            }, publicNetworkAccessForQuery: {
                defaultValue: "Enabled",
                serializedName: "properties.publicNetworkAccessForQuery",
                type: {
                    name: "String"
                }
            }, forceCmkForQuery: {
                serializedName: "properties.forceCmkForQuery",
                type: {
                    name: "Boolean"
                }
            }, privateLinkScopedResources: {
                serializedName: "properties.privateLinkScopedResources",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkScopedResource"
                        }
                    }
                }
            }, features: {
                serializedName: "properties.features",
                type: {
                    name: "Composite",
                    className: "WorkspaceFeatures"
                }
            }, defaultDataCollectionRuleResourceId: {
                serializedName: "properties.defaultDataCollectionRuleResourceId",
                type: {
                    name: "String"
                }
            } })
    }
};
const WorkspacePatch = {
    type: {
        name: "Composite",
        className: "WorkspacePatch",
        modelProperties: Object.assign(Object.assign({}, AzureEntityResource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "Identity"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customerId: {
                serializedName: "properties.customerId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "properties.sku",
                type: {
                    name: "Composite",
                    className: "WorkspaceSku"
                }
            }, retentionInDays: {
                serializedName: "properties.retentionInDays",
                nullable: true,
                type: {
                    name: "Number"
                }
            }, workspaceCapping: {
                serializedName: "properties.workspaceCapping",
                type: {
                    name: "Composite",
                    className: "WorkspaceCapping"
                }
            }, createdDate: {
                serializedName: "properties.createdDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, modifiedDate: {
                serializedName: "properties.modifiedDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, publicNetworkAccessForIngestion: {
                defaultValue: "Enabled",
                serializedName: "properties.publicNetworkAccessForIngestion",
                type: {
                    name: "String"
                }
            }, publicNetworkAccessForQuery: {
                defaultValue: "Enabled",
                serializedName: "properties.publicNetworkAccessForQuery",
                type: {
                    name: "String"
                }
            }, forceCmkForQuery: {
                serializedName: "properties.forceCmkForQuery",
                type: {
                    name: "Boolean"
                }
            }, privateLinkScopedResources: {
                serializedName: "properties.privateLinkScopedResources",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkScopedResource"
                        }
                    }
                }
            }, features: {
                serializedName: "properties.features",
                type: {
                    name: "Composite",
                    className: "WorkspaceFeatures"
                }
            }, defaultDataCollectionRuleResourceId: {
                serializedName: "properties.defaultDataCollectionRuleResourceId",
                type: {
                    name: "String"
                }
            } })
    }
};
const WorkspacePurgePurgeHeaders = {
    type: {
        name: "Composite",
        className: "WorkspacePurgePurgeHeaders",
        modelProperties: {
            xMsStatusLocation: {
                serializedName: "x-ms-status-location",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    LogAnalyticsQueryPackListResult: LogAnalyticsQueryPackListResult,
    QueryPacksResource: QueryPacksResource,
    ErrorResponse: ErrorResponse,
    ErrorDetail: ErrorDetail,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    TagsResource: TagsResource,
    LogAnalyticsQueryPackQueryListResult: LogAnalyticsQueryPackQueryListResult,
    LogAnalyticsQueryPackQueryPropertiesRelated: LogAnalyticsQueryPackQueryPropertiesRelated,
    AzureResourceProperties: AzureResourceProperties,
    SystemData: SystemData,
    LogAnalyticsQueryPackQuerySearchProperties: LogAnalyticsQueryPackQuerySearchProperties,
    LogAnalyticsQueryPackQuerySearchPropertiesRelated: LogAnalyticsQueryPackQuerySearchPropertiesRelated,
    DataExportListResult: DataExportListResult,
    Resource: Resource,
    DataSourceListResult: DataSourceListResult,
    IntelligencePack: IntelligencePack,
    LinkedServiceListResult: LinkedServiceListResult,
    LinkedStorageAccountsListResult: LinkedStorageAccountsListResult,
    WorkspaceListManagementGroupsResult: WorkspaceListManagementGroupsResult,
    ManagementGroup: ManagementGroup,
    OperationStatus: OperationStatus,
    SharedKeys: SharedKeys,
    WorkspaceListUsagesResult: WorkspaceListUsagesResult,
    UsageMetric: UsageMetric,
    MetricName: MetricName,
    StorageAccount: StorageAccount,
    StorageInsightStatus: StorageInsightStatus,
    StorageInsightListResult: StorageInsightListResult,
    Tag: Tag,
    SavedSearchesListResult: SavedSearchesListResult,
    AvailableServiceTier: AvailableServiceTier,
    SearchGetSchemaResponse: SearchGetSchemaResponse,
    SearchMetadata: SearchMetadata,
    CoreSummary: CoreSummary,
    SearchSort: SearchSort,
    SearchMetadataSchema: SearchMetadataSchema,
    SearchSchemaValue: SearchSchemaValue,
    WorkspacePurgeBody: WorkspacePurgeBody,
    WorkspacePurgeBodyFilters: WorkspacePurgeBodyFilters,
    WorkspacePurgeResponse: WorkspacePurgeResponse,
    WorkspacePurgeStatusResponse: WorkspacePurgeStatusResponse,
    ClusterListResult: ClusterListResult,
    Identity: Identity,
    UserIdentityProperties: UserIdentityProperties,
    ClusterSku: ClusterSku,
    KeyVaultProperties: KeyVaultProperties,
    AssociatedWorkspace: AssociatedWorkspace,
    CapacityReservationProperties: CapacityReservationProperties,
    ClusterPatch: ClusterPatch,
    OperationListResult: OperationListResult,
    Operation: Operation,
    OperationDisplay: OperationDisplay,
    WorkspaceListResult: WorkspaceListResult,
    WorkspaceSku: WorkspaceSku,
    WorkspaceCapping: WorkspaceCapping,
    PrivateLinkScopedResource: PrivateLinkScopedResource,
    WorkspaceFeatures: WorkspaceFeatures,
    SystemDataAutoGenerated: SystemDataAutoGenerated,
    TablesListResult: TablesListResult,
    SearchResults: SearchResults,
    RestoredLogs: RestoredLogs,
    ResultStatistics: ResultStatistics,
    Schema: Schema,
    Column: Column,
    DataSourceFilter: DataSourceFilter,
    LogAnalyticsQueryPack: LogAnalyticsQueryPack,
    LogAnalyticsQueryPackQuery: LogAnalyticsQueryPackQuery,
    ProxyResource: ProxyResource,
    TrackedResource: TrackedResource,
    AzureEntityResource: AzureEntityResource,
    DataExport: DataExport,
    DataSource: DataSource,
    LinkedService: LinkedService,
    LinkedStorageAccountsResource: LinkedStorageAccountsResource,
    StorageInsight: StorageInsight,
    SavedSearch: SavedSearch,
    Table: Table,
    Cluster: Cluster,
    Workspace: Workspace,
    WorkspacePatch: WorkspacePatch,
    WorkspacePurgePurgeHeaders: WorkspacePurgePurgeHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-09-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const logAnalyticsQueryPackPayload = {
    parameterPath: "logAnalyticsQueryPackPayload",
    mapper: LogAnalyticsQueryPack
};
const queryPackName = {
    parameterPath: "queryPackName",
    mapper: {
        serializedName: "queryPackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const queryPackTags = {
    parameterPath: "queryPackTags",
    mapper: TagsResource
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const includeBody = {
    parameterPath: ["options", "includeBody"],
    mapper: {
        serializedName: "includeBody",
        type: {
            name: "Boolean"
        }
    }
};
const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
const querySearchProperties = {
    parameterPath: "querySearchProperties",
    mapper: LogAnalyticsQueryPackQuerySearchProperties
};
const id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String"
        }
    }
};
const queryPayload = {
    parameterPath: "queryPayload",
    mapper: LogAnalyticsQueryPackQuery
};
const workspaceName = {
    parameterPath: "workspaceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$"),
            MaxLength: 63,
            MinLength: 4
        },
        serializedName: "workspaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-08-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: DataExport
};
const dataExportName = {
    parameterPath: "dataExportName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z][A-Za-z0-9-]+[A-Za-z0-9]$"),
            MaxLength: 63,
            MinLength: 4
        },
        serializedName: "dataExportName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const dataExportName1 = {
    parameterPath: "dataExportName",
    mapper: {
        serializedName: "dataExportName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: DataSource
};
const dataSourceName = {
    parameterPath: "dataSourceName",
    mapper: {
        serializedName: "dataSourceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const filter = {
    parameterPath: "filter",
    mapper: {
        serializedName: "$filter",
        required: true,
        type: {
            name: "String"
        }
    }
};
const skiptoken = {
    parameterPath: ["options", "skiptoken"],
    mapper: {
        serializedName: "$skiptoken",
        type: {
            name: "String"
        }
    }
};
const intelligencePackName = {
    parameterPath: "intelligencePackName",
    mapper: {
        serializedName: "intelligencePackName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: LinkedService
};
const linkedServiceName = {
    parameterPath: "linkedServiceName",
    mapper: {
        serializedName: "linkedServiceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: LinkedStorageAccountsResource
};
const dataSourceType = {
    parameterPath: "dataSourceType",
    mapper: {
        serializedName: "dataSourceType",
        required: true,
        type: {
            name: "Enum",
            allowedValues: [
                "CustomLogs",
                "AzureWatson",
                "Query",
                "Ingestion",
                "Alerts"
            ]
        }
    }
};
const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
const asyncOperationId = {
    parameterPath: "asyncOperationId",
    mapper: {
        serializedName: "asyncOperationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters4 = {
    parameterPath: "parameters",
    mapper: StorageInsight
};
const storageInsightName = {
    parameterPath: "storageInsightName",
    mapper: {
        serializedName: "storageInsightName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const savedSearchId = {
    parameterPath: "savedSearchId",
    mapper: {
        serializedName: "savedSearchId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters5 = {
    parameterPath: "parameters",
    mapper: SavedSearch
};
const gatewayId = {
    parameterPath: "gatewayId",
    mapper: {
        serializedName: "gatewayId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const body = {
    parameterPath: "body",
    mapper: WorkspacePurgeBody
};
const purgeId = {
    parameterPath: "purgeId",
    mapper: {
        serializedName: "purgeId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion2 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-06-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const parameters6 = {
    parameterPath: "parameters",
    mapper: Cluster
};
const clusterName = {
    parameterPath: "clusterName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9][A-Za-z0-9-]+[A-Za-z0-9]$"),
            MaxLength: 63,
            MinLength: 4
        },
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const clusterName1 = {
    parameterPath: "clusterName",
    mapper: {
        serializedName: "clusterName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters7 = {
    parameterPath: "parameters",
    mapper: ClusterPatch
};
const apiVersion3 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-10-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const parameters8 = {
    parameterPath: "parameters",
    mapper: Workspace
};
const force = {
    parameterPath: ["options", "force"],
    mapper: {
        serializedName: "force",
        type: {
            name: "Boolean"
        }
    }
};
const parameters9 = {
    parameterPath: "parameters",
    mapper: WorkspacePatch
};
const parameters10 = {
    parameterPath: "parameters",
    mapper: Table
};
const tableName = {
    parameterPath: "tableName",
    mapper: {
        serializedName: "tableName",
        required: true,
        type: {
            name: "String"
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing QueryPacks operations. */
class QueryPacksImpl {
    /**
     * Initialize a new instance of the class QueryPacks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of all Log Analytics QueryPacks within a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets a list of Log Analytics QueryPacks within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets a list of all Log Analytics QueryPacks within a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$8);
    }
    /**
     * Gets a list of Log Analytics QueryPacks within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$3);
    }
    /**
     * Creates a Log Analytics QueryPack. Note: You cannot specify a different value for InstrumentationKey
     * nor AppId in the Put operation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logAnalyticsQueryPackPayload Properties that need to be specified to create or update a Log
     *                                     Analytics QueryPack.
     * @param options The options parameters.
     */
    createOrUpdateWithoutName(resourceGroupName, logAnalyticsQueryPackPayload, options) {
        return this.client.sendOperationRequest({ resourceGroupName, logAnalyticsQueryPackPayload, options }, createOrUpdateWithoutNameOperationSpec);
    }
    /**
     * Deletes a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName, queryPackName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, queryPackName, options }, deleteOperationSpec$b);
    }
    /**
     * Returns a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, queryPackName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, queryPackName, options }, getOperationSpec$c);
    }
    /**
     * Creates (or updates) a Log Analytics QueryPack. Note: You cannot specify a different value for
     * InstrumentationKey nor AppId in the Put operation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param logAnalyticsQueryPackPayload Properties that need to be specified to create or update a Log
     *                                     Analytics QueryPack.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, queryPackName, logAnalyticsQueryPackPayload, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            queryPackName,
            logAnalyticsQueryPackPayload,
            options
        }, createOrUpdateOperationSpec$9);
    }
    /**
     * Updates an existing QueryPack's tags. To update other fields use the CreateOrUpdate method.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param queryPackTags Updated tag information to set into the QueryPack instance.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName, queryPackName, queryPackTags, options) {
        return this.client.sendOperationRequest({ resourceGroupName, queryPackName, queryPackTags, options }, updateTagsOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$3);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$l = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/queryPacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$l
};
const listByResourceGroupOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const createOrUpdateWithoutNameOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: LogAnalyticsQueryPack
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: logAnalyticsQueryPackPayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$l
};
const deleteOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const getOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPack
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const createOrUpdateOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPack
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: logAnalyticsQueryPackPayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$l
};
const updateTagsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPack
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: queryPackTags,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$l
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$l
};
const listByResourceGroupNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$l
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Queries operations. */
class QueriesImpl {
    /**
     * Initialize a new instance of the class Queries class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of Queries defined within a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param options The options parameters.
     */
    list(resourceGroupName, queryPackName, options) {
        const iter = this.listPagingAll(resourceGroupName, queryPackName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, queryPackName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, queryPackName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, queryPackName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, queryPackName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, queryPackName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, queryPackName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Search a list of Queries defined within a Log Analytics QueryPack according to given search
     * properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param querySearchProperties Properties by which to search queries in the given Log Analytics
     *                              QueryPack.
     * @param options The options parameters.
     */
    listSearch(resourceGroupName, queryPackName, querySearchProperties, options) {
        const iter = this.searchPagingAll(resourceGroupName, queryPackName, querySearchProperties, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.searchPagingPage(resourceGroupName, queryPackName, querySearchProperties, options, settings);
            }
        };
    }
    searchPagingPage(resourceGroupName, queryPackName, querySearchProperties, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* searchPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._search(resourceGroupName, queryPackName, querySearchProperties, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._searchNext(resourceGroupName, queryPackName, querySearchProperties, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    searchPagingAll(resourceGroupName, queryPackName, querySearchProperties, options) {
        return tslib.__asyncGenerator(this, arguments, function* searchPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.searchPagingPage(resourceGroupName, queryPackName, querySearchProperties, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets a list of Queries defined within a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param options The options parameters.
     */
    _list(resourceGroupName, queryPackName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, queryPackName, options }, listOperationSpec$7);
    }
    /**
     * Search a list of Queries defined within a Log Analytics QueryPack according to given search
     * properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param querySearchProperties Properties by which to search queries in the given Log Analytics
     *                              QueryPack.
     * @param options The options parameters.
     */
    _search(resourceGroupName, queryPackName, querySearchProperties, options) {
        return this.client.sendOperationRequest({ resourceGroupName, queryPackName, querySearchProperties, options }, searchOperationSpec);
    }
    /**
     * Gets a specific Log Analytics Query defined within a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param id The id of a specific query defined in the Log Analytics QueryPack
     * @param options The options parameters.
     */
    get(resourceGroupName, queryPackName, id, options) {
        return this.client.sendOperationRequest({ resourceGroupName, queryPackName, id, options }, getOperationSpec$b);
    }
    /**
     * Adds or Updates a specific Query within a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param id The id of a specific query defined in the Log Analytics QueryPack
     * @param queryPayload Properties that need to be specified to create a new query and add it to a Log
     *                     Analytics QueryPack.
     * @param options The options parameters.
     */
    put(resourceGroupName, queryPackName, id, queryPayload, options) {
        return this.client.sendOperationRequest({ resourceGroupName, queryPackName, id, queryPayload, options }, putOperationSpec);
    }
    /**
     * Adds or Updates a specific Query within a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param id The id of a specific query defined in the Log Analytics QueryPack
     * @param queryPayload Properties that need to be specified to create a new query and add it to a Log
     *                     Analytics QueryPack.
     * @param options The options parameters.
     */
    update(resourceGroupName, queryPackName, id, queryPayload, options) {
        return this.client.sendOperationRequest({ resourceGroupName, queryPackName, id, queryPayload, options }, updateOperationSpec$3);
    }
    /**
     * Deletes a specific Query defined within an Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param id The id of a specific query defined in the Log Analytics QueryPack
     * @param options The options parameters.
     */
    delete(resourceGroupName, queryPackName, id, options) {
        return this.client.sendOperationRequest({ resourceGroupName, queryPackName, id, options }, deleteOperationSpec$a);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, queryPackName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, queryPackName, nextLink, options }, listNextOperationSpec$2);
    }
    /**
     * SearchNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param querySearchProperties Properties by which to search queries in the given Log Analytics
     *                              QueryPack.
     * @param nextLink The nextLink from the previous successful call to the Search method.
     * @param options The options parameters.
     */
    _searchNext(resourceGroupName, queryPackName, querySearchProperties, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            queryPackName,
            querySearchProperties,
            nextLink,
            options
        }, searchNextOperationSpec);
    }
}
// Operation Specifications
const serializer$k = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackQueryListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [
        apiVersion,
        top,
        includeBody,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const searchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/search",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackQueryListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: querySearchProperties,
    queryParameters: [
        apiVersion,
        top,
        includeBody,
        skipToken
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};
const getOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackQuery
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName,
        id
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const putOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/{id}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackQuery
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: queryPayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName,
        id
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};
const updateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/{id}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackQuery
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: queryPayload,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName,
        id
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};
const deleteOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/queryPacks/{queryPackName}/queries/{id}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName,
        id
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackQueryListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$k
};
const searchNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogAnalyticsQueryPackQueryListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        queryPackName,
        nextLink
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$k
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DataExports operations. */
class DataExportsImpl {
    /**
     * Initialize a new instance of the class DataExports class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the data export instances within a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        const iter = this.listByWorkspacePagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listByWorkspacePagingPage(resourceGroupName, workspaceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByWorkspace(resourceGroupName, workspaceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByWorkspacePagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the data export instances within a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec$7);
    }
    /**
     * Create or update a data export.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataExportName The data export rule name.
     * @param parameters The parameters required to create or update a data export.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, dataExportName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataExportName, parameters, options }, createOrUpdateOperationSpec$8);
    }
    /**
     * Gets a data export instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataExportName The data export rule name.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, dataExportName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataExportName, options }, getOperationSpec$a);
    }
    /**
     * Deletes the specified data export in a given workspace..
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataExportName The data export rule name.
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, dataExportName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataExportName, options }, deleteOperationSpec$9);
    }
}
// Operation Specifications
const serializer$j = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByWorkspaceOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataExports",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataExportListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const createOrUpdateOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataExports/{dataExportName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DataExport
        },
        201: {
            bodyMapper: DataExport
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataExportName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$j
};
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataExports/{dataExportName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataExport
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataExportName1
    ],
    headerParameters: [accept],
    serializer: serializer$j
};
const deleteOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataExports/{dataExportName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        404: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataExportName1
    ],
    headerParameters: [accept],
    serializer: serializer$j
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DataSources operations. */
class DataSourcesImpl {
    /**
     * Initialize a new instance of the class DataSources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the first page of data source instances in a workspace with the link to the next page.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param filter The filter to apply on the operation.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, filter, options) {
        const iter = this.listByWorkspacePagingAll(resourceGroupName, workspaceName, filter, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByWorkspacePagingPage(resourceGroupName, workspaceName, filter, options, settings);
            }
        };
    }
    listByWorkspacePagingPage(resourceGroupName, workspaceName, filter, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByWorkspace(resourceGroupName, workspaceName, filter, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByWorkspaceNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByWorkspacePagingAll(resourceGroupName, workspaceName, filter, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByWorkspacePagingPage(resourceGroupName, workspaceName, filter, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create or update a data source.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceName The name of the datasource resource.
     * @param parameters The parameters required to create or update a datasource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, dataSourceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataSourceName, parameters, options }, createOrUpdateOperationSpec$7);
    }
    /**
     * Deletes a data source instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceName Name of the datasource.
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, dataSourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataSourceName, options }, deleteOperationSpec$8);
    }
    /**
     * Gets a datasource instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceName Name of the datasource
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, dataSourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataSourceName, options }, getOperationSpec$9);
    }
    /**
     * Gets the first page of data source instances in a workspace with the link to the next page.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param filter The filter to apply on the operation.
     * @param options The options parameters.
     */
    _listByWorkspace(resourceGroupName, workspaceName, filter, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, filter, options }, listByWorkspaceOperationSpec$6);
    }
    /**
     * ListByWorkspaceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the ListByWorkspace method.
     * @param options The options parameters.
     */
    _listByWorkspaceNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listByWorkspaceNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$i = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: DataSource
        },
        201: {
            bodyMapper: DataSource
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataSourceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$i
};
const deleteOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataSourceName
    ],
    serializer: serializer$i
};
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources/{dataSourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataSource
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataSourceName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const listByWorkspaceOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/dataSources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataSourceListResult
        }
    },
    queryParameters: [
        apiVersion1,
        filter,
        skiptoken
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};
const listByWorkspaceNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DataSourceListResult
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$i
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing IntelligencePacks operations. */
class IntelligencePacksImpl {
    /**
     * Initialize a new instance of the class IntelligencePacks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Disables an intelligence pack for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param intelligencePackName The name of the intelligence pack to be disabled.
     * @param options The options parameters.
     */
    disable(resourceGroupName, workspaceName, intelligencePackName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, intelligencePackName, options }, disableOperationSpec);
    }
    /**
     * Enables an intelligence pack for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param intelligencePackName The name of the intelligence pack to be enabled.
     * @param options The options parameters.
     */
    enable(resourceGroupName, workspaceName, intelligencePackName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, intelligencePackName, options }, enableOperationSpec);
    }
    /**
     * Lists all the intelligence packs possible and whether they are enabled or disabled for a given
     * workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$6);
    }
}
// Operation Specifications
const serializer$h = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const disableOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks/{intelligencePackName}/Disable",
    httpMethod: "POST",
    responses: { 200: {} },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        intelligencePackName
    ],
    serializer: serializer$h
};
const enableOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks/{intelligencePackName}/Enable",
    httpMethod: "POST",
    responses: { 200: {} },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        intelligencePackName
    ],
    serializer: serializer$h
};
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/intelligencePacks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "IntelligencePack" }
                    }
                }
            }
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$h
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing LinkedServices operations. */
class LinkedServicesImpl {
    /**
     * Initialize a new instance of the class LinkedServices class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the linked services instances in a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        const iter = this.listByWorkspacePagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listByWorkspacePagingPage(resourceGroupName, workspaceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByWorkspace(resourceGroupName, workspaceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByWorkspacePagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create or update a linked service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linkedServices resource
     * @param parameters The parameters required to create or update a linked service.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, workspaceName, linkedServiceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                resourceGroupName,
                workspaceName,
                linkedServiceName,
                parameters,
                options
            }, createOrUpdateOperationSpec$6);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a linked service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linkedServices resource
     * @param parameters The parameters required to create or update a linked service.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, linkedServiceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, workspaceName, linkedServiceName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a linked service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linked service.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, workspaceName, linkedServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, workspaceName, linkedServiceName, options }, deleteOperationSpec$7);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a linked service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linked service.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, workspaceName, linkedServiceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, workspaceName, linkedServiceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a linked service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linked service.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, linkedServiceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, linkedServiceName, options }, getOperationSpec$8);
    }
    /**
     * Gets the linked services instances in a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec$5);
    }
}
// Operation Specifications
const serializer$g = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: LinkedService
        },
        201: {
            bodyMapper: LinkedService
        },
        202: {
            bodyMapper: LinkedService
        },
        204: {
            bodyMapper: LinkedService
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        linkedServiceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$g
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: LinkedService
        },
        201: {
            bodyMapper: LinkedService
        },
        202: {
            bodyMapper: LinkedService
        },
        204: {
            bodyMapper: LinkedService
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        linkedServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices/{linkedServiceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkedService
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        linkedServiceName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};
const listByWorkspaceOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedServices",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkedServiceListResult
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$g
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing LinkedStorageAccounts operations. */
class LinkedStorageAccountsImpl {
    /**
     * Initialize a new instance of the class LinkedStorageAccounts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all linked storage accounts associated with the specified workspace, storage accounts will be
     * sorted by their data source type.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        const iter = this.listByWorkspacePagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listByWorkspacePagingPage(resourceGroupName, workspaceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByWorkspace(resourceGroupName, workspaceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByWorkspacePagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create or Update a link relation between current workspace and a group of storage accounts of a
     * specific data source type.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceType Linked storage accounts type.
     * @param parameters The parameters required to create or update linked storage accounts.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, dataSourceType, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataSourceType, parameters, options }, createOrUpdateOperationSpec$5);
    }
    /**
     * Deletes all linked storage accounts of a specific data source type associated with the specified
     * workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceType Linked storage accounts type.
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, dataSourceType, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataSourceType, options }, deleteOperationSpec$6);
    }
    /**
     * Gets all linked storage account of a specific data source type associated with the specified
     * workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceType Linked storage accounts type.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, dataSourceType, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, dataSourceType, options }, getOperationSpec$7);
    }
    /**
     * Gets all linked storage accounts associated with the specified workspace, storage accounts will be
     * sorted by their data source type.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec$4);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedStorageAccounts/{dataSourceType}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: LinkedStorageAccountsResource
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataSourceType
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$f
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedStorageAccounts/{dataSourceType}",
    httpMethod: "DELETE",
    responses: { 200: {} },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataSourceType
    ],
    serializer: serializer$f
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedStorageAccounts/{dataSourceType}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkedStorageAccountsResource
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        dataSourceType
    ],
    headerParameters: [accept],
    serializer: serializer$f
};
const listByWorkspaceOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/linkedStorageAccounts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LinkedStorageAccountsListResult
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ManagementGroups operations. */
class ManagementGroupsImpl {
    /**
     * Initialize a new instance of the class ManagementGroups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of management groups connected to a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets a list of management groups connected to a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$5);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/managementGroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceListManagementGroupsResult
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing OperationStatuses operations. */
class OperationStatusesImpl {
    /**
     * Initialize a new instance of the class OperationStatuses class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the status of a long running azure asynchronous operation.
     * @param location The region name of operation.
     * @param asyncOperationId The operation Id.
     * @param options The options parameters.
     */
    get(location, asyncOperationId, options) {
        return this.client.sendOperationRequest({ location, asyncOperationId, options }, getOperationSpec$6);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/locations/{location}/operationStatuses/{asyncOperationId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationStatus
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        location,
        asyncOperationId
    ],
    headerParameters: [accept],
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing SharedKeysOperations operations. */
class SharedKeysOperationsImpl {
    /**
     * Initialize a new instance of the class SharedKeysOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the shared keys for a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    getSharedKeys(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, getSharedKeysOperationSpec);
    }
    /**
     * Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft
     * Operational Insights agents to the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    regenerate(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, regenerateOperationSpec);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getSharedKeysOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/sharedKeys",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SharedKeys
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const regenerateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/regenerateSharedKey",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SharedKeys
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Usages operations. */
class UsagesImpl {
    /**
     * Initialize a new instance of the class Usages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of usage metrics for a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName, workspaceName, options) {
        const iter = this.listPagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, workspaceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(resourceGroupName, workspaceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets a list of usage metrics for a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _list(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listOperationSpec$4);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/usages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceListUsagesResult
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing StorageInsightConfigs operations. */
class StorageInsightConfigsImpl {
    /**
     * Initialize a new instance of the class StorageInsightConfigs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the storage insight instances within a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        const iter = this.listByWorkspacePagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByWorkspace(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.odataNextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByWorkspaceNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.odataNextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByWorkspacePagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Create or update a storage insight.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param parameters The parameters required to create or update a storage insight.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, storageInsightName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            storageInsightName,
            parameters,
            options
        }, createOrUpdateOperationSpec$4);
    }
    /**
     * Gets a storage insight instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, storageInsightName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, storageInsightName, options }, getOperationSpec$5);
    }
    /**
     * Deletes a storageInsightsConfigs resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, storageInsightName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, storageInsightName, options }, deleteOperationSpec$5);
    }
    /**
     * Lists the storage insight instances within a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec$3);
    }
    /**
     * ListByWorkspaceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the ListByWorkspace method.
     * @param options The options parameters.
     */
    _listByWorkspaceNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listByWorkspaceNextOperationSpec);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: StorageInsight
        },
        201: {
            bodyMapper: StorageInsight
        }
    },
    requestBody: parameters4,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        storageInsightName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageInsight
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        storageInsightName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs/{storageInsightName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {} },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        storageInsightName
    ],
    serializer: serializer$a
};
const listByWorkspaceOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/storageInsightConfigs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageInsightListResult
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listByWorkspaceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageInsightListResult
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing SavedSearches operations. */
class SavedSearchesImpl {
    /**
     * Initialize a new instance of the class SavedSearches class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Deletes the specified saved search in a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param savedSearchId The id of the saved search.
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, savedSearchId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, savedSearchId, options }, deleteOperationSpec$4);
    }
    /**
     * Creates or updates a saved search for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param savedSearchId The id of the saved search.
     * @param parameters The parameters required to save a search.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, savedSearchId, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, savedSearchId, parameters, options }, createOrUpdateOperationSpec$3);
    }
    /**
     * Gets the specified saved search for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param savedSearchId The id of the saved search.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, savedSearchId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, savedSearchId, options }, getOperationSpec$4);
    }
    /**
     * Gets the saved searches for a given Log Analytics Workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec$2);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}",
    httpMethod: "DELETE",
    responses: { 200: {} },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        savedSearchId
    ],
    serializer: serializer$9
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: SavedSearch
        }
    },
    requestBody: parameters5,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        savedSearchId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches/{savedSearchId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavedSearch
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        savedSearchId
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listByWorkspaceOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/savedSearches",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SavedSearchesListResult
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing AvailableServiceTiers operations. */
class AvailableServiceTiersImpl {
    /**
     * Initialize a new instance of the class AvailableServiceTiers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the available service tiers for the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec$1);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByWorkspaceOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/availableServiceTiers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "AvailableServiceTier" }
                    }
                }
            }
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Gateways operations. */
class GatewaysImpl {
    /**
     * Initialize a new instance of the class Gateways class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Delete a Log Analytics gateway.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param gatewayId The Log Analytics gateway Id.
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, gatewayId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, gatewayId, options }, deleteOperationSpec$3);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/gateways/{gatewayId}",
    httpMethod: "DELETE",
    responses: { 200: {} },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        gatewayId
    ],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing SchemaOperations operations. */
class SchemaOperationsImpl {
    /**
     * Initialize a new instance of the class SchemaOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the schema for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, getOperationSpec$3);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/schema",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: SearchGetSchemaResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing WorkspacePurge operations. */
class WorkspacePurgeImpl {
    /**
     * Initialize a new instance of the class WorkspacePurge class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Purges data in an Log Analytics workspace by a set of user-defined filters.
     *
     * In order to manage system resources, purge requests are throttled at 50 requests per hour. You
     * should batch the execution of purge requests by sending a single command whose predicate includes
     * all user identities that require purging. Use the in operator to specify multiple identities. You
     * should run the query prior to using for a purge request to verify that the results are expected.
     * Log Analytics only supports purge operations required for compliance with GDPR. The Log Analytics
     * product team reserves the right to reject requests for purge operations that are not for the purpose
     * of GDPR compliance. In the event of a dispute, please create a support ticket
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics
     *             Workspace
     * @param options The options parameters.
     */
    purge(resourceGroupName, workspaceName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, body, options }, purgeOperationSpec);
    }
    /**
     * Gets status of an ongoing purge operation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param purgeId In a purge status request, this is the Id of the operation the status of which is
     *                returned.
     * @param options The options parameters.
     */
    getPurgeStatus(resourceGroupName, workspaceName, purgeId, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, purgeId, options }, getPurgeStatusOperationSpec);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const purgeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/purge",
    httpMethod: "POST",
    responses: {
        202: {
            bodyMapper: WorkspacePurgeResponse,
            headersMapper: WorkspacePurgePurgeHeaders
        }
    },
    requestBody: body,
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const getPurgeStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/operations/{purgeId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspacePurgeStatusResponse
        }
    },
    queryParameters: [apiVersion1],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        purgeId
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Clusters operations. */
class ClustersImpl {
    /**
     * Initialize a new instance of the class Clusters class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets Log Analytics clusters in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the Log Analytics clusters in a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets Log Analytics clusters in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$2);
    }
    /**
     * Gets the Log Analytics clusters in a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * Create or update a Log Analytics cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Log Analytics cluster.
     * @param parameters The parameters required to create or update a Log Analytics cluster.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, parameters, options }, createOrUpdateOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a Log Analytics cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Log Analytics cluster.
     * @param parameters The parameters required to create or update a Log Analytics cluster.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, clusterName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a cluster instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Name of the Log Analytics Cluster.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, options }, deleteOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a cluster instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Name of the Log Analytics Cluster.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, clusterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, clusterName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a Log Analytics cluster instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Name of the Log Analytics Cluster.
     * @param options The options parameters.
     */
    get(resourceGroupName, clusterName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, clusterName, options }, getOperationSpec$2);
    }
    /**
     * Updates a Log Analytics cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Name of the Log Analytics Cluster.
     * @param parameters The parameters required to patch a Log Analytics cluster.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, clusterName, parameters, options }, updateOperationSpec$2);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Updates a Log Analytics cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Name of the Log Analytics Cluster.
     * @param parameters The parameters required to patch a Log Analytics cluster.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, clusterName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, clusterName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByResourceGroupOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/clusters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion2],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/clusters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion2],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/clusters/{clusterName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        201: {
            bodyMapper: Cluster
        },
        202: {
            bodyMapper: Cluster
        },
        204: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters6,
    queryParameters: [apiVersion2],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/clusters/{clusterName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion2],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName1
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/clusters/{clusterName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion2],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName1
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/clusters/{clusterName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Cluster
        },
        201: {
            bodyMapper: Cluster
        },
        202: {
            bodyMapper: Cluster
        },
        204: {
            bodyMapper: Cluster
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters7,
    queryParameters: [apiVersion2],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        clusterName1
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ClusterListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all of the available OperationalInsights Rest API operations.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all of the available OperationalInsights Rest API operations.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$2);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/providers/Microsoft.OperationalInsights/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Workspaces operations. */
class WorkspacesImpl {
    /**
     * Initialize a new instance of the class Workspaces class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the workspaces in a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets workspaces in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the workspaces in a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$1);
    }
    /**
     * Gets workspaces in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$1);
    }
    /**
     * Create or update a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param parameters The parameters required to create or update a workspace.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, workspaceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, workspaceName, parameters, options }, createOrUpdateOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param parameters The parameters required to create or update a workspace.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, workspaceName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a workspace resource. To recover the workspace, create it again with the same name, in the
     * same subscription, resource group and location. The name is kept for 14 days and cannot be used for
     * another workspace. To remove the workspace completely and release the name, use the force flag.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, workspaceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, workspaceName, options }, deleteOperationSpec$1);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a workspace resource. To recover the workspace, create it again with the same name, in the
     * same subscription, resource group and location. The name is kept for 14 days and cannot be used for
     * another workspace. To remove the workspace completely and release the name, use the force flag.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, workspaceName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, workspaceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a workspace instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, getOperationSpec$1);
    }
    /**
     * Updates a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param parameters The parameters required to patch a workspace.
     * @param options The options parameters.
     */
    update(resourceGroupName, workspaceName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, parameters, options }, updateOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/workspaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Workspace
        },
        201: {
            bodyMapper: Workspace
        },
        202: {
            bodyMapper: Workspace
        },
        204: {
            bodyMapper: Workspace
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters8,
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3, force],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Workspace
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Workspace
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters9,
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing DeletedWorkspaces operations. */
class DeletedWorkspacesImpl {
    /**
     * Initialize a new instance of the class DeletedWorkspaces class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets recently deleted workspaces in a subscription, available for recovery.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield tslib.__await(this._list(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets recently deleted workspaces in a resource group, available for recovery.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets recently deleted workspaces in a subscription, available for recovery.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * Gets recently deleted workspaces in a resource group, available for recovery.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.OperationalInsights/deletedWorkspaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/deletedWorkspaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Tables operations. */
class TablesImpl {
    /**
     * Initialize a new instance of the class Tables class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all the tables for the specified Log Analytics workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        const iter = this.listByWorkspacePagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listByWorkspacePagingPage(resourceGroupName, workspaceName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByWorkspace(resourceGroupName, workspaceName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByWorkspacePagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets all the tables for the specified Log Analytics workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    _listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec);
    }
    /**
     * Update or Create a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param parameters The parameters required to update table properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName, workspaceName, tableName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, workspaceName, tableName, parameters, options }, createOrUpdateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update or Create a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param parameters The parameters required to update table properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName, workspaceName, tableName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(resourceGroupName, workspaceName, tableName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param parameters The parameters required to update table properties.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName, workspaceName, tableName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, workspaceName, tableName, parameters, options }, updateOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param parameters The parameters required to update table properties.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName, workspaceName, tableName, parameters, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceGroupName, workspaceName, tableName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, tableName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, tableName, options }, getOperationSpec);
    }
    /**
     * Delete a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, workspaceName, tableName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, workspaceName, tableName, options }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                lroResourceLocationConfig: "azure-async-operation"
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, workspaceName, tableName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, workspaceName, tableName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Migrate a Log Analytics table from support of the Data Collector API and Custom Fields features to
     * support of Data Collection Rule-based Custom Logs.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    migrate(resourceGroupName, workspaceName, tableName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, tableName, options }, migrateOperationSpec);
    }
    /**
     * Cancel a log analytics workspace search results table query run.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    cancelSearch(resourceGroupName, workspaceName, tableName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, tableName, options }, cancelSearchOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByWorkspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/tables",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TablesListResult
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/tables/{tableName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Table
        },
        201: {
            bodyMapper: Table
        },
        202: {
            bodyMapper: Table
        },
        204: {
            bodyMapper: Table
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        tableName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/tables/{tableName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Table
        },
        201: {
            bodyMapper: Table
        },
        202: {
            bodyMapper: Table
        },
        204: {
            bodyMapper: Table
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    requestBody: parameters10,
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        tableName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/tables/{tableName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Table
        },
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        tableName
    ],
    headerParameters: [accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/tables/{tableName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        tableName
    ],
    headerParameters: [accept],
    serializer
};
const migrateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/tables/{tableName}/migrate",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        tableName
    ],
    headerParameters: [accept],
    serializer
};
const cancelSearchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/tables/{tableName}/cancelSearch",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: ErrorResponse
        }
    },
    queryParameters: [apiVersion3],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        tableName
    ],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class OperationalInsightsManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the OperationalInsightsManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-operationalinsights/9.0.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.queryPacks = new QueryPacksImpl(this);
        this.queries = new QueriesImpl(this);
        this.dataExports = new DataExportsImpl(this);
        this.dataSources = new DataSourcesImpl(this);
        this.intelligencePacks = new IntelligencePacksImpl(this);
        this.linkedServices = new LinkedServicesImpl(this);
        this.linkedStorageAccounts = new LinkedStorageAccountsImpl(this);
        this.managementGroups = new ManagementGroupsImpl(this);
        this.operationStatuses = new OperationStatusesImpl(this);
        this.sharedKeysOperations = new SharedKeysOperationsImpl(this);
        this.usages = new UsagesImpl(this);
        this.storageInsightConfigs = new StorageInsightConfigsImpl(this);
        this.savedSearches = new SavedSearchesImpl(this);
        this.availableServiceTiers = new AvailableServiceTiersImpl(this);
        this.gateways = new GatewaysImpl(this);
        this.schemaOperations = new SchemaOperationsImpl(this);
        this.workspacePurge = new WorkspacePurgeImpl(this);
        this.clusters = new ClustersImpl(this);
        this.operations = new OperationsImpl(this);
        this.workspaces = new WorkspacesImpl(this);
        this.deletedWorkspaces = new DeletedWorkspacesImpl(this);
        this.tables = new TablesImpl(this);
    }
}

exports.OperationalInsightsManagementClient = OperationalInsightsManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
