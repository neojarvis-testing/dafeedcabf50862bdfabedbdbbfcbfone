import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** The list of Log Analytics workspaces associated with the cluster. */
export declare interface AssociatedWorkspace {
    /**
     * The id of the assigned workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceId?: string;
    /**
     * The name id the assigned workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceName?: string;
    /**
     * The ResourceId id the assigned workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceId?: string;
    /**
     * The time of workspace association.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly associateDate?: string;
}

/** Service Tier details. */
export declare interface AvailableServiceTier {
    /**
     * The name of the Service Tier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceTier?: SkuNameEnum;
    /**
     * True if the Service Tier is enabled for the workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly enabled?: boolean;
    /**
     * The minimum retention for the Service Tier, in days.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minimumRetention?: number;
    /**
     * The maximum retention for the Service Tier, in days.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximumRetention?: number;
    /**
     * The default retention for the Service Tier, in days.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly defaultRetention?: number;
    /**
     * The capacity reservation level in GB per day. Returned for the Capacity Reservation Service Tier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capacityReservationLevel?: number;
    /**
     * Time when the sku was last updated for the workspace. Returned for the Capacity Reservation Service Tier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSkuUpdate?: string;
}

/** Interface representing a AvailableServiceTiers. */
export declare interface AvailableServiceTiers {
    /**
     * Gets the available service tiers for the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: AvailableServiceTiersListByWorkspaceOptionalParams): Promise<AvailableServiceTiersListByWorkspaceResponse>;
}

/** Optional parameters. */
export declare interface AvailableServiceTiersListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type AvailableServiceTiersListByWorkspaceResponse = AvailableServiceTier[];

/** The resource model definition for an Azure Resource Manager resource with an etag. */
export declare interface AzureEntityResource extends Resource {
    /**
     * Resource Etag.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
}

/** An Azure resource QueryPack-Query object */
export declare interface AzureResourceProperties {
    /**
     * Azure resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Azure resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Azure resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Read only system data
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/**
 * Defines values for BillingType. \
 * {@link KnownBillingType} can be used interchangeably with BillingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cluster** \
 * **Workspaces**
 */
export declare type BillingType = string;

/** Defines values for Capacity. */
export declare type Capacity = 500 | 1000 | 2000 | 5000;

/** Defines values for CapacityReservationLevel. */
export declare type CapacityReservationLevel = 100 | 200 | 300 | 400 | 500 | 1000 | 2000 | 5000;

/** The Capacity Reservation properties. */
export declare interface CapacityReservationProperties {
    /**
     * The last time Sku was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSkuUpdate?: string;
    /**
     * Minimum CapacityReservation value in GB.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minCapacity?: number;
}

/** The top level Log Analytics cluster resource container. */
export declare interface Cluster extends TrackedResource {
    /** The identity of the resource. */
    identity?: Identity;
    /** The sku properties. */
    sku?: ClusterSku;
    /**
     * The ID associated with the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clusterId?: string;
    /**
     * The provisioning state of the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ClusterEntityStatus;
    /** Configures whether cluster will use double encryption. This Property can not be modified after cluster creation. Default value is 'true' */
    isDoubleEncryptionEnabled?: boolean;
    /** Sets whether the cluster will support availability zones. This can be set as true only in regions where Azure Data Explorer support Availability Zones. This Property can not be modified after cluster creation. Default value is 'true' if region supports Availability Zones. */
    isAvailabilityZonesEnabled?: boolean;
    /** The cluster's billing type. */
    billingType?: BillingType;
    /** The associated key properties. */
    keyVaultProperties?: KeyVaultProperties;
    /**
     * The last time the cluster was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModifiedDate?: string;
    /**
     * The cluster creation time
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: string;
    /** The list of Log Analytics workspaces associated with the cluster */
    associatedWorkspaces?: AssociatedWorkspace[];
    /** Additional properties for capacity reservation */
    capacityReservationProperties?: CapacityReservationProperties;
}

/**
 * Defines values for ClusterEntityStatus. \
 * {@link KnownClusterEntityStatus} can be used interchangeably with ClusterEntityStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleting** \
 * **ProvisioningAccount** \
 * **Updating**
 */
export declare type ClusterEntityStatus = string;

/** The list clusters operation response. */
export declare interface ClusterListResult {
    /** The link used to get the next page of recommendations. */
    nextLink?: string;
    /** A list of Log Analytics clusters. */
    value?: Cluster[];
}

/** The top level Log Analytics cluster resource container. */
export declare interface ClusterPatch {
    /** The identity of the resource. */
    identity?: Identity;
    /** The sku properties. */
    sku?: ClusterSku;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The associated key properties. */
    keyVaultProperties?: KeyVaultProperties;
    /** The cluster's billing type. */
    billingType?: BillingType;
}

/** Interface representing a Clusters. */
export declare interface Clusters {
    /**
     * Gets Log Analytics clusters in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ClustersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Cluster>;
    /**
     * Gets the Log Analytics clusters in a subscription.
     * @param options The options parameters.
     */
    list(options?: ClustersListOptionalParams): PagedAsyncIterableIterator<Cluster>;
    /**
     * Create or update a Log Analytics cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Log Analytics cluster.
     * @param parameters The parameters required to create or update a Log Analytics cluster.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, clusterName: string, parameters: Cluster, options?: ClustersCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ClustersCreateOrUpdateResponse>, ClustersCreateOrUpdateResponse>>;
    /**
     * Create or update a Log Analytics cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName The name of the Log Analytics cluster.
     * @param parameters The parameters required to create or update a Log Analytics cluster.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, clusterName: string, parameters: Cluster, options?: ClustersCreateOrUpdateOptionalParams): Promise<ClustersCreateOrUpdateResponse>;
    /**
     * Deletes a cluster instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Name of the Log Analytics Cluster.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, options?: ClustersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a cluster instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Name of the Log Analytics Cluster.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, options?: ClustersDeleteOptionalParams): Promise<void>;
    /**
     * Gets a Log Analytics cluster instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Name of the Log Analytics Cluster.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, options?: ClustersGetOptionalParams): Promise<ClustersGetResponse>;
    /**
     * Updates a Log Analytics cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Name of the Log Analytics Cluster.
     * @param parameters The parameters required to patch a Log Analytics cluster.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, parameters: ClusterPatch, options?: ClustersUpdateOptionalParams): Promise<PollerLike<PollOperationState<ClustersUpdateResponse>, ClustersUpdateResponse>>;
    /**
     * Updates a Log Analytics cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Name of the Log Analytics Cluster.
     * @param parameters The parameters required to patch a Log Analytics cluster.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterName: string, parameters: ClusterPatch, options?: ClustersUpdateOptionalParams): Promise<ClustersUpdateResponse>;
}

/** Optional parameters. */
export declare interface ClustersCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ClustersCreateOrUpdateResponse = Cluster;

/** Optional parameters. */
export declare interface ClustersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ClustersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ClustersGetResponse = Cluster;

/** The cluster sku definition. */
export declare interface ClusterSku {
    /** The capacity value */
    capacity?: Capacity;
    /** The name of the SKU. */
    name?: ClusterSkuNameEnum;
}

/**
 * Defines values for ClusterSkuNameEnum. \
 * {@link KnownClusterSkuNameEnum} can be used interchangeably with ClusterSkuNameEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CapacityReservation**
 */
export declare type ClusterSkuNameEnum = string;

/** Optional parameters. */
export declare interface ClustersListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ClustersListByResourceGroupNextResponse = ClusterListResult;

/** Optional parameters. */
export declare interface ClustersListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ClustersListByResourceGroupResponse = ClusterListResult;

/** Optional parameters. */
export declare interface ClustersListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ClustersListNextResponse = ClusterListResult;

/** Optional parameters. */
export declare interface ClustersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ClustersListResponse = ClusterListResult;

/** Optional parameters. */
export declare interface ClustersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ClustersUpdateResponse = Cluster;

/** Table column. */
export declare interface Column {
    /** Column name. */
    name?: string;
    /** Column data type. */
    type?: ColumnTypeEnum;
    /** Column data type logical hint. */
    dataTypeHint?: ColumnDataTypeHintEnum;
    /** Column display name. */
    displayName?: string;
    /** Column description. */
    description?: string;
    /**
     * Is displayed by default.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDefaultDisplay?: boolean;
    /**
     * Is column hidden.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isHidden?: boolean;
}

/**
 * Defines values for ColumnDataTypeHintEnum. \
 * {@link KnownColumnDataTypeHintEnum} can be used interchangeably with ColumnDataTypeHintEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **uri**: A string that matches the pattern of a URI, for example, scheme:\/\/username:password@host:1234\/this\/is\/a\/path?k1=v1&k2=v2#fragment \
 * **guid**: A standard 128-bit GUID following the standard shape, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx \
 * **armPath**: An Azure Resource Model (ARM) path: \/subscriptions\/{...}\/resourceGroups\/{...}\/providers\/Microsoft.{...}\/{...}\/{...}\/{...}... \
 * **ip**: A standard V4\/V6 ip address following the standard shape, x.x.x.x\/y:y:y:y:y:y:y:y
 */
export declare type ColumnDataTypeHintEnum = string;

/**
 * Defines values for ColumnTypeEnum. \
 * {@link KnownColumnTypeEnum} can be used interchangeably with ColumnTypeEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **string** \
 * **int** \
 * **long** \
 * **real** \
 * **boolean** \
 * **dateTime** \
 * **guid** \
 * **dynamic**
 */
export declare type ColumnTypeEnum = string;

/** The core summary of a search. */
export declare interface CoreSummary {
    /** The status of a core summary. */
    status?: string;
    /** The number of documents of a core summary. */
    numberOfDocuments: number;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The top level data export resource container. */
export declare interface DataExport extends ProxyResource {
    /** The data export rule ID. */
    dataExportId?: string;
    /** An array of tables to export, for example: [“Heartbeat, SecurityEvent”]. */
    tableNames?: string[];
    /** Active when enabled. */
    enable?: boolean;
    /** The latest data export rule modification time. */
    createdDate?: string;
    /** Date and time when the export was last modified. */
    lastModifiedDate?: string;
    /** The destination resource ID. This can be copied from the Properties entry of the destination resource in Azure. */
    resourceId?: string;
    /**
     * The type of the destination resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly typePropertiesDestinationType?: Type;
    /** Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account. */
    eventHubName?: string;
}

/** Result of the request to list data exports. */
export declare interface DataExportListResult {
    /** List of data export instances within a workspace.. */
    value?: DataExport[];
}

/** Interface representing a DataExports. */
export declare interface DataExports {
    /**
     * Lists the data export instances within a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: DataExportsListByWorkspaceOptionalParams): PagedAsyncIterableIterator<DataExport>;
    /**
     * Create or update a data export.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataExportName The data export rule name.
     * @param parameters The parameters required to create or update a data export.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, dataExportName: string, parameters: DataExport, options?: DataExportsCreateOrUpdateOptionalParams): Promise<DataExportsCreateOrUpdateResponse>;
    /**
     * Gets a data export instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataExportName The data export rule name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, dataExportName: string, options?: DataExportsGetOptionalParams): Promise<DataExportsGetResponse>;
    /**
     * Deletes the specified data export in a given workspace..
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataExportName The data export rule name.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, dataExportName: string, options?: DataExportsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface DataExportsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DataExportsCreateOrUpdateResponse = DataExport;

/** Optional parameters. */
export declare interface DataExportsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DataExportsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DataExportsGetResponse = DataExport;

/** Optional parameters. */
export declare interface DataExportsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type DataExportsListByWorkspaceResponse = DataExportListResult;

/**
 * Defines values for DataIngestionStatus. \
 * {@link KnownDataIngestionStatus} can be used interchangeably with DataIngestionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RespectQuota**: Ingestion enabled following daily cap quota reset, or subscription enablement. \
 * **ForceOn**: Ingestion started following service setting change. \
 * **ForceOff**: Ingestion stopped following service setting change. \
 * **OverQuota**: Reached daily cap quota, ingestion stopped. \
 * **SubscriptionSuspended**: Ingestion stopped following suspended subscription. \
 * **ApproachingQuota**: 80% of daily cap quota reached.
 */
export declare type DataIngestionStatus = string;

/** Datasources under OMS Workspace. */
export declare interface DataSource extends ProxyResource {
    /** The data source properties in raw json format, each kind of data source have it's own schema. */
    properties: Record<string, unknown>;
    /** The ETag of the data source. */
    etag?: string;
    /** The kind of the DataSource. */
    kind: DataSourceKind;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** DataSource filter. Right now, only filter by kind is supported. */
export declare interface DataSourceFilter {
    /** The kind of the DataSource. */
    kind?: DataSourceKind;
}

/**
 * Defines values for DataSourceKind. \
 * {@link KnownDataSourceKind} can be used interchangeably with DataSourceKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WindowsEvent** \
 * **WindowsPerformanceCounter** \
 * **IISLogs** \
 * **LinuxSyslog** \
 * **LinuxSyslogCollection** \
 * **LinuxPerformanceObject** \
 * **LinuxPerformanceCollection** \
 * **CustomLog** \
 * **CustomLogCollection** \
 * **AzureAuditLog** \
 * **AzureActivityLog** \
 * **GenericDataSource** \
 * **ChangeTrackingCustomPath** \
 * **ChangeTrackingPath** \
 * **ChangeTrackingServices** \
 * **ChangeTrackingDataTypeConfiguration** \
 * **ChangeTrackingDefaultRegistry** \
 * **ChangeTrackingRegistry** \
 * **ChangeTrackingLinuxPath** \
 * **LinuxChangeTrackingPath** \
 * **ChangeTrackingContentLocation** \
 * **WindowsTelemetry** \
 * **Office365** \
 * **SecurityWindowsBaselineConfiguration** \
 * **SecurityCenterSecurityWindowsBaselineConfiguration** \
 * **SecurityEventCollectionConfiguration** \
 * **SecurityInsightsSecurityEventCollectionConfiguration** \
 * **ImportComputerGroup** \
 * **NetworkMonitoring** \
 * **Itsm** \
 * **DnsAnalytics** \
 * **ApplicationInsights** \
 * **SqlDataClassification**
 */
export declare type DataSourceKind = string;

/** The list data source by workspace operation response. */
export declare interface DataSourceListResult {
    /** A list of datasources. */
    value?: DataSource[];
    /** The link (url) to the next page of datasources. */
    nextLink?: string;
}

/** Interface representing a DataSources. */
export declare interface DataSources {
    /**
     * Gets the first page of data source instances in a workspace with the link to the next page.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param filter The filter to apply on the operation.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, filter: string, options?: DataSourcesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<DataSource>;
    /**
     * Create or update a data source.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceName The name of the datasource resource.
     * @param parameters The parameters required to create or update a datasource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, dataSourceName: string, parameters: DataSource, options?: DataSourcesCreateOrUpdateOptionalParams): Promise<DataSourcesCreateOrUpdateResponse>;
    /**
     * Deletes a data source instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceName Name of the datasource.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, dataSourceName: string, options?: DataSourcesDeleteOptionalParams): Promise<void>;
    /**
     * Gets a datasource instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceName Name of the datasource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, dataSourceName: string, options?: DataSourcesGetOptionalParams): Promise<DataSourcesGetResponse>;
}

/** Optional parameters. */
export declare interface DataSourcesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DataSourcesCreateOrUpdateResponse = DataSource;

/** Optional parameters. */
export declare interface DataSourcesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DataSourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DataSourcesGetResponse = DataSource;

/** Optional parameters. */
export declare interface DataSourcesListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type DataSourcesListByWorkspaceNextResponse = DataSourceListResult;

/** Optional parameters. */
export declare interface DataSourcesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
    /** Starting point of the collection of data source instances. */
    skiptoken?: string;
}

/** Contains response data for the listByWorkspace operation. */
export declare type DataSourcesListByWorkspaceResponse = DataSourceListResult;

/** Defines values for DataSourceType. */
export declare type DataSourceType = "CustomLogs" | "AzureWatson" | "Query" | "Ingestion" | "Alerts";

/** Interface representing a DeletedWorkspaces. */
export declare interface DeletedWorkspaces {
    /**
     * Gets recently deleted workspaces in a subscription, available for recovery.
     * @param options The options parameters.
     */
    list(options?: DeletedWorkspacesListOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Gets recently deleted workspaces in a resource group, available for recovery.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DeletedWorkspacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Workspace>;
}

/** Optional parameters. */
export declare interface DeletedWorkspacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DeletedWorkspacesListByResourceGroupResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface DeletedWorkspacesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type DeletedWorkspacesListResponse = WorkspaceListResult;

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** Interface representing a Gateways. */
export declare interface Gateways {
    /**
     * Delete a Log Analytics gateway.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param gatewayId The Log Analytics gateway Id.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, gatewayId: string, options?: GatewaysDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface GatewaysDeleteOptionalParams extends coreClient.OperationOptions {
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Identity for the resource. */
export declare interface Identity {
    /**
     * The principal ID of resource identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** Type of managed service identity. */
    type: IdentityType;
    /** The list of user identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
    userAssignedIdentities?: {
        [propertyName: string]: UserIdentityProperties;
    };
}

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **application** \
 * **managedIdentity** \
 * **key** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **None**
 */
export declare type IdentityType = string;

/** Intelligence Pack containing a string name and boolean indicating if it's enabled. */
export declare interface IntelligencePack {
    /** The name of the intelligence pack. */
    name?: string;
    /** The enabled boolean for the intelligence pack. */
    enabled?: boolean;
    /** The display name of the intelligence pack. */
    displayName?: string;
}

/** Interface representing a IntelligencePacks. */
export declare interface IntelligencePacks {
    /**
     * Disables an intelligence pack for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param intelligencePackName The name of the intelligence pack to be disabled.
     * @param options The options parameters.
     */
    disable(resourceGroupName: string, workspaceName: string, intelligencePackName: string, options?: IntelligencePacksDisableOptionalParams): Promise<void>;
    /**
     * Enables an intelligence pack for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param intelligencePackName The name of the intelligence pack to be enabled.
     * @param options The options parameters.
     */
    enable(resourceGroupName: string, workspaceName: string, intelligencePackName: string, options?: IntelligencePacksEnableOptionalParams): Promise<void>;
    /**
     * Lists all the intelligence packs possible and whether they are enabled or disabled for a given
     * workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: IntelligencePacksListOptionalParams): Promise<IntelligencePacksListResponse>;
}

/** Optional parameters. */
export declare interface IntelligencePacksDisableOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntelligencePacksEnableOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntelligencePacksListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type IntelligencePacksListResponse = IntelligencePack[];

/** The key vault properties. */
export declare interface KeyVaultProperties {
    /** The Key Vault uri which holds they key associated with the Log Analytics cluster. */
    keyVaultUri?: string;
    /** The name of the key associated with the Log Analytics cluster. */
    keyName?: string;
    /** The version of the key associated with the Log Analytics cluster. */
    keyVersion?: string;
    /** Selected key minimum required size. */
    keyRsaSize?: number;
}

/** Known values of {@link BillingType} that the service accepts. */
export declare enum KnownBillingType {
    /** Cluster */
    Cluster = "Cluster",
    /** Workspaces */
    Workspaces = "Workspaces"
}

/** Known values of {@link ClusterEntityStatus} that the service accepts. */
export declare enum KnownClusterEntityStatus {
    /** Creating */
    Creating = "Creating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deleting */
    Deleting = "Deleting",
    /** ProvisioningAccount */
    ProvisioningAccount = "ProvisioningAccount",
    /** Updating */
    Updating = "Updating"
}

/** Known values of {@link ClusterSkuNameEnum} that the service accepts. */
export declare enum KnownClusterSkuNameEnum {
    /** CapacityReservation */
    CapacityReservation = "CapacityReservation"
}

/** Known values of {@link ColumnDataTypeHintEnum} that the service accepts. */
export declare enum KnownColumnDataTypeHintEnum {
    /** A string that matches the pattern of a URI, for example, scheme://username:password@host:1234/this/is/a/path?k1=v1&k2=v2#fragment */
    Uri = "uri",
    /** A standard 128-bit GUID following the standard shape, xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx */
    Guid = "guid",
    /** An Azure Resource Model (ARM) path: /subscriptions/{...}/resourceGroups/{...}/providers/Microsoft.{...}/{...}/{...}/{...}... */
    ArmPath = "armPath",
    /** A standard V4/V6 ip address following the standard shape, x.x.x.x/y:y:y:y:y:y:y:y */
    Ip = "ip"
}

/** Known values of {@link ColumnTypeEnum} that the service accepts. */
export declare enum KnownColumnTypeEnum {
    /** String */
    String = "string",
    /** Int */
    Int = "int",
    /** Long */
    Long = "long",
    /** Real */
    Real = "real",
    /** Boolean */
    Boolean = "boolean",
    /** DateTime */
    DateTime = "dateTime",
    /** Guid */
    Guid = "guid",
    /** Dynamic */
    Dynamic = "dynamic"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DataIngestionStatus} that the service accepts. */
export declare enum KnownDataIngestionStatus {
    /** Ingestion enabled following daily cap quota reset, or subscription enablement. */
    RespectQuota = "RespectQuota",
    /** Ingestion started following service setting change. */
    ForceOn = "ForceOn",
    /** Ingestion stopped following service setting change. */
    ForceOff = "ForceOff",
    /** Reached daily cap quota, ingestion stopped. */
    OverQuota = "OverQuota",
    /** Ingestion stopped following suspended subscription. */
    SubscriptionSuspended = "SubscriptionSuspended",
    /** 80% of daily cap quota reached. */
    ApproachingQuota = "ApproachingQuota"
}

/** Known values of {@link DataSourceKind} that the service accepts. */
export declare enum KnownDataSourceKind {
    /** WindowsEvent */
    WindowsEvent = "WindowsEvent",
    /** WindowsPerformanceCounter */
    WindowsPerformanceCounter = "WindowsPerformanceCounter",
    /** IISLogs */
    IISLogs = "IISLogs",
    /** LinuxSyslog */
    LinuxSyslog = "LinuxSyslog",
    /** LinuxSyslogCollection */
    LinuxSyslogCollection = "LinuxSyslogCollection",
    /** LinuxPerformanceObject */
    LinuxPerformanceObject = "LinuxPerformanceObject",
    /** LinuxPerformanceCollection */
    LinuxPerformanceCollection = "LinuxPerformanceCollection",
    /** CustomLog */
    CustomLog = "CustomLog",
    /** CustomLogCollection */
    CustomLogCollection = "CustomLogCollection",
    /** AzureAuditLog */
    AzureAuditLog = "AzureAuditLog",
    /** AzureActivityLog */
    AzureActivityLog = "AzureActivityLog",
    /** GenericDataSource */
    GenericDataSource = "GenericDataSource",
    /** ChangeTrackingCustomPath */
    ChangeTrackingCustomPath = "ChangeTrackingCustomPath",
    /** ChangeTrackingPath */
    ChangeTrackingPath = "ChangeTrackingPath",
    /** ChangeTrackingServices */
    ChangeTrackingServices = "ChangeTrackingServices",
    /** ChangeTrackingDataTypeConfiguration */
    ChangeTrackingDataTypeConfiguration = "ChangeTrackingDataTypeConfiguration",
    /** ChangeTrackingDefaultRegistry */
    ChangeTrackingDefaultRegistry = "ChangeTrackingDefaultRegistry",
    /** ChangeTrackingRegistry */
    ChangeTrackingRegistry = "ChangeTrackingRegistry",
    /** ChangeTrackingLinuxPath */
    ChangeTrackingLinuxPath = "ChangeTrackingLinuxPath",
    /** LinuxChangeTrackingPath */
    LinuxChangeTrackingPath = "LinuxChangeTrackingPath",
    /** ChangeTrackingContentLocation */
    ChangeTrackingContentLocation = "ChangeTrackingContentLocation",
    /** WindowsTelemetry */
    WindowsTelemetry = "WindowsTelemetry",
    /** Office365 */
    Office365 = "Office365",
    /** SecurityWindowsBaselineConfiguration */
    SecurityWindowsBaselineConfiguration = "SecurityWindowsBaselineConfiguration",
    /** SecurityCenterSecurityWindowsBaselineConfiguration */
    SecurityCenterSecurityWindowsBaselineConfiguration = "SecurityCenterSecurityWindowsBaselineConfiguration",
    /** SecurityEventCollectionConfiguration */
    SecurityEventCollectionConfiguration = "SecurityEventCollectionConfiguration",
    /** SecurityInsightsSecurityEventCollectionConfiguration */
    SecurityInsightsSecurityEventCollectionConfiguration = "SecurityInsightsSecurityEventCollectionConfiguration",
    /** ImportComputerGroup */
    ImportComputerGroup = "ImportComputerGroup",
    /** NetworkMonitoring */
    NetworkMonitoring = "NetworkMonitoring",
    /** Itsm */
    Itsm = "Itsm",
    /** DnsAnalytics */
    DnsAnalytics = "DnsAnalytics",
    /** ApplicationInsights */
    ApplicationInsights = "ApplicationInsights",
    /** SqlDataClassification */
    SqlDataClassification = "SqlDataClassification"
}

/** Known values of {@link IdentityType} that the service accepts. */
export declare enum KnownIdentityType {
    /** User */
    User = "user",
    /** Application */
    Application = "application",
    /** ManagedIdentity */
    ManagedIdentity = "managedIdentity",
    /** Key */
    Key = "key",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** None */
    None = "None"
}

/** Known values of {@link LinkedServiceEntityStatus} that the service accepts. */
export declare enum KnownLinkedServiceEntityStatus {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Deleting */
    Deleting = "Deleting",
    /** ProvisioningAccount */
    ProvisioningAccount = "ProvisioningAccount",
    /** Updating */
    Updating = "Updating"
}

/** Known values of {@link ProvisioningStateEnum} that the service accepts. */
export declare enum KnownProvisioningStateEnum {
    /** Table schema is still being built and updated, table is currently locked for any changes till the procedure is done. */
    Updating = "Updating",
    /** Table schema is stable and without changes, table data is being updated. */
    InProgress = "InProgress",
    /** Table state is stable and without changes, table is unlocked and open for new updates. */
    Succeeded = "Succeeded"
}

/** Known values of {@link PublicNetworkAccessType} that the service accepts. */
export declare enum KnownPublicNetworkAccessType {
    /** Enables connectivity to Log Analytics through public DNS. */
    Enabled = "Enabled",
    /** Disables public connectivity to Log Analytics through public DNS. */
    Disabled = "Disabled"
}

/** Known values of {@link PurgeState} that the service accepts. */
export declare enum KnownPurgeState {
    /** Pending */
    Pending = "pending",
    /** Completed */
    Completed = "completed"
}

/** Known values of {@link SearchSortEnum} that the service accepts. */
export declare enum KnownSearchSortEnum {
    /** Asc */
    Asc = "asc",
    /** Desc */
    Desc = "desc"
}

/** Known values of {@link SkuNameEnum} that the service accepts. */
export declare enum KnownSkuNameEnum {
    /** Free */
    Free = "Free",
    /** Standard */
    Standard = "Standard",
    /** Premium */
    Premium = "Premium",
    /** PerNode */
    PerNode = "PerNode",
    /** PerGB2018 */
    PerGB2018 = "PerGB2018",
    /** Standalone */
    Standalone = "Standalone",
    /** CapacityReservation */
    CapacityReservation = "CapacityReservation"
}

/** Known values of {@link SourceEnum} that the service accepts. */
export declare enum KnownSourceEnum {
    /** Tables provisioned by the system, as collected via Diagnostic Settings, the Agents, or any other standard data collection means. */
    Microsoft = "microsoft",
    /** Tables created by the owner of the Workspace, and only found in this Workspace. */
    Customer = "customer"
}

/** Known values of {@link StorageInsightState} that the service accepts. */
export declare enum KnownStorageInsightState {
    /** OK */
    OK = "OK",
    /** Error */
    Error = "ERROR"
}

/** Known values of {@link TablePlanEnum} that the service accepts. */
export declare enum KnownTablePlanEnum {
    /** Logs  that are adjusted to support high volume low value verbose logs. */
    Basic = "Basic",
    /** Logs  that allow monitoring and analytics. */
    Analytics = "Analytics"
}

/** Known values of {@link TableSubTypeEnum} that the service accepts. */
export declare enum KnownTableSubTypeEnum {
    /** The default subtype with which built-in tables are created. */
    Any = "Any",
    /** Indicates a table created through the Data Collector API or with the custom logs feature of the MMA agent, or any table against which Custom Fields were created. */
    Classic = "Classic",
    /** A table eligible to have data sent into it via any of the means supported by Data Collection Rules: the Data Collection Endpoint API, ingestion-time transformations, or any other mechanism provided by Data Collection Rules */
    DataCollectionRuleBased = "DataCollectionRuleBased"
}

/** Known values of {@link TableTypeEnum} that the service accepts. */
export declare enum KnownTableTypeEnum {
    /** Standard data collected by Azure Monitor. */
    Microsoft = "Microsoft",
    /** Custom log table. */
    CustomLog = "CustomLog",
    /** Restored data. */
    RestoredLogs = "RestoredLogs",
    /** Data collected by a search job. */
    SearchResults = "SearchResults"
}

/** Known values of {@link Type} that the service accepts. */
export declare enum KnownType {
    /** StorageAccount */
    StorageAccount = "StorageAccount",
    /** EventHub */
    EventHub = "EventHub"
}

/** Known values of {@link WorkspaceEntityStatus} that the service accepts. */
export declare enum KnownWorkspaceEntityStatus {
    /** Creating */
    Creating = "Creating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled",
    /** Deleting */
    Deleting = "Deleting",
    /** ProvisioningAccount */
    ProvisioningAccount = "ProvisioningAccount",
    /** Updating */
    Updating = "Updating"
}

/** Known values of {@link WorkspaceSkuNameEnum} that the service accepts. */
export declare enum KnownWorkspaceSkuNameEnum {
    /** Free */
    Free = "Free",
    /** Standard */
    Standard = "Standard",
    /** Premium */
    Premium = "Premium",
    /** PerNode */
    PerNode = "PerNode",
    /** PerGB2018 */
    PerGB2018 = "PerGB2018",
    /** Standalone */
    Standalone = "Standalone",
    /** CapacityReservation */
    CapacityReservation = "CapacityReservation",
    /** LACluster */
    LACluster = "LACluster"
}

/** The top level Linked service resource container. */
export declare interface LinkedService extends ProxyResource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access */
    resourceId?: string;
    /** The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access */
    writeAccessResourceId?: string;
    /** The provisioning state of the linked service. */
    provisioningState?: LinkedServiceEntityStatus;
}

/**
 * Defines values for LinkedServiceEntityStatus. \
 * {@link KnownLinkedServiceEntityStatus} can be used interchangeably with LinkedServiceEntityStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Deleting** \
 * **ProvisioningAccount** \
 * **Updating**
 */
export declare type LinkedServiceEntityStatus = string;

/** The list linked service operation response. */
export declare interface LinkedServiceListResult {
    /** The list of linked service instances */
    value?: LinkedService[];
}

/** Interface representing a LinkedServices. */
export declare interface LinkedServices {
    /**
     * Gets the linked services instances in a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: LinkedServicesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<LinkedService>;
    /**
     * Create or update a linked service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linkedServices resource
     * @param parameters The parameters required to create or update a linked service.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, linkedServiceName: string, parameters: LinkedService, options?: LinkedServicesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<LinkedServicesCreateOrUpdateResponse>, LinkedServicesCreateOrUpdateResponse>>;
    /**
     * Create or update a linked service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linkedServices resource
     * @param parameters The parameters required to create or update a linked service.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, linkedServiceName: string, parameters: LinkedService, options?: LinkedServicesCreateOrUpdateOptionalParams): Promise<LinkedServicesCreateOrUpdateResponse>;
    /**
     * Deletes a linked service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linked service.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, linkedServiceName: string, options?: LinkedServicesDeleteOptionalParams): Promise<PollerLike<PollOperationState<LinkedServicesDeleteResponse>, LinkedServicesDeleteResponse>>;
    /**
     * Deletes a linked service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linked service.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, linkedServiceName: string, options?: LinkedServicesDeleteOptionalParams): Promise<LinkedServicesDeleteResponse>;
    /**
     * Gets a linked service instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param linkedServiceName Name of the linked service.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, linkedServiceName: string, options?: LinkedServicesGetOptionalParams): Promise<LinkedServicesGetResponse>;
}

/** Optional parameters. */
export declare interface LinkedServicesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type LinkedServicesCreateOrUpdateResponse = LinkedService;

/** Optional parameters. */
export declare interface LinkedServicesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type LinkedServicesDeleteResponse = LinkedService;

/** Optional parameters. */
export declare interface LinkedServicesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LinkedServicesGetResponse = LinkedService;

/** Optional parameters. */
export declare interface LinkedServicesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type LinkedServicesListByWorkspaceResponse = LinkedServiceListResult;

/** Interface representing a LinkedStorageAccounts. */
export declare interface LinkedStorageAccounts {
    /**
     * Gets all linked storage accounts associated with the specified workspace, storage accounts will be
     * sorted by their data source type.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: LinkedStorageAccountsListByWorkspaceOptionalParams): PagedAsyncIterableIterator<LinkedStorageAccountsResource>;
    /**
     * Create or Update a link relation between current workspace and a group of storage accounts of a
     * specific data source type.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceType Linked storage accounts type.
     * @param parameters The parameters required to create or update linked storage accounts.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, dataSourceType: DataSourceType, parameters: LinkedStorageAccountsResource, options?: LinkedStorageAccountsCreateOrUpdateOptionalParams): Promise<LinkedStorageAccountsCreateOrUpdateResponse>;
    /**
     * Deletes all linked storage accounts of a specific data source type associated with the specified
     * workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceType Linked storage accounts type.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, dataSourceType: DataSourceType, options?: LinkedStorageAccountsDeleteOptionalParams): Promise<void>;
    /**
     * Gets all linked storage account of a specific data source type associated with the specified
     * workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param dataSourceType Linked storage accounts type.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, dataSourceType: DataSourceType, options?: LinkedStorageAccountsGetOptionalParams): Promise<LinkedStorageAccountsGetResponse>;
}

/** Optional parameters. */
export declare interface LinkedStorageAccountsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type LinkedStorageAccountsCreateOrUpdateResponse = LinkedStorageAccountsResource;

/** Optional parameters. */
export declare interface LinkedStorageAccountsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface LinkedStorageAccountsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LinkedStorageAccountsGetResponse = LinkedStorageAccountsResource;

/** Optional parameters. */
export declare interface LinkedStorageAccountsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type LinkedStorageAccountsListByWorkspaceResponse = LinkedStorageAccountsListResult;

/** The list linked storage accounts service operation response. */
export declare interface LinkedStorageAccountsListResult {
    /** A list of linked storage accounts instances. */
    value?: LinkedStorageAccountsResource[];
}

/** Linked storage accounts top level resource container. */
export declare interface LinkedStorageAccountsResource extends ProxyResource {
    /**
     * Linked storage accounts type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataSourceType?: DataSourceType;
    /** Linked storage accounts resources ids. */
    storageAccountIds?: string[];
}

/** An Log Analytics QueryPack definition. */
export declare interface LogAnalyticsQueryPack extends QueryPacksResource {
    /**
     * The unique ID of your application. This field cannot be changed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly queryPackId?: string;
    /**
     * Creation Date for the Log Analytics QueryPack, in ISO 8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
    /**
     * Last modified date of the Log Analytics QueryPack, in ISO 8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeModified?: Date;
    /**
     * Current state of this QueryPack: whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** Describes the list of Log Analytics QueryPack resources. */
export declare interface LogAnalyticsQueryPackListResult {
    /** List of Log Analytics QueryPack definitions. */
    value: LogAnalyticsQueryPack[];
    /** The URI to get the next set of Log Analytics QueryPack definitions if too many QueryPacks where returned in the result set. */
    nextLink?: string;
}

/** A Log Analytics QueryPack-Query definition. */
export declare interface LogAnalyticsQueryPackQuery extends AzureResourceProperties {
    /**
     * The unique ID of your application. This field cannot be changed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly idPropertiesId?: string;
    /** Unique display name for your query within the Query Pack. */
    displayName?: string;
    /**
     * Creation Date for the Log Analytics Query, in ISO 8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeCreated?: Date;
    /**
     * Last modified date of the Log Analytics Query, in ISO 8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeModified?: Date;
    /**
     * Object Id of user creating the query.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly author?: string;
    /** Description of the query. */
    description?: string;
    /** Body of the query. */
    body?: string;
    /** The related metadata items for the function. */
    related?: LogAnalyticsQueryPackQueryPropertiesRelated;
    /** Tags associated with the query. */
    tags?: {
        [propertyName: string]: string[];
    };
    /** Additional properties that can be set for the query. */
    properties?: Record<string, unknown>;
}

/** Describes the list of Log Analytics QueryPack-Query resources. */
export declare interface LogAnalyticsQueryPackQueryListResult {
    /** List of Log Analytics QueryPack Query definitions. */
    value: LogAnalyticsQueryPackQuery[];
    /** The URI to get the next set of Log Analytics QueryPack definitions if too many QueryPack-Queries where returned in the result set. */
    nextLink?: string;
}

/** The related metadata items for the function. */
export declare interface LogAnalyticsQueryPackQueryPropertiesRelated {
    /** The related categories for the function. */
    categories?: string[];
    /** The related resource types for the function. */
    resourceTypes?: string[];
    /** The related Log Analytics solutions for the function. */
    solutions?: string[];
}

/** Properties that define an Log Analytics QueryPack-Query search properties. */
export declare interface LogAnalyticsQueryPackQuerySearchProperties {
    /** The related metadata items for the function. */
    related?: LogAnalyticsQueryPackQuerySearchPropertiesRelated;
    /** Tags associated with the query. */
    tags?: {
        [propertyName: string]: string[];
    };
}

/** The related metadata items for the function. */
export declare interface LogAnalyticsQueryPackQuerySearchPropertiesRelated {
    /** The related categories for the function. */
    categories?: string[];
    /** The related resource types for the function. */
    resourceTypes?: string[];
    /** The related Log Analytics solutions for the function. */
    solutions?: string[];
}

/** A management group that is connected to a workspace */
export declare interface ManagementGroup {
    /** The number of servers connected to the management group. */
    serverCount?: number;
    /** Gets or sets a value indicating whether the management group is a gateway. */
    isGateway?: boolean;
    /** The name of the management group. */
    name?: string;
    /** The unique ID of the management group. */
    id?: string;
    /** The datetime that the management group was created. */
    created?: Date;
    /** The last datetime that the management group received data. */
    dataReceived?: Date;
    /** The version of System Center that is managing the management group. */
    version?: string;
    /** The SKU of System Center that is managing the management group. */
    sku?: string;
}

/** Interface representing a ManagementGroups. */
export declare interface ManagementGroups {
    /**
     * Gets a list of management groups connected to a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: ManagementGroupsListOptionalParams): PagedAsyncIterableIterator<ManagementGroup>;
}

/** Optional parameters. */
export declare interface ManagementGroupsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ManagementGroupsListResponse = WorkspaceListManagementGroupsResult;

/** The name of a metric. */
export declare interface MetricName {
    /** The system name of the metric. */
    value?: string;
    /** The localized name of the metric. */
    localizedValue?: string;
}

/** Supported operation of OperationalInsights resource provider. */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** Display metadata associated with the operation. */
    display?: OperationDisplay;
}

export declare class OperationalInsightsManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the OperationalInsightsManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: OperationalInsightsManagementClientOptionalParams);
    queryPacks: QueryPacks;
    queries: Queries;
    dataExports: DataExports;
    dataSources: DataSources;
    intelligencePacks: IntelligencePacks;
    linkedServices: LinkedServices;
    linkedStorageAccounts: LinkedStorageAccounts;
    managementGroups: ManagementGroups;
    operationStatuses: OperationStatuses;
    sharedKeysOperations: SharedKeysOperations;
    usages: Usages;
    storageInsightConfigs: StorageInsightConfigs;
    savedSearches: SavedSearches;
    availableServiceTiers: AvailableServiceTiers;
    gateways: Gateways;
    schemaOperations: SchemaOperations;
    workspacePurge: WorkspacePurge;
    clusters: Clusters;
    operations: Operations;
    workspaces: Workspaces;
    deletedWorkspaces: DeletedWorkspaces;
    tables: Tables;
}

/** Optional parameters. */
export declare interface OperationalInsightsManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Display metadata associated with the operation. */
export declare interface OperationDisplay {
    /** Service provider: Microsoft OperationsManagement. */
    provider?: string;
    /** Resource on which the operation is performed etc. */
    resource?: string;
    /** Type of operation: get, read, delete, etc. */
    operation?: string;
    /** Description of operation */
    description?: string;
}

/** Result of the request to list solution operations. */
export declare interface OperationListResult {
    /** List of solution operations supported by the OperationsManagement resource provider. */
    value?: Operation[];
    /**
     * URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available OperationalInsights Rest API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/** The status of operation. */
export declare interface OperationStatus {
    /** The operation Id. */
    id?: string;
    /** The operation name. */
    name?: string;
    /** The start time of the operation. */
    startTime?: string;
    /** The end time of the operation. */
    endTime?: string;
    /** The status of the operation. */
    status?: string;
    /** The error detail of the operation if any. */
    error?: ErrorResponse;
}

/** Interface representing a OperationStatuses. */
export declare interface OperationStatuses {
    /**
     * Get the status of a long running azure asynchronous operation.
     * @param location The region name of operation.
     * @param asyncOperationId The operation Id.
     * @param options The options parameters.
     */
    get(location: string, asyncOperationId: string, options?: OperationStatusesGetOptionalParams): Promise<OperationStatusesGetResponse>;
}

/** Optional parameters. */
export declare interface OperationStatusesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type OperationStatusesGetResponse = OperationStatus;

/** The private link scope resource reference. */
export declare interface PrivateLinkScopedResource {
    /** The full resource Id of the private link scope resource. */
    resourceId?: string;
    /** The private link scope unique Identifier. */
    scopeId?: string;
}

/**
 * Defines values for ProvisioningStateEnum. \
 * {@link KnownProvisioningStateEnum} can be used interchangeably with ProvisioningStateEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Updating**: Table schema is still being built and updated, table is currently locked for any changes till the procedure is done. \
 * **InProgress**: Table schema is stable and without changes, table data is being updated. \
 * **Succeeded**: Table state is stable and without changes, table is unlocked and open for new updates.
 */
export declare type ProvisioningStateEnum = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/**
 * Defines values for PublicNetworkAccessType. \
 * {@link KnownPublicNetworkAccessType} can be used interchangeably with PublicNetworkAccessType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Enables connectivity to Log Analytics through public DNS. \
 * **Disabled**: Disables public connectivity to Log Analytics through public DNS.
 */
export declare type PublicNetworkAccessType = string;

/**
 * Defines values for PurgeState. \
 * {@link KnownPurgeState} can be used interchangeably with PurgeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **pending** \
 * **completed**
 */
export declare type PurgeState = string;

/** Interface representing a Queries. */
export declare interface Queries {
    /**
     * Gets a list of Queries defined within a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, queryPackName: string, options?: QueriesListOptionalParams): PagedAsyncIterableIterator<LogAnalyticsQueryPackQuery>;
    /**
     * Search a list of Queries defined within a Log Analytics QueryPack according to given search
     * properties.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param querySearchProperties Properties by which to search queries in the given Log Analytics
     *                              QueryPack.
     * @param options The options parameters.
     */
    listSearch(resourceGroupName: string, queryPackName: string, querySearchProperties: LogAnalyticsQueryPackQuerySearchProperties, options?: QueriesSearchOptionalParams): PagedAsyncIterableIterator<LogAnalyticsQueryPackQuery>;
    /**
     * Gets a specific Log Analytics Query defined within a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param id The id of a specific query defined in the Log Analytics QueryPack
     * @param options The options parameters.
     */
    get(resourceGroupName: string, queryPackName: string, id: string, options?: QueriesGetOptionalParams): Promise<QueriesGetResponse>;
    /**
     * Adds or Updates a specific Query within a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param id The id of a specific query defined in the Log Analytics QueryPack
     * @param queryPayload Properties that need to be specified to create a new query and add it to a Log
     *                     Analytics QueryPack.
     * @param options The options parameters.
     */
    put(resourceGroupName: string, queryPackName: string, id: string, queryPayload: LogAnalyticsQueryPackQuery, options?: QueriesPutOptionalParams): Promise<QueriesPutResponse>;
    /**
     * Adds or Updates a specific Query within a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param id The id of a specific query defined in the Log Analytics QueryPack
     * @param queryPayload Properties that need to be specified to create a new query and add it to a Log
     *                     Analytics QueryPack.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, queryPackName: string, id: string, queryPayload: LogAnalyticsQueryPackQuery, options?: QueriesUpdateOptionalParams): Promise<QueriesUpdateResponse>;
    /**
     * Deletes a specific Query defined within an Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param id The id of a specific query defined in the Log Analytics QueryPack
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, queryPackName: string, id: string, options?: QueriesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface QueriesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface QueriesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type QueriesGetResponse = LogAnalyticsQueryPackQuery;

/** Optional parameters. */
export declare interface QueriesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type QueriesListNextResponse = LogAnalyticsQueryPackQueryListResult;

/** Optional parameters. */
export declare interface QueriesListOptionalParams extends coreClient.OperationOptions {
    /** Maximum items returned in page. */
    top?: number;
    /** Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. */
    includeBody?: boolean;
    /** Base64 encoded token used to fetch the next page of items. Default is null. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type QueriesListResponse = LogAnalyticsQueryPackQueryListResult;

/** Optional parameters. */
export declare interface QueriesPutOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the put operation. */
export declare type QueriesPutResponse = LogAnalyticsQueryPackQuery;

/** Optional parameters. */
export declare interface QueriesSearchNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the searchNext operation. */
export declare type QueriesSearchNextResponse = LogAnalyticsQueryPackQueryListResult;

/** Optional parameters. */
export declare interface QueriesSearchOptionalParams extends coreClient.OperationOptions {
    /** Maximum items returned in page. */
    top?: number;
    /** Flag indicating whether or not to return the body of each applicable query. If false, only return the query information. */
    includeBody?: boolean;
    /** Base64 encoded token used to fetch the next page of items. Default is null. */
    skipToken?: string;
}

/** Contains response data for the search operation. */
export declare type QueriesSearchResponse = LogAnalyticsQueryPackQueryListResult;

/** Optional parameters. */
export declare interface QueriesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type QueriesUpdateResponse = LogAnalyticsQueryPackQuery;

/** Interface representing a QueryPacks. */
export declare interface QueryPacks {
    /**
     * Gets a list of all Log Analytics QueryPacks within a subscription.
     * @param options The options parameters.
     */
    list(options?: QueryPacksListOptionalParams): PagedAsyncIterableIterator<LogAnalyticsQueryPack>;
    /**
     * Gets a list of Log Analytics QueryPacks within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: QueryPacksListByResourceGroupOptionalParams): PagedAsyncIterableIterator<LogAnalyticsQueryPack>;
    /**
     * Creates a Log Analytics QueryPack. Note: You cannot specify a different value for InstrumentationKey
     * nor AppId in the Put operation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param logAnalyticsQueryPackPayload Properties that need to be specified to create or update a Log
     *                                     Analytics QueryPack.
     * @param options The options parameters.
     */
    createOrUpdateWithoutName(resourceGroupName: string, logAnalyticsQueryPackPayload: LogAnalyticsQueryPack, options?: QueryPacksCreateOrUpdateWithoutNameOptionalParams): Promise<QueryPacksCreateOrUpdateWithoutNameResponse>;
    /**
     * Deletes a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, queryPackName: string, options?: QueryPacksDeleteOptionalParams): Promise<void>;
    /**
     * Returns a Log Analytics QueryPack.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, queryPackName: string, options?: QueryPacksGetOptionalParams): Promise<QueryPacksGetResponse>;
    /**
     * Creates (or updates) a Log Analytics QueryPack. Note: You cannot specify a different value for
     * InstrumentationKey nor AppId in the Put operation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param logAnalyticsQueryPackPayload Properties that need to be specified to create or update a Log
     *                                     Analytics QueryPack.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, queryPackName: string, logAnalyticsQueryPackPayload: LogAnalyticsQueryPack, options?: QueryPacksCreateOrUpdateOptionalParams): Promise<QueryPacksCreateOrUpdateResponse>;
    /**
     * Updates an existing QueryPack's tags. To update other fields use the CreateOrUpdate method.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param queryPackName The name of the Log Analytics QueryPack resource.
     * @param queryPackTags Updated tag information to set into the QueryPack instance.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, queryPackName: string, queryPackTags: TagsResource, options?: QueryPacksUpdateTagsOptionalParams): Promise<QueryPacksUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface QueryPacksCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type QueryPacksCreateOrUpdateResponse = LogAnalyticsQueryPack;

/** Optional parameters. */
export declare interface QueryPacksCreateOrUpdateWithoutNameOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdateWithoutName operation. */
export declare type QueryPacksCreateOrUpdateWithoutNameResponse = LogAnalyticsQueryPack;

/** Optional parameters. */
export declare interface QueryPacksDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface QueryPacksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type QueryPacksGetResponse = LogAnalyticsQueryPack;

/** Optional parameters. */
export declare interface QueryPacksListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type QueryPacksListByResourceGroupNextResponse = LogAnalyticsQueryPackListResult;

/** Optional parameters. */
export declare interface QueryPacksListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type QueryPacksListByResourceGroupResponse = LogAnalyticsQueryPackListResult;

/** Optional parameters. */
export declare interface QueryPacksListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type QueryPacksListNextResponse = LogAnalyticsQueryPackListResult;

/** Optional parameters. */
export declare interface QueryPacksListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type QueryPacksListResponse = LogAnalyticsQueryPackListResult;

/** An azure resource object */
export declare interface QueryPacksResource {
    /**
     * Azure resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Azure resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Azure resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location */
    location: string;
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Optional parameters. */
export declare interface QueryPacksUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type QueryPacksUpdateTagsResponse = LogAnalyticsQueryPack;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Restore parameters. */
export declare interface RestoredLogs {
    /** The timestamp to start the restore from (UTC). */
    startRestoreTime?: Date;
    /** The timestamp to end the restore by (UTC). */
    endRestoreTime?: Date;
    /** The table to restore data from. */
    sourceTable?: string;
    /**
     * Search results table async operation id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azureAsyncOperationId?: string;
}

/** Search job execution statistics. */
export declare interface ResultStatistics {
    /**
     * Search job completion percentage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly progress?: number;
    /**
     * The number of rows that were returned by the search job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ingestedRecords?: number;
    /**
     * Search job: Amount of scanned data.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scannedGb?: number;
}

/** Value object for saved search results. */
export declare interface SavedSearch extends ProxyResource {
    /** The ETag of the saved search. To override an existing saved search, use "*" or specify the current Etag */
    etag?: string;
    /** The category of the saved search. This helps the user to find a saved search faster. */
    category: string;
    /** Saved search display name. */
    displayName: string;
    /** The query expression for the saved search. */
    query: string;
    /** The function alias if query serves as a function. */
    functionAlias?: string;
    /** The optional function parameters if query serves as a function. Value should be in the following format: 'param-name1:type1 = default_value1, param-name2:type2 = default_value2'. For more examples and proper syntax please refer to https://docs.microsoft.com/en-us/azure/kusto/query/functions/user-defined-functions. */
    functionParameters?: string;
    /** The version number of the query language. The current version is 2 and is the default. */
    version?: number;
    /** The tags attached to the saved search. */
    tags?: Tag[];
}

/** Interface representing a SavedSearches. */
export declare interface SavedSearches {
    /**
     * Deletes the specified saved search in a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param savedSearchId The id of the saved search.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, savedSearchId: string, options?: SavedSearchesDeleteOptionalParams): Promise<void>;
    /**
     * Creates or updates a saved search for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param savedSearchId The id of the saved search.
     * @param parameters The parameters required to save a search.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, savedSearchId: string, parameters: SavedSearch, options?: SavedSearchesCreateOrUpdateOptionalParams): Promise<SavedSearchesCreateOrUpdateResponse>;
    /**
     * Gets the specified saved search for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param savedSearchId The id of the saved search.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, savedSearchId: string, options?: SavedSearchesGetOptionalParams): Promise<SavedSearchesGetResponse>;
    /**
     * Gets the saved searches for a given Log Analytics Workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: SavedSearchesListByWorkspaceOptionalParams): Promise<SavedSearchesListByWorkspaceResponse>;
}

/** Optional parameters. */
export declare interface SavedSearchesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SavedSearchesCreateOrUpdateResponse = SavedSearch;

/** Optional parameters. */
export declare interface SavedSearchesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SavedSearchesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SavedSearchesGetResponse = SavedSearch;

/** Optional parameters. */
export declare interface SavedSearchesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type SavedSearchesListByWorkspaceResponse = SavedSearchesListResult;

/** The saved search list operation response. */
export declare interface SavedSearchesListResult {
    /** The array of result values. */
    value?: SavedSearch[];
}

/** Table's schema. */
export declare interface Schema {
    /** Table name. */
    name?: string;
    /** Table display name. */
    displayName?: string;
    /** Table description. */
    description?: string;
    /** A list of table custom columns. */
    columns?: Column[];
    /**
     * A list of table standard columns.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly standardColumns?: Column[];
    /**
     * Table category.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly categories?: string[];
    /**
     * Table labels.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly labels?: string[];
    /**
     * Table's creator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly source?: SourceEnum;
    /**
     * Table's creator.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tableType?: TableTypeEnum;
    /**
     * The subtype describes what APIs can be used to interact with the table, and what features are available against it.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tableSubType?: TableSubTypeEnum;
    /**
     * List of solutions the table is affiliated with
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly solutions?: string[];
}

/** Optional parameters. */
export declare interface SchemaGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SchemaGetResponse = SearchGetSchemaResponse;

/** Interface representing a SchemaOperations. */
export declare interface SchemaOperations {
    /**
     * Gets the schema for a given workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: SchemaGetOptionalParams): Promise<SchemaGetResponse>;
}

/** The get schema operation response. */
export declare interface SearchGetSchemaResponse {
    /** The metadata from search results. */
    metadata?: SearchMetadata;
    /** The array of result values. */
    value?: SearchSchemaValue[];
}

/** Metadata for search results. */
export declare interface SearchMetadata {
    /** The request id of the search. */
    searchId?: string;
    /** The search result type. */
    resultType?: string;
    /** The total number of search results. */
    total?: number;
    /** The number of top search results. */
    top?: number;
    /** The id of the search results request. */
    id?: string;
    /** The core summaries. */
    coreSummaries?: CoreSummary[];
    /** The status of the search results. */
    status?: string;
    /** The start time for the search. */
    startTime?: Date;
    /** The time of last update. */
    lastUpdated?: Date;
    /** The ETag of the search results. */
    eTag?: string;
    /** How the results are sorted. */
    sort?: SearchSort[];
    /** The request time. */
    requestTime?: number;
    /** The aggregated value field. */
    aggregatedValueField?: string;
    /** The aggregated grouping fields. */
    aggregatedGroupingFields?: string;
    /** The sum of all aggregates returned in the result set. */
    sum?: number;
    /** The max of all aggregates returned in the result set. */
    max?: number;
    /** The schema. */
    schema?: SearchMetadataSchema;
}

/** Schema metadata for search. */
export declare interface SearchMetadataSchema {
    /** The name of the metadata schema. */
    name?: string;
    /** The version of the metadata schema. */
    version?: number;
}

/** Parameters of the search job that initiated this table. */
export declare interface SearchResults {
    /** Search job query. */
    query?: string;
    /** Search job Description. */
    description?: string;
    /** Limit the search job to return up to specified number of rows. */
    limit?: number;
    /** The timestamp to start the search from (UTC) */
    startSearchTime?: Date;
    /** The timestamp to end the search by (UTC) */
    endSearchTime?: Date;
    /**
     * The table used in the search job.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sourceTable?: string;
    /**
     * Search results table async operation id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly azureAsyncOperationId?: string;
}

/** Value object for schema results. */
export declare interface SearchSchemaValue {
    /** The name of the schema. */
    name?: string;
    /** The display name of the schema. */
    displayName?: string;
    /** The type. */
    type?: string;
    /** The boolean that indicates the field is searchable as free text. */
    indexed: boolean;
    /** The boolean that indicates whether or not the field is stored. */
    stored: boolean;
    /** The boolean that indicates whether or not the field is a facet. */
    facet: boolean;
    /** The array of workflows containing the field. */
    ownerType?: string[];
}

/** The sort parameters for search. */
export declare interface SearchSort {
    /** The name of the field the search query is sorted on. */
    name?: string;
    /** The sort order of the search. */
    order?: SearchSortEnum;
}

/**
 * Defines values for SearchSortEnum. \
 * {@link KnownSearchSortEnum} can be used interchangeably with SearchSortEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **asc** \
 * **desc**
 */
export declare type SearchSortEnum = string;

/** The shared keys for a workspace. */
export declare interface SharedKeys {
    /** The primary shared key of a workspace. */
    primarySharedKey?: string;
    /** The secondary shared key of a workspace. */
    secondarySharedKey?: string;
}

/** Optional parameters. */
export declare interface SharedKeysGetSharedKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSharedKeys operation. */
export declare type SharedKeysGetSharedKeysResponse = SharedKeys;

/** Interface representing a SharedKeysOperations. */
export declare interface SharedKeysOperations {
    /**
     * Gets the shared keys for a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    getSharedKeys(resourceGroupName: string, workspaceName: string, options?: SharedKeysGetSharedKeysOptionalParams): Promise<SharedKeysGetSharedKeysResponse>;
    /**
     * Regenerates the shared keys for a Log Analytics Workspace. These keys are used to connect Microsoft
     * Operational Insights agents to the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    regenerate(resourceGroupName: string, workspaceName: string, options?: SharedKeysRegenerateOptionalParams): Promise<SharedKeysRegenerateResponse>;
}

/** Optional parameters. */
export declare interface SharedKeysRegenerateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerate operation. */
export declare type SharedKeysRegenerateResponse = SharedKeys;

/**
 * Defines values for SkuNameEnum. \
 * {@link KnownSkuNameEnum} can be used interchangeably with SkuNameEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Free** \
 * **Standard** \
 * **Premium** \
 * **PerNode** \
 * **PerGB2018** \
 * **Standalone** \
 * **CapacityReservation**
 */
export declare type SkuNameEnum = string;

/**
 * Defines values for SourceEnum. \
 * {@link KnownSourceEnum} can be used interchangeably with SourceEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **microsoft**: Tables provisioned by the system, as collected via Diagnostic Settings, the Agents, or any other standard data collection means. \
 * **customer**: Tables created by the owner of the Workspace, and only found in this Workspace.
 */
export declare type SourceEnum = string;

/** Describes a storage account connection. */
export declare interface StorageAccount {
    /** The Azure Resource Manager ID of the storage account resource. */
    id: string;
    /** The storage account key. */
    key: string;
}

/** The top level storage insight resource container. */
export declare interface StorageInsight extends ProxyResource {
    /** The ETag of the storage insight. */
    eTag?: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The names of the blob containers that the workspace should read */
    containers?: string[];
    /** The names of the Azure tables that the workspace should read */
    tables?: string[];
    /** The storage account connection details */
    storageAccount?: StorageAccount;
    /**
     * The status of the storage insight
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: StorageInsightStatus;
}

/** Interface representing a StorageInsightConfigs. */
export declare interface StorageInsightConfigs {
    /**
     * Lists the storage insight instances within a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: StorageInsightConfigsListByWorkspaceOptionalParams): PagedAsyncIterableIterator<StorageInsight>;
    /**
     * Create or update a storage insight.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param parameters The parameters required to create or update a storage insight.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, storageInsightName: string, parameters: StorageInsight, options?: StorageInsightConfigsCreateOrUpdateOptionalParams): Promise<StorageInsightConfigsCreateOrUpdateResponse>;
    /**
     * Gets a storage insight instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, storageInsightName: string, options?: StorageInsightConfigsGetOptionalParams): Promise<StorageInsightConfigsGetResponse>;
    /**
     * Deletes a storageInsightsConfigs resource
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param storageInsightName Name of the storageInsightsConfigs resource
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, storageInsightName: string, options?: StorageInsightConfigsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface StorageInsightConfigsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type StorageInsightConfigsCreateOrUpdateResponse = StorageInsight;

/** Optional parameters. */
export declare interface StorageInsightConfigsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface StorageInsightConfigsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type StorageInsightConfigsGetResponse = StorageInsight;

/** Optional parameters. */
export declare interface StorageInsightConfigsListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type StorageInsightConfigsListByWorkspaceNextResponse = StorageInsightListResult;

/** Optional parameters. */
export declare interface StorageInsightConfigsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type StorageInsightConfigsListByWorkspaceResponse = StorageInsightListResult;

/** The list storage insights operation response. */
export declare interface StorageInsightListResult {
    /** A list of storage insight items. */
    value?: StorageInsight[];
    /** The link (url) to the next page of results. */
    odataNextLink?: string;
}

/**
 * Defines values for StorageInsightState. \
 * {@link KnownStorageInsightState} can be used interchangeably with StorageInsightState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OK** \
 * **ERROR**
 */
export declare type StorageInsightState = string;

/** The status of the storage insight. */
export declare interface StorageInsightStatus {
    /** The state of the storage insight connection to the workspace */
    state: StorageInsightState;
    /** Description of the state of the storage insight. */
    description?: string;
}

/** Read only system data */
export declare interface SystemData {
    /** An identifier for the identity that created the resource */
    createdBy?: string;
    /** The type of identity that created the resource */
    createdByType?: IdentityType;
    /** The timestamp of resource creation (UTC) */
    createdAt?: Date;
    /** An identifier for the identity that last modified the resource */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource */
    lastModifiedByType?: IdentityType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemDataAutoGenerated {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Workspace data table definition. */
export declare interface Table extends ProxyResource {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemDataAutoGenerated;
    /** The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention. */
    retentionInDays?: number;
    /** The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention. */
    totalRetentionInDays?: number;
    /**
     * The table data archive retention in days. Calculated as (totalRetentionInDays-retentionInDays)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly archiveRetentionInDays?: number;
    /** Parameters of the search job that initiated this table. */
    searchResults?: SearchResults;
    /** Parameters of the restore operation that initiated this table. */
    restoredLogs?: RestoredLogs;
    /**
     * Search job execution statistics.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resultStatistics?: ResultStatistics;
    /** Instruct the system how to handle and charge the logs ingested to this table. */
    plan?: TablePlanEnum;
    /**
     * The timestamp that table plan was last modified (UTC).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastPlanModifiedDate?: string;
    /** Table schema. */
    schema?: Schema;
    /**
     * Table's current provisioning state. If set to 'updating', indicates a resource lock due to ongoing operation, forbidding any update to the table until the ongoing operation is concluded.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningStateEnum;
    /**
     * True - Value originates from workspace retention in days, False - Customer specific.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly retentionInDaysAsDefault?: boolean;
    /**
     * True - Value originates from retention in days, False - Customer specific.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly totalRetentionInDaysAsDefault?: boolean;
}

/**
 * Defines values for TablePlanEnum. \
 * {@link KnownTablePlanEnum} can be used interchangeably with TablePlanEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic**: Logs  that are adjusted to support high volume low value verbose logs. \
 * **Analytics**: Logs  that allow monitoring and analytics.
 */
export declare type TablePlanEnum = string;

/** Interface representing a Tables. */
export declare interface Tables {
    /**
     * Gets all the tables for the specified Log Analytics workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: TablesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<Table>;
    /**
     * Update or Create a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param parameters The parameters required to update table properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, tableName: string, parameters: Table, options?: TablesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<TablesCreateOrUpdateResponse>, TablesCreateOrUpdateResponse>>;
    /**
     * Update or Create a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param parameters The parameters required to update table properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, tableName: string, parameters: Table, options?: TablesCreateOrUpdateOptionalParams): Promise<TablesCreateOrUpdateResponse>;
    /**
     * Update a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param parameters The parameters required to update table properties.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, tableName: string, parameters: Table, options?: TablesUpdateOptionalParams): Promise<PollerLike<PollOperationState<TablesUpdateResponse>, TablesUpdateResponse>>;
    /**
     * Update a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param parameters The parameters required to update table properties.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, tableName: string, parameters: Table, options?: TablesUpdateOptionalParams): Promise<TablesUpdateResponse>;
    /**
     * Gets a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, tableName: string, options?: TablesGetOptionalParams): Promise<TablesGetResponse>;
    /**
     * Delete a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, tableName: string, options?: TablesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a Log Analytics workspace table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, tableName: string, options?: TablesDeleteOptionalParams): Promise<void>;
    /**
     * Migrate a Log Analytics table from support of the Data Collector API and Custom Fields features to
     * support of Data Collection Rule-based Custom Logs.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    migrate(resourceGroupName: string, workspaceName: string, tableName: string, options?: TablesMigrateOptionalParams): Promise<void>;
    /**
     * Cancel a log analytics workspace search results table query run.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    cancelSearch(resourceGroupName: string, workspaceName: string, tableName: string, options?: TablesCancelSearchOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface TablesCancelSearchOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface TablesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type TablesCreateOrUpdateResponse = Table;

/** Optional parameters. */
export declare interface TablesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface TablesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TablesGetResponse = Table;

/** Optional parameters. */
export declare interface TablesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type TablesListByWorkspaceResponse = TablesListResult;

/** The list tables operation response. */
export declare interface TablesListResult {
    /** A list of data tables. */
    value?: Table[];
}

/** Optional parameters. */
export declare interface TablesMigrateOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for TableSubTypeEnum. \
 * {@link KnownTableSubTypeEnum} can be used interchangeably with TableSubTypeEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Any**: The default subtype with which built-in tables are created. \
 * **Classic**: Indicates a table created through the Data Collector API or with the custom logs feature of the MMA agent, or any table against which Custom Fields were created. \
 * **DataCollectionRuleBased**: A table eligible to have data sent into it via any of the means supported by Data Collection Rules: the Data Collection Endpoint API, ingestion-time transformations, or any other mechanism provided by Data Collection Rules
 */
export declare type TableSubTypeEnum = string;

/** Optional parameters. */
export declare interface TablesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type TablesUpdateResponse = Table;

/**
 * Defines values for TableTypeEnum. \
 * {@link KnownTableTypeEnum} can be used interchangeably with TableTypeEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft**: Standard data collected by Azure Monitor. \
 * **CustomLog**: Custom log table. \
 * **RestoredLogs**: Restored data. \
 * **SearchResults**: Data collected by a search job.
 */
export declare type TableTypeEnum = string;

/** A tag of a saved search. */
export declare interface Tag {
    /** The tag name. */
    name: string;
    /** The tag value. */
    value: string;
}

/** A container holding only the Tags for a resource, allowing the user to update the tags on a QueryPack instance. */
export declare interface TagsResource {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **StorageAccount** \
 * **EventHub**
 */
export declare type Type = string;

/** A metric describing the usage of a resource. */
export declare interface UsageMetric {
    /** The name of the metric. */
    name?: MetricName;
    /** The units used for the metric. */
    unit?: string;
    /** The current value of the metric. */
    currentValue?: number;
    /** The quota limit for the metric. */
    limit?: number;
    /** The time that the metric's value will reset. */
    nextResetTime?: Date;
    /** The quota period that determines the length of time between value resets. */
    quotaPeriod?: string;
}

/** Interface representing a Usages. */
export declare interface Usages {
    /**
     * Gets a list of usage metrics for a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: UsagesListOptionalParams): PagedAsyncIterableIterator<UsageMetric>;
}

/** Optional parameters. */
export declare interface UsagesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type UsagesListResponse = WorkspaceListUsagesResult;

/** User assigned identity properties. */
export declare interface UserIdentityProperties {
    /**
     * The principal id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

/** The top level Workspace resource container. */
export declare interface Workspace extends TrackedResource {
    /** The identity of the resource. */
    identity?: Identity;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemDataAutoGenerated;
    /** The etag of the workspace. */
    etag?: string;
    /**
     * The provisioning state of the workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkspaceEntityStatus;
    /**
     * This is a read-only property. Represents the ID associated with the workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customerId?: string;
    /** The SKU of the workspace. */
    sku?: WorkspaceSku;
    /** The workspace data retention in days. Allowed values are per pricing plan. See pricing tiers documentation for details. */
    retentionInDays?: number;
    /** The daily volume cap for ingestion. */
    workspaceCapping?: WorkspaceCapping;
    /**
     * Workspace creation date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: string;
    /**
     * Workspace modification date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly modifiedDate?: string;
    /** The network access type for accessing Log Analytics ingestion. */
    publicNetworkAccessForIngestion?: PublicNetworkAccessType;
    /** The network access type for accessing Log Analytics query. */
    publicNetworkAccessForQuery?: PublicNetworkAccessType;
    /** Indicates whether customer managed storage is mandatory for query management. */
    forceCmkForQuery?: boolean;
    /**
     * List of linked private link scope resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateLinkScopedResources?: PrivateLinkScopedResource[];
    /** Workspace features. */
    features?: WorkspaceFeatures;
    /** The resource ID of the default Data Collection Rule to use for this workspace. Expected format is - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionRules/{dcrName}. */
    defaultDataCollectionRuleResourceId?: string;
}

/** The daily volume cap for ingestion. */
export declare interface WorkspaceCapping {
    /** The workspace daily quota for ingestion. */
    dailyQuotaGb?: number;
    /**
     * The time when the quota will be rest.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quotaNextResetTime?: string;
    /**
     * The status of data ingestion for this workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataIngestionStatus?: DataIngestionStatus;
}

/**
 * Defines values for WorkspaceEntityStatus. \
 * {@link KnownWorkspaceEntityStatus} can be used interchangeably with WorkspaceEntityStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleting** \
 * **ProvisioningAccount** \
 * **Updating**
 */
export declare type WorkspaceEntityStatus = string;

/** Workspace features. */
export declare interface WorkspaceFeatures {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Flag that indicate if data should be exported. */
    enableDataExport?: boolean;
    /** Flag that describes if we want to remove the data after 30 days. */
    immediatePurgeDataOn30Days?: boolean;
    /** Flag that indicate which permission to use - resource or workspace or both. */
    enableLogAccessUsingOnlyResourcePermissions?: boolean;
    /** Dedicated LA cluster resourceId that is linked to the workspaces. */
    clusterResourceId?: string;
    /** Disable Non-AAD based Auth. */
    disableLocalAuth?: boolean;
}

/** The list workspace management groups operation response. */
export declare interface WorkspaceListManagementGroupsResult {
    /** Gets or sets a list of management groups attached to the workspace. */
    value?: ManagementGroup[];
}

/** The list workspaces operation response. */
export declare interface WorkspaceListResult {
    /** A list of workspaces. */
    value?: Workspace[];
}

/** The list workspace usages operation response. */
export declare interface WorkspaceListUsagesResult {
    /** Gets or sets a list of usage metrics for a workspace. */
    value?: UsageMetric[];
}

/** The top level Workspace resource container. */
export declare interface WorkspacePatch extends AzureEntityResource {
    /** The identity of the resource. */
    identity?: Identity;
    /** Resource tags. Optional. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * The provisioning state of the workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: WorkspaceEntityStatus;
    /**
     * This is a read-only property. Represents the ID associated with the workspace.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly customerId?: string;
    /** The SKU of the workspace. */
    sku?: WorkspaceSku;
    /** The workspace data retention in days. Allowed values are per pricing plan. See pricing tiers documentation for details. */
    retentionInDays?: number;
    /** The daily volume cap for ingestion. */
    workspaceCapping?: WorkspaceCapping;
    /**
     * Workspace creation date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createdDate?: string;
    /**
     * Workspace modification date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly modifiedDate?: string;
    /** The network access type for accessing Log Analytics ingestion. */
    publicNetworkAccessForIngestion?: PublicNetworkAccessType;
    /** The network access type for accessing Log Analytics query. */
    publicNetworkAccessForQuery?: PublicNetworkAccessType;
    /** Indicates whether customer managed storage is mandatory for query management. */
    forceCmkForQuery?: boolean;
    /**
     * List of linked private link scope resources.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateLinkScopedResources?: PrivateLinkScopedResource[];
    /** Workspace features. */
    features?: WorkspaceFeatures;
    /** The resource ID of the default Data Collection Rule to use for this workspace. Expected format is - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionRules/{dcrName}. */
    defaultDataCollectionRuleResourceId?: string;
}

/** Interface representing a WorkspacePurge. */
export declare interface WorkspacePurge {
    /**
     * Purges data in an Log Analytics workspace by a set of user-defined filters.
     *
     * In order to manage system resources, purge requests are throttled at 50 requests per hour. You
     * should batch the execution of purge requests by sending a single command whose predicate includes
     * all user identities that require purging. Use the in operator to specify multiple identities. You
     * should run the query prior to using for a purge request to verify that the results are expected.
     * Log Analytics only supports purge operations required for compliance with GDPR. The Log Analytics
     * product team reserves the right to reject requests for purge operations that are not for the purpose
     * of GDPR compliance. In the event of a dispute, please create a support ticket
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param body Describes the body of a request to purge data in a single table of an Log Analytics
     *             Workspace
     * @param options The options parameters.
     */
    purge(resourceGroupName: string, workspaceName: string, body: WorkspacePurgeBody, options?: WorkspacePurgePurgeOptionalParams): Promise<WorkspacePurgePurgeResponse>;
    /**
     * Gets status of an ongoing purge operation.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param purgeId In a purge status request, this is the Id of the operation the status of which is
     *                returned.
     * @param options The options parameters.
     */
    getPurgeStatus(resourceGroupName: string, workspaceName: string, purgeId: string, options?: WorkspacePurgeGetPurgeStatusOptionalParams): Promise<WorkspacePurgeGetPurgeStatusResponse>;
}

/** Describes the body of a purge request for an App Insights Workspace */
export declare interface WorkspacePurgeBody {
    /** Table from which to purge data. */
    table: string;
    /** The set of columns and filters (queries) to run over them to purge the resulting data. */
    filters: WorkspacePurgeBodyFilters[];
}

/** User-defined filters to return data which will be purged from the table. */
export declare interface WorkspacePurgeBodyFilters {
    /** The column of the table over which the given query should run */
    column?: string;
    /** A query operator to evaluate over the provided column and value(s). Supported operators are ==, =~, in, in~, >, >=, <, <=, between, and have the same behavior as they would in a KQL query. */
    operator?: string;
    /** the value for the operator to function over. This can be a number (e.g., > 100), a string (timestamp >= '2017-09-01') or array of values. */
    value?: any;
    /** When filtering over custom dimensions, this key will be used as the name of the custom dimension. */
    key?: string;
}

/** Optional parameters. */
export declare interface WorkspacePurgeGetPurgeStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPurgeStatus operation. */
export declare type WorkspacePurgeGetPurgeStatusResponse = WorkspacePurgeStatusResponse;

/** Defines headers for WorkspacePurge_purge operation. */
export declare interface WorkspacePurgePurgeHeaders {
    /** The location from which to request the operation status. */
    xMsStatusLocation?: string;
}

/** Optional parameters. */
export declare interface WorkspacePurgePurgeOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the purge operation. */
export declare type WorkspacePurgePurgeResponse = WorkspacePurgePurgeHeaders & WorkspacePurgeResponse;

/** Response containing operationId for a specific purge action. */
export declare interface WorkspacePurgeResponse {
    /** Id to use when querying for status for a particular purge operation. */
    operationId: string;
}

/** Response containing status for a specific purge operation. */
export declare interface WorkspacePurgeStatusResponse {
    /** Status of the operation represented by the requested Id. */
    status: PurgeState;
}

/** Interface representing a Workspaces. */
export declare interface Workspaces {
    /**
     * Gets the workspaces in a subscription.
     * @param options The options parameters.
     */
    list(options?: WorkspacesListOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Gets workspaces in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: WorkspacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Create or update a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param parameters The parameters required to create or update a workspace.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, parameters: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspacesCreateOrUpdateResponse>, WorkspacesCreateOrUpdateResponse>>;
    /**
     * Create or update a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param parameters The parameters required to create or update a workspace.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, parameters: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<WorkspacesCreateOrUpdateResponse>;
    /**
     * Deletes a workspace resource. To recover the workspace, create it again with the same name, in the
     * same subscription, resource group and location. The name is kept for 14 days and cannot be used for
     * another workspace. To remove the workspace completely and release the name, use the force flag.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a workspace resource. To recover the workspace, create it again with the same name, in the
     * same subscription, resource group and location. The name is kept for 14 days and cannot be used for
     * another workspace. To remove the workspace completely and release the name, use the force flag.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<void>;
    /**
     * Gets a workspace instance.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: WorkspacesGetOptionalParams): Promise<WorkspacesGetResponse>;
    /**
     * Updates a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param parameters The parameters required to patch a workspace.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, parameters: WorkspacePatch, options?: WorkspacesUpdateOptionalParams): Promise<WorkspacesUpdateResponse>;
}

/** Optional parameters. */
export declare interface WorkspacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspacesCreateOrUpdateResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Deletes the workspace without the recovery option. A workspace that was deleted with this flag cannot be recovered. */
    force?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkspacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspacesGetResponse = Workspace;

/** The SKU (tier) of a workspace. */
export declare interface WorkspaceSku {
    /** The name of the SKU. */
    name: WorkspaceSkuNameEnum;
    /** The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. */
    capacityReservationLevel?: CapacityReservationLevel;
    /**
     * The last time when the sku was updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSkuUpdate?: string;
}

/**
 * Defines values for WorkspaceSkuNameEnum. \
 * {@link KnownWorkspaceSkuNameEnum} can be used interchangeably with WorkspaceSkuNameEnum,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Free** \
 * **Standard** \
 * **Premium** \
 * **PerNode** \
 * **PerGB2018** \
 * **Standalone** \
 * **CapacityReservation** \
 * **LACluster**
 */
export declare type WorkspaceSkuNameEnum = string;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type WorkspacesListByResourceGroupResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkspacesListResponse = WorkspaceListResult;

/** Optional parameters. */
export declare interface WorkspacesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type WorkspacesUpdateResponse = Workspace;

export { }
