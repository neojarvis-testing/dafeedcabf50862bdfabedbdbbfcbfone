import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ServerAdministrators } from "../operationsInterfaces";
import { PostgreSQLManagementClient } from "../postgreSQLManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { ServerAdministratorResource, ServerAdministratorsListOptionalParams, ServerAdministratorsGetOptionalParams, ServerAdministratorsGetResponse, ServerAdministratorsCreateOrUpdateOptionalParams, ServerAdministratorsCreateOrUpdateResponse, ServerAdministratorsDeleteOptionalParams } from "../models";
/** Class containing ServerAdministrators operations. */
export declare class ServerAdministratorsImpl implements ServerAdministrators {
    private readonly client;
    /**
     * Initialize a new instance of the class ServerAdministrators class.
     * @param client Reference to the service client
     */
    constructor(client: PostgreSQLManagementClient);
    /**
     * Returns a list of server Administrators.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, serverName: string, options?: ServerAdministratorsListOptionalParams): PagedAsyncIterableIterator<ServerAdministratorResource>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets information about a AAD server administrator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, options?: ServerAdministratorsGetOptionalParams): Promise<ServerAdministratorsGetResponse>;
    /**
     * Creates or update active directory administrator on an existing server. The update action will
     * overwrite the existing administrator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param properties The required parameters for creating or updating an AAD server administrator.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, properties: ServerAdministratorResource, options?: ServerAdministratorsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServerAdministratorsCreateOrUpdateResponse>, ServerAdministratorsCreateOrUpdateResponse>>;
    /**
     * Creates or update active directory administrator on an existing server. The update action will
     * overwrite the existing administrator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param properties The required parameters for creating or updating an AAD server administrator.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, properties: ServerAdministratorResource, options?: ServerAdministratorsCreateOrUpdateOptionalParams): Promise<ServerAdministratorsCreateOrUpdateResponse>;
    /**
     * Deletes server active directory administrator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, options?: ServerAdministratorsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes server active directory administrator.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, options?: ServerAdministratorsDeleteOptionalParams): Promise<void>;
    /**
     * Returns a list of server Administrators.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    private _list;
}
//# sourceMappingURL=serverAdministrators.d.ts.map