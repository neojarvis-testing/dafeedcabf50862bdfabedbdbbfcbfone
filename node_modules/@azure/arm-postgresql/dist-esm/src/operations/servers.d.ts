import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Servers } from "../operationsInterfaces";
import { PostgreSQLManagementClient } from "../postgreSQLManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Server, ServersListByResourceGroupOptionalParams, ServersListOptionalParams, ServerForCreate, ServersCreateOptionalParams, ServersCreateResponse, ServerUpdateParameters, ServersUpdateOptionalParams, ServersUpdateResponse, ServersDeleteOptionalParams, ServersGetOptionalParams, ServersGetResponse, ServersRestartOptionalParams } from "../models";
/** Class containing Servers operations. */
export declare class ServersImpl implements Servers {
    private readonly client;
    /**
     * Initialize a new instance of the class Servers class.
     * @param client Reference to the service client
     */
    constructor(client: PostgreSQLManagementClient);
    /**
     * List all the servers in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ServersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Server>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * List all the servers in a given subscription.
     * @param options The options parameters.
     */
    list(options?: ServersListOptionalParams): PagedAsyncIterableIterator<Server>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Creates a new server, or will overwrite an existing server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for creating or updating a server.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, serverName: string, parameters: ServerForCreate, options?: ServersCreateOptionalParams): Promise<PollerLike<PollOperationState<ServersCreateResponse>, ServersCreateResponse>>;
    /**
     * Creates a new server, or will overwrite an existing server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for creating or updating a server.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, serverName: string, parameters: ServerForCreate, options?: ServersCreateOptionalParams): Promise<ServersCreateResponse>;
    /**
     * Updates an existing server. The request body can contain one to many of the properties present in
     * the normal server definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a server.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, serverName: string, parameters: ServerUpdateParameters, options?: ServersUpdateOptionalParams): Promise<PollerLike<PollOperationState<ServersUpdateResponse>, ServersUpdateResponse>>;
    /**
     * Updates an existing server. The request body can contain one to many of the properties present in
     * the normal server definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param parameters The required parameters for updating a server.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, serverName: string, parameters: ServerUpdateParameters, options?: ServersUpdateOptionalParams): Promise<ServersUpdateResponse>;
    /**
     * Deletes a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, serverName: string, options?: ServersDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, serverName: string, options?: ServersDeleteOptionalParams): Promise<void>;
    /**
     * Gets information about a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, options?: ServersGetOptionalParams): Promise<ServersGetResponse>;
    /**
     * List all the servers in a given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * List all the servers in a given subscription.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Restarts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginRestart(resourceGroupName: string, serverName: string, options?: ServersRestartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Restarts a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceGroupName: string, serverName: string, options?: ServersRestartOptionalParams): Promise<void>;
}
//# sourceMappingURL=servers.d.ts.map