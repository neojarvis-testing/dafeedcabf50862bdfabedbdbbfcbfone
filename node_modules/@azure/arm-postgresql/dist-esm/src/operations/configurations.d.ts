import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Configurations } from "../operationsInterfaces";
import { PostgreSQLManagementClient } from "../postgreSQLManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Configuration, ConfigurationsListByServerOptionalParams, ConfigurationsCreateOrUpdateOptionalParams, ConfigurationsCreateOrUpdateResponse, ConfigurationsGetOptionalParams, ConfigurationsGetResponse } from "../models";
/** Class containing Configurations operations. */
export declare class ConfigurationsImpl implements Configurations {
    private readonly client;
    /**
     * Initialize a new instance of the class Configurations class.
     * @param client Reference to the service client
     */
    constructor(client: PostgreSQLManagementClient);
    /**
     * List all the configurations in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    listByServer(resourceGroupName: string, serverName: string, options?: ConfigurationsListByServerOptionalParams): PagedAsyncIterableIterator<Configuration>;
    private listByServerPagingPage;
    private listByServerPagingAll;
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, serverName: string, configurationName: string, parameters: Configuration, options?: ConfigurationsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<ConfigurationsCreateOrUpdateResponse>, ConfigurationsCreateOrUpdateResponse>>;
    /**
     * Updates a configuration of a server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param parameters The required parameters for updating a server configuration.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, serverName: string, configurationName: string, parameters: Configuration, options?: ConfigurationsCreateOrUpdateOptionalParams): Promise<ConfigurationsCreateOrUpdateResponse>;
    /**
     * Gets information about a configuration of server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param configurationName The name of the server configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, serverName: string, configurationName: string, options?: ConfigurationsGetOptionalParams): Promise<ConfigurationsGetResponse>;
    /**
     * List all the configurations in a given server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serverName The name of the server.
     * @param options The options parameters.
     */
    private _listByServer;
}
//# sourceMappingURL=configurations.d.ts.map