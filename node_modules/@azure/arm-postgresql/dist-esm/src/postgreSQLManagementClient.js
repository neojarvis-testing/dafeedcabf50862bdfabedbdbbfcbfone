/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import { ServersImpl, ReplicasImpl, FirewallRulesImpl, VirtualNetworkRulesImpl, DatabasesImpl, ConfigurationsImpl, ServerParametersImpl, LogFilesImpl, ServerAdministratorsImpl, RecoverableServersImpl, ServerBasedPerformanceTierImpl, LocationBasedPerformanceTierImpl, CheckNameAvailabilityImpl, OperationsImpl, ServerSecurityAlertPoliciesImpl, PrivateEndpointConnectionsImpl, PrivateLinkResourcesImpl, ServerKeysImpl } from "./operations";
export class PostgreSQLManagementClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the PostgreSQLManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-postgresql/6.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.servers = new ServersImpl(this);
        this.replicas = new ReplicasImpl(this);
        this.firewallRules = new FirewallRulesImpl(this);
        this.virtualNetworkRules = new VirtualNetworkRulesImpl(this);
        this.databases = new DatabasesImpl(this);
        this.configurations = new ConfigurationsImpl(this);
        this.serverParameters = new ServerParametersImpl(this);
        this.logFiles = new LogFilesImpl(this);
        this.serverAdministrators = new ServerAdministratorsImpl(this);
        this.recoverableServers = new RecoverableServersImpl(this);
        this.serverBasedPerformanceTier = new ServerBasedPerformanceTierImpl(this);
        this.locationBasedPerformanceTier = new LocationBasedPerformanceTierImpl(this);
        this.checkNameAvailability = new CheckNameAvailabilityImpl(this);
        this.operations = new OperationsImpl(this);
        this.serverSecurityAlertPolicies = new ServerSecurityAlertPoliciesImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.serverKeys = new ServerKeysImpl(this);
    }
}
//# sourceMappingURL=postgreSQLManagementClient.js.map