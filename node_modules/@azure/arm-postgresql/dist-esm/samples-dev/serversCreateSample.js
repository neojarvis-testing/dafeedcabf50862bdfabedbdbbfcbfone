/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { PostgreSQLManagementClient } from "@azure/arm-postgresql";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Creates a new server, or will overwrite an existing server.
 *
 * @summary Creates a new server, or will overwrite an existing server.
 * x-ms-original-file: specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreatePointInTimeRestore.json
 */
function createADatabaseAsAPointInTimeRestore() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
        const resourceGroupName = "TargetResourceGroup";
        const serverName = "targetserver";
        const parameters = {
            location: "brazilsouth",
            properties: {
                createMode: "PointInTimeRestore",
                restorePointInTime: new Date("2017-12-14T00:00:37.467Z"),
                sourceServerId: "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/SourceResourceGroup/providers/Microsoft.DBforPostgreSQL/servers/sourceserver"
            },
            sku: { name: "B_Gen5_2", capacity: 2, family: "Gen5", tier: "Basic" },
            tags: { elasticServer: "1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new PostgreSQLManagementClient(credential, subscriptionId);
        const result = yield client.servers.beginCreateAndWait(resourceGroupName, serverName, parameters);
        console.log(result);
    });
}
createADatabaseAsAPointInTimeRestore().catch(console.error);
/**
 * This sample demonstrates how to Creates a new server, or will overwrite an existing server.
 *
 * @summary Creates a new server, or will overwrite an existing server.
 * x-ms-original-file: specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreate.json
 */
function createANewServer() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
        const resourceGroupName = "TestGroup";
        const serverName = "pgtestsvc4";
        const parameters = {
            location: "westus",
            properties: {
                administratorLogin: "cloudsa",
                administratorLoginPassword: "<administratorLoginPassword>",
                createMode: "Default",
                minimalTlsVersion: "TLS1_2",
                sslEnforcement: "Enabled",
                storageProfile: {
                    backupRetentionDays: 7,
                    geoRedundantBackup: "Disabled",
                    storageMB: 128000
                }
            },
            sku: { name: "B_Gen5_2", capacity: 2, family: "Gen5", tier: "Basic" },
            tags: { elasticServer: "1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new PostgreSQLManagementClient(credential, subscriptionId);
        const result = yield client.servers.beginCreateAndWait(resourceGroupName, serverName, parameters);
        console.log(result);
    });
}
createANewServer().catch(console.error);
/**
 * This sample demonstrates how to Creates a new server, or will overwrite an existing server.
 *
 * @summary Creates a new server, or will overwrite an existing server.
 * x-ms-original-file: specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreateReplicaMode.json
 */
function createAReplicaServer() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
        const resourceGroupName = "TestGroup_WestCentralUS";
        const serverName = "testserver-replica1";
        const parameters = {
            location: "westcentralus",
            properties: {
                createMode: "Replica",
                sourceServerId: "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/TestGroup_WestCentralUS/providers/Microsoft.DBforPostgreSQL/servers/testserver-master"
            },
            sku: {
                name: "GP_Gen5_2",
                capacity: 2,
                family: "Gen5",
                tier: "GeneralPurpose"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new PostgreSQLManagementClient(credential, subscriptionId);
        const result = yield client.servers.beginCreateAndWait(resourceGroupName, serverName, parameters);
        console.log(result);
    });
}
createAReplicaServer().catch(console.error);
/**
 * This sample demonstrates how to Creates a new server, or will overwrite an existing server.
 *
 * @summary Creates a new server, or will overwrite an existing server.
 * x-ms-original-file: specification/postgresql/resource-manager/Microsoft.DBforPostgreSQL/stable/2017-12-01/examples/ServerCreateGeoRestoreMode.json
 */
function createAServerAsAGeoRestore() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "ffffffff-ffff-ffff-ffff-ffffffffffff";
        const resourceGroupName = "TargetResourceGroup";
        const serverName = "targetserver";
        const parameters = {
            location: "westus",
            properties: {
                createMode: "GeoRestore",
                sourceServerId: "/subscriptions/ffffffff-ffff-ffff-ffff-ffffffffffff/resourceGroups/SourceResourceGroup/providers/Microsoft.DBforPostgreSQL/servers/sourceserver"
            },
            sku: {
                name: "GP_Gen5_2",
                capacity: 2,
                family: "Gen5",
                tier: "GeneralPurpose"
            },
            tags: { elasticServer: "1" }
        };
        const credential = new DefaultAzureCredential();
        const client = new PostgreSQLManagementClient(credential, subscriptionId);
        const result = yield client.servers.beginCreateAndWait(resourceGroupName, serverName, parameters);
        console.log(result);
    });
}
createAServerAsAGeoRestore().catch(console.error);
//# sourceMappingURL=serversCreateSample.js.map