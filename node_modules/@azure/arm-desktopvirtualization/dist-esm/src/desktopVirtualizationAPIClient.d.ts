import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { Operations, Workspaces, PrivateEndpointConnections, PrivateLinkResources, ScalingPlans, ScalingPlanPooledSchedules, ScalingPlanPersonalSchedules, ApplicationGroups, StartMenuItems, Applications, Desktops, HostPools, UserSessions, SessionHosts, MsixPackages, MsixImages } from "./operationsInterfaces";
import { DesktopVirtualizationAPIClientOptionalParams } from "./models";
export declare class DesktopVirtualizationAPIClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the DesktopVirtualizationAPIClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DesktopVirtualizationAPIClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    workspaces: Workspaces;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    scalingPlans: ScalingPlans;
    scalingPlanPooledSchedules: ScalingPlanPooledSchedules;
    scalingPlanPersonalSchedules: ScalingPlanPersonalSchedules;
    applicationGroups: ApplicationGroups;
    startMenuItems: StartMenuItems;
    applications: Applications;
    desktops: Desktops;
    hostPools: HostPools;
    userSessions: UserSessions;
    sessionHosts: SessionHosts;
    msixPackages: MsixPackages;
    msixImages: MsixImages;
}
//# sourceMappingURL=desktopVirtualizationAPIClient.d.ts.map