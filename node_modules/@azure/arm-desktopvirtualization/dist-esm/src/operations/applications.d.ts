import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Applications } from "../operationsInterfaces";
import { DesktopVirtualizationAPIClient } from "../desktopVirtualizationAPIClient";
import { Application, ApplicationsListOptionalParams, ApplicationsGetOptionalParams, ApplicationsGetResponse, ApplicationsCreateOrUpdateOptionalParams, ApplicationsCreateOrUpdateResponse, ApplicationsDeleteOptionalParams, ApplicationsUpdateOptionalParams, ApplicationsUpdateResponse } from "../models";
/** Class containing Applications operations. */
export declare class ApplicationsImpl implements Applications {
    private readonly client;
    /**
     * Initialize a new instance of the class Applications class.
     * @param client Reference to the service client
     */
    constructor(client: DesktopVirtualizationAPIClient);
    /**
     * List applications.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    list(resourceGroupName: string, applicationGroupName: string, options?: ApplicationsListOptionalParams): PagedAsyncIterableIterator<Application>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param options The options parameters.
     */
    get(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: ApplicationsGetOptionalParams): Promise<ApplicationsGetResponse>;
    /**
     * Create or update an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param application Object containing Application definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationName: string, application: Application, options?: ApplicationsCreateOrUpdateOptionalParams): Promise<ApplicationsCreateOrUpdateResponse>;
    /**
     * Remove an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: ApplicationsDeleteOptionalParams): Promise<void>;
    /**
     * Update an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param options The options parameters.
     */
    update(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: ApplicationsUpdateOptionalParams): Promise<ApplicationsUpdateResponse>;
    /**
     * List applications.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=applications.d.ts.map