import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { ApplicationGroups } from "../operationsInterfaces";
import { DesktopVirtualizationAPIClient } from "../desktopVirtualizationAPIClient";
import { ApplicationGroup, ApplicationGroupsListByResourceGroupOptionalParams, ApplicationGroupsListBySubscriptionOptionalParams, ApplicationGroupsGetOptionalParams, ApplicationGroupsGetResponse, ApplicationGroupsCreateOrUpdateOptionalParams, ApplicationGroupsCreateOrUpdateResponse, ApplicationGroupsDeleteOptionalParams, ApplicationGroupsUpdateOptionalParams, ApplicationGroupsUpdateResponse } from "../models";
/** Class containing ApplicationGroups operations. */
export declare class ApplicationGroupsImpl implements ApplicationGroups {
    private readonly client;
    /**
     * Initialize a new instance of the class ApplicationGroups class.
     * @param client Reference to the service client
     */
    constructor(client: DesktopVirtualizationAPIClient);
    /**
     * List applicationGroups.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ApplicationGroupsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ApplicationGroup>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * List applicationGroups in subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ApplicationGroupsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ApplicationGroup>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Get an application group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    get(resourceGroupName: string, applicationGroupName: string, options?: ApplicationGroupsGetOptionalParams): Promise<ApplicationGroupsGetResponse>;
    /**
     * Create or update an applicationGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationGroup: ApplicationGroup, options?: ApplicationGroupsCreateOrUpdateOptionalParams): Promise<ApplicationGroupsCreateOrUpdateResponse>;
    /**
     * Remove an applicationGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, applicationGroupName: string, options?: ApplicationGroupsDeleteOptionalParams): Promise<void>;
    /**
     * Update an applicationGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    update(resourceGroupName: string, applicationGroupName: string, options?: ApplicationGroupsUpdateOptionalParams): Promise<ApplicationGroupsUpdateResponse>;
    /**
     * List applicationGroups.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * List applicationGroups in subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    private _listByResourceGroupNext;
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    private _listBySubscriptionNext;
}
//# sourceMappingURL=applicationGroups.d.ts.map