import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { UserSessions } from "../operationsInterfaces";
import { DesktopVirtualizationAPIClient } from "../desktopVirtualizationAPIClient";
import { UserSession, UserSessionsListByHostPoolOptionalParams, UserSessionsListOptionalParams, UserSessionsGetOptionalParams, UserSessionsGetResponse, UserSessionsDeleteOptionalParams, UserSessionsDisconnectOptionalParams, UserSessionsSendMessageOptionalParams } from "../models";
/** Class containing UserSessions operations. */
export declare class UserSessionsImpl implements UserSessions {
    private readonly client;
    /**
     * Initialize a new instance of the class UserSessions class.
     * @param client Reference to the service client
     */
    constructor(client: DesktopVirtualizationAPIClient);
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    listByHostPool(resourceGroupName: string, hostPoolName: string, options?: UserSessionsListByHostPoolOptionalParams): PagedAsyncIterableIterator<UserSession>;
    private listByHostPoolPagingPage;
    private listByHostPoolPagingAll;
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    list(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: UserSessionsListOptionalParams): PagedAsyncIterableIterator<UserSession>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    private _listByHostPool;
    /**
     * Get a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hostPoolName: string, sessionHostName: string, userSessionId: string, options?: UserSessionsGetOptionalParams): Promise<UserSessionsGetResponse>;
    /**
     * Remove a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hostPoolName: string, sessionHostName: string, userSessionId: string, options?: UserSessionsDeleteOptionalParams): Promise<void>;
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    private _list;
    /**
     * Disconnect a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    disconnect(resourceGroupName: string, hostPoolName: string, sessionHostName: string, userSessionId: string, options?: UserSessionsDisconnectOptionalParams): Promise<void>;
    /**
     * Send a message to a user.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    sendMessage(resourceGroupName: string, hostPoolName: string, sessionHostName: string, userSessionId: string, options?: UserSessionsSendMessageOptionalParams): Promise<void>;
    /**
     * ListByHostPoolNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param nextLink The nextLink from the previous successful call to the ListByHostPool method.
     * @param options The options parameters.
     */
    private _listByHostPoolNext;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=userSessions.d.ts.map