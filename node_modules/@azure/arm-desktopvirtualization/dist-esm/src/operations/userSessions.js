/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing UserSessions operations. */
export class UserSessionsImpl {
    /**
     * Initialize a new instance of the class UserSessions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    listByHostPool(resourceGroupName, hostPoolName, options) {
        const iter = this.listByHostPoolPagingAll(resourceGroupName, hostPoolName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByHostPoolPagingPage(resourceGroupName, hostPoolName, options, settings);
            }
        };
    }
    listByHostPoolPagingPage(resourceGroupName, hostPoolName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByHostPoolPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByHostPool(resourceGroupName, hostPoolName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByHostPoolNext(resourceGroupName, hostPoolName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByHostPoolPagingAll(resourceGroupName, hostPoolName, options) {
        return __asyncGenerator(this, arguments, function* listByHostPoolPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByHostPoolPagingPage(resourceGroupName, hostPoolName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    list(resourceGroupName, hostPoolName, sessionHostName, options) {
        const iter = this.listPagingAll(resourceGroupName, hostPoolName, sessionHostName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, hostPoolName, sessionHostName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, hostPoolName, sessionHostName, options, settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._list(resourceGroupName, hostPoolName, sessionHostName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listNext(resourceGroupName, hostPoolName, sessionHostName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, hostPoolName, sessionHostName, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(resourceGroupName, hostPoolName, sessionHostName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    _listByHostPool(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, listByHostPoolOperationSpec);
    }
    /**
     * Get a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    get(resourceGroupName, hostPoolName, sessionHostName, userSessionId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            sessionHostName,
            userSessionId,
            options
        }, getOperationSpec);
    }
    /**
     * Remove a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    delete(resourceGroupName, hostPoolName, sessionHostName, userSessionId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            sessionHostName,
            userSessionId,
            options
        }, deleteOperationSpec);
    }
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    _list(resourceGroupName, hostPoolName, sessionHostName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, sessionHostName, options }, listOperationSpec);
    }
    /**
     * Disconnect a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    disconnect(resourceGroupName, hostPoolName, sessionHostName, userSessionId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            sessionHostName,
            userSessionId,
            options
        }, disconnectOperationSpec);
    }
    /**
     * Send a message to a user.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    sendMessage(resourceGroupName, hostPoolName, sessionHostName, userSessionId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            sessionHostName,
            userSessionId,
            options
        }, sendMessageOperationSpec);
    }
    /**
     * ListByHostPoolNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param nextLink The nextLink from the previous successful call to the ListByHostPool method.
     * @param options The options parameters.
     */
    _listByHostPoolNext(resourceGroupName, hostPoolName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, nextLink, options }, listByHostPoolNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, hostPoolName, sessionHostName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, sessionHostName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByHostPoolOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/userSessions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserSessionList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.pageSize,
        Parameters.isDescending,
        Parameters.initialSkip,
        Parameters.filter
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hostPoolName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserSession
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hostPoolName,
        Parameters.sessionHostName,
        Parameters.userSessionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.force],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hostPoolName,
        Parameters.sessionHostName,
        Parameters.userSessionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserSessionList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.pageSize,
        Parameters.isDescending,
        Parameters.initialSkip
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hostPoolName,
        Parameters.sessionHostName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const disconnectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}/disconnect",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hostPoolName,
        Parameters.sessionHostName,
        Parameters.userSessionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const sendMessageOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}/sendMessage",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.sendMessage,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hostPoolName,
        Parameters.sessionHostName,
        Parameters.userSessionId
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listByHostPoolNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserSessionList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hostPoolName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UserSessionList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.nextLink,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.hostPoolName,
        Parameters.sessionHostName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=userSessions.js.map