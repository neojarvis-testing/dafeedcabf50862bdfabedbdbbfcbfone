import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SessionHosts } from "../operationsInterfaces";
import { DesktopVirtualizationAPIClient } from "../desktopVirtualizationAPIClient";
import { SessionHost, SessionHostsListOptionalParams, SessionHostsGetOptionalParams, SessionHostsGetResponse, SessionHostsDeleteOptionalParams, SessionHostsUpdateOptionalParams, SessionHostsUpdateResponse } from "../models";
/** Class containing SessionHosts operations. */
export declare class SessionHostsImpl implements SessionHosts {
    private readonly client;
    /**
     * Initialize a new instance of the class SessionHosts class.
     * @param client Reference to the service client
     */
    constructor(client: DesktopVirtualizationAPIClient);
    /**
     * List sessionHosts.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    list(resourceGroupName: string, hostPoolName: string, options?: SessionHostsListOptionalParams): PagedAsyncIterableIterator<SessionHost>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get a session host.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: SessionHostsGetOptionalParams): Promise<SessionHostsGetResponse>;
    /**
     * Remove a SessionHost.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: SessionHostsDeleteOptionalParams): Promise<void>;
    /**
     * Update a session host.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    update(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: SessionHostsUpdateOptionalParams): Promise<SessionHostsUpdateResponse>;
    /**
     * List sessionHosts.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=sessionHosts.d.ts.map