'use strict';

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespaceDefault(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link CreatedByType} that the service accepts. */
exports.KnownCreatedByType = void 0;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(exports.KnownCreatedByType || (exports.KnownCreatedByType = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
exports.KnownPublicNetworkAccess = void 0;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(exports.KnownPublicNetworkAccess || (exports.KnownPublicNetworkAccess = {}));
/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
exports.KnownPrivateEndpointServiceConnectionStatus = void 0;
(function (KnownPrivateEndpointServiceConnectionStatus) {
    /** Pending */
    KnownPrivateEndpointServiceConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownPrivateEndpointServiceConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownPrivateEndpointServiceConnectionStatus["Rejected"] = "Rejected";
})(exports.KnownPrivateEndpointServiceConnectionStatus || (exports.KnownPrivateEndpointServiceConnectionStatus = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
exports.KnownPrivateEndpointConnectionProvisioningState = void 0;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    /** Succeeded */
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
    /** Creating */
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
})(exports.KnownPrivateEndpointConnectionProvisioningState || (exports.KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link ScalingHostPoolType} that the service accepts. */
exports.KnownScalingHostPoolType = void 0;
(function (KnownScalingHostPoolType) {
    /** Users get a new (random) SessionHost every time it connects to the HostPool. */
    KnownScalingHostPoolType["Pooled"] = "Pooled";
})(exports.KnownScalingHostPoolType || (exports.KnownScalingHostPoolType = {}));
/** Known values of {@link ScalingScheduleDaysOfWeekItem} that the service accepts. */
exports.KnownScalingScheduleDaysOfWeekItem = void 0;
(function (KnownScalingScheduleDaysOfWeekItem) {
    /** Sunday */
    KnownScalingScheduleDaysOfWeekItem["Sunday"] = "Sunday";
    /** Monday */
    KnownScalingScheduleDaysOfWeekItem["Monday"] = "Monday";
    /** Tuesday */
    KnownScalingScheduleDaysOfWeekItem["Tuesday"] = "Tuesday";
    /** Wednesday */
    KnownScalingScheduleDaysOfWeekItem["Wednesday"] = "Wednesday";
    /** Thursday */
    KnownScalingScheduleDaysOfWeekItem["Thursday"] = "Thursday";
    /** Friday */
    KnownScalingScheduleDaysOfWeekItem["Friday"] = "Friday";
    /** Saturday */
    KnownScalingScheduleDaysOfWeekItem["Saturday"] = "Saturday";
})(exports.KnownScalingScheduleDaysOfWeekItem || (exports.KnownScalingScheduleDaysOfWeekItem = {}));
/** Known values of {@link SessionHostLoadBalancingAlgorithm} that the service accepts. */
exports.KnownSessionHostLoadBalancingAlgorithm = void 0;
(function (KnownSessionHostLoadBalancingAlgorithm) {
    /** BreadthFirst */
    KnownSessionHostLoadBalancingAlgorithm["BreadthFirst"] = "BreadthFirst";
    /** DepthFirst */
    KnownSessionHostLoadBalancingAlgorithm["DepthFirst"] = "DepthFirst";
})(exports.KnownSessionHostLoadBalancingAlgorithm || (exports.KnownSessionHostLoadBalancingAlgorithm = {}));
/** Known values of {@link StopHostsWhen} that the service accepts. */
exports.KnownStopHostsWhen = void 0;
(function (KnownStopHostsWhen) {
    /** ZeroSessions */
    KnownStopHostsWhen["ZeroSessions"] = "ZeroSessions";
    /** ZeroActiveSessions */
    KnownStopHostsWhen["ZeroActiveSessions"] = "ZeroActiveSessions";
})(exports.KnownStopHostsWhen || (exports.KnownStopHostsWhen = {}));
/** Known values of {@link StartupBehavior} that the service accepts. */
exports.KnownStartupBehavior = void 0;
(function (KnownStartupBehavior) {
    /** Session hosts will not be started by the service. This setting depends on Start VM on Connect to be enabled to start the session hosts. */
    KnownStartupBehavior["None"] = "None";
    /** Session hosts with an assigned user will be started during Ramp Up */
    KnownStartupBehavior["WithAssignedUser"] = "WithAssignedUser";
    /** All personal session hosts in the hostpool will be started during ramp up. */
    KnownStartupBehavior["All"] = "All";
})(exports.KnownStartupBehavior || (exports.KnownStartupBehavior = {}));
/** Known values of {@link SetStartVMOnConnect} that the service accepts. */
exports.KnownSetStartVMOnConnect = void 0;
(function (KnownSetStartVMOnConnect) {
    /** Enable */
    KnownSetStartVMOnConnect["Enable"] = "Enable";
    /** Disable */
    KnownSetStartVMOnConnect["Disable"] = "Disable";
})(exports.KnownSetStartVMOnConnect || (exports.KnownSetStartVMOnConnect = {}));
/** Known values of {@link SessionHandlingOperation} that the service accepts. */
exports.KnownSessionHandlingOperation = void 0;
(function (KnownSessionHandlingOperation) {
    /** None */
    KnownSessionHandlingOperation["None"] = "None";
    /** Deallocate */
    KnownSessionHandlingOperation["Deallocate"] = "Deallocate";
    /** Hibernate */
    KnownSessionHandlingOperation["Hibernate"] = "Hibernate";
})(exports.KnownSessionHandlingOperation || (exports.KnownSessionHandlingOperation = {}));
/** Known values of {@link ApplicationGroupType} that the service accepts. */
exports.KnownApplicationGroupType = void 0;
(function (KnownApplicationGroupType) {
    /** RemoteApp */
    KnownApplicationGroupType["RemoteApp"] = "RemoteApp";
    /** Desktop */
    KnownApplicationGroupType["Desktop"] = "Desktop";
})(exports.KnownApplicationGroupType || (exports.KnownApplicationGroupType = {}));
/** Known values of {@link RemoteApplicationType} that the service accepts. */
exports.KnownRemoteApplicationType = void 0;
(function (KnownRemoteApplicationType) {
    /** InBuilt */
    KnownRemoteApplicationType["InBuilt"] = "InBuilt";
    /** MsixApplication */
    KnownRemoteApplicationType["MsixApplication"] = "MsixApplication";
})(exports.KnownRemoteApplicationType || (exports.KnownRemoteApplicationType = {}));
/** Known values of {@link CommandLineSetting} that the service accepts. */
exports.KnownCommandLineSetting = void 0;
(function (KnownCommandLineSetting) {
    /** DoNotAllow */
    KnownCommandLineSetting["DoNotAllow"] = "DoNotAllow";
    /** Allow */
    KnownCommandLineSetting["Allow"] = "Allow";
    /** Require */
    KnownCommandLineSetting["Require"] = "Require";
})(exports.KnownCommandLineSetting || (exports.KnownCommandLineSetting = {}));
/** Known values of {@link HostPoolType} that the service accepts. */
exports.KnownHostPoolType = void 0;
(function (KnownHostPoolType) {
    /** Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost. */
    KnownHostPoolType["Personal"] = "Personal";
    /** Users get a new (random) SessionHost every time it connects to the HostPool. */
    KnownHostPoolType["Pooled"] = "Pooled";
    /** Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct. */
    KnownHostPoolType["BYODesktop"] = "BYODesktop";
})(exports.KnownHostPoolType || (exports.KnownHostPoolType = {}));
/** Known values of {@link PersonalDesktopAssignmentType} that the service accepts. */
exports.KnownPersonalDesktopAssignmentType = void 0;
(function (KnownPersonalDesktopAssignmentType) {
    /** Automatic */
    KnownPersonalDesktopAssignmentType["Automatic"] = "Automatic";
    /** Direct */
    KnownPersonalDesktopAssignmentType["Direct"] = "Direct";
})(exports.KnownPersonalDesktopAssignmentType || (exports.KnownPersonalDesktopAssignmentType = {}));
/** Known values of {@link LoadBalancerType} that the service accepts. */
exports.KnownLoadBalancerType = void 0;
(function (KnownLoadBalancerType) {
    /** BreadthFirst */
    KnownLoadBalancerType["BreadthFirst"] = "BreadthFirst";
    /** DepthFirst */
    KnownLoadBalancerType["DepthFirst"] = "DepthFirst";
    /** Persistent */
    KnownLoadBalancerType["Persistent"] = "Persistent";
})(exports.KnownLoadBalancerType || (exports.KnownLoadBalancerType = {}));
/** Known values of {@link RegistrationTokenOperation} that the service accepts. */
exports.KnownRegistrationTokenOperation = void 0;
(function (KnownRegistrationTokenOperation) {
    /** Delete */
    KnownRegistrationTokenOperation["Delete"] = "Delete";
    /** None */
    KnownRegistrationTokenOperation["None"] = "None";
    /** Update */
    KnownRegistrationTokenOperation["Update"] = "Update";
})(exports.KnownRegistrationTokenOperation || (exports.KnownRegistrationTokenOperation = {}));
/** Known values of {@link SSOSecretType} that the service accepts. */
exports.KnownSSOSecretType = void 0;
(function (KnownSSOSecretType) {
    /** SharedKey */
    KnownSSOSecretType["SharedKey"] = "SharedKey";
    /** Certificate */
    KnownSSOSecretType["Certificate"] = "Certificate";
    /** SharedKeyInKeyVault */
    KnownSSOSecretType["SharedKeyInKeyVault"] = "SharedKeyInKeyVault";
    /** CertificateInKeyVault */
    KnownSSOSecretType["CertificateInKeyVault"] = "CertificateInKeyVault";
})(exports.KnownSSOSecretType || (exports.KnownSSOSecretType = {}));
/** Known values of {@link PreferredAppGroupType} that the service accepts. */
exports.KnownPreferredAppGroupType = void 0;
(function (KnownPreferredAppGroupType) {
    /** None */
    KnownPreferredAppGroupType["None"] = "None";
    /** Desktop */
    KnownPreferredAppGroupType["Desktop"] = "Desktop";
    /** RailApplications */
    KnownPreferredAppGroupType["RailApplications"] = "RailApplications";
})(exports.KnownPreferredAppGroupType || (exports.KnownPreferredAppGroupType = {}));
/** Known values of {@link HostpoolPublicNetworkAccess} that the service accepts. */
exports.KnownHostpoolPublicNetworkAccess = void 0;
(function (KnownHostpoolPublicNetworkAccess) {
    /** Enabled */
    KnownHostpoolPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownHostpoolPublicNetworkAccess["Disabled"] = "Disabled";
    /** EnabledForSessionHostsOnly */
    KnownHostpoolPublicNetworkAccess["EnabledForSessionHostsOnly"] = "EnabledForSessionHostsOnly";
    /** EnabledForClientsOnly */
    KnownHostpoolPublicNetworkAccess["EnabledForClientsOnly"] = "EnabledForClientsOnly";
})(exports.KnownHostpoolPublicNetworkAccess || (exports.KnownHostpoolPublicNetworkAccess = {}));
/** Known values of {@link SessionHostComponentUpdateType} that the service accepts. */
exports.KnownSessionHostComponentUpdateType = void 0;
(function (KnownSessionHostComponentUpdateType) {
    /** Agent and other agent side components are delivery schedule is controlled by WVD Infra. */
    KnownSessionHostComponentUpdateType["Default"] = "Default";
    /** TenantAdmin have opted in for Scheduled Component Update feature. */
    KnownSessionHostComponentUpdateType["Scheduled"] = "Scheduled";
})(exports.KnownSessionHostComponentUpdateType || (exports.KnownSessionHostComponentUpdateType = {}));
/** Known values of {@link ApplicationType} that the service accepts. */
exports.KnownApplicationType = void 0;
(function (KnownApplicationType) {
    /** RemoteApp */
    KnownApplicationType["RemoteApp"] = "RemoteApp";
    /** Desktop */
    KnownApplicationType["Desktop"] = "Desktop";
})(exports.KnownApplicationType || (exports.KnownApplicationType = {}));
/** Known values of {@link SessionState} that the service accepts. */
exports.KnownSessionState = void 0;
(function (KnownSessionState) {
    /** Unknown */
    KnownSessionState["Unknown"] = "Unknown";
    /** Active */
    KnownSessionState["Active"] = "Active";
    /** Disconnected */
    KnownSessionState["Disconnected"] = "Disconnected";
    /** Pending */
    KnownSessionState["Pending"] = "Pending";
    /** LogOff */
    KnownSessionState["LogOff"] = "LogOff";
    /** UserProfileDiskMounted */
    KnownSessionState["UserProfileDiskMounted"] = "UserProfileDiskMounted";
})(exports.KnownSessionState || (exports.KnownSessionState = {}));
/** Known values of {@link Status} that the service accepts. */
exports.KnownStatus = void 0;
(function (KnownStatus) {
    /** Session Host has passed all the health checks and is available to handle connections. */
    KnownStatus["Available"] = "Available";
    /** Session Host is either turned off or has failed critical health checks which is causing service not to be able to route connections to this session host. Note this replaces previous 'NoHeartBeat' status. */
    KnownStatus["Unavailable"] = "Unavailable";
    /** Session Host is shutdown - RD Agent reported session host to be stopped or deallocated. */
    KnownStatus["Shutdown"] = "Shutdown";
    /** The Session Host is unavailable because it is currently disconnected. */
    KnownStatus["Disconnected"] = "Disconnected";
    /** Session Host is unavailable because currently an upgrade of RDAgent\/side-by-side stack is in progress. Note: this state will be removed once the upgrade completes and the host is able to accept connections. */
    KnownStatus["Upgrading"] = "Upgrading";
    /** Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.) failed. */
    KnownStatus["UpgradeFailed"] = "UpgradeFailed";
    /** The Session Host is not heart beating. */
    KnownStatus["NoHeartbeat"] = "NoHeartbeat";
    /** SessionHost is not joined to domain. */
    KnownStatus["NotJoinedToDomain"] = "NotJoinedToDomain";
    /** SessionHost's domain trust relationship lost */
    KnownStatus["DomainTrustRelationshipLost"] = "DomainTrustRelationshipLost";
    /** SxS stack installed on the SessionHost is not ready to receive connections. */
    KnownStatus["SxSStackListenerNotReady"] = "SxSStackListenerNotReady";
    /** FSLogix is in an unhealthy state on the session host. */
    KnownStatus["FSLogixNotHealthy"] = "FSLogixNotHealthy";
    /** New status to inform admins that the health on their endpoint needs to be fixed. The connections might not fail, as these issues are not fatal. */
    KnownStatus["NeedsAssistance"] = "NeedsAssistance";
})(exports.KnownStatus || (exports.KnownStatus = {}));
/** Known values of {@link UpdateState} that the service accepts. */
exports.KnownUpdateState = void 0;
(function (KnownUpdateState) {
    /** Initial */
    KnownUpdateState["Initial"] = "Initial";
    /** Pending */
    KnownUpdateState["Pending"] = "Pending";
    /** Started */
    KnownUpdateState["Started"] = "Started";
    /** Succeeded */
    KnownUpdateState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownUpdateState["Failed"] = "Failed";
})(exports.KnownUpdateState || (exports.KnownUpdateState = {}));
/** Known values of {@link HealthCheckName} that the service accepts. */
exports.KnownHealthCheckName = void 0;
(function (KnownHealthCheckName) {
    /** Verifies the SessionHost is joined to a domain. If this check fails is classified as fatal as no connection can succeed if the SessionHost is not joined to the domain. (Currently Enabled) */
    KnownHealthCheckName["DomainJoinedCheck"] = "DomainJoinedCheck";
    /** Verifies the SessionHost is not experiencing domain trust issues that will prevent authentication on SessionHost at connection time when session is created. If this check fails is classified as fatal as no connection can succeed if we cannot reach the domain for authentication on the SessionHost. (Currently Enabled) */
    KnownHealthCheckName["DomainTrustCheck"] = "DomainTrustCheck";
    /** Verifies the FSLogix service is up and running to make sure users' profiles are loaded in the session. If this check fails is classified as fatal as even if the connection can succeed, user experience is bad as the user profile cannot be loaded and user will get a temporary profile in the session. (Currently Disabled) */
    KnownHealthCheckName["FSLogixHealthCheck"] = "FSLogixHealthCheck";
    /** Verifies that the SxS stack is up and running so connections can succeed. If this check fails is classified as fatal as no connection can succeed if the SxS stack is not ready. (Currently Enabled) */
    KnownHealthCheckName["SxSStackListenerCheck"] = "SxSStackListenerCheck";
    /** Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost. These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is unable to store warm path data (logs, operations ...). (Currently Disabled) */
    KnownHealthCheckName["UrlsAccessibleCheck"] = "UrlsAccessibleCheck";
    /** Verifies that the required Geneva agent is running. If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is missing or running (possibly) older version. (Currently Enabled) */
    KnownHealthCheckName["MonitoringAgentCheck"] = "MonitoringAgentCheck";
    /** Verifies the domain the SessionHost is joined to is still reachable. If this check fails is classified as fatal as no connection can succeed if the domain the SessionHost is joined is not reachable at the time of connection. (Currently Disabled) */
    KnownHealthCheckName["DomainReachable"] = "DomainReachable";
    /** Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector component is used to optimize video and audio performance in Microsoft Teams. This checks whether the component is still running, and whether there is a higher version available. If this check fails, it is non fatal and the machine still can service connections, main issue may be the WebRTCRedirector component has to be restarted or updated. (Currently Disabled) */
    KnownHealthCheckName["WebRTCRedirectorCheck"] = "WebRTCRedirectorCheck";
    /** Verifies the value of SecurityLayer registration key. If the value is 0 (SecurityLayer.RDP) this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the value is 1 (SecurityLayer.Negotiate) this check fails with Error code = NativeMethodErrorCode.ERROR_SUCCESS and is non fatal. (Currently Disabled) */
    KnownHealthCheckName["SupportedEncryptionCheck"] = "SupportedEncryptionCheck";
    /** Verifies the metadata service is accessible and return compute properties. (Currently Enabled) */
    KnownHealthCheckName["MetaDataServiceCheck"] = "MetaDataServiceCheck";
    /** Verifies that the AppAttachService is healthy (there were no issues during package staging). The AppAttachService is used to enable the staging\/registration (and eventual deregistration\/destaging) of MSIX apps that have been set up by the tenant admin. This checks whether the component had any failures during package staging. Failures in staging will prevent some MSIX apps from working properly for the end user. If this check fails, it is non fatal and the machine still can service connections, main issue may be certain apps will not work for end-users. (Currently Enabled) */
    KnownHealthCheckName["AppAttachHealthCheck"] = "AppAttachHealthCheck";
})(exports.KnownHealthCheckName || (exports.KnownHealthCheckName = {}));
/** Known values of {@link HealthCheckResult} that the service accepts. */
exports.KnownHealthCheckResult = void 0;
(function (KnownHealthCheckResult) {
    /** Health check result is not currently known. */
    KnownHealthCheckResult["Unknown"] = "Unknown";
    /** Health check passed. */
    KnownHealthCheckResult["HealthCheckSucceeded"] = "HealthCheckSucceeded";
    /** Health check failed. */
    KnownHealthCheckResult["HealthCheckFailed"] = "HealthCheckFailed";
    /** We received a Shutdown notification. */
    KnownHealthCheckResult["SessionHostShutdown"] = "SessionHostShutdown";
})(exports.KnownHealthCheckResult || (exports.KnownHealthCheckResult = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const ResourceProviderOperationList = {
    type: {
        name: "Composite",
        className: "ResourceProviderOperationList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceProviderOperation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceProviderOperation = {
    type: {
        name: "Composite",
        className: "ResourceProviderOperation",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "ResourceProviderOperationDisplay"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "OperationProperties"
                }
            }
        }
    }
};
const ResourceProviderOperationDisplay = {
    type: {
        name: "Composite",
        className: "ResourceProviderOperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const OperationProperties = {
    type: {
        name: "Composite",
        className: "OperationProperties",
        modelProperties: {
            serviceSpecification: {
                serializedName: "serviceSpecification",
                type: {
                    name: "Composite",
                    className: "ServiceSpecification"
                }
            }
        }
    }
};
const ServiceSpecification = {
    type: {
        name: "Composite",
        className: "ServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogSpecification"
                        }
                    }
                }
            }
        }
    }
};
const LogSpecification = {
    type: {
        name: "Composite",
        className: "LogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorProperties"
                }
            }
        }
    }
};
const CloudErrorProperties = {
    type: {
        name: "Composite",
        className: "CloudErrorProperties",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceModelWithAllowedPropertySet = {
    type: {
        name: "Composite",
        className: "ResourceModelWithAllowedPropertySet",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            managedBy: {
                serializedName: "managedBy",
                type: {
                    name: "String"
                }
            },
            kind: {
                constraints: {
                    Pattern: new RegExp("^[-\\w\\._,\\(\\)]+$")
                },
                serializedName: "kind",
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ResourceModelWithAllowedPropertySetIdentity"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "ResourceModelWithAllowedPropertySetSku"
                }
            },
            plan: {
                serializedName: "plan",
                type: {
                    name: "Composite",
                    className: "ResourceModelWithAllowedPropertySetPlan"
                }
            }
        }
    }
};
const Identity = {
    type: {
        name: "Composite",
        className: "Identity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "SystemAssigned",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                type: {
                    name: "Enum",
                    allowedValues: ["Free", "Basic", "Standard", "Premium"]
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "String"
                }
            },
            family: {
                serializedName: "family",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Plan = {
    type: {
        name: "Composite",
        className: "Plan",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            publisher: {
                serializedName: "publisher",
                required: true,
                type: {
                    name: "String"
                }
            },
            product: {
                serializedName: "product",
                required: true,
                type: {
                    name: "String"
                }
            },
            promotionCode: {
                serializedName: "promotionCode",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkspacePatch = {
    type: {
        name: "Composite",
        className: "WorkspacePatch",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            },
            applicationGroupReferences: {
                serializedName: "properties.applicationGroupReferences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnectionListResultWithSystemData = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResultWithSystemData",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnectionWithSystemData"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateLinkResourceListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WorkspaceList = {
    type: {
        name: "Composite",
        className: "WorkspaceList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Workspace"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScalingSchedule = {
    type: {
        name: "Composite",
        className: "ScalingSchedule",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            daysOfWeek: {
                serializedName: "daysOfWeek",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            rampUpStartTime: {
                serializedName: "rampUpStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            },
            rampUpLoadBalancingAlgorithm: {
                serializedName: "rampUpLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            },
            rampUpMinimumHostsPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "rampUpMinimumHostsPct",
                type: {
                    name: "Number"
                }
            },
            rampUpCapacityThresholdPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 1
                },
                serializedName: "rampUpCapacityThresholdPct",
                type: {
                    name: "Number"
                }
            },
            peakStartTime: {
                serializedName: "peakStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            },
            peakLoadBalancingAlgorithm: {
                serializedName: "peakLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            },
            rampDownStartTime: {
                serializedName: "rampDownStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            },
            rampDownLoadBalancingAlgorithm: {
                serializedName: "rampDownLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            },
            rampDownMinimumHostsPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "rampDownMinimumHostsPct",
                type: {
                    name: "Number"
                }
            },
            rampDownCapacityThresholdPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 1
                },
                serializedName: "rampDownCapacityThresholdPct",
                type: {
                    name: "Number"
                }
            },
            rampDownForceLogoffUsers: {
                serializedName: "rampDownForceLogoffUsers",
                type: {
                    name: "Boolean"
                }
            },
            rampDownStopHostsWhen: {
                serializedName: "rampDownStopHostsWhen",
                type: {
                    name: "String"
                }
            },
            rampDownWaitTimeMinutes: {
                serializedName: "rampDownWaitTimeMinutes",
                type: {
                    name: "Number"
                }
            },
            rampDownNotificationMessage: {
                serializedName: "rampDownNotificationMessage",
                type: {
                    name: "String"
                }
            },
            offPeakStartTime: {
                serializedName: "offPeakStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            },
            offPeakLoadBalancingAlgorithm: {
                serializedName: "offPeakLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Time = {
    type: {
        name: "Composite",
        className: "Time",
        modelProperties: {
            hour: {
                constraints: {
                    InclusiveMaximum: 23,
                    InclusiveMinimum: 0
                },
                serializedName: "hour",
                required: true,
                type: {
                    name: "Number"
                }
            },
            minute: {
                constraints: {
                    InclusiveMaximum: 59,
                    InclusiveMinimum: 0
                },
                serializedName: "minute",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ScalingHostPoolReference = {
    type: {
        name: "Composite",
        className: "ScalingHostPoolReference",
        modelProperties: {
            hostPoolArmPath: {
                serializedName: "hostPoolArmPath",
                type: {
                    name: "String"
                }
            },
            scalingPlanEnabled: {
                serializedName: "scalingPlanEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const ScalingPlanPatch = {
    type: {
        name: "Composite",
        className: "ScalingPlanPatch",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            },
            timeZone: {
                serializedName: "properties.timeZone",
                type: {
                    name: "String"
                }
            },
            exclusionTag: {
                serializedName: "properties.exclusionTag",
                type: {
                    name: "String"
                }
            },
            schedules: {
                serializedName: "properties.schedules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScalingSchedule"
                        }
                    }
                }
            },
            hostPoolReferences: {
                serializedName: "properties.hostPoolReferences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScalingHostPoolReference"
                        }
                    }
                }
            }
        }
    }
};
const ScalingPlanList = {
    type: {
        name: "Composite",
        className: "ScalingPlanList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScalingPlan"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScalingPlanPooledScheduleList = {
    type: {
        name: "Composite",
        className: "ScalingPlanPooledScheduleList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScalingPlanPooledSchedule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ScalingPlanPersonalSchedulePatch = {
    type: {
        name: "Composite",
        className: "ScalingPlanPersonalSchedulePatch",
        modelProperties: {
            daysOfWeek: {
                serializedName: "properties.daysOfWeek",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday"
                            ]
                        }
                    }
                }
            },
            rampUpStartTime: {
                serializedName: "properties.rampUpStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            },
            rampUpAutoStartHosts: {
                serializedName: "properties.rampUpAutoStartHosts",
                type: {
                    name: "String"
                }
            },
            rampUpStartVMOnConnect: {
                serializedName: "properties.rampUpStartVMOnConnect",
                type: {
                    name: "String"
                }
            },
            rampUpActionOnDisconnect: {
                serializedName: "properties.rampUpActionOnDisconnect",
                type: {
                    name: "String"
                }
            },
            rampUpMinutesToWaitOnDisconnect: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampUpMinutesToWaitOnDisconnect",
                type: {
                    name: "Number"
                }
            },
            rampUpActionOnLogoff: {
                serializedName: "properties.rampUpActionOnLogoff",
                type: {
                    name: "String"
                }
            },
            rampUpMinutesToWaitOnLogoff: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampUpMinutesToWaitOnLogoff",
                type: {
                    name: "Number"
                }
            },
            peakStartTime: {
                serializedName: "properties.peakStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            },
            peakStartVMOnConnect: {
                serializedName: "properties.peakStartVMOnConnect",
                type: {
                    name: "String"
                }
            },
            peakActionOnDisconnect: {
                serializedName: "properties.peakActionOnDisconnect",
                type: {
                    name: "String"
                }
            },
            peakMinutesToWaitOnDisconnect: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.peakMinutesToWaitOnDisconnect",
                type: {
                    name: "Number"
                }
            },
            peakActionOnLogoff: {
                serializedName: "properties.peakActionOnLogoff",
                type: {
                    name: "String"
                }
            },
            peakMinutesToWaitOnLogoff: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.peakMinutesToWaitOnLogoff",
                type: {
                    name: "Number"
                }
            },
            rampDownStartTime: {
                serializedName: "properties.rampDownStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            },
            rampDownStartVMOnConnect: {
                serializedName: "properties.rampDownStartVMOnConnect",
                type: {
                    name: "String"
                }
            },
            rampDownActionOnDisconnect: {
                serializedName: "properties.rampDownActionOnDisconnect",
                type: {
                    name: "String"
                }
            },
            rampDownMinutesToWaitOnDisconnect: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampDownMinutesToWaitOnDisconnect",
                type: {
                    name: "Number"
                }
            },
            rampDownActionOnLogoff: {
                serializedName: "properties.rampDownActionOnLogoff",
                type: {
                    name: "String"
                }
            },
            rampDownMinutesToWaitOnLogoff: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampDownMinutesToWaitOnLogoff",
                type: {
                    name: "Number"
                }
            },
            offPeakStartTime: {
                serializedName: "properties.offPeakStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            },
            offPeakStartVMOnConnect: {
                serializedName: "properties.offPeakStartVMOnConnect",
                type: {
                    name: "String"
                }
            },
            offPeakActionOnDisconnect: {
                serializedName: "properties.offPeakActionOnDisconnect",
                type: {
                    name: "String"
                }
            },
            offPeakMinutesToWaitOnDisconnect: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.offPeakMinutesToWaitOnDisconnect",
                type: {
                    name: "Number"
                }
            },
            offPeakActionOnLogoff: {
                serializedName: "properties.offPeakActionOnLogoff",
                type: {
                    name: "String"
                }
            },
            offPeakMinutesToWaitOnLogoff: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.offPeakMinutesToWaitOnLogoff",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ScalingPlanPersonalScheduleList = {
    type: {
        name: "Composite",
        className: "ScalingPlanPersonalScheduleList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScalingPlanPersonalSchedule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationGroupList = {
    type: {
        name: "Composite",
        className: "ApplicationGroupList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ApplicationGroup"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StartMenuItemList = {
    type: {
        name: "Composite",
        className: "StartMenuItemList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StartMenuItem"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationPatch = {
    type: {
        name: "Composite",
        className: "ApplicationPatch",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            },
            filePath: {
                serializedName: "properties.filePath",
                type: {
                    name: "String"
                }
            },
            commandLineSetting: {
                serializedName: "properties.commandLineSetting",
                type: {
                    name: "String"
                }
            },
            commandLineArguments: {
                serializedName: "properties.commandLineArguments",
                type: {
                    name: "String"
                }
            },
            showInPortal: {
                serializedName: "properties.showInPortal",
                type: {
                    name: "Boolean"
                }
            },
            iconPath: {
                serializedName: "properties.iconPath",
                type: {
                    name: "String"
                }
            },
            iconIndex: {
                serializedName: "properties.iconIndex",
                type: {
                    name: "Number"
                }
            },
            msixPackageFamilyName: {
                serializedName: "properties.msixPackageFamilyName",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            msixPackageApplicationId: {
                serializedName: "properties.msixPackageApplicationId",
                nullable: true,
                type: {
                    name: "String"
                }
            },
            applicationType: {
                serializedName: "properties.applicationType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApplicationList = {
    type: {
        name: "Composite",
        className: "ApplicationList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Application"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DesktopPatch = {
    type: {
        name: "Composite",
        className: "DesktopPatch",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DesktopList = {
    type: {
        name: "Composite",
        className: "DesktopList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Desktop"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RegistrationInfo = {
    type: {
        name: "Composite",
        className: "RegistrationInfo",
        modelProperties: {
            expirationTime: {
                serializedName: "expirationTime",
                type: {
                    name: "DateTime"
                }
            },
            token: {
                serializedName: "token",
                type: {
                    name: "String"
                }
            },
            registrationTokenOperation: {
                serializedName: "registrationTokenOperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AgentUpdateProperties = {
    type: {
        name: "Composite",
        className: "AgentUpdateProperties",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            useSessionHostLocalTime: {
                serializedName: "useSessionHostLocalTime",
                type: {
                    name: "Boolean"
                }
            },
            maintenanceWindowTimeZone: {
                serializedName: "maintenanceWindowTimeZone",
                type: {
                    name: "String"
                }
            },
            maintenanceWindows: {
                serializedName: "maintenanceWindows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MaintenanceWindowProperties"
                        }
                    }
                }
            }
        }
    }
};
const MaintenanceWindowProperties = {
    type: {
        name: "Composite",
        className: "MaintenanceWindowProperties",
        modelProperties: {
            hour: {
                serializedName: "hour",
                type: {
                    name: "Number"
                }
            },
            dayOfWeek: {
                serializedName: "dayOfWeek",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "Sunday"
                    ]
                }
            }
        }
    }
};
const RegistrationInfoPatch = {
    type: {
        name: "Composite",
        className: "RegistrationInfoPatch",
        modelProperties: {
            expirationTime: {
                serializedName: "expirationTime",
                type: {
                    name: "DateTime"
                }
            },
            registrationTokenOperation: {
                serializedName: "registrationTokenOperation",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AgentUpdatePatchProperties = {
    type: {
        name: "Composite",
        className: "AgentUpdatePatchProperties",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            useSessionHostLocalTime: {
                serializedName: "useSessionHostLocalTime",
                type: {
                    name: "Boolean"
                }
            },
            maintenanceWindowTimeZone: {
                serializedName: "maintenanceWindowTimeZone",
                type: {
                    name: "String"
                }
            },
            maintenanceWindows: {
                serializedName: "maintenanceWindows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MaintenanceWindowPatchProperties"
                        }
                    }
                }
            }
        }
    }
};
const MaintenanceWindowPatchProperties = {
    type: {
        name: "Composite",
        className: "MaintenanceWindowPatchProperties",
        modelProperties: {
            hour: {
                serializedName: "hour",
                type: {
                    name: "Number"
                }
            },
            dayOfWeek: {
                serializedName: "dayOfWeek",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                        "Sunday"
                    ]
                }
            }
        }
    }
};
const HostPoolList = {
    type: {
        name: "Composite",
        className: "HostPoolList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HostPool"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const UserSessionList = {
    type: {
        name: "Composite",
        className: "UserSessionList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UserSession"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SessionHostHealthCheckReport = {
    type: {
        name: "Composite",
        className: "SessionHostHealthCheckReport",
        modelProperties: {
            healthCheckName: {
                serializedName: "healthCheckName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            healthCheckResult: {
                serializedName: "healthCheckResult",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            additionalFailureDetails: {
                serializedName: "additionalFailureDetails",
                type: {
                    name: "Composite",
                    className: "SessionHostHealthCheckFailureDetails"
                }
            }
        }
    }
};
const SessionHostHealthCheckFailureDetails = {
    type: {
        name: "Composite",
        className: "SessionHostHealthCheckFailureDetails",
        modelProperties: {
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            lastHealthCheckDateTime: {
                serializedName: "lastHealthCheckDateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
const SessionHostList = {
    type: {
        name: "Composite",
        className: "SessionHostList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SessionHost"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MsixPackageDependencies = {
    type: {
        name: "Composite",
        className: "MsixPackageDependencies",
        modelProperties: {
            dependencyName: {
                serializedName: "dependencyName",
                type: {
                    name: "String"
                }
            },
            publisher: {
                serializedName: "publisher",
                type: {
                    name: "String"
                }
            },
            minVersion: {
                serializedName: "minVersion",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MsixPackageApplications = {
    type: {
        name: "Composite",
        className: "MsixPackageApplications",
        modelProperties: {
            appId: {
                serializedName: "appId",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            appUserModelID: {
                serializedName: "appUserModelID",
                type: {
                    name: "String"
                }
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String"
                }
            },
            iconImageName: {
                serializedName: "iconImageName",
                type: {
                    name: "String"
                }
            },
            rawIcon: {
                serializedName: "rawIcon",
                type: {
                    name: "ByteArray"
                }
            },
            rawPng: {
                serializedName: "rawPng",
                type: {
                    name: "ByteArray"
                }
            }
        }
    }
};
const MsixPackageList = {
    type: {
        name: "Composite",
        className: "MsixPackageList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MsixPackage"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MsixImageURI = {
    type: {
        name: "Composite",
        className: "MsixImageURI",
        modelProperties: {
            uri: {
                serializedName: "uri",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ExpandMsixImageList = {
    type: {
        name: "Composite",
        className: "ExpandMsixImageList",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExpandMsixImage"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SendMessage = {
    type: {
        name: "Composite",
        className: "SendMessage",
        modelProperties: {
            messageTitle: {
                serializedName: "messageTitle",
                type: {
                    name: "String"
                }
            },
            messageBody: {
                serializedName: "messageBody",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { groupId: {
                serializedName: "properties.groupId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, requiredMembers: {
                serializedName: "properties.requiredMembers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            } })
    }
};
const ScalingPlanPooledSchedule = {
    type: {
        name: "Composite",
        className: "ScalingPlanPooledSchedule",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, daysOfWeek: {
                serializedName: "properties.daysOfWeek",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday"
                            ]
                        }
                    }
                }
            }, rampUpStartTime: {
                serializedName: "properties.rampUpStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, rampUpLoadBalancingAlgorithm: {
                serializedName: "properties.rampUpLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            }, rampUpMinimumHostsPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampUpMinimumHostsPct",
                type: {
                    name: "Number"
                }
            }, rampUpCapacityThresholdPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.rampUpCapacityThresholdPct",
                type: {
                    name: "Number"
                }
            }, peakStartTime: {
                serializedName: "properties.peakStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, peakLoadBalancingAlgorithm: {
                serializedName: "properties.peakLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            }, rampDownStartTime: {
                serializedName: "properties.rampDownStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, rampDownLoadBalancingAlgorithm: {
                serializedName: "properties.rampDownLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            }, rampDownMinimumHostsPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampDownMinimumHostsPct",
                type: {
                    name: "Number"
                }
            }, rampDownCapacityThresholdPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.rampDownCapacityThresholdPct",
                type: {
                    name: "Number"
                }
            }, rampDownForceLogoffUsers: {
                serializedName: "properties.rampDownForceLogoffUsers",
                type: {
                    name: "Boolean"
                }
            }, rampDownStopHostsWhen: {
                serializedName: "properties.rampDownStopHostsWhen",
                type: {
                    name: "String"
                }
            }, rampDownWaitTimeMinutes: {
                serializedName: "properties.rampDownWaitTimeMinutes",
                type: {
                    name: "Number"
                }
            }, rampDownNotificationMessage: {
                serializedName: "properties.rampDownNotificationMessage",
                type: {
                    name: "String"
                }
            }, offPeakStartTime: {
                serializedName: "properties.offPeakStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, offPeakLoadBalancingAlgorithm: {
                serializedName: "properties.offPeakLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            } })
    }
};
const ScalingPlanPooledSchedulePatch = {
    type: {
        name: "Composite",
        className: "ScalingPlanPooledSchedulePatch",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { daysOfWeek: {
                serializedName: "properties.daysOfWeek",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday"
                            ]
                        }
                    }
                }
            }, rampUpStartTime: {
                serializedName: "properties.rampUpStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, rampUpLoadBalancingAlgorithm: {
                serializedName: "properties.rampUpLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            }, rampUpMinimumHostsPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampUpMinimumHostsPct",
                type: {
                    name: "Number"
                }
            }, rampUpCapacityThresholdPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.rampUpCapacityThresholdPct",
                type: {
                    name: "Number"
                }
            }, peakStartTime: {
                serializedName: "properties.peakStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, peakLoadBalancingAlgorithm: {
                serializedName: "properties.peakLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            }, rampDownStartTime: {
                serializedName: "properties.rampDownStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, rampDownLoadBalancingAlgorithm: {
                serializedName: "properties.rampDownLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            }, rampDownMinimumHostsPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampDownMinimumHostsPct",
                type: {
                    name: "Number"
                }
            }, rampDownCapacityThresholdPct: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.rampDownCapacityThresholdPct",
                type: {
                    name: "Number"
                }
            }, rampDownForceLogoffUsers: {
                serializedName: "properties.rampDownForceLogoffUsers",
                type: {
                    name: "Boolean"
                }
            }, rampDownStopHostsWhen: {
                serializedName: "properties.rampDownStopHostsWhen",
                type: {
                    name: "String"
                }
            }, rampDownWaitTimeMinutes: {
                serializedName: "properties.rampDownWaitTimeMinutes",
                type: {
                    name: "Number"
                }
            }, rampDownNotificationMessage: {
                serializedName: "properties.rampDownNotificationMessage",
                type: {
                    name: "String"
                }
            }, offPeakStartTime: {
                serializedName: "properties.offPeakStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, offPeakLoadBalancingAlgorithm: {
                serializedName: "properties.offPeakLoadBalancingAlgorithm",
                type: {
                    name: "String"
                }
            } })
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const ApplicationGroupPatch = {
    type: {
        name: "Composite",
        className: "ApplicationGroupPatch",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, showInFeed: {
                serializedName: "properties.showInFeed",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const StartMenuItem = {
    type: {
        name: "Composite",
        className: "StartMenuItem",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { appAlias: {
                serializedName: "properties.appAlias",
                type: {
                    name: "String"
                }
            }, filePath: {
                serializedName: "properties.filePath",
                type: {
                    name: "String"
                }
            }, commandLineArguments: {
                serializedName: "properties.commandLineArguments",
                type: {
                    name: "String"
                }
            }, iconPath: {
                serializedName: "properties.iconPath",
                type: {
                    name: "String"
                }
            }, iconIndex: {
                serializedName: "properties.iconIndex",
                type: {
                    name: "Number"
                }
            } })
    }
};
const Application = {
    type: {
        name: "Composite",
        className: "Application",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, objectId: {
                serializedName: "properties.objectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, filePath: {
                serializedName: "properties.filePath",
                type: {
                    name: "String"
                }
            }, msixPackageFamilyName: {
                serializedName: "properties.msixPackageFamilyName",
                nullable: true,
                type: {
                    name: "String"
                }
            }, msixPackageApplicationId: {
                serializedName: "properties.msixPackageApplicationId",
                nullable: true,
                type: {
                    name: "String"
                }
            }, applicationType: {
                serializedName: "properties.applicationType",
                type: {
                    name: "String"
                }
            }, commandLineSetting: {
                serializedName: "properties.commandLineSetting",
                required: true,
                type: {
                    name: "String"
                }
            }, commandLineArguments: {
                serializedName: "properties.commandLineArguments",
                type: {
                    name: "String"
                }
            }, showInPortal: {
                serializedName: "properties.showInPortal",
                type: {
                    name: "Boolean"
                }
            }, iconPath: {
                serializedName: "properties.iconPath",
                type: {
                    name: "String"
                }
            }, iconIndex: {
                serializedName: "properties.iconIndex",
                type: {
                    name: "Number"
                }
            }, iconHash: {
                serializedName: "properties.iconHash",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, iconContent: {
                serializedName: "properties.iconContent",
                readOnly: true,
                type: {
                    name: "ByteArray"
                }
            } })
    }
};
const Desktop = {
    type: {
        name: "Composite",
        className: "Desktop",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, objectId: {
                serializedName: "properties.objectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, iconHash: {
                serializedName: "properties.iconHash",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, iconContent: {
                serializedName: "properties.iconContent",
                readOnly: true,
                type: {
                    name: "ByteArray"
                }
            } })
    }
};
const HostPoolPatch = {
    type: {
        name: "Composite",
        className: "HostPoolPatch",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, customRdpProperty: {
                serializedName: "properties.customRdpProperty",
                type: {
                    name: "String"
                }
            }, maxSessionLimit: {
                serializedName: "properties.maxSessionLimit",
                type: {
                    name: "Number"
                }
            }, personalDesktopAssignmentType: {
                serializedName: "properties.personalDesktopAssignmentType",
                type: {
                    name: "String"
                }
            }, loadBalancerType: {
                serializedName: "properties.loadBalancerType",
                type: {
                    name: "String"
                }
            }, ring: {
                serializedName: "properties.ring",
                type: {
                    name: "Number"
                }
            }, validationEnvironment: {
                serializedName: "properties.validationEnvironment",
                type: {
                    name: "Boolean"
                }
            }, registrationInfo: {
                serializedName: "properties.registrationInfo",
                type: {
                    name: "Composite",
                    className: "RegistrationInfoPatch"
                }
            }, vmTemplate: {
                serializedName: "properties.vmTemplate",
                type: {
                    name: "String"
                }
            }, ssoadfsAuthority: {
                serializedName: "properties.ssoadfsAuthority",
                type: {
                    name: "String"
                }
            }, ssoClientId: {
                serializedName: "properties.ssoClientId",
                type: {
                    name: "String"
                }
            }, ssoClientSecretKeyVaultPath: {
                serializedName: "properties.ssoClientSecretKeyVaultPath",
                type: {
                    name: "String"
                }
            }, ssoSecretType: {
                serializedName: "properties.ssoSecretType",
                type: {
                    name: "String"
                }
            }, preferredAppGroupType: {
                serializedName: "properties.preferredAppGroupType",
                type: {
                    name: "String"
                }
            }, startVMOnConnect: {
                serializedName: "properties.startVMOnConnect",
                type: {
                    name: "Boolean"
                }
            }, publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            }, agentUpdate: {
                serializedName: "properties.agentUpdate",
                type: {
                    name: "Composite",
                    className: "AgentUpdatePatchProperties"
                }
            } })
    }
};
const UserSession = {
    type: {
        name: "Composite",
        className: "UserSession",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, objectId: {
                serializedName: "properties.objectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, userPrincipalName: {
                serializedName: "properties.userPrincipalName",
                type: {
                    name: "String"
                }
            }, applicationType: {
                serializedName: "properties.applicationType",
                type: {
                    name: "String"
                }
            }, sessionState: {
                serializedName: "properties.sessionState",
                type: {
                    name: "String"
                }
            }, activeDirectoryUserName: {
                serializedName: "properties.activeDirectoryUserName",
                type: {
                    name: "String"
                }
            }, createTime: {
                serializedName: "properties.createTime",
                type: {
                    name: "DateTime"
                }
            } })
    }
};
const SessionHost = {
    type: {
        name: "Composite",
        className: "SessionHost",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, objectId: {
                serializedName: "properties.objectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, lastHeartBeat: {
                serializedName: "properties.lastHeartBeat",
                type: {
                    name: "DateTime"
                }
            }, sessions: {
                serializedName: "properties.sessions",
                type: {
                    name: "Number"
                }
            }, agentVersion: {
                serializedName: "properties.agentVersion",
                type: {
                    name: "String"
                }
            }, allowNewSession: {
                serializedName: "properties.allowNewSession",
                type: {
                    name: "Boolean"
                }
            }, virtualMachineId: {
                serializedName: "properties.virtualMachineId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceId: {
                serializedName: "properties.resourceId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, assignedUser: {
                serializedName: "properties.assignedUser",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, statusTimestamp: {
                serializedName: "properties.statusTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, osVersion: {
                serializedName: "properties.osVersion",
                type: {
                    name: "String"
                }
            }, sxSStackVersion: {
                serializedName: "properties.sxSStackVersion",
                type: {
                    name: "String"
                }
            }, updateState: {
                serializedName: "properties.updateState",
                type: {
                    name: "String"
                }
            }, lastUpdateTime: {
                serializedName: "properties.lastUpdateTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, updateErrorMessage: {
                serializedName: "properties.updateErrorMessage",
                type: {
                    name: "String"
                }
            }, sessionHostHealthCheckResults: {
                serializedName: "properties.sessionHostHealthCheckResults",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SessionHostHealthCheckReport"
                        }
                    }
                }
            } })
    }
};
const SessionHostPatch = {
    type: {
        name: "Composite",
        className: "SessionHostPatch",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { allowNewSession: {
                serializedName: "properties.allowNewSession",
                type: {
                    name: "Boolean"
                }
            }, assignedUser: {
                serializedName: "properties.assignedUser",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            } })
    }
};
const MsixPackage = {
    type: {
        name: "Composite",
        className: "MsixPackage",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, imagePath: {
                serializedName: "properties.imagePath",
                type: {
                    name: "String"
                }
            }, packageName: {
                serializedName: "properties.packageName",
                type: {
                    name: "String"
                }
            }, packageFamilyName: {
                serializedName: "properties.packageFamilyName",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            }, packageRelativePath: {
                serializedName: "properties.packageRelativePath",
                type: {
                    name: "String"
                }
            }, isRegularRegistration: {
                serializedName: "properties.isRegularRegistration",
                type: {
                    name: "Boolean"
                }
            }, isActive: {
                serializedName: "properties.isActive",
                type: {
                    name: "Boolean"
                }
            }, packageDependencies: {
                serializedName: "properties.packageDependencies",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MsixPackageDependencies"
                        }
                    }
                }
            }, version: {
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            }, lastUpdated: {
                serializedName: "properties.lastUpdated",
                type: {
                    name: "DateTime"
                }
            }, packageApplications: {
                serializedName: "properties.packageApplications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MsixPackageApplications"
                        }
                    }
                }
            } })
    }
};
const MsixPackagePatch = {
    type: {
        name: "Composite",
        className: "MsixPackagePatch",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { isActive: {
                serializedName: "properties.isActive",
                type: {
                    name: "Boolean"
                }
            }, isRegularRegistration: {
                serializedName: "properties.isRegularRegistration",
                type: {
                    name: "Boolean"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                type: {
                    name: "String"
                }
            } })
    }
};
const ExpandMsixImage = {
    type: {
        name: "Composite",
        className: "ExpandMsixImage",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { packageAlias: {
                serializedName: "properties.packageAlias",
                type: {
                    name: "String"
                }
            }, imagePath: {
                serializedName: "properties.imagePath",
                type: {
                    name: "String"
                }
            }, packageName: {
                serializedName: "properties.packageName",
                type: {
                    name: "String"
                }
            }, packageFamilyName: {
                serializedName: "properties.packageFamilyName",
                type: {
                    name: "String"
                }
            }, packageFullName: {
                serializedName: "properties.packageFullName",
                type: {
                    name: "String"
                }
            }, displayName: {
                serializedName: "properties.displayName",
                nullable: true,
                type: {
                    name: "String"
                }
            }, packageRelativePath: {
                serializedName: "properties.packageRelativePath",
                type: {
                    name: "String"
                }
            }, isRegularRegistration: {
                serializedName: "properties.isRegularRegistration",
                type: {
                    name: "Boolean"
                }
            }, isActive: {
                serializedName: "properties.isActive",
                type: {
                    name: "Boolean"
                }
            }, packageDependencies: {
                serializedName: "properties.packageDependencies",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MsixPackageDependencies"
                        }
                    }
                }
            }, version: {
                serializedName: "properties.version",
                type: {
                    name: "String"
                }
            }, lastUpdated: {
                serializedName: "properties.lastUpdated",
                type: {
                    name: "DateTime"
                }
            }, packageApplications: {
                serializedName: "properties.packageApplications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MsixPackageApplications"
                        }
                    }
                }
            } })
    }
};
const Workspace = {
    type: {
        name: "Composite",
        className: "Workspace",
        modelProperties: Object.assign(Object.assign({}, ResourceModelWithAllowedPropertySet.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, objectId: {
                serializedName: "properties.objectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, applicationGroupReferences: {
                serializedName: "properties.applicationGroupReferences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, cloudPcResource: {
                serializedName: "properties.cloudPcResource",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            } })
    }
};
const ScalingPlan = {
    type: {
        name: "Composite",
        className: "ScalingPlan",
        modelProperties: Object.assign(Object.assign({}, ResourceModelWithAllowedPropertySet.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, objectId: {
                serializedName: "properties.objectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, timeZone: {
                serializedName: "properties.timeZone",
                required: true,
                type: {
                    name: "String"
                }
            }, hostPoolType: {
                defaultValue: "Pooled",
                serializedName: "properties.hostPoolType",
                type: {
                    name: "String"
                }
            }, exclusionTag: {
                serializedName: "properties.exclusionTag",
                type: {
                    name: "String"
                }
            }, schedules: {
                serializedName: "properties.schedules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScalingSchedule"
                        }
                    }
                }
            }, hostPoolReferences: {
                serializedName: "properties.hostPoolReferences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScalingHostPoolReference"
                        }
                    }
                }
            } })
    }
};
const ApplicationGroup = {
    type: {
        name: "Composite",
        className: "ApplicationGroup",
        modelProperties: Object.assign(Object.assign({}, ResourceModelWithAllowedPropertySet.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, objectId: {
                serializedName: "properties.objectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, hostPoolArmPath: {
                serializedName: "properties.hostPoolArmPath",
                required: true,
                type: {
                    name: "String"
                }
            }, workspaceArmPath: {
                serializedName: "properties.workspaceArmPath",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, applicationGroupType: {
                serializedName: "properties.applicationGroupType",
                required: true,
                type: {
                    name: "String"
                }
            }, cloudPcResource: {
                serializedName: "properties.cloudPcResource",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, showInFeed: {
                serializedName: "properties.showInFeed",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
const HostPool = {
    type: {
        name: "Composite",
        className: "HostPool",
        modelProperties: Object.assign(Object.assign({}, ResourceModelWithAllowedPropertySet.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, objectId: {
                serializedName: "properties.objectId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, friendlyName: {
                serializedName: "properties.friendlyName",
                type: {
                    name: "String"
                }
            }, description: {
                serializedName: "properties.description",
                type: {
                    name: "String"
                }
            }, hostPoolType: {
                serializedName: "properties.hostPoolType",
                required: true,
                type: {
                    name: "String"
                }
            }, personalDesktopAssignmentType: {
                serializedName: "properties.personalDesktopAssignmentType",
                type: {
                    name: "String"
                }
            }, customRdpProperty: {
                serializedName: "properties.customRdpProperty",
                type: {
                    name: "String"
                }
            }, maxSessionLimit: {
                serializedName: "properties.maxSessionLimit",
                type: {
                    name: "Number"
                }
            }, loadBalancerType: {
                serializedName: "properties.loadBalancerType",
                required: true,
                type: {
                    name: "String"
                }
            }, ring: {
                serializedName: "properties.ring",
                type: {
                    name: "Number"
                }
            }, validationEnvironment: {
                serializedName: "properties.validationEnvironment",
                type: {
                    name: "Boolean"
                }
            }, registrationInfo: {
                serializedName: "properties.registrationInfo",
                type: {
                    name: "Composite",
                    className: "RegistrationInfo"
                }
            }, vmTemplate: {
                serializedName: "properties.vmTemplate",
                type: {
                    name: "String"
                }
            }, applicationGroupReferences: {
                serializedName: "properties.applicationGroupReferences",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, ssoadfsAuthority: {
                serializedName: "properties.ssoadfsAuthority",
                type: {
                    name: "String"
                }
            }, ssoClientId: {
                serializedName: "properties.ssoClientId",
                type: {
                    name: "String"
                }
            }, ssoClientSecretKeyVaultPath: {
                serializedName: "properties.ssoClientSecretKeyVaultPath",
                type: {
                    name: "String"
                }
            }, ssoSecretType: {
                serializedName: "properties.ssoSecretType",
                type: {
                    name: "String"
                }
            }, preferredAppGroupType: {
                serializedName: "properties.preferredAppGroupType",
                required: true,
                type: {
                    name: "String"
                }
            }, startVMOnConnect: {
                serializedName: "properties.startVMOnConnect",
                type: {
                    name: "Boolean"
                }
            }, cloudPcResource: {
                serializedName: "properties.cloudPcResource",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }, publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            }, agentUpdate: {
                serializedName: "properties.agentUpdate",
                type: {
                    name: "Composite",
                    className: "AgentUpdateProperties"
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            } })
    }
};
const ResourceModelWithAllowedPropertySetIdentity = {
    type: {
        name: "Composite",
        className: "ResourceModelWithAllowedPropertySetIdentity",
        modelProperties: Object.assign({}, Identity.type.modelProperties)
    }
};
const ResourceModelWithAllowedPropertySetSku = {
    type: {
        name: "Composite",
        className: "ResourceModelWithAllowedPropertySetSku",
        modelProperties: Object.assign({}, Sku.type.modelProperties)
    }
};
const ResourceModelWithAllowedPropertySetPlan = {
    type: {
        name: "Composite",
        className: "ResourceModelWithAllowedPropertySetPlan",
        modelProperties: Object.assign({}, Plan.type.modelProperties)
    }
};
const PrivateEndpointConnectionWithSystemData = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionWithSystemData",
        modelProperties: Object.assign(Object.assign({}, PrivateEndpointConnection.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            } })
    }
};
const ScalingPlanPersonalSchedule = {
    type: {
        name: "Composite",
        className: "ScalingPlanPersonalSchedule",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }, daysOfWeek: {
                serializedName: "properties.daysOfWeek",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                                "Sunday"
                            ]
                        }
                    }
                }
            }, rampUpStartTime: {
                serializedName: "properties.rampUpStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, rampUpAutoStartHosts: {
                serializedName: "properties.rampUpAutoStartHosts",
                type: {
                    name: "String"
                }
            }, rampUpStartVMOnConnect: {
                serializedName: "properties.rampUpStartVMOnConnect",
                type: {
                    name: "String"
                }
            }, rampUpActionOnDisconnect: {
                serializedName: "properties.rampUpActionOnDisconnect",
                type: {
                    name: "String"
                }
            }, rampUpMinutesToWaitOnDisconnect: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampUpMinutesToWaitOnDisconnect",
                type: {
                    name: "Number"
                }
            }, rampUpActionOnLogoff: {
                serializedName: "properties.rampUpActionOnLogoff",
                type: {
                    name: "String"
                }
            }, rampUpMinutesToWaitOnLogoff: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampUpMinutesToWaitOnLogoff",
                type: {
                    name: "Number"
                }
            }, peakStartTime: {
                serializedName: "properties.peakStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, peakStartVMOnConnect: {
                serializedName: "properties.peakStartVMOnConnect",
                type: {
                    name: "String"
                }
            }, peakActionOnDisconnect: {
                serializedName: "properties.peakActionOnDisconnect",
                type: {
                    name: "String"
                }
            }, peakMinutesToWaitOnDisconnect: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.peakMinutesToWaitOnDisconnect",
                type: {
                    name: "Number"
                }
            }, peakActionOnLogoff: {
                serializedName: "properties.peakActionOnLogoff",
                type: {
                    name: "String"
                }
            }, peakMinutesToWaitOnLogoff: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.peakMinutesToWaitOnLogoff",
                type: {
                    name: "Number"
                }
            }, rampDownStartTime: {
                serializedName: "properties.rampDownStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, rampDownStartVMOnConnect: {
                serializedName: "properties.rampDownStartVMOnConnect",
                type: {
                    name: "String"
                }
            }, rampDownActionOnDisconnect: {
                serializedName: "properties.rampDownActionOnDisconnect",
                type: {
                    name: "String"
                }
            }, rampDownMinutesToWaitOnDisconnect: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampDownMinutesToWaitOnDisconnect",
                type: {
                    name: "Number"
                }
            }, rampDownActionOnLogoff: {
                serializedName: "properties.rampDownActionOnLogoff",
                type: {
                    name: "String"
                }
            }, rampDownMinutesToWaitOnLogoff: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.rampDownMinutesToWaitOnLogoff",
                type: {
                    name: "Number"
                }
            }, offPeakStartTime: {
                serializedName: "properties.offPeakStartTime",
                type: {
                    name: "Composite",
                    className: "Time"
                }
            }, offPeakStartVMOnConnect: {
                serializedName: "properties.offPeakStartVMOnConnect",
                type: {
                    name: "String"
                }
            }, offPeakActionOnDisconnect: {
                serializedName: "properties.offPeakActionOnDisconnect",
                type: {
                    name: "String"
                }
            }, offPeakMinutesToWaitOnDisconnect: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.offPeakMinutesToWaitOnDisconnect",
                type: {
                    name: "Number"
                }
            }, offPeakActionOnLogoff: {
                serializedName: "properties.offPeakActionOnLogoff",
                type: {
                    name: "String"
                }
            }, offPeakMinutesToWaitOnLogoff: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "properties.offPeakMinutesToWaitOnLogoff",
                type: {
                    name: "Number"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AgentUpdatePatchProperties: AgentUpdatePatchProperties,
    AgentUpdateProperties: AgentUpdateProperties,
    Application: Application,
    ApplicationGroup: ApplicationGroup,
    ApplicationGroupList: ApplicationGroupList,
    ApplicationGroupPatch: ApplicationGroupPatch,
    ApplicationList: ApplicationList,
    ApplicationPatch: ApplicationPatch,
    CloudError: CloudError,
    CloudErrorProperties: CloudErrorProperties,
    Desktop: Desktop,
    DesktopList: DesktopList,
    DesktopPatch: DesktopPatch,
    ExpandMsixImage: ExpandMsixImage,
    ExpandMsixImageList: ExpandMsixImageList,
    HostPool: HostPool,
    HostPoolList: HostPoolList,
    HostPoolPatch: HostPoolPatch,
    Identity: Identity,
    LogSpecification: LogSpecification,
    MaintenanceWindowPatchProperties: MaintenanceWindowPatchProperties,
    MaintenanceWindowProperties: MaintenanceWindowProperties,
    MsixImageURI: MsixImageURI,
    MsixPackage: MsixPackage,
    MsixPackageApplications: MsixPackageApplications,
    MsixPackageDependencies: MsixPackageDependencies,
    MsixPackageList: MsixPackageList,
    MsixPackagePatch: MsixPackagePatch,
    OperationProperties: OperationProperties,
    Plan: Plan,
    PrivateEndpoint: PrivateEndpoint,
    PrivateEndpointConnection: PrivateEndpointConnection,
    PrivateEndpointConnectionListResultWithSystemData: PrivateEndpointConnectionListResultWithSystemData,
    PrivateEndpointConnectionWithSystemData: PrivateEndpointConnectionWithSystemData,
    PrivateLinkResource: PrivateLinkResource,
    PrivateLinkResourceListResult: PrivateLinkResourceListResult,
    PrivateLinkServiceConnectionState: PrivateLinkServiceConnectionState,
    ProxyResource: ProxyResource,
    RegistrationInfo: RegistrationInfo,
    RegistrationInfoPatch: RegistrationInfoPatch,
    Resource: Resource,
    ResourceModelWithAllowedPropertySet: ResourceModelWithAllowedPropertySet,
    ResourceModelWithAllowedPropertySetIdentity: ResourceModelWithAllowedPropertySetIdentity,
    ResourceModelWithAllowedPropertySetPlan: ResourceModelWithAllowedPropertySetPlan,
    ResourceModelWithAllowedPropertySetSku: ResourceModelWithAllowedPropertySetSku,
    ResourceProviderOperation: ResourceProviderOperation,
    ResourceProviderOperationDisplay: ResourceProviderOperationDisplay,
    ResourceProviderOperationList: ResourceProviderOperationList,
    ScalingHostPoolReference: ScalingHostPoolReference,
    ScalingPlan: ScalingPlan,
    ScalingPlanList: ScalingPlanList,
    ScalingPlanPatch: ScalingPlanPatch,
    ScalingPlanPersonalSchedule: ScalingPlanPersonalSchedule,
    ScalingPlanPersonalScheduleList: ScalingPlanPersonalScheduleList,
    ScalingPlanPersonalSchedulePatch: ScalingPlanPersonalSchedulePatch,
    ScalingPlanPooledSchedule: ScalingPlanPooledSchedule,
    ScalingPlanPooledScheduleList: ScalingPlanPooledScheduleList,
    ScalingPlanPooledSchedulePatch: ScalingPlanPooledSchedulePatch,
    ScalingSchedule: ScalingSchedule,
    SendMessage: SendMessage,
    ServiceSpecification: ServiceSpecification,
    SessionHost: SessionHost,
    SessionHostHealthCheckFailureDetails: SessionHostHealthCheckFailureDetails,
    SessionHostHealthCheckReport: SessionHostHealthCheckReport,
    SessionHostList: SessionHostList,
    SessionHostPatch: SessionHostPatch,
    Sku: Sku,
    StartMenuItem: StartMenuItem,
    StartMenuItemList: StartMenuItemList,
    SystemData: SystemData,
    Time: Time,
    UserSession: UserSession,
    UserSessionList: UserSessionList,
    Workspace: Workspace,
    WorkspaceList: WorkspaceList,
    WorkspacePatch: WorkspacePatch
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-09-05",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const workspaceName = {
    parameterPath: "workspaceName",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 3
        },
        serializedName: "workspaceName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const workspace = {
    parameterPath: "workspace",
    mapper: Workspace
};
const workspace1 = {
    parameterPath: ["options", "workspace"],
    mapper: WorkspacePatch
};
const pageSize = {
    parameterPath: ["options", "pageSize"],
    mapper: {
        serializedName: "pageSize",
        type: {
            name: "Number"
        }
    }
};
const isDescending = {
    parameterPath: ["options", "isDescending"],
    mapper: {
        serializedName: "isDescending",
        type: {
            name: "Boolean"
        }
    }
};
const initialSkip = {
    parameterPath: ["options", "initialSkip"],
    mapper: {
        serializedName: "initialSkip",
        type: {
            name: "Number"
        }
    }
};
const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const connection = {
    parameterPath: "connection",
    mapper: PrivateEndpointConnection
};
const hostPoolName = {
    parameterPath: "hostPoolName",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 3
        },
        serializedName: "hostPoolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const scalingPlanName = {
    parameterPath: "scalingPlanName",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 3
        },
        serializedName: "scalingPlanName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const scalingPlan = {
    parameterPath: "scalingPlan",
    mapper: ScalingPlan
};
const scalingPlan1 = {
    parameterPath: ["options", "scalingPlan"],
    mapper: ScalingPlanPatch
};
const scalingPlanScheduleName = {
    parameterPath: "scalingPlanScheduleName",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 1
        },
        serializedName: "scalingPlanScheduleName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const scalingPlanSchedule = {
    parameterPath: "scalingPlanSchedule",
    mapper: ScalingPlanPooledSchedule
};
const scalingPlanSchedule1 = {
    parameterPath: ["options", "scalingPlanSchedule"],
    mapper: ScalingPlanPooledSchedulePatch
};
const scalingPlanSchedule2 = {
    parameterPath: "scalingPlanSchedule",
    mapper: ScalingPlanPersonalSchedule
};
const scalingPlanSchedule3 = {
    parameterPath: ["options", "scalingPlanSchedule"],
    mapper: ScalingPlanPersonalSchedulePatch
};
const applicationGroupName = {
    parameterPath: "applicationGroupName",
    mapper: {
        constraints: {
            MaxLength: 64,
            MinLength: 3
        },
        serializedName: "applicationGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const applicationGroup = {
    parameterPath: "applicationGroup",
    mapper: ApplicationGroup
};
const applicationGroup1 = {
    parameterPath: ["options", "applicationGroup"],
    mapper: ApplicationGroupPatch
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
const applicationName = {
    parameterPath: "applicationName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "applicationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const application = {
    parameterPath: "application",
    mapper: Application
};
const application1 = {
    parameterPath: ["options", "application"],
    mapper: ApplicationPatch
};
const desktopName = {
    parameterPath: "desktopName",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 3
        },
        serializedName: "desktopName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const desktop = {
    parameterPath: ["options", "desktop"],
    mapper: DesktopPatch
};
const hostPool = {
    parameterPath: "hostPool",
    mapper: HostPool
};
const force = {
    parameterPath: ["options", "force"],
    mapper: {
        serializedName: "force",
        type: {
            name: "Boolean"
        }
    }
};
const hostPool1 = {
    parameterPath: ["options", "hostPool"],
    mapper: HostPoolPatch
};
const sessionHostName = {
    parameterPath: "sessionHostName",
    mapper: {
        constraints: {
            MaxLength: 48,
            MinLength: 3
        },
        serializedName: "sessionHostName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const userSessionId = {
    parameterPath: "userSessionId",
    mapper: {
        constraints: {
            MaxLength: 24,
            MinLength: 1
        },
        serializedName: "userSessionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const sendMessage = {
    parameterPath: ["options", "sendMessage"],
    mapper: SendMessage
};
const sessionHost = {
    parameterPath: ["options", "sessionHost"],
    mapper: SessionHostPatch
};
const msixPackageFullName = {
    parameterPath: "msixPackageFullName",
    mapper: {
        constraints: {
            MaxLength: 100,
            MinLength: 3
        },
        serializedName: "msixPackageFullName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const msixPackage = {
    parameterPath: "msixPackage",
    mapper: MsixPackage
};
const msixPackage1 = {
    parameterPath: ["options", "msixPackage"],
    mapper: MsixPackagePatch
};
const msixImageURI = {
    parameterPath: "msixImageURI",
    mapper: MsixImageURI
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all of the available operations the Desktop Virtualization resource provider supports.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List all of the available operations the Desktop Virtualization resource provider supports.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$9);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$9 = {
    path: "/providers/Microsoft.DesktopVirtualization/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceProviderOperationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$f
};
const listNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ResourceProviderOperationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [$host, nextLink],
    headerParameters: [accept],
    serializer: serializer$f
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Workspaces operations. */
class WorkspacesImpl {
    /**
     * Initialize a new instance of the class Workspaces class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List workspaces.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List workspaces in subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, getOperationSpec$a);
    }
    /**
     * Create or update a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param workspace Object containing Workspace definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, workspace, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, workspace, options }, createOrUpdateOperationSpec$4);
    }
    /**
     * Remove a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, deleteOperationSpec$9);
    }
    /**
     * Update a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    update(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, updateOperationSpec$9);
    }
    /**
     * List workspaces.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$3);
    }
    /**
     * List workspaces in subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec$2);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec$3);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Workspace
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const createOrUpdateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Workspace
        },
        201: {
            bodyMapper: Workspace
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: workspace,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const deleteOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const updateOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Workspace
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: workspace1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e
};
const listByResourceGroupOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const listBySubscriptionOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/workspaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$e
};
const listByResourceGroupNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$e
};
const listBySubscriptionNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: WorkspaceList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$e
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateEndpointConnections operations. */
class PrivateEndpointConnectionsImpl {
    /**
     * Initialize a new instance of the class PrivateEndpointConnections class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List private endpoint connections.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        const iter = this.listByWorkspacePagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByWorkspace(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByWorkspaceNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByWorkspacePagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List private endpoint connections associated with hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    listByHostPool(resourceGroupName, hostPoolName, options) {
        const iter = this.listByHostPoolPagingAll(resourceGroupName, hostPoolName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByHostPoolPagingPage(resourceGroupName, hostPoolName, options, settings);
            }
        };
    }
    listByHostPoolPagingPage(resourceGroupName, hostPoolName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByHostPoolPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByHostPool(resourceGroupName, hostPoolName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByHostPoolNext(resourceGroupName, hostPoolName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByHostPoolPagingAll(resourceGroupName, hostPoolName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByHostPoolPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByHostPoolPagingPage(resourceGroupName, hostPoolName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List private endpoint connections.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    _listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec$1);
    }
    /**
     * Get a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    getByWorkspace(resourceGroupName, workspaceName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            privateEndpointConnectionName,
            options
        }, getByWorkspaceOperationSpec);
    }
    /**
     * Remove a connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    deleteByWorkspace(resourceGroupName, workspaceName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            privateEndpointConnectionName,
            options
        }, deleteByWorkspaceOperationSpec);
    }
    /**
     * Approve or reject a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param connection Object containing the updated connection.
     * @param options The options parameters.
     */
    updateByWorkspace(resourceGroupName, workspaceName, privateEndpointConnectionName, connection, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            privateEndpointConnectionName,
            connection,
            options
        }, updateByWorkspaceOperationSpec);
    }
    /**
     * List private endpoint connections associated with hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    _listByHostPool(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, listByHostPoolOperationSpec$3);
    }
    /**
     * Get a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    getByHostPool(resourceGroupName, hostPoolName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            privateEndpointConnectionName,
            options
        }, getByHostPoolOperationSpec);
    }
    /**
     * Remove a connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    deleteByHostPool(resourceGroupName, hostPoolName, privateEndpointConnectionName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            privateEndpointConnectionName,
            options
        }, deleteByHostPoolOperationSpec);
    }
    /**
     * Approve or reject a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param connection Object containing the updated connection.
     * @param options The options parameters.
     */
    updateByHostPool(resourceGroupName, hostPoolName, privateEndpointConnectionName, connection, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            privateEndpointConnectionName,
            connection,
            options
        }, updateByHostPoolOperationSpec);
    }
    /**
     * ListByWorkspaceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param nextLink The nextLink from the previous successful call to the ListByWorkspace method.
     * @param options The options parameters.
     */
    _listByWorkspaceNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listByWorkspaceNextOperationSpec$1);
    }
    /**
     * ListByHostPoolNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param nextLink The nextLink from the previous successful call to the ListByHostPool method.
     * @param options The options parameters.
     */
    _listByHostPoolNext(resourceGroupName, hostPoolName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, nextLink, options }, listByHostPoolNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByWorkspaceOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResultWithSystemData
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const getByWorkspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionWithSystemData
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const deleteByWorkspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const updateByWorkspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionWithSystemData
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: connection,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName,
        privateEndpointConnectionName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$d
};
const listByHostPoolOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/privateEndpointConnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResultWithSystemData
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const getByHostPoolOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionWithSystemData
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        privateEndpointConnectionName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const deleteByHostPoolOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        privateEndpointConnectionName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const updateByHostPoolOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/privateEndpointConnections/{privateEndpointConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionWithSystemData
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: connection,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        privateEndpointConnectionName,
        hostPoolName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$d
};
const listByWorkspaceNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResultWithSystemData
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};
const listByHostPoolNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateEndpointConnectionListResultWithSystemData
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$d
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing PrivateLinkResources operations. */
class PrivateLinkResourcesImpl {
    /**
     * Initialize a new instance of the class PrivateLinkResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List the private link resources available for this workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        const iter = this.listByWorkspacePagingAll(resourceGroupName, workspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings);
            }
        };
    }
    listByWorkspacePagingPage(resourceGroupName, workspaceName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByWorkspace(resourceGroupName, workspaceName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByWorkspaceNext(resourceGroupName, workspaceName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByWorkspacePagingAll(resourceGroupName, workspaceName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByWorkspacePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByWorkspacePagingPage(resourceGroupName, workspaceName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List the private link resources available for this hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    listByHostPool(resourceGroupName, hostPoolName, options) {
        const iter = this.listByHostPoolPagingAll(resourceGroupName, hostPoolName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByHostPoolPagingPage(resourceGroupName, hostPoolName, options, settings);
            }
        };
    }
    listByHostPoolPagingPage(resourceGroupName, hostPoolName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByHostPoolPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByHostPool(resourceGroupName, hostPoolName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByHostPoolNext(resourceGroupName, hostPoolName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByHostPoolPagingAll(resourceGroupName, hostPoolName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByHostPoolPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByHostPoolPagingPage(resourceGroupName, hostPoolName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List the private link resources available for this workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    _listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec);
    }
    /**
     * List the private link resources available for this hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    _listByHostPool(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, listByHostPoolOperationSpec$2);
    }
    /**
     * ListByWorkspaceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param nextLink The nextLink from the previous successful call to the ListByWorkspace method.
     * @param options The options parameters.
     */
    _listByWorkspaceNext(resourceGroupName, workspaceName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, nextLink, options }, listByWorkspaceNextOperationSpec);
    }
    /**
     * ListByHostPoolNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param nextLink The nextLink from the previous successful call to the ListByHostPool method.
     * @param options The options parameters.
     */
    _listByHostPoolNext(resourceGroupName, hostPoolName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, nextLink, options }, listByHostPoolNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByWorkspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByHostPoolOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/privateLinkResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByWorkspaceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        workspaceName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};
const listByHostPoolNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PrivateLinkResourceListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$c
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ScalingPlans operations. */
class ScalingPlansImpl {
    /**
     * Initialize a new instance of the class ScalingPlans class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List scaling plans.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List scaling plans in subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List scaling plan associated with hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    listByHostPool(resourceGroupName, hostPoolName, options) {
        const iter = this.listByHostPoolPagingAll(resourceGroupName, hostPoolName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByHostPoolPagingPage(resourceGroupName, hostPoolName, options, settings);
            }
        };
    }
    listByHostPoolPagingPage(resourceGroupName, hostPoolName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByHostPoolPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByHostPool(resourceGroupName, hostPoolName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByHostPoolNext(resourceGroupName, hostPoolName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByHostPoolPagingAll(resourceGroupName, hostPoolName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByHostPoolPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByHostPoolPagingPage(resourceGroupName, hostPoolName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Get a scaling plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    get(resourceGroupName, scalingPlanName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, options }, getOperationSpec$9);
    }
    /**
     * Create or update a scaling plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlan Object containing scaling plan definitions.
     * @param options The options parameters.
     */
    create(resourceGroupName, scalingPlanName, scalingPlan, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, scalingPlan, options }, createOperationSpec$2);
    }
    /**
     * Remove a scaling plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    delete(resourceGroupName, scalingPlanName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, options }, deleteOperationSpec$8);
    }
    /**
     * Update a scaling plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    update(resourceGroupName, scalingPlanName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, options }, updateOperationSpec$8);
    }
    /**
     * List scaling plans.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$2);
    }
    /**
     * List scaling plans in subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec$1);
    }
    /**
     * List scaling plan associated with hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    _listByHostPool(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, listByHostPoolOperationSpec$1);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec$2);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec$1);
    }
    /**
     * ListByHostPoolNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param nextLink The nextLink from the previous successful call to the ListByHostPool method.
     * @param options The options parameters.
     */
    _listByHostPoolNext(resourceGroupName, hostPoolName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, nextLink, options }, listByHostPoolNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlan
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const createOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ScalingPlan
        },
        201: {
            bodyMapper: ScalingPlan
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: scalingPlan,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const deleteOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const updateOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ScalingPlan
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: scalingPlan1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b
};
const listByResourceGroupOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listBySubscriptionOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/scalingPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByHostPoolOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/scalingPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByResourceGroupNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listBySubscriptionNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$b
};
const listByHostPoolNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$b
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ScalingPlanPooledSchedules operations. */
class ScalingPlanPooledSchedulesImpl {
    /**
     * Initialize a new instance of the class ScalingPlanPooledSchedules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List ScalingPlanPooledSchedules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    list(resourceGroupName, scalingPlanName, options) {
        const iter = this.listPagingAll(resourceGroupName, scalingPlanName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, scalingPlanName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, scalingPlanName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, scalingPlanName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, scalingPlanName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, scalingPlanName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, scalingPlanName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a ScalingPlanPooledSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    get(resourceGroupName, scalingPlanName, scalingPlanScheduleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, scalingPlanScheduleName, options }, getOperationSpec$8);
    }
    /**
     * Create or update a ScalingPlanPooledSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param scalingPlanSchedule Object containing ScalingPlanPooledSchedule definitions.
     * @param options The options parameters.
     */
    create(resourceGroupName, scalingPlanName, scalingPlanScheduleName, scalingPlanSchedule, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            scalingPlanName,
            scalingPlanScheduleName,
            scalingPlanSchedule,
            options
        }, createOperationSpec$1);
    }
    /**
     * Remove a ScalingPlanPooledSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    delete(resourceGroupName, scalingPlanName, scalingPlanScheduleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, scalingPlanScheduleName, options }, deleteOperationSpec$7);
    }
    /**
     * Update a ScalingPlanPooledSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    update(resourceGroupName, scalingPlanName, scalingPlanScheduleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, scalingPlanScheduleName, options }, updateOperationSpec$7);
    }
    /**
     * List ScalingPlanPooledSchedules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    _list(resourceGroupName, scalingPlanName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, options }, listOperationSpec$8);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, scalingPlanName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, nextLink, options }, listNextOperationSpec$8);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/pooledSchedules/{scalingPlanScheduleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanPooledSchedule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName,
        scalingPlanScheduleName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/pooledSchedules/{scalingPlanScheduleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ScalingPlanPooledSchedule
        },
        201: {
            bodyMapper: ScalingPlanPooledSchedule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: scalingPlanSchedule,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName,
        scalingPlanScheduleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/pooledSchedules/{scalingPlanScheduleName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName,
        scalingPlanScheduleName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const updateOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/pooledSchedules/{scalingPlanScheduleName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ScalingPlanPooledSchedule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: scalingPlanSchedule1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName,
        scalingPlanScheduleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a
};
const listOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/pooledSchedules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanPooledScheduleList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};
const listNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanPooledScheduleList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        scalingPlanName
    ],
    headerParameters: [accept],
    serializer: serializer$a
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ScalingPlanPersonalSchedules operations. */
class ScalingPlanPersonalSchedulesImpl {
    /**
     * Initialize a new instance of the class ScalingPlanPersonalSchedules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List ScalingPlanPersonalSchedules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    list(resourceGroupName, scalingPlanName, options) {
        const iter = this.listPagingAll(resourceGroupName, scalingPlanName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, scalingPlanName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, scalingPlanName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, scalingPlanName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, scalingPlanName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, scalingPlanName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, scalingPlanName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a ScalingPlanPersonalSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    get(resourceGroupName, scalingPlanName, scalingPlanScheduleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, scalingPlanScheduleName, options }, getOperationSpec$7);
    }
    /**
     * Create or update a ScalingPlanPersonalSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param scalingPlanSchedule Object containing ScalingPlanPersonalSchedule definitions.
     * @param options The options parameters.
     */
    create(resourceGroupName, scalingPlanName, scalingPlanScheduleName, scalingPlanSchedule, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            scalingPlanName,
            scalingPlanScheduleName,
            scalingPlanSchedule,
            options
        }, createOperationSpec);
    }
    /**
     * Remove a ScalingPlanPersonalSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    delete(resourceGroupName, scalingPlanName, scalingPlanScheduleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, scalingPlanScheduleName, options }, deleteOperationSpec$6);
    }
    /**
     * Update a ScalingPlanPersonalSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    update(resourceGroupName, scalingPlanName, scalingPlanScheduleName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, scalingPlanScheduleName, options }, updateOperationSpec$6);
    }
    /**
     * List ScalingPlanPersonalSchedules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    _list(resourceGroupName, scalingPlanName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, options }, listOperationSpec$7);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, scalingPlanName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, scalingPlanName, nextLink, options }, listNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/personalSchedules/{scalingPlanScheduleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanPersonalSchedule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName,
        scalingPlanScheduleName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/personalSchedules/{scalingPlanScheduleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ScalingPlanPersonalSchedule
        },
        201: {
            bodyMapper: ScalingPlanPersonalSchedule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: scalingPlanSchedule2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName,
        scalingPlanScheduleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/personalSchedules/{scalingPlanScheduleName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName,
        scalingPlanScheduleName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const updateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/personalSchedules/{scalingPlanScheduleName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ScalingPlanPersonalSchedule
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: scalingPlanSchedule3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName,
        scalingPlanScheduleName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$9
};
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}/personalSchedules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanPersonalScheduleList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        scalingPlanName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};
const listNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ScalingPlanPersonalScheduleList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        scalingPlanName
    ],
    headerParameters: [accept],
    serializer: serializer$9
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ApplicationGroups operations. */
class ApplicationGroupsImpl {
    /**
     * Initialize a new instance of the class ApplicationGroups class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List applicationGroups.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List applicationGroups in subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listBySubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listBySubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get an application group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    get(resourceGroupName, applicationGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, options }, getOperationSpec$6);
    }
    /**
     * Create or update an applicationGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, applicationGroupName, applicationGroup, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, applicationGroup, options }, createOrUpdateOperationSpec$3);
    }
    /**
     * Remove an applicationGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    delete(resourceGroupName, applicationGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, options }, deleteOperationSpec$5);
    }
    /**
     * Update an applicationGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    update(resourceGroupName, applicationGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, options }, updateOperationSpec$5);
    }
    /**
     * List applicationGroups.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec$1);
    }
    /**
     * List applicationGroups in subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec$1);
    }
    /**
     * ListBySubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
     * @param options The options parameters.
     */
    _listBySubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listBySubscriptionNextOperationSpec);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationGroup
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const createOrUpdateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ApplicationGroup
        },
        201: {
            bodyMapper: ApplicationGroup
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: applicationGroup,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const updateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ApplicationGroup
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: applicationGroup1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8
};
const listByResourceGroupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationGroupList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip,
        filter
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/applicationGroups",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationGroupList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$8
};
const listByResourceGroupNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationGroupList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$8
};
const listBySubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationGroupList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$8
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing StartMenuItems operations. */
class StartMenuItemsImpl {
    /**
     * Initialize a new instance of the class StartMenuItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List start menu items in the given application group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    list(resourceGroupName, applicationGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, applicationGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, applicationGroupName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, applicationGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, applicationGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, applicationGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, applicationGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, applicationGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List start menu items in the given application group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    _list(resourceGroupName, applicationGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, options }, listOperationSpec$6);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, applicationGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, nextLink, options }, listNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/startMenuItems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StartMenuItemList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};
const listNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StartMenuItemList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        applicationGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$7
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Applications operations. */
class ApplicationsImpl {
    /**
     * Initialize a new instance of the class Applications class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List applications.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    list(resourceGroupName, applicationGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, applicationGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, applicationGroupName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, applicationGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, applicationGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, applicationGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, applicationGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, applicationGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param options The options parameters.
     */
    get(resourceGroupName, applicationGroupName, applicationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, applicationName, options }, getOperationSpec$5);
    }
    /**
     * Create or update an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param application Object containing Application definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, applicationGroupName, applicationName, application, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            applicationGroupName,
            applicationName,
            application,
            options
        }, createOrUpdateOperationSpec$2);
    }
    /**
     * Remove an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param options The options parameters.
     */
    delete(resourceGroupName, applicationGroupName, applicationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, applicationName, options }, deleteOperationSpec$4);
    }
    /**
     * Update an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param options The options parameters.
     */
    update(resourceGroupName, applicationGroupName, applicationName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, applicationName, options }, updateOperationSpec$4);
    }
    /**
     * List applications.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    _list(resourceGroupName, applicationGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, options }, listOperationSpec$5);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, applicationGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, nextLink, options }, listNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/applications/{applicationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Application
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName,
        applicationName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/applications/{applicationName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Application
        },
        201: {
            bodyMapper: Application
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: application,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName,
        applicationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/applications/{applicationName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName,
        applicationName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const updateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/applications/{applicationName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Application
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: application1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName,
        applicationName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6
};
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/applications",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplicationList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        applicationGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$6
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Desktops operations. */
class DesktopsImpl {
    /**
     * Initialize a new instance of the class Desktops class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List desktops.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    list(resourceGroupName, applicationGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, applicationGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, applicationGroupName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, applicationGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, applicationGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, applicationGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, applicationGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, applicationGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a desktop.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param desktopName The name of the desktop within the specified desktop group
     * @param options The options parameters.
     */
    get(resourceGroupName, applicationGroupName, desktopName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, desktopName, options }, getOperationSpec$4);
    }
    /**
     * Update a desktop.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param desktopName The name of the desktop within the specified desktop group
     * @param options The options parameters.
     */
    update(resourceGroupName, applicationGroupName, desktopName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, desktopName, options }, updateOperationSpec$3);
    }
    /**
     * List desktops.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    _list(resourceGroupName, applicationGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, options }, listOperationSpec$4);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, applicationGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, applicationGroupName, nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/desktops/{desktopName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Desktop
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName,
        desktopName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const updateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/desktops/{desktopName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Desktop
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: desktop,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName,
        desktopName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5
};
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}/desktops",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DesktopList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        applicationGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: DesktopList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        applicationGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$5
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing HostPools operations. */
class HostPoolsImpl {
    /**
     * Initialize a new instance of the class HostPools class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List hostPools.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List hostPools in subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Get a host pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    get(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, getOperationSpec$3);
    }
    /**
     * Create or update a host pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param hostPool Object containing HostPool definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, hostPoolName, hostPool, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, hostPool, options }, createOrUpdateOperationSpec$1);
    }
    /**
     * Remove a host pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    delete(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, deleteOperationSpec$3);
    }
    /**
     * Update a host pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    update(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, updateOperationSpec$2);
    }
    /**
     * List hostPools.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * List hostPools in subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec$3);
    }
    /**
     * Registration token of the host pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    retrieveRegistrationToken(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, retrieveRegistrationTokenOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HostPool
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: HostPool
        },
        201: {
            bodyMapper: HostPool
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: hostPool,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, force],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: HostPool
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: hostPool1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HostPoolList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/hostPools",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HostPoolList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$4
};
const retrieveRegistrationTokenOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/retrieveRegistrationToken",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RegistrationInfo
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HostPoolList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HostPoolList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing UserSessions operations. */
class UserSessionsImpl {
    /**
     * Initialize a new instance of the class UserSessions class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    listByHostPool(resourceGroupName, hostPoolName, options) {
        const iter = this.listByHostPoolPagingAll(resourceGroupName, hostPoolName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByHostPoolPagingPage(resourceGroupName, hostPoolName, options, settings);
            }
        };
    }
    listByHostPoolPagingPage(resourceGroupName, hostPoolName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByHostPoolPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByHostPool(resourceGroupName, hostPoolName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByHostPoolNext(resourceGroupName, hostPoolName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByHostPoolPagingAll(resourceGroupName, hostPoolName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByHostPoolPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByHostPoolPagingPage(resourceGroupName, hostPoolName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    list(resourceGroupName, hostPoolName, sessionHostName, options) {
        const iter = this.listPagingAll(resourceGroupName, hostPoolName, sessionHostName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, hostPoolName, sessionHostName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, hostPoolName, sessionHostName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, hostPoolName, sessionHostName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, hostPoolName, sessionHostName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, hostPoolName, sessionHostName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, hostPoolName, sessionHostName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    _listByHostPool(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, listByHostPoolOperationSpec);
    }
    /**
     * Get a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    get(resourceGroupName, hostPoolName, sessionHostName, userSessionId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            sessionHostName,
            userSessionId,
            options
        }, getOperationSpec$2);
    }
    /**
     * Remove a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    delete(resourceGroupName, hostPoolName, sessionHostName, userSessionId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            sessionHostName,
            userSessionId,
            options
        }, deleteOperationSpec$2);
    }
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    _list(resourceGroupName, hostPoolName, sessionHostName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, sessionHostName, options }, listOperationSpec$2);
    }
    /**
     * Disconnect a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    disconnect(resourceGroupName, hostPoolName, sessionHostName, userSessionId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            sessionHostName,
            userSessionId,
            options
        }, disconnectOperationSpec);
    }
    /**
     * Send a message to a user.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    sendMessage(resourceGroupName, hostPoolName, sessionHostName, userSessionId, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            sessionHostName,
            userSessionId,
            options
        }, sendMessageOperationSpec);
    }
    /**
     * ListByHostPoolNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param nextLink The nextLink from the previous successful call to the ListByHostPool method.
     * @param options The options parameters.
     */
    _listByHostPoolNext(resourceGroupName, hostPoolName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, nextLink, options }, listByHostPoolNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, hostPoolName, sessionHostName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, sessionHostName, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByHostPoolOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/userSessions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserSessionList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip,
        filter
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserSession
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        sessionHostName,
        userSessionId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, force],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        sessionHostName,
        userSessionId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserSessionList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        sessionHostName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const disconnectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}/disconnect",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        sessionHostName,
        userSessionId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const sendMessageOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}/sendMessage",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: sendMessage,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        sessionHostName,
        userSessionId
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3
};
const listByHostPoolNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserSessionList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserSessionList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        sessionHostName
    ],
    headerParameters: [accept],
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing SessionHosts operations. */
class SessionHostsImpl {
    /**
     * Initialize a new instance of the class SessionHosts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List sessionHosts.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    list(resourceGroupName, hostPoolName, options) {
        const iter = this.listPagingAll(resourceGroupName, hostPoolName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, hostPoolName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, hostPoolName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, hostPoolName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, hostPoolName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, hostPoolName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, hostPoolName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a session host.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    get(resourceGroupName, hostPoolName, sessionHostName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, sessionHostName, options }, getOperationSpec$1);
    }
    /**
     * Remove a SessionHost.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    delete(resourceGroupName, hostPoolName, sessionHostName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, sessionHostName, options }, deleteOperationSpec$1);
    }
    /**
     * Update a session host.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    update(resourceGroupName, hostPoolName, sessionHostName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, sessionHostName, options }, updateOperationSpec$1);
    }
    /**
     * List sessionHosts.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    _list(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, listOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, hostPoolName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SessionHost
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        sessionHostName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, force],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        sessionHostName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: SessionHost
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: sessionHost,
    queryParameters: [apiVersion, force],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        sessionHostName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$2
};
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SessionHostList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SessionHostList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing MsixPackages operations. */
class MsixPackagesImpl {
    /**
     * Initialize a new instance of the class MsixPackages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List MSIX packages in hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    list(resourceGroupName, hostPoolName, options) {
        const iter = this.listPagingAll(resourceGroupName, hostPoolName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, hostPoolName, options, settings);
            }
        };
    }
    listPagingPage(resourceGroupName, hostPoolName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, hostPoolName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, hostPoolName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, hostPoolName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, hostPoolName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get a msixpackage.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within
     *                            specified hostpool
     * @param options The options parameters.
     */
    get(resourceGroupName, hostPoolName, msixPackageFullName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, msixPackageFullName, options }, getOperationSpec);
    }
    /**
     * Create or update a MSIX package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within
     *                            specified hostpool
     * @param msixPackage Object containing  MSIX Package definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, hostPoolName, msixPackageFullName, msixPackage, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            hostPoolName,
            msixPackageFullName,
            msixPackage,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Remove an MSIX Package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within
     *                            specified hostpool
     * @param options The options parameters.
     */
    delete(resourceGroupName, hostPoolName, msixPackageFullName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, msixPackageFullName, options }, deleteOperationSpec);
    }
    /**
     * Update an  MSIX Package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within
     *                            specified hostpool
     * @param options The options parameters.
     */
    update(resourceGroupName, hostPoolName, msixPackageFullName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, msixPackageFullName, options }, updateOperationSpec);
    }
    /**
     * List MSIX packages in hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    _list(resourceGroupName, hostPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, options }, listOperationSpec);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, hostPoolName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/msixPackages/{msixPackageFullName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MsixPackage
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        msixPackageFullName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/msixPackages/{msixPackageFullName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MsixPackage
        },
        201: {
            bodyMapper: MsixPackage
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: msixPackage,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        msixPackageFullName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/msixPackages/{msixPackageFullName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        msixPackageFullName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/msixPackages/{msixPackageFullName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: MsixPackage
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: msixPackage1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName,
        msixPackageFullName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$1
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/msixPackages",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MsixPackageList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        pageSize,
        isDescending,
        initialSkip
    ],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MsixPackageList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing MsixImages operations. */
class MsixImagesImpl {
    /**
     * Initialize a new instance of the class MsixImages class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Expands and Lists MSIX packages in an Image, given the Image Path.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixImageURI Object containing URI to MSIX Image
     * @param options The options parameters.
     */
    listExpand(resourceGroupName, hostPoolName, msixImageURI, options) {
        const iter = this.expandPagingAll(resourceGroupName, hostPoolName, msixImageURI, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.expandPagingPage(resourceGroupName, hostPoolName, msixImageURI, options, settings);
            }
        };
    }
    expandPagingPage(resourceGroupName, hostPoolName, msixImageURI, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* expandPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._expand(resourceGroupName, hostPoolName, msixImageURI, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._expandNext(resourceGroupName, hostPoolName, msixImageURI, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    expandPagingAll(resourceGroupName, hostPoolName, msixImageURI, options) {
        return tslib.__asyncGenerator(this, arguments, function* expandPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.expandPagingPage(resourceGroupName, hostPoolName, msixImageURI, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Expands and Lists MSIX packages in an Image, given the Image Path.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixImageURI Object containing URI to MSIX Image
     * @param options The options parameters.
     */
    _expand(resourceGroupName, hostPoolName, msixImageURI, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, msixImageURI, options }, expandOperationSpec);
    }
    /**
     * ExpandNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixImageURI Object containing URI to MSIX Image
     * @param nextLink The nextLink from the previous successful call to the Expand method.
     * @param options The options parameters.
     */
    _expandNext(resourceGroupName, hostPoolName, msixImageURI, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, hostPoolName, msixImageURI, nextLink, options }, expandNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const expandOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/expandMsixImage",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ExpandMsixImageList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: msixImageURI,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};
const expandNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ExpandMsixImageList
        },
        default: {
            bodyMapper: CloudError
        }
    },
    urlParameters: [
        $host,
        nextLink,
        subscriptionId,
        resourceGroupName,
        hostPoolName
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class DesktopVirtualizationAPIClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the DesktopVirtualizationAPIClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-desktopvirtualization/1.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-09-05";
        this.operations = new OperationsImpl(this);
        this.workspaces = new WorkspacesImpl(this);
        this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
        this.privateLinkResources = new PrivateLinkResourcesImpl(this);
        this.scalingPlans = new ScalingPlansImpl(this);
        this.scalingPlanPooledSchedules = new ScalingPlanPooledSchedulesImpl(this);
        this.scalingPlanPersonalSchedules = new ScalingPlanPersonalSchedulesImpl(this);
        this.applicationGroups = new ApplicationGroupsImpl(this);
        this.startMenuItems = new StartMenuItemsImpl(this);
        this.applications = new ApplicationsImpl(this);
        this.desktops = new DesktopsImpl(this);
        this.hostPools = new HostPoolsImpl(this);
        this.userSessions = new UserSessionsImpl(this);
        this.sessionHosts = new SessionHostsImpl(this);
        this.msixPackages = new MsixPackagesImpl(this);
        this.msixImages = new MsixImagesImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.DesktopVirtualizationAPIClient = DesktopVirtualizationAPIClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
