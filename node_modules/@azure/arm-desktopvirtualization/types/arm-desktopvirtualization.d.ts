import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/** The session host configuration for updating agent, monitoring agent, and stack component. */
export declare interface AgentUpdatePatchProperties {
    /** The type of maintenance for session host components. */
    type?: SessionHostComponentUpdateType;
    /** Whether to use localTime of the virtual machine. */
    useSessionHostLocalTime?: boolean;
    /** Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true. */
    maintenanceWindowTimeZone?: string;
    /** List of maintenance windows. Maintenance windows are 2 hours long. */
    maintenanceWindows?: MaintenanceWindowPatchProperties[];
}

/** The session host configuration for updating agent, monitoring agent, and stack component. */
export declare interface AgentUpdateProperties {
    /** The type of maintenance for session host components. */
    type?: SessionHostComponentUpdateType;
    /** Whether to use localTime of the virtual machine. */
    useSessionHostLocalTime?: boolean;
    /** Time zone for maintenance as defined in https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-5.0. Must be set if useLocalTime is true. */
    maintenanceWindowTimeZone?: string;
    /** List of maintenance windows. Maintenance windows are 2 hours long. */
    maintenanceWindows?: MaintenanceWindowProperties[];
}

/** Schema for Application properties. */
export declare interface Application extends Resource {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * ObjectId of Application. (internal use)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectId?: string;
    /** Description of Application. */
    description?: string;
    /** Friendly name of Application. */
    friendlyName?: string;
    /** Specifies a path for the executable file for the application. */
    filePath?: string;
    /** Specifies the package family name for MSIX applications */
    msixPackageFamilyName?: string;
    /** Specifies the package application Id for MSIX applications */
    msixPackageApplicationId?: string;
    /** Resource Type of Application. */
    applicationType?: RemoteApplicationType;
    /** Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. */
    commandLineSetting: CommandLineSetting;
    /** Command Line Arguments for Application. */
    commandLineArguments?: string;
    /** Specifies whether to show the RemoteApp program in the RD Web Access server. */
    showInPortal?: boolean;
    /** Path to icon. */
    iconPath?: string;
    /** Index of the icon. */
    iconIndex?: number;
    /**
     * Hash of the icon.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iconHash?: string;
    /**
     * the icon a 64 bit string as a byte array.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iconContent?: Uint8Array;
}

/** Represents a ApplicationGroup definition. */
export declare interface ApplicationGroup extends ResourceModelWithAllowedPropertySet {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * ObjectId of ApplicationGroup. (internal use)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectId?: string;
    /** Description of ApplicationGroup. */
    description?: string;
    /** Friendly name of ApplicationGroup. */
    friendlyName?: string;
    /** HostPool arm path of ApplicationGroup. */
    hostPoolArmPath: string;
    /**
     * Workspace arm path of ApplicationGroup.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceArmPath?: string;
    /** Resource Type of ApplicationGroup. */
    applicationGroupType: ApplicationGroupType;
    /**
     * Is cloud pc resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cloudPcResource?: boolean;
    /** Boolean representing whether the applicationGroup is show in the feed. */
    showInFeed?: boolean;
}

/** List of ApplicationGroup definitions. */
export declare interface ApplicationGroupList {
    /** List of ApplicationGroup definitions. */
    value?: ApplicationGroup[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** ApplicationGroup properties that can be patched. */
export declare interface ApplicationGroupPatch extends Resource {
    /** tags to be updated */
    tags?: {
        [propertyName: string]: string;
    };
    /** Description of ApplicationGroup. */
    description?: string;
    /** Friendly name of ApplicationGroup. */
    friendlyName?: string;
    /** Boolean representing whether the applicationGroup is show in the feed. */
    showInFeed?: boolean;
}

/** Interface representing a ApplicationGroups. */
export declare interface ApplicationGroups {
    /**
     * List applicationGroups.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ApplicationGroupsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ApplicationGroup>;
    /**
     * List applicationGroups in subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ApplicationGroupsListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ApplicationGroup>;
    /**
     * Get an application group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    get(resourceGroupName: string, applicationGroupName: string, options?: ApplicationGroupsGetOptionalParams): Promise<ApplicationGroupsGetResponse>;
    /**
     * Create or update an applicationGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationGroup Object containing ApplicationGroup definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationGroup: ApplicationGroup, options?: ApplicationGroupsCreateOrUpdateOptionalParams): Promise<ApplicationGroupsCreateOrUpdateResponse>;
    /**
     * Remove an applicationGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, applicationGroupName: string, options?: ApplicationGroupsDeleteOptionalParams): Promise<void>;
    /**
     * Update an applicationGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    update(resourceGroupName: string, applicationGroupName: string, options?: ApplicationGroupsUpdateOptionalParams): Promise<ApplicationGroupsUpdateResponse>;
}

/** Optional parameters. */
export declare interface ApplicationGroupsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApplicationGroupsCreateOrUpdateResponse = ApplicationGroup;

/** Optional parameters. */
export declare interface ApplicationGroupsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ApplicationGroupsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApplicationGroupsGetResponse = ApplicationGroup;

/** Optional parameters. */
export declare interface ApplicationGroupsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ApplicationGroupsListByResourceGroupNextResponse = ApplicationGroupList;

/** Optional parameters. */
export declare interface ApplicationGroupsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
    /** OData filter expression. Valid properties for filtering are applicationGroupType. */
    filter?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ApplicationGroupsListByResourceGroupResponse = ApplicationGroupList;

/** Optional parameters. */
export declare interface ApplicationGroupsListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ApplicationGroupsListBySubscriptionNextResponse = ApplicationGroupList;

/** Optional parameters. */
export declare interface ApplicationGroupsListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** OData filter expression. Valid properties for filtering are applicationGroupType. */
    filter?: string;
}

/** Contains response data for the listBySubscription operation. */
export declare type ApplicationGroupsListBySubscriptionResponse = ApplicationGroupList;

/** Optional parameters. */
export declare interface ApplicationGroupsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Object containing ApplicationGroup definitions. */
    applicationGroup?: ApplicationGroupPatch;
}

/** Contains response data for the update operation. */
export declare type ApplicationGroupsUpdateResponse = ApplicationGroup;

/**
 * Defines values for ApplicationGroupType. \
 * {@link KnownApplicationGroupType} can be used interchangeably with ApplicationGroupType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RemoteApp** \
 * **Desktop**
 */
export declare type ApplicationGroupType = string;

/** List of Application definitions. */
export declare interface ApplicationList {
    /** List of Application definitions. */
    value?: Application[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Application properties that can be patched. */
export declare interface ApplicationPatch {
    /** tags to be updated */
    tags?: {
        [propertyName: string]: string;
    };
    /** Description of Application. */
    description?: string;
    /** Friendly name of Application. */
    friendlyName?: string;
    /** Specifies a path for the executable file for the application. */
    filePath?: string;
    /** Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. */
    commandLineSetting?: CommandLineSetting;
    /** Command Line Arguments for Application. */
    commandLineArguments?: string;
    /** Specifies whether to show the RemoteApp program in the RD Web Access server. */
    showInPortal?: boolean;
    /** Path to icon. */
    iconPath?: string;
    /** Index of the icon. */
    iconIndex?: number;
    /** Specifies the package family name for MSIX applications */
    msixPackageFamilyName?: string;
    /** Specifies the package application Id for MSIX applications */
    msixPackageApplicationId?: string;
    /** Resource Type of Application. */
    applicationType?: RemoteApplicationType;
}

/** Interface representing a Applications. */
export declare interface Applications {
    /**
     * List applications.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    list(resourceGroupName: string, applicationGroupName: string, options?: ApplicationsListOptionalParams): PagedAsyncIterableIterator<Application>;
    /**
     * Get an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param options The options parameters.
     */
    get(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: ApplicationsGetOptionalParams): Promise<ApplicationsGetResponse>;
    /**
     * Create or update an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param application Object containing Application definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, applicationGroupName: string, applicationName: string, application: Application, options?: ApplicationsCreateOrUpdateOptionalParams): Promise<ApplicationsCreateOrUpdateResponse>;
    /**
     * Remove an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: ApplicationsDeleteOptionalParams): Promise<void>;
    /**
     * Update an application.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param applicationName The name of the application within the specified application group
     * @param options The options parameters.
     */
    update(resourceGroupName: string, applicationGroupName: string, applicationName: string, options?: ApplicationsUpdateOptionalParams): Promise<ApplicationsUpdateResponse>;
}

/** Optional parameters. */
export declare interface ApplicationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ApplicationsCreateOrUpdateResponse = Application;

/** Optional parameters. */
export declare interface ApplicationsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ApplicationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ApplicationsGetResponse = Application;

/** Optional parameters. */
export declare interface ApplicationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ApplicationsListNextResponse = ApplicationList;

/** Optional parameters. */
export declare interface ApplicationsListOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the list operation. */
export declare type ApplicationsListResponse = ApplicationList;

/** Optional parameters. */
export declare interface ApplicationsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Object containing Application definitions. */
    application?: ApplicationPatch;
}

/** Contains response data for the update operation. */
export declare type ApplicationsUpdateResponse = Application;

/**
 * Defines values for ApplicationType. \
 * {@link KnownApplicationType} can be used interchangeably with ApplicationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **RemoteApp** \
 * **Desktop**
 */
export declare type ApplicationType = string;

/** Cloud error object. */
export declare interface CloudError {
    /** Cloud error object properties. */
    error?: CloudErrorProperties;
}

/** Cloud error object properties. */
export declare interface CloudErrorProperties {
    /** Error code */
    code?: string;
    /** Error message indicating why the operation failed. */
    message?: string;
}

/**
 * Defines values for CommandLineSetting. \
 * {@link KnownCommandLineSetting} can be used interchangeably with CommandLineSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DoNotAllow** \
 * **Allow** \
 * **Require**
 */
export declare type CommandLineSetting = string;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Defines values for DayOfWeek. */
export declare type DayOfWeek = "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";

/** Schema for Desktop properties. */
export declare interface Desktop extends Resource {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * ObjectId of Desktop. (internal use)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectId?: string;
    /** Description of Desktop. */
    description?: string;
    /** Friendly name of Desktop. */
    friendlyName?: string;
    /**
     * Hash of the icon.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iconHash?: string;
    /**
     * The icon a 64 bit string as a byte array.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly iconContent?: Uint8Array;
}

/** List of Desktop definitions. */
export declare interface DesktopList {
    /** List of Desktop definitions. */
    value?: Desktop[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Desktop properties that can be patched. */
export declare interface DesktopPatch {
    /** tags to be updated */
    tags?: {
        [propertyName: string]: string;
    };
    /** Description of Desktop. */
    description?: string;
    /** Friendly name of Desktop. */
    friendlyName?: string;
}

/** Interface representing a Desktops. */
export declare interface Desktops {
    /**
     * List desktops.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    list(resourceGroupName: string, applicationGroupName: string, options?: DesktopsListOptionalParams): PagedAsyncIterableIterator<Desktop>;
    /**
     * Get a desktop.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param desktopName The name of the desktop within the specified desktop group
     * @param options The options parameters.
     */
    get(resourceGroupName: string, applicationGroupName: string, desktopName: string, options?: DesktopsGetOptionalParams): Promise<DesktopsGetResponse>;
    /**
     * Update a desktop.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param desktopName The name of the desktop within the specified desktop group
     * @param options The options parameters.
     */
    update(resourceGroupName: string, applicationGroupName: string, desktopName: string, options?: DesktopsUpdateOptionalParams): Promise<DesktopsUpdateResponse>;
}

/** Optional parameters. */
export declare interface DesktopsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DesktopsGetResponse = Desktop;

/** Optional parameters. */
export declare interface DesktopsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type DesktopsListNextResponse = DesktopList;

/** Optional parameters. */
export declare interface DesktopsListOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the list operation. */
export declare type DesktopsListResponse = DesktopList;

/** Optional parameters. */
export declare interface DesktopsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Object containing Desktop definitions. */
    desktop?: DesktopPatch;
}

/** Contains response data for the update operation. */
export declare type DesktopsUpdateResponse = Desktop;

export declare class DesktopVirtualizationAPIClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the DesktopVirtualizationAPIClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DesktopVirtualizationAPIClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    operations: Operations;
    workspaces: Workspaces;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    scalingPlans: ScalingPlans;
    scalingPlanPooledSchedules: ScalingPlanPooledSchedules;
    scalingPlanPersonalSchedules: ScalingPlanPersonalSchedules;
    applicationGroups: ApplicationGroups;
    startMenuItems: StartMenuItems;
    applications: Applications;
    desktops: Desktops;
    hostPools: HostPools;
    userSessions: UserSessions;
    sessionHosts: SessionHosts;
    msixPackages: MsixPackages;
    msixImages: MsixImages;
}

/** Optional parameters. */
export declare interface DesktopVirtualizationAPIClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Represents the definition of contents retrieved after expanding the MSIX Image. */
export declare interface ExpandMsixImage extends Resource {
    /** Alias of MSIX Package. */
    packageAlias?: string;
    /** VHD/CIM image path on Network Share. */
    imagePath?: string;
    /** Package Name from appxmanifest.xml. */
    packageName?: string;
    /** Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. */
    packageFamilyName?: string;
    /** Package Full Name from appxmanifest.xml. */
    packageFullName?: string;
    /** User friendly Name to be displayed in the portal. */
    displayName?: string;
    /** Relative Path to the package inside the image. */
    packageRelativePath?: string;
    /** Specifies how to register Package in feed. */
    isRegularRegistration?: boolean;
    /** Make this version of the package the active one across the hostpool. */
    isActive?: boolean;
    /** List of package dependencies. */
    packageDependencies?: MsixPackageDependencies[];
    /** Package Version found in the appxmanifest.xml. */
    version?: string;
    /** Date Package was last updated, found in the appxmanifest.xml. */
    lastUpdated?: Date;
    /** List of package applications. */
    packageApplications?: MsixPackageApplications[];
}

/** List of MSIX package properties retrieved from MSIX Image expansion. */
export declare interface ExpandMsixImageList {
    /** List of MSIX package properties from give MSIX Image. */
    value?: ExpandMsixImage[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for HealthCheckName. \
 * {@link KnownHealthCheckName} can be used interchangeably with HealthCheckName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DomainJoinedCheck**: Verifies the SessionHost is joined to a domain. If this check fails is classified as fatal as no connection can succeed if the SessionHost is not joined to the domain. (Currently Enabled) \
 * **DomainTrustCheck**: Verifies the SessionHost is not experiencing domain trust issues that will prevent authentication on SessionHost at connection time when session is created. If this check fails is classified as fatal as no connection can succeed if we cannot reach the domain for authentication on the SessionHost. (Currently Enabled) \
 * **FSLogixHealthCheck**: Verifies the FSLogix service is up and running to make sure users' profiles are loaded in the session. If this check fails is classified as fatal as even if the connection can succeed, user experience is bad as the user profile cannot be loaded and user will get a temporary profile in the session. (Currently Disabled) \
 * **SxSStackListenerCheck**: Verifies that the SxS stack is up and running so connections can succeed. If this check fails is classified as fatal as no connection can succeed if the SxS stack is not ready. (Currently Enabled) \
 * **UrlsAccessibleCheck**: Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost. These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is unable to store warm path data (logs, operations ...). (Currently Disabled) \
 * **MonitoringAgentCheck**: Verifies that the required Geneva agent is running. If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is missing or running (possibly) older version. (Currently Enabled) \
 * **DomainReachable**: Verifies the domain the SessionHost is joined to is still reachable. If this check fails is classified as fatal as no connection can succeed if the domain the SessionHost is joined is not reachable at the time of connection. (Currently Disabled) \
 * **WebRTCRedirectorCheck**: Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector component is used to optimize video and audio performance in Microsoft Teams. This checks whether the component is still running, and whether there is a higher version available. If this check fails, it is non fatal and the machine still can service connections, main issue may be the WebRTCRedirector component has to be restarted or updated. (Currently Disabled) \
 * **SupportedEncryptionCheck**: Verifies the value of SecurityLayer registration key. If the value is 0 (SecurityLayer.RDP) this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the value is 1 (SecurityLayer.Negotiate) this check fails with Error code = NativeMethodErrorCode.ERROR_SUCCESS and is non fatal. (Currently Disabled) \
 * **MetaDataServiceCheck**: Verifies the metadata service is accessible and return compute properties. (Currently Enabled) \
 * **AppAttachHealthCheck**: Verifies that the AppAttachService is healthy (there were no issues during package staging). The AppAttachService is used to enable the staging\/registration (and eventual deregistration\/destaging) of MSIX apps that have been set up by the tenant admin. This checks whether the component had any failures during package staging. Failures in staging will prevent some MSIX apps from working properly for the end user. If this check fails, it is non fatal and the machine still can service connections, main issue may be certain apps will not work for end-users. (Currently Enabled)
 */
export declare type HealthCheckName = string;

/**
 * Defines values for HealthCheckResult. \
 * {@link KnownHealthCheckResult} can be used interchangeably with HealthCheckResult,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown**: Health check result is not currently known. \
 * **HealthCheckSucceeded**: Health check passed. \
 * **HealthCheckFailed**: Health check failed. \
 * **SessionHostShutdown**: We received a Shutdown notification.
 */
export declare type HealthCheckResult = string;

/** Represents a HostPool definition. */
export declare interface HostPool extends ResourceModelWithAllowedPropertySet {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * ObjectId of HostPool. (internal use)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectId?: string;
    /** Friendly name of HostPool. */
    friendlyName?: string;
    /** Description of HostPool. */
    description?: string;
    /** HostPool type for desktop. */
    hostPoolType: HostPoolType;
    /** PersonalDesktopAssignment type for HostPool. */
    personalDesktopAssignmentType?: PersonalDesktopAssignmentType;
    /** Custom rdp property of HostPool. */
    customRdpProperty?: string;
    /** The max session limit of HostPool. */
    maxSessionLimit?: number;
    /** The type of the load balancer. */
    loadBalancerType: LoadBalancerType;
    /** The ring number of HostPool. */
    ring?: number;
    /** Is validation environment. */
    validationEnvironment?: boolean;
    /** The registration info of HostPool. */
    registrationInfo?: RegistrationInfo;
    /** VM template for sessionhosts configuration within hostpool. */
    vmTemplate?: string;
    /**
     * List of applicationGroup links.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly applicationGroupReferences?: string[];
    /** URL to customer ADFS server for signing WVD SSO certificates. */
    ssoadfsAuthority?: string;
    /** ClientId for the registered Relying Party used to issue WVD SSO certificates. */
    ssoClientId?: string;
    /** Path to Azure KeyVault storing the secret used for communication to ADFS. */
    ssoClientSecretKeyVaultPath?: string;
    /** The type of single sign on Secret Type. */
    ssoSecretType?: SSOSecretType;
    /** The type of preferred application group type, default to Desktop Application Group */
    preferredAppGroupType: PreferredAppGroupType;
    /** The flag to turn on/off StartVMOnConnect feature. */
    startVMOnConnect?: boolean;
    /**
     * Is cloud pc resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cloudPcResource?: boolean;
    /** Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints */
    publicNetworkAccess?: HostpoolPublicNetworkAccess;
    /** The session host configuration for updating agent, monitoring agent, and stack component. */
    agentUpdate?: AgentUpdateProperties;
    /**
     * List of private endpoint connection associated with the specified resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** List of HostPool definitions. */
export declare interface HostPoolList {
    /** List of HostPool definitions. */
    value?: HostPool[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** HostPool properties that can be patched. */
export declare interface HostPoolPatch extends Resource {
    /** tags to be updated */
    tags?: {
        [propertyName: string]: string;
    };
    /** Friendly name of HostPool. */
    friendlyName?: string;
    /** Description of HostPool. */
    description?: string;
    /** Custom rdp property of HostPool. */
    customRdpProperty?: string;
    /** The max session limit of HostPool. */
    maxSessionLimit?: number;
    /** PersonalDesktopAssignment type for HostPool. */
    personalDesktopAssignmentType?: PersonalDesktopAssignmentType;
    /** The type of the load balancer. */
    loadBalancerType?: LoadBalancerType;
    /** The ring number of HostPool. */
    ring?: number;
    /** Is validation environment. */
    validationEnvironment?: boolean;
    /** The registration info of HostPool. */
    registrationInfo?: RegistrationInfoPatch;
    /** VM template for sessionhosts configuration within hostpool. */
    vmTemplate?: string;
    /** URL to customer ADFS server for signing WVD SSO certificates. */
    ssoadfsAuthority?: string;
    /** ClientId for the registered Relying Party used to issue WVD SSO certificates. */
    ssoClientId?: string;
    /** Path to Azure KeyVault storing the secret used for communication to ADFS. */
    ssoClientSecretKeyVaultPath?: string;
    /** The type of single sign on Secret Type. */
    ssoSecretType?: SSOSecretType;
    /** The type of preferred application group type, default to Desktop Application Group */
    preferredAppGroupType?: PreferredAppGroupType;
    /** The flag to turn on/off StartVMOnConnect feature. */
    startVMOnConnect?: boolean;
    /** Enabled to allow this resource to be access from the public network */
    publicNetworkAccess?: HostpoolPublicNetworkAccess;
    /** The session host configuration for updating agent, monitoring agent, and stack component. */
    agentUpdate?: AgentUpdatePatchProperties;
}

/**
 * Defines values for HostpoolPublicNetworkAccess. \
 * {@link KnownHostpoolPublicNetworkAccess} can be used interchangeably with HostpoolPublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled** \
 * **EnabledForSessionHostsOnly** \
 * **EnabledForClientsOnly**
 */
export declare type HostpoolPublicNetworkAccess = string;

/** Interface representing a HostPools. */
export declare interface HostPools {
    /**
     * List hostPools.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: HostPoolsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<HostPool>;
    /**
     * List hostPools in subscription.
     * @param options The options parameters.
     */
    list(options?: HostPoolsListOptionalParams): PagedAsyncIterableIterator<HostPool>;
    /**
     * Get a host pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hostPoolName: string, options?: HostPoolsGetOptionalParams): Promise<HostPoolsGetResponse>;
    /**
     * Create or update a host pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param hostPool Object containing HostPool definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, hostPoolName: string, hostPool: HostPool, options?: HostPoolsCreateOrUpdateOptionalParams): Promise<HostPoolsCreateOrUpdateResponse>;
    /**
     * Remove a host pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hostPoolName: string, options?: HostPoolsDeleteOptionalParams): Promise<void>;
    /**
     * Update a host pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    update(resourceGroupName: string, hostPoolName: string, options?: HostPoolsUpdateOptionalParams): Promise<HostPoolsUpdateResponse>;
    /**
     * Registration token of the host pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    retrieveRegistrationToken(resourceGroupName: string, hostPoolName: string, options?: HostPoolsRetrieveRegistrationTokenOptionalParams): Promise<HostPoolsRetrieveRegistrationTokenResponse>;
}

/** Optional parameters. */
export declare interface HostPoolsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type HostPoolsCreateOrUpdateResponse = HostPool;

/** Optional parameters. */
export declare interface HostPoolsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Force flag to delete sessionHost. */
    force?: boolean;
}

/** Optional parameters. */
export declare interface HostPoolsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type HostPoolsGetResponse = HostPool;

/** Optional parameters. */
export declare interface HostPoolsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type HostPoolsListByResourceGroupNextResponse = HostPoolList;

/** Optional parameters. */
export declare interface HostPoolsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type HostPoolsListByResourceGroupResponse = HostPoolList;

/** Optional parameters. */
export declare interface HostPoolsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type HostPoolsListNextResponse = HostPoolList;

/** Optional parameters. */
export declare interface HostPoolsListOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the list operation. */
export declare type HostPoolsListResponse = HostPoolList;

/** Optional parameters. */
export declare interface HostPoolsRetrieveRegistrationTokenOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the retrieveRegistrationToken operation. */
export declare type HostPoolsRetrieveRegistrationTokenResponse = RegistrationInfo;

/** Optional parameters. */
export declare interface HostPoolsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Object containing HostPool definitions. */
    hostPool?: HostPoolPatch;
}

/** Contains response data for the update operation. */
export declare type HostPoolsUpdateResponse = HostPool;

/**
 * Defines values for HostPoolType. \
 * {@link KnownHostPoolType} can be used interchangeably with HostPoolType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Personal**: Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost. \
 * **Pooled**: Users get a new (random) SessionHost every time it connects to the HostPool. \
 * **BYODesktop**: Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct.
 */
export declare type HostPoolType = string;

/** Identity for the resource. */
export declare interface Identity {
    /**
     * The principal ID of resource identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The identity type. */
    type?: "SystemAssigned";
}

/** Known values of {@link ApplicationGroupType} that the service accepts. */
export declare enum KnownApplicationGroupType {
    /** RemoteApp */
    RemoteApp = "RemoteApp",
    /** Desktop */
    Desktop = "Desktop"
}

/** Known values of {@link ApplicationType} that the service accepts. */
export declare enum KnownApplicationType {
    /** RemoteApp */
    RemoteApp = "RemoteApp",
    /** Desktop */
    Desktop = "Desktop"
}

/** Known values of {@link CommandLineSetting} that the service accepts. */
export declare enum KnownCommandLineSetting {
    /** DoNotAllow */
    DoNotAllow = "DoNotAllow",
    /** Allow */
    Allow = "Allow",
    /** Require */
    Require = "Require"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link HealthCheckName} that the service accepts. */
export declare enum KnownHealthCheckName {
    /** Verifies the SessionHost is joined to a domain. If this check fails is classified as fatal as no connection can succeed if the SessionHost is not joined to the domain. (Currently Enabled) */
    DomainJoinedCheck = "DomainJoinedCheck",
    /** Verifies the SessionHost is not experiencing domain trust issues that will prevent authentication on SessionHost at connection time when session is created. If this check fails is classified as fatal as no connection can succeed if we cannot reach the domain for authentication on the SessionHost. (Currently Enabled) */
    DomainTrustCheck = "DomainTrustCheck",
    /** Verifies the FSLogix service is up and running to make sure users' profiles are loaded in the session. If this check fails is classified as fatal as even if the connection can succeed, user experience is bad as the user profile cannot be loaded and user will get a temporary profile in the session. (Currently Disabled) */
    FSLogixHealthCheck = "FSLogixHealthCheck",
    /** Verifies that the SxS stack is up and running so connections can succeed. If this check fails is classified as fatal as no connection can succeed if the SxS stack is not ready. (Currently Enabled) */
    SxSStackListenerCheck = "SxSStackListenerCheck",
    /** Verifies that the required WVD service and Geneva URLs are reachable from the SessionHost. These URLs are: RdTokenUri, RdBrokerURI, RdDiagnosticsUri and storage blob URLs for agent monitoring (geneva). If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is unable to store warm path data (logs, operations ...). (Currently Disabled) */
    UrlsAccessibleCheck = "UrlsAccessibleCheck",
    /** Verifies that the required Geneva agent is running. If this check fails, it is non fatal and the machine still can service connections, main issue may be that monitoring agent is missing or running (possibly) older version. (Currently Enabled) */
    MonitoringAgentCheck = "MonitoringAgentCheck",
    /** Verifies the domain the SessionHost is joined to is still reachable. If this check fails is classified as fatal as no connection can succeed if the domain the SessionHost is joined is not reachable at the time of connection. (Currently Disabled) */
    DomainReachable = "DomainReachable",
    /** Verifies whether the WebRTCRedirector component is healthy. The WebRTCRedirector component is used to optimize video and audio performance in Microsoft Teams. This checks whether the component is still running, and whether there is a higher version available. If this check fails, it is non fatal and the machine still can service connections, main issue may be the WebRTCRedirector component has to be restarted or updated. (Currently Disabled) */
    WebRTCRedirectorCheck = "WebRTCRedirectorCheck",
    /** Verifies the value of SecurityLayer registration key. If the value is 0 (SecurityLayer.RDP) this check fails with Error code = NativeMethodErrorCode.E_FAIL and is fatal. If the value is 1 (SecurityLayer.Negotiate) this check fails with Error code = NativeMethodErrorCode.ERROR_SUCCESS and is non fatal. (Currently Disabled) */
    SupportedEncryptionCheck = "SupportedEncryptionCheck",
    /** Verifies the metadata service is accessible and return compute properties. (Currently Enabled) */
    MetaDataServiceCheck = "MetaDataServiceCheck",
    /** Verifies that the AppAttachService is healthy (there were no issues during package staging). The AppAttachService is used to enable the staging\/registration (and eventual deregistration\/destaging) of MSIX apps that have been set up by the tenant admin. This checks whether the component had any failures during package staging. Failures in staging will prevent some MSIX apps from working properly for the end user. If this check fails, it is non fatal and the machine still can service connections, main issue may be certain apps will not work for end-users. (Currently Enabled) */
    AppAttachHealthCheck = "AppAttachHealthCheck"
}

/** Known values of {@link HealthCheckResult} that the service accepts. */
export declare enum KnownHealthCheckResult {
    /** Health check result is not currently known. */
    Unknown = "Unknown",
    /** Health check passed. */
    HealthCheckSucceeded = "HealthCheckSucceeded",
    /** Health check failed. */
    HealthCheckFailed = "HealthCheckFailed",
    /** We received a Shutdown notification. */
    SessionHostShutdown = "SessionHostShutdown"
}

/** Known values of {@link HostpoolPublicNetworkAccess} that the service accepts. */
export declare enum KnownHostpoolPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled",
    /** EnabledForSessionHostsOnly */
    EnabledForSessionHostsOnly = "EnabledForSessionHostsOnly",
    /** EnabledForClientsOnly */
    EnabledForClientsOnly = "EnabledForClientsOnly"
}

/** Known values of {@link HostPoolType} that the service accepts. */
export declare enum KnownHostPoolType {
    /** Users will be assigned a SessionHost either by administrators (PersonalDesktopAssignmentType = Direct) or upon connecting to the pool (PersonalDesktopAssignmentType = Automatic). They will always be redirected to their assigned SessionHost. */
    Personal = "Personal",
    /** Users get a new (random) SessionHost every time it connects to the HostPool. */
    Pooled = "Pooled",
    /** Users assign their own machines, load balancing logic remains the same as Personal. PersonalDesktopAssignmentType must be Direct. */
    BYODesktop = "BYODesktop"
}

/** Known values of {@link LoadBalancerType} that the service accepts. */
export declare enum KnownLoadBalancerType {
    /** BreadthFirst */
    BreadthFirst = "BreadthFirst",
    /** DepthFirst */
    DepthFirst = "DepthFirst",
    /** Persistent */
    Persistent = "Persistent"
}

/** Known values of {@link PersonalDesktopAssignmentType} that the service accepts. */
export declare enum KnownPersonalDesktopAssignmentType {
    /** Automatic */
    Automatic = "Automatic",
    /** Direct */
    Direct = "Direct"
}

/** Known values of {@link PreferredAppGroupType} that the service accepts. */
export declare enum KnownPreferredAppGroupType {
    /** None */
    None = "None",
    /** Desktop */
    Desktop = "Desktop",
    /** RailApplications */
    RailApplications = "RailApplications"
}

/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export declare enum KnownPrivateEndpointConnectionProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Creating */
    Creating = "Creating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link PrivateEndpointServiceConnectionStatus} that the service accepts. */
export declare enum KnownPrivateEndpointServiceConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link RegistrationTokenOperation} that the service accepts. */
export declare enum KnownRegistrationTokenOperation {
    /** Delete */
    Delete = "Delete",
    /** None */
    None = "None",
    /** Update */
    Update = "Update"
}

/** Known values of {@link RemoteApplicationType} that the service accepts. */
export declare enum KnownRemoteApplicationType {
    /** InBuilt */
    InBuilt = "InBuilt",
    /** MsixApplication */
    MsixApplication = "MsixApplication"
}

/** Known values of {@link ScalingHostPoolType} that the service accepts. */
export declare enum KnownScalingHostPoolType {
    /** Users get a new (random) SessionHost every time it connects to the HostPool. */
    Pooled = "Pooled"
}

/** Known values of {@link ScalingScheduleDaysOfWeekItem} that the service accepts. */
export declare enum KnownScalingScheduleDaysOfWeekItem {
    /** Sunday */
    Sunday = "Sunday",
    /** Monday */
    Monday = "Monday",
    /** Tuesday */
    Tuesday = "Tuesday",
    /** Wednesday */
    Wednesday = "Wednesday",
    /** Thursday */
    Thursday = "Thursday",
    /** Friday */
    Friday = "Friday",
    /** Saturday */
    Saturday = "Saturday"
}

/** Known values of {@link SessionHandlingOperation} that the service accepts. */
export declare enum KnownSessionHandlingOperation {
    /** None */
    None = "None",
    /** Deallocate */
    Deallocate = "Deallocate",
    /** Hibernate */
    Hibernate = "Hibernate"
}

/** Known values of {@link SessionHostComponentUpdateType} that the service accepts. */
export declare enum KnownSessionHostComponentUpdateType {
    /** Agent and other agent side components are delivery schedule is controlled by WVD Infra. */
    Default = "Default",
    /** TenantAdmin have opted in for Scheduled Component Update feature. */
    Scheduled = "Scheduled"
}

/** Known values of {@link SessionHostLoadBalancingAlgorithm} that the service accepts. */
export declare enum KnownSessionHostLoadBalancingAlgorithm {
    /** BreadthFirst */
    BreadthFirst = "BreadthFirst",
    /** DepthFirst */
    DepthFirst = "DepthFirst"
}

/** Known values of {@link SessionState} that the service accepts. */
export declare enum KnownSessionState {
    /** Unknown */
    Unknown = "Unknown",
    /** Active */
    Active = "Active",
    /** Disconnected */
    Disconnected = "Disconnected",
    /** Pending */
    Pending = "Pending",
    /** LogOff */
    LogOff = "LogOff",
    /** UserProfileDiskMounted */
    UserProfileDiskMounted = "UserProfileDiskMounted"
}

/** Known values of {@link SetStartVMOnConnect} that the service accepts. */
export declare enum KnownSetStartVMOnConnect {
    /** Enable */
    Enable = "Enable",
    /** Disable */
    Disable = "Disable"
}

/** Known values of {@link SSOSecretType} that the service accepts. */
export declare enum KnownSSOSecretType {
    /** SharedKey */
    SharedKey = "SharedKey",
    /** Certificate */
    Certificate = "Certificate",
    /** SharedKeyInKeyVault */
    SharedKeyInKeyVault = "SharedKeyInKeyVault",
    /** CertificateInKeyVault */
    CertificateInKeyVault = "CertificateInKeyVault"
}

/** Known values of {@link StartupBehavior} that the service accepts. */
export declare enum KnownStartupBehavior {
    /** Session hosts will not be started by the service. This setting depends on Start VM on Connect to be enabled to start the session hosts. */
    None = "None",
    /** Session hosts with an assigned user will be started during Ramp Up */
    WithAssignedUser = "WithAssignedUser",
    /** All personal session hosts in the hostpool will be started during ramp up. */
    All = "All"
}

/** Known values of {@link Status} that the service accepts. */
export declare enum KnownStatus {
    /** Session Host has passed all the health checks and is available to handle connections. */
    Available = "Available",
    /** Session Host is either turned off or has failed critical health checks which is causing service not to be able to route connections to this session host. Note this replaces previous 'NoHeartBeat' status. */
    Unavailable = "Unavailable",
    /** Session Host is shutdown - RD Agent reported session host to be stopped or deallocated. */
    Shutdown = "Shutdown",
    /** The Session Host is unavailable because it is currently disconnected. */
    Disconnected = "Disconnected",
    /** Session Host is unavailable because currently an upgrade of RDAgent\/side-by-side stack is in progress. Note: this state will be removed once the upgrade completes and the host is able to accept connections. */
    Upgrading = "Upgrading",
    /** Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.) failed. */
    UpgradeFailed = "UpgradeFailed",
    /** The Session Host is not heart beating. */
    NoHeartbeat = "NoHeartbeat",
    /** SessionHost is not joined to domain. */
    NotJoinedToDomain = "NotJoinedToDomain",
    /** SessionHost's domain trust relationship lost */
    DomainTrustRelationshipLost = "DomainTrustRelationshipLost",
    /** SxS stack installed on the SessionHost is not ready to receive connections. */
    SxSStackListenerNotReady = "SxSStackListenerNotReady",
    /** FSLogix is in an unhealthy state on the session host. */
    FSLogixNotHealthy = "FSLogixNotHealthy",
    /** New status to inform admins that the health on their endpoint needs to be fixed. The connections might not fail, as these issues are not fatal. */
    NeedsAssistance = "NeedsAssistance"
}

/** Known values of {@link StopHostsWhen} that the service accepts. */
export declare enum KnownStopHostsWhen {
    /** ZeroSessions */
    ZeroSessions = "ZeroSessions",
    /** ZeroActiveSessions */
    ZeroActiveSessions = "ZeroActiveSessions"
}

/** Known values of {@link UpdateState} that the service accepts. */
export declare enum KnownUpdateState {
    /** Initial */
    Initial = "Initial",
    /** Pending */
    Pending = "Pending",
    /** Started */
    Started = "Started",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed"
}

/**
 * Defines values for LoadBalancerType. \
 * {@link KnownLoadBalancerType} can be used interchangeably with LoadBalancerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BreadthFirst** \
 * **DepthFirst** \
 * **Persistent**
 */
export declare type LoadBalancerType = string;

/** Specifications of the Log for Azure Monitoring */
export declare interface LogSpecification {
    /** Name of the log */
    name?: string;
    /** Localized friendly display name of the log */
    displayName?: string;
    /** Blob duration of the log */
    blobDuration?: string;
}

/** Maintenance window starting hour and day of week. */
export declare interface MaintenanceWindowPatchProperties {
    /** The update start hour of the day. (0 - 23) */
    hour?: number;
    /** Day of the week. */
    dayOfWeek?: DayOfWeek;
}

/** Maintenance window starting hour and day of week. */
export declare interface MaintenanceWindowProperties {
    /** The update start hour of the day. (0 - 23) */
    hour?: number;
    /** Day of the week. */
    dayOfWeek?: DayOfWeek;
}

/** Interface representing a MsixImages. */
export declare interface MsixImages {
    /**
     * Expands and Lists MSIX packages in an Image, given the Image Path.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixImageURI Object containing URI to MSIX Image
     * @param options The options parameters.
     */
    listExpand(resourceGroupName: string, hostPoolName: string, msixImageURI: MsixImageURI, options?: MsixImagesExpandOptionalParams): PagedAsyncIterableIterator<ExpandMsixImage>;
}

/** Optional parameters. */
export declare interface MsixImagesExpandNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the expandNext operation. */
export declare type MsixImagesExpandNextResponse = ExpandMsixImageList;

/** Optional parameters. */
export declare interface MsixImagesExpandOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the expand operation. */
export declare type MsixImagesExpandResponse = ExpandMsixImageList;

/** Represents URI referring to MSIX Image */
export declare interface MsixImageURI {
    /** URI to Image */
    uri?: string;
}

/** Schema for MSIX Package properties. */
export declare interface MsixPackage extends Resource {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** VHD/CIM image path on Network Share. */
    imagePath?: string;
    /** Package Name from appxmanifest.xml. */
    packageName?: string;
    /** Package Family Name from appxmanifest.xml. Contains Package Name and Publisher name. */
    packageFamilyName?: string;
    /** User friendly Name to be displayed in the portal. */
    displayName?: string;
    /** Relative Path to the package inside the image. */
    packageRelativePath?: string;
    /** Specifies how to register Package in feed. */
    isRegularRegistration?: boolean;
    /** Make this version of the package the active one across the hostpool. */
    isActive?: boolean;
    /** List of package dependencies. */
    packageDependencies?: MsixPackageDependencies[];
    /** Package Version found in the appxmanifest.xml. */
    version?: string;
    /** Date Package was last updated, found in the appxmanifest.xml. */
    lastUpdated?: Date;
    /** List of package applications. */
    packageApplications?: MsixPackageApplications[];
}

/** Schema for MSIX Package Application properties. */
export declare interface MsixPackageApplications {
    /** Package Application Id, found in appxmanifest.xml. */
    appId?: string;
    /** Description of Package Application. */
    description?: string;
    /** Used to activate Package Application. Consists of Package Name and ApplicationID. Found in appxmanifest.xml. */
    appUserModelID?: string;
    /** User friendly name. */
    friendlyName?: string;
    /** User friendly name. */
    iconImageName?: string;
    /** the icon a 64 bit string as a byte array. */
    rawIcon?: Uint8Array;
    /** the icon a 64 bit string as a byte array. */
    rawPng?: Uint8Array;
}

/** Schema for MSIX Package Dependencies properties. */
export declare interface MsixPackageDependencies {
    /** Name of package dependency. */
    dependencyName?: string;
    /** Name of dependency publisher. */
    publisher?: string;
    /** Dependency version required. */
    minVersion?: string;
}

/** List of MSIX Package definitions. */
export declare interface MsixPackageList {
    /** List of MSIX Package definitions. */
    value?: MsixPackage[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** MSIX Package properties that can be patched. */
export declare interface MsixPackagePatch extends Resource {
    /** Set a version of the package to be active across hostpool. */
    isActive?: boolean;
    /** Set Registration mode. Regular or Delayed. */
    isRegularRegistration?: boolean;
    /** Display name for MSIX Package. */
    displayName?: string;
}

/** Interface representing a MsixPackages. */
export declare interface MsixPackages {
    /**
     * List MSIX packages in hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    list(resourceGroupName: string, hostPoolName: string, options?: MsixPackagesListOptionalParams): PagedAsyncIterableIterator<MsixPackage>;
    /**
     * Get a msixpackage.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within
     *                            specified hostpool
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hostPoolName: string, msixPackageFullName: string, options?: MsixPackagesGetOptionalParams): Promise<MsixPackagesGetResponse>;
    /**
     * Create or update a MSIX package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within
     *                            specified hostpool
     * @param msixPackage Object containing  MSIX Package definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, hostPoolName: string, msixPackageFullName: string, msixPackage: MsixPackage, options?: MsixPackagesCreateOrUpdateOptionalParams): Promise<MsixPackagesCreateOrUpdateResponse>;
    /**
     * Remove an MSIX Package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within
     *                            specified hostpool
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hostPoolName: string, msixPackageFullName: string, options?: MsixPackagesDeleteOptionalParams): Promise<void>;
    /**
     * Update an  MSIX Package.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param msixPackageFullName The version specific package full name of the MSIX package within
     *                            specified hostpool
     * @param options The options parameters.
     */
    update(resourceGroupName: string, hostPoolName: string, msixPackageFullName: string, options?: MsixPackagesUpdateOptionalParams): Promise<MsixPackagesUpdateResponse>;
}

/** Optional parameters. */
export declare interface MsixPackagesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type MsixPackagesCreateOrUpdateResponse = MsixPackage;

/** Optional parameters. */
export declare interface MsixPackagesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface MsixPackagesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type MsixPackagesGetResponse = MsixPackage;

/** Optional parameters. */
export declare interface MsixPackagesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type MsixPackagesListNextResponse = MsixPackageList;

/** Optional parameters. */
export declare interface MsixPackagesListOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the list operation. */
export declare type MsixPackagesListResponse = MsixPackageList;

/** Optional parameters. */
export declare interface MsixPackagesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Object containing MSIX Package definitions. */
    msixPackage?: MsixPackagePatch;
}

/** Contains response data for the update operation. */
export declare type MsixPackagesUpdateResponse = MsixPackage;

/** Properties of the operation */
export declare interface OperationProperties {
    /** Service specification payload */
    serviceSpecification?: ServiceSpecification;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * List all of the available operations the Desktop Virtualization resource provider supports.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<ResourceProviderOperation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = ResourceProviderOperationList;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = ResourceProviderOperationList;

/**
 * Defines values for PersonalDesktopAssignmentType. \
 * {@link KnownPersonalDesktopAssignmentType} can be used interchangeably with PersonalDesktopAssignmentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Automatic** \
 * **Direct**
 */
export declare type PersonalDesktopAssignmentType = string;

/** Plan for the resource. */
export declare interface Plan {
    /** A user defined name of the 3rd Party Artifact that is being procured. */
    name: string;
    /** The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic */
    publisher: string;
    /** The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. */
    product: string;
    /** A publisher provided promotion code as provisioned in Data Market for the said product/artifact. */
    promotionCode?: string;
    /** The version of the desired product/artifact. */
    version?: string;
}

/**
 * Defines values for PreferredAppGroupType. \
 * {@link KnownPreferredAppGroupType} can be used interchangeably with PreferredAppGroupType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Desktop** \
 * **RailApplications**
 */
export declare type PreferredAppGroupType = string;

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /**
     * The ARM identifier for Private Endpoint
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnection extends Resource {
    /** The resource of private end point. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of the private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** List of private endpoint connection associated with the specified storage account */
export declare interface PrivateEndpointConnectionListResultWithSystemData {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnectionWithSystemData[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for PrivateEndpointConnectionProvisioningState. \
 * {@link KnownPrivateEndpointConnectionProvisioningState} can be used interchangeably with PrivateEndpointConnectionProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Creating** \
 * **Deleting** \
 * **Failed**
 */
export declare type PrivateEndpointConnectionProvisioningState = string;

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * List private endpoint connections.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: PrivateEndpointConnectionsListByWorkspaceOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnectionWithSystemData>;
    /**
     * List private endpoint connections associated with hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    listByHostPool(resourceGroupName: string, hostPoolName: string, options?: PrivateEndpointConnectionsListByHostPoolOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnectionWithSystemData>;
    /**
     * Get a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    getByWorkspace(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetByWorkspaceOptionalParams): Promise<PrivateEndpointConnectionsGetByWorkspaceResponse>;
    /**
     * Remove a connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    deleteByWorkspace(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteByWorkspaceOptionalParams): Promise<void>;
    /**
     * Approve or reject a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param connection Object containing the updated connection.
     * @param options The options parameters.
     */
    updateByWorkspace(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, connection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsUpdateByWorkspaceOptionalParams): Promise<PrivateEndpointConnectionsUpdateByWorkspaceResponse>;
    /**
     * Get a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    getByHostPool(resourceGroupName: string, hostPoolName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetByHostPoolOptionalParams): Promise<PrivateEndpointConnectionsGetByHostPoolResponse>;
    /**
     * Remove a connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param options The options parameters.
     */
    deleteByHostPool(resourceGroupName: string, hostPoolName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteByHostPoolOptionalParams): Promise<void>;
    /**
     * Approve or reject a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param privateEndpointConnectionName The name of the private endpoint connection associated with the
     *                                      Azure resource
     * @param connection Object containing the updated connection.
     * @param options The options parameters.
     */
    updateByHostPool(resourceGroupName: string, hostPoolName: string, privateEndpointConnectionName: string, connection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsUpdateByHostPoolOptionalParams): Promise<PrivateEndpointConnectionsUpdateByHostPoolResponse>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteByHostPoolOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetByHostPoolOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByHostPool operation. */
export declare type PrivateEndpointConnectionsGetByHostPoolResponse = PrivateEndpointConnectionWithSystemData;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByWorkspace operation. */
export declare type PrivateEndpointConnectionsGetByWorkspaceResponse = PrivateEndpointConnectionWithSystemData;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByHostPoolNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHostPoolNext operation. */
export declare type PrivateEndpointConnectionsListByHostPoolNextResponse = PrivateEndpointConnectionListResultWithSystemData;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByHostPoolOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the listByHostPool operation. */
export declare type PrivateEndpointConnectionsListByHostPoolResponse = PrivateEndpointConnectionListResultWithSystemData;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type PrivateEndpointConnectionsListByWorkspaceNextResponse = PrivateEndpointConnectionListResultWithSystemData;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type PrivateEndpointConnectionsListByWorkspaceResponse = PrivateEndpointConnectionListResultWithSystemData;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsUpdateByHostPoolOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateByHostPool operation. */
export declare type PrivateEndpointConnectionsUpdateByHostPoolResponse = PrivateEndpointConnectionWithSystemData;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsUpdateByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateByWorkspace operation. */
export declare type PrivateEndpointConnectionsUpdateByWorkspaceResponse = PrivateEndpointConnectionWithSystemData;

/** The Private Endpoint Connection resource. */
export declare interface PrivateEndpointConnectionWithSystemData extends PrivateEndpointConnection {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/**
 * Defines values for PrivateEndpointServiceConnectionStatus. \
 * {@link KnownPrivateEndpointServiceConnectionStatus} can be used interchangeably with PrivateEndpointServiceConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected**
 */
export declare type PrivateEndpointServiceConnectionStatus = string;

/** A private link resource */
export declare interface PrivateLinkResource extends Resource {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /** The private link resource Private link DNS zone name. */
    requiredZoneNames?: string[];
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /** Array of private link resources */
    value?: PrivateLinkResource[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * List the private link resources available for this workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: PrivateLinkResourcesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
    /**
     * List the private link resources available for this hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    listByHostPool(resourceGroupName: string, hostPoolName: string, options?: PrivateLinkResourcesListByHostPoolOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByHostPoolNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHostPoolNext operation. */
export declare type PrivateLinkResourcesListByHostPoolNextResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByHostPoolOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the listByHostPool operation. */
export declare type PrivateLinkResourcesListByHostPoolResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type PrivateLinkResourcesListByWorkspaceNextResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the listByWorkspace operation. */
export declare type PrivateLinkResourcesListByWorkspaceResponse = PrivateLinkResourceListResult;

/** A collection of information about the state of the connection between service consumer and provider. */
export declare interface PrivateLinkServiceConnectionState {
    /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
    status?: PrivateEndpointServiceConnectionStatus;
    /** The reason for approval/rejection of the connection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/** Represents a RegistrationInfo definition. */
export declare interface RegistrationInfo {
    /** Expiration time of registration token. */
    expirationTime?: Date;
    /** The registration token base64 encoded string. */
    token?: string;
    /** The type of resetting the token. */
    registrationTokenOperation?: RegistrationTokenOperation;
}

/** Represents a RegistrationInfo definition. */
export declare interface RegistrationInfoPatch {
    /** Expiration time of registration token. */
    expirationTime?: Date;
    /** The type of resetting the token. */
    registrationTokenOperation?: RegistrationTokenOperation;
}

/**
 * Defines values for RegistrationTokenOperation. \
 * {@link KnownRegistrationTokenOperation} can be used interchangeably with RegistrationTokenOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Delete** \
 * **None** \
 * **Update**
 */
export declare type RegistrationTokenOperation = string;

/**
 * Defines values for RemoteApplicationType. \
 * {@link KnownRemoteApplicationType} can be used interchangeably with RemoteApplicationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InBuilt** \
 * **MsixApplication**
 */
export declare type RemoteApplicationType = string;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set. */
export declare interface ResourceModelWithAllowedPropertySet {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The geo-location where the resource lives */
    location?: string;
    /** The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource. */
    managedBy?: string;
    /** Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value. */
    kind?: string;
    /**
     * The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    identity?: ResourceModelWithAllowedPropertySetIdentity;
    sku?: ResourceModelWithAllowedPropertySetSku;
    plan?: ResourceModelWithAllowedPropertySetPlan;
}

export declare interface ResourceModelWithAllowedPropertySetIdentity extends Identity {
}

export declare interface ResourceModelWithAllowedPropertySetPlan extends Plan {
}

export declare interface ResourceModelWithAllowedPropertySetSku extends Sku {
}

/** Supported operation of this resource provider. */
export declare interface ResourceProviderOperation {
    /** Operation name, in format of {provider}/{resource}/{operation} */
    name?: string;
    /** Display metadata associated with the operation. */
    display?: ResourceProviderOperationDisplay;
    /** Is a data action. */
    isDataAction?: boolean;
    /** Properties of the operation */
    properties?: OperationProperties;
}

/** Display metadata associated with the operation. */
export declare interface ResourceProviderOperationDisplay {
    /** Resource provider: Microsoft Desktop Virtualization. */
    provider?: string;
    /** Resource on which the operation is performed. */
    resource?: string;
    /** Type of operation: get, read, delete, etc. */
    operation?: string;
    /** Description of this operation. */
    description?: string;
}

/** Result of the request to list operations. */
export declare interface ResourceProviderOperationList {
    /** List of operations supported by this resource provider. */
    value?: ResourceProviderOperation[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Scaling plan reference to hostpool. */
export declare interface ScalingHostPoolReference {
    /** Arm path of referenced hostpool. */
    hostPoolArmPath?: string;
    /** Is the scaling plan enabled for this hostpool. */
    scalingPlanEnabled?: boolean;
}

/**
 * Defines values for ScalingHostPoolType. \
 * {@link KnownScalingHostPoolType} can be used interchangeably with ScalingHostPoolType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pooled**: Users get a new (random) SessionHost every time it connects to the HostPool.
 */
export declare type ScalingHostPoolType = string;

/** Represents a scaling plan definition. */
export declare interface ScalingPlan extends ResourceModelWithAllowedPropertySet {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * ObjectId of scaling plan. (internal use)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectId?: string;
    /** Description of scaling plan. */
    description?: string;
    /** User friendly name of scaling plan. */
    friendlyName?: string;
    /** Timezone of the scaling plan. */
    timeZone: string;
    /** HostPool type for desktop. */
    hostPoolType?: ScalingHostPoolType;
    /** Exclusion tag for scaling plan. */
    exclusionTag?: string;
    /** List of ScalingPlanPooledSchedule definitions. */
    schedules?: ScalingSchedule[];
    /** List of ScalingHostPoolReference definitions. */
    hostPoolReferences?: ScalingHostPoolReference[];
}

/** List of scaling plan definitions. */
export declare interface ScalingPlanList {
    /** List of scaling plan definitions. */
    value?: ScalingPlan[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Scaling plan properties that can be patched. */
export declare interface ScalingPlanPatch {
    /** tags to be updated */
    tags?: {
        [propertyName: string]: string;
    };
    /** Description of scaling plan. */
    description?: string;
    /** User friendly name of scaling plan. */
    friendlyName?: string;
    /** Timezone of the scaling plan. */
    timeZone?: string;
    /** Exclusion tag for scaling plan. */
    exclusionTag?: string;
    /** List of ScalingSchedule definitions. */
    schedules?: ScalingSchedule[];
    /** List of ScalingHostPoolReference definitions. */
    hostPoolReferences?: ScalingHostPoolReference[];
}

/** Represents a ScalingPlanPersonalSchedule definition. */
export declare interface ScalingPlanPersonalSchedule extends ProxyResource {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Set of days of the week on which this schedule is active. */
    daysOfWeek?: DayOfWeek[];
    /** Starting time for ramp up period. */
    rampUpStartTime?: Time;
    /** The desired startup behavior during the ramp up period for personal vms in the hostpool. */
    rampUpAutoStartHosts?: StartupBehavior;
    /** The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually. */
    rampUpStartVMOnConnect?: SetStartVMOnConnect;
    /** Action to be taken after a user disconnect during the ramp up period. */
    rampUpActionOnDisconnect?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period. */
    rampUpMinutesToWaitOnDisconnect?: number;
    /** Action to be taken after a logoff during the ramp up period. */
    rampUpActionOnLogoff?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period. */
    rampUpMinutesToWaitOnLogoff?: number;
    /** Starting time for peak period. */
    peakStartTime?: Time;
    /** The desired configuration of Start VM On Connect for the hostpool during the peak phase. */
    peakStartVMOnConnect?: SetStartVMOnConnect;
    /** Action to be taken after a user disconnect during the peak period. */
    peakActionOnDisconnect?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period. */
    peakMinutesToWaitOnDisconnect?: number;
    /** Action to be taken after a logoff during the peak period. */
    peakActionOnLogoff?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period. */
    peakMinutesToWaitOnLogoff?: number;
    /** Starting time for ramp down period. */
    rampDownStartTime?: Time;
    /** The desired configuration of Start VM On Connect for the hostpool during the ramp down phase. */
    rampDownStartVMOnConnect?: SetStartVMOnConnect;
    /** Action to be taken after a user disconnect during the ramp down period. */
    rampDownActionOnDisconnect?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period. */
    rampDownMinutesToWaitOnDisconnect?: number;
    /** Action to be taken after a logoff during the ramp down period. */
    rampDownActionOnLogoff?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period. */
    rampDownMinutesToWaitOnLogoff?: number;
    /** Starting time for off-peak period. */
    offPeakStartTime?: Time;
    /** The desired configuration of Start VM On Connect for the hostpool during the off-peak phase. */
    offPeakStartVMOnConnect?: SetStartVMOnConnect;
    /** Action to be taken after a user disconnect during the off-peak period. */
    offPeakActionOnDisconnect?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period. */
    offPeakMinutesToWaitOnDisconnect?: number;
    /** Action to be taken after a logoff during the off-peak period. */
    offPeakActionOnLogoff?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period. */
    offPeakMinutesToWaitOnLogoff?: number;
}

/** List of ScalingPlanPersonalSchedule definitions. */
export declare interface ScalingPlanPersonalScheduleList {
    /** List of ScalingPlanPersonalSchedule definitions. */
    value?: ScalingPlanPersonalSchedule[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** ScalingPlanPersonalSchedule properties that can be patched. */
export declare interface ScalingPlanPersonalSchedulePatch {
    /** Set of days of the week on which this schedule is active. */
    daysOfWeek?: DayOfWeek[];
    /** Starting time for ramp up period. */
    rampUpStartTime?: Time;
    /** The desired startup behavior during the ramp up period for personal vms in the hostpool. */
    rampUpAutoStartHosts?: StartupBehavior;
    /** The desired configuration of Start VM On Connect for the hostpool during the ramp up phase. If this is disabled, session hosts must be turned on using rampUpAutoStartHosts or by turning them on manually. */
    rampUpStartVMOnConnect?: SetStartVMOnConnect;
    /** Action to be taken after a user disconnect during the ramp up period. */
    rampUpActionOnDisconnect?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp up period. */
    rampUpMinutesToWaitOnDisconnect?: number;
    /** Action to be taken after a logoff during the ramp up period. */
    rampUpActionOnLogoff?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp up period. */
    rampUpMinutesToWaitOnLogoff?: number;
    /** Starting time for peak period. */
    peakStartTime?: Time;
    /** The desired configuration of Start VM On Connect for the hostpool during the peak phase. */
    peakStartVMOnConnect?: SetStartVMOnConnect;
    /** Action to be taken after a user disconnect during the peak period. */
    peakActionOnDisconnect?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the peak period. */
    peakMinutesToWaitOnDisconnect?: number;
    /** Action to be taken after a logoff during the peak period. */
    peakActionOnLogoff?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user logs off during the peak period. */
    peakMinutesToWaitOnLogoff?: number;
    /** Starting time for ramp down period. */
    rampDownStartTime?: Time;
    /** The desired configuration of Start VM On Connect for the hostpool during the ramp down phase. */
    rampDownStartVMOnConnect?: SetStartVMOnConnect;
    /** Action to be taken after a user disconnect during the ramp down period. */
    rampDownActionOnDisconnect?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the ramp down period. */
    rampDownMinutesToWaitOnDisconnect?: number;
    /** Action to be taken after a logoff during the ramp down period. */
    rampDownActionOnLogoff?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user logs off during the ramp down period. */
    rampDownMinutesToWaitOnLogoff?: number;
    /** Starting time for off-peak period. */
    offPeakStartTime?: Time;
    /** The desired configuration of Start VM On Connect for the hostpool during the off-peak phase. */
    offPeakStartVMOnConnect?: SetStartVMOnConnect;
    /** Action to be taken after a user disconnect during the off-peak period. */
    offPeakActionOnDisconnect?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user disconnects during the off-peak period. */
    offPeakMinutesToWaitOnDisconnect?: number;
    /** Action to be taken after a logoff during the off-peak period. */
    offPeakActionOnLogoff?: SessionHandlingOperation;
    /** The time in minutes to wait before performing the desired session handling action when a user logs off during the off-peak period. */
    offPeakMinutesToWaitOnLogoff?: number;
}

/** Interface representing a ScalingPlanPersonalSchedules. */
export declare interface ScalingPlanPersonalSchedules {
    /**
     * List ScalingPlanPersonalSchedules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, scalingPlanName: string, options?: ScalingPlanPersonalSchedulesListOptionalParams): PagedAsyncIterableIterator<ScalingPlanPersonalSchedule>;
    /**
     * Get a ScalingPlanPersonalSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    get(resourceGroupName: string, scalingPlanName: string, scalingPlanScheduleName: string, options?: ScalingPlanPersonalSchedulesGetOptionalParams): Promise<ScalingPlanPersonalSchedulesGetResponse>;
    /**
     * Create or update a ScalingPlanPersonalSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param scalingPlanSchedule Object containing ScalingPlanPersonalSchedule definitions.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, scalingPlanName: string, scalingPlanScheduleName: string, scalingPlanSchedule: ScalingPlanPersonalSchedule, options?: ScalingPlanPersonalSchedulesCreateOptionalParams): Promise<ScalingPlanPersonalSchedulesCreateResponse>;
    /**
     * Remove a ScalingPlanPersonalSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, scalingPlanName: string, scalingPlanScheduleName: string, options?: ScalingPlanPersonalSchedulesDeleteOptionalParams): Promise<void>;
    /**
     * Update a ScalingPlanPersonalSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    update(resourceGroupName: string, scalingPlanName: string, scalingPlanScheduleName: string, options?: ScalingPlanPersonalSchedulesUpdateOptionalParams): Promise<ScalingPlanPersonalSchedulesUpdateResponse>;
}

/** Optional parameters. */
export declare interface ScalingPlanPersonalSchedulesCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type ScalingPlanPersonalSchedulesCreateResponse = ScalingPlanPersonalSchedule;

/** Optional parameters. */
export declare interface ScalingPlanPersonalSchedulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ScalingPlanPersonalSchedulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ScalingPlanPersonalSchedulesGetResponse = ScalingPlanPersonalSchedule;

/** Optional parameters. */
export declare interface ScalingPlanPersonalSchedulesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ScalingPlanPersonalSchedulesListNextResponse = ScalingPlanPersonalScheduleList;

/** Optional parameters. */
export declare interface ScalingPlanPersonalSchedulesListOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the list operation. */
export declare type ScalingPlanPersonalSchedulesListResponse = ScalingPlanPersonalScheduleList;

/** Optional parameters. */
export declare interface ScalingPlanPersonalSchedulesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Object containing ScalingPlanPersonalSchedule definitions. */
    scalingPlanSchedule?: ScalingPlanPersonalSchedulePatch;
}

/** Contains response data for the update operation. */
export declare type ScalingPlanPersonalSchedulesUpdateResponse = ScalingPlanPersonalSchedule;

/** Represents a ScalingPlanPooledSchedule definition. */
export declare interface ScalingPlanPooledSchedule extends Resource {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** Set of days of the week on which this schedule is active. */
    daysOfWeek?: DayOfWeek[];
    /** Starting time for ramp up period. */
    rampUpStartTime?: Time;
    /** Load balancing algorithm for ramp up period. */
    rampUpLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
    /** Minimum host percentage for ramp up period. */
    rampUpMinimumHostsPct?: number;
    /** Capacity threshold for ramp up period. */
    rampUpCapacityThresholdPct?: number;
    /** Starting time for peak period. */
    peakStartTime?: Time;
    /** Load balancing algorithm for peak period. */
    peakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
    /** Starting time for ramp down period. */
    rampDownStartTime?: Time;
    /** Load balancing algorithm for ramp down period. */
    rampDownLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
    /** Minimum host percentage for ramp down period. */
    rampDownMinimumHostsPct?: number;
    /** Capacity threshold for ramp down period. */
    rampDownCapacityThresholdPct?: number;
    /** Should users be logged off forcefully from hosts. */
    rampDownForceLogoffUsers?: boolean;
    /** Specifies when to stop hosts during ramp down period. */
    rampDownStopHostsWhen?: StopHostsWhen;
    /** Number of minutes to wait to stop hosts during ramp down period. */
    rampDownWaitTimeMinutes?: number;
    /** Notification message for users during ramp down period. */
    rampDownNotificationMessage?: string;
    /** Starting time for off-peak period. */
    offPeakStartTime?: Time;
    /** Load balancing algorithm for off-peak period. */
    offPeakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
}

/** List of ScalingPlanPooledSchedule definitions. */
export declare interface ScalingPlanPooledScheduleList {
    /** List of ScalingPlanPooledSchedule definitions. */
    value?: ScalingPlanPooledSchedule[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** ScalingPlanPooledSchedule properties that can be patched. */
export declare interface ScalingPlanPooledSchedulePatch extends Resource {
    /** Set of days of the week on which this schedule is active. */
    daysOfWeek?: DayOfWeek[];
    /** Starting time for ramp up period. */
    rampUpStartTime?: Time;
    /** Load balancing algorithm for ramp up period. */
    rampUpLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
    /** Minimum host percentage for ramp up period. */
    rampUpMinimumHostsPct?: number;
    /** Capacity threshold for ramp up period. */
    rampUpCapacityThresholdPct?: number;
    /** Starting time for peak period. */
    peakStartTime?: Time;
    /** Load balancing algorithm for peak period. */
    peakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
    /** Starting time for ramp down period. */
    rampDownStartTime?: Time;
    /** Load balancing algorithm for ramp down period. */
    rampDownLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
    /** Minimum host percentage for ramp down period. */
    rampDownMinimumHostsPct?: number;
    /** Capacity threshold for ramp down period. */
    rampDownCapacityThresholdPct?: number;
    /** Should users be logged off forcefully from hosts. */
    rampDownForceLogoffUsers?: boolean;
    /** Specifies when to stop hosts during ramp down period. */
    rampDownStopHostsWhen?: StopHostsWhen;
    /** Number of minutes to wait to stop hosts during ramp down period. */
    rampDownWaitTimeMinutes?: number;
    /** Notification message for users during ramp down period. */
    rampDownNotificationMessage?: string;
    /** Starting time for off-peak period. */
    offPeakStartTime?: Time;
    /** Load balancing algorithm for off-peak period. */
    offPeakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
}

/** Interface representing a ScalingPlanPooledSchedules. */
export declare interface ScalingPlanPooledSchedules {
    /**
     * List ScalingPlanPooledSchedules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, scalingPlanName: string, options?: ScalingPlanPooledSchedulesListOptionalParams): PagedAsyncIterableIterator<ScalingPlanPooledSchedule>;
    /**
     * Get a ScalingPlanPooledSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    get(resourceGroupName: string, scalingPlanName: string, scalingPlanScheduleName: string, options?: ScalingPlanPooledSchedulesGetOptionalParams): Promise<ScalingPlanPooledSchedulesGetResponse>;
    /**
     * Create or update a ScalingPlanPooledSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param scalingPlanSchedule Object containing ScalingPlanPooledSchedule definitions.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, scalingPlanName: string, scalingPlanScheduleName: string, scalingPlanSchedule: ScalingPlanPooledSchedule, options?: ScalingPlanPooledSchedulesCreateOptionalParams): Promise<ScalingPlanPooledSchedulesCreateResponse>;
    /**
     * Remove a ScalingPlanPooledSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, scalingPlanName: string, scalingPlanScheduleName: string, options?: ScalingPlanPooledSchedulesDeleteOptionalParams): Promise<void>;
    /**
     * Update a ScalingPlanPooledSchedule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlanScheduleName The name of the ScalingPlanSchedule
     * @param options The options parameters.
     */
    update(resourceGroupName: string, scalingPlanName: string, scalingPlanScheduleName: string, options?: ScalingPlanPooledSchedulesUpdateOptionalParams): Promise<ScalingPlanPooledSchedulesUpdateResponse>;
}

/** Optional parameters. */
export declare interface ScalingPlanPooledSchedulesCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type ScalingPlanPooledSchedulesCreateResponse = ScalingPlanPooledSchedule;

/** Optional parameters. */
export declare interface ScalingPlanPooledSchedulesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ScalingPlanPooledSchedulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ScalingPlanPooledSchedulesGetResponse = ScalingPlanPooledSchedule;

/** Optional parameters. */
export declare interface ScalingPlanPooledSchedulesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ScalingPlanPooledSchedulesListNextResponse = ScalingPlanPooledScheduleList;

/** Optional parameters. */
export declare interface ScalingPlanPooledSchedulesListOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the list operation. */
export declare type ScalingPlanPooledSchedulesListResponse = ScalingPlanPooledScheduleList;

/** Optional parameters. */
export declare interface ScalingPlanPooledSchedulesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Object containing ScalingPlanPooledSchedule definitions. */
    scalingPlanSchedule?: ScalingPlanPooledSchedulePatch;
}

/** Contains response data for the update operation. */
export declare type ScalingPlanPooledSchedulesUpdateResponse = ScalingPlanPooledSchedule;

/** Interface representing a ScalingPlans. */
export declare interface ScalingPlans {
    /**
     * List scaling plans.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ScalingPlansListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ScalingPlan>;
    /**
     * List scaling plans in subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ScalingPlansListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ScalingPlan>;
    /**
     * List scaling plan associated with hostpool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    listByHostPool(resourceGroupName: string, hostPoolName: string, options?: ScalingPlansListByHostPoolOptionalParams): PagedAsyncIterableIterator<ScalingPlan>;
    /**
     * Get a scaling plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, scalingPlanName: string, options?: ScalingPlansGetOptionalParams): Promise<ScalingPlansGetResponse>;
    /**
     * Create or update a scaling plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param scalingPlan Object containing scaling plan definitions.
     * @param options The options parameters.
     */
    create(resourceGroupName: string, scalingPlanName: string, scalingPlan: ScalingPlan, options?: ScalingPlansCreateOptionalParams): Promise<ScalingPlansCreateResponse>;
    /**
     * Remove a scaling plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, scalingPlanName: string, options?: ScalingPlansDeleteOptionalParams): Promise<void>;
    /**
     * Update a scaling plan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scalingPlanName The name of the scaling plan.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, scalingPlanName: string, options?: ScalingPlansUpdateOptionalParams): Promise<ScalingPlansUpdateResponse>;
}

/** Optional parameters. */
export declare interface ScalingPlansCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type ScalingPlansCreateResponse = ScalingPlan;

/** Optional parameters. */
export declare interface ScalingPlansDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface ScalingPlansGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ScalingPlansGetResponse = ScalingPlan;

/** Optional parameters. */
export declare interface ScalingPlansListByHostPoolNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHostPoolNext operation. */
export declare type ScalingPlansListByHostPoolNextResponse = ScalingPlanList;

/** Optional parameters. */
export declare interface ScalingPlansListByHostPoolOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the listByHostPool operation. */
export declare type ScalingPlansListByHostPoolResponse = ScalingPlanList;

/** Optional parameters. */
export declare interface ScalingPlansListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ScalingPlansListByResourceGroupNextResponse = ScalingPlanList;

/** Optional parameters. */
export declare interface ScalingPlansListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ScalingPlansListByResourceGroupResponse = ScalingPlanList;

/** Optional parameters. */
export declare interface ScalingPlansListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type ScalingPlansListBySubscriptionNextResponse = ScalingPlanList;

/** Optional parameters. */
export declare interface ScalingPlansListBySubscriptionOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the listBySubscription operation. */
export declare type ScalingPlansListBySubscriptionResponse = ScalingPlanList;

/** Optional parameters. */
export declare interface ScalingPlansUpdateOptionalParams extends coreClient.OperationOptions {
    /** Object containing scaling plan definitions. */
    scalingPlan?: ScalingPlanPatch;
}

/** Contains response data for the update operation. */
export declare type ScalingPlansUpdateResponse = ScalingPlan;

/** A ScalingPlanPooledSchedule. */
export declare interface ScalingSchedule {
    /** Name of the ScalingPlanPooledSchedule. */
    name?: string;
    /** Set of days of the week on which this schedule is active. */
    daysOfWeek?: ScalingScheduleDaysOfWeekItem[];
    /** Starting time for ramp up period. */
    rampUpStartTime?: Time;
    /** Load balancing algorithm for ramp up period. */
    rampUpLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
    /** Minimum host percentage for ramp up period. */
    rampUpMinimumHostsPct?: number;
    /** Capacity threshold for ramp up period. */
    rampUpCapacityThresholdPct?: number;
    /** Starting time for peak period. */
    peakStartTime?: Time;
    /** Load balancing algorithm for peak period. */
    peakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
    /** Starting time for ramp down period. */
    rampDownStartTime?: Time;
    /** Load balancing algorithm for ramp down period. */
    rampDownLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
    /** Minimum host percentage for ramp down period. */
    rampDownMinimumHostsPct?: number;
    /** Capacity threshold for ramp down period. */
    rampDownCapacityThresholdPct?: number;
    /** Should users be logged off forcefully from hosts. */
    rampDownForceLogoffUsers?: boolean;
    /** Specifies when to stop hosts during ramp down period. */
    rampDownStopHostsWhen?: StopHostsWhen;
    /** Number of minutes to wait to stop hosts during ramp down period. */
    rampDownWaitTimeMinutes?: number;
    /** Notification message for users during ramp down period. */
    rampDownNotificationMessage?: string;
    /** Starting time for off-peak period. */
    offPeakStartTime?: Time;
    /** Load balancing algorithm for off-peak period. */
    offPeakLoadBalancingAlgorithm?: SessionHostLoadBalancingAlgorithm;
}

/**
 * Defines values for ScalingScheduleDaysOfWeekItem. \
 * {@link KnownScalingScheduleDaysOfWeekItem} can be used interchangeably with ScalingScheduleDaysOfWeekItem,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sunday** \
 * **Monday** \
 * **Tuesday** \
 * **Wednesday** \
 * **Thursday** \
 * **Friday** \
 * **Saturday**
 */
export declare type ScalingScheduleDaysOfWeekItem = string;

/** Represents message sent to a UserSession. */
export declare interface SendMessage {
    /** Title of message. */
    messageTitle?: string;
    /** Body of message. */
    messageBody?: string;
}

/** Service specification payload */
export declare interface ServiceSpecification {
    /** Specifications of the Log for Azure Monitoring */
    logSpecifications?: LogSpecification[];
}

/**
 * Defines values for SessionHandlingOperation. \
 * {@link KnownSessionHandlingOperation} can be used interchangeably with SessionHandlingOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Deallocate** \
 * **Hibernate**
 */
export declare type SessionHandlingOperation = string;

/** Represents a SessionHost definition. */
export declare interface SessionHost extends Resource {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * ObjectId of SessionHost. (internal use)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectId?: string;
    /** Last heart beat from SessionHost. */
    lastHeartBeat?: Date;
    /** Number of sessions on SessionHost. */
    sessions?: number;
    /** Version of agent on SessionHost. */
    agentVersion?: string;
    /** Allow a new session. */
    allowNewSession?: boolean;
    /**
     * Virtual Machine Id of SessionHost's underlying virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly virtualMachineId?: string;
    /**
     * Resource Id of SessionHost's underlying virtual machine.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceId?: string;
    /** User assigned to SessionHost. */
    assignedUser?: string;
    /** Friendly name of SessionHost */
    friendlyName?: string;
    /** Status for a SessionHost. */
    status?: Status;
    /**
     * The timestamp of the status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statusTimestamp?: Date;
    /** The version of the OS on the session host. */
    osVersion?: string;
    /** The version of the side by side stack on the session host. */
    sxSStackVersion?: string;
    /** Update state of a SessionHost. */
    updateState?: UpdateState;
    /**
     * The timestamp of the last update.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdateTime?: Date;
    /** The error message. */
    updateErrorMessage?: string;
    /**
     * List of SessionHostHealthCheckReports
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sessionHostHealthCheckResults?: SessionHostHealthCheckReport[];
}

/**
 * Defines values for SessionHostComponentUpdateType. \
 * {@link KnownSessionHostComponentUpdateType} can be used interchangeably with SessionHostComponentUpdateType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**: Agent and other agent side components are delivery schedule is controlled by WVD Infra. \
 * **Scheduled**: TenantAdmin have opted in for Scheduled Component Update feature.
 */
export declare type SessionHostComponentUpdateType = string;

/** Contains details on the failure. */
export declare interface SessionHostHealthCheckFailureDetails {
    /**
     * Failure message: hints on what is wrong and how to recover.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * Error code corresponding for the failure.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorCode?: number;
    /**
     * The timestamp of the last update.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastHealthCheckDateTime?: Date;
}

/** The report for session host information. */
export declare interface SessionHostHealthCheckReport {
    /**
     * Represents the name of the health check operation performed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly healthCheckName?: HealthCheckName;
    /**
     * Represents the Health state of the health check we performed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly healthCheckResult?: HealthCheckResult;
    /**
     * Additional detailed information on the failure.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalFailureDetails?: SessionHostHealthCheckFailureDetails;
}

/** List of SessionHost definitions. */
export declare interface SessionHostList {
    /** List of SessionHost definitions. */
    value?: SessionHost[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for SessionHostLoadBalancingAlgorithm. \
 * {@link KnownSessionHostLoadBalancingAlgorithm} can be used interchangeably with SessionHostLoadBalancingAlgorithm,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BreadthFirst** \
 * **DepthFirst**
 */
export declare type SessionHostLoadBalancingAlgorithm = string;

/** SessionHost properties that can be patched. */
export declare interface SessionHostPatch extends Resource {
    /** Allow a new session. */
    allowNewSession?: boolean;
    /** User assigned to SessionHost. */
    assignedUser?: string;
    /** Friendly name of SessionHost */
    friendlyName?: string;
}

/** Interface representing a SessionHosts. */
export declare interface SessionHosts {
    /**
     * List sessionHosts.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    list(resourceGroupName: string, hostPoolName: string, options?: SessionHostsListOptionalParams): PagedAsyncIterableIterator<SessionHost>;
    /**
     * Get a session host.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: SessionHostsGetOptionalParams): Promise<SessionHostsGetResponse>;
    /**
     * Remove a SessionHost.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: SessionHostsDeleteOptionalParams): Promise<void>;
    /**
     * Update a session host.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    update(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: SessionHostsUpdateOptionalParams): Promise<SessionHostsUpdateResponse>;
}

/** Optional parameters. */
export declare interface SessionHostsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Force flag to force sessionHost deletion even when userSession exists. */
    force?: boolean;
}

/** Optional parameters. */
export declare interface SessionHostsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SessionHostsGetResponse = SessionHost;

/** Optional parameters. */
export declare interface SessionHostsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SessionHostsListNextResponse = SessionHostList;

/** Optional parameters. */
export declare interface SessionHostsListOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the list operation. */
export declare type SessionHostsListResponse = SessionHostList;

/** Optional parameters. */
export declare interface SessionHostsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Force flag to update assign, unassign or reassign personal desktop. */
    force?: boolean;
    /** Object containing SessionHost definitions. */
    sessionHost?: SessionHostPatch;
}

/** Contains response data for the update operation. */
export declare type SessionHostsUpdateResponse = SessionHost;

/**
 * Defines values for SessionState. \
 * {@link KnownSessionState} can be used interchangeably with SessionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **Active** \
 * **Disconnected** \
 * **Pending** \
 * **LogOff** \
 * **UserProfileDiskMounted**
 */
export declare type SessionState = string;

/**
 * Defines values for SetStartVMOnConnect. \
 * {@link KnownSetStartVMOnConnect} can be used interchangeably with SetStartVMOnConnect,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enable** \
 * **Disable**
 */
export declare type SetStartVMOnConnect = string;

/** The resource model definition representing SKU */
export declare interface Sku {
    /** The name of the SKU. Ex - P3. It is typically a letter+number code */
    name: string;
    /** This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT. */
    tier?: SkuTier;
    /** The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. */
    size?: string;
    /** If the service has different generations of hardware, for the same SKU, then that can be captured here. */
    family?: string;
    /** If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. */
    capacity?: number;
}

/** Defines values for SkuTier. */
export declare type SkuTier = "Free" | "Basic" | "Standard" | "Premium";

/**
 * Defines values for SSOSecretType. \
 * {@link KnownSSOSecretType} can be used interchangeably with SSOSecretType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SharedKey** \
 * **Certificate** \
 * **SharedKeyInKeyVault** \
 * **CertificateInKeyVault**
 */
export declare type SSOSecretType = string;

/** Represents a StartMenuItem definition. */
export declare interface StartMenuItem extends Resource {
    /** Alias of StartMenuItem. */
    appAlias?: string;
    /** Path to the file of StartMenuItem. */
    filePath?: string;
    /** Command line arguments for StartMenuItem. */
    commandLineArguments?: string;
    /** Path to the icon. */
    iconPath?: string;
    /** Index of the icon. */
    iconIndex?: number;
}

/** List of StartMenuItem definitions. */
export declare interface StartMenuItemList {
    /** List of StartMenuItem definitions. */
    value?: StartMenuItem[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a StartMenuItems. */
export declare interface StartMenuItems {
    /**
     * List start menu items in the given application group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param applicationGroupName The name of the application group
     * @param options The options parameters.
     */
    list(resourceGroupName: string, applicationGroupName: string, options?: StartMenuItemsListOptionalParams): PagedAsyncIterableIterator<StartMenuItem>;
}

/** Optional parameters. */
export declare interface StartMenuItemsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type StartMenuItemsListNextResponse = StartMenuItemList;

/** Optional parameters. */
export declare interface StartMenuItemsListOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the list operation. */
export declare type StartMenuItemsListResponse = StartMenuItemList;

/**
 * Defines values for StartupBehavior. \
 * {@link KnownStartupBehavior} can be used interchangeably with StartupBehavior,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: Session hosts will not be started by the service. This setting depends on Start VM on Connect to be enabled to start the session hosts. \
 * **WithAssignedUser**: Session hosts with an assigned user will be started during Ramp Up \
 * **All**: All personal session hosts in the hostpool will be started during ramp up.
 */
export declare type StartupBehavior = string;

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Available**: Session Host has passed all the health checks and is available to handle connections. \
 * **Unavailable**: Session Host is either turned off or has failed critical health checks which is causing service not to be able to route connections to this session host. Note this replaces previous 'NoHeartBeat' status. \
 * **Shutdown**: Session Host is shutdown - RD Agent reported session host to be stopped or deallocated. \
 * **Disconnected**: The Session Host is unavailable because it is currently disconnected. \
 * **Upgrading**: Session Host is unavailable because currently an upgrade of RDAgent\/side-by-side stack is in progress. Note: this state will be removed once the upgrade completes and the host is able to accept connections. \
 * **UpgradeFailed**: Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.) failed. \
 * **NoHeartbeat**: The Session Host is not heart beating. \
 * **NotJoinedToDomain**: SessionHost is not joined to domain. \
 * **DomainTrustRelationshipLost**: SessionHost's domain trust relationship lost \
 * **SxSStackListenerNotReady**: SxS stack installed on the SessionHost is not ready to receive connections. \
 * **FSLogixNotHealthy**: FSLogix is in an unhealthy state on the session host. \
 * **NeedsAssistance**: New status to inform admins that the health on their endpoint needs to be fixed. The connections might not fail, as these issues are not fatal.
 */
export declare type Status = string;

/**
 * Defines values for StopHostsWhen. \
 * {@link KnownStopHostsWhen} can be used interchangeably with StopHostsWhen,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ZeroSessions** \
 * **ZeroActiveSessions**
 */
export declare type StopHostsWhen = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The time for a scaling action to occur. */
export declare interface Time {
    /** The hour. */
    hour: number;
    /** The minute. */
    minute: number;
}

/**
 * Defines values for UpdateState. \
 * {@link KnownUpdateState} can be used interchangeably with UpdateState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Pending** \
 * **Started** \
 * **Succeeded** \
 * **Failed**
 */
export declare type UpdateState = string;

/** Represents a UserSession definition. */
export declare interface UserSession extends Resource {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * ObjectId of user session. (internal use)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectId?: string;
    /** The user principal name. */
    userPrincipalName?: string;
    /** Application type of application. */
    applicationType?: ApplicationType;
    /** State of user session. */
    sessionState?: SessionState;
    /** The active directory user name. */
    activeDirectoryUserName?: string;
    /** The timestamp of the user session create. */
    createTime?: Date;
}

/** List of UserSession definitions. */
export declare interface UserSessionList {
    /** List of UserSession definitions. */
    value?: UserSession[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a UserSessions. */
export declare interface UserSessions {
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param options The options parameters.
     */
    listByHostPool(resourceGroupName: string, hostPoolName: string, options?: UserSessionsListByHostPoolOptionalParams): PagedAsyncIterableIterator<UserSession>;
    /**
     * List userSessions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param options The options parameters.
     */
    list(resourceGroupName: string, hostPoolName: string, sessionHostName: string, options?: UserSessionsListOptionalParams): PagedAsyncIterableIterator<UserSession>;
    /**
     * Get a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    get(resourceGroupName: string, hostPoolName: string, sessionHostName: string, userSessionId: string, options?: UserSessionsGetOptionalParams): Promise<UserSessionsGetResponse>;
    /**
     * Remove a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, hostPoolName: string, sessionHostName: string, userSessionId: string, options?: UserSessionsDeleteOptionalParams): Promise<void>;
    /**
     * Disconnect a userSession.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    disconnect(resourceGroupName: string, hostPoolName: string, sessionHostName: string, userSessionId: string, options?: UserSessionsDisconnectOptionalParams): Promise<void>;
    /**
     * Send a message to a user.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param hostPoolName The name of the host pool within the specified resource group
     * @param sessionHostName The name of the session host within the specified host pool
     * @param userSessionId The name of the user session within the specified session host
     * @param options The options parameters.
     */
    sendMessage(resourceGroupName: string, hostPoolName: string, sessionHostName: string, userSessionId: string, options?: UserSessionsSendMessageOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface UserSessionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Force flag to login off userSession. */
    force?: boolean;
}

/** Optional parameters. */
export declare interface UserSessionsDisconnectOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface UserSessionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type UserSessionsGetResponse = UserSession;

/** Optional parameters. */
export declare interface UserSessionsListByHostPoolNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByHostPoolNext operation. */
export declare type UserSessionsListByHostPoolNextResponse = UserSessionList;

/** Optional parameters. */
export declare interface UserSessionsListByHostPoolOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
    /** OData filter expression. Valid properties for filtering are userprincipalname and sessionstate. */
    filter?: string;
}

/** Contains response data for the listByHostPool operation. */
export declare type UserSessionsListByHostPoolResponse = UserSessionList;

/** Optional parameters. */
export declare interface UserSessionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type UserSessionsListNextResponse = UserSessionList;

/** Optional parameters. */
export declare interface UserSessionsListOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the list operation. */
export declare type UserSessionsListResponse = UserSessionList;

/** Optional parameters. */
export declare interface UserSessionsSendMessageOptionalParams extends coreClient.OperationOptions {
    /** Object containing message includes title and message body */
    sendMessage?: SendMessage;
}

/** Represents a Workspace definition. */
export declare interface Workspace extends ResourceModelWithAllowedPropertySet {
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * ObjectId of Workspace. (internal use)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly objectId?: string;
    /** Description of Workspace. */
    description?: string;
    /** Friendly name of Workspace. */
    friendlyName?: string;
    /** List of applicationGroup resource Ids. */
    applicationGroupReferences?: string[];
    /**
     * Is cloud pc resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cloudPcResource?: boolean;
    /** Enabled allows this resource to be accessed from both public and private networks, Disabled allows this resource to only be accessed via private endpoints */
    publicNetworkAccess?: PublicNetworkAccess;
    /**
     * List of private endpoint connection associated with the specified resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
}

/** List of Workspace definitions. */
export declare interface WorkspaceList {
    /** List of Workspace definitions. */
    value?: Workspace[];
    /**
     * Link to the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Workspace properties that can be patched. */
export declare interface WorkspacePatch {
    /** tags to be updated */
    tags?: {
        [propertyName: string]: string;
    };
    /** Description of Workspace. */
    description?: string;
    /** Friendly name of Workspace. */
    friendlyName?: string;
    /** List of applicationGroup links. */
    applicationGroupReferences?: string[];
    /** Enabled to allow this resource to be access from the public network */
    publicNetworkAccess?: PublicNetworkAccess;
}

/** Interface representing a Workspaces. */
export declare interface Workspaces {
    /**
     * List workspaces.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: WorkspacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * List workspaces in subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: WorkspacesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Get a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: WorkspacesGetOptionalParams): Promise<WorkspacesGetResponse>;
    /**
     * Create or update a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param workspace Object containing Workspace definitions.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, workspace: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<WorkspacesCreateOrUpdateResponse>;
    /**
     * Remove a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<void>;
    /**
     * Update a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, options?: WorkspacesUpdateOptionalParams): Promise<WorkspacesUpdateResponse>;
}

/** Optional parameters. */
export declare interface WorkspacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspacesCreateOrUpdateResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkspacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspacesGetResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type WorkspacesListByResourceGroupNextResponse = WorkspaceList;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** Number of items per page. */
    pageSize?: number;
    /** Indicates whether the collection is descending. */
    isDescending?: boolean;
    /** Initial number of items to skip. */
    initialSkip?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type WorkspacesListByResourceGroupResponse = WorkspaceList;

/** Optional parameters. */
export declare interface WorkspacesListBySubscriptionNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscriptionNext operation. */
export declare type WorkspacesListBySubscriptionNextResponse = WorkspaceList;

/** Optional parameters. */
export declare interface WorkspacesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type WorkspacesListBySubscriptionResponse = WorkspaceList;

/** Optional parameters. */
export declare interface WorkspacesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Object containing Workspace definitions. */
    workspace?: WorkspacePatch;
}

/** Contains response data for the update operation. */
export declare type WorkspacesUpdateResponse = Workspace;

export { }
