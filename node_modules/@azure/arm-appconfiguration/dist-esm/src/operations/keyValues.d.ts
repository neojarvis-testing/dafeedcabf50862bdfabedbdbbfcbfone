import { KeyValues } from "../operationsInterfaces";
import { AppConfigurationManagementClient } from "../appConfigurationManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { KeyValuesGetOptionalParams, KeyValuesGetResponse, KeyValuesCreateOrUpdateOptionalParams, KeyValuesCreateOrUpdateResponse, KeyValuesDeleteOptionalParams } from "../models";
/** Class containing KeyValues operations. */
export declare class KeyValuesImpl implements KeyValues {
    private readonly client;
    /**
     * Initialize a new instance of the class KeyValues class.
     * @param client Reference to the service client
     */
    constructor(client: AppConfigurationManagementClient);
    /**
     * Gets the properties of the specified key-value.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $
     *                     character. Label is optional.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: KeyValuesGetOptionalParams): Promise<KeyValuesGetResponse>;
    /**
     * Creates a key-value.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $
     *                     character. Label is optional.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: KeyValuesCreateOrUpdateOptionalParams): Promise<KeyValuesCreateOrUpdateResponse>;
    /**
     * Deletes a key-value.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $
     *                     character. Label is optional.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: KeyValuesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a key-value.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $
     *                     character. Label is optional.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: KeyValuesDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=keyValues.d.ts.map