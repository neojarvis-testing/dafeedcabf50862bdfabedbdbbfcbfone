import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Replicas } from "../operationsInterfaces";
import { AppConfigurationManagementClient } from "../appConfigurationManagementClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { Replica, ReplicasListByConfigurationStoreOptionalParams, ReplicasGetOptionalParams, ReplicasGetResponse, ReplicasCreateOptionalParams, ReplicasCreateResponse, ReplicasDeleteOptionalParams } from "../models";
/** Class containing Replicas operations. */
export declare class ReplicasImpl implements Replicas {
    private readonly client;
    /**
     * Initialize a new instance of the class Replicas class.
     * @param client Reference to the service client
     */
    constructor(client: AppConfigurationManagementClient);
    /**
     * Lists the replicas for a given configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    listByConfigurationStore(resourceGroupName: string, configStoreName: string, options?: ReplicasListByConfigurationStoreOptionalParams): PagedAsyncIterableIterator<Replica>;
    private listByConfigurationStorePagingPage;
    private listByConfigurationStorePagingAll;
    /**
     * Lists the replicas for a given configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    private _listByConfigurationStore;
    /**
     * Gets the properties of the specified replica.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param replicaName The name of the replica.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, configStoreName: string, replicaName: string, options?: ReplicasGetOptionalParams): Promise<ReplicasGetResponse>;
    /**
     * Creates a replica with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param replicaName The name of the replica.
     * @param replicaCreationParameters The parameters for creating a replica.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, configStoreName: string, replicaName: string, replicaCreationParameters: Replica, options?: ReplicasCreateOptionalParams): Promise<SimplePollerLike<OperationState<ReplicasCreateResponse>, ReplicasCreateResponse>>;
    /**
     * Creates a replica with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param replicaName The name of the replica.
     * @param replicaCreationParameters The parameters for creating a replica.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, configStoreName: string, replicaName: string, replicaCreationParameters: Replica, options?: ReplicasCreateOptionalParams): Promise<ReplicasCreateResponse>;
    /**
     * Deletes a replica.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param replicaName The name of the replica.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, configStoreName: string, replicaName: string, options?: ReplicasDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a replica.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param replicaName The name of the replica.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, configStoreName: string, replicaName: string, options?: ReplicasDeleteOptionalParams): Promise<void>;
    /**
     * ListByConfigurationStoreNext
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param nextLink The nextLink from the previous successful call to the ListByConfigurationStore
     *                 method.
     * @param options The options parameters.
     */
    private _listByConfigurationStoreNext;
}
//# sourceMappingURL=replicas.d.ts.map