/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { ConfigurationStore as ConfigurationStoreMapper, ConfigurationStoreUpdateParameters as ConfigurationStoreUpdateParametersMapper, RegenerateKeyParameters as RegenerateKeyParametersMapper, CheckNameAvailabilityParameters as CheckNameAvailabilityParametersMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, KeyValue as KeyValueMapper, Replica as ReplicaMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-03-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const configStoreName = {
    parameterPath: "configStoreName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9_-]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "configStoreName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const configStoreCreationParameters = {
    parameterPath: "configStoreCreationParameters",
    mapper: ConfigurationStoreMapper
};
export const configStoreUpdateParameters = {
    parameterPath: "configStoreUpdateParameters",
    mapper: ConfigurationStoreUpdateParametersMapper
};
export const regenerateKeyParameters = {
    parameterPath: "regenerateKeyParameters",
    mapper: RegenerateKeyParametersMapper
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "location",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const checkNameAvailabilityParameters = {
    parameterPath: "checkNameAvailabilityParameters",
    mapper: CheckNameAvailabilityParametersMapper
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnectionMapper
};
export const groupName = {
    parameterPath: "groupName",
    mapper: {
        serializedName: "groupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const keyValueName = {
    parameterPath: "keyValueName",
    mapper: {
        serializedName: "keyValueName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const keyValueParameters = {
    parameterPath: ["options", "keyValueParameters"],
    mapper: KeyValueMapper
};
export const replicaName = {
    parameterPath: "replicaName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]*$")
        },
        serializedName: "replicaName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const replicaCreationParameters = {
    parameterPath: "replicaCreationParameters",
    mapper: ReplicaMapper
};
export const replicaName1 = {
    parameterPath: "replicaName",
    mapper: {
        serializedName: "replicaName",
        required: true,
        type: {
            name: "String"
        }
    }
};
//# sourceMappingURL=parameters.js.map