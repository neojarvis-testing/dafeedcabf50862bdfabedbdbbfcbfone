/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { AppConfigurationManagementClient } from "@azure/arm-appconfiguration";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Update the state of the specified private endpoint connection associated with the configuration store. This operation cannot be used to create a private endpoint connection. Private endpoint connections must be created with the Network resource provider.
 *
 * @summary Update the state of the specified private endpoint connection associated with the configuration store. This operation cannot be used to create a private endpoint connection. Private endpoint connections must be created with the Network resource provider.
 * x-ms-original-file: specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/stable/2023-03-01/examples/ConfigurationStoresUpdatePrivateEndpointConnection.json
 */
function privateEndpointConnectionUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["APPCONFIGURATION_SUBSCRIPTION_ID"] ||
            "c80fb759-c965-4c6a-9110-9b2b2d038882";
        const resourceGroupName = process.env["APPCONFIGURATION_RESOURCE_GROUP"] || "myResourceGroup";
        const configStoreName = "contoso";
        const privateEndpointConnectionName = "myConnection";
        const privateEndpointConnection = {
            privateLinkServiceConnectionState: {
                description: "Auto-Approved",
                status: "Approved"
            }
        };
        const credential = new DefaultAzureCredential();
        const client = new AppConfigurationManagementClient(credential, subscriptionId);
        const result = yield client.privateEndpointConnections.beginCreateOrUpdateAndWait(resourceGroupName, configStoreName, privateEndpointConnectionName, privateEndpointConnection);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        privateEndpointConnectionUpdate();
    });
}
main().catch(console.error);
//# sourceMappingURL=privateEndpointConnectionsCreateOrUpdateSample.js.map