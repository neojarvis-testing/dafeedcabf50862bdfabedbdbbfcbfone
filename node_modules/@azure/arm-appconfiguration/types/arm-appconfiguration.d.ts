import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/**
 * Defines values for ActionsRequired. \
 * {@link KnownActionsRequired} can be used interchangeably with ActionsRequired,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Recreate**
 */
export declare type ActionsRequired = string;

/** An API key used for authenticating with a configuration store endpoint. */
export declare interface ApiKey {
    /**
     * The key ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * A name for the key describing its usage.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The value of the key that is used for authentication purposes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
    /**
     * A connection string that can be used by supporting clients for authentication.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectionString?: string;
    /**
     * The last time any of the key's properties were modified.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /**
     * Whether this key can only be used for read operations.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly readOnly?: boolean;
}

/** The result of a request to list API keys. */
export declare interface ApiKeyListResult {
    /** The collection value. */
    value?: ApiKey[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

export declare class AppConfigurationManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the AppConfigurationManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Microsoft Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AppConfigurationManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    configurationStores: ConfigurationStores;
    operations: Operations;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    keyValues: KeyValues;
    replicas: Replicas;
}

/** Optional parameters. */
export declare interface AppConfigurationManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Parameters used for checking whether a resource name is available. */
export declare interface CheckNameAvailabilityParameters {
    /** The name to check for availability. */
    name: string;
    /** The resource type to check for name availability. */
    type: ConfigurationResourceType;
}

/**
 * Defines values for ConfigurationResourceType. \
 * {@link KnownConfigurationResourceType} can be used interchangeably with ConfigurationResourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.AppConfiguration\/configurationStores**
 */
export declare type ConfigurationResourceType = string;

/** The configuration store along with all resource properties. The Configuration Store will have all information to begin utilizing it. */
export declare interface ConfigurationStore extends TrackedResource {
    /** The managed identity information, if configured. */
    identity?: ResourceIdentity;
    /** The sku of the configuration store. */
    sku: Sku;
    /**
     * Resource system metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The provisioning state of the configuration store.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The creation date of configuration store.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
    /**
     * The DNS endpoint where the configuration store API will be available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoint?: string;
    /** The encryption settings of the configuration store. */
    encryption?: EncryptionProperties;
    /**
     * The list of private endpoint connections that are set up for this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnectionReference[];
    /** Control permission for data plane traffic coming from public networks while private endpoint is enabled. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Disables all authentication methods other than AAD authentication. */
    disableLocalAuth?: boolean;
    /** The amount of time in days that the configuration store will be retained when it is soft deleted. */
    softDeleteRetentionInDays?: number;
    /** Property specifying whether protection against purge is enabled for this configuration store. */
    enablePurgeProtection?: boolean;
    /** Indicates whether the configuration store need to be recovered. */
    createMode?: CreateMode;
}

/** The result of a request to list configuration stores. */
export declare interface ConfigurationStoreListResult {
    /** The collection value. */
    value?: ConfigurationStore[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

/** Interface representing a ConfigurationStores. */
export declare interface ConfigurationStores {
    /**
     * Lists the configuration stores for a given subscription.
     * @param options The options parameters.
     */
    list(options?: ConfigurationStoresListOptionalParams): PagedAsyncIterableIterator<ConfigurationStore>;
    /**
     * Lists the configuration stores for a given resource group.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ConfigurationStoresListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ConfigurationStore>;
    /**
     * Lists the access key for the specified configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, configStoreName: string, options?: ConfigurationStoresListKeysOptionalParams): PagedAsyncIterableIterator<ApiKey>;
    /**
     * Gets information about the deleted configuration stores in a subscription.
     * @param options The options parameters.
     */
    listDeleted(options?: ConfigurationStoresListDeletedOptionalParams): PagedAsyncIterableIterator<DeletedConfigurationStore>;
    /**
     * Gets the properties of the specified configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, configStoreName: string, options?: ConfigurationStoresGetOptionalParams): Promise<ConfigurationStoresGetResponse>;
    /**
     * Creates a configuration store with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreCreationParameters The parameters for creating a configuration store.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, configStoreName: string, configStoreCreationParameters: ConfigurationStore, options?: ConfigurationStoresCreateOptionalParams): Promise<SimplePollerLike<OperationState<ConfigurationStoresCreateResponse>, ConfigurationStoresCreateResponse>>;
    /**
     * Creates a configuration store with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreCreationParameters The parameters for creating a configuration store.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, configStoreName: string, configStoreCreationParameters: ConfigurationStore, options?: ConfigurationStoresCreateOptionalParams): Promise<ConfigurationStoresCreateResponse>;
    /**
     * Deletes a configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, configStoreName: string, options?: ConfigurationStoresDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, configStoreName: string, options?: ConfigurationStoresDeleteOptionalParams): Promise<void>;
    /**
     * Updates a configuration store with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreUpdateParameters The parameters for updating a configuration store.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, configStoreName: string, configStoreUpdateParameters: ConfigurationStoreUpdateParameters, options?: ConfigurationStoresUpdateOptionalParams): Promise<SimplePollerLike<OperationState<ConfigurationStoresUpdateResponse>, ConfigurationStoresUpdateResponse>>;
    /**
     * Updates a configuration store with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param configStoreUpdateParameters The parameters for updating a configuration store.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, configStoreName: string, configStoreUpdateParameters: ConfigurationStoreUpdateParameters, options?: ConfigurationStoresUpdateOptionalParams): Promise<ConfigurationStoresUpdateResponse>;
    /**
     * Regenerates an access key for the specified configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param regenerateKeyParameters The parameters for regenerating an access key.
     * @param options The options parameters.
     */
    regenerateKey(resourceGroupName: string, configStoreName: string, regenerateKeyParameters: RegenerateKeyParameters, options?: ConfigurationStoresRegenerateKeyOptionalParams): Promise<ConfigurationStoresRegenerateKeyResponse>;
    /**
     * Gets a deleted Azure app configuration store.
     * @param location The location in which uniqueness will be verified.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    getDeleted(location: string, configStoreName: string, options?: ConfigurationStoresGetDeletedOptionalParams): Promise<ConfigurationStoresGetDeletedResponse>;
    /**
     * Permanently deletes the specified configuration store.
     * @param location The location in which uniqueness will be verified.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    beginPurgeDeleted(location: string, configStoreName: string, options?: ConfigurationStoresPurgeDeletedOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Permanently deletes the specified configuration store.
     * @param location The location in which uniqueness will be verified.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    beginPurgeDeletedAndWait(location: string, configStoreName: string, options?: ConfigurationStoresPurgeDeletedOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ConfigurationStoresCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ConfigurationStoresCreateResponse = ConfigurationStore;

/** Optional parameters. */
export declare interface ConfigurationStoresDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ConfigurationStoresGetDeletedOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDeleted operation. */
export declare type ConfigurationStoresGetDeletedResponse = DeletedConfigurationStore;

/** Optional parameters. */
export declare interface ConfigurationStoresGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ConfigurationStoresGetResponse = ConfigurationStore;

/** Optional parameters. */
export declare interface ConfigurationStoresListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ConfigurationStoresListByResourceGroupNextResponse = ConfigurationStoreListResult;

/** Optional parameters. */
export declare interface ConfigurationStoresListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls. */
    skipToken?: string;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ConfigurationStoresListByResourceGroupResponse = ConfigurationStoreListResult;

/** Optional parameters. */
export declare interface ConfigurationStoresListDeletedNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDeletedNext operation. */
export declare type ConfigurationStoresListDeletedNextResponse = DeletedConfigurationStoreListResult;

/** Optional parameters. */
export declare interface ConfigurationStoresListDeletedOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listDeleted operation. */
export declare type ConfigurationStoresListDeletedResponse = DeletedConfigurationStoreListResult;

/** Optional parameters. */
export declare interface ConfigurationStoresListKeysNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeysNext operation. */
export declare type ConfigurationStoresListKeysNextResponse = ApiKeyListResult;

/** Optional parameters. */
export declare interface ConfigurationStoresListKeysOptionalParams extends coreClient.OperationOptions {
    /** A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls. */
    skipToken?: string;
}

/** Contains response data for the listKeys operation. */
export declare type ConfigurationStoresListKeysResponse = ApiKeyListResult;

/** Optional parameters. */
export declare interface ConfigurationStoresListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ConfigurationStoresListNextResponse = ConfigurationStoreListResult;

/** Optional parameters. */
export declare interface ConfigurationStoresListOptionalParams extends coreClient.OperationOptions {
    /** A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type ConfigurationStoresListResponse = ConfigurationStoreListResult;

/** Optional parameters. */
export declare interface ConfigurationStoresPurgeDeletedOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ConfigurationStoresRegenerateKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateKey operation. */
export declare type ConfigurationStoresRegenerateKeyResponse = ApiKey;

/** Optional parameters. */
export declare interface ConfigurationStoresUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ConfigurationStoresUpdateResponse = ConfigurationStore;

/** The parameters for updating a configuration store. */
export declare interface ConfigurationStoreUpdateParameters {
    /** The managed identity information for the configuration store. */
    identity?: ResourceIdentity;
    /** The SKU of the configuration store. */
    sku?: Sku;
    /** The ARM resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The encryption settings of the configuration store. */
    encryption?: EncryptionProperties;
    /** Disables all authentication methods other than AAD authentication. */
    disableLocalAuth?: boolean;
    /** Control permission for data plane traffic coming from public networks while private endpoint is enabled. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Property specifying whether protection against purge is enabled for this configuration store. */
    enablePurgeProtection?: boolean;
}

/**
 * Defines values for ConnectionStatus. \
 * {@link KnownConnectionStatus} can be used interchangeably with ConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **Approved** \
 * **Rejected** \
 * **Disconnected**
 */
export declare type ConnectionStatus = string;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** Defines values for CreateMode. */
export declare type CreateMode = "Recover" | "Default";

/** Deleted configuration store information with extended details. */
export declare interface DeletedConfigurationStore {
    /**
     * The resource ID for the deleted configuration store.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the configuration store.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The resource type of the configuration store.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The resource id of the original configuration store.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly configurationStoreId?: string;
    /**
     * The location of the original configuration store.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * The deleted date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deletionDate?: Date;
    /**
     * The scheduled purged date.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scheduledPurgeDate?: Date;
    /**
     * Tags of the original configuration store.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tags?: {
        [propertyName: string]: string;
    };
    /**
     * Purge protection status of the original configuration store.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly purgeProtectionEnabled?: boolean;
}

/** List of deleted configuration stores */
export declare interface DeletedConfigurationStoreListResult {
    /** The list of deleted configuration store. */
    value?: DeletedConfigurationStore[];
    /** The URL to get the next set of deleted configuration stores. */
    nextLink?: string;
}

/** The encryption settings for a configuration store. */
export declare interface EncryptionProperties {
    /** Key vault properties. */
    keyVaultProperties?: KeyVaultProperties;
}

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The details of the error. */
export declare interface ErrorDetails {
    /**
     * Error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Error message indicating why the operation failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message. */
export declare interface ErrorResponse {
    /** The details of the error. */
    error?: ErrorDetails;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/**
 * Defines values for IdentityType. \
 * {@link KnownIdentityType} can be used interchangeably with IdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned, UserAssigned**
 */
export declare type IdentityType = string;

/** The key-value resource along with all resource properties. */
export declare interface KeyValue {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The primary identifier of a key-value.
     * The key is used in unison with the label to uniquely identify a key-value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly key?: string;
    /**
     * A value used to group key-values.
     * The label is used in unison with the key to uniquely identify a key-value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly label?: string;
    /** The value of the key-value. */
    value?: string;
    /**
     * The content type of the key-value's value.
     * Providing a proper content-type can enable transformations of values when they are retrieved by applications.
     */
    contentType?: string;
    /**
     * An ETag indicating the state of a key-value within a configuration store.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eTag?: string;
    /**
     * The last time a modifying operation was performed on the given key-value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastModified?: Date;
    /**
     * A value indicating whether the key-value is locked.
     * A locked key-value may not be modified until it is unlocked.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locked?: boolean;
    /** A dictionary of tags that can help identify what a key-value may be applicable for. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** The result of a request to list key-values. */
export declare interface KeyValueListResult {
    /** The collection value. */
    value?: KeyValue[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

/** Interface representing a KeyValues. */
export declare interface KeyValues {
    /**
     * Gets the properties of the specified key-value.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $
     *                     character. Label is optional.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: KeyValuesGetOptionalParams): Promise<KeyValuesGetResponse>;
    /**
     * Creates a key-value.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $
     *                     character. Label is optional.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: KeyValuesCreateOrUpdateOptionalParams): Promise<KeyValuesCreateOrUpdateResponse>;
    /**
     * Deletes a key-value.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $
     *                     character. Label is optional.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: KeyValuesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a key-value.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param keyValueName Identifier of key and label combination. Key and label are joined by $
     *                     character. Label is optional.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, configStoreName: string, keyValueName: string, options?: KeyValuesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface KeyValuesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** The parameters for creating a key-value. */
    keyValueParameters?: KeyValue;
}

/** Contains response data for the createOrUpdate operation. */
export declare type KeyValuesCreateOrUpdateResponse = KeyValue;

/** Optional parameters. */
export declare interface KeyValuesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KeyValuesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type KeyValuesGetResponse = KeyValue;

/** Settings concerning key vault encryption for a configuration store. */
export declare interface KeyVaultProperties {
    /** The URI of the key vault key used to encrypt data. */
    keyIdentifier?: string;
    /** The client id of the identity which will be used to access key vault. */
    identityClientId?: string;
}

/** Known values of {@link ActionsRequired} that the service accepts. */
export declare enum KnownActionsRequired {
    /** None */
    None = "None",
    /** Recreate */
    Recreate = "Recreate"
}

/** Known values of {@link ConfigurationResourceType} that the service accepts. */
export declare enum KnownConfigurationResourceType {
    /** MicrosoftAppConfigurationConfigurationStores */
    MicrosoftAppConfigurationConfigurationStores = "Microsoft.AppConfiguration/configurationStores"
}

/** Known values of {@link ConnectionStatus} that the service accepts. */
export declare enum KnownConnectionStatus {
    /** Pending */
    Pending = "Pending",
    /** Approved */
    Approved = "Approved",
    /** Rejected */
    Rejected = "Rejected",
    /** Disconnected */
    Disconnected = "Disconnected"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link IdentityType} that the service accepts. */
export declare enum KnownIdentityType {
    /** None */
    None = "None",
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** UserAssigned */
    UserAssigned = "UserAssigned",
    /** SystemAssignedUserAssigned */
    SystemAssignedUserAssigned = "SystemAssigned, UserAssigned"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link ReplicaProvisioningState} that the service accepts. */
export declare enum KnownReplicaProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled"
}

/** Specifications of the Log for Azure Monitoring */
export declare interface LogSpecification {
    /** Name of the log */
    name?: string;
    /** Localized friendly display name of the log */
    displayName?: string;
    /** Blob duration of the log */
    blobDuration?: string;
}

/** Specifications of the Dimension of metrics */
export declare interface MetricDimension {
    /** Name of the dimension */
    name?: string;
    /** Localized friendly display name of the dimension */
    displayName?: string;
    /** Internal name of the dimension. */
    internalName?: string;
}

/** Specifications of the Metrics for Azure Monitoring */
export declare interface MetricSpecification {
    /** Name of the metric */
    name?: string;
    /** Localized friendly display name of the metric */
    displayName?: string;
    /** Localized friendly description of the metric */
    displayDescription?: string;
    /** Unit that makes sense for the metric */
    unit?: string;
    /** Only provide one value for this field. Valid values: Average, Minimum, Maximum, Total, Count. */
    aggregationType?: string;
    /** Internal metric name. */
    internalMetricName?: string;
    /** Dimensions of the metric */
    dimensions?: MetricDimension[];
    /** Optional. If set to true, then zero will be returned for time duration where no metric is emitted/published. */
    fillGapWithZero?: boolean;
}

/** The result of a request to check the availability of a resource name. */
export declare interface NameAvailabilityStatus {
    /**
     * The value indicating whether the resource name is available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nameAvailable?: boolean;
    /**
     * If any, the error message that provides more detail for the reason that the name is not available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * If any, the reason that the name is not available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly reason?: string;
}

/** The definition of a configuration store operation. */
export declare interface OperationDefinition {
    /** Operation name: {provider}/{resource}/{operation}. */
    name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /** The display information for the configuration store operation. */
    display?: OperationDefinitionDisplay;
    /** Origin of the operation */
    origin?: string;
    /** Properties of the operation */
    properties?: OperationProperties;
}

/** The display information for a configuration store operation. */
export declare interface OperationDefinitionDisplay {
    /**
     * The resource provider name: Microsoft App Configuration."
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provider?: string;
    /** The resource on which the operation is performed. */
    resource?: string;
    /** The operation that users can perform. */
    operation?: string;
    /** The description for the operation. */
    description?: string;
}

/** The result of a request to list configuration store operations. */
export declare interface OperationDefinitionListResult {
    /** The collection value. */
    value?: OperationDefinition[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

/** Extra Operation properties */
export declare interface OperationProperties {
    /** Service specifications of the operation */
    serviceSpecification?: ServiceSpecification;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists the operations available from this provider.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<OperationDefinition>;
    /**
     * Checks whether the configuration store name is available for use.
     * @param checkNameAvailabilityParameters The object containing information for the availability
     *                                        request.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityParameters: CheckNameAvailabilityParameters, options?: OperationsCheckNameAvailabilityOptionalParams): Promise<OperationsCheckNameAvailabilityResponse>;
    /**
     * Checks whether the configuration store name is available for use.
     * @param location The location in which uniqueness will be verified.
     * @param checkNameAvailabilityParameters The object containing information for the availability
     *                                        request.
     * @param options The options parameters.
     */
    regionalCheckNameAvailability(location: string, checkNameAvailabilityParameters: CheckNameAvailabilityParameters, options?: OperationsRegionalCheckNameAvailabilityOptionalParams): Promise<OperationsRegionalCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface OperationsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type OperationsCheckNameAvailabilityResponse = NameAvailabilityStatus;

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationDefinitionListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
    /** A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls. */
    skipToken?: string;
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationDefinitionListResult;

/** Optional parameters. */
export declare interface OperationsRegionalCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regionalCheckNameAvailability operation. */
export declare type OperationsRegionalCheckNameAvailabilityResponse = NameAvailabilityStatus;

/** Private endpoint which a connection belongs to. */
export declare interface PrivateEndpoint {
    /** The resource Id for private endpoint */
    id?: string;
}

/** A private endpoint connection */
export declare interface PrivateEndpointConnection {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The provisioning status of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The resource of private endpoint. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
}

/** A list of private endpoint connections */
export declare interface PrivateEndpointConnectionListResult {
    /** The collection value. */
    value?: PrivateEndpointConnection[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

/** A reference to a related private endpoint connection. */
export declare interface PrivateEndpointConnectionReference {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The provisioning status of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The resource of private endpoint. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
}

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * Lists all private endpoint connections for a configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    listByConfigurationStore(resourceGroupName: string, configStoreName: string, options?: PrivateEndpointConnectionsListByConfigurationStoreOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets the specified private endpoint connection associated with the configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param privateEndpointConnectionName Private endpoint connection name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, configStoreName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update the state of the specified private endpoint connection associated with the configuration
     * store. This operation cannot be used to create a private endpoint connection. Private endpoint
     * connections must be created with the Network resource provider.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param privateEndpointConnectionName Private endpoint connection name
     * @param privateEndpointConnection The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, configStoreName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>, PrivateEndpointConnectionsCreateOrUpdateResponse>>;
    /**
     * Update the state of the specified private endpoint connection associated with the configuration
     * store. This operation cannot be used to create a private endpoint connection. Private endpoint
     * connections must be created with the Network resource provider.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param privateEndpointConnectionName Private endpoint connection name
     * @param privateEndpointConnection The private endpoint connection properties.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, configStoreName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes a private endpoint connection.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param privateEndpointConnectionName Private endpoint connection name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, configStoreName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a private endpoint connection.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param privateEndpointConnectionName Private endpoint connection name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, configStoreName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByConfigurationStoreNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByConfigurationStoreNext operation. */
export declare type PrivateEndpointConnectionsListByConfigurationStoreNextResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByConfigurationStoreOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByConfigurationStore operation. */
export declare type PrivateEndpointConnectionsListByConfigurationStoreResponse = PrivateEndpointConnectionListResult;

/** A resource that supports private link capabilities. */
export declare interface PrivateLinkResource {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /**
     * The list of required DNS zone names of the private link resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredZoneNames?: string[];
}

/** A list of private link resources. */
export declare interface PrivateLinkResourceListResult {
    /** The collection value. */
    value?: PrivateLinkResource[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Gets the private link resources that need to be created for a configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    listByConfigurationStore(resourceGroupName: string, configStoreName: string, options?: PrivateLinkResourcesListByConfigurationStoreOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
    /**
     * Gets a private link resource that need to be created for a configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param groupName The name of the private link resource group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, configStoreName: string, groupName: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByConfigurationStoreNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByConfigurationStoreNext operation. */
export declare type PrivateLinkResourcesListByConfigurationStoreNextResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByConfigurationStoreOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByConfigurationStore operation. */
export declare type PrivateLinkResourcesListByConfigurationStoreResponse = PrivateLinkResourceListResult;

/** The state of a private link service connection. */
export declare interface PrivateLinkServiceConnectionState {
    /** The private link service connection status. */
    status?: ConnectionStatus;
    /** The private link service connection description. */
    description?: string;
    /**
     * Any action that is required beyond basic workflow (approve/ reject/ disconnect)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionsRequired?: ActionsRequired;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type ProvisioningState = string;

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/** The parameters used to regenerate an API key. */
export declare interface RegenerateKeyParameters {
    /** The id of the key to regenerate. */
    id?: string;
}

/** The replica resource. */
export declare interface Replica {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the replica.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The location of the replica. */
    location?: string;
    /**
     * Resource system metadata.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The URI of the replica where the replica API will be available.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoint?: string;
    /**
     * The provisioning state of the replica.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ReplicaProvisioningState;
}

/** The result of a request to list replicas. */
export declare interface ReplicaListResult {
    /** The collection value. */
    value?: Replica[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

/**
 * Defines values for ReplicaProvisioningState. \
 * {@link KnownReplicaProvisioningState} can be used interchangeably with ReplicaProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Succeeded** \
 * **Deleting** \
 * **Failed** \
 * **Canceled**
 */
export declare type ReplicaProvisioningState = string;

/** Interface representing a Replicas. */
export declare interface Replicas {
    /**
     * Lists the replicas for a given configuration store.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param options The options parameters.
     */
    listByConfigurationStore(resourceGroupName: string, configStoreName: string, options?: ReplicasListByConfigurationStoreOptionalParams): PagedAsyncIterableIterator<Replica>;
    /**
     * Gets the properties of the specified replica.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param replicaName The name of the replica.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, configStoreName: string, replicaName: string, options?: ReplicasGetOptionalParams): Promise<ReplicasGetResponse>;
    /**
     * Creates a replica with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param replicaName The name of the replica.
     * @param replicaCreationParameters The parameters for creating a replica.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, configStoreName: string, replicaName: string, replicaCreationParameters: Replica, options?: ReplicasCreateOptionalParams): Promise<SimplePollerLike<OperationState<ReplicasCreateResponse>, ReplicasCreateResponse>>;
    /**
     * Creates a replica with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param replicaName The name of the replica.
     * @param replicaCreationParameters The parameters for creating a replica.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, configStoreName: string, replicaName: string, replicaCreationParameters: Replica, options?: ReplicasCreateOptionalParams): Promise<ReplicasCreateResponse>;
    /**
     * Deletes a replica.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param replicaName The name of the replica.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, configStoreName: string, replicaName: string, options?: ReplicasDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a replica.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param configStoreName The name of the configuration store.
     * @param replicaName The name of the replica.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, configStoreName: string, replicaName: string, options?: ReplicasDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface ReplicasCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ReplicasCreateResponse = Replica;

/** Defines headers for Replicas_delete operation. */
export declare interface ReplicasDeleteHeaders {
    /** URL to query for status of the operation. */
    azureAsyncOperation?: string;
}

/** Optional parameters. */
export declare interface ReplicasDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ReplicasGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ReplicasGetResponse = Replica;

/** Optional parameters. */
export declare interface ReplicasListByConfigurationStoreNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByConfigurationStoreNext operation. */
export declare type ReplicasListByConfigurationStoreNextResponse = ReplicaListResult;

/** Optional parameters. */
export declare interface ReplicasListByConfigurationStoreOptionalParams extends coreClient.OperationOptions {
    /** A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls. */
    skipToken?: string;
}

/** Contains response data for the listByConfigurationStore operation. */
export declare type ReplicasListByConfigurationStoreResponse = ReplicaListResult;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** An identity that can be associated with a resource. */
export declare interface ResourceIdentity {
    /** The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities. */
    type?: IdentityType;
    /** The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
    userAssignedIdentities?: {
        [propertyName: string]: UserIdentity;
    };
    /**
     * The principal id of the identity. This property will only be provided for a system-assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant id associated with the resource's identity. This property will only be provided for a system-assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
}

/** Service specification payload */
export declare interface ServiceSpecification {
    /** Specifications of the Log for Azure Monitoring */
    logSpecifications?: LogSpecification[];
    /** Specifications of the Metrics for Azure Monitoring */
    metricSpecifications?: MetricSpecification[];
}

/** Describes a configuration store SKU. */
export declare interface Sku {
    /** The SKU name of the configuration store. */
    name: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
}

/** A resource identity that is managed by the user of the service. */
export declare interface UserIdentity {
    /**
     * The principal ID of the user-assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client ID of the user-assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

export { }
