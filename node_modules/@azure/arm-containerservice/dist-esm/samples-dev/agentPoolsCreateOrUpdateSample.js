/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ContainerServiceClient } from "@azure/arm-containerservice";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_Snapshot.json
 */
function createAgentPoolUsingAnAgentPoolSnapshot() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            creationData: {
                sourceResourceId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1",
            },
            enableFips: true,
            orchestratorVersion: "",
            osType: "Linux",
            vmSize: "Standard_DS2_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_CRG.json
 */
function createAgentPoolWithCapacityReservationGroup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            capacityReservationGroupID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/CapacityReservationGroups/crg1",
            count: 3,
            orchestratorVersion: "",
            osType: "Linux",
            vmSize: "Standard_DS2_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_DedicatedHostGroup.json
 */
function createAgentPoolWithDedicatedHostGroup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            hostGroupID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1",
            orchestratorVersion: "",
            osType: "Linux",
            vmSize: "Standard_DS2_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_EnableEncryptionAtHost.json
 */
function createAgentPoolWithEncryptionAtHostEnabled() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            enableEncryptionAtHost: true,
            orchestratorVersion: "",
            osType: "Linux",
            vmSize: "Standard_DS2_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_Ephemeral.json
 */
function createAgentPoolWithEphemeralOSDisk() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            orchestratorVersion: "",
            osDiskSizeGB: 64,
            osDiskType: "Ephemeral",
            osType: "Linux",
            vmSize: "Standard_DS2_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_EnableFIPS.json
 */
function createAgentPoolWithFipsEnabledOS() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            enableFips: true,
            orchestratorVersion: "",
            osType: "Linux",
            vmSize: "Standard_DS2_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_GPUMIG.json
 */
function createAgentPoolWithGpumig() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            gpuInstanceProfile: "MIG2g",
            kubeletConfig: {
                allowedUnsafeSysctls: ["kernel.msg*", "net.core.somaxconn"],
                cpuCfsQuota: true,
                cpuCfsQuotaPeriod: "200ms",
                cpuManagerPolicy: "static",
                failSwapOn: false,
                imageGcHighThreshold: 90,
                imageGcLowThreshold: 70,
                topologyManagerPolicy: "best-effort",
            },
            linuxOSConfig: {
                swapFileSizeMB: 1500,
                sysctls: {
                    kernelThreadsMax: 99999,
                    netCoreWmemDefault: 12345,
                    netIpv4IpLocalPortRange: "20000 60000",
                    netIpv4TcpTwReuse: true,
                },
                transparentHugePageDefrag: "madvise",
                transparentHugePageEnabled: "always",
            },
            orchestratorVersion: "",
            osType: "Linux",
            vmSize: "Standard_ND96asr_v4",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_WasmWasi.json
 */
function createAgentPoolWithKrustletAndTheWasiRuntime() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            mode: "User",
            orchestratorVersion: "",
            osDiskSizeGB: 64,
            osType: "Linux",
            vmSize: "Standard_DS2_v2",
            workloadRuntime: "WasmWasi",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_CustomNodeConfig.json
 */
function createAgentPoolWithKubeletConfigAndLinuxOSConfig() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            kubeletConfig: {
                allowedUnsafeSysctls: ["kernel.msg*", "net.core.somaxconn"],
                cpuCfsQuota: true,
                cpuCfsQuotaPeriod: "200ms",
                cpuManagerPolicy: "static",
                failSwapOn: false,
                imageGcHighThreshold: 90,
                imageGcLowThreshold: 70,
                topologyManagerPolicy: "best-effort",
            },
            linuxOSConfig: {
                swapFileSizeMB: 1500,
                sysctls: {
                    kernelThreadsMax: 99999,
                    netCoreWmemDefault: 12345,
                    netIpv4IpLocalPortRange: "20000 60000",
                    netIpv4TcpTwReuse: true,
                },
                transparentHugePageDefrag: "madvise",
                transparentHugePageEnabled: "always",
            },
            orchestratorVersion: "",
            osType: "Linux",
            vmSize: "Standard_DS2_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_OSSKU.json
 */
function createAgentPoolWithOssku() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            kubeletConfig: {
                allowedUnsafeSysctls: ["kernel.msg*", "net.core.somaxconn"],
                cpuCfsQuota: true,
                cpuCfsQuotaPeriod: "200ms",
                cpuManagerPolicy: "static",
                failSwapOn: false,
                imageGcHighThreshold: 90,
                imageGcLowThreshold: 70,
                topologyManagerPolicy: "best-effort",
            },
            linuxOSConfig: {
                swapFileSizeMB: 1500,
                sysctls: {
                    kernelThreadsMax: 99999,
                    netCoreWmemDefault: 12345,
                    netIpv4IpLocalPortRange: "20000 60000",
                    netIpv4TcpTwReuse: true,
                },
                transparentHugePageDefrag: "madvise",
                transparentHugePageEnabled: "always",
            },
            orchestratorVersion: "",
            osSKU: "AzureLinux",
            osType: "Linux",
            vmSize: "Standard_DS2_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_PPG.json
 */
function createAgentPoolWithPpg() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            orchestratorVersion: "",
            osType: "Linux",
            proximityPlacementGroupID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/proximityPlacementGroups/ppg1",
            vmSize: "Standard_DS2_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_EnableUltraSSD.json
 */
function createAgentPoolWithUltraSsdEnabled() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            enableUltraSSD: true,
            orchestratorVersion: "",
            osType: "Linux",
            vmSize: "Standard_DS2_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_WindowsOSSKU.json
 */
function createAgentPoolWithWindowsOssku() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "wnp2";
        const parameters = {
            count: 3,
            orchestratorVersion: "1.23.3",
            osSKU: "Windows2022",
            osType: "Windows",
            vmSize: "Standard_D4s_v3",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_Spot.json
 */
function createSpotAgentPool() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            nodeLabels: { key1: "val1" },
            nodeTaints: ["Key1=Value1:NoSchedule"],
            orchestratorVersion: "",
            osType: "Linux",
            scaleSetEvictionPolicy: "Delete",
            scaleSetPriority: "Spot",
            tags: { name1: "val1" },
            vmSize: "Standard_DS1_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPoolsCreate_Update.json
 */
function createOrUpdateAgentPool() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            mode: "User",
            nodeLabels: { key1: "val1" },
            nodeTaints: ["Key1=Value1:NoSchedule"],
            orchestratorVersion: "",
            osType: "Linux",
            scaleSetEvictionPolicy: "Delete",
            scaleSetPriority: "Spot",
            tags: { name1: "val1" },
            vmSize: "Standard_DS1_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPools_Start.json
 */
function startAgentPool() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = { powerState: { code: "Running" } };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPools_Stop.json
 */
function stopAgentPool() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = { powerState: { code: "Stopped" } };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates an agent pool in the specified managed cluster.
 *
 * @summary Creates or updates an agent pool in the specified managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/AgentPools_Update.json
 */
function updateAgentPool() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const agentPoolName = "agentpool1";
        const parameters = {
            count: 3,
            enableAutoScaling: true,
            maxCount: 2,
            minCount: 2,
            nodeTaints: ["Key1=Value1:NoSchedule"],
            orchestratorVersion: "",
            osType: "Linux",
            scaleSetEvictionPolicy: "Delete",
            scaleSetPriority: "Spot",
            vmSize: "Standard_DS1_v2",
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.agentPools.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, agentPoolName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createAgentPoolUsingAnAgentPoolSnapshot();
        createAgentPoolWithCapacityReservationGroup();
        createAgentPoolWithDedicatedHostGroup();
        createAgentPoolWithEncryptionAtHostEnabled();
        createAgentPoolWithEphemeralOSDisk();
        createAgentPoolWithFipsEnabledOS();
        createAgentPoolWithGpumig();
        createAgentPoolWithKrustletAndTheWasiRuntime();
        createAgentPoolWithKubeletConfigAndLinuxOSConfig();
        createAgentPoolWithOssku();
        createAgentPoolWithPpg();
        createAgentPoolWithUltraSsdEnabled();
        createAgentPoolWithWindowsOssku();
        createSpotAgentPool();
        createOrUpdateAgentPool();
        startAgentPool();
        stopAgentPool();
        updateAgentPool();
    });
}
main().catch(console.error);
//# sourceMappingURL=agentPoolsCreateOrUpdateSample.js.map