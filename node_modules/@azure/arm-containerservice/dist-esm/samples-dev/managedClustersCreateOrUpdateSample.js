/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { ContainerServiceClient, } from "@azure/arm-containerservice";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_Snapshot.json
 */
function createManagedClusterUsingAnAgentPoolSnapshot() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    creationData: {
                        sourceResourceId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.ContainerService/snapshots/snapshot1",
                    },
                    enableFips: true,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: false,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_ManagedNATGateway.json
 */
function createManagedClusterWithAksManagedNatGatewayAsOutboundType() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: false,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerSku: "standard",
                natGatewayProfile: { managedOutboundIPProfile: { count: 2 } },
                outboundType: "managedNATGateway",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_AzureKeyvaultSecretsProvider.json
 */
function createManagedClusterWithAzureKeyVaultSecretsProviderAddon() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {
                azureKeyvaultSecretsProvider: {
                    config: { enableSecretRotation: "true", rotationPollInterval: "2m" },
                    enabled: true,
                },
            },
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_CRG.json
 */
function createManagedClusterWithCapacityReservationGroup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    capacityReservationGroupID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/capacityReservationGroups/crg1",
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_DedicatedHostGroup.json
 */
function createManagedClusterWithDedicatedHostGroup() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    hostGroupID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg/providers/Microsoft.Compute/hostGroups/hostgroup1",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: false,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_EnableEncryptionAtHost.json
 */
function createManagedClusterWithEncryptionAtHostEnabled() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableEncryptionAtHost: true,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_EnabledFIPS.json
 */
function createManagedClusterWithFipsEnabledOS() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableFips: true,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: false,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_GPUMIG.json
 */
function createManagedClusterWithGpumig() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    gpuInstanceProfile: "MIG3g",
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_ND96asr_v4",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            httpProxyConfig: {
                httpProxy: "http://myproxy.server.com:8080",
                httpsProxy: "https://myproxy.server.com:8080",
                noProxy: ["localhost", "127.0.0.1"],
                trustedCa: "Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U=",
            },
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_HTTPProxy.json
 */
function createManagedClusterWithHttpProxyConfigured() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            httpProxyConfig: {
                httpProxy: "http://myproxy.server.com:8080",
                httpsProxy: "https://myproxy.server.com:8080",
                noProxy: ["localhost", "127.0.0.1"],
                trustedCa: "Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U=",
            },
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_Premium.json
 */
function createManagedClusterWithLongTermSupport() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableEncryptionAtHost: true,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            apiServerAccessProfile: { disableRunCommand: true },
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Base", tier: "Premium" },
            supportPlan: "AKSLongTermSupport",
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_NodePublicIPPrefix.json
 */
function createManagedClusterWithNodePublicIPPrefix() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    nodePublicIPPrefixID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Network/publicIPPrefixes/public-ip-prefix",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_OSSKU.json
 */
function createManagedClusterWithOssku() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osSKU: "AzureLinux",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            httpProxyConfig: {
                httpProxy: "http://myproxy.server.com:8080",
                httpsProxy: "https://myproxy.server.com:8080",
                noProxy: ["localhost", "127.0.0.1"],
                trustedCa: "Q29uZ3JhdHMhIFlvdSBoYXZlIGZvdW5kIGEgaGlkZGVuIG1lc3NhZ2U=",
            },
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_PPG.json
 */
function createManagedClusterWithPpg() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    proximityPlacementGroupID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/proximityPlacementGroups/ppg1",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_PodIdentity.json
 */
function createManagedClusterWithPodIdentityEnabled() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            podIdentityProfile: { allowNetworkPluginKubenet: true, enabled: true },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_DisableRunCommand.json
 */
function createManagedClusterWithRunCommandDisabled() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableEncryptionAtHost: true,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            apiServerAccessProfile: { disableRunCommand: true },
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_SecurityProfile.json
 */
function createManagedClusterWithSecurityProfileConfigured() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            dnsPrefix: "dnsprefix1",
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            securityProfile: {
                defender: {
                    logAnalyticsWorkspaceResourceId: "/subscriptions/SUB_ID/resourcegroups/RG_NAME/providers/microsoft.operationalinsights/workspaces/WORKSPACE_NAME",
                    securityMonitoring: { enabled: true },
                },
                workloadIdentity: { enabled: true },
            },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_EnableUltraSSD.json
 */
function createManagedClusterWithUltraSsdEnabled() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    enableUltraSSD: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_IngressProfile_WebAppRouting.json
 */
function createManagedClusterWithWebAppRoutingIngressProfileConfigured() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            dnsPrefix: "dnsprefix1",
            ingressProfile: {
                webAppRouting: {
                    dnsZoneResourceIds: [
                        "/subscriptions/SUB_ID/resourceGroups/RG_NAME/providers/Microsoft.Network/dnszones/DNS_ZONE_NAME",
                    ],
                    enabled: true,
                },
            },
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_UserAssignedNATGateway.json
 */
function createManagedClusterWithUserAssignedNatGatewayAsOutboundType() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: false,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerSku: "standard",
                outboundType: "userAssignedNATGateway",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_PrivateClusterPublicFQDN.json
 */
function createManagedPrivateClusterWithPublicFqdnSpecified() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableEncryptionAtHost: true,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            apiServerAccessProfile: {
                enablePrivateCluster: true,
                enablePrivateClusterPublicFqdn: true,
            },
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_PrivateClusterFQDNSubdomain.json
 */
function createManagedPrivateClusterWithFqdnSubdomainSpecified() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableEncryptionAtHost: true,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            apiServerAccessProfile: {
                enablePrivateCluster: true,
                privateDNSZone: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Network/privateDnsZones/privatelink.location1.azmk8s.io",
            },
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            enablePodSecurityPolicy: true,
            enableRbac: true,
            fqdnSubdomain: "domain1",
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_UpdateWithEnableAzureRBAC.json
 */
function createOrUpdateAadManagedClusterWithEnableAzureRbac() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            aadProfile: { enableAzureRbac: true, managed: true },
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    availabilityZones: ["1", "2", "3"],
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS1_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_Update.json
 */
function createOrUpdateManagedCluster() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    availabilityZones: ["1", "2", "3"],
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    scaleDownMode: "Deallocate",
                    vmSize: "Standard_DS1_v2",
                },
            ],
            autoScalerProfile: {
                balanceSimilarNodeGroups: "true",
                expander: "priority",
                maxNodeProvisionTime: "15m",
                newPodScaleUpDelay: "1m",
                scaleDownDelayAfterAdd: "15m",
                scanInterval: "20s",
                skipNodesWithSystemPods: "false",
            },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/00000000000000000000000000000000/resourcegroups/rgName1/providers/MicrosoftManagedIdentity/userAssignedIdentities/identity1": {},
                },
            },
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            upgradeSettings: {
                overrideSettings: {
                    forceUpgrade: false,
                    until: new Date("2022-11-01T13:00:00Z"),
                },
            },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_AzureServiceMesh.json
 */
function createOrUpdateManagedClusterWithAzureServiceMesh() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {
                azureKeyvaultSecretsProvider: {
                    config: { enableSecretRotation: "true", rotationPollInterval: "2m" },
                    enabled: true,
                },
            },
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS2_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            serviceMeshProfile: {
                istio: {
                    certificateAuthority: {
                        plugin: {
                            certChainObjectName: "cert-chain",
                            certObjectName: "ca-cert",
                            keyObjectName: "ca-key",
                            keyVaultId: "/subscriptions/854c9ddb-fe9e-4aea-8d58-99ed88282881/resourceGroups/ddama-test/providers/Microsoft.KeyVault/vaults/my-akv",
                            rootCertObjectName: "root-cert",
                        },
                    },
                    components: {
                        egressGateways: [
                            { enabled: true, nodeSelector: { istio: "egress" } },
                        ],
                        ingressGateways: [{ enabled: true, mode: "Internal" }],
                    },
                },
                mode: "Istio",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_UpdateWithAHUB.json
 */
function createOrUpdateManagedClusterWithEnableAhub() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    availabilityZones: ["1", "2", "3"],
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS1_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/00000000000000000000000000000000/resourcegroups/rgName1/providers/MicrosoftManagedIdentity/userAssignedIdentities/identity1": {},
                },
            },
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
                licenseType: "Windows_Server",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_UpdateWindowsGmsa.json
 */
function createOrUpdateManagedClusterWithWindowsGMsaEnabled() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    availabilityZones: ["1", "2", "3"],
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    vmSize: "Standard_DS1_v2",
                },
            ],
            autoScalerProfile: { scaleDownDelayAfterAdd: "15m", scanInterval: "20s" },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/00000000000000000000000000000000/resourcegroups/rgName1/providers/MicrosoftManagedIdentity/userAssignedIdentities/identity1": {},
                },
            },
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
                gmsaProfile: { enabled: true },
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates or updates a managed cluster.
 *
 * @summary Creates or updates a managed cluster.
 * x-ms-original-file: specification/containerservice/resource-manager/Microsoft.ContainerService/aks/stable/2024-01-01/examples/ManagedClustersCreate_DualStackNetworking.json
 */
function createOrUpdateManagedClusterWithDualStackNetworking() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["CONTAINERSERVICE_SUBSCRIPTION_ID"] ||
            "00000000-0000-0000-0000-000000000000";
        const resourceGroupName = process.env["CONTAINERSERVICE_RESOURCE_GROUP"] || "rg1";
        const resourceName = "clustername1";
        const parameters = {
            addonProfiles: {},
            agentPoolProfiles: [
                {
                    name: "nodepool1",
                    type: "VirtualMachineScaleSets",
                    availabilityZones: ["1", "2", "3"],
                    count: 3,
                    enableNodePublicIP: true,
                    mode: "System",
                    osType: "Linux",
                    scaleDownMode: "Deallocate",
                    vmSize: "Standard_DS1_v2",
                },
            ],
            autoScalerProfile: {
                balanceSimilarNodeGroups: "true",
                expander: "priority",
                maxNodeProvisionTime: "15m",
                newPodScaleUpDelay: "1m",
                scaleDownDelayAfterAdd: "15m",
                scanInterval: "20s",
                skipNodesWithSystemPods: "false",
            },
            diskEncryptionSetID: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/rg1/providers/Microsoft.Compute/diskEncryptionSets/des",
            dnsPrefix: "dnsprefix1",
            enablePodSecurityPolicy: true,
            enableRbac: true,
            identity: {
                type: "UserAssigned",
                userAssignedIdentities: {
                    "/subscriptions/00000000000000000000000000000000/resourcegroups/rgName1/providers/MicrosoftManagedIdentity/userAssignedIdentities/identity1": {},
                },
            },
            kubernetesVersion: "",
            linuxProfile: {
                adminUsername: "azureuser",
                ssh: { publicKeys: [{ keyData: "keydata" }] },
            },
            location: "location1",
            networkProfile: {
                ipFamilies: ["IPv4", "IPv6"],
                loadBalancerProfile: { managedOutboundIPs: { count: 2 } },
                loadBalancerSku: "standard",
                outboundType: "loadBalancer",
            },
            servicePrincipalProfile: { clientId: "clientid", secret: "secret" },
            sku: { name: "Basic", tier: "Free" },
            tags: { archv2: "", tier: "production" },
            windowsProfile: {
                adminPassword: "replacePassword1234$",
                adminUsername: "azureuser",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new ContainerServiceClient(credential, subscriptionId);
        const result = yield client.managedClusters.beginCreateOrUpdateAndWait(resourceGroupName, resourceName, parameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        createManagedClusterUsingAnAgentPoolSnapshot();
        createManagedClusterWithAksManagedNatGatewayAsOutboundType();
        createManagedClusterWithAzureKeyVaultSecretsProviderAddon();
        createManagedClusterWithCapacityReservationGroup();
        createManagedClusterWithDedicatedHostGroup();
        createManagedClusterWithEncryptionAtHostEnabled();
        createManagedClusterWithFipsEnabledOS();
        createManagedClusterWithGpumig();
        createManagedClusterWithHttpProxyConfigured();
        createManagedClusterWithLongTermSupport();
        createManagedClusterWithNodePublicIPPrefix();
        createManagedClusterWithOssku();
        createManagedClusterWithPpg();
        createManagedClusterWithPodIdentityEnabled();
        createManagedClusterWithRunCommandDisabled();
        createManagedClusterWithSecurityProfileConfigured();
        createManagedClusterWithUltraSsdEnabled();
        createManagedClusterWithWebAppRoutingIngressProfileConfigured();
        createManagedClusterWithUserAssignedNatGatewayAsOutboundType();
        createManagedPrivateClusterWithPublicFqdnSpecified();
        createManagedPrivateClusterWithFqdnSubdomainSpecified();
        createOrUpdateAadManagedClusterWithEnableAzureRbac();
        createOrUpdateManagedCluster();
        createOrUpdateManagedClusterWithAzureServiceMesh();
        createOrUpdateManagedClusterWithEnableAhub();
        createOrUpdateManagedClusterWithWindowsGMsaEnabled();
        createOrUpdateManagedClusterWithDualStackNetworking();
    });
}
main().catch(console.error);
//# sourceMappingURL=managedClustersCreateOrUpdateSample.js.map