import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { TrustedAccessRoleBindings } from "../operationsInterfaces";
import { ContainerServiceClient } from "../containerServiceClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { TrustedAccessRoleBinding, TrustedAccessRoleBindingsListOptionalParams, TrustedAccessRoleBindingsGetOptionalParams, TrustedAccessRoleBindingsGetResponse, TrustedAccessRoleBindingsCreateOrUpdateOptionalParams, TrustedAccessRoleBindingsCreateOrUpdateResponse, TrustedAccessRoleBindingsDeleteOptionalParams, TrustedAccessRoleBindingsDeleteResponse } from "../models";
/** Class containing TrustedAccessRoleBindings operations. */
export declare class TrustedAccessRoleBindingsImpl implements TrustedAccessRoleBindings {
    private readonly client;
    /**
     * Initialize a new instance of the class TrustedAccessRoleBindings class.
     * @param client Reference to the service client
     */
    constructor(client: ContainerServiceClient);
    /**
     * List trusted access role bindings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the managed cluster resource.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, resourceName: string, options?: TrustedAccessRoleBindingsListOptionalParams): PagedAsyncIterableIterator<TrustedAccessRoleBinding>;
    private listPagingPage;
    private listPagingAll;
    /**
     * List trusted access role bindings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the managed cluster resource.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get a trusted access role binding.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the managed cluster resource.
     * @param trustedAccessRoleBindingName The name of trusted access role binding.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, resourceName: string, trustedAccessRoleBindingName: string, options?: TrustedAccessRoleBindingsGetOptionalParams): Promise<TrustedAccessRoleBindingsGetResponse>;
    /**
     * Create or update a trusted access role binding
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the managed cluster resource.
     * @param trustedAccessRoleBindingName The name of trusted access role binding.
     * @param trustedAccessRoleBinding A trusted access role binding
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, resourceName: string, trustedAccessRoleBindingName: string, trustedAccessRoleBinding: TrustedAccessRoleBinding, options?: TrustedAccessRoleBindingsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<TrustedAccessRoleBindingsCreateOrUpdateResponse>, TrustedAccessRoleBindingsCreateOrUpdateResponse>>;
    /**
     * Create or update a trusted access role binding
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the managed cluster resource.
     * @param trustedAccessRoleBindingName The name of trusted access role binding.
     * @param trustedAccessRoleBinding A trusted access role binding
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, resourceName: string, trustedAccessRoleBindingName: string, trustedAccessRoleBinding: TrustedAccessRoleBinding, options?: TrustedAccessRoleBindingsCreateOrUpdateOptionalParams): Promise<TrustedAccessRoleBindingsCreateOrUpdateResponse>;
    /**
     * Delete a trusted access role binding.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the managed cluster resource.
     * @param trustedAccessRoleBindingName The name of trusted access role binding.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, resourceName: string, trustedAccessRoleBindingName: string, options?: TrustedAccessRoleBindingsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<TrustedAccessRoleBindingsDeleteResponse>, TrustedAccessRoleBindingsDeleteResponse>>;
    /**
     * Delete a trusted access role binding.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the managed cluster resource.
     * @param trustedAccessRoleBindingName The name of trusted access role binding.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, resourceName: string, trustedAccessRoleBindingName: string, options?: TrustedAccessRoleBindingsDeleteOptionalParams): Promise<TrustedAccessRoleBindingsDeleteResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the managed cluster resource.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=trustedAccessRoleBindings.d.ts.map