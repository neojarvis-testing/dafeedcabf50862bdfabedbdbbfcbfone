/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link KubernetesSupportPlan} that the service accepts. */
export var KnownKubernetesSupportPlan;
(function (KnownKubernetesSupportPlan) {
    /** Support for the version is the same as for the open source Kubernetes offering. Official Kubernetes open source community support versions for 1 year after release. */
    KnownKubernetesSupportPlan["KubernetesOfficial"] = "KubernetesOfficial";
    /** Support for the version extended past the KubernetesOfficial support of 1 year. AKS continues to patch CVEs for another 1 year, for a total of 2 years of support. */
    KnownKubernetesSupportPlan["AKSLongTermSupport"] = "AKSLongTermSupport";
})(KnownKubernetesSupportPlan || (KnownKubernetesSupportPlan = {}));
/** Known values of {@link ManagedClusterSKUName} that the service accepts. */
export var KnownManagedClusterSKUName;
(function (KnownManagedClusterSKUName) {
    /** Base option for the AKS control plane. */
    KnownManagedClusterSKUName["Base"] = "Base";
})(KnownManagedClusterSKUName || (KnownManagedClusterSKUName = {}));
/** Known values of {@link ManagedClusterSKUTier} that the service accepts. */
export var KnownManagedClusterSKUTier;
(function (KnownManagedClusterSKUTier) {
    /** Cluster has premium capabilities in addition to all of the capabilities included in 'Standard'. Premium enables selection of LongTermSupport (aka.ms\/aks\/lts) for certain Kubernetes versions. */
    KnownManagedClusterSKUTier["Premium"] = "Premium";
    /** Recommended for mission-critical and production workloads. Includes Kubernetes control plane autoscaling, workload-intensive testing, and up to 5,000 nodes per cluster. Guarantees 99.95% availability of the Kubernetes API server endpoint for clusters that use Availability Zones and 99.9% of availability for clusters that don't use Availability Zones. */
    KnownManagedClusterSKUTier["Standard"] = "Standard";
    /** The cluster management is free, but charged for VM, storage, and networking usage. Best for experimenting, learning, simple testing, or workloads with fewer than 10 nodes. Not recommended for production use cases. */
    KnownManagedClusterSKUTier["Free"] = "Free";
})(KnownManagedClusterSKUTier || (KnownManagedClusterSKUTier = {}));
/** Known values of {@link ExtendedLocationTypes} that the service accepts. */
export var KnownExtendedLocationTypes;
(function (KnownExtendedLocationTypes) {
    /** EdgeZone */
    KnownExtendedLocationTypes["EdgeZone"] = "EdgeZone";
})(KnownExtendedLocationTypes || (KnownExtendedLocationTypes = {}));
/** Known values of {@link Code} that the service accepts. */
export var KnownCode;
(function (KnownCode) {
    /** The cluster is running. */
    KnownCode["Running"] = "Running";
    /** The cluster is stopped. */
    KnownCode["Stopped"] = "Stopped";
})(KnownCode || (KnownCode = {}));
/** Known values of {@link OSDiskType} that the service accepts. */
export var KnownOSDiskType;
(function (KnownOSDiskType) {
    /** Azure replicates the operating system disk for a virtual machine to Azure storage to avoid data loss should the VM need to be relocated to another host. Since containers aren't designed to have local state persisted, this behavior offers limited value while providing some drawbacks, including slower node provisioning and higher read\/write latency. */
    KnownOSDiskType["Managed"] = "Managed";
    /** Ephemeral OS disks are stored only on the host machine, just like a temporary disk. This provides lower read\/write latency, along with faster node scaling and cluster upgrades. */
    KnownOSDiskType["Ephemeral"] = "Ephemeral";
})(KnownOSDiskType || (KnownOSDiskType = {}));
/** Known values of {@link KubeletDiskType} that the service accepts. */
export var KnownKubeletDiskType;
(function (KnownKubeletDiskType) {
    /** Kubelet will use the OS disk for its data. */
    KnownKubeletDiskType["OS"] = "OS";
    /** Kubelet will use the temporary disk for its data. */
    KnownKubeletDiskType["Temporary"] = "Temporary";
})(KnownKubeletDiskType || (KnownKubeletDiskType = {}));
/** Known values of {@link WorkloadRuntime} that the service accepts. */
export var KnownWorkloadRuntime;
(function (KnownWorkloadRuntime) {
    /** Nodes will use Kubelet to run standard OCI container workloads. */
    KnownWorkloadRuntime["OCIContainer"] = "OCIContainer";
    /** Nodes will use Krustlet to run WASM workloads using the WASI provider (Preview). */
    KnownWorkloadRuntime["WasmWasi"] = "WasmWasi";
})(KnownWorkloadRuntime || (KnownWorkloadRuntime = {}));
/** Known values of {@link OSType} that the service accepts. */
export var KnownOSType;
(function (KnownOSType) {
    /** Use Linux. */
    KnownOSType["Linux"] = "Linux";
    /** Use Windows. */
    KnownOSType["Windows"] = "Windows";
})(KnownOSType || (KnownOSType = {}));
/** Known values of {@link Ossku} that the service accepts. */
export var KnownOssku;
(function (KnownOssku) {
    /** Use Ubuntu as the OS for node images. */
    KnownOssku["Ubuntu"] = "Ubuntu";
    /** Use AzureLinux as the OS for node images. Azure Linux is a container-optimized Linux distro built by Microsoft, visit https:\//aka.ms\/azurelinux for more information. */
    KnownOssku["AzureLinux"] = "AzureLinux";
    /** Deprecated OSSKU. Microsoft recommends that new deployments choose 'AzureLinux' instead. */
    KnownOssku["CBLMariner"] = "CBLMariner";
    /** Use Windows2019 as the OS for node images. Unsupported for system node pools. Windows2019 only supports Windows2019 containers; it cannot run Windows2022 containers and vice versa. */
    KnownOssku["Windows2019"] = "Windows2019";
    /** Use Windows2022 as the OS for node images. Unsupported for system node pools. Windows2022 only supports Windows2022 containers; it cannot run Windows2019 containers and vice versa. */
    KnownOssku["Windows2022"] = "Windows2022";
})(KnownOssku || (KnownOssku = {}));
/** Known values of {@link ScaleDownMode} that the service accepts. */
export var KnownScaleDownMode;
(function (KnownScaleDownMode) {
    /** Create new instances during scale up and remove instances during scale down. */
    KnownScaleDownMode["Delete"] = "Delete";
    /** Attempt to start deallocated instances (if they exist) during scale up and deallocate instances during scale down. */
    KnownScaleDownMode["Deallocate"] = "Deallocate";
})(KnownScaleDownMode || (KnownScaleDownMode = {}));
/** Known values of {@link AgentPoolType} that the service accepts. */
export var KnownAgentPoolType;
(function (KnownAgentPoolType) {
    /** Create an Agent Pool backed by a Virtual Machine Scale Set. */
    KnownAgentPoolType["VirtualMachineScaleSets"] = "VirtualMachineScaleSets";
    /** Use of this is strongly discouraged. */
    KnownAgentPoolType["AvailabilitySet"] = "AvailabilitySet";
})(KnownAgentPoolType || (KnownAgentPoolType = {}));
/** Known values of {@link AgentPoolMode} that the service accepts. */
export var KnownAgentPoolMode;
(function (KnownAgentPoolMode) {
    /** System agent pools are primarily for hosting critical system pods such as CoreDNS and metrics-server. System agent pools osType must be Linux. System agent pools VM SKU must have at least 2vCPUs and 4GB of memory. */
    KnownAgentPoolMode["System"] = "System";
    /** User agent pools are primarily for hosting your application pods. */
    KnownAgentPoolMode["User"] = "User";
})(KnownAgentPoolMode || (KnownAgentPoolMode = {}));
/** Known values of {@link ScaleSetPriority} that the service accepts. */
export var KnownScaleSetPriority;
(function (KnownScaleSetPriority) {
    /** Spot priority VMs will be used. There is no SLA for spot nodes. See [spot on AKS](https:\//docs.microsoft.com\/azure\/aks\/spot-node-pool) for more information. */
    KnownScaleSetPriority["Spot"] = "Spot";
    /** Regular VMs will be used. */
    KnownScaleSetPriority["Regular"] = "Regular";
})(KnownScaleSetPriority || (KnownScaleSetPriority = {}));
/** Known values of {@link ScaleSetEvictionPolicy} that the service accepts. */
export var KnownScaleSetEvictionPolicy;
(function (KnownScaleSetEvictionPolicy) {
    /** Nodes in the underlying Scale Set of the node pool are deleted when they're evicted. */
    KnownScaleSetEvictionPolicy["Delete"] = "Delete";
    /** Nodes in the underlying Scale Set of the node pool are set to the stopped-deallocated state upon eviction. Nodes in the stopped-deallocated state count against your compute quota and can cause issues with cluster scaling or upgrading. */
    KnownScaleSetEvictionPolicy["Deallocate"] = "Deallocate";
})(KnownScaleSetEvictionPolicy || (KnownScaleSetEvictionPolicy = {}));
/** Known values of {@link GPUInstanceProfile} that the service accepts. */
export var KnownGPUInstanceProfile;
(function (KnownGPUInstanceProfile) {
    /** MIG1G */
    KnownGPUInstanceProfile["MIG1G"] = "MIG1g";
    /** MIG2G */
    KnownGPUInstanceProfile["MIG2G"] = "MIG2g";
    /** MIG3G */
    KnownGPUInstanceProfile["MIG3G"] = "MIG3g";
    /** MIG4G */
    KnownGPUInstanceProfile["MIG4G"] = "MIG4g";
    /** MIG7G */
    KnownGPUInstanceProfile["MIG7G"] = "MIG7g";
})(KnownGPUInstanceProfile || (KnownGPUInstanceProfile = {}));
/** Known values of {@link Protocol} that the service accepts. */
export var KnownProtocol;
(function (KnownProtocol) {
    /** TCP protocol. */
    KnownProtocol["TCP"] = "TCP";
    /** UDP protocol. */
    KnownProtocol["UDP"] = "UDP";
})(KnownProtocol || (KnownProtocol = {}));
/** Known values of {@link LicenseType} that the service accepts. */
export var KnownLicenseType;
(function (KnownLicenseType) {
    /** No additional licensing is applied. */
    KnownLicenseType["None"] = "None";
    /** Enables Azure Hybrid User Benefits for Windows VMs. */
    KnownLicenseType["WindowsServer"] = "Windows_Server";
})(KnownLicenseType || (KnownLicenseType = {}));
/** Known values of {@link ManagedClusterPodIdentityProvisioningState} that the service accepts. */
export var KnownManagedClusterPodIdentityProvisioningState;
(function (KnownManagedClusterPodIdentityProvisioningState) {
    /** Assigned */
    KnownManagedClusterPodIdentityProvisioningState["Assigned"] = "Assigned";
    /** Canceled */
    KnownManagedClusterPodIdentityProvisioningState["Canceled"] = "Canceled";
    /** Deleting */
    KnownManagedClusterPodIdentityProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownManagedClusterPodIdentityProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownManagedClusterPodIdentityProvisioningState["Succeeded"] = "Succeeded";
    /** Updating */
    KnownManagedClusterPodIdentityProvisioningState["Updating"] = "Updating";
})(KnownManagedClusterPodIdentityProvisioningState || (KnownManagedClusterPodIdentityProvisioningState = {}));
/** Known values of {@link NetworkPlugin} that the service accepts. */
export var KnownNetworkPlugin;
(function (KnownNetworkPlugin) {
    /** Use the Azure CNI network plugin. See [Azure CNI (advanced) networking](https:\//docs.microsoft.com\/azure\/aks\/concepts-network#azure-cni-advanced-networking) for more information. */
    KnownNetworkPlugin["Azure"] = "azure";
    /** Use the Kubenet network plugin. See [Kubenet (basic) networking](https:\//docs.microsoft.com\/azure\/aks\/concepts-network#kubenet-basic-networking) for more information. */
    KnownNetworkPlugin["Kubenet"] = "kubenet";
    /** No CNI plugin is pre-installed. See [BYO CNI](https:\//docs.microsoft.com\/en-us\/azure\/aks\/use-byo-cni) for more information. */
    KnownNetworkPlugin["None"] = "none";
})(KnownNetworkPlugin || (KnownNetworkPlugin = {}));
/** Known values of {@link NetworkPluginMode} that the service accepts. */
export var KnownNetworkPluginMode;
(function (KnownNetworkPluginMode) {
    /** Used with networkPlugin=azure, pods are given IPs from the PodCIDR address space but use Azure Routing Domains rather than Kubenet's method of route tables. For more information visit https:\//aka.ms\/aks\/azure-cni-overlay. */
    KnownNetworkPluginMode["Overlay"] = "overlay";
})(KnownNetworkPluginMode || (KnownNetworkPluginMode = {}));
/** Known values of {@link NetworkPolicy} that the service accepts. */
export var KnownNetworkPolicy;
(function (KnownNetworkPolicy) {
    /** Use Calico network policies. See [differences between Azure and Calico policies](https:\//docs.microsoft.com\/azure\/aks\/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities) for more information. */
    KnownNetworkPolicy["Calico"] = "calico";
    /** Use Azure network policies. See [differences between Azure and Calico policies](https:\//docs.microsoft.com\/azure\/aks\/use-network-policies#differences-between-azure-and-calico-policies-and-their-capabilities) for more information. */
    KnownNetworkPolicy["Azure"] = "azure";
    /** Use Cilium to enforce network policies. This requires networkDataplane to be 'cilium'. */
    KnownNetworkPolicy["Cilium"] = "cilium";
})(KnownNetworkPolicy || (KnownNetworkPolicy = {}));
/** Known values of {@link NetworkMode} that the service accepts. */
export var KnownNetworkMode;
(function (KnownNetworkMode) {
    /** No bridge is created. Intra-VM Pod to Pod communication is through IP routes created by Azure CNI. See [Transparent Mode](https:\//docs.microsoft.com\/azure\/aks\/faq#transparent-mode) for more information. */
    KnownNetworkMode["Transparent"] = "transparent";
    /** This is no longer supported */
    KnownNetworkMode["Bridge"] = "bridge";
})(KnownNetworkMode || (KnownNetworkMode = {}));
/** Known values of {@link NetworkDataplane} that the service accepts. */
export var KnownNetworkDataplane;
(function (KnownNetworkDataplane) {
    /** Use Azure network dataplane. */
    KnownNetworkDataplane["Azure"] = "azure";
    /** Use Cilium network dataplane. See [Azure CNI Powered by Cilium](https:\//learn.microsoft.com\/azure\/aks\/azure-cni-powered-by-cilium) for more information. */
    KnownNetworkDataplane["Cilium"] = "cilium";
})(KnownNetworkDataplane || (KnownNetworkDataplane = {}));
/** Known values of {@link OutboundType} that the service accepts. */
export var KnownOutboundType;
(function (KnownOutboundType) {
    /** The load balancer is used for egress through an AKS assigned public IP. This supports Kubernetes services of type 'loadBalancer'. For more information see [outbound type loadbalancer](https:\//docs.microsoft.com\/azure\/aks\/egress-outboundtype#outbound-type-of-loadbalancer). */
    KnownOutboundType["LoadBalancer"] = "loadBalancer";
    /** Egress paths must be defined by the user. This is an advanced scenario and requires proper network configuration. For more information see [outbound type userDefinedRouting](https:\//docs.microsoft.com\/azure\/aks\/egress-outboundtype#outbound-type-of-userdefinedrouting). */
    KnownOutboundType["UserDefinedRouting"] = "userDefinedRouting";
    /** The AKS-managed NAT gateway is used for egress. */
    KnownOutboundType["ManagedNATGateway"] = "managedNATGateway";
    /** The user-assigned NAT gateway associated to the cluster subnet is used for egress. This is an advanced scenario and requires proper network configuration. */
    KnownOutboundType["UserAssignedNATGateway"] = "userAssignedNATGateway";
})(KnownOutboundType || (KnownOutboundType = {}));
/** Known values of {@link LoadBalancerSku} that the service accepts. */
export var KnownLoadBalancerSku;
(function (KnownLoadBalancerSku) {
    /** Use a a standard Load Balancer. This is the recommended Load Balancer SKU. For more information about on working with the load balancer in the managed cluster, see the [standard Load Balancer](https:\//docs.microsoft.com\/azure\/aks\/load-balancer-standard) article. */
    KnownLoadBalancerSku["Standard"] = "standard";
    /** Use a basic Load Balancer with limited functionality. */
    KnownLoadBalancerSku["Basic"] = "basic";
})(KnownLoadBalancerSku || (KnownLoadBalancerSku = {}));
/** Known values of {@link BackendPoolType} that the service accepts. */
export var KnownBackendPoolType;
(function (KnownBackendPoolType) {
    /** The type of the managed inbound Load Balancer BackendPool. https:\//cloud-provider-azure.sigs.k8s.io\/topics\/loadbalancer\/#configure-load-balancer-backend. */
    KnownBackendPoolType["NodeIPConfiguration"] = "NodeIPConfiguration";
    /** The type of the managed inbound Load Balancer BackendPool. https:\//cloud-provider-azure.sigs.k8s.io\/topics\/loadbalancer\/#configure-load-balancer-backend. */
    KnownBackendPoolType["NodeIP"] = "NodeIP";
})(KnownBackendPoolType || (KnownBackendPoolType = {}));
/** Known values of {@link IpFamily} that the service accepts. */
export var KnownIpFamily;
(function (KnownIpFamily) {
    /** IPv4 */
    KnownIpFamily["IPv4"] = "IPv4";
    /** IPv6 */
    KnownIpFamily["IPv6"] = "IPv6";
})(KnownIpFamily || (KnownIpFamily = {}));
/** Known values of {@link UpgradeChannel} that the service accepts. */
export var KnownUpgradeChannel;
(function (KnownUpgradeChannel) {
    /** Automatically upgrade the cluster to the latest supported patch release on the latest supported minor version. In cases where the cluster is at a version of Kubernetes that is at an N-2 minor version where N is the latest supported minor version, the cluster first upgrades to the latest supported patch version on N-1 minor version. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster first is upgraded to 1.18.6, then is upgraded to 1.19.1. */
    KnownUpgradeChannel["Rapid"] = "rapid";
    /** Automatically upgrade the cluster to the latest supported patch release on minor version N-1, where N is the latest supported minor version. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster is upgraded to 1.18.6. */
    KnownUpgradeChannel["Stable"] = "stable";
    /** Automatically upgrade the cluster to the latest supported patch version when it becomes available while keeping the minor version the same. For example, if a cluster is running version 1.17.7 and versions 1.17.9, 1.18.4, 1.18.6, and 1.19.1 are available, your cluster is upgraded to 1.17.9. */
    KnownUpgradeChannel["Patch"] = "patch";
    /** Automatically upgrade the node image to the latest version available. Consider using nodeOSUpgradeChannel instead as that allows you to configure node OS patching separate from Kubernetes version patching */
    KnownUpgradeChannel["NodeImage"] = "node-image";
    /** Disables auto-upgrades and keeps the cluster at its current version of Kubernetes. */
    KnownUpgradeChannel["None"] = "none";
})(KnownUpgradeChannel || (KnownUpgradeChannel = {}));
/** Known values of {@link NodeOSUpgradeChannel} that the service accepts. */
export var KnownNodeOSUpgradeChannel;
(function (KnownNodeOSUpgradeChannel) {
    /** No attempt to update your machines OS will be made either by OS or by rolling VHDs. This means you are responsible for your security updates */
    KnownNodeOSUpgradeChannel["None"] = "None";
    /** OS updates will be applied automatically through the OS built-in patching infrastructure. Newly scaled in machines will be unpatched initially and will be patched at some point by the OS's infrastructure. Behavior of this option depends on the OS in question. Ubuntu and Mariner apply security patches through unattended upgrade roughly once a day around 06:00 UTC. Windows does not apply security patches automatically and so for them this option is equivalent to None till further notice */
    KnownNodeOSUpgradeChannel["Unmanaged"] = "Unmanaged";
    /** AKS will update the nodes with a newly patched VHD containing security fixes and bugfixes on a weekly cadence. With the VHD update machines will be rolling reimaged to that VHD following maintenance windows and surge settings. No extra VHD cost is incurred when choosing this option as AKS hosts the images. */
    KnownNodeOSUpgradeChannel["NodeImage"] = "NodeImage";
})(KnownNodeOSUpgradeChannel || (KnownNodeOSUpgradeChannel = {}));
/** Known values of {@link Expander} that the service accepts. */
export var KnownExpander;
(function (KnownExpander) {
    /** Selects the node group that will have the least idle CPU (if tied, unused memory) after scale-up. This is useful when you have different classes of nodes, for example, high CPU or high memory nodes, and only want to expand those when there are pending pods that need a lot of those resources. */
    KnownExpander["LeastWaste"] = "least-waste";
    /** Selects the node group that would be able to schedule the most pods when scaling up. This is useful when you are using nodeSelector to make sure certain pods land on certain nodes. Note that this won't cause the autoscaler to select bigger nodes vs. smaller, as it can add multiple smaller nodes at once. */
    KnownExpander["MostPods"] = "most-pods";
    /** Selects the node group that has the highest priority assigned by the user. It's configuration is described in more details [here](https:\//github.com\/kubernetes\/autoscaler\/blob\/master\/cluster-autoscaler\/expander\/priority\/readme.md). */
    KnownExpander["Priority"] = "priority";
    /** Used when you don't have a particular need for the node groups to scale differently. */
    KnownExpander["Random"] = "random";
})(KnownExpander || (KnownExpander = {}));
/** Known values of {@link KeyVaultNetworkAccessTypes} that the service accepts. */
export var KnownKeyVaultNetworkAccessTypes;
(function (KnownKeyVaultNetworkAccessTypes) {
    /** Public */
    KnownKeyVaultNetworkAccessTypes["Public"] = "Public";
    /** Private */
    KnownKeyVaultNetworkAccessTypes["Private"] = "Private";
})(KnownKeyVaultNetworkAccessTypes || (KnownKeyVaultNetworkAccessTypes = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export var KnownPublicNetworkAccess;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
})(KnownPublicNetworkAccess || (KnownPublicNetworkAccess = {}));
/** Known values of {@link ServiceMeshMode} that the service accepts. */
export var KnownServiceMeshMode;
(function (KnownServiceMeshMode) {
    /** Istio deployed as an AKS addon. */
    KnownServiceMeshMode["Istio"] = "Istio";
    /** Mesh is disabled. */
    KnownServiceMeshMode["Disabled"] = "Disabled";
})(KnownServiceMeshMode || (KnownServiceMeshMode = {}));
/** Known values of {@link IstioIngressGatewayMode} that the service accepts. */
export var KnownIstioIngressGatewayMode;
(function (KnownIstioIngressGatewayMode) {
    /** The ingress gateway is assigned a public IP address and is publicly accessible. */
    KnownIstioIngressGatewayMode["External"] = "External";
    /** The ingress gateway is assigned an internal IP address and cannot is accessed publicly. */
    KnownIstioIngressGatewayMode["Internal"] = "Internal";
})(KnownIstioIngressGatewayMode || (KnownIstioIngressGatewayMode = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link Format} that the service accepts. */
export var KnownFormat;
(function (KnownFormat) {
    /** Return azure auth-provider kubeconfig. This format is deprecated in v1.22 and will be fully removed in v1.26. See: https:\//aka.ms\/k8s\/changes-1-26. */
    KnownFormat["Azure"] = "azure";
    /** Return exec format kubeconfig. This format requires kubelogin binary in the path. */
    KnownFormat["Exec"] = "exec";
})(KnownFormat || (KnownFormat = {}));
/** Known values of {@link WeekDay} that the service accepts. */
export var KnownWeekDay;
(function (KnownWeekDay) {
    /** Sunday */
    KnownWeekDay["Sunday"] = "Sunday";
    /** Monday */
    KnownWeekDay["Monday"] = "Monday";
    /** Tuesday */
    KnownWeekDay["Tuesday"] = "Tuesday";
    /** Wednesday */
    KnownWeekDay["Wednesday"] = "Wednesday";
    /** Thursday */
    KnownWeekDay["Thursday"] = "Thursday";
    /** Friday */
    KnownWeekDay["Friday"] = "Friday";
    /** Saturday */
    KnownWeekDay["Saturday"] = "Saturday";
})(KnownWeekDay || (KnownWeekDay = {}));
/** Known values of {@link Type} that the service accepts. */
export var KnownType;
(function (KnownType) {
    /** First week of the month. */
    KnownType["First"] = "First";
    /** Second week of the month. */
    KnownType["Second"] = "Second";
    /** Third week of the month. */
    KnownType["Third"] = "Third";
    /** Fourth week of the month. */
    KnownType["Fourth"] = "Fourth";
    /** Last week of the month. */
    KnownType["Last"] = "Last";
})(KnownType || (KnownType = {}));
/** Known values of {@link PrivateEndpointConnectionProvisioningState} that the service accepts. */
export var KnownPrivateEndpointConnectionProvisioningState;
(function (KnownPrivateEndpointConnectionProvisioningState) {
    /** Canceled */
    KnownPrivateEndpointConnectionProvisioningState["Canceled"] = "Canceled";
    /** Creating */
    KnownPrivateEndpointConnectionProvisioningState["Creating"] = "Creating";
    /** Deleting */
    KnownPrivateEndpointConnectionProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownPrivateEndpointConnectionProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownPrivateEndpointConnectionProvisioningState["Succeeded"] = "Succeeded";
})(KnownPrivateEndpointConnectionProvisioningState || (KnownPrivateEndpointConnectionProvisioningState = {}));
/** Known values of {@link ConnectionStatus} that the service accepts. */
export var KnownConnectionStatus;
(function (KnownConnectionStatus) {
    /** Pending */
    KnownConnectionStatus["Pending"] = "Pending";
    /** Approved */
    KnownConnectionStatus["Approved"] = "Approved";
    /** Rejected */
    KnownConnectionStatus["Rejected"] = "Rejected";
    /** Disconnected */
    KnownConnectionStatus["Disconnected"] = "Disconnected";
})(KnownConnectionStatus || (KnownConnectionStatus = {}));
/** Known values of {@link SnapshotType} that the service accepts. */
export var KnownSnapshotType;
(function (KnownSnapshotType) {
    /** The snapshot is a snapshot of a node pool. */
    KnownSnapshotType["NodePool"] = "NodePool";
})(KnownSnapshotType || (KnownSnapshotType = {}));
/** Known values of {@link TrustedAccessRoleBindingProvisioningState} that the service accepts. */
export var KnownTrustedAccessRoleBindingProvisioningState;
(function (KnownTrustedAccessRoleBindingProvisioningState) {
    /** Canceled */
    KnownTrustedAccessRoleBindingProvisioningState["Canceled"] = "Canceled";
    /** Deleting */
    KnownTrustedAccessRoleBindingProvisioningState["Deleting"] = "Deleting";
    /** Failed */
    KnownTrustedAccessRoleBindingProvisioningState["Failed"] = "Failed";
    /** Succeeded */
    KnownTrustedAccessRoleBindingProvisioningState["Succeeded"] = "Succeeded";
    /** Updating */
    KnownTrustedAccessRoleBindingProvisioningState["Updating"] = "Updating";
})(KnownTrustedAccessRoleBindingProvisioningState || (KnownTrustedAccessRoleBindingProvisioningState = {}));
//# sourceMappingURL=index.js.map