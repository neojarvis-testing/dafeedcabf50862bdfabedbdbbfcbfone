/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { DnsManagementClient } from "@azure/arm-dns";
import { DefaultAzureCredential } from "@azure/identity";
/**
 * This sample demonstrates how to Updates a record set within a DNS zone.
 *
 * @summary Updates a record set within a DNS zone.
 * x-ms-original-file: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchARecordset.json
 */
function patchARecordset() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const zoneName = "zone1";
        const relativeRecordSetName = "record1";
        const recordType = "A";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new DnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters);
        console.log(result);
    });
}
patchARecordset().catch(console.error);
/**
 * This sample demonstrates how to Updates a record set within a DNS zone.
 *
 * @summary Updates a record set within a DNS zone.
 * x-ms-original-file: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchAAAARecordset.json
 */
function patchAaaaRecordset() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const zoneName = "zone1";
        const relativeRecordSetName = "record1";
        const recordType = "AAAA";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new DnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters);
        console.log(result);
    });
}
patchAaaaRecordset().catch(console.error);
/**
 * This sample demonstrates how to Updates a record set within a DNS zone.
 *
 * @summary Updates a record set within a DNS zone.
 * x-ms-original-file: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchCaaRecordset.json
 */
function patchCaaRecordset() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const zoneName = "zone1";
        const relativeRecordSetName = "record1";
        const recordType = "CAA";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new DnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters);
        console.log(result);
    });
}
patchCaaRecordset().catch(console.error);
/**
 * This sample demonstrates how to Updates a record set within a DNS zone.
 *
 * @summary Updates a record set within a DNS zone.
 * x-ms-original-file: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchCNAMERecordset.json
 */
function patchCnameRecordset() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const zoneName = "zone1";
        const relativeRecordSetName = "record1";
        const recordType = "CNAME";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new DnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters);
        console.log(result);
    });
}
patchCnameRecordset().catch(console.error);
/**
 * This sample demonstrates how to Updates a record set within a DNS zone.
 *
 * @summary Updates a record set within a DNS zone.
 * x-ms-original-file: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchMXRecordset.json
 */
function patchMxRecordset() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const zoneName = "zone1";
        const relativeRecordSetName = "record1";
        const recordType = "MX";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new DnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters);
        console.log(result);
    });
}
patchMxRecordset().catch(console.error);
/**
 * This sample demonstrates how to Updates a record set within a DNS zone.
 *
 * @summary Updates a record set within a DNS zone.
 * x-ms-original-file: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchNSRecordset.json
 */
function patchNsRecordset() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const zoneName = "zone1";
        const relativeRecordSetName = "record1";
        const recordType = "NS";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new DnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters);
        console.log(result);
    });
}
patchNsRecordset().catch(console.error);
/**
 * This sample demonstrates how to Updates a record set within a DNS zone.
 *
 * @summary Updates a record set within a DNS zone.
 * x-ms-original-file: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchPTRRecordset.json
 */
function patchPtrRecordset() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const zoneName = "0.0.127.in-addr.arpa";
        const relativeRecordSetName = "1";
        const recordType = "PTR";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new DnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters);
        console.log(result);
    });
}
patchPtrRecordset().catch(console.error);
/**
 * This sample demonstrates how to Updates a record set within a DNS zone.
 *
 * @summary Updates a record set within a DNS zone.
 * x-ms-original-file: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchSOARecordset.json
 */
function patchSoaRecordset() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const zoneName = "zone1";
        const relativeRecordSetName = "@";
        const recordType = "SOA";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new DnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters);
        console.log(result);
    });
}
patchSoaRecordset().catch(console.error);
/**
 * This sample demonstrates how to Updates a record set within a DNS zone.
 *
 * @summary Updates a record set within a DNS zone.
 * x-ms-original-file: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchSRVRecordset.json
 */
function patchSrvRecordset() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const zoneName = "zone1";
        const relativeRecordSetName = "record1";
        const recordType = "SRV";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new DnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters);
        console.log(result);
    });
}
patchSrvRecordset().catch(console.error);
/**
 * This sample demonstrates how to Updates a record set within a DNS zone.
 *
 * @summary Updates a record set within a DNS zone.
 * x-ms-original-file: specification/dns/resource-manager/Microsoft.Network/stable/2018-05-01/examples/PatchTXTRecordset.json
 */
function patchTxtRecordset() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = "subid";
        const resourceGroupName = "rg1";
        const zoneName = "zone1";
        const relativeRecordSetName = "record1";
        const recordType = "TXT";
        const parameters = { metadata: { key2: "value2" } };
        const credential = new DefaultAzureCredential();
        const client = new DnsManagementClient(credential, subscriptionId);
        const result = yield client.recordSets.update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters);
        console.log(result);
    });
}
patchTxtRecordset().catch(console.error);
//# sourceMappingURL=recordSetsUpdateSample.js.map