'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const RecordSet = {
    type: {
        name: "Composite",
        className: "RecordSet",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            },
            metadata: {
                serializedName: "properties.metadata",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            ttl: {
                serializedName: "properties.TTL",
                type: {
                    name: "Number"
                }
            },
            fqdn: {
                serializedName: "properties.fqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            targetResource: {
                serializedName: "properties.targetResource",
                type: {
                    name: "Composite",
                    className: "SubResource"
                }
            },
            aRecords: {
                serializedName: "properties.ARecords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ARecord"
                        }
                    }
                }
            },
            aaaaRecords: {
                serializedName: "properties.AAAARecords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AaaaRecord"
                        }
                    }
                }
            },
            mxRecords: {
                serializedName: "properties.MXRecords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MxRecord"
                        }
                    }
                }
            },
            nsRecords: {
                serializedName: "properties.NSRecords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NsRecord"
                        }
                    }
                }
            },
            ptrRecords: {
                serializedName: "properties.PTRRecords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PtrRecord"
                        }
                    }
                }
            },
            srvRecords: {
                serializedName: "properties.SRVRecords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SrvRecord"
                        }
                    }
                }
            },
            txtRecords: {
                serializedName: "properties.TXTRecords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TxtRecord"
                        }
                    }
                }
            },
            cnameRecord: {
                serializedName: "properties.CNAMERecord",
                type: {
                    name: "Composite",
                    className: "CnameRecord"
                }
            },
            soaRecord: {
                serializedName: "properties.SOARecord",
                type: {
                    name: "Composite",
                    className: "SoaRecord"
                }
            },
            caaRecords: {
                serializedName: "properties.caaRecords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CaaRecord"
                        }
                    }
                }
            }
        }
    }
};
const SubResource = {
    type: {
        name: "Composite",
        className: "SubResource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ARecord = {
    type: {
        name: "Composite",
        className: "ARecord",
        modelProperties: {
            ipv4Address: {
                serializedName: "ipv4Address",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AaaaRecord = {
    type: {
        name: "Composite",
        className: "AaaaRecord",
        modelProperties: {
            ipv6Address: {
                serializedName: "ipv6Address",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MxRecord = {
    type: {
        name: "Composite",
        className: "MxRecord",
        modelProperties: {
            preference: {
                serializedName: "preference",
                type: {
                    name: "Number"
                }
            },
            exchange: {
                serializedName: "exchange",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const NsRecord = {
    type: {
        name: "Composite",
        className: "NsRecord",
        modelProperties: {
            nsdname: {
                serializedName: "nsdname",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PtrRecord = {
    type: {
        name: "Composite",
        className: "PtrRecord",
        modelProperties: {
            ptrdname: {
                serializedName: "ptrdname",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SrvRecord = {
    type: {
        name: "Composite",
        className: "SrvRecord",
        modelProperties: {
            priority: {
                serializedName: "priority",
                type: {
                    name: "Number"
                }
            },
            weight: {
                serializedName: "weight",
                type: {
                    name: "Number"
                }
            },
            port: {
                serializedName: "port",
                type: {
                    name: "Number"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TxtRecord = {
    type: {
        name: "Composite",
        className: "TxtRecord",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
const CnameRecord = {
    type: {
        name: "Composite",
        className: "CnameRecord",
        modelProperties: {
            cname: {
                serializedName: "cname",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SoaRecord = {
    type: {
        name: "Composite",
        className: "SoaRecord",
        modelProperties: {
            host: {
                serializedName: "host",
                type: {
                    name: "String"
                }
            },
            email: {
                serializedName: "email",
                type: {
                    name: "String"
                }
            },
            serialNumber: {
                serializedName: "serialNumber",
                type: {
                    name: "Number"
                }
            },
            refreshTime: {
                serializedName: "refreshTime",
                type: {
                    name: "Number"
                }
            },
            retryTime: {
                serializedName: "retryTime",
                type: {
                    name: "Number"
                }
            },
            expireTime: {
                serializedName: "expireTime",
                type: {
                    name: "Number"
                }
            },
            minimumTtl: {
                serializedName: "minimumTTL",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const CaaRecord = {
    type: {
        name: "Composite",
        className: "CaaRecord",
        modelProperties: {
            flags: {
                serializedName: "flags",
                type: {
                    name: "Number"
                }
            },
            tag: {
                serializedName: "tag",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const RecordSetListResult = {
    type: {
        name: "Composite",
        className: "RecordSetListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecordSet"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ZoneUpdate = {
    type: {
        name: "Composite",
        className: "ZoneUpdate",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ZoneListResult = {
    type: {
        name: "Composite",
        className: "ZoneListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Zone"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DnsResourceReferenceRequest = {
    type: {
        name: "Composite",
        className: "DnsResourceReferenceRequest",
        modelProperties: {
            targetResources: {
                serializedName: "properties.targetResources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubResource"
                        }
                    }
                }
            }
        }
    }
};
const DnsResourceReferenceResult = {
    type: {
        name: "Composite",
        className: "DnsResourceReferenceResult",
        modelProperties: {
            dnsResourceReferences: {
                serializedName: "properties.dnsResourceReferences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DnsResourceReference"
                        }
                    }
                }
            }
        }
    }
};
const DnsResourceReference = {
    type: {
        name: "Composite",
        className: "DnsResourceReference",
        modelProperties: {
            dnsResources: {
                serializedName: "dnsResources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubResource"
                        }
                    }
                }
            },
            targetResource: {
                serializedName: "targetResource",
                type: {
                    name: "Composite",
                    className: "SubResource"
                }
            }
        }
    }
};
const RecordSetUpdateParameters = {
    type: {
        name: "Composite",
        className: "RecordSetUpdateParameters",
        modelProperties: {
            recordSet: {
                serializedName: "RecordSet",
                type: {
                    name: "Composite",
                    className: "RecordSet"
                }
            }
        }
    }
};
const Zone = {
    type: {
        name: "Composite",
        className: "Zone",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }, maxNumberOfRecordSets: {
                serializedName: "properties.maxNumberOfRecordSets",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, maxNumberOfRecordsPerRecordSet: {
                serializedName: "properties.maxNumberOfRecordsPerRecordSet",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, numberOfRecordSets: {
                serializedName: "properties.numberOfRecordSets",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }, nameServers: {
                serializedName: "properties.nameServers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, zoneType: {
                defaultValue: "Public",
                serializedName: "properties.zoneType",
                type: {
                    name: "Enum",
                    allowedValues: ["Public", "Private"]
                }
            }, registrationVirtualNetworks: {
                serializedName: "properties.registrationVirtualNetworks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubResource"
                        }
                    }
                }
            }, resolutionVirtualNetworks: {
                serializedName: "properties.resolutionVirtualNetworks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SubResource"
                        }
                    }
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    RecordSet: RecordSet,
    SubResource: SubResource,
    ARecord: ARecord,
    AaaaRecord: AaaaRecord,
    MxRecord: MxRecord,
    NsRecord: NsRecord,
    PtrRecord: PtrRecord,
    SrvRecord: SrvRecord,
    TxtRecord: TxtRecord,
    CnameRecord: CnameRecord,
    SoaRecord: SoaRecord,
    CaaRecord: CaaRecord,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    RecordSetListResult: RecordSetListResult,
    Resource: Resource,
    ZoneUpdate: ZoneUpdate,
    ZoneListResult: ZoneListResult,
    DnsResourceReferenceRequest: DnsResourceReferenceRequest,
    DnsResourceReferenceResult: DnsResourceReferenceResult,
    DnsResourceReference: DnsResourceReference,
    RecordSetUpdateParameters: RecordSetUpdateParameters,
    Zone: Zone
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: RecordSet
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const zoneName = {
    parameterPath: "zoneName",
    mapper: {
        serializedName: "zoneName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const relativeRecordSetName = {
    parameterPath: "relativeRecordSetName",
    mapper: {
        serializedName: "relativeRecordSetName",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const recordType = {
    parameterPath: "recordType",
    mapper: {
        serializedName: "recordType",
        required: true,
        type: {
            name: "Enum",
            allowedValues: [
                "A",
                "AAAA",
                "CAA",
                "CNAME",
                "MX",
                "NS",
                "PTR",
                "SOA",
                "SRV",
                "TXT"
            ]
        }
    }
};
const ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-05-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String"
        }
    }
};
const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
const recordsetnamesuffix = {
    parameterPath: ["options", "recordsetnamesuffix"],
    mapper: {
        serializedName: "$recordsetnamesuffix",
        type: {
            name: "String"
        }
    }
};
const recordSetNameSuffix = {
    parameterPath: ["options", "recordSetNameSuffix"],
    mapper: {
        serializedName: "$recordsetnamesuffix",
        type: {
            name: "String"
        }
    }
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: Zone
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: ZoneUpdate
};
const parameters3 = {
    parameterPath: "parameters",
    mapper: DnsResourceReferenceRequest
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing RecordSets operations. */
class RecordSetsImpl {
    /**
     * Initialize a new instance of the class RecordSets class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the record sets of a specified type in a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param recordType The type of record sets to enumerate.
     * @param options The options parameters.
     */
    listByType(resourceGroupName, zoneName, recordType, options) {
        const iter = this.listByTypePagingAll(resourceGroupName, zoneName, recordType, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByTypePagingPage(resourceGroupName, zoneName, recordType, options, settings);
            }
        };
    }
    listByTypePagingPage(resourceGroupName, zoneName, recordType, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByTypePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByType(resourceGroupName, zoneName, recordType, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByTypeNext(resourceGroupName, zoneName, recordType, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByTypePagingAll(resourceGroupName, zoneName, recordType, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByTypePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByTypePagingPage(resourceGroupName, zoneName, recordType, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all record sets in a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    listByDnsZone(resourceGroupName, zoneName, options) {
        const iter = this.listByDnsZonePagingAll(resourceGroupName, zoneName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByDnsZonePagingPage(resourceGroupName, zoneName, options, settings);
            }
        };
    }
    listByDnsZonePagingPage(resourceGroupName, zoneName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByDnsZonePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByDnsZone(resourceGroupName, zoneName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByDnsZoneNext(resourceGroupName, zoneName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByDnsZonePagingAll(resourceGroupName, zoneName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByDnsZonePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByDnsZonePagingPage(resourceGroupName, zoneName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists all record sets in a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    listAllByDnsZone(resourceGroupName, zoneName, options) {
        const iter = this.listAllByDnsZonePagingAll(resourceGroupName, zoneName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listAllByDnsZonePagingPage(resourceGroupName, zoneName, options, settings);
            }
        };
    }
    listAllByDnsZonePagingPage(resourceGroupName, zoneName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listAllByDnsZonePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listAllByDnsZone(resourceGroupName, zoneName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listAllByDnsZoneNext(resourceGroupName, zoneName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listAllByDnsZonePagingAll(resourceGroupName, zoneName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listAllByDnsZonePagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listAllByDnsZonePagingPage(resourceGroupName, zoneName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Updates a record set within a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            parameters,
            options
        }, updateOperationSpec$1);
    }
    /**
     * Creates or updates a record set within a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA can be updated
     *                   but not created (they are created when the DNS zone is created).
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            parameters,
            options
        }, createOrUpdateOperationSpec$1);
    }
    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA cannot be
     *                   deleted (they are deleted when the DNS zone is deleted).
     * @param options The options parameters.
     */
    delete(resourceGroupName, zoneName, relativeRecordSetName, recordType, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            options
        }, deleteOperationSpec$1);
    }
    /**
     * Gets a record set.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @param options The options parameters.
     */
    get(resourceGroupName, zoneName, relativeRecordSetName, recordType, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            zoneName,
            relativeRecordSetName,
            recordType,
            options
        }, getOperationSpec$1);
    }
    /**
     * Lists the record sets of a specified type in a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param recordType The type of record sets to enumerate.
     * @param options The options parameters.
     */
    _listByType(resourceGroupName, zoneName, recordType, options) {
        return this.client.sendOperationRequest({ resourceGroupName, zoneName, recordType, options }, listByTypeOperationSpec);
    }
    /**
     * Lists all record sets in a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    _listByDnsZone(resourceGroupName, zoneName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, zoneName, options }, listByDnsZoneOperationSpec);
    }
    /**
     * Lists all record sets in a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    _listAllByDnsZone(resourceGroupName, zoneName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, zoneName, options }, listAllByDnsZoneOperationSpec);
    }
    /**
     * ListByTypeNext
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param recordType The type of record sets to enumerate.
     * @param nextLink The nextLink from the previous successful call to the ListByType method.
     * @param options The options parameters.
     */
    _listByTypeNext(resourceGroupName, zoneName, recordType, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, zoneName, recordType, nextLink, options }, listByTypeNextOperationSpec);
    }
    /**
     * ListByDnsZoneNext
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param nextLink The nextLink from the previous successful call to the ListByDnsZone method.
     * @param options The options parameters.
     */
    _listByDnsZoneNext(resourceGroupName, zoneName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, zoneName, nextLink, options }, listByDnsZoneNextOperationSpec);
    }
    /**
     * ListAllByDnsZoneNext
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param nextLink The nextLink from the previous successful call to the ListAllByDnsZone method.
     * @param options The options parameters.
     */
    _listAllByDnsZoneNext(resourceGroupName, zoneName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, zoneName, nextLink, options }, listAllByDnsZoneNextOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: RecordSet
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        relativeRecordSetName,
        recordType,
        subscriptionId
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$2
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: RecordSet
        },
        201: {
            bodyMapper: RecordSet
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        relativeRecordSetName,
        recordType,
        subscriptionId
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch,
        ifNoneMatch
    ],
    mediaType: "json",
    serializer: serializer$2
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        relativeRecordSetName,
        recordType,
        subscriptionId
    ],
    headerParameters: [accept, ifMatch],
    serializer: serializer$2
};
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecordSet
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        relativeRecordSetName,
        recordType,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByTypeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecordSetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        top,
        recordsetnamesuffix
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        recordType,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByDnsZoneOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/recordsets",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecordSetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        top,
        recordsetnamesuffix
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listAllByDnsZoneOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/all",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecordSetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        top,
        recordSetNameSuffix
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByTypeNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecordSetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        top,
        recordsetnamesuffix
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        recordType,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listByDnsZoneNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecordSetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        top,
        recordsetnamesuffix
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};
const listAllByDnsZoneNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecordSetListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        top,
        recordSetNameSuffix
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class LroImpl {
    constructor(sendOperationFn, args, spec, requestPath = spec.path, requestMethod = spec.httpMethod) {
        this.sendOperationFn = sendOperationFn;
        this.args = args;
        this.spec = spec;
        this.requestPath = requestPath;
        this.requestMethod = requestMethod;
    }
    sendInitialRequest() {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            return this.sendOperationFn(this.args, this.spec);
        });
    }
    sendPollRequest(path) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const _a = this.spec, restSpec = tslib.__rest(_a, ["requestBody"]);
            return this.sendOperationFn(this.args, Object.assign(Object.assign({}, restSpec), { path, httpMethod: "GET" }));
        });
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Zones operations. */
class ZonesImpl {
    /**
     * Initialize a new instance of the class Zones class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the DNS zones within a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the DNS zones in all resource groups in a subscription.
     * @param options The options parameters.
     */
    list(options) {
        const iter = this.listPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(options, settings);
            }
        };
    }
    listPagingPage(options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = tslib.__asyncValues(this.listPagingPage(options)), _c; _c = yield tslib.__await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield tslib.__await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Creates or updates a DNS zone. Does not modify DNS records within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, zoneName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, zoneName, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot
     * be undone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName, zoneName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { resourceGroupName, zoneName, options }, deleteOperationSpec);
            const poller = new coreLro.LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot
     * be undone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName, zoneName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceGroupName, zoneName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets a DNS zone. Retrieves the zone properties, but not the record sets within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    get(resourceGroupName, zoneName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, zoneName, options }, getOperationSpec);
    }
    /**
     * Updates a DNS zone. Does not modify DNS records within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName, zoneName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, zoneName, parameters, options }, updateOperationSpec);
    }
    /**
     * Lists the DNS zones within a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Lists the DNS zones in all resource groups in a subscription.
     * @param options The options parameters.
     */
    _list(options) {
        return this.client.sendOperationRequest({ options }, listOperationSpec);
    }
    /**
     * ListByResourceGroupNext
     * @param resourceGroupName The name of the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
     * @param options The options parameters.
     */
    _listByResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listByResourceGroupNextOperationSpec);
    }
    /**
     * ListNext
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Zone
        },
        201: {
            bodyMapper: Zone
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        subscriptionId
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch,
        ifNoneMatch
    ],
    mediaType: "json",
    serializer: serializer$1
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        subscriptionId
    ],
    headerParameters: [accept, ifMatch],
    serializer: serializer$1
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Zone
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Zone
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        zoneName,
        subscriptionId
    ],
    headerParameters: [
        contentType,
        accept,
        ifMatch
    ],
    mediaType: "json",
    serializer: serializer$1
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ZoneListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/dnszones",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ZoneListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$1
};
const listByResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ZoneListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ZoneListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion, top],
    urlParameters: [
        $host,
        subscriptionId,
        nextLink
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing DnsResourceReferenceOperations operations. */
class DnsResourceReferenceOperationsImpl {
    /**
     * Initialize a new instance of the class DnsResourceReferenceOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns the DNS records specified by the referencing targetResourceIds.
     * @param parameters Properties for dns resource reference request.
     * @param options The options parameters.
     */
    getByTargetResources(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, getByTargetResourcesOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getByTargetResourcesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/getDnsResourceReference",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: DnsResourceReferenceResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters3,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class DnsManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the DnsManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Specifies the Azure subscription ID, which uniquely identifies the Microsoft
     *                       Azure subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-dns/5.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2018-05-01";
        this.recordSets = new RecordSetsImpl(this);
        this.zones = new ZonesImpl(this);
        this.dnsResourceReferenceOperations = new DnsResourceReferenceOperationsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.DnsManagementClient = DnsManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
