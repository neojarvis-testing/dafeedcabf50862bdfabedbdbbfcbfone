import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** An AAAA record. */
export declare interface AaaaRecord {
    /** The IPv6 address of this AAAA record. */
    ipv6Address?: string;
}

/** An A record. */
export declare interface ARecord {
    /** The IPv4 address of this A record. */
    ipv4Address?: string;
}

/** A CAA record. */
export declare interface CaaRecord {
    /** The flags for this CAA record as an integer between 0 and 255. */
    flags?: number;
    /** The tag for this CAA record. */
    tag?: string;
    /** The value for this CAA record. */
    value?: string;
}

/** An error response from the service. */
export declare interface CloudError {
    /** Cloud error body. */
    error?: CloudErrorBody;
}

/** An error response from the service. */
export declare interface CloudErrorBody {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code?: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message?: string;
    /** The target of the particular error. For example, the name of the property in error. */
    target?: string;
    /** A list of additional details about the error. */
    details?: CloudErrorBody[];
}

/** A CNAME record. */
export declare interface CnameRecord {
    /** The canonical name for this CNAME record. */
    cname?: string;
}

export declare class DnsManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the DnsManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Specifies the Azure subscription ID, which uniquely identifies the Microsoft
     *                       Azure subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: DnsManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    recordSets: RecordSets;
    zones: Zones;
    dnsResourceReferenceOperations: DnsResourceReferenceOperations;
}

/** Optional parameters. */
export declare interface DnsManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Represents a single Azure resource and its referencing DNS records. */
export declare interface DnsResourceReference {
    /** A list of dns Records */
    dnsResources?: SubResource[];
    /** A reference to an azure resource from where the dns resource value is taken. */
    targetResource?: SubResource;
}

/** Optional parameters. */
export declare interface DnsResourceReferenceGetByTargetResourcesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByTargetResources operation. */
export declare type DnsResourceReferenceGetByTargetResourcesResponse = DnsResourceReferenceResult;

/** Interface representing a DnsResourceReferenceOperations. */
export declare interface DnsResourceReferenceOperations {
    /**
     * Returns the DNS records specified by the referencing targetResourceIds.
     * @param parameters Properties for dns resource reference request.
     * @param options The options parameters.
     */
    getByTargetResources(parameters: DnsResourceReferenceRequest, options?: DnsResourceReferenceGetByTargetResourcesOptionalParams): Promise<DnsResourceReferenceGetByTargetResourcesResponse>;
}

/** Represents the properties of the Dns Resource Reference Request. */
export declare interface DnsResourceReferenceRequest {
    /** A list of references to azure resources for which referencing dns records need to be queried. */
    targetResources?: SubResource[];
}

/** Represents the properties of the Dns Resource Reference Result. */
export declare interface DnsResourceReferenceResult {
    /** The result of dns resource reference request. A list of dns resource references for each of the azure resource in the request */
    dnsResourceReferences?: DnsResourceReference[];
}

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** An MX record. */
export declare interface MxRecord {
    /** The preference value for this MX record. */
    preference?: number;
    /** The domain name of the mail host for this MX record. */
    exchange?: string;
}

/** An NS record. */
export declare interface NsRecord {
    /** The name server name for this NS record. */
    nsdname?: string;
}

/** A PTR record. */
export declare interface PtrRecord {
    /** The PTR target domain name for this PTR record. */
    ptrdname?: string;
}

/** Describes a DNS record set (a collection of DNS records with the same name and type). */
export declare interface RecordSet {
    /**
     * The ID of the record set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the record set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the record set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The etag of the record set. */
    etag?: string;
    /** The metadata attached to the record set. */
    metadata?: {
        [propertyName: string]: string;
    };
    /** The TTL (time-to-live) of the records in the record set. */
    ttl?: number;
    /**
     * Fully qualified domain name of the record set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fqdn?: string;
    /**
     * provisioning State of the record set.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** A reference to an azure resource from where the dns resource value is taken. */
    targetResource?: SubResource;
    /** The list of A records in the record set. */
    aRecords?: ARecord[];
    /** The list of AAAA records in the record set. */
    aaaaRecords?: AaaaRecord[];
    /** The list of MX records in the record set. */
    mxRecords?: MxRecord[];
    /** The list of NS records in the record set. */
    nsRecords?: NsRecord[];
    /** The list of PTR records in the record set. */
    ptrRecords?: PtrRecord[];
    /** The list of SRV records in the record set. */
    srvRecords?: SrvRecord[];
    /** The list of TXT records in the record set. */
    txtRecords?: TxtRecord[];
    /** The CNAME record in the  record set. */
    cnameRecord?: CnameRecord;
    /** The SOA record in the record set. */
    soaRecord?: SoaRecord;
    /** The list of CAA records in the record set. */
    caaRecords?: CaaRecord[];
}

/** The response to a record set List operation. */
export declare interface RecordSetListResult {
    /** Information about the record sets in the response. */
    value?: RecordSet[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a RecordSets. */
export declare interface RecordSets {
    /**
     * Lists the record sets of a specified type in a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param recordType The type of record sets to enumerate.
     * @param options The options parameters.
     */
    listByType(resourceGroupName: string, zoneName: string, recordType: RecordType, options?: RecordSetsListByTypeOptionalParams): PagedAsyncIterableIterator<RecordSet>;
    /**
     * Lists all record sets in a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    listByDnsZone(resourceGroupName: string, zoneName: string, options?: RecordSetsListByDnsZoneOptionalParams): PagedAsyncIterableIterator<RecordSet>;
    /**
     * Lists all record sets in a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    listAllByDnsZone(resourceGroupName: string, zoneName: string, options?: RecordSetsListAllByDnsZoneOptionalParams): PagedAsyncIterableIterator<RecordSet>;
    /**
     * Updates a record set within a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: RecordType, parameters: RecordSet, options?: RecordSetsUpdateOptionalParams): Promise<RecordSetsUpdateResponse>;
    /**
     * Creates or updates a record set within a DNS zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA can be updated
     *                   but not created (they are created when the DNS zone is created).
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: RecordType, parameters: RecordSet, options?: RecordSetsCreateOrUpdateOptionalParams): Promise<RecordSetsCreateOrUpdateResponse>;
    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set. Record sets of type SOA cannot be
     *                   deleted (they are deleted when the DNS zone is deleted).
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: RecordType, options?: RecordSetsDeleteOptionalParams): Promise<void>;
    /**
     * Gets a record set.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param recordType The type of DNS record in this record set.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, zoneName: string, relativeRecordSetName: string, recordType: RecordType, options?: RecordSetsGetOptionalParams): Promise<RecordSetsGetResponse>;
}

/** Optional parameters. */
export declare interface RecordSetsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored. */
    ifNoneMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type RecordSetsCreateOrUpdateResponse = RecordSet;

/** Optional parameters. */
export declare interface RecordSetsDeleteOptionalParams extends coreClient.OperationOptions {
    /** The etag of the record set. Omit this value to always delete the current record set. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes. */
    ifMatch?: string;
}

/** Optional parameters. */
export declare interface RecordSetsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RecordSetsGetResponse = RecordSet;

/** Optional parameters. */
export declare interface RecordSetsListAllByDnsZoneNextOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
    /** The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix> */
    recordSetNameSuffix?: string;
}

/** Contains response data for the listAllByDnsZoneNext operation. */
export declare type RecordSetsListAllByDnsZoneNextResponse = RecordSetListResult;

/** Optional parameters. */
export declare interface RecordSetsListAllByDnsZoneOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
    /** The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix> */
    recordSetNameSuffix?: string;
}

/** Contains response data for the listAllByDnsZone operation. */
export declare type RecordSetsListAllByDnsZoneResponse = RecordSetListResult;

/** Optional parameters. */
export declare interface RecordSetsListByDnsZoneNextOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
    /** The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix> */
    recordsetnamesuffix?: string;
}

/** Contains response data for the listByDnsZoneNext operation. */
export declare type RecordSetsListByDnsZoneNextResponse = RecordSetListResult;

/** Optional parameters. */
export declare interface RecordSetsListByDnsZoneOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
    /** The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix> */
    recordsetnamesuffix?: string;
}

/** Contains response data for the listByDnsZone operation. */
export declare type RecordSetsListByDnsZoneResponse = RecordSetListResult;

/** Optional parameters. */
export declare interface RecordSetsListByTypeNextOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
    /** The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix> */
    recordsetnamesuffix?: string;
}

/** Contains response data for the listByTypeNext operation. */
export declare type RecordSetsListByTypeNextResponse = RecordSetListResult;

/** Optional parameters. */
export declare interface RecordSetsListByTypeOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
    /** The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix> */
    recordsetnamesuffix?: string;
}

/** Contains response data for the listByType operation. */
export declare type RecordSetsListByTypeResponse = RecordSetListResult;

/** Optional parameters. */
export declare interface RecordSetsUpdateOptionalParams extends coreClient.OperationOptions {
    /** The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting concurrent changes. */
    ifMatch?: string;
}

/** Contains response data for the update operation. */
export declare type RecordSetsUpdateResponse = RecordSet;

/** Parameters supplied to update a record set. */
export declare interface RecordSetUpdateParameters {
    /** Specifies information about the record set being updated. */
    recordSet?: RecordSet;
}

/** Defines values for RecordType. */
export declare type RecordType = "A" | "AAAA" | "CAA" | "CNAME" | "MX" | "NS" | "PTR" | "SOA" | "SRV" | "TXT";

/** Common properties of an Azure Resource Manager resource */
export declare interface Resource {
    /**
     * Resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location. */
    location: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** An SOA record. */
export declare interface SoaRecord {
    /** The domain name of the authoritative name server for this SOA record. */
    host?: string;
    /** The email contact for this SOA record. */
    email?: string;
    /** The serial number for this SOA record. */
    serialNumber?: number;
    /** The refresh value for this SOA record. */
    refreshTime?: number;
    /** The retry time for this SOA record. */
    retryTime?: number;
    /** The expire time for this SOA record. */
    expireTime?: number;
    /** The minimum value for this SOA record. By convention this is used to determine the negative caching duration. */
    minimumTtl?: number;
}

/** An SRV record. */
export declare interface SrvRecord {
    /** The priority value for this SRV record. */
    priority?: number;
    /** The weight value for this SRV record. */
    weight?: number;
    /** The port value for this SRV record. */
    port?: number;
    /** The target domain name for this SRV record. */
    target?: string;
}

/** A reference to a another resource */
export declare interface SubResource {
    /** Resource Id. */
    id?: string;
}

/** A TXT record. */
export declare interface TxtRecord {
    /** The text value of this TXT record. */
    value?: string[];
}

/** Describes a DNS zone. */
export declare interface Zone extends Resource {
    /** The etag of the zone. */
    etag?: string;
    /**
     * The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxNumberOfRecordSets?: number;
    /**
     * The maximum number of records per record set that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxNumberOfRecordsPerRecordSet?: number;
    /**
     * The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly numberOfRecordSets?: number;
    /**
     * The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nameServers?: string[];
    /** The type of this DNS zone (Public or Private). */
    zoneType?: ZoneType;
    /** A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private. */
    registrationVirtualNetworks?: SubResource[];
    /** A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private. */
    resolutionVirtualNetworks?: SubResource[];
}

/** The response to a Zone List or ListAll operation. */
export declare interface ZoneListResult {
    /** Information about the DNS zones. */
    value?: Zone[];
    /**
     * The continuation token for the next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a Zones. */
export declare interface Zones {
    /**
     * Lists the DNS zones within a resource group.
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ZonesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Zone>;
    /**
     * Lists the DNS zones in all resource groups in a subscription.
     * @param options The options parameters.
     */
    list(options?: ZonesListOptionalParams): PagedAsyncIterableIterator<Zone>;
    /**
     * Creates or updates a DNS zone. Does not modify DNS records within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param parameters Parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, zoneName: string, parameters: Zone, options?: ZonesCreateOrUpdateOptionalParams): Promise<ZonesCreateOrUpdateResponse>;
    /**
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot
     * be undone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, zoneName: string, options?: ZonesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot
     * be undone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, zoneName: string, options?: ZonesDeleteOptionalParams): Promise<void>;
    /**
     * Gets a DNS zone. Retrieves the zone properties, but not the record sets within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param options The options parameters.
     */
    get(resourceGroupName: string, zoneName: string, options?: ZonesGetOptionalParams): Promise<ZonesGetResponse>;
    /**
     * Updates a DNS zone. Does not modify DNS records within the zone.
     * @param resourceGroupName The name of the resource group.
     * @param zoneName The name of the DNS zone (without a terminating dot).
     * @param parameters Parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, zoneName: string, parameters: ZoneUpdate, options?: ZonesUpdateOptionalParams): Promise<ZonesUpdateResponse>;
}

/** Optional parameters. */
export declare interface ZonesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** The etag of the DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
    /** Set to '*' to allow a new DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored. */
    ifNoneMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type ZonesCreateOrUpdateResponse = Zone;

/** Optional parameters. */
export declare interface ZonesDeleteOptionalParams extends coreClient.OperationOptions {
    /** The etag of the DNS zone. Omit this value to always delete the current zone. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ZonesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ZonesGetResponse = Zone;

/** Optional parameters. */
export declare interface ZonesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type ZonesListByResourceGroupNextResponse = ZoneListResult;

/** Optional parameters. */
export declare interface ZonesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of record sets to return. If not specified, returns up to 100 record sets. */
    top?: number;
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ZonesListByResourceGroupResponse = ZoneListResult;

/** Optional parameters. */
export declare interface ZonesListNextOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of DNS zones to return. If not specified, returns up to 100 zones. */
    top?: number;
}

/** Contains response data for the listNext operation. */
export declare type ZonesListNextResponse = ZoneListResult;

/** Optional parameters. */
export declare interface ZonesListOptionalParams extends coreClient.OperationOptions {
    /** The maximum number of DNS zones to return. If not specified, returns up to 100 zones. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type ZonesListResponse = ZoneListResult;

/** Optional parameters. */
export declare interface ZonesUpdateOptionalParams extends coreClient.OperationOptions {
    /** The etag of the DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes. */
    ifMatch?: string;
}

/** Contains response data for the update operation. */
export declare type ZonesUpdateResponse = Zone;

/** Defines values for ZoneType. */
export declare type ZoneType = "Public" | "Private";

/** Describes a request to update a DNS zone. */
export declare interface ZoneUpdate {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

export { }
