/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { CosmosDBManagementClient } from "@azure/arm-cosmosdb";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Creates a service.
 *
 * @summary Creates a service.
 * x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2023-11-15/examples/CosmosDBDataTransferServiceCreate.json
 */
function dataTransferServiceCreate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COSMOSDB_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["COSMOSDB_RESOURCE_GROUP"] || "rg1";
        const accountName = "ddb1";
        const serviceName = "DataTransfer";
        const createUpdateParameters = {
            instanceCount: 1,
            instanceSize: "Cosmos.D4s",
            serviceType: "DataTransfer"
        };
        const credential = new DefaultAzureCredential();
        const client = new CosmosDBManagementClient(credential, subscriptionId);
        const result = yield client.service.beginCreateAndWait(resourceGroupName, accountName, serviceName, createUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a service.
 *
 * @summary Creates a service.
 * x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2023-11-15/examples/CosmosDBGraphAPIComputeServiceCreate.json
 */
function graphApiComputeServiceCreate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COSMOSDB_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["COSMOSDB_RESOURCE_GROUP"] || "rg1";
        const accountName = "ddb1";
        const serviceName = "GraphAPICompute";
        const createUpdateParameters = {
            instanceCount: 1,
            instanceSize: "Cosmos.D4s",
            serviceType: "GraphAPICompute"
        };
        const credential = new DefaultAzureCredential();
        const client = new CosmosDBManagementClient(credential, subscriptionId);
        const result = yield client.service.beginCreateAndWait(resourceGroupName, accountName, serviceName, createUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a service.
 *
 * @summary Creates a service.
 * x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2023-11-15/examples/CosmosDBMaterializedViewsBuilderServiceCreate.json
 */
function materializedViewsBuilderServiceCreate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COSMOSDB_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["COSMOSDB_RESOURCE_GROUP"] || "rg1";
        const accountName = "ddb1";
        const serviceName = "MaterializedViewsBuilder";
        const createUpdateParameters = {
            instanceCount: 1,
            instanceSize: "Cosmos.D4s",
            serviceType: "MaterializedViewsBuilder"
        };
        const credential = new DefaultAzureCredential();
        const client = new CosmosDBManagementClient(credential, subscriptionId);
        const result = yield client.service.beginCreateAndWait(resourceGroupName, accountName, serviceName, createUpdateParameters);
        console.log(result);
    });
}
/**
 * This sample demonstrates how to Creates a service.
 *
 * @summary Creates a service.
 * x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2023-11-15/examples/CosmosDBSqlDedicatedGatewayServiceCreate.json
 */
function sqlDedicatedGatewayServiceCreate() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COSMOSDB_SUBSCRIPTION_ID"] || "subid";
        const resourceGroupName = process.env["COSMOSDB_RESOURCE_GROUP"] || "rg1";
        const accountName = "ddb1";
        const serviceName = "SqlDedicatedGateway";
        const createUpdateParameters = {
            instanceCount: 1,
            instanceSize: "Cosmos.D4s",
            serviceType: "SqlDedicatedGateway"
        };
        const credential = new DefaultAzureCredential();
        const client = new CosmosDBManagementClient(credential, subscriptionId);
        const result = yield client.service.beginCreateAndWait(resourceGroupName, accountName, serviceName, createUpdateParameters);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        dataTransferServiceCreate();
        graphApiComputeServiceCreate();
        materializedViewsBuilderServiceCreate();
        sqlDedicatedGatewayServiceCreate();
    });
}
main().catch(console.error);
//# sourceMappingURL=serviceCreateSample.js.map