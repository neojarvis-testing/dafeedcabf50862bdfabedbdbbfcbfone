/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { CosmosDBManagementClient } from "@azure/arm-cosmosdb";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Show the event feed of all mutations done on all the Azure Cosmos DB SQL databases under the restorable account.  This helps in scenario where database was accidentally deleted to get the deletion time.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission
 *
 * @summary Show the event feed of all mutations done on all the Azure Cosmos DB SQL databases under the restorable account.  This helps in scenario where database was accidentally deleted to get the deletion time.  This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission
 * x-ms-original-file: specification/cosmos-db/resource-manager/Microsoft.DocumentDB/stable/2023-11-15/examples/CosmosDBRestorableSqlDatabaseList.json
 */
function cosmosDbRestorableSqlDatabaseList() {
    var _a, e_1, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["COSMOSDB_SUBSCRIPTION_ID"] ||
            "2296c272-5d55-40d9-bc05-4d56dc2d7588";
        const location = "WestUS";
        const instanceId = "d9b26648-2f53-4541-b3d8-3044f4f9810d";
        const credential = new DefaultAzureCredential();
        const client = new CosmosDBManagementClient(credential, subscriptionId);
        const resArray = new Array();
        try {
            for (var _d = true, _e = __asyncValues(client.restorableSqlDatabases.list(location, instanceId)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                _c = _f.value;
                _d = false;
                let item = _c;
                resArray.push(item);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        console.log(resArray);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        cosmosDbRestorableSqlDatabaseList();
    });
}
main().catch(console.error);
//# sourceMappingURL=restorableSqlDatabasesListSample.js.map