/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncValues, __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { CosmosDBManagementClient } from "../src/cosmosDBManagementClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "88888888-8888-8888-8888-888888888888"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("Cosmosdb test", () => {
    let recorder;
    let client;
    let subscriptionId;
    let location;
    let resourceGroupName;
    let accountName;
    let keyspaceName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new CosmosDBManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroupName = "myjstest";
            accountName = "myaccountxxyy1";
            keyspaceName = "mykeyspacexxx";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("databaseAccounts create for cassandraResources test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.databaseAccounts.beginCreateOrUpdateAndWait(resourceGroupName, accountName, {
                kind: "GlobalDocumentDB",
                databaseAccountOfferType: "Standard",
                locations: [
                    {
                        failoverPriority: 0,
                        locationName: "eastus",
                        isZoneRedundant: false
                    }
                ],
                location: location,
                capabilities: [
                    {
                        name: "EnableCassandra"
                    }
                ],
                apiProperties: {},
                createMode: "Default"
            }, testPollingOptions);
            assert.equal(res.name, accountName);
        });
    });
    it("cassandraResources create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.cassandraResources.beginCreateUpdateCassandraKeyspaceAndWait(resourceGroupName, accountName, keyspaceName, {
                location: location,
                resource: {
                    id: keyspaceName
                },
                options: {
                    throughput: 2000
                }
            }, testPollingOptions);
            assert.equal(res.type, "Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces");
        });
    });
    it("cassandraResources update test", function () {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.cassandraResources.beginUpdateCassandraKeyspaceThroughputAndWait(resourceGroupName, accountName, keyspaceName, {
                location: location,
                resource: {
                    throughput: 400
                }
            }, testPollingOptions);
            assert.equal((_a = res.resource) === null || _a === void 0 ? void 0 : _a.throughput, 400);
        });
    });
    it("cassandraResources get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.cassandraResources.getCassandraKeyspace(resourceGroupName, accountName, keyspaceName);
            assert.equal(res.type, "Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces");
        });
    });
    it("cassandraResources list test", function () {
        var _a, e_1, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.cassandraResources.listCassandraKeyspaces(resourceGroupName, accountName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            assert.equal(resArray.length, 1);
        });
    });
    it("cassandraResources MigrateCassandra test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.cassandraResources.beginMigrateCassandraKeyspaceToAutoscaleAndWait(resourceGroupName, accountName, keyspaceName, testPollingOptions);
            assert.equal(res.type, "Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/throughputSettings/migrateToAutoscale");
        });
    });
    it("cassandraResources delete test", function () {
        var _a, e_2, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            yield client.cassandraResources.beginDeleteCassandraKeyspaceAndWait(resourceGroupName, accountName, keyspaceName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.cassandraResources.listCassandraKeyspaces(resourceGroupName, accountName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
    it("databaseAccount delete for cassandraResources test", function () {
        var _a, e_3, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            yield client.databaseAccounts.beginDeleteAndWait(resourceGroupName, accountName, testPollingOptions);
            const resArray = new Array();
            try {
                for (var _d = true, _e = __asyncValues(client.databaseAccounts.listByResourceGroup(resourceGroupName)), _f; _f = yield _e.next(), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    let item = _c;
                    resArray.push(item);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            assert.equal(resArray.length, 0);
        });
    });
});
//# sourceMappingURL=cosmosdb_cassandra_examples.js.map