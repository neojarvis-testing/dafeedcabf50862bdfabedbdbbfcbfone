import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { DatabaseAccounts, Operations, Database, Collection, CollectionRegion, DatabaseAccountRegion, PercentileSourceTarget, PercentileTarget, Percentile, CollectionPartitionRegion, CollectionPartition, PartitionKeyRangeId, PartitionKeyRangeIdRegion, SqlResources, MongoDBResources, TableResources, CassandraResources, GremlinResources, Locations, CassandraClusters, CassandraDataCenters, NotebookWorkspaces, PrivateEndpointConnections, PrivateLinkResources, RestorableDatabaseAccounts, RestorableSqlDatabases, RestorableSqlContainers, RestorableSqlResources, RestorableMongodbDatabases, RestorableMongodbCollections, RestorableMongodbResources, RestorableGremlinDatabases, RestorableGremlinGraphs, RestorableGremlinResources, RestorableTables, RestorableTableResources, Service } from "./operationsInterfaces";
import { CosmosDBManagementClientOptionalParams } from "./models";
export declare class CosmosDBManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the CosmosDBManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: CosmosDBManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    databaseAccounts: DatabaseAccounts;
    operations: Operations;
    database: Database;
    collection: Collection;
    collectionRegion: CollectionRegion;
    databaseAccountRegion: DatabaseAccountRegion;
    percentileSourceTarget: PercentileSourceTarget;
    percentileTarget: PercentileTarget;
    percentile: Percentile;
    collectionPartitionRegion: CollectionPartitionRegion;
    collectionPartition: CollectionPartition;
    partitionKeyRangeId: PartitionKeyRangeId;
    partitionKeyRangeIdRegion: PartitionKeyRangeIdRegion;
    sqlResources: SqlResources;
    mongoDBResources: MongoDBResources;
    tableResources: TableResources;
    cassandraResources: CassandraResources;
    gremlinResources: GremlinResources;
    locations: Locations;
    cassandraClusters: CassandraClusters;
    cassandraDataCenters: CassandraDataCenters;
    notebookWorkspaces: NotebookWorkspaces;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    restorableDatabaseAccounts: RestorableDatabaseAccounts;
    restorableSqlDatabases: RestorableSqlDatabases;
    restorableSqlContainers: RestorableSqlContainers;
    restorableSqlResources: RestorableSqlResources;
    restorableMongodbDatabases: RestorableMongodbDatabases;
    restorableMongodbCollections: RestorableMongodbCollections;
    restorableMongodbResources: RestorableMongodbResources;
    restorableGremlinDatabases: RestorableGremlinDatabases;
    restorableGremlinGraphs: RestorableGremlinGraphs;
    restorableGremlinResources: RestorableGremlinResources;
    restorableTables: RestorableTables;
    restorableTableResources: RestorableTableResources;
    service: Service;
}
//# sourceMappingURL=cosmosDBManagementClient.d.ts.map