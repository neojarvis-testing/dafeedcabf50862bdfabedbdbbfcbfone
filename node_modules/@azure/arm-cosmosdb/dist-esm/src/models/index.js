/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link DatabaseAccountKind} that the service accepts. */
export var KnownDatabaseAccountKind;
(function (KnownDatabaseAccountKind) {
    /** GlobalDocumentDB */
    KnownDatabaseAccountKind["GlobalDocumentDB"] = "GlobalDocumentDB";
    /** MongoDB */
    KnownDatabaseAccountKind["MongoDB"] = "MongoDB";
    /** Parse */
    KnownDatabaseAccountKind["Parse"] = "Parse";
})(KnownDatabaseAccountKind || (KnownDatabaseAccountKind = {}));
/** Known values of {@link ConnectorOffer} that the service accepts. */
export var KnownConnectorOffer;
(function (KnownConnectorOffer) {
    /** Small */
    KnownConnectorOffer["Small"] = "Small";
})(KnownConnectorOffer || (KnownConnectorOffer = {}));
/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export var KnownPublicNetworkAccess;
(function (KnownPublicNetworkAccess) {
    /** Enabled */
    KnownPublicNetworkAccess["Enabled"] = "Enabled";
    /** Disabled */
    KnownPublicNetworkAccess["Disabled"] = "Disabled";
    /** SecuredByPerimeter */
    KnownPublicNetworkAccess["SecuredByPerimeter"] = "SecuredByPerimeter";
})(KnownPublicNetworkAccess || (KnownPublicNetworkAccess = {}));
/** Known values of {@link ServerVersion} that the service accepts. */
export var KnownServerVersion;
(function (KnownServerVersion) {
    /** Three2 */
    KnownServerVersion["Three2"] = "3.2";
    /** Three6 */
    KnownServerVersion["Three6"] = "3.6";
    /** Four0 */
    KnownServerVersion["Four0"] = "4.0";
    /** Four2 */
    KnownServerVersion["Four2"] = "4.2";
})(KnownServerVersion || (KnownServerVersion = {}));
/** Known values of {@link AnalyticalStorageSchemaType} that the service accepts. */
export var KnownAnalyticalStorageSchemaType;
(function (KnownAnalyticalStorageSchemaType) {
    /** WellDefined */
    KnownAnalyticalStorageSchemaType["WellDefined"] = "WellDefined";
    /** FullFidelity */
    KnownAnalyticalStorageSchemaType["FullFidelity"] = "FullFidelity";
})(KnownAnalyticalStorageSchemaType || (KnownAnalyticalStorageSchemaType = {}));
/** Known values of {@link CreateMode} that the service accepts. */
export var KnownCreateMode;
(function (KnownCreateMode) {
    /** Default */
    KnownCreateMode["Default"] = "Default";
    /** Restore */
    KnownCreateMode["Restore"] = "Restore";
})(KnownCreateMode || (KnownCreateMode = {}));
/** Known values of {@link RestoreMode} that the service accepts. */
export var KnownRestoreMode;
(function (KnownRestoreMode) {
    /** PointInTime */
    KnownRestoreMode["PointInTime"] = "PointInTime";
})(KnownRestoreMode || (KnownRestoreMode = {}));
/** Known values of {@link BackupPolicyType} that the service accepts. */
export var KnownBackupPolicyType;
(function (KnownBackupPolicyType) {
    /** Periodic */
    KnownBackupPolicyType["Periodic"] = "Periodic";
    /** Continuous */
    KnownBackupPolicyType["Continuous"] = "Continuous";
})(KnownBackupPolicyType || (KnownBackupPolicyType = {}));
/** Known values of {@link BackupPolicyMigrationStatus} that the service accepts. */
export var KnownBackupPolicyMigrationStatus;
(function (KnownBackupPolicyMigrationStatus) {
    /** Invalid */
    KnownBackupPolicyMigrationStatus["Invalid"] = "Invalid";
    /** InProgress */
    KnownBackupPolicyMigrationStatus["InProgress"] = "InProgress";
    /** Completed */
    KnownBackupPolicyMigrationStatus["Completed"] = "Completed";
    /** Failed */
    KnownBackupPolicyMigrationStatus["Failed"] = "Failed";
})(KnownBackupPolicyMigrationStatus || (KnownBackupPolicyMigrationStatus = {}));
/** Known values of {@link MinimalTlsVersion} that the service accepts. */
export var KnownMinimalTlsVersion;
(function (KnownMinimalTlsVersion) {
    /** Tls */
    KnownMinimalTlsVersion["Tls"] = "Tls";
    /** Tls11 */
    KnownMinimalTlsVersion["Tls11"] = "Tls11";
    /** Tls12 */
    KnownMinimalTlsVersion["Tls12"] = "Tls12";
})(KnownMinimalTlsVersion || (KnownMinimalTlsVersion = {}));
/** Known values of {@link CreatedByType} that the service accepts. */
export var KnownCreatedByType;
(function (KnownCreatedByType) {
    /** User */
    KnownCreatedByType["User"] = "User";
    /** Application */
    KnownCreatedByType["Application"] = "Application";
    /** ManagedIdentity */
    KnownCreatedByType["ManagedIdentity"] = "ManagedIdentity";
    /** Key */
    KnownCreatedByType["Key"] = "Key";
})(KnownCreatedByType || (KnownCreatedByType = {}));
/** Known values of {@link Kind} that the service accepts. */
export var KnownKind;
(function (KnownKind) {
    /** Primary */
    KnownKind["Primary"] = "Primary";
    /** Secondary */
    KnownKind["Secondary"] = "Secondary";
    /** PrimaryReadonly */
    KnownKind["PrimaryReadonly"] = "PrimaryReadonly";
    /** SecondaryReadonly */
    KnownKind["SecondaryReadonly"] = "SecondaryReadonly";
})(KnownKind || (KnownKind = {}));
/** Known values of {@link Type} that the service accepts. */
export var KnownType;
(function (KnownType) {
    /** Sql */
    KnownType["Sql"] = "Sql";
    /** Table */
    KnownType["Table"] = "Table";
    /** MongoDB */
    KnownType["MongoDB"] = "MongoDB";
    /** Cassandra */
    KnownType["Cassandra"] = "Cassandra";
    /** CassandraConnectorMetadata */
    KnownType["CassandraConnectorMetadata"] = "CassandraConnectorMetadata";
    /** Gremlin */
    KnownType["Gremlin"] = "Gremlin";
    /** SqlDedicatedGateway */
    KnownType["SqlDedicatedGateway"] = "SqlDedicatedGateway";
    /** GremlinV2 */
    KnownType["GremlinV2"] = "GremlinV2";
    /** Undefined */
    KnownType["Undefined"] = "Undefined";
})(KnownType || (KnownType = {}));
/** Known values of {@link KeyKind} that the service accepts. */
export var KnownKeyKind;
(function (KnownKeyKind) {
    /** Primary */
    KnownKeyKind["Primary"] = "primary";
    /** Secondary */
    KnownKeyKind["Secondary"] = "secondary";
    /** PrimaryReadonly */
    KnownKeyKind["PrimaryReadonly"] = "primaryReadonly";
    /** SecondaryReadonly */
    KnownKeyKind["SecondaryReadonly"] = "secondaryReadonly";
})(KnownKeyKind || (KnownKeyKind = {}));
/** Known values of {@link UnitType} that the service accepts. */
export var KnownUnitType;
(function (KnownUnitType) {
    /** Count */
    KnownUnitType["Count"] = "Count";
    /** Bytes */
    KnownUnitType["Bytes"] = "Bytes";
    /** Seconds */
    KnownUnitType["Seconds"] = "Seconds";
    /** Percent */
    KnownUnitType["Percent"] = "Percent";
    /** CountPerSecond */
    KnownUnitType["CountPerSecond"] = "CountPerSecond";
    /** BytesPerSecond */
    KnownUnitType["BytesPerSecond"] = "BytesPerSecond";
    /** Milliseconds */
    KnownUnitType["Milliseconds"] = "Milliseconds";
})(KnownUnitType || (KnownUnitType = {}));
/** Known values of {@link PrimaryAggregationType} that the service accepts. */
export var KnownPrimaryAggregationType;
(function (KnownPrimaryAggregationType) {
    /** None */
    KnownPrimaryAggregationType["None"] = "None";
    /** Average */
    KnownPrimaryAggregationType["Average"] = "Average";
    /** Total */
    KnownPrimaryAggregationType["Total"] = "Total";
    /** Minimum */
    KnownPrimaryAggregationType["Minimum"] = "Minimum";
    /** Maximum */
    KnownPrimaryAggregationType["Maximum"] = "Maximum";
    /** Last */
    KnownPrimaryAggregationType["Last"] = "Last";
})(KnownPrimaryAggregationType || (KnownPrimaryAggregationType = {}));
/** Known values of {@link IndexingMode} that the service accepts. */
export var KnownIndexingMode;
(function (KnownIndexingMode) {
    /** Consistent */
    KnownIndexingMode["Consistent"] = "consistent";
    /** Lazy */
    KnownIndexingMode["Lazy"] = "lazy";
    /** None */
    KnownIndexingMode["None"] = "none";
})(KnownIndexingMode || (KnownIndexingMode = {}));
/** Known values of {@link DataType} that the service accepts. */
export var KnownDataType;
(function (KnownDataType) {
    /** String */
    KnownDataType["String"] = "String";
    /** Number */
    KnownDataType["Number"] = "Number";
    /** Point */
    KnownDataType["Point"] = "Point";
    /** Polygon */
    KnownDataType["Polygon"] = "Polygon";
    /** LineString */
    KnownDataType["LineString"] = "LineString";
    /** MultiPolygon */
    KnownDataType["MultiPolygon"] = "MultiPolygon";
})(KnownDataType || (KnownDataType = {}));
/** Known values of {@link IndexKind} that the service accepts. */
export var KnownIndexKind;
(function (KnownIndexKind) {
    /** Hash */
    KnownIndexKind["Hash"] = "Hash";
    /** Range */
    KnownIndexKind["Range"] = "Range";
    /** Spatial */
    KnownIndexKind["Spatial"] = "Spatial";
})(KnownIndexKind || (KnownIndexKind = {}));
/** Known values of {@link CompositePathSortOrder} that the service accepts. */
export var KnownCompositePathSortOrder;
(function (KnownCompositePathSortOrder) {
    /** Ascending */
    KnownCompositePathSortOrder["Ascending"] = "ascending";
    /** Descending */
    KnownCompositePathSortOrder["Descending"] = "descending";
})(KnownCompositePathSortOrder || (KnownCompositePathSortOrder = {}));
/** Known values of {@link SpatialType} that the service accepts. */
export var KnownSpatialType;
(function (KnownSpatialType) {
    /** Point */
    KnownSpatialType["Point"] = "Point";
    /** LineString */
    KnownSpatialType["LineString"] = "LineString";
    /** Polygon */
    KnownSpatialType["Polygon"] = "Polygon";
    /** MultiPolygon */
    KnownSpatialType["MultiPolygon"] = "MultiPolygon";
})(KnownSpatialType || (KnownSpatialType = {}));
/** Known values of {@link PartitionKind} that the service accepts. */
export var KnownPartitionKind;
(function (KnownPartitionKind) {
    /** Hash */
    KnownPartitionKind["Hash"] = "Hash";
    /** Range */
    KnownPartitionKind["Range"] = "Range";
    /** MultiHash */
    KnownPartitionKind["MultiHash"] = "MultiHash";
})(KnownPartitionKind || (KnownPartitionKind = {}));
/** Known values of {@link ConflictResolutionMode} that the service accepts. */
export var KnownConflictResolutionMode;
(function (KnownConflictResolutionMode) {
    /** LastWriterWins */
    KnownConflictResolutionMode["LastWriterWins"] = "LastWriterWins";
    /** Custom */
    KnownConflictResolutionMode["Custom"] = "Custom";
})(KnownConflictResolutionMode || (KnownConflictResolutionMode = {}));
/** Known values of {@link TriggerType} that the service accepts. */
export var KnownTriggerType;
(function (KnownTriggerType) {
    /** Pre */
    KnownTriggerType["Pre"] = "Pre";
    /** Post */
    KnownTriggerType["Post"] = "Post";
})(KnownTriggerType || (KnownTriggerType = {}));
/** Known values of {@link TriggerOperation} that the service accepts. */
export var KnownTriggerOperation;
(function (KnownTriggerOperation) {
    /** All */
    KnownTriggerOperation["All"] = "All";
    /** Create */
    KnownTriggerOperation["Create"] = "Create";
    /** Update */
    KnownTriggerOperation["Update"] = "Update";
    /** Delete */
    KnownTriggerOperation["Delete"] = "Delete";
    /** Replace */
    KnownTriggerOperation["Replace"] = "Replace";
})(KnownTriggerOperation || (KnownTriggerOperation = {}));
/** Known values of {@link BackupStorageRedundancy} that the service accepts. */
export var KnownBackupStorageRedundancy;
(function (KnownBackupStorageRedundancy) {
    /** Geo */
    KnownBackupStorageRedundancy["Geo"] = "Geo";
    /** Local */
    KnownBackupStorageRedundancy["Local"] = "Local";
    /** Zone */
    KnownBackupStorageRedundancy["Zone"] = "Zone";
})(KnownBackupStorageRedundancy || (KnownBackupStorageRedundancy = {}));
/** Known values of {@link Status} that the service accepts. */
export var KnownStatus;
(function (KnownStatus) {
    /** Uninitialized */
    KnownStatus["Uninitialized"] = "Uninitialized";
    /** Initializing */
    KnownStatus["Initializing"] = "Initializing";
    /** InternallyReady */
    KnownStatus["InternallyReady"] = "InternallyReady";
    /** Online */
    KnownStatus["Online"] = "Online";
    /** Deleting */
    KnownStatus["Deleting"] = "Deleting";
})(KnownStatus || (KnownStatus = {}));
/** Known values of {@link ManagedCassandraProvisioningState} that the service accepts. */
export var KnownManagedCassandraProvisioningState;
(function (KnownManagedCassandraProvisioningState) {
    /** Creating */
    KnownManagedCassandraProvisioningState["Creating"] = "Creating";
    /** Updating */
    KnownManagedCassandraProvisioningState["Updating"] = "Updating";
    /** Deleting */
    KnownManagedCassandraProvisioningState["Deleting"] = "Deleting";
    /** Succeeded */
    KnownManagedCassandraProvisioningState["Succeeded"] = "Succeeded";
    /** Failed */
    KnownManagedCassandraProvisioningState["Failed"] = "Failed";
    /** Canceled */
    KnownManagedCassandraProvisioningState["Canceled"] = "Canceled";
})(KnownManagedCassandraProvisioningState || (KnownManagedCassandraProvisioningState = {}));
/** Known values of {@link AuthenticationMethod} that the service accepts. */
export var KnownAuthenticationMethod;
(function (KnownAuthenticationMethod) {
    /** None */
    KnownAuthenticationMethod["None"] = "None";
    /** Cassandra */
    KnownAuthenticationMethod["Cassandra"] = "Cassandra";
    /** Ldap */
    KnownAuthenticationMethod["Ldap"] = "Ldap";
})(KnownAuthenticationMethod || (KnownAuthenticationMethod = {}));
/** Known values of {@link ManagedCassandraResourceIdentityType} that the service accepts. */
export var KnownManagedCassandraResourceIdentityType;
(function (KnownManagedCassandraResourceIdentityType) {
    /** SystemAssigned */
    KnownManagedCassandraResourceIdentityType["SystemAssigned"] = "SystemAssigned";
    /** None */
    KnownManagedCassandraResourceIdentityType["None"] = "None";
})(KnownManagedCassandraResourceIdentityType || (KnownManagedCassandraResourceIdentityType = {}));
/** Known values of {@link ConnectionState} that the service accepts. */
export var KnownConnectionState;
(function (KnownConnectionState) {
    /** Unknown */
    KnownConnectionState["Unknown"] = "Unknown";
    /** OK */
    KnownConnectionState["OK"] = "OK";
    /** OperatorToDataCenterNetworkError */
    KnownConnectionState["OperatorToDataCenterNetworkError"] = "OperatorToDataCenterNetworkError";
    /** DatacenterToDatacenterNetworkError */
    KnownConnectionState["DatacenterToDatacenterNetworkError"] = "DatacenterToDatacenterNetworkError";
    /** InternalOperatorToDataCenterCertificateError */
    KnownConnectionState["InternalOperatorToDataCenterCertificateError"] = "InternalOperatorToDataCenterCertificateError";
    /** InternalError */
    KnownConnectionState["InternalError"] = "InternalError";
})(KnownConnectionState || (KnownConnectionState = {}));
/** Known values of {@link NodeState} that the service accepts. */
export var KnownNodeState;
(function (KnownNodeState) {
    /** Normal */
    KnownNodeState["Normal"] = "Normal";
    /** Leaving */
    KnownNodeState["Leaving"] = "Leaving";
    /** Joining */
    KnownNodeState["Joining"] = "Joining";
    /** Moving */
    KnownNodeState["Moving"] = "Moving";
    /** Stopped */
    KnownNodeState["Stopped"] = "Stopped";
})(KnownNodeState || (KnownNodeState = {}));
/** Known values of {@link NotebookWorkspaceName} that the service accepts. */
export var KnownNotebookWorkspaceName;
(function (KnownNotebookWorkspaceName) {
    /** Default */
    KnownNotebookWorkspaceName["Default"] = "default";
})(KnownNotebookWorkspaceName || (KnownNotebookWorkspaceName = {}));
/** Known values of {@link ApiType} that the service accepts. */
export var KnownApiType;
(function (KnownApiType) {
    /** MongoDB */
    KnownApiType["MongoDB"] = "MongoDB";
    /** Gremlin */
    KnownApiType["Gremlin"] = "Gremlin";
    /** Cassandra */
    KnownApiType["Cassandra"] = "Cassandra";
    /** Table */
    KnownApiType["Table"] = "Table";
    /** Sql */
    KnownApiType["Sql"] = "Sql";
    /** GremlinV2 */
    KnownApiType["GremlinV2"] = "GremlinV2";
})(KnownApiType || (KnownApiType = {}));
/** Known values of {@link OperationType} that the service accepts. */
export var KnownOperationType;
(function (KnownOperationType) {
    /** Create */
    KnownOperationType["Create"] = "Create";
    /** Replace */
    KnownOperationType["Replace"] = "Replace";
    /** Delete */
    KnownOperationType["Delete"] = "Delete";
    /** Recreate */
    KnownOperationType["Recreate"] = "Recreate";
    /** SystemOperation */
    KnownOperationType["SystemOperation"] = "SystemOperation";
})(KnownOperationType || (KnownOperationType = {}));
/** Known values of {@link ServiceSize} that the service accepts. */
export var KnownServiceSize;
(function (KnownServiceSize) {
    /** CosmosD4S */
    KnownServiceSize["CosmosD4S"] = "Cosmos.D4s";
    /** CosmosD8S */
    KnownServiceSize["CosmosD8S"] = "Cosmos.D8s";
    /** CosmosD16S */
    KnownServiceSize["CosmosD16S"] = "Cosmos.D16s";
})(KnownServiceSize || (KnownServiceSize = {}));
/** Known values of {@link ServiceType} that the service accepts. */
export var KnownServiceType;
(function (KnownServiceType) {
    /** SqlDedicatedGateway */
    KnownServiceType["SqlDedicatedGateway"] = "SqlDedicatedGateway";
    /** DataTransfer */
    KnownServiceType["DataTransfer"] = "DataTransfer";
    /** GraphAPICompute */
    KnownServiceType["GraphAPICompute"] = "GraphAPICompute";
    /** MaterializedViewsBuilder */
    KnownServiceType["MaterializedViewsBuilder"] = "MaterializedViewsBuilder";
})(KnownServiceType || (KnownServiceType = {}));
/** Known values of {@link ServiceStatus} that the service accepts. */
export var KnownServiceStatus;
(function (KnownServiceStatus) {
    /** Creating */
    KnownServiceStatus["Creating"] = "Creating";
    /** Running */
    KnownServiceStatus["Running"] = "Running";
    /** Updating */
    KnownServiceStatus["Updating"] = "Updating";
    /** Deleting */
    KnownServiceStatus["Deleting"] = "Deleting";
    /** Error */
    KnownServiceStatus["Error"] = "Error";
    /** Stopped */
    KnownServiceStatus["Stopped"] = "Stopped";
})(KnownServiceStatus || (KnownServiceStatus = {}));
/** Known values of {@link ContinuousTier} that the service accepts. */
export var KnownContinuousTier;
(function (KnownContinuousTier) {
    /** Continuous7Days */
    KnownContinuousTier["Continuous7Days"] = "Continuous7Days";
    /** Continuous30Days */
    KnownContinuousTier["Continuous30Days"] = "Continuous30Days";
})(KnownContinuousTier || (KnownContinuousTier = {}));
/** Known values of {@link NodeStatus} that the service accepts. */
export var KnownNodeStatus;
(function (KnownNodeStatus) {
    /** Up */
    KnownNodeStatus["Up"] = "Up";
    /** Down */
    KnownNodeStatus["Down"] = "Down";
})(KnownNodeStatus || (KnownNodeStatus = {}));
//# sourceMappingURL=index.js.map