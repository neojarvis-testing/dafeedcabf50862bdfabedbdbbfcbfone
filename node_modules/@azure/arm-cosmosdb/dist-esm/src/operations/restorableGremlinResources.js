/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing RestorableGremlinResources operations. */
export class RestorableGremlinResourcesImpl {
    /**
     * Initialize a new instance of the class RestorableGremlinResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Return a list of gremlin database and graphs combo that exist on the account at the given timestamp
     * and location. This helps in scenarios to validate what resources exist at given timestamp and
     * location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read'
     * permission.
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location, instanceId, options) {
        const iter = this.listPagingAll(location, instanceId, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(location, instanceId, options, settings);
            }
        };
    }
    listPagingPage(location, instanceId, options, _settings) {
        return __asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            result = yield __await(this._list(location, instanceId, options));
            yield yield __await(result.value || []);
        });
    }
    listPagingAll(location, instanceId, options) {
        return __asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listPagingPage(location, instanceId, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Return a list of gremlin database and graphs combo that exist on the account at the given timestamp
     * and location. This helps in scenarios to validate what resources exist at given timestamp and
     * location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read'
     * permission.
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    _list(location, instanceId, options) {
        return this.client.sendOperationRequest({ location, instanceId, options }, listOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{instanceId}/restorableGremlinResources",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RestorableGremlinResourcesListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.restoreLocation,
        Parameters.restoreTimestampInUtc
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location1,
        Parameters.instanceId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=restorableGremlinResources.js.map