/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Percentile operations. */
export class PercentileImpl {
    /**
     * Initialize a new instance of the class Percentile class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieves the metrics determined by the given filter for the given database account. This url is
     * only for PBS and Replication Latency data
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName, accountName, filter, options) {
        const iter = this.listMetricsPagingAll(resourceGroupName, accountName, filter, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listMetricsPagingPage(resourceGroupName, accountName, filter, options, settings);
            }
        };
    }
    listMetricsPagingPage(resourceGroupName, accountName, filter, options, _settings) {
        return __asyncGenerator(this, arguments, function* listMetricsPagingPage_1() {
            let result;
            result = yield __await(this._listMetrics(resourceGroupName, accountName, filter, options));
            yield yield __await(result.value || []);
        });
    }
    listMetricsPagingAll(resourceGroupName, accountName, filter, options) {
        return __asyncGenerator(this, arguments, function* listMetricsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listMetricsPagingPage(resourceGroupName, accountName, filter, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Retrieves the metrics determined by the given filter for the given database account. This url is
     * only for PBS and Replication Latency data
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    _listMetrics(resourceGroupName, accountName, filter, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, filter, options }, listMetricsOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listMetricsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/percentile/metrics",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PercentileMetricListResult
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=percentile.js.map