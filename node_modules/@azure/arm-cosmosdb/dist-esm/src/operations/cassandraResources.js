/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing CassandraResources operations. */
export class CassandraResourcesImpl {
    /**
     * Initialize a new instance of the class CassandraResources class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listCassandraKeyspaces(resourceGroupName, accountName, options) {
        const iter = this.listCassandraKeyspacesPagingAll(resourceGroupName, accountName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listCassandraKeyspacesPagingPage(resourceGroupName, accountName, options, settings);
            }
        };
    }
    listCassandraKeyspacesPagingPage(resourceGroupName, accountName, options, _settings) {
        return __asyncGenerator(this, arguments, function* listCassandraKeyspacesPagingPage_1() {
            let result;
            result = yield __await(this._listCassandraKeyspaces(resourceGroupName, accountName, options));
            yield yield __await(result.value || []);
        });
    }
    listCassandraKeyspacesPagingAll(resourceGroupName, accountName, options) {
        return __asyncGenerator(this, arguments, function* listCassandraKeyspacesPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listCassandraKeyspacesPagingPage(resourceGroupName, accountName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    listCassandraTables(resourceGroupName, accountName, keyspaceName, options) {
        const iter = this.listCassandraTablesPagingAll(resourceGroupName, accountName, keyspaceName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listCassandraTablesPagingPage(resourceGroupName, accountName, keyspaceName, options, settings);
            }
        };
    }
    listCassandraTablesPagingPage(resourceGroupName, accountName, keyspaceName, options, _settings) {
        return __asyncGenerator(this, arguments, function* listCassandraTablesPagingPage_1() {
            let result;
            result = yield __await(this._listCassandraTables(resourceGroupName, accountName, keyspaceName, options));
            yield yield __await(result.value || []);
        });
    }
    listCassandraTablesPagingAll(resourceGroupName, accountName, keyspaceName, options) {
        return __asyncGenerator(this, arguments, function* listCassandraTablesPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listCassandraTablesPagingPage(resourceGroupName, accountName, keyspaceName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    _listCassandraKeyspaces(resourceGroupName, accountName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, options }, listCassandraKeyspacesOperationSpec);
    }
    /**
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided
     * name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    getCassandraKeyspace(resourceGroupName, accountName, keyspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, keyspaceName, options }, getCassandraKeyspaceOperationSpec);
    }
    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra
     *                                                keyspace.
     * @param options The options parameters.
     */
    beginCreateUpdateCassandraKeyspace(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    createUpdateCassandraKeyspaceParameters,
                    options
                },
                spec: createUpdateCassandraKeyspaceOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra
     *                                                keyspace.
     * @param options The options parameters.
     */
    beginCreateUpdateCassandraKeyspaceAndWait(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateUpdateCassandraKeyspace(resourceGroupName, accountName, keyspaceName, createUpdateCassandraKeyspaceParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginDeleteCassandraKeyspace(resourceGroupName, accountName, keyspaceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, accountName, keyspaceName, options },
                spec: deleteCassandraKeyspaceOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginDeleteCassandraKeyspaceAndWait(resourceGroupName, accountName, keyspaceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteCassandraKeyspace(resourceGroupName, accountName, keyspaceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account
     * with the provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    getCassandraKeyspaceThroughput(resourceGroupName, accountName, keyspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, keyspaceName, options }, getCassandraKeyspaceThroughputOperationSpec);
    }
    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Cassandra Keyspace.
     * @param options The options parameters.
     */
    beginUpdateCassandraKeyspaceThroughput(resourceGroupName, accountName, keyspaceName, updateThroughputParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    updateThroughputParameters,
                    options
                },
                spec: updateCassandraKeyspaceThroughputOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Cassandra Keyspace.
     * @param options The options parameters.
     */
    beginUpdateCassandraKeyspaceThroughputAndWait(resourceGroupName, accountName, keyspaceName, updateThroughputParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateCassandraKeyspaceThroughput(resourceGroupName, accountName, keyspaceName, updateThroughputParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginMigrateCassandraKeyspaceToAutoscale(resourceGroupName, accountName, keyspaceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, accountName, keyspaceName, options },
                spec: migrateCassandraKeyspaceToAutoscaleOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginMigrateCassandraKeyspaceToAutoscaleAndWait(resourceGroupName, accountName, keyspaceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMigrateCassandraKeyspaceToAutoscale(resourceGroupName, accountName, keyspaceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginMigrateCassandraKeyspaceToManualThroughput(resourceGroupName, accountName, keyspaceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, accountName, keyspaceName, options },
                spec: migrateCassandraKeyspaceToManualThroughputOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginMigrateCassandraKeyspaceToManualThroughputAndWait(resourceGroupName, accountName, keyspaceName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMigrateCassandraKeyspaceToManualThroughput(resourceGroupName, accountName, keyspaceName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    _listCassandraTables(resourceGroupName, accountName, keyspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, keyspaceName, options }, listCassandraTablesOperationSpec);
    }
    /**
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    getCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, keyspaceName, tableName, options }, getCassandraTableOperationSpec);
    }
    /**
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra
     *                                             Table.
     * @param options The options parameters.
     */
    beginCreateUpdateCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    tableName,
                    createUpdateCassandraTableParameters,
                    options
                },
                spec: createUpdateCassandraTableOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra
     *                                             Table.
     * @param options The options parameters.
     */
    beginCreateUpdateCassandraTableAndWait(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateUpdateCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, createUpdateCassandraTableParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginDeleteCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    tableName,
                    options
                },
                spec: deleteCassandraTableOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginDeleteCassandraTableAndWait(resourceGroupName, accountName, keyspaceName, tableName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDeleteCassandraTable(resourceGroupName, accountName, keyspaceName, tableName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account
     * with the provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    getCassandraTableThroughput(resourceGroupName, accountName, keyspaceName, tableName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, accountName, keyspaceName, tableName, options }, getCassandraTableThroughputOperationSpec);
    }
    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Cassandra table.
     * @param options The options parameters.
     */
    beginUpdateCassandraTableThroughput(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    tableName,
                    updateThroughputParameters,
                    options
                },
                spec: updateCassandraTableThroughputOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Cassandra table.
     * @param options The options parameters.
     */
    beginUpdateCassandraTableThroughputAndWait(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateCassandraTableThroughput(resourceGroupName, accountName, keyspaceName, tableName, updateThroughputParameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateCassandraTableToAutoscale(resourceGroupName, accountName, keyspaceName, tableName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    tableName,
                    options
                },
                spec: migrateCassandraTableToAutoscaleOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateCassandraTableToAutoscaleAndWait(resourceGroupName, accountName, keyspaceName, tableName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMigrateCassandraTableToAutoscale(resourceGroupName, accountName, keyspaceName, tableName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateCassandraTableToManualThroughput(resourceGroupName, accountName, keyspaceName, tableName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceGroupName,
                    accountName,
                    keyspaceName,
                    tableName,
                    options
                },
                spec: migrateCassandraTableToManualThroughputOperationSpec
            });
            const poller = yield createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateCassandraTableToManualThroughputAndWait(resourceGroupName, accountName, keyspaceName, tableName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMigrateCassandraTableToManualThroughput(resourceGroupName, accountName, keyspaceName, tableName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listCassandraKeyspacesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CassandraKeyspaceListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getCassandraKeyspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CassandraKeyspaceGetResults
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createUpdateCassandraKeyspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.CassandraKeyspaceGetResults
        },
        201: {
            bodyMapper: Mappers.CassandraKeyspaceGetResults
        },
        202: {
            bodyMapper: Mappers.CassandraKeyspaceGetResults
        },
        204: {
            bodyMapper: Mappers.CassandraKeyspaceGetResults
        }
    },
    requestBody: Parameters.createUpdateCassandraKeyspaceParameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteCassandraKeyspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: Mappers.CassandraResourcesDeleteCassandraKeyspaceHeaders
        },
        201: {
            headersMapper: Mappers.CassandraResourcesDeleteCassandraKeyspaceHeaders
        },
        202: {
            headersMapper: Mappers.CassandraResourcesDeleteCassandraKeyspaceHeaders
        },
        204: {
            headersMapper: Mappers.CassandraResourcesDeleteCassandraKeyspaceHeaders
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.keyspaceName
    ],
    serializer
};
const getCassandraKeyspaceThroughputOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateCassandraKeyspaceThroughputOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        201: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        202: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        204: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        }
    },
    requestBody: Parameters.updateThroughputParameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const migrateCassandraKeyspaceToAutoscaleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default/migrateToAutoscale",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        201: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        202: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        204: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const migrateCassandraKeyspaceToManualThroughputOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/throughputSettings/default/migrateToManualThroughput",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        201: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        202: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        204: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listCassandraTablesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CassandraTableListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getCassandraTableOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.CassandraTableGetResults
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.tableName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createUpdateCassandraTableOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.CassandraTableGetResults
        },
        201: {
            bodyMapper: Mappers.CassandraTableGetResults
        },
        202: {
            bodyMapper: Mappers.CassandraTableGetResults
        },
        204: {
            bodyMapper: Mappers.CassandraTableGetResults
        }
    },
    requestBody: Parameters.createUpdateCassandraTableParameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.tableName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteCassandraTableOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            headersMapper: Mappers.CassandraResourcesDeleteCassandraTableHeaders
        },
        201: {
            headersMapper: Mappers.CassandraResourcesDeleteCassandraTableHeaders
        },
        202: {
            headersMapper: Mappers.CassandraResourcesDeleteCassandraTableHeaders
        },
        204: {
            headersMapper: Mappers.CassandraResourcesDeleteCassandraTableHeaders
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.tableName,
        Parameters.keyspaceName
    ],
    serializer
};
const getCassandraTableThroughputOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.tableName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateCassandraTableThroughputOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        201: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        202: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        204: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        }
    },
    requestBody: Parameters.updateThroughputParameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.tableName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const migrateCassandraTableToAutoscaleOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default/migrateToAutoscale",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        201: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        202: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        204: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.tableName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const migrateCassandraTableToManualThroughputOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{accountName}/cassandraKeyspaces/{keyspaceName}/tables/{tableName}/throughputSettings/default/migrateToManualThroughput",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        201: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        202: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        204: {
            bodyMapper: Mappers.ThroughputSettingsGetResults
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.accountName,
        Parameters.tableName,
        Parameters.keyspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=cassandraResources.js.map