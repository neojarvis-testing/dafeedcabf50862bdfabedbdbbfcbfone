import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';

/** The metadata related to an access key for a given database account. */
export declare interface AccountKeyMetadata {
    /**
     * Generation time in UTC of the key in ISO-8601 format. If the value is missing from the object, it means that the last key regeneration was triggered before 2022-06-18.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly generationTime?: Date;
}

/** Analytical storage specific properties. */
export declare interface AnalyticalStorageConfiguration {
    /** Describes the types of schema for analytical storage. */
    schemaType?: AnalyticalStorageSchemaType;
}

/**
 * Defines values for AnalyticalStorageSchemaType. \
 * {@link KnownAnalyticalStorageSchemaType} can be used interchangeably with AnalyticalStorageSchemaType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WellDefined** \
 * **FullFidelity**
 */
export declare type AnalyticalStorageSchemaType = string;

export declare interface ApiProperties {
    /** Describes the ServerVersion of an a MongoDB account. */
    serverVersion?: ServerVersion;
}

/**
 * Defines values for ApiType. \
 * {@link KnownApiType} can be used interchangeably with ApiType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MongoDB** \
 * **Gremlin** \
 * **Cassandra** \
 * **Table** \
 * **Sql** \
 * **GremlinV2**
 */
export declare type ApiType = string;

/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags */
export declare interface ARMProxyResource {
    /**
     * The unique resource identifier of the database account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the database account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** The core properties of ARM resources. */
export declare interface ARMResourceProperties {
    /**
     * The unique resource identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The location of the resource group to which the resource belongs. */
    location?: string;
    /** Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB". */
    tags?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for AuthenticationMethod. \
 * {@link KnownAuthenticationMethod} can be used interchangeably with AuthenticationMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Cassandra** \
 * **Ldap**
 */
export declare type AuthenticationMethod = string;

/** Ldap authentication method properties. This feature is in preview. */
export declare interface AuthenticationMethodLdapProperties {
    /** Hostname of the LDAP server. */
    serverHostname?: string;
    /** Port of the LDAP server. */
    serverPort?: number;
    /** Distinguished name of the look up user account, who can look up user details on authentication. */
    serviceUserDistinguishedName?: string;
    /** Password of the look up user. */
    serviceUserPassword?: string;
    /** Distinguished name of the object to start the recursive search of users from. */
    searchBaseDistinguishedName?: string;
    /** Template to use for searching. Defaults to (cn=%s) where %s will be replaced by the username used to login. */
    searchFilterTemplate?: string;
    serverCertificates?: Certificate[];
    /** Timeout for connecting to the LDAP server in miliseconds. The default is 5000 ms. */
    connectionTimeoutInMs?: number;
}

export declare interface AutoscaleSettings {
    /** Represents maximum throughput, the resource can scale up to. */
    maxThroughput?: number;
}

/** Cosmos DB provisioned throughput settings object */
export declare interface AutoscaleSettingsResource {
    /** Represents maximum throughput container can scale up to. */
    maxThroughput: number;
    /** Cosmos DB resource auto-upgrade policy */
    autoUpgradePolicy?: AutoUpgradePolicyResource;
    /**
     * Represents target maximum throughput container can scale up to once offer is no longer in pending state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly targetMaxThroughput?: number;
}

/** Cosmos DB resource auto-upgrade policy */
export declare interface AutoUpgradePolicyResource {
    /** Represents throughput policy which service must adhere to for auto-upgrade */
    throughputPolicy?: ThroughputPolicyResource;
}

/** Backup information of a resource. */
export declare interface BackupInformation {
    /**
     * Information about the status of continuous backups.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly continuousBackupInformation?: ContinuousBackupInformation;
}

/** The object representing the policy for taking backups on an account. */
export declare interface BackupPolicy {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Periodic" | "Continuous";
    /** The object representing the state of the migration between the backup policies. */
    migrationState?: BackupPolicyMigrationState;
}

/** The object representing the state of the migration between the backup policies. */
export declare interface BackupPolicyMigrationState {
    /** Describes the status of migration between backup policy types. */
    status?: BackupPolicyMigrationStatus;
    /** Describes the target backup policy type of the backup policy migration. */
    targetType?: BackupPolicyType;
    /** Time at which the backup policy migration started (ISO-8601 format). */
    startTime?: Date;
}

/**
 * Defines values for BackupPolicyMigrationStatus. \
 * {@link KnownBackupPolicyMigrationStatus} can be used interchangeably with BackupPolicyMigrationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **InProgress** \
 * **Completed** \
 * **Failed**
 */
export declare type BackupPolicyMigrationStatus = string;

/**
 * Defines values for BackupPolicyType. \
 * {@link KnownBackupPolicyType} can be used interchangeably with BackupPolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Periodic** \
 * **Continuous**
 */
export declare type BackupPolicyType = string;

export declare type BackupPolicyUnion = BackupPolicy | PeriodicModeBackupPolicy | ContinuousModeBackupPolicy;

/**
 * Defines values for BackupStorageRedundancy. \
 * {@link KnownBackupStorageRedundancy} can be used interchangeably with BackupStorageRedundancy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Geo** \
 * **Local** \
 * **Zone**
 */
export declare type BackupStorageRedundancy = string;

/** Cosmos DB capability object */
export declare interface Capability {
    /** Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin". */
    name?: string;
}

/** The object that represents all properties related to capacity enforcement on an account. */
export declare interface Capacity {
    /** The total throughput limit imposed on the account. A totalThroughputLimit of 2000 imposes a strict limit of max throughput that can be provisioned on that account to be 2000. A totalThroughputLimit of -1 indicates no limits on provisioning of throughput. */
    totalThroughputLimit?: number;
}

/** Properties of a managed Cassandra cluster public status. */
export declare interface CassandraClusterPublicStatus {
    eTag?: string;
    reaperStatus?: ManagedCassandraReaperStatus;
    /** List relevant information about any connection errors to the Datacenters. */
    connectionErrors?: ConnectionError[];
    /** List relevant information about any errors about cluster, data center and connection error. */
    errors?: CassandraError[];
    /** List of the status of each datacenter in this cluster. */
    dataCenters?: CassandraClusterPublicStatusDataCentersItem[];
}

export declare interface CassandraClusterPublicStatusDataCentersItem {
    /** The name of this Datacenter. */
    name?: string;
    /** A list of all seed nodes in the cluster, managed and unmanaged. */
    seedNodes?: string[];
    nodes?: ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems[];
}

/** Interface representing a CassandraClusters. */
export declare interface CassandraClusters {
    /**
     * List all managed Cassandra clusters in this subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: CassandraClustersListBySubscriptionOptionalParams): PagedAsyncIterableIterator<ClusterResource>;
    /**
     * List all managed Cassandra clusters in this resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: CassandraClustersListByResourceGroupOptionalParams): PagedAsyncIterableIterator<ClusterResource>;
    /**
     * Get the properties of a managed Cassandra cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, options?: CassandraClustersGetOptionalParams): Promise<CassandraClustersGetResponse>;
    /**
     * Deletes a managed Cassandra cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, options?: CassandraClustersDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a managed Cassandra cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, options?: CassandraClustersDeleteOptionalParams): Promise<void>;
    /**
     * Create or update a managed Cassandra cluster. When updating, you must specify all writable
     * properties. To update only some properties, use PATCH.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param body The properties specifying the desired state of the managed Cassandra cluster.
     * @param options The options parameters.
     */
    beginCreateUpdate(resourceGroupName: string, clusterName: string, body: ClusterResource, options?: CassandraClustersCreateUpdateOptionalParams): Promise<SimplePollerLike<OperationState<CassandraClustersCreateUpdateResponse>, CassandraClustersCreateUpdateResponse>>;
    /**
     * Create or update a managed Cassandra cluster. When updating, you must specify all writable
     * properties. To update only some properties, use PATCH.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param body The properties specifying the desired state of the managed Cassandra cluster.
     * @param options The options parameters.
     */
    beginCreateUpdateAndWait(resourceGroupName: string, clusterName: string, body: ClusterResource, options?: CassandraClustersCreateUpdateOptionalParams): Promise<CassandraClustersCreateUpdateResponse>;
    /**
     * Updates some of the properties of a managed Cassandra cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param body Parameters to provide for specifying the managed Cassandra cluster.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, body: ClusterResource, options?: CassandraClustersUpdateOptionalParams): Promise<SimplePollerLike<OperationState<CassandraClustersUpdateResponse>, CassandraClustersUpdateResponse>>;
    /**
     * Updates some of the properties of a managed Cassandra cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param body Parameters to provide for specifying the managed Cassandra cluster.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterName: string, body: ClusterResource, options?: CassandraClustersUpdateOptionalParams): Promise<CassandraClustersUpdateResponse>;
    /**
     * Invoke a command like nodetool for cassandra maintenance
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param body Specification which command to run where
     * @param options The options parameters.
     */
    beginInvokeCommand(resourceGroupName: string, clusterName: string, body: CommandPostBody, options?: CassandraClustersInvokeCommandOptionalParams): Promise<SimplePollerLike<OperationState<CassandraClustersInvokeCommandResponse>, CassandraClustersInvokeCommandResponse>>;
    /**
     * Invoke a command like nodetool for cassandra maintenance
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param body Specification which command to run where
     * @param options The options parameters.
     */
    beginInvokeCommandAndWait(resourceGroupName: string, clusterName: string, body: CommandPostBody, options?: CassandraClustersInvokeCommandOptionalParams): Promise<CassandraClustersInvokeCommandResponse>;
    /**
     * Deallocate the Managed Cassandra Cluster and Associated Data Centers. Deallocation will deallocate
     * the host virtual machine of this cluster, and reserved the data disk. This won't do anything on an
     * already deallocated cluster. Use Start to restart the cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param options The options parameters.
     */
    beginDeallocate(resourceGroupName: string, clusterName: string, options?: CassandraClustersDeallocateOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deallocate the Managed Cassandra Cluster and Associated Data Centers. Deallocation will deallocate
     * the host virtual machine of this cluster, and reserved the data disk. This won't do anything on an
     * already deallocated cluster. Use Start to restart the cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param options The options parameters.
     */
    beginDeallocateAndWait(resourceGroupName: string, clusterName: string, options?: CassandraClustersDeallocateOptionalParams): Promise<void>;
    /**
     * Start the Managed Cassandra Cluster and Associated Data Centers. Start will start the host virtual
     * machine of this cluster with reserved data disk. This won't do anything on an already running
     * cluster. Use Deallocate to deallocate the cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, clusterName: string, options?: CassandraClustersStartOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Start the Managed Cassandra Cluster and Associated Data Centers. Start will start the host virtual
     * machine of this cluster with reserved data disk. This won't do anything on an already running
     * cluster. Use Deallocate to deallocate the cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, clusterName: string, options?: CassandraClustersStartOptionalParams): Promise<void>;
    /**
     * Gets the CPU, memory, and disk usage statistics for each Cassandra node in a cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param options The options parameters.
     */
    status(resourceGroupName: string, clusterName: string, options?: CassandraClustersStatusOptionalParams): Promise<CassandraClustersStatusResponse>;
}

/** Optional parameters. */
export declare interface CassandraClustersCreateUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdate operation. */
export declare type CassandraClustersCreateUpdateResponse = ClusterResource;

/** Optional parameters. */
export declare interface CassandraClustersDeallocateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CassandraClustersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CassandraClustersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CassandraClustersGetResponse = ClusterResource;

/** Optional parameters. */
export declare interface CassandraClustersInvokeCommandOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the invokeCommand operation. */
export declare type CassandraClustersInvokeCommandResponse = CommandOutput;

/** Optional parameters. */
export declare interface CassandraClustersListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type CassandraClustersListByResourceGroupResponse = ListClusters;

/** Optional parameters. */
export declare interface CassandraClustersListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type CassandraClustersListBySubscriptionResponse = ListClusters;

/** Optional parameters. */
export declare interface CassandraClustersStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CassandraClustersStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the status operation. */
export declare type CassandraClustersStatusResponse = CassandraClusterPublicStatus;

/** Optional parameters. */
export declare interface CassandraClustersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type CassandraClustersUpdateResponse = ClusterResource;

/** Interface representing a CassandraDataCenters. */
export declare interface CassandraDataCenters {
    /**
     * List all data centers in a particular managed Cassandra cluster.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, clusterName: string, options?: CassandraDataCentersListOptionalParams): PagedAsyncIterableIterator<DataCenterResource>;
    /**
     * Get the properties of a managed Cassandra data center.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, clusterName: string, dataCenterName: string, options?: CassandraDataCentersGetOptionalParams): Promise<CassandraDataCentersGetResponse>;
    /**
     * Delete a managed Cassandra data center.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, clusterName: string, dataCenterName: string, options?: CassandraDataCentersDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Delete a managed Cassandra data center.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, clusterName: string, dataCenterName: string, options?: CassandraDataCentersDeleteOptionalParams): Promise<void>;
    /**
     * Create or update a managed Cassandra data center. When updating, overwrite all properties. To update
     * only some properties, use PATCH.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param body Parameters specifying the managed Cassandra data center.
     * @param options The options parameters.
     */
    beginCreateUpdate(resourceGroupName: string, clusterName: string, dataCenterName: string, body: DataCenterResource, options?: CassandraDataCentersCreateUpdateOptionalParams): Promise<SimplePollerLike<OperationState<CassandraDataCentersCreateUpdateResponse>, CassandraDataCentersCreateUpdateResponse>>;
    /**
     * Create or update a managed Cassandra data center. When updating, overwrite all properties. To update
     * only some properties, use PATCH.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param body Parameters specifying the managed Cassandra data center.
     * @param options The options parameters.
     */
    beginCreateUpdateAndWait(resourceGroupName: string, clusterName: string, dataCenterName: string, body: DataCenterResource, options?: CassandraDataCentersCreateUpdateOptionalParams): Promise<CassandraDataCentersCreateUpdateResponse>;
    /**
     * Update some of the properties of a managed Cassandra data center.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param body Parameters to provide for specifying the managed Cassandra data center.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, clusterName: string, dataCenterName: string, body: DataCenterResource, options?: CassandraDataCentersUpdateOptionalParams): Promise<SimplePollerLike<OperationState<CassandraDataCentersUpdateResponse>, CassandraDataCentersUpdateResponse>>;
    /**
     * Update some of the properties of a managed Cassandra data center.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param clusterName Managed Cassandra cluster name.
     * @param dataCenterName Data center name in a managed Cassandra cluster.
     * @param body Parameters to provide for specifying the managed Cassandra data center.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, clusterName: string, dataCenterName: string, body: DataCenterResource, options?: CassandraDataCentersUpdateOptionalParams): Promise<CassandraDataCentersUpdateResponse>;
}

/** Optional parameters. */
export declare interface CassandraDataCentersCreateUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdate operation. */
export declare type CassandraDataCentersCreateUpdateResponse = DataCenterResource;

/** Optional parameters. */
export declare interface CassandraDataCentersDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CassandraDataCentersGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CassandraDataCentersGetResponse = DataCenterResource;

/** Optional parameters. */
export declare interface CassandraDataCentersListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CassandraDataCentersListResponse = ListDataCenters;

/** Optional parameters. */
export declare interface CassandraDataCentersUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type CassandraDataCentersUpdateResponse = DataCenterResource;

export declare interface CassandraError {
    /** The code of error that occurred. */
    code?: string;
    /** The message of the error. */
    message?: string;
    /** The target resource of the error. */
    target?: string;
    /** Additional information about the error. */
    additionalErrorInfo?: string;
}

/** Parameters to create and update Cosmos DB Cassandra keyspace. */
export declare interface CassandraKeyspaceCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a Cassandra keyspace */
    resource: CassandraKeyspaceResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface CassandraKeyspaceGetPropertiesOptions extends OptionsResource {
}

export declare interface CassandraKeyspaceGetPropertiesResource extends CassandraKeyspaceResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB Cassandra keyspace. */
export declare interface CassandraKeyspaceGetResults extends ARMResourceProperties {
    resource?: CassandraKeyspaceGetPropertiesResource;
    options?: CassandraKeyspaceGetPropertiesOptions;
}

/** The List operation response, that contains the Cassandra keyspaces and their properties. */
export declare interface CassandraKeyspaceListResult {
    /**
     * List of Cassandra keyspaces and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: CassandraKeyspaceGetResults[];
}

/** Cosmos DB Cassandra keyspace resource object */
export declare interface CassandraKeyspaceResource {
    /** Name of the Cosmos DB Cassandra keyspace */
    id: string;
}

/** Cosmos DB Cassandra table partition key */
export declare interface CassandraPartitionKey {
    /** Name of the Cosmos DB Cassandra table partition key */
    name?: string;
}

/** Interface representing a CassandraResources. */
export declare interface CassandraResources {
    /**
     * Lists the Cassandra keyspaces under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listCassandraKeyspaces(resourceGroupName: string, accountName: string, options?: CassandraResourcesListCassandraKeyspacesOptionalParams): PagedAsyncIterableIterator<CassandraKeyspaceGetResults>;
    /**
     * Lists the Cassandra table under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    listCassandraTables(resourceGroupName: string, accountName: string, keyspaceName: string, options?: CassandraResourcesListCassandraTablesOptionalParams): PagedAsyncIterableIterator<CassandraTableGetResults>;
    /**
     * Gets the Cassandra keyspaces under an existing Azure Cosmos DB database account with the provided
     * name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    getCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceName: string, options?: CassandraResourcesGetCassandraKeyspaceOptionalParams): Promise<CassandraResourcesGetCassandraKeyspaceResponse>;
    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra
     *                                                keyspace.
     * @param options The options parameters.
     */
    beginCreateUpdateCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceName: string, createUpdateCassandraKeyspaceParameters: CassandraKeyspaceCreateUpdateParameters, options?: CassandraResourcesCreateUpdateCassandraKeyspaceOptionalParams): Promise<SimplePollerLike<OperationState<CassandraResourcesCreateUpdateCassandraKeyspaceResponse>, CassandraResourcesCreateUpdateCassandraKeyspaceResponse>>;
    /**
     * Create or update an Azure Cosmos DB Cassandra keyspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param createUpdateCassandraKeyspaceParameters The parameters to provide for the current Cassandra
     *                                                keyspace.
     * @param options The options parameters.
     */
    beginCreateUpdateCassandraKeyspaceAndWait(resourceGroupName: string, accountName: string, keyspaceName: string, createUpdateCassandraKeyspaceParameters: CassandraKeyspaceCreateUpdateParameters, options?: CassandraResourcesCreateUpdateCassandraKeyspaceOptionalParams): Promise<CassandraResourcesCreateUpdateCassandraKeyspaceResponse>;
    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginDeleteCassandraKeyspace(resourceGroupName: string, accountName: string, keyspaceName: string, options?: CassandraResourcesDeleteCassandraKeyspaceOptionalParams): Promise<SimplePollerLike<OperationState<CassandraResourcesDeleteCassandraKeyspaceResponse>, CassandraResourcesDeleteCassandraKeyspaceResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB Cassandra keyspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginDeleteCassandraKeyspaceAndWait(resourceGroupName: string, accountName: string, keyspaceName: string, options?: CassandraResourcesDeleteCassandraKeyspaceOptionalParams): Promise<CassandraResourcesDeleteCassandraKeyspaceResponse>;
    /**
     * Gets the RUs per second of the Cassandra Keyspace under an existing Azure Cosmos DB database account
     * with the provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    getCassandraKeyspaceThroughput(resourceGroupName: string, accountName: string, keyspaceName: string, options?: CassandraResourcesGetCassandraKeyspaceThroughputOptionalParams): Promise<CassandraResourcesGetCassandraKeyspaceThroughputResponse>;
    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Cassandra Keyspace.
     * @param options The options parameters.
     */
    beginUpdateCassandraKeyspaceThroughput(resourceGroupName: string, accountName: string, keyspaceName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: CassandraResourcesUpdateCassandraKeyspaceThroughputOptionalParams): Promise<SimplePollerLike<OperationState<CassandraResourcesUpdateCassandraKeyspaceThroughputResponse>, CassandraResourcesUpdateCassandraKeyspaceThroughputResponse>>;
    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra Keyspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Cassandra Keyspace.
     * @param options The options parameters.
     */
    beginUpdateCassandraKeyspaceThroughputAndWait(resourceGroupName: string, accountName: string, keyspaceName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: CassandraResourcesUpdateCassandraKeyspaceThroughputOptionalParams): Promise<CassandraResourcesUpdateCassandraKeyspaceThroughputResponse>;
    /**
     * Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginMigrateCassandraKeyspaceToAutoscale(resourceGroupName: string, accountName: string, keyspaceName: string, options?: CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOptionalParams): Promise<SimplePollerLike<OperationState<CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse>, CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse>>;
    /**
     * Migrate an Azure Cosmos DB Cassandra Keyspace from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginMigrateCassandraKeyspaceToAutoscaleAndWait(resourceGroupName: string, accountName: string, keyspaceName: string, options?: CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOptionalParams): Promise<CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse>;
    /**
     * Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginMigrateCassandraKeyspaceToManualThroughput(resourceGroupName: string, accountName: string, keyspaceName: string, options?: CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOptionalParams): Promise<SimplePollerLike<OperationState<CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse>, CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse>>;
    /**
     * Migrate an Azure Cosmos DB Cassandra Keyspace from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param options The options parameters.
     */
    beginMigrateCassandraKeyspaceToManualThroughputAndWait(resourceGroupName: string, accountName: string, keyspaceName: string, options?: CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOptionalParams): Promise<CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse>;
    /**
     * Gets the Cassandra table under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    getCassandraTable(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, options?: CassandraResourcesGetCassandraTableOptionalParams): Promise<CassandraResourcesGetCassandraTableResponse>;
    /**
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra
     *                                             Table.
     * @param options The options parameters.
     */
    beginCreateUpdateCassandraTable(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, createUpdateCassandraTableParameters: CassandraTableCreateUpdateParameters, options?: CassandraResourcesCreateUpdateCassandraTableOptionalParams): Promise<SimplePollerLike<OperationState<CassandraResourcesCreateUpdateCassandraTableResponse>, CassandraResourcesCreateUpdateCassandraTableResponse>>;
    /**
     * Create or update an Azure Cosmos DB Cassandra Table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param createUpdateCassandraTableParameters The parameters to provide for the current Cassandra
     *                                             Table.
     * @param options The options parameters.
     */
    beginCreateUpdateCassandraTableAndWait(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, createUpdateCassandraTableParameters: CassandraTableCreateUpdateParameters, options?: CassandraResourcesCreateUpdateCassandraTableOptionalParams): Promise<CassandraResourcesCreateUpdateCassandraTableResponse>;
    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginDeleteCassandraTable(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, options?: CassandraResourcesDeleteCassandraTableOptionalParams): Promise<SimplePollerLike<OperationState<CassandraResourcesDeleteCassandraTableResponse>, CassandraResourcesDeleteCassandraTableResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB Cassandra table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginDeleteCassandraTableAndWait(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, options?: CassandraResourcesDeleteCassandraTableOptionalParams): Promise<CassandraResourcesDeleteCassandraTableResponse>;
    /**
     * Gets the RUs per second of the Cassandra table under an existing Azure Cosmos DB database account
     * with the provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    getCassandraTableThroughput(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, options?: CassandraResourcesGetCassandraTableThroughputOptionalParams): Promise<CassandraResourcesGetCassandraTableThroughputResponse>;
    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Cassandra table.
     * @param options The options parameters.
     */
    beginUpdateCassandraTableThroughput(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: CassandraResourcesUpdateCassandraTableThroughputOptionalParams): Promise<SimplePollerLike<OperationState<CassandraResourcesUpdateCassandraTableThroughputResponse>, CassandraResourcesUpdateCassandraTableThroughputResponse>>;
    /**
     * Update RUs per second of an Azure Cosmos DB Cassandra table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Cassandra table.
     * @param options The options parameters.
     */
    beginUpdateCassandraTableThroughputAndWait(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: CassandraResourcesUpdateCassandraTableThroughputOptionalParams): Promise<CassandraResourcesUpdateCassandraTableThroughputResponse>;
    /**
     * Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateCassandraTableToAutoscale(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, options?: CassandraResourcesMigrateCassandraTableToAutoscaleOptionalParams): Promise<SimplePollerLike<OperationState<CassandraResourcesMigrateCassandraTableToAutoscaleResponse>, CassandraResourcesMigrateCassandraTableToAutoscaleResponse>>;
    /**
     * Migrate an Azure Cosmos DB Cassandra table from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateCassandraTableToAutoscaleAndWait(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, options?: CassandraResourcesMigrateCassandraTableToAutoscaleOptionalParams): Promise<CassandraResourcesMigrateCassandraTableToAutoscaleResponse>;
    /**
     * Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateCassandraTableToManualThroughput(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, options?: CassandraResourcesMigrateCassandraTableToManualThroughputOptionalParams): Promise<SimplePollerLike<OperationState<CassandraResourcesMigrateCassandraTableToManualThroughputResponse>, CassandraResourcesMigrateCassandraTableToManualThroughputResponse>>;
    /**
     * Migrate an Azure Cosmos DB Cassandra table from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyspaceName Cosmos DB keyspace name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateCassandraTableToManualThroughputAndWait(resourceGroupName: string, accountName: string, keyspaceName: string, tableName: string, options?: CassandraResourcesMigrateCassandraTableToManualThroughputOptionalParams): Promise<CassandraResourcesMigrateCassandraTableToManualThroughputResponse>;
}

/** Defines headers for CassandraResources_createUpdateCassandraKeyspace operation. */
export declare interface CassandraResourcesCreateUpdateCassandraKeyspaceHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface CassandraResourcesCreateUpdateCassandraKeyspaceOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateCassandraKeyspace operation. */
export declare type CassandraResourcesCreateUpdateCassandraKeyspaceResponse = CassandraKeyspaceGetResults;

/** Defines headers for CassandraResources_createUpdateCassandraTable operation. */
export declare interface CassandraResourcesCreateUpdateCassandraTableHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface CassandraResourcesCreateUpdateCassandraTableOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateCassandraTable operation. */
export declare type CassandraResourcesCreateUpdateCassandraTableResponse = CassandraTableGetResults;

/** Defines headers for CassandraResources_deleteCassandraKeyspace operation. */
export declare interface CassandraResourcesDeleteCassandraKeyspaceHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface CassandraResourcesDeleteCassandraKeyspaceOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteCassandraKeyspace operation. */
export declare type CassandraResourcesDeleteCassandraKeyspaceResponse = CassandraResourcesDeleteCassandraKeyspaceHeaders;

/** Defines headers for CassandraResources_deleteCassandraTable operation. */
export declare interface CassandraResourcesDeleteCassandraTableHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface CassandraResourcesDeleteCassandraTableOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteCassandraTable operation. */
export declare type CassandraResourcesDeleteCassandraTableResponse = CassandraResourcesDeleteCassandraTableHeaders;

/** Optional parameters. */
export declare interface CassandraResourcesGetCassandraKeyspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getCassandraKeyspace operation. */
export declare type CassandraResourcesGetCassandraKeyspaceResponse = CassandraKeyspaceGetResults;

/** Optional parameters. */
export declare interface CassandraResourcesGetCassandraKeyspaceThroughputOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getCassandraKeyspaceThroughput operation. */
export declare type CassandraResourcesGetCassandraKeyspaceThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface CassandraResourcesGetCassandraTableOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getCassandraTable operation. */
export declare type CassandraResourcesGetCassandraTableResponse = CassandraTableGetResults;

/** Optional parameters. */
export declare interface CassandraResourcesGetCassandraTableThroughputOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getCassandraTableThroughput operation. */
export declare type CassandraResourcesGetCassandraTableThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface CassandraResourcesListCassandraKeyspacesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listCassandraKeyspaces operation. */
export declare type CassandraResourcesListCassandraKeyspacesResponse = CassandraKeyspaceListResult;

/** Optional parameters. */
export declare interface CassandraResourcesListCassandraTablesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listCassandraTables operation. */
export declare type CassandraResourcesListCassandraTablesResponse = CassandraTableListResult;

/** Defines headers for CassandraResources_migrateCassandraKeyspaceToAutoscale operation. */
export declare interface CassandraResourcesMigrateCassandraKeyspaceToAutoscaleHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface CassandraResourcesMigrateCassandraKeyspaceToAutoscaleOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateCassandraKeyspaceToAutoscale operation. */
export declare type CassandraResourcesMigrateCassandraKeyspaceToAutoscaleResponse = ThroughputSettingsGetResults;

/** Defines headers for CassandraResources_migrateCassandraKeyspaceToManualThroughput operation. */
export declare interface CassandraResourcesMigrateCassandraKeyspaceToManualThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface CassandraResourcesMigrateCassandraKeyspaceToManualThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateCassandraKeyspaceToManualThroughput operation. */
export declare type CassandraResourcesMigrateCassandraKeyspaceToManualThroughputResponse = ThroughputSettingsGetResults;

/** Defines headers for CassandraResources_migrateCassandraTableToAutoscale operation. */
export declare interface CassandraResourcesMigrateCassandraTableToAutoscaleHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface CassandraResourcesMigrateCassandraTableToAutoscaleOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateCassandraTableToAutoscale operation. */
export declare type CassandraResourcesMigrateCassandraTableToAutoscaleResponse = ThroughputSettingsGetResults;

/** Defines headers for CassandraResources_migrateCassandraTableToManualThroughput operation. */
export declare interface CassandraResourcesMigrateCassandraTableToManualThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface CassandraResourcesMigrateCassandraTableToManualThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateCassandraTableToManualThroughput operation. */
export declare type CassandraResourcesMigrateCassandraTableToManualThroughputResponse = ThroughputSettingsGetResults;

/** Defines headers for CassandraResources_updateCassandraKeyspaceThroughput operation. */
export declare interface CassandraResourcesUpdateCassandraKeyspaceThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface CassandraResourcesUpdateCassandraKeyspaceThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateCassandraKeyspaceThroughput operation. */
export declare type CassandraResourcesUpdateCassandraKeyspaceThroughputResponse = ThroughputSettingsGetResults;

/** Defines headers for CassandraResources_updateCassandraTableThroughput operation. */
export declare interface CassandraResourcesUpdateCassandraTableThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface CassandraResourcesUpdateCassandraTableThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateCassandraTableThroughput operation. */
export declare type CassandraResourcesUpdateCassandraTableThroughputResponse = ThroughputSettingsGetResults;

/** Cosmos DB Cassandra table schema */
export declare interface CassandraSchema {
    /** List of Cassandra table columns. */
    columns?: Column[];
    /** List of partition key. */
    partitionKeys?: CassandraPartitionKey[];
    /** List of cluster key. */
    clusterKeys?: ClusterKey[];
}

/** Parameters to create and update Cosmos DB Cassandra table. */
export declare interface CassandraTableCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a Cassandra table */
    resource: CassandraTableResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface CassandraTableGetPropertiesOptions extends OptionsResource {
}

export declare interface CassandraTableGetPropertiesResource extends CassandraTableResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB Cassandra table. */
export declare interface CassandraTableGetResults extends ARMResourceProperties {
    resource?: CassandraTableGetPropertiesResource;
    options?: CassandraTableGetPropertiesOptions;
}

/** The List operation response, that contains the Cassandra tables and their properties. */
export declare interface CassandraTableListResult {
    /**
     * List of Cassandra tables and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: CassandraTableGetResults[];
}

/** Cosmos DB Cassandra table resource object */
export declare interface CassandraTableResource {
    /** Name of the Cosmos DB Cassandra table */
    id: string;
    /** Time to live of the Cosmos DB Cassandra table */
    defaultTtl?: number;
    /** Schema of the Cosmos DB Cassandra table */
    schema?: CassandraSchema;
    /** Analytical TTL. */
    analyticalStorageTtl?: number;
}

export declare interface Certificate {
    /** PEM formatted public key. */
    pem?: string;
}

/** . */
export declare interface ClientEncryptionIncludedPath {
    /** Path that needs to be encrypted. */
    path: string;
    /** The identifier of the Client Encryption Key to be used to encrypt the path. */
    clientEncryptionKeyId: string;
    /** The type of encryption to be performed. Eg - Deterministic, Randomized. */
    encryptionType: string;
    /** The encryption algorithm which will be used. Eg - AEAD_AES_256_CBC_HMAC_SHA256. */
    encryptionAlgorithm: string;
}

/** Parameters to create and update ClientEncryptionKey. */
export declare interface ClientEncryptionKeyCreateUpdateParameters {
    /** The standard JSON format of a ClientEncryptionKey */
    resource: ClientEncryptionKeyResource;
}

export declare interface ClientEncryptionKeyGetPropertiesResource extends ClientEncryptionKeyResource, ExtendedResourceProperties {
}

/** Client Encryption Key. */
export declare interface ClientEncryptionKeyGetResults extends ARMProxyResource {
    resource?: ClientEncryptionKeyGetPropertiesResource;
}

/** Cosmos DB client encryption key resource object. */
export declare interface ClientEncryptionKeyResource {
    /** Name of the ClientEncryptionKey */
    id?: string;
    /** Encryption algorithm that will be used along with this client encryption key to encrypt/decrypt data. */
    encryptionAlgorithm?: string;
    /** Wrapped (encrypted) form of the key represented as a byte array. */
    wrappedDataEncryptionKey?: Uint8Array;
    /** Metadata for the wrapping provider that can be used to unwrap the wrapped client encryption key. */
    keyWrapMetadata?: KeyWrapMetadata;
}

/** The List operation response, that contains the client encryption keys and their properties. */
export declare interface ClientEncryptionKeysListResult {
    /**
     * List of client encryption keys and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ClientEncryptionKeyGetResults[];
}

/** Cosmos DB client encryption policy. */
export declare interface ClientEncryptionPolicy {
    /** Paths of the item that need encryption along with path-specific settings. */
    includedPaths: ClientEncryptionIncludedPath[];
    /** Version of the client encryption policy definition. Supported versions are 1 and 2. Version 2 supports id and partition key path encryption. */
    policyFormatVersion: number;
}

/** An error response from the service. */
export declare interface CloudError {
    /** Error Response. */
    error?: ErrorResponse;
}

/** Cosmos DB Cassandra table cluster key */
export declare interface ClusterKey {
    /** Name of the Cosmos DB Cassandra table cluster key */
    name?: string;
    /** Order of the Cosmos DB Cassandra table cluster key, only support "Asc" and "Desc" */
    orderBy?: string;
}

/** Representation of a managed Cassandra cluster. */
export declare interface ClusterResource extends ManagedCassandraARMResourceProperties {
    /** Properties of a managed Cassandra cluster. */
    properties?: ClusterResourceProperties;
}

/** Properties of a managed Cassandra cluster. */
export declare interface ClusterResourceProperties {
    /** The status of the resource at the time the operation was called. */
    provisioningState?: ManagedCassandraProvisioningState;
    /** To create an empty cluster, omit this field or set it to null. To restore a backup into a new cluster, set this field to the resource id of the backup. */
    restoreFromBackupId?: string;
    /** Resource id of a subnet that this cluster's management service should have its network interface attached to. The subnet must be routable to all subnets that will be delegated to data centers. The resource id must be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>' */
    delegatedManagementSubnetId?: string;
    /** Which version of Cassandra should this cluster converge to running (e.g., 3.11). When updated, the cluster may take some time to migrate to the new version. */
    cassandraVersion?: string;
    /** If you need to set the clusterName property in cassandra.yaml to something besides the resource name of the cluster, set the value to use on this property. */
    clusterNameOverride?: string;
    /** Which authentication method Cassandra should use to authenticate clients. 'None' turns off authentication, so should not be used except in emergencies. 'Cassandra' is the default password based authentication. The default is 'Cassandra'. */
    authenticationMethod?: AuthenticationMethod;
    /** Initial password for clients connecting as admin to the cluster. Should be changed after cluster creation. Returns null on GET. This field only applies when the authenticationMethod field is 'Cassandra'. */
    initialCassandraAdminPassword?: string;
    /** Hostname or IP address where the Prometheus endpoint containing data about the managed Cassandra nodes can be reached. */
    prometheusEndpoint?: SeedNode;
    /** Should automatic repairs run on this cluster? If omitted, this is true, and should stay true unless you are running a hybrid cluster where you are already doing your own repairs. */
    repairEnabled?: boolean;
    /** List of TLS certificates used to authorize clients connecting to the cluster. All connections are TLS encrypted whether clientCertificates is set or not, but if clientCertificates is set, the managed Cassandra cluster will reject all connections not bearing a TLS client certificate that can be validated from one or more of the public certificates in this property. */
    clientCertificates?: Certificate[];
    /** List of TLS certificates used to authorize gossip from unmanaged data centers. The TLS certificates of all nodes in unmanaged data centers must be verifiable using one of the certificates provided in this property. */
    externalGossipCertificates?: Certificate[];
    /**
     * List of TLS certificates that unmanaged nodes must trust for gossip with managed nodes. All managed nodes will present TLS client certificates that are verifiable using one of the certificates provided in this property.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly gossipCertificates?: Certificate[];
    /** List of IP addresses of seed nodes in unmanaged data centers. These will be added to the seed node lists of all managed nodes. */
    externalSeedNodes?: SeedNode[];
    /**
     * List of IP addresses of seed nodes in the managed data centers. These should be added to the seed node lists of all unmanaged nodes.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly seedNodes?: SeedNode[];
    /** (Deprecated) Number of hours to wait between taking a backup of the cluster. */
    hoursBetweenBackups?: number;
    /** Whether the cluster and associated data centers has been deallocated. */
    deallocated?: boolean;
    /** Whether Cassandra audit logging is enabled */
    cassandraAuditLoggingEnabled?: boolean;
    /** Error related to resource provisioning. */
    provisionError?: CassandraError;
}

/** Interface representing a Collection. */
export declare interface Collection {
    /**
     * Retrieves the metrics determined by the given filter for the given database account and collection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseRid Cosmos DB database rid.
     * @param collectionRid Cosmos DB collection rid.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, filter: string, options?: CollectionListMetricsOptionalParams): PagedAsyncIterableIterator<Metric>;
    /**
     * Retrieves the usages (most recent storage data) for the given collection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseRid Cosmos DB database rid.
     * @param collectionRid Cosmos DB collection rid.
     * @param options The options parameters.
     */
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: CollectionListUsagesOptionalParams): PagedAsyncIterableIterator<Usage>;
    /**
     * Retrieves metric definitions for the given collection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseRid Cosmos DB database rid.
     * @param collectionRid Cosmos DB collection rid.
     * @param options The options parameters.
     */
    listMetricDefinitions(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: CollectionListMetricDefinitionsOptionalParams): PagedAsyncIterableIterator<MetricDefinition>;
}

/** Optional parameters. */
export declare interface CollectionListMetricDefinitionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetricDefinitions operation. */
export declare type CollectionListMetricDefinitionsResponse = MetricDefinitionsListResult;

/** Optional parameters. */
export declare interface CollectionListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type CollectionListMetricsResponse = MetricListResult;

/** Optional parameters. */
export declare interface CollectionListUsagesOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). */
    filter?: string;
}

/** Contains response data for the listUsages operation. */
export declare type CollectionListUsagesResponse = UsagesResult;

/** Interface representing a CollectionPartition. */
export declare interface CollectionPartition {
    /**
     * Retrieves the metrics determined by the given filter for the given collection, split by partition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseRid Cosmos DB database rid.
     * @param collectionRid Cosmos DB collection rid.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, filter: string, options?: CollectionPartitionListMetricsOptionalParams): PagedAsyncIterableIterator<PartitionMetric>;
    /**
     * Retrieves the usages (most recent storage data) for the given collection, split by partition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseRid Cosmos DB database rid.
     * @param collectionRid Cosmos DB collection rid.
     * @param options The options parameters.
     */
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, options?: CollectionPartitionListUsagesOptionalParams): PagedAsyncIterableIterator<PartitionUsage>;
}

/** Optional parameters. */
export declare interface CollectionPartitionListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type CollectionPartitionListMetricsResponse = PartitionMetricListResult;

/** Optional parameters. */
export declare interface CollectionPartitionListUsagesOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). */
    filter?: string;
}

/** Contains response data for the listUsages operation. */
export declare type CollectionPartitionListUsagesResponse = PartitionUsagesResult;

/** Interface representing a CollectionPartitionRegion. */
export declare interface CollectionPartitionRegion {
    /**
     * Retrieves the metrics determined by the given filter for the given collection and region, split by
     * partition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param region Cosmos DB region, with spaces between words and each word capitalized.
     * @param databaseRid Cosmos DB database rid.
     * @param collectionRid Cosmos DB collection rid.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, filter: string, options?: CollectionPartitionRegionListMetricsOptionalParams): PagedAsyncIterableIterator<PartitionMetric>;
}

/** Optional parameters. */
export declare interface CollectionPartitionRegionListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type CollectionPartitionRegionListMetricsResponse = PartitionMetricListResult;

/** Interface representing a CollectionRegion. */
export declare interface CollectionRegion {
    /**
     * Retrieves the metrics determined by the given filter for the given database account, collection and
     * region.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param region Cosmos DB region, with spaces between words and each word capitalized.
     * @param databaseRid Cosmos DB database rid.
     * @param collectionRid Cosmos DB collection rid.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, filter: string, options?: CollectionRegionListMetricsOptionalParams): PagedAsyncIterableIterator<Metric>;
}

/** Optional parameters. */
export declare interface CollectionRegionListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type CollectionRegionListMetricsResponse = MetricListResult;

/** Cosmos DB Cassandra table column */
export declare interface Column {
    /** Name of the Cosmos DB Cassandra table column */
    name?: string;
    /** Type of the Cosmos DB Cassandra table column */
    type?: string;
}

/** Response of /command api */
export declare interface CommandOutput {
    /** Output of the command. */
    commandOutput?: string;
}

/** Specification of which command to run where */
export declare interface CommandPostBody {
    /** The command which should be run */
    command: string;
    /** The arguments for the command to be run */
    arguments?: {
        [propertyName: string]: string;
    };
    /** IP address of the cassandra host to run the command on */
    host: string;
    /** If true, stops cassandra before executing the command and then start it again */
    cassandraStopStart?: boolean;
    /** If true, allows the command to *write* to the cassandra directory, otherwise read-only. */
    readwrite?: boolean;
}

export declare interface Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties {
    /**
     * The principal id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The client id of user assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
}

export declare interface ComponentsM9L909SchemasCassandraclusterpublicstatusPropertiesDatacentersItemsPropertiesNodesItems {
    /** The node's IP address. */
    address?: string;
    /** The state of the node in Cassandra ring. */
    state?: NodeState;
    status?: string;
    /** Cassandra service status on this node */
    cassandraProcessStatus?: string;
    /** The amount of file system data in the data directory (e.g., 47.66 kB), excluding all content in the snapshots subdirectories. Because all SSTable data files are included, any data that is not cleaned up (such as TTL-expired cells or tombstones) is counted. */
    load?: string;
    /** List of tokens this node covers. */
    tokens?: string[];
    size?: number;
    /** The network ID of the node. */
    hostID?: string;
    /** The rack this node is part of. */
    rack?: string;
    /** The timestamp when these statistics were captured. */
    timestamp?: string;
    /** The amount of disk used, in kB, of the directory /var/lib/cassandra. */
    diskUsedKB?: number;
    /** The amount of disk free, in kB, of the directory /var/lib/cassandra. */
    diskFreeKB?: number;
    /** Used memory (calculated as total - free - buffers - cache), in kB. */
    memoryUsedKB?: number;
    /** Memory used by kernel buffers (Buffers in /proc/meminfo) and page cache and slabs (Cached and SReclaimable in /proc/meminfo), in kB. */
    memoryBuffersAndCachedKB?: number;
    /** Unused memory (MemFree and SwapFree in /proc/meminfo), in kB. */
    memoryFreeKB?: number;
    /** Total installed memory (MemTotal and SwapTotal in /proc/meminfo), in kB. */
    memoryTotalKB?: number;
    /** A float representing the current system-wide CPU utilization as a percentage. */
    cpuUsage?: number;
}

export declare interface CompositePath {
    /** The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*) */
    path?: string;
    /** Sort order for composite paths. */
    order?: CompositePathSortOrder;
}

/**
 * Defines values for CompositePathSortOrder. \
 * {@link KnownCompositePathSortOrder} can be used interchangeably with CompositePathSortOrder,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ascending** \
 * **descending**
 */
export declare type CompositePathSortOrder = string;

/** The definition of a computed property */
export declare interface ComputedProperty {
    /** The name of a computed property, for example - "cp_lowerName" */
    name?: string;
    /** The query that evaluates the value for computed property, for example - "SELECT VALUE LOWER(c.name) FROM c" */
    query?: string;
}

/**
 * Defines values for ConflictResolutionMode. \
 * {@link KnownConflictResolutionMode} can be used interchangeably with ConflictResolutionMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LastWriterWins** \
 * **Custom**
 */
export declare type ConflictResolutionMode = string;

/** The conflict resolution policy for the container. */
export declare interface ConflictResolutionPolicy {
    /** Indicates the conflict resolution mode. */
    mode?: ConflictResolutionMode;
    /** The conflict resolution path in the case of LastWriterWins mode. */
    conflictResolutionPath?: string;
    /** The procedure to resolve conflicts in the case of custom mode. */
    conflictResolutionProcedure?: string;
}

export declare interface ConnectionError {
    /** The kind of connection error that occurred. */
    connectionState?: ConnectionState;
    /** The IP of host that originated the failed connection. */
    iPFrom?: string;
    /** The IP that the connection attempted to reach. */
    iPTo?: string;
    /** The TCP port the connection was attempted on. */
    port?: number;
    /** Detailed error message about the failed connection. */
    exception?: string;
}

/**
 * Defines values for ConnectionState. \
 * {@link KnownConnectionState} can be used interchangeably with ConnectionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **OK** \
 * **OperatorToDataCenterNetworkError** \
 * **DatacenterToDatacenterNetworkError** \
 * **InternalOperatorToDataCenterCertificateError** \
 * **InternalError**
 */
export declare type ConnectionState = string;

/**
 * Defines values for ConnectorOffer. \
 * {@link KnownConnectorOffer} can be used interchangeably with ConnectorOffer,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Small**
 */
export declare type ConnectorOffer = string;

/** The consistency policy for the Cosmos DB database account. */
export declare interface ConsistencyPolicy {
    /** The default consistency level and configuration settings of the Cosmos DB account. */
    defaultConsistencyLevel: DefaultConsistencyLevel;
    /** When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated. Accepted range for this value is 1 – 2,147,483,647. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'. */
    maxStalenessPrefix?: number;
    /** When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated. Accepted range for this value is 5 - 86400. Required when defaultConsistencyPolicy is set to 'BoundedStaleness'. */
    maxIntervalInSeconds?: number;
}

/** The configuration of the partition key to be used for partitioning data into multiple partitions */
export declare interface ContainerPartitionKey {
    /** List of paths using which data within the container can be partitioned */
    paths?: string[];
    /** Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create */
    kind?: PartitionKind;
    /** Indicates the version of the partition key definition */
    version?: number;
    /**
     * Indicates if the container is using a system generated partition key
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemKey?: boolean;
}

/** Information about the status of continuous backups. */
export declare interface ContinuousBackupInformation {
    /** The latest restorable timestamp for a resource. */
    latestRestorableTimestamp?: string;
}

/** Properties of the regional restorable account. */
export declare interface ContinuousBackupRestoreLocation {
    /** The name of the continuous backup restore location. */
    location?: string;
}

/** The object representing continuous mode backup policy. */
export declare interface ContinuousModeBackupPolicy extends BackupPolicy {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Continuous";
    /** Configuration values for continuous mode backup */
    continuousModeProperties?: ContinuousModeProperties;
}

/** Configuration values for periodic mode backup */
export declare interface ContinuousModeProperties {
    /** Enum to indicate type of Continuous backup mode */
    tier?: ContinuousTier;
}

/**
 * Defines values for ContinuousTier. \
 * {@link KnownContinuousTier} can be used interchangeably with ContinuousTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Continuous7Days** \
 * **Continuous30Days**
 */
export declare type ContinuousTier = string;

/** The CORS policy for the Cosmos DB database account. */
export declare interface CorsPolicy {
    /** The origin domains that are permitted to make a request against the service via CORS. */
    allowedOrigins: string;
    /** The methods (HTTP request verbs) that the origin domain may use for a CORS request. */
    allowedMethods?: string;
    /** The request headers that the origin domain may specify on the CORS request. */
    allowedHeaders?: string;
    /** The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer. */
    exposedHeaders?: string;
    /** The maximum amount time that a browser should cache the preflight OPTIONS request. */
    maxAgeInSeconds?: number;
}

export declare class CosmosDBManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the CosmosDBManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: CosmosDBManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    databaseAccounts: DatabaseAccounts;
    operations: Operations;
    database: Database;
    collection: Collection;
    collectionRegion: CollectionRegion;
    databaseAccountRegion: DatabaseAccountRegion;
    percentileSourceTarget: PercentileSourceTarget;
    percentileTarget: PercentileTarget;
    percentile: Percentile;
    collectionPartitionRegion: CollectionPartitionRegion;
    collectionPartition: CollectionPartition;
    partitionKeyRangeId: PartitionKeyRangeId;
    partitionKeyRangeIdRegion: PartitionKeyRangeIdRegion;
    sqlResources: SqlResources;
    mongoDBResources: MongoDBResources;
    tableResources: TableResources;
    cassandraResources: CassandraResources;
    gremlinResources: GremlinResources;
    locations: Locations;
    cassandraClusters: CassandraClusters;
    cassandraDataCenters: CassandraDataCenters;
    notebookWorkspaces: NotebookWorkspaces;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    restorableDatabaseAccounts: RestorableDatabaseAccounts;
    restorableSqlDatabases: RestorableSqlDatabases;
    restorableSqlContainers: RestorableSqlContainers;
    restorableSqlResources: RestorableSqlResources;
    restorableMongodbDatabases: RestorableMongodbDatabases;
    restorableMongodbCollections: RestorableMongodbCollections;
    restorableMongodbResources: RestorableMongodbResources;
    restorableGremlinDatabases: RestorableGremlinDatabases;
    restorableGremlinGraphs: RestorableGremlinGraphs;
    restorableGremlinResources: RestorableGremlinResources;
    restorableTables: RestorableTables;
    restorableTableResources: RestorableTableResources;
    service: Service;
}

/** Optional parameters. */
export declare interface CosmosDBManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for CreateMode. \
 * {@link KnownCreateMode} can be used interchangeably with CreateMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Restore**
 */
export declare type CreateMode = string;

/** CreateUpdateOptions are a list of key-value pairs that describe the resource. Supported keys are "If-Match", "If-None-Match", "Session-Token" and "Throughput" */
export declare interface CreateUpdateOptions {
    /** Request Units per second. For example, "throughput": 10000. */
    throughput?: number;
    /** Specifies the Autoscale settings. Note: Either throughput or autoscaleSettings is required, but not both. */
    autoscaleSettings?: AutoscaleSettings;
}

/** Interface representing a Database. */
export declare interface Database {
    /**
     * Retrieves the metrics determined by the given filter for the given database account and database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseRid Cosmos DB database rid.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, filter: string, options?: DatabaseListMetricsOptionalParams): PagedAsyncIterableIterator<Metric>;
    /**
     * Retrieves the usages (most recent data) for the given database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseRid Cosmos DB database rid.
     * @param options The options parameters.
     */
    listUsages(resourceGroupName: string, accountName: string, databaseRid: string, options?: DatabaseListUsagesOptionalParams): PagedAsyncIterableIterator<Usage>;
    /**
     * Retrieves metric definitions for the given database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseRid Cosmos DB database rid.
     * @param options The options parameters.
     */
    listMetricDefinitions(resourceGroupName: string, accountName: string, databaseRid: string, options?: DatabaseListMetricDefinitionsOptionalParams): PagedAsyncIterableIterator<MetricDefinition>;
}

/** Connection string for the Cosmos DB account */
export declare interface DatabaseAccountConnectionString {
    /**
     * Value of the connection string
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly connectionString?: string;
    /**
     * Description of the connection string
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Kind of the connection string key
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keyKind?: Kind;
    /**
     * Type of the connection string
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: Type;
}

/** Parameters to create and update Cosmos DB database accounts. */
export declare interface DatabaseAccountCreateUpdateParameters extends ARMResourceProperties {
    /** Indicates the type of database account. This can only be set at database account creation. */
    kind?: DatabaseAccountKind;
    /** Identity for the resource. */
    identity?: ManagedServiceIdentity;
    /** The consistency policy for the Cosmos DB account. */
    consistencyPolicy?: ConsistencyPolicy;
    /** An array that contains the georeplication locations enabled for the Cosmos DB account. */
    locations: Location_2[];
    /** The offer type for the database */
    databaseAccountOfferType: "Standard";
    /** List of IpRules. */
    ipRules?: IpAddressOrRange[];
    /** Flag to indicate whether to enable/disable Virtual Network ACL rules. */
    isVirtualNetworkFilterEnabled?: boolean;
    /** Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account. */
    enableAutomaticFailover?: boolean;
    /** List of Cosmos DB capabilities for the account */
    capabilities?: Capability[];
    /** List of Virtual Network ACL rules configured for the Cosmos DB account. */
    virtualNetworkRules?: VirtualNetworkRule[];
    /** Enables the account to write in multiple locations */
    enableMultipleWriteLocations?: boolean;
    /** Enables the cassandra connector on the Cosmos DB C* account */
    enableCassandraConnector?: boolean;
    /** The cassandra connector offer type for the Cosmos DB database C* account. */
    connectorOffer?: ConnectorOffer;
    /** Disable write operations on metadata resources (databases, containers, throughput) via account keys */
    disableKeyBasedMetadataWriteAccess?: boolean;
    /** The URI of the key vault */
    keyVaultKeyUri?: string;
    /** The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be "FirstPartyIdentity", "SystemAssignedIdentity" and more. */
    defaultIdentity?: string;
    /** Whether requests from Public Network are allowed */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Flag to indicate whether Free Tier is enabled. */
    enableFreeTier?: boolean;
    /** API specific properties. Currently, supported only for MongoDB API. */
    apiProperties?: ApiProperties;
    /** Flag to indicate whether to enable storage analytics. */
    enableAnalyticalStorage?: boolean;
    /** Analytical storage specific properties. */
    analyticalStorageConfiguration?: AnalyticalStorageConfiguration;
    /** Enum to indicate the mode of account creation. */
    createMode?: CreateMode;
    /** The object representing the policy for taking backups on an account. */
    backupPolicy?: BackupPolicyUnion;
    /** The CORS policy for the Cosmos DB database account. */
    cors?: CorsPolicy[];
    /** Indicates what services are allowed to bypass firewall checks. */
    networkAclBypass?: NetworkAclBypass;
    /** An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account. */
    networkAclBypassResourceIds?: string[];
    /** Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. */
    disableLocalAuth?: boolean;
    /** Parameters to indicate the information about the restore. */
    restoreParameters?: RestoreParameters;
    /** The object that represents all properties related to capacity enforcement on an account. */
    capacity?: Capacity;
    /**
     * This property is ignored during the update/create operation, as the metadata is read-only. The object represents the metadata for the Account Keys of the Cosmos DB account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keysMetadata?: DatabaseAccountKeysMetadata;
    /** Flag to indicate enabling/disabling of Partition Merge feature on the account */
    enablePartitionMerge?: boolean;
    /** Indicates the minimum allowed Tls version. The default value is Tls 1.2. Cassandra and Mongo APIs only work with Tls 1.2. */
    minimalTlsVersion?: MinimalTlsVersion;
    /** Flag to indicate enabling/disabling of Burst Capacity Preview feature on the account */
    enableBurstCapacity?: boolean;
    /** Indicates the status of the Customer Managed Key feature on the account. In case there are errors, the property provides troubleshooting guidance. */
    customerManagedKeyStatus?: string;
}

/** An Azure Cosmos DB database account. */
export declare interface DatabaseAccountGetResults extends ARMResourceProperties {
    /** Indicates the type of database account. This can only be set at database account creation. */
    kind?: DatabaseAccountKind;
    /** Identity for the resource. */
    identity?: ManagedServiceIdentity;
    /**
     * The system meta data relating to this resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'DeletionFailed' – the Cosmos DB account deletion failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /**
     * The connection endpoint for the Cosmos DB database account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly documentEndpoint?: string;
    /**
     * The offer type for the Cosmos DB database account. Default value: Standard.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly databaseAccountOfferType?: "Standard";
    /** List of IpRules. */
    ipRules?: IpAddressOrRange[];
    /** Flag to indicate whether to enable/disable Virtual Network ACL rules. */
    isVirtualNetworkFilterEnabled?: boolean;
    /** Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account. */
    enableAutomaticFailover?: boolean;
    /** The consistency policy for the Cosmos DB database account. */
    consistencyPolicy?: ConsistencyPolicy;
    /** List of Cosmos DB capabilities for the account */
    capabilities?: Capability[];
    /**
     * An array that contains the write location for the Cosmos DB account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly writeLocations?: Location_2[];
    /**
     * An array that contains of the read locations enabled for the Cosmos DB account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly readLocations?: Location_2[];
    /**
     * An array that contains all of the locations enabled for the Cosmos DB account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: Location_2[];
    /**
     * An array that contains the regions ordered by their failover priorities.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly failoverPolicies?: FailoverPolicy[];
    /** List of Virtual Network ACL rules configured for the Cosmos DB account. */
    virtualNetworkRules?: VirtualNetworkRule[];
    /**
     * List of Private Endpoint Connections configured for the Cosmos DB account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /** Enables the account to write in multiple locations */
    enableMultipleWriteLocations?: boolean;
    /** Enables the cassandra connector on the Cosmos DB C* account */
    enableCassandraConnector?: boolean;
    /** The cassandra connector offer type for the Cosmos DB database C* account. */
    connectorOffer?: ConnectorOffer;
    /** Disable write operations on metadata resources (databases, containers, throughput) via account keys */
    disableKeyBasedMetadataWriteAccess?: boolean;
    /** The URI of the key vault */
    keyVaultKeyUri?: string;
    /** The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be "FirstPartyIdentity", "SystemAssignedIdentity" and more. */
    defaultIdentity?: string;
    /** Whether requests from Public Network are allowed */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Flag to indicate whether Free Tier is enabled. */
    enableFreeTier?: boolean;
    /** API specific properties. */
    apiProperties?: ApiProperties;
    /** Flag to indicate whether to enable storage analytics. */
    enableAnalyticalStorage?: boolean;
    /** Analytical storage specific properties. */
    analyticalStorageConfiguration?: AnalyticalStorageConfiguration;
    /**
     * A unique identifier assigned to the database account
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instanceId?: string;
    /** Enum to indicate the mode of account creation. */
    createMode?: CreateMode;
    /** Parameters to indicate the information about the restore. */
    restoreParameters?: RestoreParameters;
    /** The object representing the policy for taking backups on an account. */
    backupPolicy?: BackupPolicyUnion;
    /** The CORS policy for the Cosmos DB database account. */
    cors?: CorsPolicy[];
    /** Indicates what services are allowed to bypass firewall checks. */
    networkAclBypass?: NetworkAclBypass;
    /** An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account. */
    networkAclBypassResourceIds?: string[];
    /** Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. */
    disableLocalAuth?: boolean;
    /** The object that represents all properties related to capacity enforcement on an account. */
    capacity?: Capacity;
    /**
     * The object that represents the metadata for the Account Keys of the Cosmos DB account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keysMetadata?: DatabaseAccountKeysMetadata;
    /** Flag to indicate enabling/disabling of Partition Merge feature on the account */
    enablePartitionMerge?: boolean;
    /** Indicates the minimum allowed Tls version. The default value is Tls 1.2. Cassandra and Mongo APIs only work with Tls 1.2. */
    minimalTlsVersion?: MinimalTlsVersion;
    /** Flag to indicate enabling/disabling of Burst Capacity Preview feature on the account */
    enableBurstCapacity?: boolean;
    /** Indicates the status of the Customer Managed Key feature on the account. In case there are errors, the property provides troubleshooting guidance. */
    customerManagedKeyStatus?: string;
}

/** The metadata related to each access key for the given Cosmos DB database account. */
export declare interface DatabaseAccountKeysMetadata {
    /**
     * The metadata related to the Primary Read-Write Key for the given Cosmos DB database account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryMasterKey?: AccountKeyMetadata;
    /**
     * The metadata related to the Secondary Read-Write Key for the given Cosmos DB database account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryMasterKey?: AccountKeyMetadata;
    /**
     * The metadata related to the Primary Read-Only Key for the given Cosmos DB database account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryReadonlyMasterKey?: AccountKeyMetadata;
    /**
     * The metadata related to the Secondary Read-Only Key for the given Cosmos DB database account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryReadonlyMasterKey?: AccountKeyMetadata;
}

/**
 * Defines values for DatabaseAccountKind. \
 * {@link KnownDatabaseAccountKind} can be used interchangeably with DatabaseAccountKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GlobalDocumentDB** \
 * **MongoDB** \
 * **Parse**
 */
export declare type DatabaseAccountKind = string;

/** The connection strings for the given database account. */
export declare interface DatabaseAccountListConnectionStringsResult {
    /** An array that contains the connection strings for the Cosmos DB account. */
    connectionStrings?: DatabaseAccountConnectionString[];
}

/** The access keys for the given database account. */
export declare interface DatabaseAccountListKeysResult extends DatabaseAccountListReadOnlyKeysResult {
    /**
     * Base 64 encoded value of the primary read-write key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryMasterKey?: string;
    /**
     * Base 64 encoded value of the secondary read-write key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryMasterKey?: string;
}

/** The read-only access keys for the given database account. */
export declare interface DatabaseAccountListReadOnlyKeysResult {
    /**
     * Base 64 encoded value of the primary read-only key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryReadonlyMasterKey?: string;
    /**
     * Base 64 encoded value of the secondary read-only key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly secondaryReadonlyMasterKey?: string;
}

/** Parameters to regenerate the keys within the database account. */
export declare interface DatabaseAccountRegenerateKeyParameters {
    /** The access key to regenerate. */
    keyKind: KeyKind;
}

/** Interface representing a DatabaseAccountRegion. */
export declare interface DatabaseAccountRegion {
    /**
     * Retrieves the metrics determined by the given filter for the given database account and region.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param region Cosmos DB region, with spaces between words and each word capitalized.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, region: string, filter: string, options?: DatabaseAccountRegionListMetricsOptionalParams): PagedAsyncIterableIterator<Metric>;
}

/** Optional parameters. */
export declare interface DatabaseAccountRegionListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type DatabaseAccountRegionListMetricsResponse = MetricListResult;

/** Interface representing a DatabaseAccounts. */
export declare interface DatabaseAccounts {
    /**
     * Lists all the Azure Cosmos DB database accounts available under the subscription.
     * @param options The options parameters.
     */
    list(options?: DatabaseAccountsListOptionalParams): PagedAsyncIterableIterator<DatabaseAccountGetResults>;
    /**
     * Lists all the Azure Cosmos DB database accounts available under the given resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: DatabaseAccountsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<DatabaseAccountGetResults>;
    /**
     * Retrieves the metrics determined by the given filter for the given database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, filter: string, options?: DatabaseAccountsListMetricsOptionalParams): PagedAsyncIterableIterator<Metric>;
    /**
     * Retrieves the usages (most recent data) for the given database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listUsages(resourceGroupName: string, accountName: string, options?: DatabaseAccountsListUsagesOptionalParams): PagedAsyncIterableIterator<Usage>;
    /**
     * Retrieves metric definitions for the given database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listMetricDefinitions(resourceGroupName: string, accountName: string, options?: DatabaseAccountsListMetricDefinitionsOptionalParams): PagedAsyncIterableIterator<MetricDefinition>;
    /**
     * Retrieves the properties of an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, options?: DatabaseAccountsGetOptionalParams): Promise<DatabaseAccountsGetResponse>;
    /**
     * Updates the properties of an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param updateParameters The parameters to provide for the current database account.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, accountName: string, updateParameters: DatabaseAccountUpdateParameters, options?: DatabaseAccountsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DatabaseAccountsUpdateResponse>, DatabaseAccountsUpdateResponse>>;
    /**
     * Updates the properties of an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param updateParameters The parameters to provide for the current database account.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, accountName: string, updateParameters: DatabaseAccountUpdateParameters, options?: DatabaseAccountsUpdateOptionalParams): Promise<DatabaseAccountsUpdateResponse>;
    /**
     * Creates or updates an Azure Cosmos DB database account. The "Update" method is preferred when
     * performing updates on an account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param createUpdateParameters The parameters to provide for the current database account.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, createUpdateParameters: DatabaseAccountCreateUpdateParameters, options?: DatabaseAccountsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<DatabaseAccountsCreateOrUpdateResponse>, DatabaseAccountsCreateOrUpdateResponse>>;
    /**
     * Creates or updates an Azure Cosmos DB database account. The "Update" method is preferred when
     * performing updates on an account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param createUpdateParameters The parameters to provide for the current database account.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, accountName: string, createUpdateParameters: DatabaseAccountCreateUpdateParameters, options?: DatabaseAccountsCreateOrUpdateOptionalParams): Promise<DatabaseAccountsCreateOrUpdateResponse>;
    /**
     * Deletes an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, options?: DatabaseAccountsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<DatabaseAccountsDeleteResponse>, DatabaseAccountsDeleteResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, options?: DatabaseAccountsDeleteOptionalParams): Promise<DatabaseAccountsDeleteResponse>;
    /**
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0
     * indicates a write region. The maximum value for a failover priority = (total number of regions - 1).
     * Failover priority values must be unique for each of the regions in which the database account
     * exists.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param failoverParameters The new failover policies for the database account.
     * @param options The options parameters.
     */
    beginFailoverPriorityChange(resourceGroupName: string, accountName: string, failoverParameters: FailoverPolicies, options?: DatabaseAccountsFailoverPriorityChangeOptionalParams): Promise<SimplePollerLike<OperationState<DatabaseAccountsFailoverPriorityChangeResponse>, DatabaseAccountsFailoverPriorityChangeResponse>>;
    /**
     * Changes the failover priority for the Azure Cosmos DB database account. A failover priority of 0
     * indicates a write region. The maximum value for a failover priority = (total number of regions - 1).
     * Failover priority values must be unique for each of the regions in which the database account
     * exists.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param failoverParameters The new failover policies for the database account.
     * @param options The options parameters.
     */
    beginFailoverPriorityChangeAndWait(resourceGroupName: string, accountName: string, failoverParameters: FailoverPolicies, options?: DatabaseAccountsFailoverPriorityChangeOptionalParams): Promise<DatabaseAccountsFailoverPriorityChangeResponse>;
    /**
     * Lists the access keys for the specified Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listKeys(resourceGroupName: string, accountName: string, options?: DatabaseAccountsListKeysOptionalParams): Promise<DatabaseAccountsListKeysResponse>;
    /**
     * Lists the connection strings for the specified Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listConnectionStrings(resourceGroupName: string, accountName: string, options?: DatabaseAccountsListConnectionStringsOptionalParams): Promise<DatabaseAccountsListConnectionStringsResponse>;
    /**
     * Offline the specified region for the specified Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param regionParameterForOffline Cosmos DB region to offline for the database account.
     * @param options The options parameters.
     */
    beginOfflineRegion(resourceGroupName: string, accountName: string, regionParameterForOffline: RegionForOnlineOffline, options?: DatabaseAccountsOfflineRegionOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Offline the specified region for the specified Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param regionParameterForOffline Cosmos DB region to offline for the database account.
     * @param options The options parameters.
     */
    beginOfflineRegionAndWait(resourceGroupName: string, accountName: string, regionParameterForOffline: RegionForOnlineOffline, options?: DatabaseAccountsOfflineRegionOptionalParams): Promise<void>;
    /**
     * Online the specified region for the specified Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param regionParameterForOnline Cosmos DB region to online for the database account.
     * @param options The options parameters.
     */
    beginOnlineRegion(resourceGroupName: string, accountName: string, regionParameterForOnline: RegionForOnlineOffline, options?: DatabaseAccountsOnlineRegionOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Online the specified region for the specified Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param regionParameterForOnline Cosmos DB region to online for the database account.
     * @param options The options parameters.
     */
    beginOnlineRegionAndWait(resourceGroupName: string, accountName: string, regionParameterForOnline: RegionForOnlineOffline, options?: DatabaseAccountsOnlineRegionOptionalParams): Promise<void>;
    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    getReadOnlyKeys(resourceGroupName: string, accountName: string, options?: DatabaseAccountsGetReadOnlyKeysOptionalParams): Promise<DatabaseAccountsGetReadOnlyKeysResponse>;
    /**
     * Lists the read-only access keys for the specified Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listReadOnlyKeys(resourceGroupName: string, accountName: string, options?: DatabaseAccountsListReadOnlyKeysOptionalParams): Promise<DatabaseAccountsListReadOnlyKeysResponse>;
    /**
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyToRegenerate The name of the key to regenerate.
     * @param options The options parameters.
     */
    beginRegenerateKey(resourceGroupName: string, accountName: string, keyToRegenerate: DatabaseAccountRegenerateKeyParameters, options?: DatabaseAccountsRegenerateKeyOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Regenerates an access key for the specified Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param keyToRegenerate The name of the key to regenerate.
     * @param options The options parameters.
     */
    beginRegenerateKeyAndWait(resourceGroupName: string, accountName: string, keyToRegenerate: DatabaseAccountRegenerateKeyParameters, options?: DatabaseAccountsRegenerateKeyOptionalParams): Promise<void>;
    /**
     * Checks that the Azure Cosmos DB account name already exists. A valid account name may contain only
     * lowercase letters, numbers, and the '-' character, and must be between 3 and 50 characters.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    checkNameExists(accountName: string, options?: DatabaseAccountsCheckNameExistsOptionalParams): Promise<DatabaseAccountsCheckNameExistsResponse>;
}

/** Optional parameters. */
export declare interface DatabaseAccountsCheckNameExistsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameExists operation. */
export declare type DatabaseAccountsCheckNameExistsResponse = {
    body: boolean;
};

/** Optional parameters. */
export declare interface DatabaseAccountsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type DatabaseAccountsCreateOrUpdateResponse = DatabaseAccountGetResults;

/** Defines headers for DatabaseAccounts_delete operation. */
export declare interface DatabaseAccountsDeleteHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface DatabaseAccountsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type DatabaseAccountsDeleteResponse = DatabaseAccountsDeleteHeaders;

/** Defines headers for DatabaseAccounts_failoverPriorityChange operation. */
export declare interface DatabaseAccountsFailoverPriorityChangeHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface DatabaseAccountsFailoverPriorityChangeOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the failoverPriorityChange operation. */
export declare type DatabaseAccountsFailoverPriorityChangeResponse = DatabaseAccountsFailoverPriorityChangeHeaders;

/** Optional parameters. */
export declare interface DatabaseAccountsGetOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DatabaseAccountsGetReadOnlyKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getReadOnlyKeys operation. */
export declare type DatabaseAccountsGetReadOnlyKeysResponse = DatabaseAccountListReadOnlyKeysResult;

/** Contains response data for the get operation. */
export declare type DatabaseAccountsGetResponse = DatabaseAccountGetResults;

/** Optional parameters. */
export declare interface DatabaseAccountsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type DatabaseAccountsListByResourceGroupResponse = DatabaseAccountsListResult;

/** Optional parameters. */
export declare interface DatabaseAccountsListConnectionStringsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listConnectionStrings operation. */
export declare type DatabaseAccountsListConnectionStringsResponse = DatabaseAccountListConnectionStringsResult;

/** Optional parameters. */
export declare interface DatabaseAccountsListKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listKeys operation. */
export declare type DatabaseAccountsListKeysResponse = DatabaseAccountListKeysResult;

/** Optional parameters. */
export declare interface DatabaseAccountsListMetricDefinitionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetricDefinitions operation. */
export declare type DatabaseAccountsListMetricDefinitionsResponse = MetricDefinitionsListResult;

/** Optional parameters. */
export declare interface DatabaseAccountsListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type DatabaseAccountsListMetricsResponse = MetricListResult;

/** Optional parameters. */
export declare interface DatabaseAccountsListOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface DatabaseAccountsListReadOnlyKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listReadOnlyKeys operation. */
export declare type DatabaseAccountsListReadOnlyKeysResponse = DatabaseAccountListReadOnlyKeysResult;

/** Contains response data for the list operation. */
export declare type DatabaseAccountsListResponse = DatabaseAccountsListResult;

/** The List operation response, that contains the database accounts and their properties. */
export declare interface DatabaseAccountsListResult {
    /**
     * List of database account and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: DatabaseAccountGetResults[];
}

/** Optional parameters. */
export declare interface DatabaseAccountsListUsagesOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). */
    filter?: string;
}

/** Contains response data for the listUsages operation. */
export declare type DatabaseAccountsListUsagesResponse = UsagesResult;

/** Defines headers for DatabaseAccounts_offlineRegion operation. */
export declare interface DatabaseAccountsOfflineRegionHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface DatabaseAccountsOfflineRegionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for DatabaseAccounts_onlineRegion operation. */
export declare interface DatabaseAccountsOnlineRegionHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface DatabaseAccountsOnlineRegionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for DatabaseAccounts_regenerateKey operation. */
export declare interface DatabaseAccountsRegenerateKeyHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface DatabaseAccountsRegenerateKeyOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface DatabaseAccountsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type DatabaseAccountsUpdateResponse = DatabaseAccountGetResults;

/** Parameters for patching Azure Cosmos DB database account properties. */
export declare interface DatabaseAccountUpdateParameters {
    /** Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB". */
    tags?: {
        [propertyName: string]: string;
    };
    /** The location of the resource group to which the resource belongs. */
    location?: string;
    /** Identity for the resource. */
    identity?: ManagedServiceIdentity;
    /** The consistency policy for the Cosmos DB account. */
    consistencyPolicy?: ConsistencyPolicy;
    /** An array that contains the georeplication locations enabled for the Cosmos DB account. */
    locations?: Location_2[];
    /** List of IpRules. */
    ipRules?: IpAddressOrRange[];
    /** Flag to indicate whether to enable/disable Virtual Network ACL rules. */
    isVirtualNetworkFilterEnabled?: boolean;
    /** Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account. */
    enableAutomaticFailover?: boolean;
    /** List of Cosmos DB capabilities for the account */
    capabilities?: Capability[];
    /** List of Virtual Network ACL rules configured for the Cosmos DB account. */
    virtualNetworkRules?: VirtualNetworkRule[];
    /** Enables the account to write in multiple locations */
    enableMultipleWriteLocations?: boolean;
    /** Enables the cassandra connector on the Cosmos DB C* account */
    enableCassandraConnector?: boolean;
    /** The cassandra connector offer type for the Cosmos DB database C* account. */
    connectorOffer?: ConnectorOffer;
    /** Disable write operations on metadata resources (databases, containers, throughput) via account keys */
    disableKeyBasedMetadataWriteAccess?: boolean;
    /** The URI of the key vault */
    keyVaultKeyUri?: string;
    /** The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be "FirstPartyIdentity", "SystemAssignedIdentity" and more. */
    defaultIdentity?: string;
    /** Whether requests from Public Network are allowed */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Flag to indicate whether Free Tier is enabled. */
    enableFreeTier?: boolean;
    /** API specific properties. Currently, supported only for MongoDB API. */
    apiProperties?: ApiProperties;
    /** Flag to indicate whether to enable storage analytics. */
    enableAnalyticalStorage?: boolean;
    /** Analytical storage specific properties. */
    analyticalStorageConfiguration?: AnalyticalStorageConfiguration;
    /** The object representing the policy for taking backups on an account. */
    backupPolicy?: BackupPolicyUnion;
    /** The CORS policy for the Cosmos DB database account. */
    cors?: CorsPolicy[];
    /** Indicates what services are allowed to bypass firewall checks. */
    networkAclBypass?: NetworkAclBypass;
    /** An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account. */
    networkAclBypassResourceIds?: string[];
    /** Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. */
    disableLocalAuth?: boolean;
    /** The object that represents all properties related to capacity enforcement on an account. */
    capacity?: Capacity;
    /**
     * This property is ignored during the update operation, as the metadata is read-only. The object represents the metadata for the Account Keys of the Cosmos DB account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keysMetadata?: DatabaseAccountKeysMetadata;
    /** Flag to indicate enabling/disabling of Partition Merge feature on the account */
    enablePartitionMerge?: boolean;
    /** Indicates the minimum allowed Tls version. The default value is Tls 1.2. Cassandra and Mongo APIs only work with Tls 1.2. */
    minimalTlsVersion?: MinimalTlsVersion;
    /** Flag to indicate enabling/disabling of Burst Capacity Preview feature on the account */
    enableBurstCapacity?: boolean;
    /** Indicates the status of the Customer Managed Key feature on the account. In case there are errors, the property provides troubleshooting guidance. */
    customerManagedKeyStatus?: string;
}

/** Optional parameters. */
export declare interface DatabaseListMetricDefinitionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetricDefinitions operation. */
export declare type DatabaseListMetricDefinitionsResponse = MetricDefinitionsListResult;

/** Optional parameters. */
export declare interface DatabaseListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type DatabaseListMetricsResponse = MetricListResult;

/** Optional parameters. */
export declare interface DatabaseListUsagesOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that describes a subset of usages to return. The supported parameter is name.value (name of the metric, can have an or of multiple names). */
    filter?: string;
}

/** Contains response data for the listUsages operation. */
export declare type DatabaseListUsagesResponse = UsagesResult;

/** Specific Databases to restore. */
export declare interface DatabaseRestoreResource {
    /** The name of the database available for restore. */
    databaseName?: string;
    /** The names of the collections available for restore. */
    collectionNames?: string[];
}

/** A managed Cassandra data center. */
export declare interface DataCenterResource extends ARMProxyResource {
    /** Properties of a managed Cassandra data center. */
    properties?: DataCenterResourceProperties;
}

/** Properties of a managed Cassandra data center. */
export declare interface DataCenterResourceProperties {
    /** The status of the resource at the time the operation was called. */
    provisioningState?: ManagedCassandraProvisioningState;
    /** The region this data center should be created in. */
    dataCenterLocation?: string;
    /** Resource id of a subnet the nodes in this data center should have their network interfaces connected to. The subnet must be in the same region specified in 'dataCenterLocation' and must be able to route to the subnet specified in the cluster's 'delegatedManagementSubnetId' property. This resource id will be of the form '/subscriptions/<subscription id>/resourceGroups/<resource group>/providers/Microsoft.Network/virtualNetworks/<virtual network>/subnets/<subnet>'. */
    delegatedSubnetId?: string;
    /** The number of nodes the data center should have. This is the desired number. After it is set, it may take some time for the data center to be scaled to match. To monitor the number of nodes and their status, use the fetchNodeStatus method on the cluster. */
    nodeCount?: number;
    /**
     * IP addresses for seed nodes in this data center. This is for reference. Generally you will want to use the seedNodes property on the cluster, which aggregates the seed nodes from all data centers in the cluster.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly seedNodes?: SeedNode[];
    /** A fragment of a cassandra.yaml configuration file to be included in the cassandra.yaml for all nodes in this data center. The fragment should be Base64 encoded, and only a subset of keys are allowed. */
    base64EncodedCassandraYamlFragment?: string;
    /** Key uri to use for encryption of managed disks. Ensure the system assigned identity of the cluster has been assigned appropriate permissions(key get/wrap/unwrap permissions) on the key. */
    managedDiskCustomerKeyUri?: string;
    /** Indicates the Key Uri of the customer key to use for encryption of the backup storage account. */
    backupStorageCustomerKeyUri?: string;
    /** Virtual Machine SKU used for data centers. Default value is Standard_DS14_v2 */
    sku?: string;
    /** Disk SKU used for data centers. Default value is P30. */
    diskSku?: string;
    /** Number of disks attached to each node. Default is 4. */
    diskCapacity?: number;
    /** If the data center has Availability Zone support, apply it to the Virtual Machine ScaleSet that host the cassandra data center virtual machines. */
    availabilityZone?: boolean;
    /** Ldap authentication method properties. This feature is in preview. */
    authenticationMethodLdapProperties?: AuthenticationMethodLdapProperties;
    /** Whether the data center has been deallocated. */
    deallocated?: boolean;
    /** Error related to resource provisioning. */
    provisionError?: CassandraError;
}

/** Resource for a regional service location. */
export declare interface DataTransferRegionalServiceResource extends RegionalServiceResource {
}

/** Describes the service response property. */
export declare interface DataTransferServiceResource {
    /** Properties for DataTransferServiceResource. */
    properties?: DataTransferServiceResourceProperties;
}

/** Properties for DataTransferServiceResource. */
export declare interface DataTransferServiceResourceProperties extends ServiceResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    serviceType: "DataTransfer";
    /**
     * An array that contains all of the locations for the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: DataTransferRegionalServiceResource[];
}

/**
 * Defines values for DataType. \
 * {@link KnownDataType} can be used interchangeably with DataType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **String** \
 * **Number** \
 * **Point** \
 * **Polygon** \
 * **LineString** \
 * **MultiPolygon**
 */
export declare type DataType = string;

/** Defines values for DefaultConsistencyLevel. */
export declare type DefaultConsistencyLevel = "Eventual" | "Session" | "BoundedStaleness" | "Strong" | "ConsistentPrefix";

/** Error Response. */
export declare interface ErrorResponse {
    /** Error code. */
    code?: string;
    /** Error message indicating why the operation failed. */
    message?: string;
}

export declare interface ExcludedPath {
    /** The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*) */
    path?: string;
}

/** The system generated resource properties associated with SQL databases, SQL containers, Gremlin databases and Gremlin graphs. */
export declare interface ExtendedResourceProperties {
    /**
     * A system generated property. A unique identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rid?: string;
    /**
     * A system generated property that denotes the last updated timestamp of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ts?: number;
    /**
     * A system generated property representing the resource etag required for optimistic concurrency control.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
}

/** The list of new failover policies for the failover priority change. */
export declare interface FailoverPolicies {
    /** List of failover policies. */
    failoverPolicies: FailoverPolicy[];
}

/** The failover policy for a given region of a database account. */
export declare interface FailoverPolicy {
    /**
     * The unique identifier of the region in which the database account replicates to. Example: &lt;accountName&gt;-&lt;locationName&gt;.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /** The name of the region in which the database account exists. */
    locationName?: string;
    /** The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. */
    failoverPriority?: number;
}

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Resource for a regional service location. */
export declare interface GraphAPIComputeRegionalServiceResource extends RegionalServiceResource {
    /**
     * The regional endpoint for GraphAPICompute.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly graphApiComputeEndpoint?: string;
}

/** Describes the service response property for GraphAPICompute. */
export declare interface GraphAPIComputeServiceResource {
    /** Properties for GraphAPIComputeServiceResource. */
    properties?: GraphAPIComputeServiceResourceProperties;
}

/** Properties for GraphAPIComputeServiceResource. */
export declare interface GraphAPIComputeServiceResourceProperties extends ServiceResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    serviceType: "GraphAPICompute";
    /** GraphAPICompute endpoint for the service. */
    graphApiComputeEndpoint?: string;
    /**
     * An array that contains all of the locations for the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: GraphAPIComputeRegionalServiceResource[];
}

/** Parameters to create and update Cosmos DB Gremlin database. */
export declare interface GremlinDatabaseCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a Gremlin database */
    resource: GremlinDatabaseResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface GremlinDatabaseGetPropertiesOptions extends OptionsResource {
}

export declare interface GremlinDatabaseGetPropertiesResource extends GremlinDatabaseResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB Gremlin database. */
export declare interface GremlinDatabaseGetResults extends ARMResourceProperties {
    resource?: GremlinDatabaseGetPropertiesResource;
    options?: GremlinDatabaseGetPropertiesOptions;
}

/** The List operation response, that contains the Gremlin databases and their properties. */
export declare interface GremlinDatabaseListResult {
    /**
     * List of Gremlin databases and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: GremlinDatabaseGetResults[];
}

/** Cosmos DB Gremlin database resource object */
export declare interface GremlinDatabaseResource {
    /** Name of the Cosmos DB Gremlin database */
    id: string;
    /** Parameters to indicate the information about the restore */
    restoreParameters?: ResourceRestoreParameters;
    /** Enum to indicate the mode of resource creation. */
    createMode?: CreateMode;
}

/** Specific Gremlin Databases to restore. */
export declare interface GremlinDatabaseRestoreResource {
    /** The name of the gremlin database available for restore. */
    databaseName?: string;
    /** The names of the graphs available for restore. */
    graphNames?: string[];
}

/** Parameters to create and update Cosmos DB Gremlin graph. */
export declare interface GremlinGraphCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a Gremlin graph */
    resource: GremlinGraphResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface GremlinGraphGetPropertiesOptions extends OptionsResource {
}

export declare interface GremlinGraphGetPropertiesResource extends GremlinGraphResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB Gremlin graph. */
export declare interface GremlinGraphGetResults extends ARMResourceProperties {
    resource?: GremlinGraphGetPropertiesResource;
    options?: GremlinGraphGetPropertiesOptions;
}

/** The List operation response, that contains the graphs and their properties. */
export declare interface GremlinGraphListResult {
    /**
     * List of graphs and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: GremlinGraphGetResults[];
}

/** Cosmos DB Gremlin graph resource object */
export declare interface GremlinGraphResource {
    /** Name of the Cosmos DB Gremlin graph */
    id: string;
    /** The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph */
    indexingPolicy?: IndexingPolicy;
    /** The configuration of the partition key to be used for partitioning data into multiple partitions */
    partitionKey?: ContainerPartitionKey;
    /** Default time to live */
    defaultTtl?: number;
    /** The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. */
    uniqueKeyPolicy?: UniqueKeyPolicy;
    /** The conflict resolution policy for the graph. */
    conflictResolutionPolicy?: ConflictResolutionPolicy;
    /** Analytical TTL. */
    analyticalStorageTtl?: number;
    /** Parameters to indicate the information about the restore */
    restoreParameters?: ResourceRestoreParameters;
    /** Enum to indicate the mode of resource creation. */
    createMode?: CreateMode;
}

/** Interface representing a GremlinResources. */
export declare interface GremlinResources {
    /**
     * Lists the Gremlin databases under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listGremlinDatabases(resourceGroupName: string, accountName: string, options?: GremlinResourcesListGremlinDatabasesOptionalParams): PagedAsyncIterableIterator<GremlinDatabaseGetResults>;
    /**
     * Lists the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    listGremlinGraphs(resourceGroupName: string, accountName: string, databaseName: string, options?: GremlinResourcesListGremlinGraphsOptionalParams): PagedAsyncIterableIterator<GremlinGraphGetResults>;
    /**
     * Gets the Gremlin databases under an existing Azure Cosmos DB database account with the provided
     * name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    getGremlinDatabase(resourceGroupName: string, accountName: string, databaseName: string, options?: GremlinResourcesGetGremlinDatabaseOptionalParams): Promise<GremlinResourcesGetGremlinDatabaseResponse>;
    /**
     * Create or update an Azure Cosmos DB Gremlin database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin
     *                                              database.
     * @param options The options parameters.
     */
    beginCreateUpdateGremlinDatabase(resourceGroupName: string, accountName: string, databaseName: string, createUpdateGremlinDatabaseParameters: GremlinDatabaseCreateUpdateParameters, options?: GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesCreateUpdateGremlinDatabaseResponse>, GremlinResourcesCreateUpdateGremlinDatabaseResponse>>;
    /**
     * Create or update an Azure Cosmos DB Gremlin database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param createUpdateGremlinDatabaseParameters The parameters to provide for the current Gremlin
     *                                              database.
     * @param options The options parameters.
     */
    beginCreateUpdateGremlinDatabaseAndWait(resourceGroupName: string, accountName: string, databaseName: string, createUpdateGremlinDatabaseParameters: GremlinDatabaseCreateUpdateParameters, options?: GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams): Promise<GremlinResourcesCreateUpdateGremlinDatabaseResponse>;
    /**
     * Deletes an existing Azure Cosmos DB Gremlin database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginDeleteGremlinDatabase(resourceGroupName: string, accountName: string, databaseName: string, options?: GremlinResourcesDeleteGremlinDatabaseOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesDeleteGremlinDatabaseResponse>, GremlinResourcesDeleteGremlinDatabaseResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB Gremlin database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginDeleteGremlinDatabaseAndWait(resourceGroupName: string, accountName: string, databaseName: string, options?: GremlinResourcesDeleteGremlinDatabaseOptionalParams): Promise<GremlinResourcesDeleteGremlinDatabaseResponse>;
    /**
     * Gets the RUs per second of the Gremlin database under an existing Azure Cosmos DB database account
     * with the provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    getGremlinDatabaseThroughput(resourceGroupName: string, accountName: string, databaseName: string, options?: GremlinResourcesGetGremlinDatabaseThroughputOptionalParams): Promise<GremlinResourcesGetGremlinDatabaseThroughputResponse>;
    /**
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Gremlin database.
     * @param options The options parameters.
     */
    beginUpdateGremlinDatabaseThroughput(resourceGroupName: string, accountName: string, databaseName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesUpdateGremlinDatabaseThroughputResponse>, GremlinResourcesUpdateGremlinDatabaseThroughputResponse>>;
    /**
     * Update RUs per second of an Azure Cosmos DB Gremlin database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Gremlin database.
     * @param options The options parameters.
     */
    beginUpdateGremlinDatabaseThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams): Promise<GremlinResourcesUpdateGremlinDatabaseThroughputResponse>;
    /**
     * Migrate an Azure Cosmos DB Gremlin database from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateGremlinDatabaseToAutoscale(resourceGroupName: string, accountName: string, databaseName: string, options?: GremlinResourcesMigrateGremlinDatabaseToAutoscaleOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse>, GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse>>;
    /**
     * Migrate an Azure Cosmos DB Gremlin database from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateGremlinDatabaseToAutoscaleAndWait(resourceGroupName: string, accountName: string, databaseName: string, options?: GremlinResourcesMigrateGremlinDatabaseToAutoscaleOptionalParams): Promise<GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse>;
    /**
     * Migrate an Azure Cosmos DB Gremlin database from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateGremlinDatabaseToManualThroughput(resourceGroupName: string, accountName: string, databaseName: string, options?: GremlinResourcesMigrateGremlinDatabaseToManualThroughputOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse>, GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse>>;
    /**
     * Migrate an Azure Cosmos DB Gremlin database from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateGremlinDatabaseToManualThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, options?: GremlinResourcesMigrateGremlinDatabaseToManualThroughputOptionalParams): Promise<GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse>;
    /**
     * Gets the Gremlin graph under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param options The options parameters.
     */
    getGremlinGraph(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, options?: GremlinResourcesGetGremlinGraphOptionalParams): Promise<GremlinResourcesGetGremlinGraphResponse>;
    /**
     * Create or update an Azure Cosmos DB Gremlin graph
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph.
     * @param options The options parameters.
     */
    beginCreateUpdateGremlinGraph(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, createUpdateGremlinGraphParameters: GremlinGraphCreateUpdateParameters, options?: GremlinResourcesCreateUpdateGremlinGraphOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesCreateUpdateGremlinGraphResponse>, GremlinResourcesCreateUpdateGremlinGraphResponse>>;
    /**
     * Create or update an Azure Cosmos DB Gremlin graph
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param createUpdateGremlinGraphParameters The parameters to provide for the current Gremlin graph.
     * @param options The options parameters.
     */
    beginCreateUpdateGremlinGraphAndWait(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, createUpdateGremlinGraphParameters: GremlinGraphCreateUpdateParameters, options?: GremlinResourcesCreateUpdateGremlinGraphOptionalParams): Promise<GremlinResourcesCreateUpdateGremlinGraphResponse>;
    /**
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param options The options parameters.
     */
    beginDeleteGremlinGraph(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, options?: GremlinResourcesDeleteGremlinGraphOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesDeleteGremlinGraphResponse>, GremlinResourcesDeleteGremlinGraphResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB Gremlin graph.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param options The options parameters.
     */
    beginDeleteGremlinGraphAndWait(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, options?: GremlinResourcesDeleteGremlinGraphOptionalParams): Promise<GremlinResourcesDeleteGremlinGraphResponse>;
    /**
     * Gets the Gremlin graph throughput under an existing Azure Cosmos DB database account with the
     * provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param options The options parameters.
     */
    getGremlinGraphThroughput(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, options?: GremlinResourcesGetGremlinGraphThroughputOptionalParams): Promise<GremlinResourcesGetGremlinGraphThroughputResponse>;
    /**
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Gremlin graph.
     * @param options The options parameters.
     */
    beginUpdateGremlinGraphThroughput(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: GremlinResourcesUpdateGremlinGraphThroughputOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesUpdateGremlinGraphThroughputResponse>, GremlinResourcesUpdateGremlinGraphThroughputResponse>>;
    /**
     * Update RUs per second of an Azure Cosmos DB Gremlin graph
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   Gremlin graph.
     * @param options The options parameters.
     */
    beginUpdateGremlinGraphThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: GremlinResourcesUpdateGremlinGraphThroughputOptionalParams): Promise<GremlinResourcesUpdateGremlinGraphThroughputResponse>;
    /**
     * Migrate an Azure Cosmos DB Gremlin graph from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param options The options parameters.
     */
    beginMigrateGremlinGraphToAutoscale(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, options?: GremlinResourcesMigrateGremlinGraphToAutoscaleOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesMigrateGremlinGraphToAutoscaleResponse>, GremlinResourcesMigrateGremlinGraphToAutoscaleResponse>>;
    /**
     * Migrate an Azure Cosmos DB Gremlin graph from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param options The options parameters.
     */
    beginMigrateGremlinGraphToAutoscaleAndWait(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, options?: GremlinResourcesMigrateGremlinGraphToAutoscaleOptionalParams): Promise<GremlinResourcesMigrateGremlinGraphToAutoscaleResponse>;
    /**
     * Migrate an Azure Cosmos DB Gremlin graph from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param options The options parameters.
     */
    beginMigrateGremlinGraphToManualThroughput(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, options?: GremlinResourcesMigrateGremlinGraphToManualThroughputOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesMigrateGremlinGraphToManualThroughputResponse>, GremlinResourcesMigrateGremlinGraphToManualThroughputResponse>>;
    /**
     * Migrate an Azure Cosmos DB Gremlin graph from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param options The options parameters.
     */
    beginMigrateGremlinGraphToManualThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, options?: GremlinResourcesMigrateGremlinGraphToManualThroughputOptionalParams): Promise<GremlinResourcesMigrateGremlinGraphToManualThroughputResponse>;
    /**
     * Retrieves continuous backup information for a gremlin graph.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param location The name of the continuous backup restore location.
     * @param options The options parameters.
     */
    beginRetrieveContinuousBackupInformation(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, location: ContinuousBackupRestoreLocation, options?: GremlinResourcesRetrieveContinuousBackupInformationOptionalParams): Promise<SimplePollerLike<OperationState<GremlinResourcesRetrieveContinuousBackupInformationResponse>, GremlinResourcesRetrieveContinuousBackupInformationResponse>>;
    /**
     * Retrieves continuous backup information for a gremlin graph.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param graphName Cosmos DB graph name.
     * @param location The name of the continuous backup restore location.
     * @param options The options parameters.
     */
    beginRetrieveContinuousBackupInformationAndWait(resourceGroupName: string, accountName: string, databaseName: string, graphName: string, location: ContinuousBackupRestoreLocation, options?: GremlinResourcesRetrieveContinuousBackupInformationOptionalParams): Promise<GremlinResourcesRetrieveContinuousBackupInformationResponse>;
}

/** Defines headers for GremlinResources_createUpdateGremlinDatabase operation. */
export declare interface GremlinResourcesCreateUpdateGremlinDatabaseHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface GremlinResourcesCreateUpdateGremlinDatabaseOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateGremlinDatabase operation. */
export declare type GremlinResourcesCreateUpdateGremlinDatabaseResponse = GremlinDatabaseGetResults;

/** Defines headers for GremlinResources_createUpdateGremlinGraph operation. */
export declare interface GremlinResourcesCreateUpdateGremlinGraphHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface GremlinResourcesCreateUpdateGremlinGraphOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateGremlinGraph operation. */
export declare type GremlinResourcesCreateUpdateGremlinGraphResponse = GremlinGraphGetResults;

/** Defines headers for GremlinResources_deleteGremlinDatabase operation. */
export declare interface GremlinResourcesDeleteGremlinDatabaseHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface GremlinResourcesDeleteGremlinDatabaseOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteGremlinDatabase operation. */
export declare type GremlinResourcesDeleteGremlinDatabaseResponse = GremlinResourcesDeleteGremlinDatabaseHeaders;

/** Defines headers for GremlinResources_deleteGremlinGraph operation. */
export declare interface GremlinResourcesDeleteGremlinGraphHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface GremlinResourcesDeleteGremlinGraphOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteGremlinGraph operation. */
export declare type GremlinResourcesDeleteGremlinGraphResponse = GremlinResourcesDeleteGremlinGraphHeaders;

/** Optional parameters. */
export declare interface GremlinResourcesGetGremlinDatabaseOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getGremlinDatabase operation. */
export declare type GremlinResourcesGetGremlinDatabaseResponse = GremlinDatabaseGetResults;

/** Optional parameters. */
export declare interface GremlinResourcesGetGremlinDatabaseThroughputOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getGremlinDatabaseThroughput operation. */
export declare type GremlinResourcesGetGremlinDatabaseThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface GremlinResourcesGetGremlinGraphOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getGremlinGraph operation. */
export declare type GremlinResourcesGetGremlinGraphResponse = GremlinGraphGetResults;

/** Optional parameters. */
export declare interface GremlinResourcesGetGremlinGraphThroughputOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getGremlinGraphThroughput operation. */
export declare type GremlinResourcesGetGremlinGraphThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface GremlinResourcesListGremlinDatabasesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listGremlinDatabases operation. */
export declare type GremlinResourcesListGremlinDatabasesResponse = GremlinDatabaseListResult;

/** Optional parameters. */
export declare interface GremlinResourcesListGremlinGraphsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listGremlinGraphs operation. */
export declare type GremlinResourcesListGremlinGraphsResponse = GremlinGraphListResult;

/** Defines headers for GremlinResources_migrateGremlinDatabaseToAutoscale operation. */
export declare interface GremlinResourcesMigrateGremlinDatabaseToAutoscaleHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface GremlinResourcesMigrateGremlinDatabaseToAutoscaleOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateGremlinDatabaseToAutoscale operation. */
export declare type GremlinResourcesMigrateGremlinDatabaseToAutoscaleResponse = ThroughputSettingsGetResults;

/** Defines headers for GremlinResources_migrateGremlinDatabaseToManualThroughput operation. */
export declare interface GremlinResourcesMigrateGremlinDatabaseToManualThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface GremlinResourcesMigrateGremlinDatabaseToManualThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateGremlinDatabaseToManualThroughput operation. */
export declare type GremlinResourcesMigrateGremlinDatabaseToManualThroughputResponse = ThroughputSettingsGetResults;

/** Defines headers for GremlinResources_migrateGremlinGraphToAutoscale operation. */
export declare interface GremlinResourcesMigrateGremlinGraphToAutoscaleHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface GremlinResourcesMigrateGremlinGraphToAutoscaleOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateGremlinGraphToAutoscale operation. */
export declare type GremlinResourcesMigrateGremlinGraphToAutoscaleResponse = ThroughputSettingsGetResults;

/** Defines headers for GremlinResources_migrateGremlinGraphToManualThroughput operation. */
export declare interface GremlinResourcesMigrateGremlinGraphToManualThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface GremlinResourcesMigrateGremlinGraphToManualThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateGremlinGraphToManualThroughput operation. */
export declare type GremlinResourcesMigrateGremlinGraphToManualThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface GremlinResourcesRetrieveContinuousBackupInformationOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the retrieveContinuousBackupInformation operation. */
export declare type GremlinResourcesRetrieveContinuousBackupInformationResponse = BackupInformation;

/** Defines headers for GremlinResources_updateGremlinDatabaseThroughput operation. */
export declare interface GremlinResourcesUpdateGremlinDatabaseThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface GremlinResourcesUpdateGremlinDatabaseThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateGremlinDatabaseThroughput operation. */
export declare type GremlinResourcesUpdateGremlinDatabaseThroughputResponse = ThroughputSettingsGetResults;

/** Defines headers for GremlinResources_updateGremlinGraphThroughput operation. */
export declare interface GremlinResourcesUpdateGremlinGraphThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface GremlinResourcesUpdateGremlinGraphThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateGremlinGraphThroughput operation. */
export declare type GremlinResourcesUpdateGremlinGraphThroughputResponse = ThroughputSettingsGetResults;

/** The paths that are included in indexing */
export declare interface IncludedPath {
    /** The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*) */
    path?: string;
    /** List of indexes for this path */
    indexes?: Indexes[];
}

/** The indexes for the path. */
export declare interface Indexes {
    /** The datatype for which the indexing behavior is applied to. */
    dataType?: DataType;
    /** The precision of the index. -1 is maximum precision. */
    precision?: number;
    /** Indicates the type of index. */
    kind?: IndexKind;
}

/**
 * Defines values for IndexingMode. \
 * {@link KnownIndexingMode} can be used interchangeably with IndexingMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **consistent** \
 * **lazy** \
 * **none**
 */
export declare type IndexingMode = string;

/** Cosmos DB indexing policy */
export declare interface IndexingPolicy {
    /** Indicates if the indexing policy is automatic */
    automatic?: boolean;
    /** Indicates the indexing mode. */
    indexingMode?: IndexingMode;
    /** List of paths to include in the indexing */
    includedPaths?: IncludedPath[];
    /** List of paths to exclude from indexing */
    excludedPaths?: ExcludedPath[];
    /** List of composite path list */
    compositeIndexes?: CompositePath[][];
    /** List of spatial specifics */
    spatialIndexes?: SpatialSpec[];
}

/**
 * Defines values for IndexKind. \
 * {@link KnownIndexKind} can be used interchangeably with IndexKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Hash** \
 * **Range** \
 * **Spatial**
 */
export declare type IndexKind = string;

/** IpAddressOrRange object */
export declare interface IpAddressOrRange {
    /** A single IPv4 address or a single IPv4 address range in CIDR format. Provided IPs must be well-formatted and cannot be contained in one of the following ranges: 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16, since these are not enforceable by the IP address filter. Example of valid inputs: “23.40.210.245” or “23.40.210.0/8”. */
    ipAddressOrRange?: string;
}

/**
 * Defines values for KeyKind. \
 * {@link KnownKeyKind} can be used interchangeably with KeyKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **primary** \
 * **secondary** \
 * **primaryReadonly** \
 * **secondaryReadonly**
 */
export declare type KeyKind = string;

/** Represents key wrap metadata that a key wrapping provider can use to wrap/unwrap a client encryption key. */
export declare interface KeyWrapMetadata {
    /** The name of associated KeyEncryptionKey (aka CustomerManagedKey). */
    name?: string;
    /** ProviderName of KeyStoreProvider. */
    type?: string;
    /** Reference / link to the KeyEncryptionKey. */
    value?: string;
    /** Algorithm used in wrapping and unwrapping of the data encryption key. */
    algorithm?: string;
}

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Primary** \
 * **Secondary** \
 * **PrimaryReadonly** \
 * **SecondaryReadonly**
 */
export declare type Kind = string;

/** Known values of {@link AnalyticalStorageSchemaType} that the service accepts. */
export declare enum KnownAnalyticalStorageSchemaType {
    /** WellDefined */
    WellDefined = "WellDefined",
    /** FullFidelity */
    FullFidelity = "FullFidelity"
}

/** Known values of {@link ApiType} that the service accepts. */
export declare enum KnownApiType {
    /** MongoDB */
    MongoDB = "MongoDB",
    /** Gremlin */
    Gremlin = "Gremlin",
    /** Cassandra */
    Cassandra = "Cassandra",
    /** Table */
    Table = "Table",
    /** Sql */
    Sql = "Sql",
    /** GremlinV2 */
    GremlinV2 = "GremlinV2"
}

/** Known values of {@link AuthenticationMethod} that the service accepts. */
export declare enum KnownAuthenticationMethod {
    /** None */
    None = "None",
    /** Cassandra */
    Cassandra = "Cassandra",
    /** Ldap */
    Ldap = "Ldap"
}

/** Known values of {@link BackupPolicyMigrationStatus} that the service accepts. */
export declare enum KnownBackupPolicyMigrationStatus {
    /** Invalid */
    Invalid = "Invalid",
    /** InProgress */
    InProgress = "InProgress",
    /** Completed */
    Completed = "Completed",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link BackupPolicyType} that the service accepts. */
export declare enum KnownBackupPolicyType {
    /** Periodic */
    Periodic = "Periodic",
    /** Continuous */
    Continuous = "Continuous"
}

/** Known values of {@link BackupStorageRedundancy} that the service accepts. */
export declare enum KnownBackupStorageRedundancy {
    /** Geo */
    Geo = "Geo",
    /** Local */
    Local = "Local",
    /** Zone */
    Zone = "Zone"
}

/** Known values of {@link CompositePathSortOrder} that the service accepts. */
export declare enum KnownCompositePathSortOrder {
    /** Ascending */
    Ascending = "ascending",
    /** Descending */
    Descending = "descending"
}

/** Known values of {@link ConflictResolutionMode} that the service accepts. */
export declare enum KnownConflictResolutionMode {
    /** LastWriterWins */
    LastWriterWins = "LastWriterWins",
    /** Custom */
    Custom = "Custom"
}

/** Known values of {@link ConnectionState} that the service accepts. */
export declare enum KnownConnectionState {
    /** Unknown */
    Unknown = "Unknown",
    /** OK */
    OK = "OK",
    /** OperatorToDataCenterNetworkError */
    OperatorToDataCenterNetworkError = "OperatorToDataCenterNetworkError",
    /** DatacenterToDatacenterNetworkError */
    DatacenterToDatacenterNetworkError = "DatacenterToDatacenterNetworkError",
    /** InternalOperatorToDataCenterCertificateError */
    InternalOperatorToDataCenterCertificateError = "InternalOperatorToDataCenterCertificateError",
    /** InternalError */
    InternalError = "InternalError"
}

/** Known values of {@link ConnectorOffer} that the service accepts. */
export declare enum KnownConnectorOffer {
    /** Small */
    Small = "Small"
}

/** Known values of {@link ContinuousTier} that the service accepts. */
export declare enum KnownContinuousTier {
    /** Continuous7Days */
    Continuous7Days = "Continuous7Days",
    /** Continuous30Days */
    Continuous30Days = "Continuous30Days"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link CreateMode} that the service accepts. */
export declare enum KnownCreateMode {
    /** Default */
    Default = "Default",
    /** Restore */
    Restore = "Restore"
}

/** Known values of {@link DatabaseAccountKind} that the service accepts. */
export declare enum KnownDatabaseAccountKind {
    /** GlobalDocumentDB */
    GlobalDocumentDB = "GlobalDocumentDB",
    /** MongoDB */
    MongoDB = "MongoDB",
    /** Parse */
    Parse = "Parse"
}

/** Known values of {@link DataType} that the service accepts. */
export declare enum KnownDataType {
    /** String */
    String = "String",
    /** Number */
    Number = "Number",
    /** Point */
    Point = "Point",
    /** Polygon */
    Polygon = "Polygon",
    /** LineString */
    LineString = "LineString",
    /** MultiPolygon */
    MultiPolygon = "MultiPolygon"
}

/** Known values of {@link IndexingMode} that the service accepts. */
export declare enum KnownIndexingMode {
    /** Consistent */
    Consistent = "consistent",
    /** Lazy */
    Lazy = "lazy",
    /** None */
    None = "none"
}

/** Known values of {@link IndexKind} that the service accepts. */
export declare enum KnownIndexKind {
    /** Hash */
    Hash = "Hash",
    /** Range */
    Range = "Range",
    /** Spatial */
    Spatial = "Spatial"
}

/** Known values of {@link KeyKind} that the service accepts. */
export declare enum KnownKeyKind {
    /** Primary */
    Primary = "primary",
    /** Secondary */
    Secondary = "secondary",
    /** PrimaryReadonly */
    PrimaryReadonly = "primaryReadonly",
    /** SecondaryReadonly */
    SecondaryReadonly = "secondaryReadonly"
}

/** Known values of {@link Kind} that the service accepts. */
export declare enum KnownKind {
    /** Primary */
    Primary = "Primary",
    /** Secondary */
    Secondary = "Secondary",
    /** PrimaryReadonly */
    PrimaryReadonly = "PrimaryReadonly",
    /** SecondaryReadonly */
    SecondaryReadonly = "SecondaryReadonly"
}

/** Known values of {@link ManagedCassandraProvisioningState} that the service accepts. */
export declare enum KnownManagedCassandraProvisioningState {
    /** Creating */
    Creating = "Creating",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Failed */
    Failed = "Failed",
    /** Canceled */
    Canceled = "Canceled"
}

/** Known values of {@link ManagedCassandraResourceIdentityType} that the service accepts. */
export declare enum KnownManagedCassandraResourceIdentityType {
    /** SystemAssigned */
    SystemAssigned = "SystemAssigned",
    /** None */
    None = "None"
}

/** Known values of {@link MinimalTlsVersion} that the service accepts. */
export declare enum KnownMinimalTlsVersion {
    /** Tls */
    Tls = "Tls",
    /** Tls11 */
    Tls11 = "Tls11",
    /** Tls12 */
    Tls12 = "Tls12"
}

/** Known values of {@link NodeState} that the service accepts. */
export declare enum KnownNodeState {
    /** Normal */
    Normal = "Normal",
    /** Leaving */
    Leaving = "Leaving",
    /** Joining */
    Joining = "Joining",
    /** Moving */
    Moving = "Moving",
    /** Stopped */
    Stopped = "Stopped"
}

/** Known values of {@link NodeStatus} that the service accepts. */
export declare enum KnownNodeStatus {
    /** Up */
    Up = "Up",
    /** Down */
    Down = "Down"
}

/** Known values of {@link NotebookWorkspaceName} that the service accepts. */
export declare enum KnownNotebookWorkspaceName {
    /** Default */
    Default = "default"
}

/** Known values of {@link OperationType} that the service accepts. */
export declare enum KnownOperationType {
    /** Create */
    Create = "Create",
    /** Replace */
    Replace = "Replace",
    /** Delete */
    Delete = "Delete",
    /** Recreate */
    Recreate = "Recreate",
    /** SystemOperation */
    SystemOperation = "SystemOperation"
}

/** Known values of {@link PartitionKind} that the service accepts. */
export declare enum KnownPartitionKind {
    /** Hash */
    Hash = "Hash",
    /** Range */
    Range = "Range",
    /** MultiHash */
    MultiHash = "MultiHash"
}

/** Known values of {@link PrimaryAggregationType} that the service accepts. */
export declare enum KnownPrimaryAggregationType {
    /** None */
    None = "None",
    /** Average */
    Average = "Average",
    /** Total */
    Total = "Total",
    /** Minimum */
    Minimum = "Minimum",
    /** Maximum */
    Maximum = "Maximum",
    /** Last */
    Last = "Last"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled",
    /** SecuredByPerimeter */
    SecuredByPerimeter = "SecuredByPerimeter"
}

/** Known values of {@link RestoreMode} that the service accepts. */
export declare enum KnownRestoreMode {
    /** PointInTime */
    PointInTime = "PointInTime"
}

/** Known values of {@link ServerVersion} that the service accepts. */
export declare enum KnownServerVersion {
    /** Three2 */
    Three2 = "3.2",
    /** Three6 */
    Three6 = "3.6",
    /** Four0 */
    Four0 = "4.0",
    /** Four2 */
    Four2 = "4.2"
}

/** Known values of {@link ServiceSize} that the service accepts. */
export declare enum KnownServiceSize {
    /** CosmosD4S */
    CosmosD4S = "Cosmos.D4s",
    /** CosmosD8S */
    CosmosD8S = "Cosmos.D8s",
    /** CosmosD16S */
    CosmosD16S = "Cosmos.D16s"
}

/** Known values of {@link ServiceStatus} that the service accepts. */
export declare enum KnownServiceStatus {
    /** Creating */
    Creating = "Creating",
    /** Running */
    Running = "Running",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Error */
    Error = "Error",
    /** Stopped */
    Stopped = "Stopped"
}

/** Known values of {@link ServiceType} that the service accepts. */
export declare enum KnownServiceType {
    /** SqlDedicatedGateway */
    SqlDedicatedGateway = "SqlDedicatedGateway",
    /** DataTransfer */
    DataTransfer = "DataTransfer",
    /** GraphAPICompute */
    GraphAPICompute = "GraphAPICompute",
    /** MaterializedViewsBuilder */
    MaterializedViewsBuilder = "MaterializedViewsBuilder"
}

/** Known values of {@link SpatialType} that the service accepts. */
export declare enum KnownSpatialType {
    /** Point */
    Point = "Point",
    /** LineString */
    LineString = "LineString",
    /** Polygon */
    Polygon = "Polygon",
    /** MultiPolygon */
    MultiPolygon = "MultiPolygon"
}

/** Known values of {@link Status} that the service accepts. */
export declare enum KnownStatus {
    /** Uninitialized */
    Uninitialized = "Uninitialized",
    /** Initializing */
    Initializing = "Initializing",
    /** InternallyReady */
    InternallyReady = "InternallyReady",
    /** Online */
    Online = "Online",
    /** Deleting */
    Deleting = "Deleting"
}

/** Known values of {@link TriggerOperation} that the service accepts. */
export declare enum KnownTriggerOperation {
    /** All */
    All = "All",
    /** Create */
    Create = "Create",
    /** Update */
    Update = "Update",
    /** Delete */
    Delete = "Delete",
    /** Replace */
    Replace = "Replace"
}

/** Known values of {@link TriggerType} that the service accepts. */
export declare enum KnownTriggerType {
    /** Pre */
    Pre = "Pre",
    /** Post */
    Post = "Post"
}

/** Known values of {@link Type} that the service accepts. */
export declare enum KnownType {
    /** Sql */
    Sql = "Sql",
    /** Table */
    Table = "Table",
    /** MongoDB */
    MongoDB = "MongoDB",
    /** Cassandra */
    Cassandra = "Cassandra",
    /** CassandraConnectorMetadata */
    CassandraConnectorMetadata = "CassandraConnectorMetadata",
    /** Gremlin */
    Gremlin = "Gremlin",
    /** SqlDedicatedGateway */
    SqlDedicatedGateway = "SqlDedicatedGateway",
    /** GremlinV2 */
    GremlinV2 = "GremlinV2",
    /** Undefined */
    Undefined = "Undefined"
}

/** Known values of {@link UnitType} that the service accepts. */
export declare enum KnownUnitType {
    /** Count */
    Count = "Count",
    /** Bytes */
    Bytes = "Bytes",
    /** Seconds */
    Seconds = "Seconds",
    /** Percent */
    Percent = "Percent",
    /** CountPerSecond */
    CountPerSecond = "CountPerSecond",
    /** BytesPerSecond */
    BytesPerSecond = "BytesPerSecond",
    /** Milliseconds */
    Milliseconds = "Milliseconds"
}

/** List of managed Cassandra clusters. */
export declare interface ListClusters {
    /** Container for the array of clusters. */
    value?: ClusterResource[];
}

/** List of managed Cassandra data centers and their properties. */
export declare interface ListDataCenters {
    /**
     * Container for array of data centers.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: DataCenterResource[];
}

/** A region in which the Azure Cosmos DB database account is deployed. */
declare interface Location_2 {
    /**
     * The unique identifier of the region within the database account. Example: &lt;accountName&gt;-&lt;locationName&gt;.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /** The name of the region. */
    locationName?: string;
    /**
     * The connection endpoint for the specific region. Example: https://&lt;accountName&gt;-&lt;locationName&gt;.documents.azure.com:443/
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly documentEndpoint?: string;
    /**
     * The status of the Cosmos DB account at the time the operation was called. The status can be one of following. 'Creating' – the Cosmos DB account is being created. When an account is in Creating state, only properties that are specified as input for the Create Cosmos DB account operation are returned. 'Succeeded' – the Cosmos DB account is active for use. 'Updating' – the Cosmos DB account is being updated. 'Deleting' – the Cosmos DB account is being deleted. 'Failed' – the Cosmos DB account failed creation. 'DeletionFailed' – the Cosmos DB account deletion failed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists. */
    failoverPriority?: number;
    /** Flag to indicate whether or not this region is an AvailabilityZone region */
    isZoneRedundant?: boolean;
}
export { Location_2 as Location }

/** Cosmos DB location get result */
export declare interface LocationGetResult extends ARMProxyResource {
    /** Cosmos DB location metadata */
    properties?: LocationProperties;
}

/** The List operation response, that contains Cosmos DB locations and their properties. */
export declare interface LocationListResult {
    /**
     * List of Cosmos DB locations and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: LocationGetResult[];
}

/** Cosmos DB location metadata */
export declare interface LocationProperties {
    /**
     * Flag indicating whether the location supports availability zones or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly supportsAvailabilityZone?: boolean;
    /**
     * Flag indicating whether the location is residency sensitive.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isResidencyRestricted?: boolean;
    /**
     * The properties of available backup storage redundancies.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly backupStorageRedundancies?: BackupStorageRedundancy[];
    /**
     * Flag indicating whether the subscription have access in region for Non-Availability Zones.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isSubscriptionRegionAccessAllowedForRegular?: boolean;
    /**
     * Flag indicating whether the subscription have access in region for Availability Zones(Az).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isSubscriptionRegionAccessAllowedForAz?: boolean;
    /**
     * Enum to indicate current buildout status of the region.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: Status;
}

/** Interface representing a Locations. */
export declare interface Locations {
    /**
     * List Cosmos DB locations and their properties
     * @param options The options parameters.
     */
    list(options?: LocationsListOptionalParams): PagedAsyncIterableIterator<LocationGetResult>;
    /**
     * Get the properties of an existing Cosmos DB location
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param options The options parameters.
     */
    get(location: string, options?: LocationsGetOptionalParams): Promise<LocationsGetResponse>;
}

/** Optional parameters. */
export declare interface LocationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LocationsGetResponse = LocationGetResult;

/** Optional parameters. */
export declare interface LocationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type LocationsListResponse = LocationListResult;

/** The core properties of ARM resources. */
export declare interface ManagedCassandraARMResourceProperties {
    /**
     * The unique resource identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The location of the resource group to which the resource belongs. */
    location?: string;
    /** Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB". */
    tags?: {
        [propertyName: string]: string;
    };
    /** Identity for the resource. */
    identity?: ManagedCassandraManagedServiceIdentity;
}

/** Identity for the resource. */
export declare interface ManagedCassandraManagedServiceIdentity {
    /**
     * The object id of the identity resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant id of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of the resource. */
    type?: ManagedCassandraResourceIdentityType;
}

/**
 * Defines values for ManagedCassandraProvisioningState. \
 * {@link KnownManagedCassandraProvisioningState} can be used interchangeably with ManagedCassandraProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type ManagedCassandraProvisioningState = string;

export declare interface ManagedCassandraReaperStatus {
    healthy?: boolean;
    /** Dictionary of <string> */
    repairRunIds?: {
        [propertyName: string]: string;
    };
    /** Dictionary of <string> */
    repairSchedules?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for ManagedCassandraResourceIdentityType. \
 * {@link KnownManagedCassandraResourceIdentityType} can be used interchangeably with ManagedCassandraResourceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **None**
 */
export declare type ManagedCassandraResourceIdentityType = string;

/** Identity for the resource. */
export declare interface ManagedServiceIdentity {
    /**
     * The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of identity used for the resource. The type 'SystemAssigned,UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service. */
    type?: ResourceIdentityType;
    /** The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. */
    userAssignedIdentities?: {
        [propertyName: string]: Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties;
    };
}

/** Resource for a regional service location. */
export declare interface MaterializedViewsBuilderRegionalServiceResource extends RegionalServiceResource {
}

/** Describes the service response property for MaterializedViewsBuilder. */
export declare interface MaterializedViewsBuilderServiceResource {
    /** Properties for MaterializedViewsBuilderServiceResource. */
    properties?: MaterializedViewsBuilderServiceResourceProperties;
}

/** Properties for MaterializedViewsBuilderServiceResource. */
export declare interface MaterializedViewsBuilderServiceResourceProperties extends ServiceResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    serviceType: "MaterializedViewsBuilder";
    /**
     * An array that contains all of the locations for the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: MaterializedViewsBuilderRegionalServiceResource[];
}

/** Metric data */
export declare interface Metric {
    /**
     * The start time for the metric (ISO-8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The end time for the metric (ISO-8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * The time grain to be used to summarize the metric values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeGrain?: string;
    /**
     * The unit of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: UnitType;
    /**
     * The name information for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: MetricName;
    /**
     * The metric values for the specified time window and timestep.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricValues?: MetricValue[];
}

/** The availability of the metric. */
export declare interface MetricAvailability {
    /**
     * The time grain to be used to summarize the metric values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeGrain?: string;
    /**
     * The retention for the metric values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly retention?: string;
}

/** The definition of a metric. */
export declare interface MetricDefinition {
    /**
     * The list of metric availabilities for the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricAvailabilities?: MetricAvailability[];
    /**
     * The primary aggregation type of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly primaryAggregationType?: PrimaryAggregationType;
    /**
     * The unit of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: UnitType;
    /**
     * The resource uri of the database.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceUri?: string;
    /**
     * The name information for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: MetricName;
}

/** The response to a list metric definitions request. */
export declare interface MetricDefinitionsListResult {
    /**
     * The list of metric definitions for the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: MetricDefinition[];
}

/** The response to a list metrics request. */
export declare interface MetricListResult {
    /**
     * The list of metrics for the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Metric[];
}

/** A metric name. */
export declare interface MetricName {
    /**
     * The name of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: string;
    /**
     * The friendly name of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly localizedValue?: string;
}

/** Represents metrics values. */
export declare interface MetricValue {
    /**
     * The number of values for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly count?: number;
    /**
     * The average value of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly average?: number;
    /**
     * The max value of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maximum?: number;
    /**
     * The min value of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minimum?: number;
    /**
     * The metric timestamp (ISO-8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timestamp?: Date;
    /**
     * The total value of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly total?: number;
}

/**
 * Defines values for MinimalTlsVersion. \
 * {@link KnownMinimalTlsVersion} can be used interchangeably with MinimalTlsVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Tls** \
 * **Tls11** \
 * **Tls12**
 */
export declare type MinimalTlsVersion = string;

/** Parameters to create and update Cosmos DB MongoDB collection. */
export declare interface MongoDBCollectionCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a MongoDB collection */
    resource: MongoDBCollectionResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface MongoDBCollectionGetPropertiesOptions extends OptionsResource {
}

export declare interface MongoDBCollectionGetPropertiesResource extends MongoDBCollectionResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB MongoDB collection. */
export declare interface MongoDBCollectionGetResults extends ARMResourceProperties {
    resource?: MongoDBCollectionGetPropertiesResource;
    options?: MongoDBCollectionGetPropertiesOptions;
}

/** The List operation response, that contains the MongoDB collections and their properties. */
export declare interface MongoDBCollectionListResult {
    /**
     * List of MongoDB collections and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: MongoDBCollectionGetResults[];
}

/** Cosmos DB MongoDB collection resource object */
export declare interface MongoDBCollectionResource {
    /** Name of the Cosmos DB MongoDB collection */
    id: string;
    /** A key-value pair of shard keys to be applied for the request. */
    shardKey?: {
        [propertyName: string]: string;
    };
    /** List of index keys */
    indexes?: MongoIndex[];
    /** Analytical TTL. */
    analyticalStorageTtl?: number;
    /** Parameters to indicate the information about the restore */
    restoreParameters?: ResourceRestoreParameters;
    /** Enum to indicate the mode of resource creation. */
    createMode?: CreateMode;
}

/** Parameters to create and update Cosmos DB MongoDB database. */
export declare interface MongoDBDatabaseCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a MongoDB database */
    resource: MongoDBDatabaseResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface MongoDBDatabaseGetPropertiesOptions extends OptionsResource {
}

export declare interface MongoDBDatabaseGetPropertiesResource extends MongoDBDatabaseResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB MongoDB database. */
export declare interface MongoDBDatabaseGetResults extends ARMResourceProperties {
    resource?: MongoDBDatabaseGetPropertiesResource;
    options?: MongoDBDatabaseGetPropertiesOptions;
}

/** The List operation response, that contains the MongoDB databases and their properties. */
export declare interface MongoDBDatabaseListResult {
    /**
     * List of MongoDB databases and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: MongoDBDatabaseGetResults[];
}

/** Cosmos DB MongoDB database resource object */
export declare interface MongoDBDatabaseResource {
    /** Name of the Cosmos DB MongoDB database */
    id: string;
    /** Parameters to indicate the information about the restore */
    restoreParameters?: ResourceRestoreParameters;
    /** Enum to indicate the mode of resource creation. */
    createMode?: CreateMode;
}

/** Interface representing a MongoDBResources. */
export declare interface MongoDBResources {
    /**
     * Lists the MongoDB databases under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listMongoDBDatabases(resourceGroupName: string, accountName: string, options?: MongoDBResourcesListMongoDBDatabasesOptionalParams): PagedAsyncIterableIterator<MongoDBDatabaseGetResults>;
    /**
     * Lists the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    listMongoDBCollections(resourceGroupName: string, accountName: string, databaseName: string, options?: MongoDBResourcesListMongoDBCollectionsOptionalParams): PagedAsyncIterableIterator<MongoDBCollectionGetResults>;
    /**
     * Retrieves the list of all Azure Cosmos DB Mongo Role Definitions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listMongoRoleDefinitions(resourceGroupName: string, accountName: string, options?: MongoDBResourcesListMongoRoleDefinitionsOptionalParams): PagedAsyncIterableIterator<MongoRoleDefinitionGetResults>;
    /**
     * Retrieves the list of all Azure Cosmos DB Mongo User Definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listMongoUserDefinitions(resourceGroupName: string, accountName: string, options?: MongoDBResourcesListMongoUserDefinitionsOptionalParams): PagedAsyncIterableIterator<MongoUserDefinitionGetResults>;
    /**
     * Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided
     * name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    getMongoDBDatabase(resourceGroupName: string, accountName: string, databaseName: string, options?: MongoDBResourcesGetMongoDBDatabaseOptionalParams): Promise<MongoDBResourcesGetMongoDBDatabaseResponse>;
    /**
     * Create or updates Azure Cosmos DB MongoDB database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB
     *                                              database.
     * @param options The options parameters.
     */
    beginCreateUpdateMongoDBDatabase(resourceGroupName: string, accountName: string, databaseName: string, createUpdateMongoDBDatabaseParameters: MongoDBDatabaseCreateUpdateParameters, options?: MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesCreateUpdateMongoDBDatabaseResponse>, MongoDBResourcesCreateUpdateMongoDBDatabaseResponse>>;
    /**
     * Create or updates Azure Cosmos DB MongoDB database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param createUpdateMongoDBDatabaseParameters The parameters to provide for the current MongoDB
     *                                              database.
     * @param options The options parameters.
     */
    beginCreateUpdateMongoDBDatabaseAndWait(resourceGroupName: string, accountName: string, databaseName: string, createUpdateMongoDBDatabaseParameters: MongoDBDatabaseCreateUpdateParameters, options?: MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams): Promise<MongoDBResourcesCreateUpdateMongoDBDatabaseResponse>;
    /**
     * Deletes an existing Azure Cosmos DB MongoDB database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginDeleteMongoDBDatabase(resourceGroupName: string, accountName: string, databaseName: string, options?: MongoDBResourcesDeleteMongoDBDatabaseOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesDeleteMongoDBDatabaseResponse>, MongoDBResourcesDeleteMongoDBDatabaseResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB MongoDB database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginDeleteMongoDBDatabaseAndWait(resourceGroupName: string, accountName: string, databaseName: string, options?: MongoDBResourcesDeleteMongoDBDatabaseOptionalParams): Promise<MongoDBResourcesDeleteMongoDBDatabaseResponse>;
    /**
     * Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account
     * with the provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    getMongoDBDatabaseThroughput(resourceGroupName: string, accountName: string, databaseName: string, options?: MongoDBResourcesGetMongoDBDatabaseThroughputOptionalParams): Promise<MongoDBResourcesGetMongoDBDatabaseThroughputResponse>;
    /**
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   MongoDB database.
     * @param options The options parameters.
     */
    beginUpdateMongoDBDatabaseThroughput(resourceGroupName: string, accountName: string, databaseName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse>, MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse>>;
    /**
     * Update RUs per second of the an Azure Cosmos DB MongoDB database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   MongoDB database.
     * @param options The options parameters.
     */
    beginUpdateMongoDBDatabaseThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams): Promise<MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse>;
    /**
     * Migrate an Azure Cosmos DB MongoDB database from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateMongoDBDatabaseToAutoscale(resourceGroupName: string, accountName: string, databaseName: string, options?: MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse>, MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse>>;
    /**
     * Migrate an Azure Cosmos DB MongoDB database from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateMongoDBDatabaseToAutoscaleAndWait(resourceGroupName: string, accountName: string, databaseName: string, options?: MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams): Promise<MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse>;
    /**
     * Migrate an Azure Cosmos DB MongoDB database from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateMongoDBDatabaseToManualThroughput(resourceGroupName: string, accountName: string, databaseName: string, options?: MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse>, MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse>>;
    /**
     * Migrate an Azure Cosmos DB MongoDB database from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateMongoDBDatabaseToManualThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, options?: MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams): Promise<MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse>;
    /**
     * Gets the MongoDB collection under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param options The options parameters.
     */
    getMongoDBCollection(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, options?: MongoDBResourcesGetMongoDBCollectionOptionalParams): Promise<MongoDBResourcesGetMongoDBCollectionResponse>;
    /**
     * Create or update an Azure Cosmos DB MongoDB Collection
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB
     *                                                Collection.
     * @param options The options parameters.
     */
    beginCreateUpdateMongoDBCollection(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, createUpdateMongoDBCollectionParameters: MongoDBCollectionCreateUpdateParameters, options?: MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesCreateUpdateMongoDBCollectionResponse>, MongoDBResourcesCreateUpdateMongoDBCollectionResponse>>;
    /**
     * Create or update an Azure Cosmos DB MongoDB Collection
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param createUpdateMongoDBCollectionParameters The parameters to provide for the current MongoDB
     *                                                Collection.
     * @param options The options parameters.
     */
    beginCreateUpdateMongoDBCollectionAndWait(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, createUpdateMongoDBCollectionParameters: MongoDBCollectionCreateUpdateParameters, options?: MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams): Promise<MongoDBResourcesCreateUpdateMongoDBCollectionResponse>;
    /**
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param options The options parameters.
     */
    beginDeleteMongoDBCollection(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, options?: MongoDBResourcesDeleteMongoDBCollectionOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesDeleteMongoDBCollectionResponse>, MongoDBResourcesDeleteMongoDBCollectionResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB MongoDB Collection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param options The options parameters.
     */
    beginDeleteMongoDBCollectionAndWait(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, options?: MongoDBResourcesDeleteMongoDBCollectionOptionalParams): Promise<MongoDBResourcesDeleteMongoDBCollectionResponse>;
    /**
     * Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account
     * with the provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param options The options parameters.
     */
    getMongoDBCollectionThroughput(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, options?: MongoDBResourcesGetMongoDBCollectionThroughputOptionalParams): Promise<MongoDBResourcesGetMongoDBCollectionThroughputResponse>;
    /**
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   MongoDB collection.
     * @param options The options parameters.
     */
    beginUpdateMongoDBCollectionThroughput(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesUpdateMongoDBCollectionThroughputResponse>, MongoDBResourcesUpdateMongoDBCollectionThroughputResponse>>;
    /**
     * Update the RUs per second of an Azure Cosmos DB MongoDB collection
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param updateThroughputParameters The RUs per second of the parameters to provide for the current
     *                                   MongoDB collection.
     * @param options The options parameters.
     */
    beginUpdateMongoDBCollectionThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams): Promise<MongoDBResourcesUpdateMongoDBCollectionThroughputResponse>;
    /**
     * Migrate an Azure Cosmos DB MongoDB collection from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param options The options parameters.
     */
    beginMigrateMongoDBCollectionToAutoscale(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, options?: MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse>, MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse>>;
    /**
     * Migrate an Azure Cosmos DB MongoDB collection from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param options The options parameters.
     */
    beginMigrateMongoDBCollectionToAutoscaleAndWait(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, options?: MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams): Promise<MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse>;
    /**
     * Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param options The options parameters.
     */
    beginMigrateMongoDBCollectionToManualThroughput(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, options?: MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse>, MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse>>;
    /**
     * Migrate an Azure Cosmos DB MongoDB collection from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param options The options parameters.
     */
    beginMigrateMongoDBCollectionToManualThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, options?: MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams): Promise<MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse>;
    /**
     * Retrieves the properties of an existing Azure Cosmos DB Mongo Role Definition with the given Id.
     * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    getMongoRoleDefinition(mongoRoleDefinitionId: string, resourceGroupName: string, accountName: string, options?: MongoDBResourcesGetMongoRoleDefinitionOptionalParams): Promise<MongoDBResourcesGetMongoRoleDefinitionResponse>;
    /**
     * Creates or updates an Azure Cosmos DB Mongo Role Definition.
     * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param createUpdateMongoRoleDefinitionParameters The properties required to create or update a Role
     *                                                  Definition.
     * @param options The options parameters.
     */
    beginCreateUpdateMongoRoleDefinition(mongoRoleDefinitionId: string, resourceGroupName: string, accountName: string, createUpdateMongoRoleDefinitionParameters: MongoRoleDefinitionCreateUpdateParameters, options?: MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse>, MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse>>;
    /**
     * Creates or updates an Azure Cosmos DB Mongo Role Definition.
     * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param createUpdateMongoRoleDefinitionParameters The properties required to create or update a Role
     *                                                  Definition.
     * @param options The options parameters.
     */
    beginCreateUpdateMongoRoleDefinitionAndWait(mongoRoleDefinitionId: string, resourceGroupName: string, accountName: string, createUpdateMongoRoleDefinitionParameters: MongoRoleDefinitionCreateUpdateParameters, options?: MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams): Promise<MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse>;
    /**
     * Deletes an existing Azure Cosmos DB Mongo Role Definition.
     * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    beginDeleteMongoRoleDefinition(mongoRoleDefinitionId: string, resourceGroupName: string, accountName: string, options?: MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes an existing Azure Cosmos DB Mongo Role Definition.
     * @param mongoRoleDefinitionId The ID for the Role Definition {dbName.roleName}.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    beginDeleteMongoRoleDefinitionAndWait(mongoRoleDefinitionId: string, resourceGroupName: string, accountName: string, options?: MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams): Promise<void>;
    /**
     * Retrieves the properties of an existing Azure Cosmos DB Mongo User Definition with the given Id.
     * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    getMongoUserDefinition(mongoUserDefinitionId: string, resourceGroupName: string, accountName: string, options?: MongoDBResourcesGetMongoUserDefinitionOptionalParams): Promise<MongoDBResourcesGetMongoUserDefinitionResponse>;
    /**
     * Creates or updates an Azure Cosmos DB Mongo User Definition.
     * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param createUpdateMongoUserDefinitionParameters The properties required to create or update a User
     *                                                  Definition.
     * @param options The options parameters.
     */
    beginCreateUpdateMongoUserDefinition(mongoUserDefinitionId: string, resourceGroupName: string, accountName: string, createUpdateMongoUserDefinitionParameters: MongoUserDefinitionCreateUpdateParameters, options?: MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesCreateUpdateMongoUserDefinitionResponse>, MongoDBResourcesCreateUpdateMongoUserDefinitionResponse>>;
    /**
     * Creates or updates an Azure Cosmos DB Mongo User Definition.
     * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param createUpdateMongoUserDefinitionParameters The properties required to create or update a User
     *                                                  Definition.
     * @param options The options parameters.
     */
    beginCreateUpdateMongoUserDefinitionAndWait(mongoUserDefinitionId: string, resourceGroupName: string, accountName: string, createUpdateMongoUserDefinitionParameters: MongoUserDefinitionCreateUpdateParameters, options?: MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams): Promise<MongoDBResourcesCreateUpdateMongoUserDefinitionResponse>;
    /**
     * Deletes an existing Azure Cosmos DB Mongo User Definition.
     * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    beginDeleteMongoUserDefinition(mongoUserDefinitionId: string, resourceGroupName: string, accountName: string, options?: MongoDBResourcesDeleteMongoUserDefinitionOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes an existing Azure Cosmos DB Mongo User Definition.
     * @param mongoUserDefinitionId The ID for the User Definition {dbName.userName}.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    beginDeleteMongoUserDefinitionAndWait(mongoUserDefinitionId: string, resourceGroupName: string, accountName: string, options?: MongoDBResourcesDeleteMongoUserDefinitionOptionalParams): Promise<void>;
    /**
     * Retrieves continuous backup information for a Mongodb collection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param location The name of the continuous backup restore location.
     * @param options The options parameters.
     */
    beginRetrieveContinuousBackupInformation(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, location: ContinuousBackupRestoreLocation, options?: MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams): Promise<SimplePollerLike<OperationState<MongoDBResourcesRetrieveContinuousBackupInformationResponse>, MongoDBResourcesRetrieveContinuousBackupInformationResponse>>;
    /**
     * Retrieves continuous backup information for a Mongodb collection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param collectionName Cosmos DB collection name.
     * @param location The name of the continuous backup restore location.
     * @param options The options parameters.
     */
    beginRetrieveContinuousBackupInformationAndWait(resourceGroupName: string, accountName: string, databaseName: string, collectionName: string, location: ContinuousBackupRestoreLocation, options?: MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams): Promise<MongoDBResourcesRetrieveContinuousBackupInformationResponse>;
}

/** Defines headers for MongoDBResources_createUpdateMongoDBCollection operation. */
export declare interface MongoDBResourcesCreateUpdateMongoDBCollectionHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesCreateUpdateMongoDBCollectionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateMongoDBCollection operation. */
export declare type MongoDBResourcesCreateUpdateMongoDBCollectionResponse = MongoDBCollectionGetResults;

/** Defines headers for MongoDBResources_createUpdateMongoDBDatabase operation. */
export declare interface MongoDBResourcesCreateUpdateMongoDBDatabaseHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesCreateUpdateMongoDBDatabaseOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateMongoDBDatabase operation. */
export declare type MongoDBResourcesCreateUpdateMongoDBDatabaseResponse = MongoDBDatabaseGetResults;

/** Optional parameters. */
export declare interface MongoDBResourcesCreateUpdateMongoRoleDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateMongoRoleDefinition operation. */
export declare type MongoDBResourcesCreateUpdateMongoRoleDefinitionResponse = MongoRoleDefinitionGetResults;

/** Optional parameters. */
export declare interface MongoDBResourcesCreateUpdateMongoUserDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateMongoUserDefinition operation. */
export declare type MongoDBResourcesCreateUpdateMongoUserDefinitionResponse = MongoUserDefinitionGetResults;

/** Defines headers for MongoDBResources_deleteMongoDBCollection operation. */
export declare interface MongoDBResourcesDeleteMongoDBCollectionHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesDeleteMongoDBCollectionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteMongoDBCollection operation. */
export declare type MongoDBResourcesDeleteMongoDBCollectionResponse = MongoDBResourcesDeleteMongoDBCollectionHeaders;

/** Defines headers for MongoDBResources_deleteMongoDBDatabase operation. */
export declare interface MongoDBResourcesDeleteMongoDBDatabaseHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesDeleteMongoDBDatabaseOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteMongoDBDatabase operation. */
export declare type MongoDBResourcesDeleteMongoDBDatabaseResponse = MongoDBResourcesDeleteMongoDBDatabaseHeaders;

/** Optional parameters. */
export declare interface MongoDBResourcesDeleteMongoRoleDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesDeleteMongoUserDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesGetMongoDBCollectionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getMongoDBCollection operation. */
export declare type MongoDBResourcesGetMongoDBCollectionResponse = MongoDBCollectionGetResults;

/** Optional parameters. */
export declare interface MongoDBResourcesGetMongoDBCollectionThroughputOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getMongoDBCollectionThroughput operation. */
export declare type MongoDBResourcesGetMongoDBCollectionThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface MongoDBResourcesGetMongoDBDatabaseOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getMongoDBDatabase operation. */
export declare type MongoDBResourcesGetMongoDBDatabaseResponse = MongoDBDatabaseGetResults;

/** Optional parameters. */
export declare interface MongoDBResourcesGetMongoDBDatabaseThroughputOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getMongoDBDatabaseThroughput operation. */
export declare type MongoDBResourcesGetMongoDBDatabaseThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface MongoDBResourcesGetMongoRoleDefinitionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getMongoRoleDefinition operation. */
export declare type MongoDBResourcesGetMongoRoleDefinitionResponse = MongoRoleDefinitionGetResults;

/** Optional parameters. */
export declare interface MongoDBResourcesGetMongoUserDefinitionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getMongoUserDefinition operation. */
export declare type MongoDBResourcesGetMongoUserDefinitionResponse = MongoUserDefinitionGetResults;

/** Optional parameters. */
export declare interface MongoDBResourcesListMongoDBCollectionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMongoDBCollections operation. */
export declare type MongoDBResourcesListMongoDBCollectionsResponse = MongoDBCollectionListResult;

/** Optional parameters. */
export declare interface MongoDBResourcesListMongoDBDatabasesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMongoDBDatabases operation. */
export declare type MongoDBResourcesListMongoDBDatabasesResponse = MongoDBDatabaseListResult;

/** Optional parameters. */
export declare interface MongoDBResourcesListMongoRoleDefinitionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMongoRoleDefinitions operation. */
export declare type MongoDBResourcesListMongoRoleDefinitionsResponse = MongoRoleDefinitionListResult;

/** Optional parameters. */
export declare interface MongoDBResourcesListMongoUserDefinitionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMongoUserDefinitions operation. */
export declare type MongoDBResourcesListMongoUserDefinitionsResponse = MongoUserDefinitionListResult;

/** Defines headers for MongoDBResources_migrateMongoDBCollectionToAutoscale operation. */
export declare interface MongoDBResourcesMigrateMongoDBCollectionToAutoscaleHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesMigrateMongoDBCollectionToAutoscaleOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateMongoDBCollectionToAutoscale operation. */
export declare type MongoDBResourcesMigrateMongoDBCollectionToAutoscaleResponse = ThroughputSettingsGetResults;

/** Defines headers for MongoDBResources_migrateMongoDBCollectionToManualThroughput operation. */
export declare interface MongoDBResourcesMigrateMongoDBCollectionToManualThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesMigrateMongoDBCollectionToManualThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateMongoDBCollectionToManualThroughput operation. */
export declare type MongoDBResourcesMigrateMongoDBCollectionToManualThroughputResponse = ThroughputSettingsGetResults;

/** Defines headers for MongoDBResources_migrateMongoDBDatabaseToAutoscale operation. */
export declare interface MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateMongoDBDatabaseToAutoscale operation. */
export declare type MongoDBResourcesMigrateMongoDBDatabaseToAutoscaleResponse = ThroughputSettingsGetResults;

/** Defines headers for MongoDBResources_migrateMongoDBDatabaseToManualThroughput operation. */
export declare interface MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateMongoDBDatabaseToManualThroughput operation. */
export declare type MongoDBResourcesMigrateMongoDBDatabaseToManualThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface MongoDBResourcesRetrieveContinuousBackupInformationOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the retrieveContinuousBackupInformation operation. */
export declare type MongoDBResourcesRetrieveContinuousBackupInformationResponse = BackupInformation;

/** Defines headers for MongoDBResources_updateMongoDBCollectionThroughput operation. */
export declare interface MongoDBResourcesUpdateMongoDBCollectionThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesUpdateMongoDBCollectionThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateMongoDBCollectionThroughput operation. */
export declare type MongoDBResourcesUpdateMongoDBCollectionThroughputResponse = ThroughputSettingsGetResults;

/** Defines headers for MongoDBResources_updateMongoDBDatabaseThroughput operation. */
export declare interface MongoDBResourcesUpdateMongoDBDatabaseThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface MongoDBResourcesUpdateMongoDBDatabaseThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateMongoDBDatabaseThroughput operation. */
export declare type MongoDBResourcesUpdateMongoDBDatabaseThroughputResponse = ThroughputSettingsGetResults;

/** Cosmos DB MongoDB collection index key */
export declare interface MongoIndex {
    /** Cosmos DB MongoDB collection index keys */
    key?: MongoIndexKeys;
    /** Cosmos DB MongoDB collection index key options */
    options?: MongoIndexOptions;
}

/** Cosmos DB MongoDB collection resource object */
export declare interface MongoIndexKeys {
    /** List of keys for each MongoDB collection in the Azure Cosmos DB service */
    keys?: string[];
}

/** Cosmos DB MongoDB collection index options */
export declare interface MongoIndexOptions {
    /** Expire after seconds */
    expireAfterSeconds?: number;
    /** Is unique or not */
    unique?: boolean;
}

/** Parameters to create and update an Azure Cosmos DB Mongo Role Definition. */
export declare interface MongoRoleDefinitionCreateUpdateParameters {
    /** A user-friendly name for the Role Definition. Must be unique for the database account. */
    roleName?: string;
    /** Indicates whether the Role Definition was built-in or user created. */
    type?: MongoRoleDefinitionType;
    /** The database name for which access is being granted for this Role Definition. */
    databaseName?: string;
    /** A set of privileges contained by the Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Scopes higher than Database are not enforceable as privilege. */
    privileges?: Privilege[];
    /** The set of roles inherited by this Role Definition. */
    roles?: Role[];
}

/** An Azure Cosmos DB Mongo Role Definition. */
export declare interface MongoRoleDefinitionGetResults extends ARMProxyResource {
    /** A user-friendly name for the Role Definition. Must be unique for the database account. */
    roleName?: string;
    /** Indicates whether the Role Definition was built-in or user created. */
    typePropertiesType?: MongoRoleDefinitionType;
    /** The database name for which access is being granted for this Role Definition. */
    databaseName?: string;
    /** A set of privileges contained by the Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Scopes higher than Database are not enforceable as privilege. */
    privileges?: Privilege[];
    /** The set of roles inherited by this Role Definition. */
    roles?: Role[];
}

/** The relevant Mongo Role Definitions. */
export declare interface MongoRoleDefinitionListResult {
    /**
     * List of Mongo Role Definitions and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: MongoRoleDefinitionGetResults[];
}

/** Defines values for MongoRoleDefinitionType. */
export declare type MongoRoleDefinitionType = "BuiltInRole" | "CustomRole";

/** Parameters to create and update an Azure Cosmos DB Mongo User Definition. */
export declare interface MongoUserDefinitionCreateUpdateParameters {
    /** The user name for User Definition. */
    userName?: string;
    /** The password for User Definition. Response does not contain user password. */
    password?: string;
    /** The database name for which access is being granted for this User Definition. */
    databaseName?: string;
    /** A custom definition for the USer Definition. */
    customData?: string;
    /** The set of roles inherited by the User Definition. */
    roles?: Role[];
    /** The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256. */
    mechanisms?: string;
}

/** An Azure Cosmos DB User Definition */
export declare interface MongoUserDefinitionGetResults extends ARMProxyResource {
    /** The user name for User Definition. */
    userName?: string;
    /** The password for User Definition. Response does not contain user password. */
    password?: string;
    /** The database name for which access is being granted for this User Definition. */
    databaseName?: string;
    /** A custom definition for the USer Definition. */
    customData?: string;
    /** The set of roles inherited by the User Definition. */
    roles?: Role[];
    /** The Mongo Auth mechanism. For now, we only support auth mechanism SCRAM-SHA-256. */
    mechanisms?: string;
}

/** The relevant User Definition. */
export declare interface MongoUserDefinitionListResult {
    /**
     * List of User Definition and their properties
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: MongoUserDefinitionGetResults[];
}

/** Defines values for NetworkAclBypass. */
export declare type NetworkAclBypass = "None" | "AzureServices";

/**
 * Defines values for NodeState. \
 * {@link KnownNodeState} can be used interchangeably with NodeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Normal** \
 * **Leaving** \
 * **Joining** \
 * **Moving** \
 * **Stopped**
 */
export declare type NodeState = string;

/**
 * Defines values for NodeStatus. \
 * {@link KnownNodeStatus} can be used interchangeably with NodeStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Up** \
 * **Down**
 */
export declare type NodeStatus = string;

/** A notebook workspace resource */
export declare interface NotebookWorkspace extends ARMProxyResource {
    /**
     * Specifies the endpoint of Notebook server.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly notebookServerEndpoint?: string;
    /**
     * Status of the notebook workspace. Possible values are: Creating, Online, Deleting, Failed, Updating.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
}

/** The connection info for the given notebook workspace */
export declare interface NotebookWorkspaceConnectionInfoResult {
    /**
     * Specifies auth token used for connecting to Notebook server (uses token-based auth).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly authToken?: string;
    /**
     * Specifies the endpoint of Notebook server.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly notebookServerEndpoint?: string;
}

/** Parameters to create a notebook workspace resource */
export declare interface NotebookWorkspaceCreateUpdateParameters extends ARMProxyResource {
}

/** A list of notebook workspace resources */
export declare interface NotebookWorkspaceListResult {
    /** Array of notebook workspace resources */
    value?: NotebookWorkspace[];
}

/**
 * Defines values for NotebookWorkspaceName. \
 * {@link KnownNotebookWorkspaceName} can be used interchangeably with NotebookWorkspaceName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type NotebookWorkspaceName = string;

/** Interface representing a NotebookWorkspaces. */
export declare interface NotebookWorkspaces {
    /**
     * Gets the notebook workspace resources of an existing Cosmos DB account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listByDatabaseAccount(resourceGroupName: string, accountName: string, options?: NotebookWorkspacesListByDatabaseAccountOptionalParams): PagedAsyncIterableIterator<NotebookWorkspace>;
    /**
     * Gets the notebook workspace for a Cosmos DB account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param notebookWorkspaceName The name of the notebook workspace resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, notebookWorkspaceName: NotebookWorkspaceName, options?: NotebookWorkspacesGetOptionalParams): Promise<NotebookWorkspacesGetResponse>;
    /**
     * Creates the notebook workspace for a Cosmos DB account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param notebookWorkspaceName The name of the notebook workspace resource.
     * @param notebookCreateUpdateParameters The notebook workspace to create for the current database
     *                                       account.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, notebookWorkspaceName: NotebookWorkspaceName, notebookCreateUpdateParameters: NotebookWorkspaceCreateUpdateParameters, options?: NotebookWorkspacesCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<NotebookWorkspacesCreateOrUpdateResponse>, NotebookWorkspacesCreateOrUpdateResponse>>;
    /**
     * Creates the notebook workspace for a Cosmos DB account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param notebookWorkspaceName The name of the notebook workspace resource.
     * @param notebookCreateUpdateParameters The notebook workspace to create for the current database
     *                                       account.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, accountName: string, notebookWorkspaceName: NotebookWorkspaceName, notebookCreateUpdateParameters: NotebookWorkspaceCreateUpdateParameters, options?: NotebookWorkspacesCreateOrUpdateOptionalParams): Promise<NotebookWorkspacesCreateOrUpdateResponse>;
    /**
     * Deletes the notebook workspace for a Cosmos DB account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param notebookWorkspaceName The name of the notebook workspace resource.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, notebookWorkspaceName: NotebookWorkspaceName, options?: NotebookWorkspacesDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes the notebook workspace for a Cosmos DB account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param notebookWorkspaceName The name of the notebook workspace resource.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, notebookWorkspaceName: NotebookWorkspaceName, options?: NotebookWorkspacesDeleteOptionalParams): Promise<void>;
    /**
     * Retrieves the connection info for the notebook workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param notebookWorkspaceName The name of the notebook workspace resource.
     * @param options The options parameters.
     */
    listConnectionInfo(resourceGroupName: string, accountName: string, notebookWorkspaceName: NotebookWorkspaceName, options?: NotebookWorkspacesListConnectionInfoOptionalParams): Promise<NotebookWorkspacesListConnectionInfoResponse>;
    /**
     * Regenerates the auth token for the notebook workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param notebookWorkspaceName The name of the notebook workspace resource.
     * @param options The options parameters.
     */
    beginRegenerateAuthToken(resourceGroupName: string, accountName: string, notebookWorkspaceName: NotebookWorkspaceName, options?: NotebookWorkspacesRegenerateAuthTokenOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Regenerates the auth token for the notebook workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param notebookWorkspaceName The name of the notebook workspace resource.
     * @param options The options parameters.
     */
    beginRegenerateAuthTokenAndWait(resourceGroupName: string, accountName: string, notebookWorkspaceName: NotebookWorkspaceName, options?: NotebookWorkspacesRegenerateAuthTokenOptionalParams): Promise<void>;
    /**
     * Starts the notebook workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param notebookWorkspaceName The name of the notebook workspace resource.
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, accountName: string, notebookWorkspaceName: NotebookWorkspaceName, options?: NotebookWorkspacesStartOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Starts the notebook workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param notebookWorkspaceName The name of the notebook workspace resource.
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, accountName: string, notebookWorkspaceName: NotebookWorkspaceName, options?: NotebookWorkspacesStartOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface NotebookWorkspacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type NotebookWorkspacesCreateOrUpdateResponse = NotebookWorkspace;

/** Optional parameters. */
export declare interface NotebookWorkspacesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface NotebookWorkspacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type NotebookWorkspacesGetResponse = NotebookWorkspace;

/** Optional parameters. */
export declare interface NotebookWorkspacesListByDatabaseAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDatabaseAccount operation. */
export declare type NotebookWorkspacesListByDatabaseAccountResponse = NotebookWorkspaceListResult;

/** Optional parameters. */
export declare interface NotebookWorkspacesListConnectionInfoOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listConnectionInfo operation. */
export declare type NotebookWorkspacesListConnectionInfoResponse = NotebookWorkspaceConnectionInfoResult;

/** Optional parameters. */
export declare interface NotebookWorkspacesRegenerateAuthTokenOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface NotebookWorkspacesStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** REST API operation */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** The object that represents the operation. */
    display?: OperationDisplay;
}

/** The object that represents the operation. */
export declare interface OperationDisplay {
    /** Service provider: Microsoft.ResourceProvider */
    provider?: string;
    /** Resource on which the operation is performed: Profile, endpoint, etc. */
    resource?: string;
    /** Operation type: Read, write, delete, etc. */
    operation?: string;
    /** Description of operation */
    description?: string;
}

/** Result of the request to list Resource Provider operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /** List of operations supported by the Resource Provider. */
    value?: Operation[];
    /** URL to get the next set of operation list results if there are any. */
    nextLink?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Cosmos DB Resource Provider operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for OperationType. \
 * {@link KnownOperationType} can be used interchangeably with OperationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Create** \
 * **Replace** \
 * **Delete** \
 * **Recreate** \
 * **SystemOperation**
 */
export declare type OperationType = string;

/** Cosmos DB options resource object */
export declare interface OptionsResource {
    /** Value of the Cosmos DB resource throughput or autoscaleSettings. Use the ThroughputSetting resource when retrieving offer details. */
    throughput?: number;
    /** Specifies the Autoscale settings. */
    autoscaleSettings?: AutoscaleSettings;
}

/** Interface representing a PartitionKeyRangeId. */
export declare interface PartitionKeyRangeId {
    /**
     * Retrieves the metrics determined by the given filter for the given partition key range id.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseRid Cosmos DB database rid.
     * @param collectionRid Cosmos DB collection rid.
     * @param partitionKeyRangeId Partition Key Range Id for which to get data.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, databaseRid: string, collectionRid: string, partitionKeyRangeId: string, filter: string, options?: PartitionKeyRangeIdListMetricsOptionalParams): PagedAsyncIterableIterator<PartitionMetric>;
}

/** Optional parameters. */
export declare interface PartitionKeyRangeIdListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type PartitionKeyRangeIdListMetricsResponse = PartitionMetricListResult;

/** Interface representing a PartitionKeyRangeIdRegion. */
export declare interface PartitionKeyRangeIdRegion {
    /**
     * Retrieves the metrics determined by the given filter for the given partition key range id and
     * region.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param region Cosmos DB region, with spaces between words and each word capitalized.
     * @param databaseRid Cosmos DB database rid.
     * @param collectionRid Cosmos DB collection rid.
     * @param partitionKeyRangeId Partition Key Range Id for which to get data.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, region: string, databaseRid: string, collectionRid: string, partitionKeyRangeId: string, filter: string, options?: PartitionKeyRangeIdRegionListMetricsOptionalParams): PagedAsyncIterableIterator<PartitionMetric>;
}

/** Optional parameters. */
export declare interface PartitionKeyRangeIdRegionListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type PartitionKeyRangeIdRegionListMetricsResponse = PartitionMetricListResult;

/**
 * Defines values for PartitionKind. \
 * {@link KnownPartitionKind} can be used interchangeably with PartitionKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Hash** \
 * **Range** \
 * **MultiHash**
 */
export declare type PartitionKind = string;

/** The metric values for a single partition. */
export declare interface PartitionMetric extends Metric {
    /**
     * The partition id (GUID identifier) of the metric values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly partitionId?: string;
    /**
     * The partition key range id (integer identifier) of the metric values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly partitionKeyRangeId?: string;
}

/** The response to a list partition metrics request. */
export declare interface PartitionMetricListResult {
    /**
     * The list of partition-level metrics for the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PartitionMetric[];
}

/** The partition level usage data for a usage request. */
export declare interface PartitionUsage extends Usage {
    /**
     * The partition id (GUID identifier) of the usages.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly partitionId?: string;
    /**
     * The partition key range id (integer identifier) of the usages.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly partitionKeyRangeId?: string;
}

/** The response to a list partition level usage request. */
export declare interface PartitionUsagesResult {
    /**
     * The list of partition-level usages for the database. A usage is a point in time metric
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PartitionUsage[];
}

/** Interface representing a Percentile. */
export declare interface Percentile {
    /**
     * Retrieves the metrics determined by the given filter for the given database account. This url is
     * only for PBS and Replication Latency data
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, filter: string, options?: PercentileListMetricsOptionalParams): PagedAsyncIterableIterator<PercentileMetric>;
}

/** Optional parameters. */
export declare interface PercentileListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type PercentileListMetricsResponse = PercentileMetricListResult;

/** Percentile Metric data */
export declare interface PercentileMetric {
    /**
     * The start time for the metric (ISO-8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The end time for the metric (ISO-8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * The time grain to be used to summarize the metric values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timeGrain?: string;
    /**
     * The unit of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: UnitType;
    /**
     * The name information for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: MetricName;
    /**
     * The percentile metric values for the specified time window and timestep.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metricValues?: PercentileMetricValue[];
}

/** The response to a list percentile metrics request. */
export declare interface PercentileMetricListResult {
    /**
     * The list of percentile metrics for the account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PercentileMetric[];
}

/** Represents percentile metrics values. */
export declare interface PercentileMetricValue extends MetricValue {
    /**
     * The 10th percentile value for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p10?: number;
    /**
     * The 25th percentile value for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p25?: number;
    /**
     * The 50th percentile value for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p50?: number;
    /**
     * The 75th percentile value for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p75?: number;
    /**
     * The 90th percentile value for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p90?: number;
    /**
     * The 95th percentile value for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p95?: number;
    /**
     * The 99th percentile value for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly p99?: number;
}

/** Interface representing a PercentileSourceTarget. */
export declare interface PercentileSourceTarget {
    /**
     * Retrieves the metrics determined by the given filter for the given account, source and target
     * region. This url is only for PBS and Replication Latency data
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param sourceRegion Source region from which data is written. Cosmos DB region, with spaces between
     *                     words and each word capitalized.
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between
     *                     words and each word capitalized.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, sourceRegion: string, targetRegion: string, filter: string, options?: PercentileSourceTargetListMetricsOptionalParams): PagedAsyncIterableIterator<PercentileMetric>;
}

/** Optional parameters. */
export declare interface PercentileSourceTargetListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type PercentileSourceTargetListMetricsResponse = PercentileMetricListResult;

/** Interface representing a PercentileTarget. */
export declare interface PercentileTarget {
    /**
     * Retrieves the metrics determined by the given filter for the given account target region. This url
     * is only for PBS and Replication Latency data
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param targetRegion Target region to which data is written. Cosmos DB region, with spaces between
     *                     words and each word capitalized.
     * @param filter An OData filter expression that describes a subset of metrics to return. The
     *               parameters that can be filtered are name.value (name of the metric, can have an or of multiple
     *               names), startTime, endTime, and timeGrain. The supported operator is eq.
     * @param options The options parameters.
     */
    listMetrics(resourceGroupName: string, accountName: string, targetRegion: string, filter: string, options?: PercentileTargetListMetricsOptionalParams): PagedAsyncIterableIterator<PercentileMetric>;
}

/** Optional parameters. */
export declare interface PercentileTargetListMetricsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listMetrics operation. */
export declare type PercentileTargetListMetricsResponse = PercentileMetricListResult;

/** The object representing periodic mode backup policy. */
export declare interface PeriodicModeBackupPolicy extends BackupPolicy {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Periodic";
    /** Configuration values for periodic mode backup */
    periodicModeProperties?: PeriodicModeProperties;
}

/** Configuration values for periodic mode backup */
export declare interface PeriodicModeProperties {
    /** An integer representing the interval in minutes between two backups */
    backupIntervalInMinutes?: number;
    /** An integer representing the time (in hours) that each backup is retained */
    backupRetentionIntervalInHours?: number;
    /** Enum to indicate type of backup residency */
    backupStorageRedundancy?: BackupStorageRedundancy;
}

/** The set of data plane operations permitted through this Role Definition. */
export declare interface Permission {
    /** An array of data actions that are allowed. */
    dataActions?: string[];
    /** An array of data actions that are denied. */
    notDataActions?: string[];
}

/**
 * Defines values for PrimaryAggregationType. \
 * {@link KnownPrimaryAggregationType} can be used interchangeably with PrimaryAggregationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Average** \
 * **Total** \
 * **Minimum** \
 * **Maximum** \
 * **Last**
 */
export declare type PrimaryAggregationType = string;

/** A private endpoint connection */
export declare interface PrivateEndpointConnection extends ProxyResource {
    /** Private endpoint which the connection belongs to. */
    privateEndpoint?: PrivateEndpointProperty;
    /** Connection State of the Private Endpoint Connection. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionStateProperty;
    /** Group id of the private endpoint. */
    groupId?: string;
    /** Provisioning state of the private endpoint. */
    provisioningState?: string;
}

/** A list of private endpoint connections */
export declare interface PrivateEndpointConnectionListResult {
    /** Array of private endpoint connections */
    value?: PrivateEndpointConnection[];
}

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * List all private endpoint connections on a Cosmos DB account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listByDatabaseAccount(resourceGroupName: string, accountName: string, options?: PrivateEndpointConnectionsListByDatabaseAccountOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Approve or reject a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param parameters A private endpoint connection
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>, PrivateEndpointConnectionsCreateOrUpdateResponse>>;
    /**
     * Approve or reject a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param parameters A private endpoint connection
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, parameters: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a private endpoint connection with a given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListByDatabaseAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDatabaseAccount operation. */
export declare type PrivateEndpointConnectionsListByDatabaseAccountResponse = PrivateEndpointConnectionListResult;

/** Private endpoint which the connection belongs to. */
export declare interface PrivateEndpointProperty {
    /** Resource id of the private endpoint. */
    id?: string;
}

/** A private link resource */
export declare interface PrivateLinkResource extends ARMProxyResource {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /**
     * The private link resource required zone names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredZoneNames?: string[];
}

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /** Array of private link resources */
    value?: PrivateLinkResource[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Gets the private link resources that need to be created for a Cosmos DB account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listByDatabaseAccount(resourceGroupName: string, accountName: string, options?: PrivateLinkResourcesListByDatabaseAccountOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
    /**
     * Gets the private link resources that need to be created for a Cosmos DB account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param groupName The name of the private link resource.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, groupName: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListByDatabaseAccountOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDatabaseAccount operation. */
export declare type PrivateLinkResourcesListByDatabaseAccountResponse = PrivateLinkResourceListResult;

/** Connection State of the Private Endpoint Connection. */
export declare interface PrivateLinkServiceConnectionStateProperty {
    /** The private link service connection status. */
    status?: string;
    /** The private link service connection description. */
    description?: string;
    /**
     * Any action that is required beyond basic workflow (approve/ reject/ disconnect)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionsRequired?: string;
}

/** The set of data plane operations permitted through this Role Definition. */
export declare interface Privilege {
    /** An Azure Cosmos DB Mongo DB Resource. */
    resource?: PrivilegeResource;
    /** An array of actions that are allowed. */
    actions?: string[];
}

/** An Azure Cosmos DB Mongo DB Resource. */
export declare interface PrivilegeResource {
    /** The database name the role is applied. */
    db?: string;
    /** The collection name the role is applied. */
    collection?: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare interface ProxyResource extends Resource {
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled** \
 * **SecuredByPerimeter**
 */
export declare type PublicNetworkAccess = string;

/** Resource for a regional service location. */
export declare interface RegionalServiceResource {
    /**
     * The regional service name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The location name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * Describes the status of a service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: ServiceStatus;
}

/** Cosmos DB region to online or offline. */
export declare interface RegionForOnlineOffline {
    /** Cosmos DB region, with spaces between words and each word capitalized. */
    region: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Defines values for ResourceIdentityType. */
export declare type ResourceIdentityType = "SystemAssigned" | "UserAssigned" | "SystemAssigned,UserAssigned" | "None";

/** Parameters to indicate the information about the restore. */
export declare interface ResourceRestoreParameters extends RestoreParametersBase {
}

/** A Azure Cosmos DB restorable database account. */
export declare interface RestorableDatabaseAccountGetResult {
    /**
     * The unique resource identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The location of the resource group to which the resource belongs. */
    location?: string;
    /** The name of the global database account */
    accountName?: string;
    /** The creation time of the restorable database account (ISO-8601 format). */
    creationTime?: Date;
    /** The time at which the restorable database account has been deleted (ISO-8601 format). */
    deletionTime?: Date;
    /** The least recent time at which the database account can be restored to (ISO-8601 format). */
    oldestRestorableTime?: Date;
    /**
     * The API type of the restorable database account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly apiType?: ApiType;
    /**
     * List of regions where the of the database account can be restored from.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restorableLocations?: RestorableLocationResource[];
}

/** Interface representing a RestorableDatabaseAccounts. */
export declare interface RestorableDatabaseAccounts {
    /**
     * Lists all the restorable Azure Cosmos DB database accounts available under the subscription and in a
     * region.  This call requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read'
     * permission.
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param options The options parameters.
     */
    listByLocation(location: string, options?: RestorableDatabaseAccountsListByLocationOptionalParams): PagedAsyncIterableIterator<RestorableDatabaseAccountGetResult>;
    /**
     * Lists all the restorable Azure Cosmos DB database accounts available under the subscription. This
     * call requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read' permission.
     * @param options The options parameters.
     */
    list(options?: RestorableDatabaseAccountsListOptionalParams): PagedAsyncIterableIterator<RestorableDatabaseAccountGetResult>;
    /**
     * Retrieves the properties of an existing Azure Cosmos DB restorable database account.  This call
     * requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/read/*' permission.
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    getByLocation(location: string, instanceId: string, options?: RestorableDatabaseAccountsGetByLocationOptionalParams): Promise<RestorableDatabaseAccountsGetByLocationResponse>;
}

/** Optional parameters. */
export declare interface RestorableDatabaseAccountsGetByLocationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByLocation operation. */
export declare type RestorableDatabaseAccountsGetByLocationResponse = RestorableDatabaseAccountGetResult;

/** Optional parameters. */
export declare interface RestorableDatabaseAccountsListByLocationOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByLocation operation. */
export declare type RestorableDatabaseAccountsListByLocationResponse = RestorableDatabaseAccountsListResult;

/** Optional parameters. */
export declare interface RestorableDatabaseAccountsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type RestorableDatabaseAccountsListResponse = RestorableDatabaseAccountsListResult;

/** The List operation response, that contains the restorable database accounts and their properties. */
export declare interface RestorableDatabaseAccountsListResult {
    /**
     * List of restorable database accounts and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableDatabaseAccountGetResult[];
}

/** An Azure Cosmos DB Gremlin database event */
export declare interface RestorableGremlinDatabaseGetResult {
    /**
     * The unique resource Identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource of an Azure Cosmos DB Gremlin database event */
    resource?: RestorableGremlinDatabasePropertiesResource;
}

/** The resource of an Azure Cosmos DB Gremlin database event */
export declare interface RestorableGremlinDatabasePropertiesResource {
    /**
     * A system generated property. A unique identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rid?: string;
    /**
     * The operation type of this database event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationType?: OperationType;
    /**
     * A state of this database to identify if this database is restorable in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndelete?: string;
    /**
     * The reason why this database can not be restored in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndeleteReason?: string;
    /**
     * The time when this database event happened.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventTimestamp?: string;
    /**
     * The name of this Gremlin database.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerId?: string;
    /**
     * The resource ID of this Gremlin database.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerResourceId?: string;
}

/** Interface representing a RestorableGremlinDatabases. */
export declare interface RestorableGremlinDatabases {
    /**
     * Show the event feed of all mutations done on all the Azure Cosmos DB Gremlin databases under the
     * restorable account. This helps in scenario where database was accidentally deleted to get the
     * deletion time. This API requires
     * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableGremlinDatabasesListOptionalParams): PagedAsyncIterableIterator<RestorableGremlinDatabaseGetResult>;
}

/** Optional parameters. */
export declare interface RestorableGremlinDatabasesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type RestorableGremlinDatabasesListResponse = RestorableGremlinDatabasesListResult;

/** The List operation response, that contains the Gremlin database events and their properties. */
export declare interface RestorableGremlinDatabasesListResult {
    /**
     * List of Gremlin database events and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableGremlinDatabaseGetResult[];
}

/** An Azure Cosmos DB Gremlin graph event */
export declare interface RestorableGremlinGraphGetResult {
    /**
     * The unique resource Identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource of an Azure Cosmos DB Gremlin graph event */
    resource?: RestorableGremlinGraphPropertiesResource;
}

/** The resource of an Azure Cosmos DB Gremlin graph event */
export declare interface RestorableGremlinGraphPropertiesResource {
    /**
     * A system generated property. A unique identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rid?: string;
    /**
     * The operation type of this graph event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationType?: OperationType;
    /**
     * A state of this graph to identify if this graph is restorable in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndelete?: string;
    /**
     * The reason why this graph can not be restored in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndeleteReason?: string;
    /**
     * The time when this graph event happened.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventTimestamp?: string;
    /**
     * The name of this Gremlin graph.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerId?: string;
    /**
     * The resource ID of this Gremlin graph.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerResourceId?: string;
}

/** Interface representing a RestorableGremlinGraphs. */
export declare interface RestorableGremlinGraphs {
    /**
     * Show the event feed of all mutations done on all the Azure Cosmos DB Gremlin graphs under a specific
     * database. This helps in scenario where container was accidentally deleted. This API requires
     * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableGremlinGraphsListOptionalParams): PagedAsyncIterableIterator<RestorableGremlinGraphGetResult>;
}

/** Optional parameters. */
export declare interface RestorableGremlinGraphsListOptionalParams extends coreClient.OperationOptions {
    /** Restorable Gremlin graphs event feed start time. */
    startTime?: string;
    /** Restorable Gremlin graphs event feed end time. */
    endTime?: string;
    /** The resource ID of the Gremlin database. */
    restorableGremlinDatabaseRid?: string;
}

/** Contains response data for the list operation. */
export declare type RestorableGremlinGraphsListResponse = RestorableGremlinGraphsListResult;

/** The List operation response, that contains the Gremlin graph events and their properties. */
export declare interface RestorableGremlinGraphsListResult {
    /**
     * List of Gremlin graph events and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableGremlinGraphGetResult[];
}

/** Interface representing a RestorableGremlinResources. */
export declare interface RestorableGremlinResources {
    /**
     * Return a list of gremlin database and graphs combo that exist on the account at the given timestamp
     * and location. This helps in scenarios to validate what resources exist at given timestamp and
     * location. This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read'
     * permission.
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableGremlinResourcesListOptionalParams): PagedAsyncIterableIterator<RestorableGremlinResourcesGetResult>;
}

/** Specific Databases to restore. */
export declare interface RestorableGremlinResourcesGetResult {
    /**
     * The unique resource identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The name of the gremlin database available for restore. */
    databaseName?: string;
    /** The names of the graphs available for restore. */
    graphNames?: string[];
}

/** Optional parameters. */
export declare interface RestorableGremlinResourcesListOptionalParams extends coreClient.OperationOptions {
    /** The location where the restorable resources are located. */
    restoreLocation?: string;
    /** The timestamp when the restorable resources existed. */
    restoreTimestampInUtc?: string;
}

/** Contains response data for the list operation. */
export declare type RestorableGremlinResourcesListResponse = RestorableGremlinResourcesListResult;

/** The List operation response, that contains the restorable Gremlin resources. */
export declare interface RestorableGremlinResourcesListResult {
    /**
     * List of restorable Gremlin resources, including the gremlin database and graph names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableGremlinResourcesGetResult[];
}

/** Properties of the regional restorable account. */
export declare interface RestorableLocationResource {
    /**
     * The location of the regional restorable account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locationName?: string;
    /**
     * The instance id of the regional restorable account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly regionalDatabaseAccountInstanceId?: string;
    /**
     * The creation time of the regional restorable database account (ISO-8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
    /**
     * The time at which the regional restorable database account has been deleted (ISO-8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deletionTime?: Date;
}

/** An Azure Cosmos DB MongoDB collection event */
export declare interface RestorableMongodbCollectionGetResult {
    /**
     * The unique resource Identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource of an Azure Cosmos DB MongoDB collection event */
    resource?: RestorableMongodbCollectionPropertiesResource;
}

/** The resource of an Azure Cosmos DB MongoDB collection event */
export declare interface RestorableMongodbCollectionPropertiesResource {
    /**
     * A system generated property. A unique identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rid?: string;
    /**
     * The operation type of this collection event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationType?: OperationType;
    /**
     * A state of this collection to identify if this container is restorable in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndelete?: string;
    /**
     * The reason why this collection can not be restored in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndeleteReason?: string;
    /**
     * The time when this collection event happened.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventTimestamp?: string;
    /**
     * The name of this MongoDB collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerId?: string;
    /**
     * The resource ID of this MongoDB collection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerResourceId?: string;
}

/** Interface representing a RestorableMongodbCollections. */
export declare interface RestorableMongodbCollections {
    /**
     * Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB collections under a
     * specific database.  This helps in scenario where container was accidentally deleted.  This API
     * requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableMongodbCollectionsListOptionalParams): PagedAsyncIterableIterator<RestorableMongodbCollectionGetResult>;
}

/** Optional parameters. */
export declare interface RestorableMongodbCollectionsListOptionalParams extends coreClient.OperationOptions {
    /** Restorable MongoDB collections event feed start time. */
    startTime?: string;
    /** Restorable MongoDB collections event feed end time. */
    endTime?: string;
    /** The resource ID of the MongoDB database. */
    restorableMongodbDatabaseRid?: string;
}

/** Contains response data for the list operation. */
export declare type RestorableMongodbCollectionsListResponse = RestorableMongodbCollectionsListResult;

/** The List operation response, that contains the MongoDB collection events and their properties. */
export declare interface RestorableMongodbCollectionsListResult {
    /**
     * List of MongoDB collection events and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableMongodbCollectionGetResult[];
}

/** An Azure Cosmos DB MongoDB database event */
export declare interface RestorableMongodbDatabaseGetResult {
    /**
     * The unique resource Identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource of an Azure Cosmos DB MongoDB database event */
    resource?: RestorableMongodbDatabasePropertiesResource;
}

/** The resource of an Azure Cosmos DB MongoDB database event */
export declare interface RestorableMongodbDatabasePropertiesResource {
    /**
     * A system generated property. A unique identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rid?: string;
    /**
     * The operation type of this database event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationType?: OperationType;
    /**
     * A state of this database to identify if this database is restorable in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndelete?: string;
    /**
     * The reason why this database can not be restored in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndeleteReason?: string;
    /**
     * The time when this database event happened.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventTimestamp?: string;
    /**
     * The name of this MongoDB database.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerId?: string;
    /**
     * The resource ID of this MongoDB database.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerResourceId?: string;
}

/** Interface representing a RestorableMongodbDatabases. */
export declare interface RestorableMongodbDatabases {
    /**
     * Show the event feed of all mutations done on all the Azure Cosmos DB MongoDB databases under the
     * restorable account.  This helps in scenario where database was accidentally deleted to get the
     * deletion time.  This API requires
     * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableMongodbDatabasesListOptionalParams): PagedAsyncIterableIterator<RestorableMongodbDatabaseGetResult>;
}

/** Optional parameters. */
export declare interface RestorableMongodbDatabasesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type RestorableMongodbDatabasesListResponse = RestorableMongodbDatabasesListResult;

/** The List operation response, that contains the MongoDB database events and their properties. */
export declare interface RestorableMongodbDatabasesListResult {
    /**
     * List of MongoDB database events and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableMongodbDatabaseGetResult[];
}

/** Interface representing a RestorableMongodbResources. */
export declare interface RestorableMongodbResources {
    /**
     * Return a list of database and collection combo that exist on the account at the given timestamp and
     * location. This helps in scenarios to validate what resources exist at given timestamp and location.
     * This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableMongodbResourcesListOptionalParams): PagedAsyncIterableIterator<RestorableMongodbResourcesGetResult>;
}

/** Specific Databases to restore. */
export declare interface RestorableMongodbResourcesGetResult {
    /**
     * The unique resource identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The name of the database available for restore. */
    databaseName?: string;
    /** The names of the collections available for restore. */
    collectionNames?: string[];
}

/** Optional parameters. */
export declare interface RestorableMongodbResourcesListOptionalParams extends coreClient.OperationOptions {
    /** The location where the restorable resources are located. */
    restoreLocation?: string;
    /** The timestamp when the restorable resources existed. */
    restoreTimestampInUtc?: string;
}

/** Contains response data for the list operation. */
export declare type RestorableMongodbResourcesListResponse = RestorableMongodbResourcesListResult;

/** The List operation response, that contains the restorable MongoDB resources. */
export declare interface RestorableMongodbResourcesListResult {
    /**
     * List of restorable MongoDB resources, including the database and collection names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableMongodbResourcesGetResult[];
}

/** An Azure Cosmos DB SQL container event */
export declare interface RestorableSqlContainerGetResult {
    /**
     * The unique resource Identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource of an Azure Cosmos DB SQL container event */
    resource?: RestorableSqlContainerPropertiesResource;
}

/** The resource of an Azure Cosmos DB SQL container event */
export declare interface RestorableSqlContainerPropertiesResource {
    /**
     * A system generated property. A unique identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rid?: string;
    /**
     * The operation type of this container event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationType?: OperationType;
    /**
     * A state of this container to identify if this container is restorable in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndelete?: string;
    /**
     * The reason why this container can not be restored in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndeleteReason?: string;
    /**
     * The when this container event happened.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventTimestamp?: string;
    /**
     * The name of this SQL container.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerId?: string;
    /**
     * The resource ID of this SQL container.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerResourceId?: string;
    /** Cosmos DB SQL container resource object */
    container?: RestorableSqlContainerPropertiesResourceContainer;
}

/** Cosmos DB SQL container resource object */
export declare interface RestorableSqlContainerPropertiesResourceContainer extends SqlContainerResource, ExtendedResourceProperties {
    /**
     * A system generated property that specifies the addressable path of the container resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly self?: string;
}

/** Interface representing a RestorableSqlContainers. */
export declare interface RestorableSqlContainers {
    /**
     * Show the event feed of all mutations done on all the Azure Cosmos DB SQL containers under a specific
     * database.  This helps in scenario where container was accidentally deleted.  This API requires
     * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableSqlContainersListOptionalParams): PagedAsyncIterableIterator<RestorableSqlContainerGetResult>;
}

/** Optional parameters. */
export declare interface RestorableSqlContainersListOptionalParams extends coreClient.OperationOptions {
    /** The resource ID of the SQL database. */
    restorableSqlDatabaseRid?: string;
    /** Restorable Sql containers event feed start time. */
    startTime?: string;
    /** Restorable Sql containers event feed end time. */
    endTime?: string;
}

/** Contains response data for the list operation. */
export declare type RestorableSqlContainersListResponse = RestorableSqlContainersListResult;

/** The List operation response, that contains the SQL container events and their properties. */
export declare interface RestorableSqlContainersListResult {
    /**
     * List of SQL container events and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableSqlContainerGetResult[];
}

/** An Azure Cosmos DB SQL database event */
export declare interface RestorableSqlDatabaseGetResult {
    /**
     * The unique resource Identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource of an Azure Cosmos DB SQL database event */
    resource?: RestorableSqlDatabasePropertiesResource;
}

/** The resource of an Azure Cosmos DB SQL database event */
export declare interface RestorableSqlDatabasePropertiesResource {
    /**
     * A system generated property. A unique identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rid?: string;
    /**
     * The operation type of this database event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationType?: OperationType;
    /**
     * A state of this database to identify if this database is restorable in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndelete?: string;
    /**
     * The reason why this database can not be restored in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndeleteReason?: string;
    /**
     * The time when this database event happened.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventTimestamp?: string;
    /**
     * The name of the SQL database.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerId?: string;
    /**
     * The resource ID of the SQL database.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerResourceId?: string;
    /** Cosmos DB SQL database resource object */
    database?: RestorableSqlDatabasePropertiesResourceDatabase;
}

/** Cosmos DB SQL database resource object */
export declare interface RestorableSqlDatabasePropertiesResourceDatabase extends SqlDatabaseResource, ExtendedResourceProperties {
    /**
     * A system generated property that specified the addressable path of the collections resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly colls?: string;
    /**
     * A system generated property that specifies the addressable path of the users resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly users?: string;
    /**
     * A system generated property that specifies the addressable path of the database resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly self?: string;
}

/** Interface representing a RestorableSqlDatabases. */
export declare interface RestorableSqlDatabases {
    /**
     * Show the event feed of all mutations done on all the Azure Cosmos DB SQL databases under the
     * restorable account.  This helps in scenario where database was accidentally deleted to get the
     * deletion time.  This API requires
     * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableSqlDatabasesListOptionalParams): PagedAsyncIterableIterator<RestorableSqlDatabaseGetResult>;
}

/** Optional parameters. */
export declare interface RestorableSqlDatabasesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type RestorableSqlDatabasesListResponse = RestorableSqlDatabasesListResult;

/** The List operation response, that contains the SQL database events and their properties. */
export declare interface RestorableSqlDatabasesListResult {
    /**
     * List of SQL database events and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableSqlDatabaseGetResult[];
}

/** Interface representing a RestorableSqlResources. */
export declare interface RestorableSqlResources {
    /**
     * Return a list of database and container combo that exist on the account at the given timestamp and
     * location. This helps in scenarios to validate what resources exist at given timestamp and location.
     * This API requires 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableSqlResourcesListOptionalParams): PagedAsyncIterableIterator<RestorableSqlResourcesGetResult>;
}

/** Specific Databases to restore. */
export declare interface RestorableSqlResourcesGetResult {
    /**
     * The unique resource identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The name of the database available for restore. */
    databaseName?: string;
    /** The names of the collections available for restore. */
    collectionNames?: string[];
}

/** Optional parameters. */
export declare interface RestorableSqlResourcesListOptionalParams extends coreClient.OperationOptions {
    /** The location where the restorable resources are located. */
    restoreLocation?: string;
    /** The timestamp when the restorable resources existed. */
    restoreTimestampInUtc?: string;
}

/** Contains response data for the list operation. */
export declare type RestorableSqlResourcesListResponse = RestorableSqlResourcesListResult;

/** The List operation response, that contains the restorable SQL resources. */
export declare interface RestorableSqlResourcesListResult {
    /**
     * List of restorable SQL resources, including the database and collection names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableSqlResourcesGetResult[];
}

/** An Azure Cosmos DB Table event */
export declare interface RestorableTableGetResult {
    /**
     * The unique resource Identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource of an Azure Cosmos DB Table event */
    resource?: RestorableTablePropertiesResource;
}

/** The resource of an Azure Cosmos DB Table event */
export declare interface RestorableTablePropertiesResource {
    /**
     * A system generated property. A unique identifier.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly rid?: string;
    /**
     * The operation type of this table event.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationType?: OperationType;
    /**
     * A state of this table to identify if this table is restorable in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndelete?: string;
    /**
     * The reason why this table can not be restored in same account.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly canUndeleteReason?: string;
    /**
     * The time when this table event happened.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly eventTimestamp?: string;
    /**
     * The name of this Table.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerId?: string;
    /**
     * The resource ID of this Table.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ownerResourceId?: string;
}

/** Interface representing a RestorableTableResources. */
export declare interface RestorableTableResources {
    /**
     * Return a list of tables that exist on the account at the given timestamp and location. This helps in
     * scenarios to validate what resources exist at given timestamp and location. This API requires
     * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission.
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableTableResourcesListOptionalParams): PagedAsyncIterableIterator<RestorableTableResourcesGetResult>;
}

/** Specific Databases to restore. */
export declare interface RestorableTableResourcesGetResult {
    /**
     * The unique resource identifier of the ARM resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the Table.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of Azure resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Optional parameters. */
export declare interface RestorableTableResourcesListOptionalParams extends coreClient.OperationOptions {
    /** The location where the restorable resources are located. */
    restoreLocation?: string;
    /** The timestamp when the restorable resources existed. */
    restoreTimestampInUtc?: string;
}

/** Contains response data for the list operation. */
export declare type RestorableTableResourcesListResponse = RestorableTableResourcesListResult;

/** List of restorable table names. */
export declare interface RestorableTableResourcesListResult {
    /**
     * List of restorable table names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableTableResourcesGetResult[];
}

/** Interface representing a RestorableTables. */
export declare interface RestorableTables {
    /**
     * Show the event feed of all mutations done on all the Azure Cosmos DB Tables. This helps in scenario
     * where table was accidentally deleted. This API requires
     * 'Microsoft.DocumentDB/locations/restorableDatabaseAccounts/.../read' permission
     * @param location Cosmos DB region, with spaces between words and each word capitalized.
     * @param instanceId The instanceId GUID of a restorable database account.
     * @param options The options parameters.
     */
    list(location: string, instanceId: string, options?: RestorableTablesListOptionalParams): PagedAsyncIterableIterator<RestorableTableGetResult>;
}

/** Optional parameters. */
export declare interface RestorableTablesListOptionalParams extends coreClient.OperationOptions {
    /** Restorable Tables event feed start time. */
    startTime?: string;
    /** Restorable Tables event feed end time. */
    endTime?: string;
}

/** Contains response data for the list operation. */
export declare type RestorableTablesListResponse = RestorableTablesListResult;

/** The List operation response, that contains the Table events and their properties. */
export declare interface RestorableTablesListResult {
    /**
     * List of Table events and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorableTableGetResult[];
}

/**
 * Defines values for RestoreMode. \
 * {@link KnownRestoreMode} can be used interchangeably with RestoreMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PointInTime**
 */
export declare type RestoreMode = string;

/** Parameters to indicate the information about the restore. */
export declare interface RestoreParameters extends RestoreParametersBase {
    /** Describes the mode of the restore. */
    restoreMode?: RestoreMode;
    /** List of specific databases available for restore. */
    databasesToRestore?: DatabaseRestoreResource[];
    /** List of specific gremlin databases available for restore. */
    gremlinDatabasesToRestore?: GremlinDatabaseRestoreResource[];
    /** List of specific tables available for restore. */
    tablesToRestore?: string[];
}

/** Parameters to indicate the information about the restore. */
export declare interface RestoreParametersBase {
    /** The id of the restorable database account from which the restore has to be initiated. For example: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName} */
    restoreSource?: string;
    /** Time to which the account has to be restored (ISO-8601 format). */
    restoreTimestampInUtc?: Date;
}

/** The set of roles permitted through this Role Definition. */
export declare interface Role {
    /** The database name the role is applied. */
    db?: string;
    /** The role name. */
    role?: string;
}

/** Defines values for RoleDefinitionType. */
export declare type RoleDefinitionType = "BuiltInRole" | "CustomRole";

export declare interface SeedNode {
    /** IP address of this seed node. */
    ipAddress?: string;
}

/**
 * Defines values for ServerVersion. \
 * {@link KnownServerVersion} can be used interchangeably with ServerVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **3.2** \
 * **3.6** \
 * **4.0** \
 * **4.2**
 */
export declare type ServerVersion = string;

/** Interface representing a Service. */
export declare interface Service {
    /**
     * Gets the status of service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, accountName: string, options?: ServiceListOptionalParams): PagedAsyncIterableIterator<ServiceResource>;
    /**
     * Creates a service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param serviceName Cosmos DB service name.
     * @param createUpdateParameters The Service resource parameters.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, accountName: string, serviceName: string, createUpdateParameters: ServiceResourceCreateUpdateParameters, options?: ServiceCreateOptionalParams): Promise<SimplePollerLike<OperationState<ServiceCreateResponse>, ServiceCreateResponse>>;
    /**
     * Creates a service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param serviceName Cosmos DB service name.
     * @param createUpdateParameters The Service resource parameters.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, accountName: string, serviceName: string, createUpdateParameters: ServiceResourceCreateUpdateParameters, options?: ServiceCreateOptionalParams): Promise<ServiceCreateResponse>;
    /**
     * Gets the status of service.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param serviceName Cosmos DB service name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, accountName: string, serviceName: string, options?: ServiceGetOptionalParams): Promise<ServiceGetResponse>;
    /**
     * Deletes service with the given serviceName.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param serviceName Cosmos DB service name.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, accountName: string, serviceName: string, options?: ServiceDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes service with the given serviceName.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param serviceName Cosmos DB service name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, accountName: string, serviceName: string, options?: ServiceDeleteOptionalParams): Promise<void>;
}

/** Defines headers for Service_create operation. */
export declare interface ServiceCreateHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface ServiceCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ServiceCreateResponse = ServiceResource;

/** Defines headers for Service_delete operation. */
export declare interface ServiceDeleteHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface ServiceDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ServiceGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ServiceGetResponse = ServiceResource;

/** Optional parameters. */
export declare interface ServiceListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ServiceListResponse = ServiceResourceListResult;

/** Properties for the database account. */
export declare interface ServiceResource extends ARMProxyResource {
    /** Services response resource. */
    properties?: ServiceResourcePropertiesUnion;
}

/** Parameters for Create or Update Request for ServiceResource */
export declare interface ServiceResourceCreateUpdateParameters {
    /** Instance type for the service. */
    instanceSize?: ServiceSize;
    /** Instance count for the service. */
    instanceCount?: number;
    /** ServiceType for the service. */
    serviceType?: ServiceType;
}

/** The List operation response, that contains the Service Resource and their properties. */
export declare interface ServiceResourceListResult {
    /**
     * List of Service Resource and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ServiceResource[];
}

/** Services response resource. */
export declare interface ServiceResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    serviceType: "DataTransfer" | "SqlDedicatedGateway" | "GraphAPICompute" | "MaterializedViewsBuilder";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * Time of the last state change (ISO-8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
    /** Instance type for the service. */
    instanceSize?: ServiceSize;
    /** Instance count for the service. */
    instanceCount?: number;
    /**
     * Describes the status of a service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: ServiceStatus;
}

export declare type ServiceResourcePropertiesUnion = ServiceResourceProperties | DataTransferServiceResourceProperties | SqlDedicatedGatewayServiceResourceProperties | GraphAPIComputeServiceResourceProperties | MaterializedViewsBuilderServiceResourceProperties;

/**
 * Defines values for ServiceSize. \
 * {@link KnownServiceSize} can be used interchangeably with ServiceSize,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cosmos.D4s** \
 * **Cosmos.D8s** \
 * **Cosmos.D16s**
 */
export declare type ServiceSize = string;

/**
 * Defines values for ServiceStatus. \
 * {@link KnownServiceStatus} can be used interchangeably with ServiceStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Running** \
 * **Updating** \
 * **Deleting** \
 * **Error** \
 * **Stopped**
 */
export declare type ServiceStatus = string;

/**
 * Defines values for ServiceType. \
 * {@link KnownServiceType} can be used interchangeably with ServiceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SqlDedicatedGateway** \
 * **DataTransfer** \
 * **GraphAPICompute** \
 * **MaterializedViewsBuilder**
 */
export declare type ServiceType = string;

export declare interface SpatialSpec {
    /** The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*) */
    path?: string;
    /** List of path's spatial type */
    types?: SpatialType[];
}

/**
 * Defines values for SpatialType. \
 * {@link KnownSpatialType} can be used interchangeably with SpatialType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Point** \
 * **LineString** \
 * **Polygon** \
 * **MultiPolygon**
 */
export declare type SpatialType = string;

/** Parameters to create and update Cosmos DB container. */
export declare interface SqlContainerCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a container */
    resource: SqlContainerResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface SqlContainerGetPropertiesOptions extends OptionsResource {
}

export declare interface SqlContainerGetPropertiesResource extends SqlContainerResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB container. */
export declare interface SqlContainerGetResults extends ARMResourceProperties {
    resource?: SqlContainerGetPropertiesResource;
    options?: SqlContainerGetPropertiesOptions;
}

/** The List operation response, that contains the containers and their properties. */
export declare interface SqlContainerListResult {
    /**
     * List of containers and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlContainerGetResults[];
}

/** Cosmos DB SQL container resource object */
export declare interface SqlContainerResource {
    /** Name of the Cosmos DB SQL container */
    id: string;
    /** The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container */
    indexingPolicy?: IndexingPolicy;
    /** The configuration of the partition key to be used for partitioning data into multiple partitions */
    partitionKey?: ContainerPartitionKey;
    /** Default time to live */
    defaultTtl?: number;
    /** The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. */
    uniqueKeyPolicy?: UniqueKeyPolicy;
    /** The conflict resolution policy for the container. */
    conflictResolutionPolicy?: ConflictResolutionPolicy;
    /** The client encryption policy for the container. */
    clientEncryptionPolicy?: ClientEncryptionPolicy;
    /** Analytical TTL. */
    analyticalStorageTtl?: number;
    /** Parameters to indicate the information about the restore */
    restoreParameters?: ResourceRestoreParameters;
    /** Enum to indicate the mode of resource creation. */
    createMode?: CreateMode;
    /** List of computed properties */
    computedProperties?: ComputedProperty[];
}

/** Parameters to create and update Cosmos DB SQL database. */
export declare interface SqlDatabaseCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a SQL database */
    resource: SqlDatabaseResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface SqlDatabaseGetPropertiesOptions extends OptionsResource {
}

export declare interface SqlDatabaseGetPropertiesResource extends SqlDatabaseResource, ExtendedResourceProperties {
    /** A system generated property that specified the addressable path of the collections resource. */
    colls?: string;
    /** A system generated property that specifies the addressable path of the users resource. */
    users?: string;
}

/** An Azure Cosmos DB SQL database. */
export declare interface SqlDatabaseGetResults extends ARMResourceProperties {
    resource?: SqlDatabaseGetPropertiesResource;
    options?: SqlDatabaseGetPropertiesOptions;
}

/** The List operation response, that contains the SQL databases and their properties. */
export declare interface SqlDatabaseListResult {
    /**
     * List of SQL databases and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlDatabaseGetResults[];
}

/** Cosmos DB SQL database resource object */
export declare interface SqlDatabaseResource {
    /** Name of the Cosmos DB SQL database */
    id: string;
    /** Parameters to indicate the information about the restore */
    restoreParameters?: ResourceRestoreParameters;
    /** Enum to indicate the mode of resource creation. */
    createMode?: CreateMode;
}

/** Resource for a regional service location. */
export declare interface SqlDedicatedGatewayRegionalServiceResource extends RegionalServiceResource {
    /**
     * The regional endpoint for SqlDedicatedGateway.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sqlDedicatedGatewayEndpoint?: string;
}

/** Describes the service response property for SqlDedicatedGateway. */
export declare interface SqlDedicatedGatewayServiceResource {
    /** Properties for SqlDedicatedGatewayServiceResource. */
    properties?: SqlDedicatedGatewayServiceResourceProperties;
}

/** Properties for SqlDedicatedGatewayServiceResource. */
export declare interface SqlDedicatedGatewayServiceResourceProperties extends ServiceResourceProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    serviceType: "SqlDedicatedGateway";
    /** SqlDedicatedGateway endpoint for the service. */
    sqlDedicatedGatewayEndpoint?: string;
    /**
     * An array that contains all of the locations for the service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: SqlDedicatedGatewayRegionalServiceResource[];
}

/** Interface representing a SqlResources. */
export declare interface SqlResources {
    /**
     * Lists the SQL databases under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listSqlDatabases(resourceGroupName: string, accountName: string, options?: SqlResourcesListSqlDatabasesOptionalParams): PagedAsyncIterableIterator<SqlDatabaseGetResults>;
    /**
     * Lists the SQL container under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    listSqlContainers(resourceGroupName: string, accountName: string, databaseName: string, options?: SqlResourcesListSqlContainersOptionalParams): PagedAsyncIterableIterator<SqlContainerGetResults>;
    /**
     * Lists the ClientEncryptionKeys under an existing Azure Cosmos DB SQL database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    listClientEncryptionKeys(resourceGroupName: string, accountName: string, databaseName: string, options?: SqlResourcesListClientEncryptionKeysOptionalParams): PagedAsyncIterableIterator<ClientEncryptionKeyGetResults>;
    /**
     * Lists the SQL storedProcedure under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    listSqlStoredProcedures(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesListSqlStoredProceduresOptionalParams): PagedAsyncIterableIterator<SqlStoredProcedureGetResults>;
    /**
     * Lists the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    listSqlUserDefinedFunctions(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesListSqlUserDefinedFunctionsOptionalParams): PagedAsyncIterableIterator<SqlUserDefinedFunctionGetResults>;
    /**
     * Lists the SQL trigger under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    listSqlTriggers(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesListSqlTriggersOptionalParams): PagedAsyncIterableIterator<SqlTriggerGetResults>;
    /**
     * Retrieves the list of all Azure Cosmos DB SQL Role Definitions.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listSqlRoleDefinitions(resourceGroupName: string, accountName: string, options?: SqlResourcesListSqlRoleDefinitionsOptionalParams): PagedAsyncIterableIterator<SqlRoleDefinitionGetResults>;
    /**
     * Retrieves the list of all Azure Cosmos DB SQL Role Assignments.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listSqlRoleAssignments(resourceGroupName: string, accountName: string, options?: SqlResourcesListSqlRoleAssignmentsOptionalParams): PagedAsyncIterableIterator<SqlRoleAssignmentGetResults>;
    /**
     * Gets the SQL database under an existing Azure Cosmos DB database account with the provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    getSqlDatabase(resourceGroupName: string, accountName: string, databaseName: string, options?: SqlResourcesGetSqlDatabaseOptionalParams): Promise<SqlResourcesGetSqlDatabaseResponse>;
    /**
     * Create or update an Azure Cosmos DB SQL database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlDatabase(resourceGroupName: string, accountName: string, databaseName: string, createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlDatabaseOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesCreateUpdateSqlDatabaseResponse>, SqlResourcesCreateUpdateSqlDatabaseResponse>>;
    /**
     * Create or update an Azure Cosmos DB SQL database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param createUpdateSqlDatabaseParameters The parameters to provide for the current SQL database.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlDatabaseAndWait(resourceGroupName: string, accountName: string, databaseName: string, createUpdateSqlDatabaseParameters: SqlDatabaseCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlDatabaseOptionalParams): Promise<SqlResourcesCreateUpdateSqlDatabaseResponse>;
    /**
     * Deletes an existing Azure Cosmos DB SQL database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginDeleteSqlDatabase(resourceGroupName: string, accountName: string, databaseName: string, options?: SqlResourcesDeleteSqlDatabaseOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesDeleteSqlDatabaseResponse>, SqlResourcesDeleteSqlDatabaseResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB SQL database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginDeleteSqlDatabaseAndWait(resourceGroupName: string, accountName: string, databaseName: string, options?: SqlResourcesDeleteSqlDatabaseOptionalParams): Promise<SqlResourcesDeleteSqlDatabaseResponse>;
    /**
     * Gets the RUs per second of the SQL database under an existing Azure Cosmos DB database account with
     * the provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    getSqlDatabaseThroughput(resourceGroupName: string, accountName: string, databaseName: string, options?: SqlResourcesGetSqlDatabaseThroughputOptionalParams): Promise<SqlResourcesGetSqlDatabaseThroughputResponse>;
    /**
     * Update RUs per second of an Azure Cosmos DB SQL database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
     *                                   SQL database.
     * @param options The options parameters.
     */
    beginUpdateSqlDatabaseThroughput(resourceGroupName: string, accountName: string, databaseName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: SqlResourcesUpdateSqlDatabaseThroughputOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesUpdateSqlDatabaseThroughputResponse>, SqlResourcesUpdateSqlDatabaseThroughputResponse>>;
    /**
     * Update RUs per second of an Azure Cosmos DB SQL database
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
     *                                   SQL database.
     * @param options The options parameters.
     */
    beginUpdateSqlDatabaseThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: SqlResourcesUpdateSqlDatabaseThroughputOptionalParams): Promise<SqlResourcesUpdateSqlDatabaseThroughputResponse>;
    /**
     * Migrate an Azure Cosmos DB SQL database from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateSqlDatabaseToAutoscale(resourceGroupName: string, accountName: string, databaseName: string, options?: SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesMigrateSqlDatabaseToAutoscaleResponse>, SqlResourcesMigrateSqlDatabaseToAutoscaleResponse>>;
    /**
     * Migrate an Azure Cosmos DB SQL database from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateSqlDatabaseToAutoscaleAndWait(resourceGroupName: string, accountName: string, databaseName: string, options?: SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams): Promise<SqlResourcesMigrateSqlDatabaseToAutoscaleResponse>;
    /**
     * Migrate an Azure Cosmos DB SQL database from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateSqlDatabaseToManualThroughput(resourceGroupName: string, accountName: string, databaseName: string, options?: SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesMigrateSqlDatabaseToManualThroughputResponse>, SqlResourcesMigrateSqlDatabaseToManualThroughputResponse>>;
    /**
     * Migrate an Azure Cosmos DB SQL database from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param options The options parameters.
     */
    beginMigrateSqlDatabaseToManualThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, options?: SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams): Promise<SqlResourcesMigrateSqlDatabaseToManualThroughputResponse>;
    /**
     * Gets the SQL container under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    getSqlContainer(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesGetSqlContainerOptionalParams): Promise<SqlResourcesGetSqlContainerResponse>;
    /**
     * Create or update an Azure Cosmos DB SQL container
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlContainer(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlContainerOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesCreateUpdateSqlContainerResponse>, SqlResourcesCreateUpdateSqlContainerResponse>>;
    /**
     * Create or update an Azure Cosmos DB SQL container
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param createUpdateSqlContainerParameters The parameters to provide for the current SQL container.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlContainerAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, createUpdateSqlContainerParameters: SqlContainerCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlContainerOptionalParams): Promise<SqlResourcesCreateUpdateSqlContainerResponse>;
    /**
     * Deletes an existing Azure Cosmos DB SQL container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    beginDeleteSqlContainer(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesDeleteSqlContainerOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesDeleteSqlContainerResponse>, SqlResourcesDeleteSqlContainerResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB SQL container.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    beginDeleteSqlContainerAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesDeleteSqlContainerOptionalParams): Promise<SqlResourcesDeleteSqlContainerResponse>;
    /**
     * Gets the RUs per second of the SQL container under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    getSqlContainerThroughput(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesGetSqlContainerThroughputOptionalParams): Promise<SqlResourcesGetSqlContainerThroughputResponse>;
    /**
     * Update RUs per second of an Azure Cosmos DB SQL container
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
     *                                   SQL container.
     * @param options The options parameters.
     */
    beginUpdateSqlContainerThroughput(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: SqlResourcesUpdateSqlContainerThroughputOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesUpdateSqlContainerThroughputResponse>, SqlResourcesUpdateSqlContainerThroughputResponse>>;
    /**
     * Update RUs per second of an Azure Cosmos DB SQL container
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
     *                                   SQL container.
     * @param options The options parameters.
     */
    beginUpdateSqlContainerThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: SqlResourcesUpdateSqlContainerThroughputOptionalParams): Promise<SqlResourcesUpdateSqlContainerThroughputResponse>;
    /**
     * Migrate an Azure Cosmos DB SQL container from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    beginMigrateSqlContainerToAutoscale(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesMigrateSqlContainerToAutoscaleResponse>, SqlResourcesMigrateSqlContainerToAutoscaleResponse>>;
    /**
     * Migrate an Azure Cosmos DB SQL container from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    beginMigrateSqlContainerToAutoscaleAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams): Promise<SqlResourcesMigrateSqlContainerToAutoscaleResponse>;
    /**
     * Migrate an Azure Cosmos DB SQL container from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    beginMigrateSqlContainerToManualThroughput(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesMigrateSqlContainerToManualThroughputResponse>, SqlResourcesMigrateSqlContainerToManualThroughputResponse>>;
    /**
     * Migrate an Azure Cosmos DB SQL container from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param options The options parameters.
     */
    beginMigrateSqlContainerToManualThroughputAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, options?: SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams): Promise<SqlResourcesMigrateSqlContainerToManualThroughputResponse>;
    /**
     * Gets the ClientEncryptionKey under an existing Azure Cosmos DB SQL database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param clientEncryptionKeyName Cosmos DB ClientEncryptionKey name.
     * @param options The options parameters.
     */
    getClientEncryptionKey(resourceGroupName: string, accountName: string, databaseName: string, clientEncryptionKeyName: string, options?: SqlResourcesGetClientEncryptionKeyOptionalParams): Promise<SqlResourcesGetClientEncryptionKeyResponse>;
    /**
     * Create or update a ClientEncryptionKey. This API is meant to be invoked via tools such as the Azure
     * Powershell (instead of directly).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param clientEncryptionKeyName Cosmos DB ClientEncryptionKey name.
     * @param createUpdateClientEncryptionKeyParameters The parameters to provide for the client encryption
     *                                                  key.
     * @param options The options parameters.
     */
    beginCreateUpdateClientEncryptionKey(resourceGroupName: string, accountName: string, databaseName: string, clientEncryptionKeyName: string, createUpdateClientEncryptionKeyParameters: ClientEncryptionKeyCreateUpdateParameters, options?: SqlResourcesCreateUpdateClientEncryptionKeyOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesCreateUpdateClientEncryptionKeyResponse>, SqlResourcesCreateUpdateClientEncryptionKeyResponse>>;
    /**
     * Create or update a ClientEncryptionKey. This API is meant to be invoked via tools such as the Azure
     * Powershell (instead of directly).
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param clientEncryptionKeyName Cosmos DB ClientEncryptionKey name.
     * @param createUpdateClientEncryptionKeyParameters The parameters to provide for the client encryption
     *                                                  key.
     * @param options The options parameters.
     */
    beginCreateUpdateClientEncryptionKeyAndWait(resourceGroupName: string, accountName: string, databaseName: string, clientEncryptionKeyName: string, createUpdateClientEncryptionKeyParameters: ClientEncryptionKeyCreateUpdateParameters, options?: SqlResourcesCreateUpdateClientEncryptionKeyOptionalParams): Promise<SqlResourcesCreateUpdateClientEncryptionKeyResponse>;
    /**
     * Gets the SQL storedProcedure under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param storedProcedureName Cosmos DB storedProcedure name.
     * @param options The options parameters.
     */
    getSqlStoredProcedure(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, storedProcedureName: string, options?: SqlResourcesGetSqlStoredProcedureOptionalParams): Promise<SqlResourcesGetSqlStoredProcedureResponse>;
    /**
     * Create or update an Azure Cosmos DB SQL storedProcedure
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param storedProcedureName Cosmos DB storedProcedure name.
     * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL
     *                                                 storedProcedure.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlStoredProcedure(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, storedProcedureName: string, createUpdateSqlStoredProcedureParameters: SqlStoredProcedureCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesCreateUpdateSqlStoredProcedureResponse>, SqlResourcesCreateUpdateSqlStoredProcedureResponse>>;
    /**
     * Create or update an Azure Cosmos DB SQL storedProcedure
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param storedProcedureName Cosmos DB storedProcedure name.
     * @param createUpdateSqlStoredProcedureParameters The parameters to provide for the current SQL
     *                                                 storedProcedure.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlStoredProcedureAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, storedProcedureName: string, createUpdateSqlStoredProcedureParameters: SqlStoredProcedureCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams): Promise<SqlResourcesCreateUpdateSqlStoredProcedureResponse>;
    /**
     * Deletes an existing Azure Cosmos DB SQL storedProcedure.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param storedProcedureName Cosmos DB storedProcedure name.
     * @param options The options parameters.
     */
    beginDeleteSqlStoredProcedure(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, storedProcedureName: string, options?: SqlResourcesDeleteSqlStoredProcedureOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesDeleteSqlStoredProcedureResponse>, SqlResourcesDeleteSqlStoredProcedureResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB SQL storedProcedure.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param storedProcedureName Cosmos DB storedProcedure name.
     * @param options The options parameters.
     */
    beginDeleteSqlStoredProcedureAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, storedProcedureName: string, options?: SqlResourcesDeleteSqlStoredProcedureOptionalParams): Promise<SqlResourcesDeleteSqlStoredProcedureResponse>;
    /**
     * Gets the SQL userDefinedFunction under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
     * @param options The options parameters.
     */
    getSqlUserDefinedFunction(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, userDefinedFunctionName: string, options?: SqlResourcesGetSqlUserDefinedFunctionOptionalParams): Promise<SqlResourcesGetSqlUserDefinedFunctionResponse>;
    /**
     * Create or update an Azure Cosmos DB SQL userDefinedFunction
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
     * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL
     *                                                     userDefinedFunction.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlUserDefinedFunction(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, userDefinedFunctionName: string, createUpdateSqlUserDefinedFunctionParameters: SqlUserDefinedFunctionCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>, SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>>;
    /**
     * Create or update an Azure Cosmos DB SQL userDefinedFunction
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
     * @param createUpdateSqlUserDefinedFunctionParameters The parameters to provide for the current SQL
     *                                                     userDefinedFunction.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlUserDefinedFunctionAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, userDefinedFunctionName: string, createUpdateSqlUserDefinedFunctionParameters: SqlUserDefinedFunctionCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams): Promise<SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse>;
    /**
     * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
     * @param options The options parameters.
     */
    beginDeleteSqlUserDefinedFunction(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, userDefinedFunctionName: string, options?: SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesDeleteSqlUserDefinedFunctionResponse>, SqlResourcesDeleteSqlUserDefinedFunctionResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB SQL userDefinedFunction.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param userDefinedFunctionName Cosmos DB userDefinedFunction name.
     * @param options The options parameters.
     */
    beginDeleteSqlUserDefinedFunctionAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, userDefinedFunctionName: string, options?: SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams): Promise<SqlResourcesDeleteSqlUserDefinedFunctionResponse>;
    /**
     * Gets the SQL trigger under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param triggerName Cosmos DB trigger name.
     * @param options The options parameters.
     */
    getSqlTrigger(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, triggerName: string, options?: SqlResourcesGetSqlTriggerOptionalParams): Promise<SqlResourcesGetSqlTriggerResponse>;
    /**
     * Create or update an Azure Cosmos DB SQL trigger
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param triggerName Cosmos DB trigger name.
     * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlTrigger(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, triggerName: string, createUpdateSqlTriggerParameters: SqlTriggerCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlTriggerOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesCreateUpdateSqlTriggerResponse>, SqlResourcesCreateUpdateSqlTriggerResponse>>;
    /**
     * Create or update an Azure Cosmos DB SQL trigger
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param triggerName Cosmos DB trigger name.
     * @param createUpdateSqlTriggerParameters The parameters to provide for the current SQL trigger.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlTriggerAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, triggerName: string, createUpdateSqlTriggerParameters: SqlTriggerCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlTriggerOptionalParams): Promise<SqlResourcesCreateUpdateSqlTriggerResponse>;
    /**
     * Deletes an existing Azure Cosmos DB SQL trigger.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param triggerName Cosmos DB trigger name.
     * @param options The options parameters.
     */
    beginDeleteSqlTrigger(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, triggerName: string, options?: SqlResourcesDeleteSqlTriggerOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesDeleteSqlTriggerResponse>, SqlResourcesDeleteSqlTriggerResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB SQL trigger.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param triggerName Cosmos DB trigger name.
     * @param options The options parameters.
     */
    beginDeleteSqlTriggerAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, triggerName: string, options?: SqlResourcesDeleteSqlTriggerOptionalParams): Promise<SqlResourcesDeleteSqlTriggerResponse>;
    /**
     * Retrieves the properties of an existing Azure Cosmos DB SQL Role Definition with the given Id.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    getSqlRoleDefinition(roleDefinitionId: string, resourceGroupName: string, accountName: string, options?: SqlResourcesGetSqlRoleDefinitionOptionalParams): Promise<SqlResourcesGetSqlRoleDefinitionResponse>;
    /**
     * Creates or updates an Azure Cosmos DB SQL Role Definition.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param createUpdateSqlRoleDefinitionParameters The properties required to create or update a Role
     *                                                Definition.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlRoleDefinition(roleDefinitionId: string, resourceGroupName: string, accountName: string, createUpdateSqlRoleDefinitionParameters: SqlRoleDefinitionCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesCreateUpdateSqlRoleDefinitionResponse>, SqlResourcesCreateUpdateSqlRoleDefinitionResponse>>;
    /**
     * Creates or updates an Azure Cosmos DB SQL Role Definition.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param createUpdateSqlRoleDefinitionParameters The properties required to create or update a Role
     *                                                Definition.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlRoleDefinitionAndWait(roleDefinitionId: string, resourceGroupName: string, accountName: string, createUpdateSqlRoleDefinitionParameters: SqlRoleDefinitionCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams): Promise<SqlResourcesCreateUpdateSqlRoleDefinitionResponse>;
    /**
     * Deletes an existing Azure Cosmos DB SQL Role Definition.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    beginDeleteSqlRoleDefinition(roleDefinitionId: string, resourceGroupName: string, accountName: string, options?: SqlResourcesDeleteSqlRoleDefinitionOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes an existing Azure Cosmos DB SQL Role Definition.
     * @param roleDefinitionId The GUID for the Role Definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    beginDeleteSqlRoleDefinitionAndWait(roleDefinitionId: string, resourceGroupName: string, accountName: string, options?: SqlResourcesDeleteSqlRoleDefinitionOptionalParams): Promise<void>;
    /**
     * Retrieves the properties of an existing Azure Cosmos DB SQL Role Assignment with the given Id.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    getSqlRoleAssignment(roleAssignmentId: string, resourceGroupName: string, accountName: string, options?: SqlResourcesGetSqlRoleAssignmentOptionalParams): Promise<SqlResourcesGetSqlRoleAssignmentResponse>;
    /**
     * Creates or updates an Azure Cosmos DB SQL Role Assignment.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param createUpdateSqlRoleAssignmentParameters The properties required to create or update a Role
     *                                                Assignment.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlRoleAssignment(roleAssignmentId: string, resourceGroupName: string, accountName: string, createUpdateSqlRoleAssignmentParameters: SqlRoleAssignmentCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesCreateUpdateSqlRoleAssignmentResponse>, SqlResourcesCreateUpdateSqlRoleAssignmentResponse>>;
    /**
     * Creates or updates an Azure Cosmos DB SQL Role Assignment.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param createUpdateSqlRoleAssignmentParameters The properties required to create or update a Role
     *                                                Assignment.
     * @param options The options parameters.
     */
    beginCreateUpdateSqlRoleAssignmentAndWait(roleAssignmentId: string, resourceGroupName: string, accountName: string, createUpdateSqlRoleAssignmentParameters: SqlRoleAssignmentCreateUpdateParameters, options?: SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams): Promise<SqlResourcesCreateUpdateSqlRoleAssignmentResponse>;
    /**
     * Deletes an existing Azure Cosmos DB SQL Role Assignment.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    beginDeleteSqlRoleAssignment(roleAssignmentId: string, resourceGroupName: string, accountName: string, options?: SqlResourcesDeleteSqlRoleAssignmentOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes an existing Azure Cosmos DB SQL Role Assignment.
     * @param roleAssignmentId The GUID for the Role Assignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    beginDeleteSqlRoleAssignmentAndWait(roleAssignmentId: string, resourceGroupName: string, accountName: string, options?: SqlResourcesDeleteSqlRoleAssignmentOptionalParams): Promise<void>;
    /**
     * Retrieves continuous backup information for a container resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param location The name of the continuous backup restore location.
     * @param options The options parameters.
     */
    beginRetrieveContinuousBackupInformation(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, location: ContinuousBackupRestoreLocation, options?: SqlResourcesRetrieveContinuousBackupInformationOptionalParams): Promise<SimplePollerLike<OperationState<SqlResourcesRetrieveContinuousBackupInformationResponse>, SqlResourcesRetrieveContinuousBackupInformationResponse>>;
    /**
     * Retrieves continuous backup information for a container resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param databaseName Cosmos DB database name.
     * @param containerName Cosmos DB container name.
     * @param location The name of the continuous backup restore location.
     * @param options The options parameters.
     */
    beginRetrieveContinuousBackupInformationAndWait(resourceGroupName: string, accountName: string, databaseName: string, containerName: string, location: ContinuousBackupRestoreLocation, options?: SqlResourcesRetrieveContinuousBackupInformationOptionalParams): Promise<SqlResourcesRetrieveContinuousBackupInformationResponse>;
}

/** Defines headers for SqlResources_createUpdateClientEncryptionKey operation. */
export declare interface SqlResourcesCreateUpdateClientEncryptionKeyHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesCreateUpdateClientEncryptionKeyOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateClientEncryptionKey operation. */
export declare type SqlResourcesCreateUpdateClientEncryptionKeyResponse = ClientEncryptionKeyGetResults;

/** Defines headers for SqlResources_createUpdateSqlContainer operation. */
export declare interface SqlResourcesCreateUpdateSqlContainerHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesCreateUpdateSqlContainerOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateSqlContainer operation. */
export declare type SqlResourcesCreateUpdateSqlContainerResponse = SqlContainerGetResults;

/** Defines headers for SqlResources_createUpdateSqlDatabase operation. */
export declare interface SqlResourcesCreateUpdateSqlDatabaseHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesCreateUpdateSqlDatabaseOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateSqlDatabase operation. */
export declare type SqlResourcesCreateUpdateSqlDatabaseResponse = SqlDatabaseGetResults;

/** Optional parameters. */
export declare interface SqlResourcesCreateUpdateSqlRoleAssignmentOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateSqlRoleAssignment operation. */
export declare type SqlResourcesCreateUpdateSqlRoleAssignmentResponse = SqlRoleAssignmentGetResults;

/** Optional parameters. */
export declare interface SqlResourcesCreateUpdateSqlRoleDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateSqlRoleDefinition operation. */
export declare type SqlResourcesCreateUpdateSqlRoleDefinitionResponse = SqlRoleDefinitionGetResults;

/** Defines headers for SqlResources_createUpdateSqlStoredProcedure operation. */
export declare interface SqlResourcesCreateUpdateSqlStoredProcedureHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesCreateUpdateSqlStoredProcedureOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateSqlStoredProcedure operation. */
export declare type SqlResourcesCreateUpdateSqlStoredProcedureResponse = SqlStoredProcedureGetResults;

/** Defines headers for SqlResources_createUpdateSqlTrigger operation. */
export declare interface SqlResourcesCreateUpdateSqlTriggerHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesCreateUpdateSqlTriggerOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateSqlTrigger operation. */
export declare type SqlResourcesCreateUpdateSqlTriggerResponse = SqlTriggerGetResults;

/** Defines headers for SqlResources_createUpdateSqlUserDefinedFunction operation. */
export declare interface SqlResourcesCreateUpdateSqlUserDefinedFunctionHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesCreateUpdateSqlUserDefinedFunctionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateSqlUserDefinedFunction operation. */
export declare type SqlResourcesCreateUpdateSqlUserDefinedFunctionResponse = SqlUserDefinedFunctionGetResults;

/** Defines headers for SqlResources_deleteSqlContainer operation. */
export declare interface SqlResourcesDeleteSqlContainerHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesDeleteSqlContainerOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteSqlContainer operation. */
export declare type SqlResourcesDeleteSqlContainerResponse = SqlResourcesDeleteSqlContainerHeaders;

/** Defines headers for SqlResources_deleteSqlDatabase operation. */
export declare interface SqlResourcesDeleteSqlDatabaseHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesDeleteSqlDatabaseOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteSqlDatabase operation. */
export declare type SqlResourcesDeleteSqlDatabaseResponse = SqlResourcesDeleteSqlDatabaseHeaders;

/** Optional parameters. */
export declare interface SqlResourcesDeleteSqlRoleAssignmentOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesDeleteSqlRoleDefinitionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Defines headers for SqlResources_deleteSqlStoredProcedure operation. */
export declare interface SqlResourcesDeleteSqlStoredProcedureHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesDeleteSqlStoredProcedureOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteSqlStoredProcedure operation. */
export declare type SqlResourcesDeleteSqlStoredProcedureResponse = SqlResourcesDeleteSqlStoredProcedureHeaders;

/** Defines headers for SqlResources_deleteSqlTrigger operation. */
export declare interface SqlResourcesDeleteSqlTriggerHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesDeleteSqlTriggerOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteSqlTrigger operation. */
export declare type SqlResourcesDeleteSqlTriggerResponse = SqlResourcesDeleteSqlTriggerHeaders;

/** Defines headers for SqlResources_deleteSqlUserDefinedFunction operation. */
export declare interface SqlResourcesDeleteSqlUserDefinedFunctionHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesDeleteSqlUserDefinedFunctionOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteSqlUserDefinedFunction operation. */
export declare type SqlResourcesDeleteSqlUserDefinedFunctionResponse = SqlResourcesDeleteSqlUserDefinedFunctionHeaders;

/** Optional parameters. */
export declare interface SqlResourcesGetClientEncryptionKeyOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getClientEncryptionKey operation. */
export declare type SqlResourcesGetClientEncryptionKeyResponse = ClientEncryptionKeyGetResults;

/** Optional parameters. */
export declare interface SqlResourcesGetSqlContainerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSqlContainer operation. */
export declare type SqlResourcesGetSqlContainerResponse = SqlContainerGetResults;

/** Optional parameters. */
export declare interface SqlResourcesGetSqlContainerThroughputOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSqlContainerThroughput operation. */
export declare type SqlResourcesGetSqlContainerThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface SqlResourcesGetSqlDatabaseOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSqlDatabase operation. */
export declare type SqlResourcesGetSqlDatabaseResponse = SqlDatabaseGetResults;

/** Optional parameters. */
export declare interface SqlResourcesGetSqlDatabaseThroughputOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSqlDatabaseThroughput operation. */
export declare type SqlResourcesGetSqlDatabaseThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface SqlResourcesGetSqlRoleAssignmentOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSqlRoleAssignment operation. */
export declare type SqlResourcesGetSqlRoleAssignmentResponse = SqlRoleAssignmentGetResults;

/** Optional parameters. */
export declare interface SqlResourcesGetSqlRoleDefinitionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSqlRoleDefinition operation. */
export declare type SqlResourcesGetSqlRoleDefinitionResponse = SqlRoleDefinitionGetResults;

/** Optional parameters. */
export declare interface SqlResourcesGetSqlStoredProcedureOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSqlStoredProcedure operation. */
export declare type SqlResourcesGetSqlStoredProcedureResponse = SqlStoredProcedureGetResults;

/** Optional parameters. */
export declare interface SqlResourcesGetSqlTriggerOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSqlTrigger operation. */
export declare type SqlResourcesGetSqlTriggerResponse = SqlTriggerGetResults;

/** Optional parameters. */
export declare interface SqlResourcesGetSqlUserDefinedFunctionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getSqlUserDefinedFunction operation. */
export declare type SqlResourcesGetSqlUserDefinedFunctionResponse = SqlUserDefinedFunctionGetResults;

/** Optional parameters. */
export declare interface SqlResourcesListClientEncryptionKeysOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listClientEncryptionKeys operation. */
export declare type SqlResourcesListClientEncryptionKeysResponse = ClientEncryptionKeysListResult;

/** Optional parameters. */
export declare interface SqlResourcesListSqlContainersOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSqlContainers operation. */
export declare type SqlResourcesListSqlContainersResponse = SqlContainerListResult;

/** Optional parameters. */
export declare interface SqlResourcesListSqlDatabasesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSqlDatabases operation. */
export declare type SqlResourcesListSqlDatabasesResponse = SqlDatabaseListResult;

/** Optional parameters. */
export declare interface SqlResourcesListSqlRoleAssignmentsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSqlRoleAssignments operation. */
export declare type SqlResourcesListSqlRoleAssignmentsResponse = SqlRoleAssignmentListResult;

/** Optional parameters. */
export declare interface SqlResourcesListSqlRoleDefinitionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSqlRoleDefinitions operation. */
export declare type SqlResourcesListSqlRoleDefinitionsResponse = SqlRoleDefinitionListResult;

/** Optional parameters. */
export declare interface SqlResourcesListSqlStoredProceduresOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSqlStoredProcedures operation. */
export declare type SqlResourcesListSqlStoredProceduresResponse = SqlStoredProcedureListResult;

/** Optional parameters. */
export declare interface SqlResourcesListSqlTriggersOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSqlTriggers operation. */
export declare type SqlResourcesListSqlTriggersResponse = SqlTriggerListResult;

/** Optional parameters. */
export declare interface SqlResourcesListSqlUserDefinedFunctionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSqlUserDefinedFunctions operation. */
export declare type SqlResourcesListSqlUserDefinedFunctionsResponse = SqlUserDefinedFunctionListResult;

/** Defines headers for SqlResources_migrateSqlContainerToAutoscale operation. */
export declare interface SqlResourcesMigrateSqlContainerToAutoscaleHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesMigrateSqlContainerToAutoscaleOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateSqlContainerToAutoscale operation. */
export declare type SqlResourcesMigrateSqlContainerToAutoscaleResponse = ThroughputSettingsGetResults;

/** Defines headers for SqlResources_migrateSqlContainerToManualThroughput operation. */
export declare interface SqlResourcesMigrateSqlContainerToManualThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesMigrateSqlContainerToManualThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateSqlContainerToManualThroughput operation. */
export declare type SqlResourcesMigrateSqlContainerToManualThroughputResponse = ThroughputSettingsGetResults;

/** Defines headers for SqlResources_migrateSqlDatabaseToAutoscale operation. */
export declare interface SqlResourcesMigrateSqlDatabaseToAutoscaleHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesMigrateSqlDatabaseToAutoscaleOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateSqlDatabaseToAutoscale operation. */
export declare type SqlResourcesMigrateSqlDatabaseToAutoscaleResponse = ThroughputSettingsGetResults;

/** Defines headers for SqlResources_migrateSqlDatabaseToManualThroughput operation. */
export declare interface SqlResourcesMigrateSqlDatabaseToManualThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesMigrateSqlDatabaseToManualThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateSqlDatabaseToManualThroughput operation. */
export declare type SqlResourcesMigrateSqlDatabaseToManualThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface SqlResourcesRetrieveContinuousBackupInformationOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the retrieveContinuousBackupInformation operation. */
export declare type SqlResourcesRetrieveContinuousBackupInformationResponse = BackupInformation;

/** Defines headers for SqlResources_updateSqlContainerThroughput operation. */
export declare interface SqlResourcesUpdateSqlContainerThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesUpdateSqlContainerThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateSqlContainerThroughput operation. */
export declare type SqlResourcesUpdateSqlContainerThroughputResponse = ThroughputSettingsGetResults;

/** Defines headers for SqlResources_updateSqlDatabaseThroughput operation. */
export declare interface SqlResourcesUpdateSqlDatabaseThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface SqlResourcesUpdateSqlDatabaseThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateSqlDatabaseThroughput operation. */
export declare type SqlResourcesUpdateSqlDatabaseThroughputResponse = ThroughputSettingsGetResults;

/** Parameters to create and update an Azure Cosmos DB SQL Role Assignment. */
export declare interface SqlRoleAssignmentCreateUpdateParameters {
    /** The unique identifier for the associated Role Definition. */
    roleDefinitionId?: string;
    /** The data plane resource path for which access is being granted through this Role Assignment. */
    scope?: string;
    /** The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription. */
    principalId?: string;
}

/** An Azure Cosmos DB Role Assignment */
export declare interface SqlRoleAssignmentGetResults extends ARMProxyResource {
    /** The unique identifier for the associated Role Definition. */
    roleDefinitionId?: string;
    /** The data plane resource path for which access is being granted through this Role Assignment. */
    scope?: string;
    /** The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription. */
    principalId?: string;
}

/** The relevant Role Assignments. */
export declare interface SqlRoleAssignmentListResult {
    /**
     * List of Role Assignments and their properties
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlRoleAssignmentGetResults[];
}

/** Parameters to create and update an Azure Cosmos DB SQL Role Definition. */
export declare interface SqlRoleDefinitionCreateUpdateParameters {
    /** A user-friendly name for the Role Definition. Must be unique for the database account. */
    roleName?: string;
    /** Indicates whether the Role Definition was built-in or user created. */
    type?: RoleDefinitionType;
    /** A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist. */
    assignableScopes?: string[];
    /** The set of operations allowed through this Role Definition. */
    permissions?: Permission[];
}

/** An Azure Cosmos DB SQL Role Definition. */
export declare interface SqlRoleDefinitionGetResults extends ARMProxyResource {
    /** A user-friendly name for the Role Definition. Must be unique for the database account. */
    roleName?: string;
    /** Indicates whether the Role Definition was built-in or user created. */
    typePropertiesType?: RoleDefinitionType;
    /** A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist. */
    assignableScopes?: string[];
    /** The set of operations allowed through this Role Definition. */
    permissions?: Permission[];
}

/** The relevant Role Definitions. */
export declare interface SqlRoleDefinitionListResult {
    /**
     * List of Role Definitions and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlRoleDefinitionGetResults[];
}

/** Parameters to create and update Cosmos DB storedProcedure. */
export declare interface SqlStoredProcedureCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a storedProcedure */
    resource: SqlStoredProcedureResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface SqlStoredProcedureGetPropertiesResource extends SqlStoredProcedureResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB storedProcedure. */
export declare interface SqlStoredProcedureGetResults extends ARMResourceProperties {
    resource?: SqlStoredProcedureGetPropertiesResource;
}

/** The List operation response, that contains the storedProcedures and their properties. */
export declare interface SqlStoredProcedureListResult {
    /**
     * List of storedProcedures and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlStoredProcedureGetResults[];
}

/** Cosmos DB SQL storedProcedure resource object */
export declare interface SqlStoredProcedureResource {
    /** Name of the Cosmos DB SQL storedProcedure */
    id: string;
    /** Body of the Stored Procedure */
    body?: string;
}

/** Parameters to create and update Cosmos DB trigger. */
export declare interface SqlTriggerCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a trigger */
    resource: SqlTriggerResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface SqlTriggerGetPropertiesResource extends SqlTriggerResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB trigger. */
export declare interface SqlTriggerGetResults extends ARMResourceProperties {
    resource?: SqlTriggerGetPropertiesResource;
}

/** The List operation response, that contains the triggers and their properties. */
export declare interface SqlTriggerListResult {
    /**
     * List of triggers and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlTriggerGetResults[];
}

/** Cosmos DB SQL trigger resource object */
export declare interface SqlTriggerResource {
    /** Name of the Cosmos DB SQL trigger */
    id: string;
    /** Body of the Trigger */
    body?: string;
    /** Type of the Trigger */
    triggerType?: TriggerType;
    /** The operation the trigger is associated with */
    triggerOperation?: TriggerOperation;
}

/** Parameters to create and update Cosmos DB userDefinedFunction. */
export declare interface SqlUserDefinedFunctionCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a userDefinedFunction */
    resource: SqlUserDefinedFunctionResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface SqlUserDefinedFunctionGetPropertiesResource extends SqlUserDefinedFunctionResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB userDefinedFunction. */
export declare interface SqlUserDefinedFunctionGetResults extends ARMResourceProperties {
    resource?: SqlUserDefinedFunctionGetPropertiesResource;
}

/** The List operation response, that contains the userDefinedFunctions and their properties. */
export declare interface SqlUserDefinedFunctionListResult {
    /**
     * List of userDefinedFunctions and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlUserDefinedFunctionGetResults[];
}

/** Cosmos DB SQL userDefinedFunction resource object */
export declare interface SqlUserDefinedFunctionResource {
    /** Name of the Cosmos DB SQL userDefinedFunction */
    id: string;
    /** Body of the User Defined Function */
    body?: string;
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Uninitialized** \
 * **Initializing** \
 * **InternallyReady** \
 * **Online** \
 * **Deleting**
 */
export declare type Status = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Parameters to create and update Cosmos DB Table. */
export declare interface TableCreateUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a Table */
    resource: TableResource;
    /** A key-value pair of options to be applied for the request. This corresponds to the headers sent with the request. */
    options?: CreateUpdateOptions;
}

export declare interface TableGetPropertiesOptions extends OptionsResource {
}

export declare interface TableGetPropertiesResource extends TableResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB Table. */
export declare interface TableGetResults extends ARMResourceProperties {
    resource?: TableGetPropertiesResource;
    options?: TableGetPropertiesOptions;
}

/** The List operation response, that contains the Table and their properties. */
export declare interface TableListResult {
    /**
     * List of Table and their properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: TableGetResults[];
}

/** Cosmos DB table resource object */
export declare interface TableResource {
    /** Name of the Cosmos DB table */
    id: string;
    /** Parameters to indicate the information about the restore */
    restoreParameters?: ResourceRestoreParameters;
    /** Enum to indicate the mode of resource creation. */
    createMode?: CreateMode;
}

/** Interface representing a TableResources. */
export declare interface TableResources {
    /**
     * Lists the Tables under an existing Azure Cosmos DB database account.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param options The options parameters.
     */
    listTables(resourceGroupName: string, accountName: string, options?: TableResourcesListTablesOptionalParams): PagedAsyncIterableIterator<TableGetResults>;
    /**
     * Gets the Tables under an existing Azure Cosmos DB database account with the provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    getTable(resourceGroupName: string, accountName: string, tableName: string, options?: TableResourcesGetTableOptionalParams): Promise<TableResourcesGetTableResponse>;
    /**
     * Create or update an Azure Cosmos DB Table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param createUpdateTableParameters The parameters to provide for the current Table.
     * @param options The options parameters.
     */
    beginCreateUpdateTable(resourceGroupName: string, accountName: string, tableName: string, createUpdateTableParameters: TableCreateUpdateParameters, options?: TableResourcesCreateUpdateTableOptionalParams): Promise<SimplePollerLike<OperationState<TableResourcesCreateUpdateTableResponse>, TableResourcesCreateUpdateTableResponse>>;
    /**
     * Create or update an Azure Cosmos DB Table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param createUpdateTableParameters The parameters to provide for the current Table.
     * @param options The options parameters.
     */
    beginCreateUpdateTableAndWait(resourceGroupName: string, accountName: string, tableName: string, createUpdateTableParameters: TableCreateUpdateParameters, options?: TableResourcesCreateUpdateTableOptionalParams): Promise<TableResourcesCreateUpdateTableResponse>;
    /**
     * Deletes an existing Azure Cosmos DB Table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginDeleteTable(resourceGroupName: string, accountName: string, tableName: string, options?: TableResourcesDeleteTableOptionalParams): Promise<SimplePollerLike<OperationState<TableResourcesDeleteTableResponse>, TableResourcesDeleteTableResponse>>;
    /**
     * Deletes an existing Azure Cosmos DB Table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginDeleteTableAndWait(resourceGroupName: string, accountName: string, tableName: string, options?: TableResourcesDeleteTableOptionalParams): Promise<TableResourcesDeleteTableResponse>;
    /**
     * Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the
     * provided name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    getTableThroughput(resourceGroupName: string, accountName: string, tableName: string, options?: TableResourcesGetTableThroughputOptionalParams): Promise<TableResourcesGetTableThroughputResponse>;
    /**
     * Update RUs per second of an Azure Cosmos DB Table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
     *                                   Table.
     * @param options The options parameters.
     */
    beginUpdateTableThroughput(resourceGroupName: string, accountName: string, tableName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: TableResourcesUpdateTableThroughputOptionalParams): Promise<SimplePollerLike<OperationState<TableResourcesUpdateTableThroughputResponse>, TableResourcesUpdateTableThroughputResponse>>;
    /**
     * Update RUs per second of an Azure Cosmos DB Table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param updateThroughputParameters The parameters to provide for the RUs per second of the current
     *                                   Table.
     * @param options The options parameters.
     */
    beginUpdateTableThroughputAndWait(resourceGroupName: string, accountName: string, tableName: string, updateThroughputParameters: ThroughputSettingsUpdateParameters, options?: TableResourcesUpdateTableThroughputOptionalParams): Promise<TableResourcesUpdateTableThroughputResponse>;
    /**
     * Migrate an Azure Cosmos DB Table from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateTableToAutoscale(resourceGroupName: string, accountName: string, tableName: string, options?: TableResourcesMigrateTableToAutoscaleOptionalParams): Promise<SimplePollerLike<OperationState<TableResourcesMigrateTableToAutoscaleResponse>, TableResourcesMigrateTableToAutoscaleResponse>>;
    /**
     * Migrate an Azure Cosmos DB Table from manual throughput to autoscale
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateTableToAutoscaleAndWait(resourceGroupName: string, accountName: string, tableName: string, options?: TableResourcesMigrateTableToAutoscaleOptionalParams): Promise<TableResourcesMigrateTableToAutoscaleResponse>;
    /**
     * Migrate an Azure Cosmos DB Table from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateTableToManualThroughput(resourceGroupName: string, accountName: string, tableName: string, options?: TableResourcesMigrateTableToManualThroughputOptionalParams): Promise<SimplePollerLike<OperationState<TableResourcesMigrateTableToManualThroughputResponse>, TableResourcesMigrateTableToManualThroughputResponse>>;
    /**
     * Migrate an Azure Cosmos DB Table from autoscale to manual throughput
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param options The options parameters.
     */
    beginMigrateTableToManualThroughputAndWait(resourceGroupName: string, accountName: string, tableName: string, options?: TableResourcesMigrateTableToManualThroughputOptionalParams): Promise<TableResourcesMigrateTableToManualThroughputResponse>;
    /**
     * Retrieves continuous backup information for a table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param location The name of the continuous backup restore location.
     * @param options The options parameters.
     */
    beginRetrieveContinuousBackupInformation(resourceGroupName: string, accountName: string, tableName: string, location: ContinuousBackupRestoreLocation, options?: TableResourcesRetrieveContinuousBackupInformationOptionalParams): Promise<SimplePollerLike<OperationState<TableResourcesRetrieveContinuousBackupInformationResponse>, TableResourcesRetrieveContinuousBackupInformationResponse>>;
    /**
     * Retrieves continuous backup information for a table.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param accountName Cosmos DB database account name.
     * @param tableName Cosmos DB table name.
     * @param location The name of the continuous backup restore location.
     * @param options The options parameters.
     */
    beginRetrieveContinuousBackupInformationAndWait(resourceGroupName: string, accountName: string, tableName: string, location: ContinuousBackupRestoreLocation, options?: TableResourcesRetrieveContinuousBackupInformationOptionalParams): Promise<TableResourcesRetrieveContinuousBackupInformationResponse>;
}

/** Defines headers for TableResources_createUpdateTable operation. */
export declare interface TableResourcesCreateUpdateTableHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface TableResourcesCreateUpdateTableOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createUpdateTable operation. */
export declare type TableResourcesCreateUpdateTableResponse = TableGetResults;

/** Defines headers for TableResources_deleteTable operation. */
export declare interface TableResourcesDeleteTableHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface TableResourcesDeleteTableOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the deleteTable operation. */
export declare type TableResourcesDeleteTableResponse = TableResourcesDeleteTableHeaders;

/** Optional parameters. */
export declare interface TableResourcesGetTableOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getTable operation. */
export declare type TableResourcesGetTableResponse = TableGetResults;

/** Optional parameters. */
export declare interface TableResourcesGetTableThroughputOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getTableThroughput operation. */
export declare type TableResourcesGetTableThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface TableResourcesListTablesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listTables operation. */
export declare type TableResourcesListTablesResponse = TableListResult;

/** Defines headers for TableResources_migrateTableToAutoscale operation. */
export declare interface TableResourcesMigrateTableToAutoscaleHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface TableResourcesMigrateTableToAutoscaleOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateTableToAutoscale operation. */
export declare type TableResourcesMigrateTableToAutoscaleResponse = ThroughputSettingsGetResults;

/** Defines headers for TableResources_migrateTableToManualThroughput operation. */
export declare interface TableResourcesMigrateTableToManualThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface TableResourcesMigrateTableToManualThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the migrateTableToManualThroughput operation. */
export declare type TableResourcesMigrateTableToManualThroughputResponse = ThroughputSettingsGetResults;

/** Optional parameters. */
export declare interface TableResourcesRetrieveContinuousBackupInformationOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the retrieveContinuousBackupInformation operation. */
export declare type TableResourcesRetrieveContinuousBackupInformationResponse = BackupInformation;

/** Defines headers for TableResources_updateTableThroughput operation. */
export declare interface TableResourcesUpdateTableThroughputHeaders {
    /** URI to poll for completion status. */
    azureAsyncOperation?: string;
    /** URI to poll for completion status. */
    location?: string;
}

/** Optional parameters. */
export declare interface TableResourcesUpdateTableThroughputOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the updateTableThroughput operation. */
export declare type TableResourcesUpdateTableThroughputResponse = ThroughputSettingsGetResults;

/** Cosmos DB resource throughput policy */
export declare interface ThroughputPolicyResource {
    /** Determines whether the ThroughputPolicy is active or not */
    isEnabled?: boolean;
    /** Represents the percentage by which throughput can increase every time throughput policy kicks in. */
    incrementPercent?: number;
}

export declare interface ThroughputSettingsGetPropertiesResource extends ThroughputSettingsResource, ExtendedResourceProperties {
}

/** An Azure Cosmos DB resource throughput. */
export declare interface ThroughputSettingsGetResults extends ARMResourceProperties {
    resource?: ThroughputSettingsGetPropertiesResource;
}

/** Cosmos DB resource throughput object. Either throughput is required or autoscaleSettings is required, but not both. */
export declare interface ThroughputSettingsResource {
    /** Value of the Cosmos DB resource throughput. Either throughput is required or autoscaleSettings is required, but not both. */
    throughput?: number;
    /** Cosmos DB resource for autoscale settings. Either throughput is required or autoscaleSettings is required, but not both. */
    autoscaleSettings?: AutoscaleSettingsResource;
    /**
     * The minimum throughput of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly minimumThroughput?: string;
    /**
     * The throughput replace is pending
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly offerReplacePending?: string;
    /**
     * The offer throughput value to instantly scale up without triggering splits
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly instantMaximumThroughput?: string;
    /**
     * The maximum throughput value or the maximum maxThroughput value (for autoscale) that can be specified
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly softAllowedMaximumThroughput?: string;
}

/** Parameters to update Cosmos DB resource throughput. */
export declare interface ThroughputSettingsUpdateParameters extends ARMResourceProperties {
    /** The standard JSON format of a resource throughput */
    resource: ThroughputSettingsResource;
}

/**
 * Defines values for TriggerOperation. \
 * {@link KnownTriggerOperation} can be used interchangeably with TriggerOperation,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **All** \
 * **Create** \
 * **Update** \
 * **Delete** \
 * **Replace**
 */
export declare type TriggerOperation = string;

/**
 * Defines values for TriggerType. \
 * {@link KnownTriggerType} can be used interchangeably with TriggerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pre** \
 * **Post**
 */
export declare type TriggerType = string;

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sql** \
 * **Table** \
 * **MongoDB** \
 * **Cassandra** \
 * **CassandraConnectorMetadata** \
 * **Gremlin** \
 * **SqlDedicatedGateway** \
 * **GremlinV2** \
 * **Undefined**
 */
export declare type Type = string;

/** The unique key on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service. */
export declare interface UniqueKey {
    /** List of paths must be unique for each document in the Azure Cosmos DB service */
    paths?: string[];
}

/** The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service. */
export declare interface UniqueKeyPolicy {
    /** List of unique keys on that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service. */
    uniqueKeys?: UniqueKey[];
}

/**
 * Defines values for UnitType. \
 * {@link KnownUnitType} can be used interchangeably with UnitType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count** \
 * **Bytes** \
 * **Seconds** \
 * **Percent** \
 * **CountPerSecond** \
 * **BytesPerSecond** \
 * **Milliseconds**
 */
export declare type UnitType = string;

/** The usage data for a usage request. */
export declare interface Usage {
    /**
     * The unit of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: UnitType;
    /**
     * The name information for the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: MetricName;
    /**
     * The quota period used to summarize the usage values.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly quotaPeriod?: string;
    /**
     * Maximum value for this metric
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly limit?: number;
    /**
     * Current value for this metric
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentValue?: number;
}

/** The response to a list usage request. */
export declare interface UsagesResult {
    /**
     * The list of usages for the database. A usage is a point in time metric
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: Usage[];
}

/** Virtual Network ACL Rule object */
export declare interface VirtualNetworkRule {
    /** Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}. */
    id?: string;
    /** Create firewall rule before the virtual network has vnet service endpoint enabled. */
    ignoreMissingVNetServiceEndpoint?: boolean;
}

export { }
