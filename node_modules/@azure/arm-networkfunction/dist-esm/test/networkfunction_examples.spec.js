/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
import { env, Recorder, isPlaybackMode, } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { AzureTrafficCollectorClient } from "../src/azureTrafficCollectorClient";
const replaceableVariables = {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
};
const recorderOptions = {
    envSetupForPlayback: replaceableVariables
};
export const testPollingOptions = {
    updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};
describe("networkfunction test", () => {
    let recorder;
    let subscriptionId;
    let client;
    let location;
    let resourceGroup;
    let azureTrafficCollectorName;
    beforeEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            recorder = new Recorder(this.currentTest);
            yield recorder.start(recorderOptions);
            subscriptionId = env.SUBSCRIPTION_ID || '';
            // This is an example of how the environment variables are used
            const credential = createTestCredential();
            client = new AzureTrafficCollectorClient(credential, subscriptionId, recorder.configureClientOptions({}));
            location = "eastus";
            resourceGroup = "myjstest";
            azureTrafficCollectorName = "atc";
        });
    });
    afterEach(function () {
        return __awaiter(this, void 0, void 0, function* () {
            yield recorder.stop();
        });
    });
    it("azureTrafficCollector create test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.azureTrafficCollectors.beginCreateOrUpdateAndWait(resourceGroup, azureTrafficCollectorName, location, testPollingOptions);
            assert.equal(res.name, azureTrafficCollectorName);
        });
    });
    it("azureTrafficCollector get test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield client.azureTrafficCollectors.get(resourceGroup, azureTrafficCollectorName);
            assert.equal(res.name, azureTrafficCollectorName);
        });
    });
    it("azureTrafficCollector delete test", function () {
        return __awaiter(this, void 0, void 0, function* () {
            const resArray = new Array();
            const res = yield client.azureTrafficCollectors.beginDeleteAndWait(resourceGroup, azureTrafficCollectorName);
        });
    });
});
//# sourceMappingURL=networkfunction_examples.spec.js.map