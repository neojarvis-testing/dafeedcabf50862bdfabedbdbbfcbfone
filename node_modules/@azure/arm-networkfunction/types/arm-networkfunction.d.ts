import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for ApiVersionParameter. \
 * {@link KnownApiVersionParameter} can be used interchangeably with ApiVersionParameter,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **2022-05-01** \
 * **2022-08-01** \
 * **2022-11-01**
 */
export declare type ApiVersionParameter = string;

/** Azure Traffic Collector resource. */
export declare interface AzureTrafficCollector extends TrackedResource {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * Collector Policies for Azure Traffic Collector.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly collectorPolicies?: ResourceReference[];
    /** The virtualHub to which the Azure Traffic Collector belongs. */
    virtualHub?: ResourceReference;
    /**
     * The provisioning state of the application rule collection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

export declare class AzureTrafficCollectorClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the AzureTrafficCollectorClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Azure Subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: AzureTrafficCollectorClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    networkFunction: NetworkFunction;
    azureTrafficCollectorsBySubscription: AzureTrafficCollectorsBySubscription;
    azureTrafficCollectorsByResourceGroup: AzureTrafficCollectorsByResourceGroup;
    azureTrafficCollectors: AzureTrafficCollectors;
    collectorPolicies: CollectorPolicies;
}

/** Optional parameters. */
export declare interface AzureTrafficCollectorClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Response for the ListTrafficCollectors API service call. */
export declare interface AzureTrafficCollectorListResult {
    /** A list of Traffic Collector resources. */
    value?: AzureTrafficCollector[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a AzureTrafficCollectors. */
export declare interface AzureTrafficCollectors {
    /**
     * Gets the specified Azure Traffic Collector in a specified resource group
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, azureTrafficCollectorName: string, options?: AzureTrafficCollectorsGetOptionalParams): Promise<AzureTrafficCollectorsGetResponse>;
    /**
     * Creates or updates a Azure Traffic Collector resource
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param location Resource location.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, azureTrafficCollectorName: string, location: string, options?: AzureTrafficCollectorsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<AzureTrafficCollectorsCreateOrUpdateResponse>, AzureTrafficCollectorsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a Azure Traffic Collector resource
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param location Resource location.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, azureTrafficCollectorName: string, location: string, options?: AzureTrafficCollectorsCreateOrUpdateOptionalParams): Promise<AzureTrafficCollectorsCreateOrUpdateResponse>;
    /**
     * Deletes a specified Azure Traffic Collector resource.
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, azureTrafficCollectorName: string, options?: AzureTrafficCollectorsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a specified Azure Traffic Collector resource.
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, azureTrafficCollectorName: string, options?: AzureTrafficCollectorsDeleteOptionalParams): Promise<void>;
    /**
     * Updates the specified Azure Traffic Collector tags.
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param parameters Parameters supplied to update Azure Traffic Collector tags.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, azureTrafficCollectorName: string, parameters: TagsObject, options?: AzureTrafficCollectorsUpdateTagsOptionalParams): Promise<AzureTrafficCollectorsUpdateTagsResponse>;
}

/** Interface representing a AzureTrafficCollectorsByResourceGroup. */
export declare interface AzureTrafficCollectorsByResourceGroup {
    /**
     * Return list of Azure Traffic Collectors in a Resource Group
     * @param resourceGroupName The name of the resource group.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, options?: AzureTrafficCollectorsByResourceGroupListOptionalParams): PagedAsyncIterableIterator<AzureTrafficCollector>;
}

/** Optional parameters. */
export declare interface AzureTrafficCollectorsByResourceGroupListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AzureTrafficCollectorsByResourceGroupListNextResponse = AzureTrafficCollectorListResult;

/** Optional parameters. */
export declare interface AzureTrafficCollectorsByResourceGroupListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AzureTrafficCollectorsByResourceGroupListResponse = AzureTrafficCollectorListResult;

/** Interface representing a AzureTrafficCollectorsBySubscription. */
export declare interface AzureTrafficCollectorsBySubscription {
    /**
     * Return list of Azure Traffic Collectors in a subscription
     * @param options The options parameters.
     */
    list(options?: AzureTrafficCollectorsBySubscriptionListOptionalParams): PagedAsyncIterableIterator<AzureTrafficCollector>;
}

/** Optional parameters. */
export declare interface AzureTrafficCollectorsBySubscriptionListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AzureTrafficCollectorsBySubscriptionListNextResponse = AzureTrafficCollectorListResult;

/** Optional parameters. */
export declare interface AzureTrafficCollectorsBySubscriptionListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AzureTrafficCollectorsBySubscriptionListResponse = AzureTrafficCollectorListResult;

/** Optional parameters. */
export declare interface AzureTrafficCollectorsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The virtualHub to which the Azure Traffic Collector belongs. */
    virtualHub?: ResourceReference;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type AzureTrafficCollectorsCreateOrUpdateResponse = AzureTrafficCollector;

/** Optional parameters. */
export declare interface AzureTrafficCollectorsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AzureTrafficCollectorsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AzureTrafficCollectorsGetResponse = AzureTrafficCollector;

/** Optional parameters. */
export declare interface AzureTrafficCollectorsUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type AzureTrafficCollectorsUpdateTagsResponse = AzureTrafficCollector;

/** An error response from the service. */
export declare interface CloudError {
    /** An error response from the service. */
    error?: CloudErrorBody;
}

/** An error response from the service. */
export declare interface CloudErrorBody {
    /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */
    code?: string;
    /** A message describing the error, intended to be suitable for display in a user interface. */
    message?: string;
    /** The target of the particular error. For example, the name of the property in error. */
    target?: string;
    /** A list of additional details about the error. */
    details?: CloudErrorBody[];
}

/** Interface representing a CollectorPolicies. */
export declare interface CollectorPolicies {
    /**
     * Return list of Collector policies in a Azure Traffic Collector
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, azureTrafficCollectorName: string, options?: CollectorPoliciesListOptionalParams): PagedAsyncIterableIterator<CollectorPolicy>;
    /**
     * Gets the collector policy in a specified Traffic Collector
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param collectorPolicyName Collector Policy Name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, azureTrafficCollectorName: string, collectorPolicyName: string, options?: CollectorPoliciesGetOptionalParams): Promise<CollectorPoliciesGetResponse>;
    /**
     * Creates or updates a Collector Policy resource
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param collectorPolicyName Collector Policy Name
     * @param location Resource location.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, azureTrafficCollectorName: string, collectorPolicyName: string, location: string, options?: CollectorPoliciesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<CollectorPoliciesCreateOrUpdateResponse>, CollectorPoliciesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a Collector Policy resource
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param collectorPolicyName Collector Policy Name
     * @param location Resource location.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, azureTrafficCollectorName: string, collectorPolicyName: string, location: string, options?: CollectorPoliciesCreateOrUpdateOptionalParams): Promise<CollectorPoliciesCreateOrUpdateResponse>;
    /**
     * Deletes a specified Collector Policy resource.
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param collectorPolicyName Collector Policy Name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, azureTrafficCollectorName: string, collectorPolicyName: string, options?: CollectorPoliciesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a specified Collector Policy resource.
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param collectorPolicyName Collector Policy Name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, azureTrafficCollectorName: string, collectorPolicyName: string, options?: CollectorPoliciesDeleteOptionalParams): Promise<void>;
    /**
     * Updates the specified Collector Policy tags.
     * @param resourceGroupName The name of the resource group.
     * @param azureTrafficCollectorName Azure Traffic Collector name
     * @param collectorPolicyName Collector Policy Name
     * @param parameters Parameters supplied to update Collector Policy tags.
     * @param options The options parameters.
     */
    updateTags(resourceGroupName: string, azureTrafficCollectorName: string, collectorPolicyName: string, parameters: TagsObject, options?: CollectorPoliciesUpdateTagsOptionalParams): Promise<CollectorPoliciesUpdateTagsResponse>;
}

/** Optional parameters. */
export declare interface CollectorPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Ingestion policies. */
    ingestionPolicy?: IngestionPolicyPropertiesFormat;
    /** Emission policies. */
    emissionPolicies?: EmissionPoliciesPropertiesFormat[];
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type CollectorPoliciesCreateOrUpdateResponse = CollectorPolicy;

/** Optional parameters. */
export declare interface CollectorPoliciesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface CollectorPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type CollectorPoliciesGetResponse = CollectorPolicy;

/** Optional parameters. */
export declare interface CollectorPoliciesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type CollectorPoliciesListNextResponse = CollectorPolicyListResult;

/** Optional parameters. */
export declare interface CollectorPoliciesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type CollectorPoliciesListResponse = CollectorPolicyListResult;

/** Optional parameters. */
export declare interface CollectorPoliciesUpdateTagsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the updateTags operation. */
export declare type CollectorPoliciesUpdateTagsResponse = CollectorPolicy;

/** Collector policy resource. */
export declare interface CollectorPolicy extends TrackedResource {
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /** Ingestion policies. */
    ingestionPolicy?: IngestionPolicyPropertiesFormat;
    /** Emission policies. */
    emissionPolicies?: EmissionPoliciesPropertiesFormat[];
    /**
     * The provisioning state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
}

/** Response for the ListCollectorPolicies API service call. */
export declare interface CollectorPolicyListResult {
    /** A list of collection policies. */
    value?: CollectorPolicy[];
    /**
     * The URL to get the next set of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for DestinationType. \
 * {@link KnownDestinationType} can be used interchangeably with DestinationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureMonitor**
 */
export declare type DestinationType = string;

/** Emission policy properties. */
export declare interface EmissionPoliciesPropertiesFormat {
    /** Emission format type. */
    emissionType?: EmissionType;
    /** Emission policy destinations. */
    emissionDestinations?: EmissionPolicyDestination[];
}

/** Emission policy destination properties. */
export declare interface EmissionPolicyDestination {
    /** Emission destination type. */
    destinationType?: DestinationType;
}

/**
 * Defines values for EmissionType. \
 * {@link KnownEmissionType} can be used interchangeably with EmissionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPFIX**
 */
export declare type EmissionType = string;

/**
 * Given a result page from a pageable operation, returns a
 * continuation token that can be used to begin paging from
 * that point later.
 * @param page A result object from calling .byPage() on a paged operation.
 * @returns The continuation token that can be passed into byPage().
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Ingestion Policy properties. */
export declare interface IngestionPolicyPropertiesFormat {
    /** The ingestion type. */
    ingestionType?: IngestionType;
    /** Ingestion Sources. */
    ingestionSources?: IngestionSourcesPropertiesFormat[];
}

/** Ingestion policy properties. */
export declare interface IngestionSourcesPropertiesFormat {
    /** Ingestion source type. */
    sourceType?: SourceType;
    /** Resource ID. */
    resourceId?: string;
}

/**
 * Defines values for IngestionType. \
 * {@link KnownIngestionType} can be used interchangeably with IngestionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IPFIX**
 */
export declare type IngestionType = string;

/** Known values of {@link ApiVersionParameter} that the service accepts. */
export declare enum KnownApiVersionParameter {
    /** TwoThousandTwentyTwo0501 */
    TwoThousandTwentyTwo0501 = "2022-05-01",
    /** TwoThousandTwentyTwo0801 */
    TwoThousandTwentyTwo0801 = "2022-08-01",
    /** TwoThousandTwentyTwo1101 */
    TwoThousandTwentyTwo1101 = "2022-11-01"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    /** User */
    User = "User",
    /** Application */
    Application = "Application",
    /** ManagedIdentity */
    ManagedIdentity = "ManagedIdentity",
    /** Key */
    Key = "Key"
}

/** Known values of {@link DestinationType} that the service accepts. */
export declare enum KnownDestinationType {
    /** AzureMonitor */
    AzureMonitor = "AzureMonitor"
}

/** Known values of {@link EmissionType} that the service accepts. */
export declare enum KnownEmissionType {
    /** Ipfix */
    Ipfix = "IPFIX"
}

/** Known values of {@link IngestionType} that the service accepts. */
export declare enum KnownIngestionType {
    /** Ipfix */
    Ipfix = "IPFIX"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    /** Succeeded */
    Succeeded = "Succeeded",
    /** Updating */
    Updating = "Updating",
    /** Deleting */
    Deleting = "Deleting",
    /** Failed */
    Failed = "Failed"
}

/** Known values of {@link SourceType} that the service accepts. */
export declare enum KnownSourceType {
    /** Resource */
    Resource = "Resource"
}

/** Interface representing a NetworkFunction. */
export declare interface NetworkFunction {
    /**
     * Lists all of the available NetworkFunction Rest API operations.
     * @param options The options parameters.
     */
    listOperations(options?: NetworkFunctionListOperationsOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface NetworkFunctionListOperationsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOperations operation. */
export declare type NetworkFunctionListOperationsResponse = OperationListResult;

/** Azure Traffic Collector REST API operation definition. */
export declare interface Operation {
    /** Operation name: {provider}/{resource}/{operation} */
    name?: string;
    /** Indicates whether the operation is a data action */
    isDataAction?: boolean;
    /** Display metadata associated with the operation. */
    display?: OperationDisplay;
    /** Origin of the operation */
    origin?: string;
}

/** Display metadata associated with the operation. */
export declare interface OperationDisplay {
    /** Service provider: Microsoft NetworkFunction. */
    provider?: string;
    /** Resource on which the operation is performed etc. */
    resource?: string;
    /** Type of operation: get, read, delete, etc. */
    operation?: string;
    /** Description of the operation. */
    description?: string;
}

/** Result of the request to list Azure Traffic Collector operations. It contains a list of operations and a URL link to get the next set of results. */
export declare interface OperationListResult {
    /** List of operations supported by the Azure Traffic Collector resource provider. */
    value?: Operation[];
    /** URL to get the next set of operation list results if there are any. */
    nextLink?: string;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Updating** \
 * **Deleting** \
 * **Failed**
 */
export declare type ProvisioningState = string;

/** An azure resource object */
export declare interface ProxyResource {
    /**
     * Azure resource Id
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Azure resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Azure resource name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
}

/** Resource reference properties. */
export declare interface ResourceReference {
    /**
     * Resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/**
 * Defines values for SourceType. \
 * {@link KnownSourceType} can be used interchangeably with SourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Resource**
 */
export declare type SourceType = string;

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
}

/** Tags object for patch operations. */
export declare interface TagsObject {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Common resource representation. */
export declare interface TrackedResource {
    /**
     * Resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * Resource name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * Resource type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** Resource location. */
    location: string;
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: TrackedResourceSystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface TrackedResourceSystemData extends SystemData {
}

export { }
