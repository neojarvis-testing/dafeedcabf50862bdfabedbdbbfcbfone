/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SiteRecoveryManagementClient, } from "@azure/arm-recoveryservices-siterecovery";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Operation to perform a test failover of the replication protected item.
 *
 * @summary Operation to perform a test failover of the replication protected item.
 * x-ms-original-file: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2023-08-01/examples/ReplicationProtectedItems_TestFailover.json
 */
function executeTestFailover() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["RECOVERYSERVICESSITERECOVERY_SUBSCRIPTION_ID"] ||
            "c183865e-6077-46f2-a3b1-deb0f4f4650a";
        const resourceName = "vault1";
        const resourceGroupName = process.env["RECOVERYSERVICESSITERECOVERY_RESOURCE_GROUP"] ||
            "resourceGroupPS1";
        const fabricName = "cloud1";
        const protectionContainerName = "cloud_6d224fc6-f326-5d35-96de-fbf51efb3179";
        const replicatedProtectedItemName = "f8491e4f-817a-40dd-a90c-af773978c75b";
        const testfailoverInput = {
            properties: {
                failoverDirection: "PrimaryToRecovery",
                networkId: "/subscriptions/c183865e-6077-46f2-a3b1-deb0f4f4650a/resourceGroups/siterecoveryProd1/providers/Microsoft.Network/virtualNetworks/vnetavrai",
                networkType: "VmNetworkAsInput",
                providerSpecificDetails: { instanceType: "HyperVReplicaAzure" },
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new SiteRecoveryManagementClient(credential, subscriptionId);
        const result = yield client.replicationProtectedItems.beginTestFailoverAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, testfailoverInput);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        executeTestFailover();
    });
}
main().catch(console.error);
//# sourceMappingURL=replicationProtectedItemsTestFailoverSample.js.map