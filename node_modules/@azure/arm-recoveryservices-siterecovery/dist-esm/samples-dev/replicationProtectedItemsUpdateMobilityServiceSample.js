/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SiteRecoveryManagementClient, } from "@azure/arm-recoveryservices-siterecovery";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
 *
 * @summary The operation to update(push update) the installed mobility service software on a replication protected item to the latest available version.
 * x-ms-original-file: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2023-08-01/examples/ReplicationProtectedItems_UpdateMobilityService.json
 */
function updateTheMobilityServiceOnAProtectedItem() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["RECOVERYSERVICESSITERECOVERY_SUBSCRIPTION_ID"] ||
            "b364ed8d-4279-4bf8-8fd1-56f8fa0ae05c";
        const resourceName = "WCUSVault";
        const resourceGroupName = process.env["RECOVERYSERVICESSITERECOVERY_RESOURCE_GROUP"] ||
            "wcusValidations";
        const fabricName = "WIN-JKKJ31QI8U2";
        const protectionContainerName = "cloud_c6780228-83bd-4f3e-a70e-cb46b7da33a0";
        const replicatedProtectedItemName = "79dd20ab-2b40-11e7-9791-0050568f387e";
        const updateMobilityServiceRequest = {
            properties: { runAsAccountId: "2" },
        };
        const credential = new DefaultAzureCredential();
        const client = new SiteRecoveryManagementClient(credential, subscriptionId);
        const result = yield client.replicationProtectedItems.beginUpdateMobilityServiceAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, updateMobilityServiceRequest);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        updateTheMobilityServiceOnAProtectedItem();
    });
}
main().catch(console.error);
//# sourceMappingURL=replicationProtectedItemsUpdateMobilityServiceSample.js.map