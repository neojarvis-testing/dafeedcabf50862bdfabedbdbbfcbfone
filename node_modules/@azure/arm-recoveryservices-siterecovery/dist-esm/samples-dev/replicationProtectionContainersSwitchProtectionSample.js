/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __awaiter } from "tslib";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { SiteRecoveryManagementClient, } from "@azure/arm-recoveryservices-siterecovery";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";
dotenv.config();
/**
 * This sample demonstrates how to Operation to switch protection from one container to another or one replication provider to another.
 *
 * @summary Operation to switch protection from one container to another or one replication provider to another.
 * x-ms-original-file: specification/recoveryservicessiterecovery/resource-manager/Microsoft.RecoveryServices/stable/2023-08-01/examples/ReplicationProtectionContainers_SwitchProtection.json
 */
function switchesProtectionFromOneContainerToAnotherOrOneReplicationProviderToAnother() {
    return __awaiter(this, void 0, void 0, function* () {
        const subscriptionId = process.env["RECOVERYSERVICESSITERECOVERY_SUBSCRIPTION_ID"] ||
            "42195872-7e70-4f8a-837f-84b28ecbb78b";
        const resourceName = "priyanponeboxvault";
        const resourceGroupName = process.env["RECOVERYSERVICESSITERECOVERY_RESOURCE_GROUP"] || "priyanprg";
        const fabricName = "CentralUSCanSite";
        const protectionContainerName = "CentralUSCancloud";
        const switchInput = {
            properties: {
                providerSpecificDetails: { instanceType: "A2A" },
                replicationProtectedItemName: "a2aSwapOsVm",
            },
        };
        const credential = new DefaultAzureCredential();
        const client = new SiteRecoveryManagementClient(credential, subscriptionId);
        const result = yield client.replicationProtectionContainers.beginSwitchProtectionAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, switchInput);
        console.log(result);
    });
}
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        switchesProtectionFromOneContainerToAnotherOrOneReplicationProviderToAnother();
    });
}
main().catch(console.error);
//# sourceMappingURL=replicationProtectionContainersSwitchProtectionSample.js.map