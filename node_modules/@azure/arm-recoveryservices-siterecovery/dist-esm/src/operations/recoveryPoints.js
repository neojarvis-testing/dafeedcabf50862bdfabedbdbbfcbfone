/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing RecoveryPoints operations. */
export class RecoveryPointsImpl {
    /**
     * Initialize a new instance of the class RecoveryPoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the available recovery points for a replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item name.
     * @param options The options parameters.
     */
    listByReplicationProtectedItems(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        const iter = this.listByReplicationProtectedItemsPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationProtectedItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options, settings);
            },
        };
    }
    listByReplicationProtectedItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options, settings) {
        return __asyncGenerator(this, arguments, function* listByReplicationProtectedItemsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listByReplicationProtectedItems(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listByReplicationProtectedItemsNext(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listByReplicationProtectedItemsPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return __asyncGenerator(this, arguments, function* listByReplicationProtectedItemsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByReplicationProtectedItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the available recovery points for a replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item name.
     * @param options The options parameters.
     */
    _listByReplicationProtectedItems(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName,
            options,
        }, listByReplicationProtectedItemsOperationSpec);
    }
    /**
     * Get the details of specified recovery point.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item name.
     * @param recoveryPointName The recovery point name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, recoveryPointName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName,
            recoveryPointName,
            options,
        }, getOperationSpec);
    }
    /**
     * ListByReplicationProtectedItemsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReplicationProtectedItems method.
     * @param options The options parameters.
     */
    _listByReplicationProtectedItemsNext(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName,
            nextLink,
            options,
        }, listByReplicationProtectedItemsNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByReplicationProtectedItemsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/recoveryPoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RecoveryPointCollection,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.resourceName,
        Parameters.fabricName,
        Parameters.protectionContainerName,
        Parameters.replicatedProtectedItemName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/recoveryPoints/{recoveryPointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RecoveryPoint,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.resourceName,
        Parameters.fabricName,
        Parameters.protectionContainerName,
        Parameters.replicatedProtectedItemName,
        Parameters.recoveryPointName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const listByReplicationProtectedItemsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RecoveryPointCollection,
        },
    },
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId,
        Parameters.nextLink,
        Parameters.resourceName,
        Parameters.fabricName,
        Parameters.protectionContainerName,
        Parameters.replicatedProtectedItemName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
//# sourceMappingURL=recoveryPoints.js.map