import { ReplicationEligibilityResultsOperations } from "../operationsInterfaces";
import { SiteRecoveryManagementClient } from "../siteRecoveryManagementClient";
import { ReplicationEligibilityResultsListOptionalParams, ReplicationEligibilityResultsListResponse, ReplicationEligibilityResultsGetOptionalParams, ReplicationEligibilityResultsGetResponse } from "../models";
/** Class containing ReplicationEligibilityResultsOperations operations. */
export declare class ReplicationEligibilityResultsOperationsImpl implements ReplicationEligibilityResultsOperations {
    private readonly client;
    /**
     * Initialize a new instance of the class ReplicationEligibilityResultsOperations class.
     * @param client Reference to the service client
     */
    constructor(client: SiteRecoveryManagementClient);
    /**
     * Validates whether a given VM can be protected or not in which case returns list of errors.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param virtualMachineName Virtual Machine name.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, virtualMachineName: string, options?: ReplicationEligibilityResultsListOptionalParams): Promise<ReplicationEligibilityResultsListResponse>;
    /**
     * Validates whether a given VM can be protected or not in which case returns list of errors.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param virtualMachineName Virtual Machine name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, virtualMachineName: string, options?: ReplicationEligibilityResultsGetOptionalParams): Promise<ReplicationEligibilityResultsGetResponse>;
}
//# sourceMappingURL=replicationEligibilityResultsOperations.d.ts.map