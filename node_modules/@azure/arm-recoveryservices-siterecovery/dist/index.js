'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var coreLro = require('@azure/core-lro');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespaceDefault(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}
function setContinuationToken(page, continuationToken) {
    var _a;
    if (typeof page !== "object" || page === null || !continuationToken) {
        return;
    }
    const pageInfo = (_a = pageMap.get(page)) !== null && _a !== void 0 ? _a : {};
    pageInfo.continuationToken = continuationToken;
    pageMap.set(page, pageInfo);
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link HealthErrorCustomerResolvability} that the service accepts. */
exports.KnownHealthErrorCustomerResolvability = void 0;
(function (KnownHealthErrorCustomerResolvability) {
    /** Allowed */
    KnownHealthErrorCustomerResolvability["Allowed"] = "Allowed";
    /** NotAllowed */
    KnownHealthErrorCustomerResolvability["NotAllowed"] = "NotAllowed";
})(exports.KnownHealthErrorCustomerResolvability || (exports.KnownHealthErrorCustomerResolvability = {}));
/** Known values of {@link MigrationState} that the service accepts. */
exports.KnownMigrationState = void 0;
(function (KnownMigrationState) {
    /** None */
    KnownMigrationState["None"] = "None";
    /** EnableMigrationInProgress */
    KnownMigrationState["EnableMigrationInProgress"] = "EnableMigrationInProgress";
    /** EnableMigrationFailed */
    KnownMigrationState["EnableMigrationFailed"] = "EnableMigrationFailed";
    /** DisableMigrationInProgress */
    KnownMigrationState["DisableMigrationInProgress"] = "DisableMigrationInProgress";
    /** DisableMigrationFailed */
    KnownMigrationState["DisableMigrationFailed"] = "DisableMigrationFailed";
    /** InitialSeedingInProgress */
    KnownMigrationState["InitialSeedingInProgress"] = "InitialSeedingInProgress";
    /** InitialSeedingFailed */
    KnownMigrationState["InitialSeedingFailed"] = "InitialSeedingFailed";
    /** Replicating */
    KnownMigrationState["Replicating"] = "Replicating";
    /** MigrationInProgress */
    KnownMigrationState["MigrationInProgress"] = "MigrationInProgress";
    /** MigrationSucceeded */
    KnownMigrationState["MigrationSucceeded"] = "MigrationSucceeded";
    /** MigrationFailed */
    KnownMigrationState["MigrationFailed"] = "MigrationFailed";
    /** ResumeInProgress */
    KnownMigrationState["ResumeInProgress"] = "ResumeInProgress";
    /** ResumeInitiated */
    KnownMigrationState["ResumeInitiated"] = "ResumeInitiated";
    /** SuspendingProtection */
    KnownMigrationState["SuspendingProtection"] = "SuspendingProtection";
    /** ProtectionSuspended */
    KnownMigrationState["ProtectionSuspended"] = "ProtectionSuspended";
    /** MigrationCompletedWithInformation */
    KnownMigrationState["MigrationCompletedWithInformation"] = "MigrationCompletedWithInformation";
    /** MigrationPartiallySucceeded */
    KnownMigrationState["MigrationPartiallySucceeded"] = "MigrationPartiallySucceeded";
})(exports.KnownMigrationState || (exports.KnownMigrationState = {}));
/** Known values of {@link TestMigrationState} that the service accepts. */
exports.KnownTestMigrationState = void 0;
(function (KnownTestMigrationState) {
    /** None */
    KnownTestMigrationState["None"] = "None";
    /** TestMigrationInProgress */
    KnownTestMigrationState["TestMigrationInProgress"] = "TestMigrationInProgress";
    /** TestMigrationSucceeded */
    KnownTestMigrationState["TestMigrationSucceeded"] = "TestMigrationSucceeded";
    /** TestMigrationFailed */
    KnownTestMigrationState["TestMigrationFailed"] = "TestMigrationFailed";
    /** TestMigrationCleanupInProgress */
    KnownTestMigrationState["TestMigrationCleanupInProgress"] = "TestMigrationCleanupInProgress";
    /** TestMigrationCompletedWithInformation */
    KnownTestMigrationState["TestMigrationCompletedWithInformation"] = "TestMigrationCompletedWithInformation";
    /** TestMigrationPartiallySucceeded */
    KnownTestMigrationState["TestMigrationPartiallySucceeded"] = "TestMigrationPartiallySucceeded";
})(exports.KnownTestMigrationState || (exports.KnownTestMigrationState = {}));
/** Known values of {@link ProtectionHealth} that the service accepts. */
exports.KnownProtectionHealth = void 0;
(function (KnownProtectionHealth) {
    /** None */
    KnownProtectionHealth["None"] = "None";
    /** Normal */
    KnownProtectionHealth["Normal"] = "Normal";
    /** Warning */
    KnownProtectionHealth["Warning"] = "Warning";
    /** Critical */
    KnownProtectionHealth["Critical"] = "Critical";
})(exports.KnownProtectionHealth || (exports.KnownProtectionHealth = {}));
/** Known values of {@link MigrationItemOperation} that the service accepts. */
exports.KnownMigrationItemOperation = void 0;
(function (KnownMigrationItemOperation) {
    /** DisableMigration */
    KnownMigrationItemOperation["DisableMigration"] = "DisableMigration";
    /** TestMigrate */
    KnownMigrationItemOperation["TestMigrate"] = "TestMigrate";
    /** TestMigrateCleanup */
    KnownMigrationItemOperation["TestMigrateCleanup"] = "TestMigrateCleanup";
    /** Migrate */
    KnownMigrationItemOperation["Migrate"] = "Migrate";
    /** StartResync */
    KnownMigrationItemOperation["StartResync"] = "StartResync";
    /** PauseReplication */
    KnownMigrationItemOperation["PauseReplication"] = "PauseReplication";
    /** ResumeReplication */
    KnownMigrationItemOperation["ResumeReplication"] = "ResumeReplication";
})(exports.KnownMigrationItemOperation || (exports.KnownMigrationItemOperation = {}));
/** Known values of {@link MigrationRecoveryPointType} that the service accepts. */
exports.KnownMigrationRecoveryPointType = void 0;
(function (KnownMigrationRecoveryPointType) {
    /** NotSpecified */
    KnownMigrationRecoveryPointType["NotSpecified"] = "NotSpecified";
    /** ApplicationConsistent */
    KnownMigrationRecoveryPointType["ApplicationConsistent"] = "ApplicationConsistent";
    /** CrashConsistent */
    KnownMigrationRecoveryPointType["CrashConsistent"] = "CrashConsistent";
})(exports.KnownMigrationRecoveryPointType || (exports.KnownMigrationRecoveryPointType = {}));
/** Known values of {@link LicenseType} that the service accepts. */
exports.KnownLicenseType = void 0;
(function (KnownLicenseType) {
    /** NotSpecified */
    KnownLicenseType["NotSpecified"] = "NotSpecified";
    /** NoLicenseType */
    KnownLicenseType["NoLicenseType"] = "NoLicenseType";
    /** WindowsServer */
    KnownLicenseType["WindowsServer"] = "WindowsServer";
})(exports.KnownLicenseType || (exports.KnownLicenseType = {}));
/** Known values of {@link DisableProtectionReason} that the service accepts. */
exports.KnownDisableProtectionReason = void 0;
(function (KnownDisableProtectionReason) {
    /** NotSpecified */
    KnownDisableProtectionReason["NotSpecified"] = "NotSpecified";
    /** MigrationComplete */
    KnownDisableProtectionReason["MigrationComplete"] = "MigrationComplete";
})(exports.KnownDisableProtectionReason || (exports.KnownDisableProtectionReason = {}));
/** Known values of {@link AgentVersionStatus} that the service accepts. */
exports.KnownAgentVersionStatus = void 0;
(function (KnownAgentVersionStatus) {
    /** Supported */
    KnownAgentVersionStatus["Supported"] = "Supported";
    /** NotSupported */
    KnownAgentVersionStatus["NotSupported"] = "NotSupported";
    /** Deprecated */
    KnownAgentVersionStatus["Deprecated"] = "Deprecated";
    /** UpdateRequired */
    KnownAgentVersionStatus["UpdateRequired"] = "UpdateRequired";
    /** SecurityUpdateRequired */
    KnownAgentVersionStatus["SecurityUpdateRequired"] = "SecurityUpdateRequired";
})(exports.KnownAgentVersionStatus || (exports.KnownAgentVersionStatus = {}));
/** Known values of {@link ExportJobOutputSerializationType} that the service accepts. */
exports.KnownExportJobOutputSerializationType = void 0;
(function (KnownExportJobOutputSerializationType) {
    /** Json */
    KnownExportJobOutputSerializationType["Json"] = "Json";
    /** Xml */
    KnownExportJobOutputSerializationType["Xml"] = "Xml";
    /** Excel */
    KnownExportJobOutputSerializationType["Excel"] = "Excel";
})(exports.KnownExportJobOutputSerializationType || (exports.KnownExportJobOutputSerializationType = {}));
/** Known values of {@link RecoveryPlanGroupType} that the service accepts. */
exports.KnownRecoveryPlanGroupType = void 0;
(function (KnownRecoveryPlanGroupType) {
    /** Shutdown */
    KnownRecoveryPlanGroupType["Shutdown"] = "Shutdown";
    /** Boot */
    KnownRecoveryPlanGroupType["Boot"] = "Boot";
    /** Failover */
    KnownRecoveryPlanGroupType["Failover"] = "Failover";
})(exports.KnownRecoveryPlanGroupType || (exports.KnownRecoveryPlanGroupType = {}));
/** Known values of {@link ReplicationProtectedItemOperation} that the service accepts. */
exports.KnownReplicationProtectedItemOperation = void 0;
(function (KnownReplicationProtectedItemOperation) {
    /** ReverseReplicate */
    KnownReplicationProtectedItemOperation["ReverseReplicate"] = "ReverseReplicate";
    /** Commit */
    KnownReplicationProtectedItemOperation["Commit"] = "Commit";
    /** PlannedFailover */
    KnownReplicationProtectedItemOperation["PlannedFailover"] = "PlannedFailover";
    /** UnplannedFailover */
    KnownReplicationProtectedItemOperation["UnplannedFailover"] = "UnplannedFailover";
    /** DisableProtection */
    KnownReplicationProtectedItemOperation["DisableProtection"] = "DisableProtection";
    /** TestFailover */
    KnownReplicationProtectedItemOperation["TestFailover"] = "TestFailover";
    /** TestFailoverCleanup */
    KnownReplicationProtectedItemOperation["TestFailoverCleanup"] = "TestFailoverCleanup";
    /** Failback */
    KnownReplicationProtectedItemOperation["Failback"] = "Failback";
    /** FinalizeFailback */
    KnownReplicationProtectedItemOperation["FinalizeFailback"] = "FinalizeFailback";
    /** CancelFailover */
    KnownReplicationProtectedItemOperation["CancelFailover"] = "CancelFailover";
    /** ChangePit */
    KnownReplicationProtectedItemOperation["ChangePit"] = "ChangePit";
    /** RepairReplication */
    KnownReplicationProtectedItemOperation["RepairReplication"] = "RepairReplication";
    /** SwitchProtection */
    KnownReplicationProtectedItemOperation["SwitchProtection"] = "SwitchProtection";
    /** CompleteMigration */
    KnownReplicationProtectedItemOperation["CompleteMigration"] = "CompleteMigration";
})(exports.KnownReplicationProtectedItemOperation || (exports.KnownReplicationProtectedItemOperation = {}));
/** Known values of {@link PossibleOperationsDirections} that the service accepts. */
exports.KnownPossibleOperationsDirections = void 0;
(function (KnownPossibleOperationsDirections) {
    /** PrimaryToRecovery */
    KnownPossibleOperationsDirections["PrimaryToRecovery"] = "PrimaryToRecovery";
    /** RecoveryToPrimary */
    KnownPossibleOperationsDirections["RecoveryToPrimary"] = "RecoveryToPrimary";
})(exports.KnownPossibleOperationsDirections || (exports.KnownPossibleOperationsDirections = {}));
/** Known values of {@link FailoverDeploymentModel} that the service accepts. */
exports.KnownFailoverDeploymentModel = void 0;
(function (KnownFailoverDeploymentModel) {
    /** NotApplicable */
    KnownFailoverDeploymentModel["NotApplicable"] = "NotApplicable";
    /** Classic */
    KnownFailoverDeploymentModel["Classic"] = "Classic";
    /** ResourceManager */
    KnownFailoverDeploymentModel["ResourceManager"] = "ResourceManager";
})(exports.KnownFailoverDeploymentModel || (exports.KnownFailoverDeploymentModel = {}));
/** Known values of {@link SourceSiteOperations} that the service accepts. */
exports.KnownSourceSiteOperations = void 0;
(function (KnownSourceSiteOperations) {
    /** Required */
    KnownSourceSiteOperations["Required"] = "Required";
    /** NotRequired */
    KnownSourceSiteOperations["NotRequired"] = "NotRequired";
})(exports.KnownSourceSiteOperations || (exports.KnownSourceSiteOperations = {}));
/** Known values of {@link HealthErrorCategory} that the service accepts. */
exports.KnownHealthErrorCategory = void 0;
(function (KnownHealthErrorCategory) {
    /** None */
    KnownHealthErrorCategory["None"] = "None";
    /** Replication */
    KnownHealthErrorCategory["Replication"] = "Replication";
    /** TestFailover */
    KnownHealthErrorCategory["TestFailover"] = "TestFailover";
    /** Configuration */
    KnownHealthErrorCategory["Configuration"] = "Configuration";
    /** FabricInfrastructure */
    KnownHealthErrorCategory["FabricInfrastructure"] = "FabricInfrastructure";
    /** VersionExpiry */
    KnownHealthErrorCategory["VersionExpiry"] = "VersionExpiry";
    /** AgentAutoUpdateInfra */
    KnownHealthErrorCategory["AgentAutoUpdateInfra"] = "AgentAutoUpdateInfra";
    /** AgentAutoUpdateArtifactDeleted */
    KnownHealthErrorCategory["AgentAutoUpdateArtifactDeleted"] = "AgentAutoUpdateArtifactDeleted";
    /** AgentAutoUpdateRunAsAccount */
    KnownHealthErrorCategory["AgentAutoUpdateRunAsAccount"] = "AgentAutoUpdateRunAsAccount";
    /** AgentAutoUpdateRunAsAccountExpiry */
    KnownHealthErrorCategory["AgentAutoUpdateRunAsAccountExpiry"] = "AgentAutoUpdateRunAsAccountExpiry";
    /** AgentAutoUpdateRunAsAccountExpired */
    KnownHealthErrorCategory["AgentAutoUpdateRunAsAccountExpired"] = "AgentAutoUpdateRunAsAccountExpired";
})(exports.KnownHealthErrorCategory || (exports.KnownHealthErrorCategory = {}));
/** Known values of {@link Severity} that the service accepts. */
exports.KnownSeverity = void 0;
(function (KnownSeverity) {
    /** None */
    KnownSeverity["None"] = "NONE";
    /** Warning */
    KnownSeverity["Warning"] = "Warning";
    /** Error */
    KnownSeverity["Error"] = "Error";
    /** Info */
    KnownSeverity["Info"] = "Info";
})(exports.KnownSeverity || (exports.KnownSeverity = {}));
/** Known values of {@link AgentAutoUpdateStatus} that the service accepts. */
exports.KnownAgentAutoUpdateStatus = void 0;
(function (KnownAgentAutoUpdateStatus) {
    /** Disabled */
    KnownAgentAutoUpdateStatus["Disabled"] = "Disabled";
    /** Enabled */
    KnownAgentAutoUpdateStatus["Enabled"] = "Enabled";
})(exports.KnownAgentAutoUpdateStatus || (exports.KnownAgentAutoUpdateStatus = {}));
/** Known values of {@link AutomationAccountAuthenticationType} that the service accepts. */
exports.KnownAutomationAccountAuthenticationType = void 0;
(function (KnownAutomationAccountAuthenticationType) {
    /** RunAsAccount */
    KnownAutomationAccountAuthenticationType["RunAsAccount"] = "RunAsAccount";
    /** SystemAssignedIdentity */
    KnownAutomationAccountAuthenticationType["SystemAssignedIdentity"] = "SystemAssignedIdentity";
})(exports.KnownAutomationAccountAuthenticationType || (exports.KnownAutomationAccountAuthenticationType = {}));
/** Known values of {@link A2ARecoveryAvailabilityType} that the service accepts. */
exports.KnownA2ARecoveryAvailabilityType = void 0;
(function (KnownA2ARecoveryAvailabilityType) {
    /** Single */
    KnownA2ARecoveryAvailabilityType["Single"] = "Single";
    /** AvailabilitySet */
    KnownA2ARecoveryAvailabilityType["AvailabilitySet"] = "AvailabilitySet";
    /** AvailabilityZone */
    KnownA2ARecoveryAvailabilityType["AvailabilityZone"] = "AvailabilityZone";
})(exports.KnownA2ARecoveryAvailabilityType || (exports.KnownA2ARecoveryAvailabilityType = {}));
/** Known values of {@link AutoProtectionOfDataDisk} that the service accepts. */
exports.KnownAutoProtectionOfDataDisk = void 0;
(function (KnownAutoProtectionOfDataDisk) {
    /** Disabled */
    KnownAutoProtectionOfDataDisk["Disabled"] = "Disabled";
    /** Enabled */
    KnownAutoProtectionOfDataDisk["Enabled"] = "Enabled";
})(exports.KnownAutoProtectionOfDataDisk || (exports.KnownAutoProtectionOfDataDisk = {}));
/** Known values of {@link ExtendedLocationType} that the service accepts. */
exports.KnownExtendedLocationType = void 0;
(function (KnownExtendedLocationType) {
    /** EdgeZone */
    KnownExtendedLocationType["EdgeZone"] = "EdgeZone";
})(exports.KnownExtendedLocationType || (exports.KnownExtendedLocationType = {}));
/** Known values of {@link SetMultiVmSyncStatus} that the service accepts. */
exports.KnownSetMultiVmSyncStatus = void 0;
(function (KnownSetMultiVmSyncStatus) {
    /** Enable */
    KnownSetMultiVmSyncStatus["Enable"] = "Enable";
    /** Disable */
    KnownSetMultiVmSyncStatus["Disable"] = "Disable";
})(exports.KnownSetMultiVmSyncStatus || (exports.KnownSetMultiVmSyncStatus = {}));
/** Known values of {@link RecoveryPointSyncType} that the service accepts. */
exports.KnownRecoveryPointSyncType = void 0;
(function (KnownRecoveryPointSyncType) {
    /** MultiVmSyncRecoveryPoint */
    KnownRecoveryPointSyncType["MultiVmSyncRecoveryPoint"] = "MultiVmSyncRecoveryPoint";
    /** PerVmRecoveryPoint */
    KnownRecoveryPointSyncType["PerVmRecoveryPoint"] = "PerVmRecoveryPoint";
})(exports.KnownRecoveryPointSyncType || (exports.KnownRecoveryPointSyncType = {}));
/** Known values of {@link MultiVmGroupCreateOption} that the service accepts. */
exports.KnownMultiVmGroupCreateOption = void 0;
(function (KnownMultiVmGroupCreateOption) {
    /** AutoCreated */
    KnownMultiVmGroupCreateOption["AutoCreated"] = "AutoCreated";
    /** UserSpecified */
    KnownMultiVmGroupCreateOption["UserSpecified"] = "UserSpecified";
})(exports.KnownMultiVmGroupCreateOption || (exports.KnownMultiVmGroupCreateOption = {}));
/** Known values of {@link VmEncryptionType} that the service accepts. */
exports.KnownVmEncryptionType = void 0;
(function (KnownVmEncryptionType) {
    /** NotEncrypted */
    KnownVmEncryptionType["NotEncrypted"] = "NotEncrypted";
    /** OnePassEncrypted */
    KnownVmEncryptionType["OnePassEncrypted"] = "OnePassEncrypted";
    /** TwoPassEncrypted */
    KnownVmEncryptionType["TwoPassEncrypted"] = "TwoPassEncrypted";
})(exports.KnownVmEncryptionType || (exports.KnownVmEncryptionType = {}));
/** Known values of {@link ChurnOptionSelected} that the service accepts. */
exports.KnownChurnOptionSelected = void 0;
(function (KnownChurnOptionSelected) {
    /** Normal */
    KnownChurnOptionSelected["Normal"] = "Normal";
    /** High */
    KnownChurnOptionSelected["High"] = "High";
})(exports.KnownChurnOptionSelected || (exports.KnownChurnOptionSelected = {}));
/** Known values of {@link DiskAccountType} that the service accepts. */
exports.KnownDiskAccountType = void 0;
(function (KnownDiskAccountType) {
    /** StandardLRS */
    KnownDiskAccountType["StandardLRS"] = "Standard_LRS";
    /** PremiumLRS */
    KnownDiskAccountType["PremiumLRS"] = "Premium_LRS";
    /** StandardSSDLRS */
    KnownDiskAccountType["StandardSSDLRS"] = "StandardSSD_LRS";
})(exports.KnownDiskAccountType || (exports.KnownDiskAccountType = {}));
/** Known values of {@link SqlServerLicenseType} that the service accepts. */
exports.KnownSqlServerLicenseType = void 0;
(function (KnownSqlServerLicenseType) {
    /** NotSpecified */
    KnownSqlServerLicenseType["NotSpecified"] = "NotSpecified";
    /** NoLicenseType */
    KnownSqlServerLicenseType["NoLicenseType"] = "NoLicenseType";
    /** Payg */
    KnownSqlServerLicenseType["Payg"] = "PAYG";
    /** Ahub */
    KnownSqlServerLicenseType["Ahub"] = "AHUB";
})(exports.KnownSqlServerLicenseType || (exports.KnownSqlServerLicenseType = {}));
/** Known values of {@link PresenceStatus} that the service accepts. */
exports.KnownPresenceStatus = void 0;
(function (KnownPresenceStatus) {
    /** Unknown */
    KnownPresenceStatus["Unknown"] = "Unknown";
    /** Present */
    KnownPresenceStatus["Present"] = "Present";
    /** NotPresent */
    KnownPresenceStatus["NotPresent"] = "NotPresent";
})(exports.KnownPresenceStatus || (exports.KnownPresenceStatus = {}));
/** Known values of {@link RcmComponentStatus} that the service accepts. */
exports.KnownRcmComponentStatus = void 0;
(function (KnownRcmComponentStatus) {
    /** Healthy */
    KnownRcmComponentStatus["Healthy"] = "Healthy";
    /** Warning */
    KnownRcmComponentStatus["Warning"] = "Warning";
    /** Critical */
    KnownRcmComponentStatus["Critical"] = "Critical";
    /** Unknown */
    KnownRcmComponentStatus["Unknown"] = "Unknown";
})(exports.KnownRcmComponentStatus || (exports.KnownRcmComponentStatus = {}));
/** Known values of {@link AgentUpgradeBlockedReason} that the service accepts. */
exports.KnownAgentUpgradeBlockedReason = void 0;
(function (KnownAgentUpgradeBlockedReason) {
    /** AlreadyOnLatestVersion */
    KnownAgentUpgradeBlockedReason["AlreadyOnLatestVersion"] = "AlreadyOnLatestVersion";
    /** RebootRequired */
    KnownAgentUpgradeBlockedReason["RebootRequired"] = "RebootRequired";
    /** AgentNoHeartbeat */
    KnownAgentUpgradeBlockedReason["AgentNoHeartbeat"] = "AgentNoHeartbeat";
    /** RcmProxyNoHeartbeat */
    KnownAgentUpgradeBlockedReason["RcmProxyNoHeartbeat"] = "RcmProxyNoHeartbeat";
    /** ProcessServerNoHeartbeat */
    KnownAgentUpgradeBlockedReason["ProcessServerNoHeartbeat"] = "ProcessServerNoHeartbeat";
    /** IncompatibleApplianceVersion */
    KnownAgentUpgradeBlockedReason["IncompatibleApplianceVersion"] = "IncompatibleApplianceVersion";
    /** NotProtected */
    KnownAgentUpgradeBlockedReason["NotProtected"] = "NotProtected";
    /** UnsupportedProtectionScenario */
    KnownAgentUpgradeBlockedReason["UnsupportedProtectionScenario"] = "UnsupportedProtectionScenario";
    /** DistroIsNotReported */
    KnownAgentUpgradeBlockedReason["DistroIsNotReported"] = "DistroIsNotReported";
    /** DistroNotSupportedForUpgrade */
    KnownAgentUpgradeBlockedReason["DistroNotSupportedForUpgrade"] = "DistroNotSupportedForUpgrade";
    /** MissingUpgradePath */
    KnownAgentUpgradeBlockedReason["MissingUpgradePath"] = "MissingUpgradePath";
    /** InvalidAgentVersion */
    KnownAgentUpgradeBlockedReason["InvalidAgentVersion"] = "InvalidAgentVersion";
    /** InvalidDriverVersion */
    KnownAgentUpgradeBlockedReason["InvalidDriverVersion"] = "InvalidDriverVersion";
    /** Unknown */
    KnownAgentUpgradeBlockedReason["Unknown"] = "Unknown";
})(exports.KnownAgentUpgradeBlockedReason || (exports.KnownAgentUpgradeBlockedReason = {}));
/** Known values of {@link InMageRcmFailbackRecoveryPointType} that the service accepts. */
exports.KnownInMageRcmFailbackRecoveryPointType = void 0;
(function (KnownInMageRcmFailbackRecoveryPointType) {
    /** ApplicationConsistent */
    KnownInMageRcmFailbackRecoveryPointType["ApplicationConsistent"] = "ApplicationConsistent";
    /** CrashConsistent */
    KnownInMageRcmFailbackRecoveryPointType["CrashConsistent"] = "CrashConsistent";
})(exports.KnownInMageRcmFailbackRecoveryPointType || (exports.KnownInMageRcmFailbackRecoveryPointType = {}));
/** Known values of {@link DiskReplicationProgressHealth} that the service accepts. */
exports.KnownDiskReplicationProgressHealth = void 0;
(function (KnownDiskReplicationProgressHealth) {
    /** None */
    KnownDiskReplicationProgressHealth["None"] = "None";
    /** InProgress */
    KnownDiskReplicationProgressHealth["InProgress"] = "InProgress";
    /** SlowProgress */
    KnownDiskReplicationProgressHealth["SlowProgress"] = "SlowProgress";
    /** NoProgress */
    KnownDiskReplicationProgressHealth["NoProgress"] = "NoProgress";
    /** Queued */
    KnownDiskReplicationProgressHealth["Queued"] = "Queued";
})(exports.KnownDiskReplicationProgressHealth || (exports.KnownDiskReplicationProgressHealth = {}));
/** Known values of {@link VmReplicationProgressHealth} that the service accepts. */
exports.KnownVmReplicationProgressHealth = void 0;
(function (KnownVmReplicationProgressHealth) {
    /** None */
    KnownVmReplicationProgressHealth["None"] = "None";
    /** InProgress */
    KnownVmReplicationProgressHealth["InProgress"] = "InProgress";
    /** SlowProgress */
    KnownVmReplicationProgressHealth["SlowProgress"] = "SlowProgress";
    /** NoProgress */
    KnownVmReplicationProgressHealth["NoProgress"] = "NoProgress";
})(exports.KnownVmReplicationProgressHealth || (exports.KnownVmReplicationProgressHealth = {}));
/** Known values of {@link ResyncState} that the service accepts. */
exports.KnownResyncState = void 0;
(function (KnownResyncState) {
    /** None */
    KnownResyncState["None"] = "None";
    /** PreparedForResynchronization */
    KnownResyncState["PreparedForResynchronization"] = "PreparedForResynchronization";
    /** StartedResynchronization */
    KnownResyncState["StartedResynchronization"] = "StartedResynchronization";
})(exports.KnownResyncState || (exports.KnownResyncState = {}));
/** Known values of {@link PlannedFailoverStatus} that the service accepts. */
exports.KnownPlannedFailoverStatus = void 0;
(function (KnownPlannedFailoverStatus) {
    /** Succeeded */
    KnownPlannedFailoverStatus["Succeeded"] = "Succeeded";
    /** Failed */
    KnownPlannedFailoverStatus["Failed"] = "Failed";
    /** Cancelled */
    KnownPlannedFailoverStatus["Cancelled"] = "Cancelled";
    /** Unknown */
    KnownPlannedFailoverStatus["Unknown"] = "Unknown";
})(exports.KnownPlannedFailoverStatus || (exports.KnownPlannedFailoverStatus = {}));
/** Known values of {@link EthernetAddressType} that the service accepts. */
exports.KnownEthernetAddressType = void 0;
(function (KnownEthernetAddressType) {
    /** Dynamic */
    KnownEthernetAddressType["Dynamic"] = "Dynamic";
    /** Static */
    KnownEthernetAddressType["Static"] = "Static";
})(exports.KnownEthernetAddressType || (exports.KnownEthernetAddressType = {}));
/** Known values of {@link MobilityAgentUpgradeState} that the service accepts. */
exports.KnownMobilityAgentUpgradeState = void 0;
(function (KnownMobilityAgentUpgradeState) {
    /** None */
    KnownMobilityAgentUpgradeState["None"] = "None";
    /** Started */
    KnownMobilityAgentUpgradeState["Started"] = "Started";
    /** Completed */
    KnownMobilityAgentUpgradeState["Completed"] = "Completed";
    /** Commit */
    KnownMobilityAgentUpgradeState["Commit"] = "Commit";
})(exports.KnownMobilityAgentUpgradeState || (exports.KnownMobilityAgentUpgradeState = {}));
/** Known values of {@link RecoveryPointType} that the service accepts. */
exports.KnownRecoveryPointType = void 0;
(function (KnownRecoveryPointType) {
    /** LatestTime */
    KnownRecoveryPointType["LatestTime"] = "LatestTime";
    /** LatestTag */
    KnownRecoveryPointType["LatestTag"] = "LatestTag";
    /** Custom */
    KnownRecoveryPointType["Custom"] = "Custom";
})(exports.KnownRecoveryPointType || (exports.KnownRecoveryPointType = {}));
/** Known values of {@link A2ARpRecoveryPointType} that the service accepts. */
exports.KnownA2ARpRecoveryPointType = void 0;
(function (KnownA2ARpRecoveryPointType) {
    /** Latest */
    KnownA2ARpRecoveryPointType["Latest"] = "Latest";
    /** LatestApplicationConsistent */
    KnownA2ARpRecoveryPointType["LatestApplicationConsistent"] = "LatestApplicationConsistent";
    /** LatestCrashConsistent */
    KnownA2ARpRecoveryPointType["LatestCrashConsistent"] = "LatestCrashConsistent";
    /** LatestProcessed */
    KnownA2ARpRecoveryPointType["LatestProcessed"] = "LatestProcessed";
})(exports.KnownA2ARpRecoveryPointType || (exports.KnownA2ARpRecoveryPointType = {}));
/** Known values of {@link MultiVmSyncPointOption} that the service accepts. */
exports.KnownMultiVmSyncPointOption = void 0;
(function (KnownMultiVmSyncPointOption) {
    /** UseMultiVmSyncRecoveryPoint */
    KnownMultiVmSyncPointOption["UseMultiVmSyncRecoveryPoint"] = "UseMultiVmSyncRecoveryPoint";
    /** UsePerVmRecoveryPoint */
    KnownMultiVmSyncPointOption["UsePerVmRecoveryPoint"] = "UsePerVmRecoveryPoint";
})(exports.KnownMultiVmSyncPointOption || (exports.KnownMultiVmSyncPointOption = {}));
/** Known values of {@link RecoveryPlanActionLocation} that the service accepts. */
exports.KnownRecoveryPlanActionLocation = void 0;
(function (KnownRecoveryPlanActionLocation) {
    /** Primary */
    KnownRecoveryPlanActionLocation["Primary"] = "Primary";
    /** Recovery */
    KnownRecoveryPlanActionLocation["Recovery"] = "Recovery";
})(exports.KnownRecoveryPlanActionLocation || (exports.KnownRecoveryPlanActionLocation = {}));
/** Known values of {@link DataSyncStatus} that the service accepts. */
exports.KnownDataSyncStatus = void 0;
(function (KnownDataSyncStatus) {
    /** ForDownTime */
    KnownDataSyncStatus["ForDownTime"] = "ForDownTime";
    /** ForSynchronization */
    KnownDataSyncStatus["ForSynchronization"] = "ForSynchronization";
})(exports.KnownDataSyncStatus || (exports.KnownDataSyncStatus = {}));
/** Known values of {@link AlternateLocationRecoveryOption} that the service accepts. */
exports.KnownAlternateLocationRecoveryOption = void 0;
(function (KnownAlternateLocationRecoveryOption) {
    /** CreateVmIfNotFound */
    KnownAlternateLocationRecoveryOption["CreateVmIfNotFound"] = "CreateVmIfNotFound";
    /** NoAction */
    KnownAlternateLocationRecoveryOption["NoAction"] = "NoAction";
})(exports.KnownAlternateLocationRecoveryOption || (exports.KnownAlternateLocationRecoveryOption = {}));
/** Known values of {@link HyperVReplicaAzureRpRecoveryPointType} that the service accepts. */
exports.KnownHyperVReplicaAzureRpRecoveryPointType = void 0;
(function (KnownHyperVReplicaAzureRpRecoveryPointType) {
    /** Latest */
    KnownHyperVReplicaAzureRpRecoveryPointType["Latest"] = "Latest";
    /** LatestApplicationConsistent */
    KnownHyperVReplicaAzureRpRecoveryPointType["LatestApplicationConsistent"] = "LatestApplicationConsistent";
    /** LatestProcessed */
    KnownHyperVReplicaAzureRpRecoveryPointType["LatestProcessed"] = "LatestProcessed";
})(exports.KnownHyperVReplicaAzureRpRecoveryPointType || (exports.KnownHyperVReplicaAzureRpRecoveryPointType = {}));
/** Known values of {@link InMageV2RpRecoveryPointType} that the service accepts. */
exports.KnownInMageV2RpRecoveryPointType = void 0;
(function (KnownInMageV2RpRecoveryPointType) {
    /** Latest */
    KnownInMageV2RpRecoveryPointType["Latest"] = "Latest";
    /** LatestApplicationConsistent */
    KnownInMageV2RpRecoveryPointType["LatestApplicationConsistent"] = "LatestApplicationConsistent";
    /** LatestCrashConsistent */
    KnownInMageV2RpRecoveryPointType["LatestCrashConsistent"] = "LatestCrashConsistent";
    /** LatestProcessed */
    KnownInMageV2RpRecoveryPointType["LatestProcessed"] = "LatestProcessed";
})(exports.KnownInMageV2RpRecoveryPointType || (exports.KnownInMageV2RpRecoveryPointType = {}));
/** Known values of {@link RpInMageRecoveryPointType} that the service accepts. */
exports.KnownRpInMageRecoveryPointType = void 0;
(function (KnownRpInMageRecoveryPointType) {
    /** LatestTime */
    KnownRpInMageRecoveryPointType["LatestTime"] = "LatestTime";
    /** LatestTag */
    KnownRpInMageRecoveryPointType["LatestTag"] = "LatestTag";
    /** Custom */
    KnownRpInMageRecoveryPointType["Custom"] = "Custom";
})(exports.KnownRpInMageRecoveryPointType || (exports.KnownRpInMageRecoveryPointType = {}));
/** Known values of {@link RecoveryPlanPointType} that the service accepts. */
exports.KnownRecoveryPlanPointType = void 0;
(function (KnownRecoveryPlanPointType) {
    /** Latest */
    KnownRecoveryPlanPointType["Latest"] = "Latest";
    /** LatestApplicationConsistent */
    KnownRecoveryPlanPointType["LatestApplicationConsistent"] = "LatestApplicationConsistent";
    /** LatestCrashConsistent */
    KnownRecoveryPlanPointType["LatestCrashConsistent"] = "LatestCrashConsistent";
    /** LatestProcessed */
    KnownRecoveryPlanPointType["LatestProcessed"] = "LatestProcessed";
})(exports.KnownRecoveryPlanPointType || (exports.KnownRecoveryPlanPointType = {}));
/** Known values of {@link SecurityType} that the service accepts. */
exports.KnownSecurityType = void 0;
(function (KnownSecurityType) {
    /** None */
    KnownSecurityType["None"] = "None";
    /** TrustedLaunch */
    KnownSecurityType["TrustedLaunch"] = "TrustedLaunch";
    /** ConfidentialVM */
    KnownSecurityType["ConfidentialVM"] = "ConfidentialVM";
})(exports.KnownSecurityType || (exports.KnownSecurityType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const OperationsDiscoveryCollection = {
    type: {
        name: "Composite",
        className: "OperationsDiscoveryCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationsDiscovery",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const OperationsDiscovery = {
    type: {
        name: "Composite",
        className: "OperationsDiscovery",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "Display",
                },
            },
            origin: {
                serializedName: "origin",
                type: {
                    name: "String",
                },
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
const Display = {
    type: {
        name: "Composite",
        className: "Display",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String",
                },
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String",
                },
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const AlertCollection = {
    type: {
        name: "Composite",
        className: "AlertCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Alert",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const AlertProperties = {
    type: {
        name: "Composite",
        className: "AlertProperties",
        modelProperties: {
            sendToOwners: {
                serializedName: "sendToOwners",
                type: {
                    name: "String",
                },
            },
            customEmailAddresses: {
                serializedName: "customEmailAddresses",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            locale: {
                serializedName: "locale",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ConfigureAlertRequest = {
    type: {
        name: "Composite",
        className: "ConfigureAlertRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ConfigureAlertRequestProperties",
                },
            },
        },
    },
};
const ConfigureAlertRequestProperties = {
    type: {
        name: "Composite",
        className: "ConfigureAlertRequestProperties",
        modelProperties: {
            sendToOwners: {
                serializedName: "sendToOwners",
                type: {
                    name: "String",
                },
            },
            customEmailAddresses: {
                serializedName: "customEmailAddresses",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            locale: {
                serializedName: "locale",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ApplianceCollection = {
    type: {
        name: "Composite",
        className: "ApplianceCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReplicationAppliance",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ReplicationAppliance = {
    type: {
        name: "Composite",
        className: "ReplicationAppliance",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ReplicationApplianceProperties",
                },
            },
        },
    },
};
const ReplicationApplianceProperties = {
    type: {
        name: "Composite",
        className: "ReplicationApplianceProperties",
        modelProperties: {
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "ApplianceSpecificDetails",
                },
            },
        },
    },
};
const ApplianceSpecificDetails = {
    type: {
        name: "Composite",
        className: "ApplianceSpecificDetails",
        uberParent: "ApplianceSpecificDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ReplicationEligibilityResultsCollection = {
    type: {
        name: "Composite",
        className: "ReplicationEligibilityResultsCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReplicationEligibilityResults",
                        },
                    },
                },
            },
        },
    },
};
const ReplicationEligibilityResults = {
    type: {
        name: "Composite",
        className: "ReplicationEligibilityResults",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ReplicationEligibilityResultsProperties",
                },
            },
        },
    },
};
const ReplicationEligibilityResultsProperties = {
    type: {
        name: "Composite",
        className: "ReplicationEligibilityResultsProperties",
        modelProperties: {
            clientRequestId: {
                serializedName: "clientRequestId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReplicationEligibilityResultsErrorInfo",
                        },
                    },
                },
            },
        },
    },
};
const ReplicationEligibilityResultsErrorInfo = {
    type: {
        name: "Composite",
        className: "ReplicationEligibilityResultsErrorInfo",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String",
                },
            },
            possibleCauses: {
                serializedName: "possibleCauses",
                type: {
                    name: "String",
                },
            },
            recommendedAction: {
                serializedName: "recommendedAction",
                type: {
                    name: "String",
                },
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const EventCollection = {
    type: {
        name: "Composite",
        className: "EventCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Event",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const EventProperties = {
    type: {
        name: "Composite",
        className: "EventProperties",
        modelProperties: {
            eventCode: {
                serializedName: "eventCode",
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            eventType: {
                serializedName: "eventType",
                type: {
                    name: "String",
                },
            },
            affectedObjectFriendlyName: {
                serializedName: "affectedObjectFriendlyName",
                type: {
                    name: "String",
                },
            },
            affectedObjectCorrelationId: {
                serializedName: "affectedObjectCorrelationId",
                type: {
                    name: "String",
                },
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String",
                },
            },
            timeOfOccurrence: {
                serializedName: "timeOfOccurrence",
                type: {
                    name: "DateTime",
                },
            },
            fabricId: {
                serializedName: "fabricId",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "EventProviderSpecificDetails",
                },
            },
            eventSpecificDetails: {
                serializedName: "eventSpecificDetails",
                type: {
                    name: "Composite",
                    className: "EventSpecificDetails",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
        },
    },
};
const EventProviderSpecificDetails = {
    type: {
        name: "Composite",
        className: "EventProviderSpecificDetails",
        uberParent: "EventProviderSpecificDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const EventSpecificDetails = {
    type: {
        name: "Composite",
        className: "EventSpecificDetails",
        uberParent: "EventSpecificDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const HealthError = {
    type: {
        name: "Composite",
        className: "HealthError",
        modelProperties: {
            innerHealthErrors: {
                serializedName: "innerHealthErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InnerHealthError",
                        },
                    },
                },
            },
            errorSource: {
                serializedName: "errorSource",
                type: {
                    name: "String",
                },
            },
            errorType: {
                serializedName: "errorType",
                type: {
                    name: "String",
                },
            },
            errorLevel: {
                serializedName: "errorLevel",
                type: {
                    name: "String",
                },
            },
            errorCategory: {
                serializedName: "errorCategory",
                type: {
                    name: "String",
                },
            },
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "String",
                },
            },
            summaryMessage: {
                serializedName: "summaryMessage",
                type: {
                    name: "String",
                },
            },
            errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String",
                },
            },
            possibleCauses: {
                serializedName: "possibleCauses",
                type: {
                    name: "String",
                },
            },
            recommendedAction: {
                serializedName: "recommendedAction",
                type: {
                    name: "String",
                },
            },
            creationTimeUtc: {
                serializedName: "creationTimeUtc",
                type: {
                    name: "DateTime",
                },
            },
            recoveryProviderErrorMessage: {
                serializedName: "recoveryProviderErrorMessage",
                type: {
                    name: "String",
                },
            },
            entityId: {
                serializedName: "entityId",
                type: {
                    name: "String",
                },
            },
            errorId: {
                serializedName: "errorId",
                type: {
                    name: "String",
                },
            },
            customerResolvability: {
                serializedName: "customerResolvability",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InnerHealthError = {
    type: {
        name: "Composite",
        className: "InnerHealthError",
        modelProperties: {
            errorSource: {
                serializedName: "errorSource",
                type: {
                    name: "String",
                },
            },
            errorType: {
                serializedName: "errorType",
                type: {
                    name: "String",
                },
            },
            errorLevel: {
                serializedName: "errorLevel",
                type: {
                    name: "String",
                },
            },
            errorCategory: {
                serializedName: "errorCategory",
                type: {
                    name: "String",
                },
            },
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "String",
                },
            },
            summaryMessage: {
                serializedName: "summaryMessage",
                type: {
                    name: "String",
                },
            },
            errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String",
                },
            },
            possibleCauses: {
                serializedName: "possibleCauses",
                type: {
                    name: "String",
                },
            },
            recommendedAction: {
                serializedName: "recommendedAction",
                type: {
                    name: "String",
                },
            },
            creationTimeUtc: {
                serializedName: "creationTimeUtc",
                type: {
                    name: "DateTime",
                },
            },
            recoveryProviderErrorMessage: {
                serializedName: "recoveryProviderErrorMessage",
                type: {
                    name: "String",
                },
            },
            entityId: {
                serializedName: "entityId",
                type: {
                    name: "String",
                },
            },
            errorId: {
                serializedName: "errorId",
                type: {
                    name: "String",
                },
            },
            customerResolvability: {
                serializedName: "customerResolvability",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const FabricCollection = {
    type: {
        name: "Composite",
        className: "FabricCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Fabric",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const FabricProperties = {
    type: {
        name: "Composite",
        className: "FabricProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            encryptionDetails: {
                serializedName: "encryptionDetails",
                type: {
                    name: "Composite",
                    className: "EncryptionDetails",
                },
            },
            rolloverEncryptionDetails: {
                serializedName: "rolloverEncryptionDetails",
                type: {
                    name: "Composite",
                    className: "EncryptionDetails",
                },
            },
            internalIdentifier: {
                serializedName: "internalIdentifier",
                type: {
                    name: "String",
                },
            },
            bcdrState: {
                serializedName: "bcdrState",
                type: {
                    name: "String",
                },
            },
            customDetails: {
                serializedName: "customDetails",
                type: {
                    name: "Composite",
                    className: "FabricSpecificDetails",
                },
            },
            healthErrorDetails: {
                serializedName: "healthErrorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            health: {
                serializedName: "health",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const EncryptionDetails = {
    type: {
        name: "Composite",
        className: "EncryptionDetails",
        modelProperties: {
            kekState: {
                serializedName: "kekState",
                type: {
                    name: "String",
                },
            },
            kekCertThumbprint: {
                serializedName: "kekCertThumbprint",
                type: {
                    name: "String",
                },
            },
            kekCertExpiryDate: {
                serializedName: "kekCertExpiryDate",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const FabricSpecificDetails = {
    type: {
        name: "Composite",
        className: "FabricSpecificDetails",
        uberParent: "FabricSpecificDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const FabricCreationInput = {
    type: {
        name: "Composite",
        className: "FabricCreationInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "FabricCreationInputProperties",
                },
            },
        },
    },
};
const FabricCreationInputProperties = {
    type: {
        name: "Composite",
        className: "FabricCreationInputProperties",
        modelProperties: {
            customDetails: {
                serializedName: "customDetails",
                type: {
                    name: "Composite",
                    className: "FabricSpecificCreationInput",
                },
            },
        },
    },
};
const FabricSpecificCreationInput = {
    type: {
        name: "Composite",
        className: "FabricSpecificCreationInput",
        uberParent: "FabricSpecificCreationInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const FailoverProcessServerRequest = {
    type: {
        name: "Composite",
        className: "FailoverProcessServerRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "FailoverProcessServerRequestProperties",
                },
            },
        },
    },
};
const FailoverProcessServerRequestProperties = {
    type: {
        name: "Composite",
        className: "FailoverProcessServerRequestProperties",
        modelProperties: {
            containerName: {
                serializedName: "containerName",
                type: {
                    name: "String",
                },
            },
            sourceProcessServerId: {
                serializedName: "sourceProcessServerId",
                type: {
                    name: "String",
                },
            },
            targetProcessServerId: {
                serializedName: "targetProcessServerId",
                type: {
                    name: "String",
                },
            },
            vmsToMigrate: {
                serializedName: "vmsToMigrate",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            updateType: {
                serializedName: "updateType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RenewCertificateInput = {
    type: {
        name: "Composite",
        className: "RenewCertificateInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RenewCertificateInputProperties",
                },
            },
        },
    },
};
const RenewCertificateInputProperties = {
    type: {
        name: "Composite",
        className: "RenewCertificateInputProperties",
        modelProperties: {
            renewCertificateType: {
                serializedName: "renewCertificateType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail",
                },
            },
        },
    },
};
const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail",
                        },
                    },
                },
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo",
                        },
                    },
                },
            },
        },
    },
};
const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
const LogicalNetworkCollection = {
    type: {
        name: "Composite",
        className: "LogicalNetworkCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogicalNetwork",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const LogicalNetworkProperties = {
    type: {
        name: "Composite",
        className: "LogicalNetworkProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            networkVirtualizationStatus: {
                serializedName: "networkVirtualizationStatus",
                type: {
                    name: "String",
                },
            },
            logicalNetworkUsage: {
                serializedName: "logicalNetworkUsage",
                type: {
                    name: "String",
                },
            },
            logicalNetworkDefinitionsStatus: {
                serializedName: "logicalNetworkDefinitionsStatus",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const NetworkCollection = {
    type: {
        name: "Composite",
        className: "NetworkCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Network",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const NetworkProperties = {
    type: {
        name: "Composite",
        className: "NetworkProperties",
        modelProperties: {
            fabricType: {
                serializedName: "fabricType",
                type: {
                    name: "String",
                },
            },
            subnets: {
                serializedName: "subnets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Subnet",
                        },
                    },
                },
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            networkType: {
                serializedName: "networkType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Subnet = {
    type: {
        name: "Composite",
        className: "Subnet",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            addressList: {
                serializedName: "addressList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const NetworkMappingCollection = {
    type: {
        name: "Composite",
        className: "NetworkMappingCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NetworkMapping",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const NetworkMappingProperties = {
    type: {
        name: "Composite",
        className: "NetworkMappingProperties",
        modelProperties: {
            state: {
                serializedName: "state",
                type: {
                    name: "String",
                },
            },
            primaryNetworkFriendlyName: {
                serializedName: "primaryNetworkFriendlyName",
                type: {
                    name: "String",
                },
            },
            primaryNetworkId: {
                serializedName: "primaryNetworkId",
                type: {
                    name: "String",
                },
            },
            primaryFabricFriendlyName: {
                serializedName: "primaryFabricFriendlyName",
                type: {
                    name: "String",
                },
            },
            recoveryNetworkFriendlyName: {
                serializedName: "recoveryNetworkFriendlyName",
                type: {
                    name: "String",
                },
            },
            recoveryNetworkId: {
                serializedName: "recoveryNetworkId",
                type: {
                    name: "String",
                },
            },
            recoveryFabricArmId: {
                serializedName: "recoveryFabricArmId",
                type: {
                    name: "String",
                },
            },
            recoveryFabricFriendlyName: {
                serializedName: "recoveryFabricFriendlyName",
                type: {
                    name: "String",
                },
            },
            fabricSpecificSettings: {
                serializedName: "fabricSpecificSettings",
                type: {
                    name: "Composite",
                    className: "NetworkMappingFabricSpecificSettings",
                },
            },
        },
    },
};
const NetworkMappingFabricSpecificSettings = {
    type: {
        name: "Composite",
        className: "NetworkMappingFabricSpecificSettings",
        uberParent: "NetworkMappingFabricSpecificSettings",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const CreateNetworkMappingInput = {
    type: {
        name: "Composite",
        className: "CreateNetworkMappingInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CreateNetworkMappingInputProperties",
                },
            },
        },
    },
};
const CreateNetworkMappingInputProperties = {
    type: {
        name: "Composite",
        className: "CreateNetworkMappingInputProperties",
        modelProperties: {
            recoveryFabricName: {
                serializedName: "recoveryFabricName",
                type: {
                    name: "String",
                },
            },
            recoveryNetworkId: {
                serializedName: "recoveryNetworkId",
                required: true,
                type: {
                    name: "String",
                },
            },
            fabricSpecificDetails: {
                serializedName: "fabricSpecificDetails",
                type: {
                    name: "Composite",
                    className: "FabricSpecificCreateNetworkMappingInput",
                },
            },
        },
    },
};
const FabricSpecificCreateNetworkMappingInput = {
    type: {
        name: "Composite",
        className: "FabricSpecificCreateNetworkMappingInput",
        uberParent: "FabricSpecificCreateNetworkMappingInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UpdateNetworkMappingInput = {
    type: {
        name: "Composite",
        className: "UpdateNetworkMappingInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UpdateNetworkMappingInputProperties",
                },
            },
        },
    },
};
const UpdateNetworkMappingInputProperties = {
    type: {
        name: "Composite",
        className: "UpdateNetworkMappingInputProperties",
        modelProperties: {
            recoveryFabricName: {
                serializedName: "recoveryFabricName",
                type: {
                    name: "String",
                },
            },
            recoveryNetworkId: {
                serializedName: "recoveryNetworkId",
                type: {
                    name: "String",
                },
            },
            fabricSpecificDetails: {
                serializedName: "fabricSpecificDetails",
                type: {
                    name: "Composite",
                    className: "FabricSpecificUpdateNetworkMappingInput",
                },
            },
        },
    },
};
const FabricSpecificUpdateNetworkMappingInput = {
    type: {
        name: "Composite",
        className: "FabricSpecificUpdateNetworkMappingInput",
        uberParent: "FabricSpecificUpdateNetworkMappingInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProtectionContainerCollection = {
    type: {
        name: "Composite",
        className: "ProtectionContainerCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProtectionContainer",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProtectionContainerProperties = {
    type: {
        name: "Composite",
        className: "ProtectionContainerProperties",
        modelProperties: {
            fabricFriendlyName: {
                serializedName: "fabricFriendlyName",
                type: {
                    name: "String",
                },
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            fabricType: {
                serializedName: "fabricType",
                type: {
                    name: "String",
                },
            },
            protectedItemCount: {
                serializedName: "protectedItemCount",
                type: {
                    name: "Number",
                },
            },
            pairingStatus: {
                serializedName: "pairingStatus",
                type: {
                    name: "String",
                },
            },
            role: {
                serializedName: "role",
                type: {
                    name: "String",
                },
            },
            fabricSpecificDetails: {
                serializedName: "fabricSpecificDetails",
                type: {
                    name: "Composite",
                    className: "ProtectionContainerFabricSpecificDetails",
                },
            },
        },
    },
};
const ProtectionContainerFabricSpecificDetails = {
    type: {
        name: "Composite",
        className: "ProtectionContainerFabricSpecificDetails",
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const CreateProtectionContainerInput = {
    type: {
        name: "Composite",
        className: "CreateProtectionContainerInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CreateProtectionContainerInputProperties",
                },
            },
        },
    },
};
const CreateProtectionContainerInputProperties = {
    type: {
        name: "Composite",
        className: "CreateProtectionContainerInputProperties",
        modelProperties: {
            providerSpecificInput: {
                serializedName: "providerSpecificInput",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReplicationProviderSpecificContainerCreationInput",
                        },
                    },
                },
            },
        },
    },
};
const ReplicationProviderSpecificContainerCreationInput = {
    type: {
        name: "Composite",
        className: "ReplicationProviderSpecificContainerCreationInput",
        uberParent: "ReplicationProviderSpecificContainerCreationInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DiscoverProtectableItemRequest = {
    type: {
        name: "Composite",
        className: "DiscoverProtectableItemRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DiscoverProtectableItemRequestProperties",
                },
            },
        },
    },
};
const DiscoverProtectableItemRequestProperties = {
    type: {
        name: "Composite",
        className: "DiscoverProtectableItemRequestProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String",
                },
            },
            osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const MigrationItemCollection = {
    type: {
        name: "Composite",
        className: "MigrationItemCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrationItem",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const MigrationItemProperties = {
    type: {
        name: "Composite",
        className: "MigrationItemProperties",
        modelProperties: {
            machineName: {
                serializedName: "machineName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            policyId: {
                serializedName: "policyId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            policyFriendlyName: {
                serializedName: "policyFriendlyName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            recoveryServicesProviderId: {
                serializedName: "recoveryServicesProviderId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            replicationStatus: {
                serializedName: "replicationStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            migrationState: {
                serializedName: "migrationState",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            migrationStateDescription: {
                serializedName: "migrationStateDescription",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastTestMigrationTime: {
                serializedName: "lastTestMigrationTime",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            lastTestMigrationStatus: {
                serializedName: "lastTestMigrationStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastMigrationTime: {
                serializedName: "lastMigrationTime",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            lastMigrationStatus: {
                serializedName: "lastMigrationStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            testMigrateState: {
                serializedName: "testMigrateState",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            testMigrateStateDescription: {
                serializedName: "testMigrateStateDescription",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            health: {
                serializedName: "health",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            allowedOperations: {
                serializedName: "allowedOperations",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            currentJob: {
                serializedName: "currentJob",
                type: {
                    name: "Composite",
                    className: "CurrentJobDetails",
                },
            },
            criticalJobHistory: {
                serializedName: "criticalJobHistory",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CriticalJobHistoryDetails",
                        },
                    },
                },
            },
            eventCorrelationId: {
                serializedName: "eventCorrelationId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "MigrationProviderSpecificSettings",
                },
            },
        },
    },
};
const CurrentJobDetails = {
    type: {
        name: "Composite",
        className: "CurrentJobDetails",
        modelProperties: {
            jobName: {
                serializedName: "jobName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            jobId: {
                serializedName: "jobId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const CriticalJobHistoryDetails = {
    type: {
        name: "Composite",
        className: "CriticalJobHistoryDetails",
        modelProperties: {
            jobName: {
                serializedName: "jobName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            jobId: {
                serializedName: "jobId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            jobStatus: {
                serializedName: "jobStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const MigrationProviderSpecificSettings = {
    type: {
        name: "Composite",
        className: "MigrationProviderSpecificSettings",
        uberParent: "MigrationProviderSpecificSettings",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const EnableMigrationInput = {
    type: {
        name: "Composite",
        className: "EnableMigrationInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "EnableMigrationInputProperties",
                },
            },
        },
    },
};
const EnableMigrationInputProperties = {
    type: {
        name: "Composite",
        className: "EnableMigrationInputProperties",
        modelProperties: {
            policyId: {
                serializedName: "policyId",
                required: true,
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "EnableMigrationProviderSpecificInput",
                },
            },
        },
    },
};
const EnableMigrationProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "EnableMigrationProviderSpecificInput",
        uberParent: "EnableMigrationProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UpdateMigrationItemInput = {
    type: {
        name: "Composite",
        className: "UpdateMigrationItemInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UpdateMigrationItemInputProperties",
                },
            },
        },
    },
};
const UpdateMigrationItemInputProperties = {
    type: {
        name: "Composite",
        className: "UpdateMigrationItemInputProperties",
        modelProperties: {
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "UpdateMigrationItemProviderSpecificInput",
                },
            },
        },
    },
};
const UpdateMigrationItemProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "UpdateMigrationItemProviderSpecificInput",
        uberParent: "UpdateMigrationItemProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const MigrateInput = {
    type: {
        name: "Composite",
        className: "MigrateInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MigrateInputProperties",
                },
            },
        },
    },
};
const MigrateInputProperties = {
    type: {
        name: "Composite",
        className: "MigrateInputProperties",
        modelProperties: {
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "MigrateProviderSpecificInput",
                },
            },
        },
    },
};
const MigrateProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "MigrateProviderSpecificInput",
        uberParent: "MigrateProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const MigrationRecoveryPointCollection = {
    type: {
        name: "Composite",
        className: "MigrationRecoveryPointCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MigrationRecoveryPoint",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const MigrationRecoveryPointProperties = {
    type: {
        name: "Composite",
        className: "MigrationRecoveryPointProperties",
        modelProperties: {
            recoveryPointTime: {
                serializedName: "recoveryPointTime",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            recoveryPointType: {
                serializedName: "recoveryPointType",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PauseReplicationInput = {
    type: {
        name: "Composite",
        className: "PauseReplicationInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PauseReplicationInputProperties",
                },
            },
        },
    },
};
const PauseReplicationInputProperties = {
    type: {
        name: "Composite",
        className: "PauseReplicationInputProperties",
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResumeReplicationInput = {
    type: {
        name: "Composite",
        className: "ResumeReplicationInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ResumeReplicationInputProperties",
                },
            },
        },
    },
};
const ResumeReplicationInputProperties = {
    type: {
        name: "Composite",
        className: "ResumeReplicationInputProperties",
        modelProperties: {
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "ResumeReplicationProviderSpecificInput",
                },
            },
        },
    },
};
const ResumeReplicationProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "ResumeReplicationProviderSpecificInput",
        uberParent: "ResumeReplicationProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResyncInput = {
    type: {
        name: "Composite",
        className: "ResyncInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ResyncInputProperties",
                },
            },
        },
    },
};
const ResyncInputProperties = {
    type: {
        name: "Composite",
        className: "ResyncInputProperties",
        modelProperties: {
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "ResyncProviderSpecificInput",
                },
            },
        },
    },
};
const ResyncProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "ResyncProviderSpecificInput",
        uberParent: "ResyncProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const TestMigrateInput = {
    type: {
        name: "Composite",
        className: "TestMigrateInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "TestMigrateInputProperties",
                },
            },
        },
    },
};
const TestMigrateInputProperties = {
    type: {
        name: "Composite",
        className: "TestMigrateInputProperties",
        modelProperties: {
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "TestMigrateProviderSpecificInput",
                },
            },
        },
    },
};
const TestMigrateProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "TestMigrateProviderSpecificInput",
        uberParent: "TestMigrateProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const TestMigrateCleanupInput = {
    type: {
        name: "Composite",
        className: "TestMigrateCleanupInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "TestMigrateCleanupInputProperties",
                },
            },
        },
    },
};
const TestMigrateCleanupInputProperties = {
    type: {
        name: "Composite",
        className: "TestMigrateCleanupInputProperties",
        modelProperties: {
            comments: {
                constraints: {
                    MaxLength: 1024,
                },
                serializedName: "comments",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProtectableItemCollection = {
    type: {
        name: "Composite",
        className: "ProtectableItemCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProtectableItem",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProtectableItemProperties = {
    type: {
        name: "Composite",
        className: "ProtectableItemProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            protectionStatus: {
                serializedName: "protectionStatus",
                type: {
                    name: "String",
                },
            },
            replicationProtectedItemId: {
                serializedName: "replicationProtectedItemId",
                type: {
                    name: "String",
                },
            },
            recoveryServicesProviderId: {
                serializedName: "recoveryServicesProviderId",
                type: {
                    name: "String",
                },
            },
            protectionReadinessErrors: {
                serializedName: "protectionReadinessErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            supportedReplicationProviders: {
                serializedName: "supportedReplicationProviders",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            customDetails: {
                serializedName: "customDetails",
                type: {
                    name: "Composite",
                    className: "ConfigurationSettings",
                },
            },
        },
    },
};
const ConfigurationSettings = {
    type: {
        name: "Composite",
        className: "ConfigurationSettings",
        uberParent: "ConfigurationSettings",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ReplicationProtectedItemCollection = {
    type: {
        name: "Composite",
        className: "ReplicationProtectedItemCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReplicationProtectedItem",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ReplicationProtectedItemProperties = {
    type: {
        name: "Composite",
        className: "ReplicationProtectedItemProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            protectedItemType: {
                serializedName: "protectedItemType",
                type: {
                    name: "String",
                },
            },
            protectableItemId: {
                serializedName: "protectableItemId",
                type: {
                    name: "String",
                },
            },
            recoveryServicesProviderId: {
                serializedName: "recoveryServicesProviderId",
                type: {
                    name: "String",
                },
            },
            primaryFabricFriendlyName: {
                serializedName: "primaryFabricFriendlyName",
                type: {
                    name: "String",
                },
            },
            primaryFabricProvider: {
                serializedName: "primaryFabricProvider",
                type: {
                    name: "String",
                },
            },
            recoveryFabricFriendlyName: {
                serializedName: "recoveryFabricFriendlyName",
                type: {
                    name: "String",
                },
            },
            recoveryFabricId: {
                serializedName: "recoveryFabricId",
                type: {
                    name: "String",
                },
            },
            primaryProtectionContainerFriendlyName: {
                serializedName: "primaryProtectionContainerFriendlyName",
                type: {
                    name: "String",
                },
            },
            recoveryProtectionContainerFriendlyName: {
                serializedName: "recoveryProtectionContainerFriendlyName",
                type: {
                    name: "String",
                },
            },
            protectionState: {
                serializedName: "protectionState",
                type: {
                    name: "String",
                },
            },
            protectionStateDescription: {
                serializedName: "protectionStateDescription",
                type: {
                    name: "String",
                },
            },
            activeLocation: {
                serializedName: "activeLocation",
                type: {
                    name: "String",
                },
            },
            testFailoverState: {
                serializedName: "testFailoverState",
                type: {
                    name: "String",
                },
            },
            testFailoverStateDescription: {
                serializedName: "testFailoverStateDescription",
                type: {
                    name: "String",
                },
            },
            switchProviderState: {
                serializedName: "switchProviderState",
                type: {
                    name: "String",
                },
            },
            switchProviderStateDescription: {
                serializedName: "switchProviderStateDescription",
                type: {
                    name: "String",
                },
            },
            allowedOperations: {
                serializedName: "allowedOperations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            replicationHealth: {
                serializedName: "replicationHealth",
                type: {
                    name: "String",
                },
            },
            failoverHealth: {
                serializedName: "failoverHealth",
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            policyId: {
                serializedName: "policyId",
                type: {
                    name: "String",
                },
            },
            policyFriendlyName: {
                serializedName: "policyFriendlyName",
                type: {
                    name: "String",
                },
            },
            lastSuccessfulFailoverTime: {
                serializedName: "lastSuccessfulFailoverTime",
                type: {
                    name: "DateTime",
                },
            },
            lastSuccessfulTestFailoverTime: {
                serializedName: "lastSuccessfulTestFailoverTime",
                type: {
                    name: "DateTime",
                },
            },
            currentScenario: {
                serializedName: "currentScenario",
                type: {
                    name: "Composite",
                    className: "CurrentScenarioDetails",
                },
            },
            failoverRecoveryPointId: {
                serializedName: "failoverRecoveryPointId",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "ReplicationProviderSpecificSettings",
                },
            },
            recoveryContainerId: {
                serializedName: "recoveryContainerId",
                type: {
                    name: "String",
                },
            },
            eventCorrelationId: {
                serializedName: "eventCorrelationId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const CurrentScenarioDetails = {
    type: {
        name: "Composite",
        className: "CurrentScenarioDetails",
        modelProperties: {
            scenarioName: {
                serializedName: "scenarioName",
                type: {
                    name: "String",
                },
            },
            jobId: {
                serializedName: "jobId",
                type: {
                    name: "String",
                },
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const ReplicationProviderSpecificSettings = {
    type: {
        name: "Composite",
        className: "ReplicationProviderSpecificSettings",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const EnableProtectionInput = {
    type: {
        name: "Composite",
        className: "EnableProtectionInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "EnableProtectionInputProperties",
                },
            },
        },
    },
};
const EnableProtectionInputProperties = {
    type: {
        name: "Composite",
        className: "EnableProtectionInputProperties",
        modelProperties: {
            policyId: {
                serializedName: "policyId",
                type: {
                    name: "String",
                },
            },
            protectableItemId: {
                serializedName: "protectableItemId",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "EnableProtectionProviderSpecificInput",
                },
            },
        },
    },
};
const EnableProtectionProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "EnableProtectionProviderSpecificInput",
        uberParent: "EnableProtectionProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UpdateReplicationProtectedItemInput = {
    type: {
        name: "Composite",
        className: "UpdateReplicationProtectedItemInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UpdateReplicationProtectedItemInputProperties",
                },
            },
        },
    },
};
const UpdateReplicationProtectedItemInputProperties = {
    type: {
        name: "Composite",
        className: "UpdateReplicationProtectedItemInputProperties",
        modelProperties: {
            recoveryAzureVMName: {
                serializedName: "recoveryAzureVMName",
                type: {
                    name: "String",
                },
            },
            recoveryAzureVMSize: {
                serializedName: "recoveryAzureVMSize",
                type: {
                    name: "String",
                },
            },
            selectedRecoveryAzureNetworkId: {
                serializedName: "selectedRecoveryAzureNetworkId",
                type: {
                    name: "String",
                },
            },
            selectedTfoAzureNetworkId: {
                serializedName: "selectedTfoAzureNetworkId",
                type: {
                    name: "String",
                },
            },
            selectedSourceNicId: {
                serializedName: "selectedSourceNicId",
                type: {
                    name: "String",
                },
            },
            enableRdpOnTargetOption: {
                serializedName: "enableRdpOnTargetOption",
                type: {
                    name: "String",
                },
            },
            vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMNicInputDetails",
                        },
                    },
                },
            },
            licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            },
            recoveryAvailabilitySetId: {
                serializedName: "recoveryAvailabilitySetId",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "UpdateReplicationProtectedItemProviderInput",
                },
            },
        },
    },
};
const VMNicInputDetails = {
    type: {
        name: "Composite",
        className: "VMNicInputDetails",
        modelProperties: {
            nicId: {
                serializedName: "nicId",
                type: {
                    name: "String",
                },
            },
            ipConfigs: {
                serializedName: "ipConfigs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IPConfigInputDetails",
                        },
                    },
                },
            },
            selectionType: {
                serializedName: "selectionType",
                type: {
                    name: "String",
                },
            },
            recoveryNetworkSecurityGroupId: {
                serializedName: "recoveryNetworkSecurityGroupId",
                type: {
                    name: "String",
                },
            },
            enableAcceleratedNetworkingOnRecovery: {
                serializedName: "enableAcceleratedNetworkingOnRecovery",
                type: {
                    name: "Boolean",
                },
            },
            tfoNetworkSecurityGroupId: {
                serializedName: "tfoNetworkSecurityGroupId",
                type: {
                    name: "String",
                },
            },
            enableAcceleratedNetworkingOnTfo: {
                serializedName: "enableAcceleratedNetworkingOnTfo",
                type: {
                    name: "Boolean",
                },
            },
            recoveryNicName: {
                serializedName: "recoveryNicName",
                type: {
                    name: "String",
                },
            },
            recoveryNicResourceGroupName: {
                serializedName: "recoveryNicResourceGroupName",
                type: {
                    name: "String",
                },
            },
            reuseExistingNic: {
                serializedName: "reuseExistingNic",
                type: {
                    name: "Boolean",
                },
            },
            tfoNicName: {
                serializedName: "tfoNicName",
                type: {
                    name: "String",
                },
            },
            tfoNicResourceGroupName: {
                serializedName: "tfoNicResourceGroupName",
                type: {
                    name: "String",
                },
            },
            tfoReuseExistingNic: {
                serializedName: "tfoReuseExistingNic",
                type: {
                    name: "Boolean",
                },
            },
            targetNicName: {
                serializedName: "targetNicName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const IPConfigInputDetails = {
    type: {
        name: "Composite",
        className: "IPConfigInputDetails",
        modelProperties: {
            ipConfigName: {
                serializedName: "ipConfigName",
                type: {
                    name: "String",
                },
            },
            isPrimary: {
                serializedName: "isPrimary",
                type: {
                    name: "Boolean",
                },
            },
            isSeletedForFailover: {
                serializedName: "isSeletedForFailover",
                type: {
                    name: "Boolean",
                },
            },
            recoverySubnetName: {
                serializedName: "recoverySubnetName",
                type: {
                    name: "String",
                },
            },
            recoveryStaticIPAddress: {
                serializedName: "recoveryStaticIPAddress",
                type: {
                    name: "String",
                },
            },
            recoveryPublicIPAddressId: {
                serializedName: "recoveryPublicIPAddressId",
                type: {
                    name: "String",
                },
            },
            recoveryLBBackendAddressPoolIds: {
                serializedName: "recoveryLBBackendAddressPoolIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            tfoSubnetName: {
                serializedName: "tfoSubnetName",
                type: {
                    name: "String",
                },
            },
            tfoStaticIPAddress: {
                serializedName: "tfoStaticIPAddress",
                type: {
                    name: "String",
                },
            },
            tfoPublicIPAddressId: {
                serializedName: "tfoPublicIPAddressId",
                type: {
                    name: "String",
                },
            },
            tfoLBBackendAddressPoolIds: {
                serializedName: "tfoLBBackendAddressPoolIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const UpdateReplicationProtectedItemProviderInput = {
    type: {
        name: "Composite",
        className: "UpdateReplicationProtectedItemProviderInput",
        uberParent: "UpdateReplicationProtectedItemProviderInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const AddDisksInput = {
    type: {
        name: "Composite",
        className: "AddDisksInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AddDisksInputProperties",
                },
            },
        },
    },
};
const AddDisksInputProperties = {
    type: {
        name: "Composite",
        className: "AddDisksInputProperties",
        modelProperties: {
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "AddDisksProviderSpecificInput",
                },
            },
        },
    },
};
const AddDisksProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "AddDisksProviderSpecificInput",
        uberParent: "AddDisksProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ApplyRecoveryPointInput = {
    type: {
        name: "Composite",
        className: "ApplyRecoveryPointInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ApplyRecoveryPointInputProperties",
                },
            },
        },
    },
};
const ApplyRecoveryPointInputProperties = {
    type: {
        name: "Composite",
        className: "ApplyRecoveryPointInputProperties",
        modelProperties: {
            recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "ApplyRecoveryPointProviderSpecificInput",
                },
            },
        },
    },
};
const ApplyRecoveryPointProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "ApplyRecoveryPointProviderSpecificInput",
        uberParent: "ApplyRecoveryPointProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PlannedFailoverInput = {
    type: {
        name: "Composite",
        className: "PlannedFailoverInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PlannedFailoverInputProperties",
                },
            },
        },
    },
};
const PlannedFailoverInputProperties = {
    type: {
        name: "Composite",
        className: "PlannedFailoverInputProperties",
        modelProperties: {
            failoverDirection: {
                serializedName: "failoverDirection",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "PlannedFailoverProviderSpecificFailoverInput",
                },
            },
        },
    },
};
const PlannedFailoverProviderSpecificFailoverInput = {
    type: {
        name: "Composite",
        className: "PlannedFailoverProviderSpecificFailoverInput",
        uberParent: "PlannedFailoverProviderSpecificFailoverInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryPointCollection = {
    type: {
        name: "Composite",
        className: "RecoveryPointCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPoint",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryPointProperties = {
    type: {
        name: "Composite",
        className: "RecoveryPointProperties",
        modelProperties: {
            recoveryPointTime: {
                serializedName: "recoveryPointTime",
                type: {
                    name: "DateTime",
                },
            },
            recoveryPointType: {
                serializedName: "recoveryPointType",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "ProviderSpecificRecoveryPointDetails",
                },
            },
        },
    },
};
const ProviderSpecificRecoveryPointDetails = {
    type: {
        name: "Composite",
        className: "ProviderSpecificRecoveryPointDetails",
        uberParent: "ProviderSpecificRecoveryPointDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DisableProtectionInput = {
    type: {
        name: "Composite",
        className: "DisableProtectionInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DisableProtectionInputProperties",
                },
            },
        },
    },
};
const DisableProtectionInputProperties = {
    type: {
        name: "Composite",
        className: "DisableProtectionInputProperties",
        modelProperties: {
            disableProtectionReason: {
                serializedName: "disableProtectionReason",
                type: {
                    name: "String",
                },
            },
            replicationProviderInput: {
                serializedName: "replicationProviderInput",
                type: {
                    name: "Composite",
                    className: "DisableProtectionProviderSpecificInput",
                },
            },
        },
    },
};
const DisableProtectionProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "DisableProtectionProviderSpecificInput",
        uberParent: "DisableProtectionProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RemoveDisksInput = {
    type: {
        name: "Composite",
        className: "RemoveDisksInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RemoveDisksInputProperties",
                },
            },
        },
    },
};
const RemoveDisksInputProperties = {
    type: {
        name: "Composite",
        className: "RemoveDisksInputProperties",
        modelProperties: {
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "RemoveDisksProviderSpecificInput",
                },
            },
        },
    },
};
const RemoveDisksProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "RemoveDisksProviderSpecificInput",
        uberParent: "RemoveDisksProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ReverseReplicationInput = {
    type: {
        name: "Composite",
        className: "ReverseReplicationInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ReverseReplicationInputProperties",
                },
            },
        },
    },
};
const ReverseReplicationInputProperties = {
    type: {
        name: "Composite",
        className: "ReverseReplicationInputProperties",
        modelProperties: {
            failoverDirection: {
                serializedName: "failoverDirection",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "ReverseReplicationProviderSpecificInput",
                },
            },
        },
    },
};
const ReverseReplicationProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "ReverseReplicationProviderSpecificInput",
        uberParent: "ReverseReplicationProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ResolveHealthInput = {
    type: {
        name: "Composite",
        className: "ResolveHealthInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ResolveHealthInputProperties",
                },
            },
        },
    },
};
const ResolveHealthInputProperties = {
    type: {
        name: "Composite",
        className: "ResolveHealthInputProperties",
        modelProperties: {
            healthErrors: {
                serializedName: "healthErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResolveHealthError",
                        },
                    },
                },
            },
        },
    },
};
const ResolveHealthError = {
    type: {
        name: "Composite",
        className: "ResolveHealthError",
        modelProperties: {
            healthErrorId: {
                serializedName: "healthErrorId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const SwitchProviderInput = {
    type: {
        name: "Composite",
        className: "SwitchProviderInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SwitchProviderInputProperties",
                },
            },
        },
    },
};
const SwitchProviderInputProperties = {
    type: {
        name: "Composite",
        className: "SwitchProviderInputProperties",
        modelProperties: {
            targetInstanceType: {
                serializedName: "targetInstanceType",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "SwitchProviderSpecificInput",
                },
            },
        },
    },
};
const SwitchProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "SwitchProviderSpecificInput",
        uberParent: "SwitchProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const TargetComputeSizeCollection = {
    type: {
        name: "Composite",
        className: "TargetComputeSizeCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TargetComputeSize",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const TargetComputeSize = {
    type: {
        name: "Composite",
        className: "TargetComputeSize",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "TargetComputeSizeProperties",
                },
            },
        },
    },
};
const TargetComputeSizeProperties = {
    type: {
        name: "Composite",
        className: "TargetComputeSizeProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            cpuCoresCount: {
                serializedName: "cpuCoresCount",
                type: {
                    name: "Number",
                },
            },
            vCPUsAvailable: {
                serializedName: "vCPUsAvailable",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            memoryInGB: {
                serializedName: "memoryInGB",
                type: {
                    name: "Number",
                },
            },
            maxDataDiskCount: {
                serializedName: "maxDataDiskCount",
                type: {
                    name: "Number",
                },
            },
            maxNicsCount: {
                serializedName: "maxNicsCount",
                type: {
                    name: "Number",
                },
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComputeSizeErrorDetails",
                        },
                    },
                },
            },
            highIopsSupported: {
                serializedName: "highIopsSupported",
                type: {
                    name: "String",
                },
            },
            hyperVGenerations: {
                serializedName: "hyperVGenerations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const ComputeSizeErrorDetails = {
    type: {
        name: "Composite",
        className: "ComputeSizeErrorDetails",
        modelProperties: {
            message: {
                serializedName: "message",
                type: {
                    name: "String",
                },
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const TestFailoverInput = {
    type: {
        name: "Composite",
        className: "TestFailoverInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "TestFailoverInputProperties",
                },
            },
        },
    },
};
const TestFailoverInputProperties = {
    type: {
        name: "Composite",
        className: "TestFailoverInputProperties",
        modelProperties: {
            failoverDirection: {
                serializedName: "failoverDirection",
                type: {
                    name: "String",
                },
            },
            networkType: {
                serializedName: "networkType",
                type: {
                    name: "String",
                },
            },
            networkId: {
                serializedName: "networkId",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "TestFailoverProviderSpecificInput",
                },
            },
        },
    },
};
const TestFailoverProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "TestFailoverProviderSpecificInput",
        uberParent: "TestFailoverProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const TestFailoverCleanupInput = {
    type: {
        name: "Composite",
        className: "TestFailoverCleanupInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "TestFailoverCleanupInputProperties",
                },
            },
        },
    },
};
const TestFailoverCleanupInputProperties = {
    type: {
        name: "Composite",
        className: "TestFailoverCleanupInputProperties",
        modelProperties: {
            comments: {
                constraints: {
                    MaxLength: 1024,
                },
                serializedName: "comments",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UnplannedFailoverInput = {
    type: {
        name: "Composite",
        className: "UnplannedFailoverInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UnplannedFailoverInputProperties",
                },
            },
        },
    },
};
const UnplannedFailoverInputProperties = {
    type: {
        name: "Composite",
        className: "UnplannedFailoverInputProperties",
        modelProperties: {
            failoverDirection: {
                serializedName: "failoverDirection",
                type: {
                    name: "String",
                },
            },
            sourceSiteOperations: {
                serializedName: "sourceSiteOperations",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "UnplannedFailoverProviderSpecificInput",
                },
            },
        },
    },
};
const UnplannedFailoverProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "UnplannedFailoverProviderSpecificInput",
        uberParent: "UnplannedFailoverProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UpdateApplianceForReplicationProtectedItemInput = {
    type: {
        name: "Composite",
        className: "UpdateApplianceForReplicationProtectedItemInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UpdateApplianceForReplicationProtectedItemInputProperties",
                },
            },
        },
    },
};
const UpdateApplianceForReplicationProtectedItemInputProperties = {
    type: {
        name: "Composite",
        className: "UpdateApplianceForReplicationProtectedItemInputProperties",
        modelProperties: {
            targetApplianceId: {
                serializedName: "targetApplianceId",
                required: true,
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "UpdateApplianceForReplicationProtectedItemProviderSpecificInput",
                },
            },
        },
    },
};
const UpdateApplianceForReplicationProtectedItemProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "UpdateApplianceForReplicationProtectedItemProviderSpecificInput",
        uberParent: "UpdateApplianceForReplicationProtectedItemProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UpdateMobilityServiceRequest = {
    type: {
        name: "Composite",
        className: "UpdateMobilityServiceRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UpdateMobilityServiceRequestProperties",
                },
            },
        },
    },
};
const UpdateMobilityServiceRequestProperties = {
    type: {
        name: "Composite",
        className: "UpdateMobilityServiceRequestProperties",
        modelProperties: {
            runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProtectionContainerMappingCollection = {
    type: {
        name: "Composite",
        className: "ProtectionContainerMappingCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProtectionContainerMapping",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProtectionContainerMappingProperties = {
    type: {
        name: "Composite",
        className: "ProtectionContainerMappingProperties",
        modelProperties: {
            targetProtectionContainerId: {
                serializedName: "targetProtectionContainerId",
                type: {
                    name: "String",
                },
            },
            targetProtectionContainerFriendlyName: {
                serializedName: "targetProtectionContainerFriendlyName",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "ProtectionContainerMappingProviderSpecificDetails",
                },
            },
            health: {
                serializedName: "health",
                type: {
                    name: "String",
                },
            },
            healthErrorDetails: {
                serializedName: "healthErrorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            policyId: {
                serializedName: "policyId",
                type: {
                    name: "String",
                },
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String",
                },
            },
            sourceProtectionContainerFriendlyName: {
                serializedName: "sourceProtectionContainerFriendlyName",
                type: {
                    name: "String",
                },
            },
            sourceFabricFriendlyName: {
                serializedName: "sourceFabricFriendlyName",
                type: {
                    name: "String",
                },
            },
            targetFabricFriendlyName: {
                serializedName: "targetFabricFriendlyName",
                type: {
                    name: "String",
                },
            },
            policyFriendlyName: {
                serializedName: "policyFriendlyName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProtectionContainerMappingProviderSpecificDetails = {
    type: {
        name: "Composite",
        className: "ProtectionContainerMappingProviderSpecificDetails",
        uberParent: "ProtectionContainerMappingProviderSpecificDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const CreateProtectionContainerMappingInput = {
    type: {
        name: "Composite",
        className: "CreateProtectionContainerMappingInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CreateProtectionContainerMappingInputProperties",
                },
            },
        },
    },
};
const CreateProtectionContainerMappingInputProperties = {
    type: {
        name: "Composite",
        className: "CreateProtectionContainerMappingInputProperties",
        modelProperties: {
            targetProtectionContainerId: {
                serializedName: "targetProtectionContainerId",
                type: {
                    name: "String",
                },
            },
            policyId: {
                serializedName: "policyId",
                type: {
                    name: "String",
                },
            },
            providerSpecificInput: {
                serializedName: "providerSpecificInput",
                type: {
                    name: "Composite",
                    className: "ReplicationProviderSpecificContainerMappingInput",
                },
            },
        },
    },
};
const ReplicationProviderSpecificContainerMappingInput = {
    type: {
        name: "Composite",
        className: "ReplicationProviderSpecificContainerMappingInput",
        uberParent: "ReplicationProviderSpecificContainerMappingInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UpdateProtectionContainerMappingInput = {
    type: {
        name: "Composite",
        className: "UpdateProtectionContainerMappingInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UpdateProtectionContainerMappingInputProperties",
                },
            },
        },
    },
};
const UpdateProtectionContainerMappingInputProperties = {
    type: {
        name: "Composite",
        className: "UpdateProtectionContainerMappingInputProperties",
        modelProperties: {
            providerSpecificInput: {
                serializedName: "providerSpecificInput",
                type: {
                    name: "Composite",
                    className: "ReplicationProviderSpecificUpdateContainerMappingInput",
                },
            },
        },
    },
};
const ReplicationProviderSpecificUpdateContainerMappingInput = {
    type: {
        name: "Composite",
        className: "ReplicationProviderSpecificUpdateContainerMappingInput",
        uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RemoveProtectionContainerMappingInput = {
    type: {
        name: "Composite",
        className: "RemoveProtectionContainerMappingInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RemoveProtectionContainerMappingInputProperties",
                },
            },
        },
    },
};
const RemoveProtectionContainerMappingInputProperties = {
    type: {
        name: "Composite",
        className: "RemoveProtectionContainerMappingInputProperties",
        modelProperties: {
            providerSpecificInput: {
                serializedName: "providerSpecificInput",
                type: {
                    name: "Composite",
                    className: "ReplicationProviderContainerUnmappingInput",
                },
            },
        },
    },
};
const ReplicationProviderContainerUnmappingInput = {
    type: {
        name: "Composite",
        className: "ReplicationProviderContainerUnmappingInput",
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const SwitchProtectionInput = {
    type: {
        name: "Composite",
        className: "SwitchProtectionInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SwitchProtectionInputProperties",
                },
            },
        },
    },
};
const SwitchProtectionInputProperties = {
    type: {
        name: "Composite",
        className: "SwitchProtectionInputProperties",
        modelProperties: {
            replicationProtectedItemName: {
                serializedName: "replicationProtectedItemName",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "SwitchProtectionProviderSpecificInput",
                },
            },
        },
    },
};
const SwitchProtectionProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "SwitchProtectionProviderSpecificInput",
        uberParent: "SwitchProtectionProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryServicesProviderCollection = {
    type: {
        name: "Composite",
        className: "RecoveryServicesProviderCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryServicesProvider",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryServicesProviderProperties = {
    type: {
        name: "Composite",
        className: "RecoveryServicesProviderProperties",
        modelProperties: {
            fabricType: {
                serializedName: "fabricType",
                type: {
                    name: "String",
                },
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            providerVersion: {
                serializedName: "providerVersion",
                type: {
                    name: "String",
                },
            },
            serverVersion: {
                serializedName: "serverVersion",
                type: {
                    name: "String",
                },
            },
            providerVersionState: {
                serializedName: "providerVersionState",
                type: {
                    name: "String",
                },
            },
            providerVersionExpiryDate: {
                serializedName: "providerVersionExpiryDate",
                type: {
                    name: "DateTime",
                },
            },
            fabricFriendlyName: {
                serializedName: "fabricFriendlyName",
                type: {
                    name: "String",
                },
            },
            lastHeartBeat: {
                serializedName: "lastHeartBeat",
                type: {
                    name: "DateTime",
                },
            },
            connectionStatus: {
                serializedName: "connectionStatus",
                type: {
                    name: "String",
                },
            },
            protectedItemCount: {
                serializedName: "protectedItemCount",
                type: {
                    name: "Number",
                },
            },
            allowedScenarios: {
                serializedName: "allowedScenarios",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            healthErrorDetails: {
                serializedName: "healthErrorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            draIdentifier: {
                serializedName: "draIdentifier",
                type: {
                    name: "String",
                },
            },
            machineId: {
                serializedName: "machineId",
                type: {
                    name: "String",
                },
            },
            machineName: {
                serializedName: "machineName",
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                type: {
                    name: "String",
                },
            },
            authenticationIdentityDetails: {
                serializedName: "authenticationIdentityDetails",
                type: {
                    name: "Composite",
                    className: "IdentityProviderDetails",
                },
            },
            resourceAccessIdentityDetails: {
                serializedName: "resourceAccessIdentityDetails",
                type: {
                    name: "Composite",
                    className: "IdentityProviderDetails",
                },
            },
            dataPlaneAuthenticationIdentityDetails: {
                serializedName: "dataPlaneAuthenticationIdentityDetails",
                type: {
                    name: "Composite",
                    className: "IdentityProviderDetails",
                },
            },
            providerVersionDetails: {
                serializedName: "providerVersionDetails",
                type: {
                    name: "Composite",
                    className: "VersionDetails",
                },
            },
        },
    },
};
const IdentityProviderDetails = {
    type: {
        name: "Composite",
        className: "IdentityProviderDetails",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String",
                },
            },
            applicationId: {
                serializedName: "applicationId",
                type: {
                    name: "String",
                },
            },
            objectId: {
                serializedName: "objectId",
                type: {
                    name: "String",
                },
            },
            audience: {
                serializedName: "audience",
                type: {
                    name: "String",
                },
            },
            aadAuthority: {
                serializedName: "aadAuthority",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VersionDetails = {
    type: {
        name: "Composite",
        className: "VersionDetails",
        modelProperties: {
            version: {
                serializedName: "version",
                type: {
                    name: "String",
                },
            },
            expiryDate: {
                serializedName: "expiryDate",
                type: {
                    name: "DateTime",
                },
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const AddRecoveryServicesProviderInput = {
    type: {
        name: "Composite",
        className: "AddRecoveryServicesProviderInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AddRecoveryServicesProviderInputProperties",
                },
            },
        },
    },
};
const AddRecoveryServicesProviderInputProperties = {
    type: {
        name: "Composite",
        className: "AddRecoveryServicesProviderInputProperties",
        modelProperties: {
            machineName: {
                serializedName: "machineName",
                required: true,
                type: {
                    name: "String",
                },
            },
            machineId: {
                serializedName: "machineId",
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                type: {
                    name: "String",
                },
            },
            authenticationIdentityInput: {
                serializedName: "authenticationIdentityInput",
                type: {
                    name: "Composite",
                    className: "IdentityProviderInput",
                },
            },
            resourceAccessIdentityInput: {
                serializedName: "resourceAccessIdentityInput",
                type: {
                    name: "Composite",
                    className: "IdentityProviderInput",
                },
            },
            dataPlaneAuthenticationIdentityInput: {
                serializedName: "dataPlaneAuthenticationIdentityInput",
                type: {
                    name: "Composite",
                    className: "IdentityProviderInput",
                },
            },
        },
    },
};
const IdentityProviderInput = {
    type: {
        name: "Composite",
        className: "IdentityProviderInput",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String",
                },
            },
            applicationId: {
                serializedName: "applicationId",
                required: true,
                type: {
                    name: "String",
                },
            },
            objectId: {
                serializedName: "objectId",
                required: true,
                type: {
                    name: "String",
                },
            },
            audience: {
                serializedName: "audience",
                required: true,
                type: {
                    name: "String",
                },
            },
            aadAuthority: {
                serializedName: "aadAuthority",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const StorageClassificationCollection = {
    type: {
        name: "Composite",
        className: "StorageClassificationCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageClassification",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const StorageClassificationProperties = {
    type: {
        name: "Composite",
        className: "StorageClassificationProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const StorageClassificationMappingCollection = {
    type: {
        name: "Composite",
        className: "StorageClassificationMappingCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "StorageClassificationMapping",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const StorageClassificationMappingProperties = {
    type: {
        name: "Composite",
        className: "StorageClassificationMappingProperties",
        modelProperties: {
            targetStorageClassificationId: {
                serializedName: "targetStorageClassificationId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const StorageClassificationMappingInput = {
    type: {
        name: "Composite",
        className: "StorageClassificationMappingInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "StorageMappingInputProperties",
                },
            },
        },
    },
};
const StorageMappingInputProperties = {
    type: {
        name: "Composite",
        className: "StorageMappingInputProperties",
        modelProperties: {
            targetStorageClassificationId: {
                serializedName: "targetStorageClassificationId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VCenterCollection = {
    type: {
        name: "Composite",
        className: "VCenterCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VCenter",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VCenterProperties = {
    type: {
        name: "Composite",
        className: "VCenterProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            internalId: {
                serializedName: "internalId",
                type: {
                    name: "String",
                },
            },
            lastHeartbeat: {
                serializedName: "lastHeartbeat",
                type: {
                    name: "DateTime",
                },
            },
            discoveryStatus: {
                serializedName: "discoveryStatus",
                type: {
                    name: "String",
                },
            },
            processServerId: {
                serializedName: "processServerId",
                type: {
                    name: "String",
                },
            },
            ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String",
                },
            },
            infrastructureId: {
                serializedName: "infrastructureId",
                type: {
                    name: "String",
                },
            },
            port: {
                serializedName: "port",
                type: {
                    name: "String",
                },
            },
            runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            },
            fabricArmResourceName: {
                serializedName: "fabricArmResourceName",
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
        },
    },
};
const AddVCenterRequest = {
    type: {
        name: "Composite",
        className: "AddVCenterRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AddVCenterRequestProperties",
                },
            },
        },
    },
};
const AddVCenterRequestProperties = {
    type: {
        name: "Composite",
        className: "AddVCenterRequestProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String",
                },
            },
            processServerId: {
                serializedName: "processServerId",
                type: {
                    name: "String",
                },
            },
            port: {
                serializedName: "port",
                type: {
                    name: "String",
                },
            },
            runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UpdateVCenterRequest = {
    type: {
        name: "Composite",
        className: "UpdateVCenterRequest",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UpdateVCenterRequestProperties",
                },
            },
        },
    },
};
const UpdateVCenterRequestProperties = {
    type: {
        name: "Composite",
        className: "UpdateVCenterRequestProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String",
                },
            },
            processServerId: {
                serializedName: "processServerId",
                type: {
                    name: "String",
                },
            },
            port: {
                serializedName: "port",
                type: {
                    name: "String",
                },
            },
            runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const JobCollection = {
    type: {
        name: "Composite",
        className: "JobCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Job",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const JobProperties = {
    type: {
        name: "Composite",
        className: "JobProperties",
        modelProperties: {
            activityId: {
                serializedName: "activityId",
                type: {
                    name: "String",
                },
            },
            scenarioName: {
                serializedName: "scenarioName",
                type: {
                    name: "String",
                },
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String",
                },
            },
            stateDescription: {
                serializedName: "stateDescription",
                type: {
                    name: "String",
                },
            },
            tasks: {
                serializedName: "tasks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ASRTask",
                        },
                    },
                },
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobErrorDetails",
                        },
                    },
                },
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime",
                },
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime",
                },
            },
            allowedActions: {
                serializedName: "allowedActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            targetObjectId: {
                serializedName: "targetObjectId",
                type: {
                    name: "String",
                },
            },
            targetObjectName: {
                serializedName: "targetObjectName",
                type: {
                    name: "String",
                },
            },
            targetInstanceType: {
                serializedName: "targetInstanceType",
                type: {
                    name: "String",
                },
            },
            customDetails: {
                serializedName: "customDetails",
                type: {
                    name: "Composite",
                    className: "JobDetails",
                },
            },
        },
    },
};
const ASRTask = {
    type: {
        name: "Composite",
        className: "ASRTask",
        modelProperties: {
            taskId: {
                serializedName: "taskId",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime",
                },
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime",
                },
            },
            allowedActions: {
                serializedName: "allowedActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String",
                },
            },
            stateDescription: {
                serializedName: "stateDescription",
                type: {
                    name: "String",
                },
            },
            taskType: {
                serializedName: "taskType",
                type: {
                    name: "String",
                },
            },
            customDetails: {
                serializedName: "customDetails",
                type: {
                    name: "Composite",
                    className: "TaskTypeDetails",
                },
            },
            groupTaskCustomDetails: {
                serializedName: "groupTaskCustomDetails",
                type: {
                    name: "Composite",
                    className: "GroupTaskDetails",
                },
            },
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "JobErrorDetails",
                        },
                    },
                },
            },
        },
    },
};
const TaskTypeDetails = {
    type: {
        name: "Composite",
        className: "TaskTypeDetails",
        uberParent: "TaskTypeDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const GroupTaskDetails = {
    type: {
        name: "Composite",
        className: "GroupTaskDetails",
        uberParent: "GroupTaskDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
            childTasks: {
                serializedName: "childTasks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ASRTask",
                        },
                    },
                },
            },
        },
    },
};
const JobErrorDetails = {
    type: {
        name: "Composite",
        className: "JobErrorDetails",
        modelProperties: {
            serviceErrorDetails: {
                serializedName: "serviceErrorDetails",
                type: {
                    name: "Composite",
                    className: "ServiceError",
                },
            },
            providerErrorDetails: {
                serializedName: "providerErrorDetails",
                type: {
                    name: "Composite",
                    className: "ProviderError",
                },
            },
            errorLevel: {
                serializedName: "errorLevel",
                type: {
                    name: "String",
                },
            },
            creationTime: {
                serializedName: "creationTime",
                type: {
                    name: "DateTime",
                },
            },
            taskId: {
                serializedName: "taskId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ServiceError = {
    type: {
        name: "Composite",
        className: "ServiceError",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String",
                },
            },
            possibleCauses: {
                serializedName: "possibleCauses",
                type: {
                    name: "String",
                },
            },
            recommendedAction: {
                serializedName: "recommendedAction",
                type: {
                    name: "String",
                },
            },
            activityId: {
                serializedName: "activityId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProviderError = {
    type: {
        name: "Composite",
        className: "ProviderError",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "Number",
                },
            },
            errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String",
                },
            },
            errorId: {
                serializedName: "errorId",
                type: {
                    name: "String",
                },
            },
            possibleCauses: {
                serializedName: "possibleCauses",
                type: {
                    name: "String",
                },
            },
            recommendedAction: {
                serializedName: "recommendedAction",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const JobDetails = {
    type: {
        name: "Composite",
        className: "JobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
            affectedObjectDetails: {
                serializedName: "affectedObjectDetails",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
        },
    },
};
const ResumeJobParams = {
    type: {
        name: "Composite",
        className: "ResumeJobParams",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ResumeJobParamsProperties",
                },
            },
        },
    },
};
const ResumeJobParamsProperties = {
    type: {
        name: "Composite",
        className: "ResumeJobParamsProperties",
        modelProperties: {
            comments: {
                serializedName: "comments",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const JobQueryParameter = {
    type: {
        name: "Composite",
        className: "JobQueryParameter",
        modelProperties: {
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "String",
                },
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "String",
                },
            },
            fabricId: {
                serializedName: "fabricId",
                type: {
                    name: "String",
                },
            },
            affectedObjectTypes: {
                serializedName: "affectedObjectTypes",
                type: {
                    name: "String",
                },
            },
            jobStatus: {
                serializedName: "jobStatus",
                type: {
                    name: "String",
                },
            },
            jobOutputType: {
                serializedName: "jobOutputType",
                type: {
                    name: "String",
                },
            },
            jobName: {
                serializedName: "jobName",
                type: {
                    name: "String",
                },
            },
            timezoneOffset: {
                serializedName: "timezoneOffset",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const PolicyCollection = {
    type: {
        name: "Composite",
        className: "PolicyCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Policy",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const PolicyProperties = {
    type: {
        name: "Composite",
        className: "PolicyProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "PolicyProviderSpecificDetails",
                },
            },
        },
    },
};
const PolicyProviderSpecificDetails = {
    type: {
        name: "Composite",
        className: "PolicyProviderSpecificDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const CreatePolicyInput = {
    type: {
        name: "Composite",
        className: "CreatePolicyInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CreatePolicyInputProperties",
                },
            },
        },
    },
};
const CreatePolicyInputProperties = {
    type: {
        name: "Composite",
        className: "CreatePolicyInputProperties",
        modelProperties: {
            providerSpecificInput: {
                serializedName: "providerSpecificInput",
                type: {
                    name: "Composite",
                    className: "PolicyProviderSpecificInput",
                },
            },
        },
    },
};
const PolicyProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "PolicyProviderSpecificInput",
        uberParent: "PolicyProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UpdatePolicyInput = {
    type: {
        name: "Composite",
        className: "UpdatePolicyInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UpdatePolicyInputProperties",
                },
            },
        },
    },
};
const UpdatePolicyInputProperties = {
    type: {
        name: "Composite",
        className: "UpdatePolicyInputProperties",
        modelProperties: {
            replicationProviderSettings: {
                serializedName: "replicationProviderSettings",
                type: {
                    name: "Composite",
                    className: "PolicyProviderSpecificInput",
                },
            },
        },
    },
};
const ReplicationProtectionIntentCollection = {
    type: {
        name: "Composite",
        className: "ReplicationProtectionIntentCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReplicationProtectionIntent",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ReplicationProtectionIntentProperties = {
    type: {
        name: "Composite",
        className: "ReplicationProtectionIntentProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            jobId: {
                serializedName: "jobId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            jobState: {
                serializedName: "jobState",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            isActive: {
                serializedName: "isActive",
                readOnly: true,
                type: {
                    name: "Boolean",
                },
            },
            creationTimeUTC: {
                serializedName: "creationTimeUTC",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "ReplicationProtectionIntentProviderSpecificSettings",
                },
            },
        },
    },
};
const ReplicationProtectionIntentProviderSpecificSettings = {
    type: {
        name: "Composite",
        className: "ReplicationProtectionIntentProviderSpecificSettings",
        uberParent: "ReplicationProtectionIntentProviderSpecificSettings",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const CreateProtectionIntentInput = {
    type: {
        name: "Composite",
        className: "CreateProtectionIntentInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CreateProtectionIntentProperties",
                },
            },
        },
    },
};
const CreateProtectionIntentProperties = {
    type: {
        name: "Composite",
        className: "CreateProtectionIntentProperties",
        modelProperties: {
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Composite",
                    className: "CreateProtectionIntentProviderSpecificDetails",
                },
            },
        },
    },
};
const CreateProtectionIntentProviderSpecificDetails = {
    type: {
        name: "Composite",
        className: "CreateProtectionIntentProviderSpecificDetails",
        uberParent: "CreateProtectionIntentProviderSpecificDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryPlanCollection = {
    type: {
        name: "Composite",
        className: "RecoveryPlanCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlan",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryPlanProperties = {
    type: {
        name: "Composite",
        className: "RecoveryPlanProperties",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            primaryFabricId: {
                serializedName: "primaryFabricId",
                type: {
                    name: "String",
                },
            },
            primaryFabricFriendlyName: {
                serializedName: "primaryFabricFriendlyName",
                type: {
                    name: "String",
                },
            },
            recoveryFabricId: {
                serializedName: "recoveryFabricId",
                type: {
                    name: "String",
                },
            },
            recoveryFabricFriendlyName: {
                serializedName: "recoveryFabricFriendlyName",
                type: {
                    name: "String",
                },
            },
            failoverDeploymentModel: {
                serializedName: "failoverDeploymentModel",
                type: {
                    name: "String",
                },
            },
            replicationProviders: {
                serializedName: "replicationProviders",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            allowedOperations: {
                serializedName: "allowedOperations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            lastPlannedFailoverTime: {
                serializedName: "lastPlannedFailoverTime",
                type: {
                    name: "DateTime",
                },
            },
            lastUnplannedFailoverTime: {
                serializedName: "lastUnplannedFailoverTime",
                type: {
                    name: "DateTime",
                },
            },
            lastTestFailoverTime: {
                serializedName: "lastTestFailoverTime",
                type: {
                    name: "DateTime",
                },
            },
            currentScenario: {
                serializedName: "currentScenario",
                type: {
                    name: "Composite",
                    className: "CurrentScenarioDetails",
                },
            },
            currentScenarioStatus: {
                serializedName: "currentScenarioStatus",
                type: {
                    name: "String",
                },
            },
            currentScenarioStatusDescription: {
                serializedName: "currentScenarioStatusDescription",
                type: {
                    name: "String",
                },
            },
            groups: {
                serializedName: "groups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanGroup",
                        },
                    },
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanProviderSpecificDetails",
                        },
                    },
                },
            },
        },
    },
};
const RecoveryPlanGroup = {
    type: {
        name: "Composite",
        className: "RecoveryPlanGroup",
        modelProperties: {
            groupType: {
                serializedName: "groupType",
                required: true,
                type: {
                    name: "String",
                },
            },
            replicationProtectedItems: {
                serializedName: "replicationProtectedItems",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanProtectedItem",
                        },
                    },
                },
            },
            startGroupActions: {
                serializedName: "startGroupActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanAction",
                        },
                    },
                },
            },
            endGroupActions: {
                serializedName: "endGroupActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanAction",
                        },
                    },
                },
            },
        },
    },
};
const RecoveryPlanProtectedItem = {
    type: {
        name: "Composite",
        className: "RecoveryPlanProtectedItem",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            virtualMachineId: {
                serializedName: "virtualMachineId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryPlanAction = {
    type: {
        name: "Composite",
        className: "RecoveryPlanAction",
        modelProperties: {
            actionName: {
                serializedName: "actionName",
                required: true,
                type: {
                    name: "String",
                },
            },
            failoverTypes: {
                serializedName: "failoverTypes",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            failoverDirections: {
                serializedName: "failoverDirections",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            customDetails: {
                serializedName: "customDetails",
                type: {
                    name: "Composite",
                    className: "RecoveryPlanActionDetails",
                },
            },
        },
    },
};
const RecoveryPlanActionDetails = {
    type: {
        name: "Composite",
        className: "RecoveryPlanActionDetails",
        uberParent: "RecoveryPlanActionDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryPlanProviderSpecificDetails = {
    type: {
        name: "Composite",
        className: "RecoveryPlanProviderSpecificDetails",
        uberParent: "RecoveryPlanProviderSpecificDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const CreateRecoveryPlanInput = {
    type: {
        name: "Composite",
        className: "CreateRecoveryPlanInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "CreateRecoveryPlanInputProperties",
                },
            },
        },
    },
};
const CreateRecoveryPlanInputProperties = {
    type: {
        name: "Composite",
        className: "CreateRecoveryPlanInputProperties",
        modelProperties: {
            primaryFabricId: {
                serializedName: "primaryFabricId",
                required: true,
                type: {
                    name: "String",
                },
            },
            recoveryFabricId: {
                serializedName: "recoveryFabricId",
                required: true,
                type: {
                    name: "String",
                },
            },
            failoverDeploymentModel: {
                serializedName: "failoverDeploymentModel",
                type: {
                    name: "String",
                },
            },
            groups: {
                serializedName: "groups",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanGroup",
                        },
                    },
                },
            },
            providerSpecificInput: {
                serializedName: "providerSpecificInput",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanProviderSpecificInput",
                        },
                    },
                },
            },
        },
    },
};
const RecoveryPlanProviderSpecificInput = {
    type: {
        name: "Composite",
        className: "RecoveryPlanProviderSpecificInput",
        uberParent: "RecoveryPlanProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const UpdateRecoveryPlanInput = {
    type: {
        name: "Composite",
        className: "UpdateRecoveryPlanInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "UpdateRecoveryPlanInputProperties",
                },
            },
        },
    },
};
const UpdateRecoveryPlanInputProperties = {
    type: {
        name: "Composite",
        className: "UpdateRecoveryPlanInputProperties",
        modelProperties: {
            groups: {
                serializedName: "groups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanGroup",
                        },
                    },
                },
            },
        },
    },
};
const RecoveryPlanPlannedFailoverInput = {
    type: {
        name: "Composite",
        className: "RecoveryPlanPlannedFailoverInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RecoveryPlanPlannedFailoverInputProperties",
                },
            },
        },
    },
};
const RecoveryPlanPlannedFailoverInputProperties = {
    type: {
        name: "Composite",
        className: "RecoveryPlanPlannedFailoverInputProperties",
        modelProperties: {
            failoverDirection: {
                serializedName: "failoverDirection",
                required: true,
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanProviderSpecificFailoverInput",
                        },
                    },
                },
            },
        },
    },
};
const RecoveryPlanProviderSpecificFailoverInput = {
    type: {
        name: "Composite",
        className: "RecoveryPlanProviderSpecificFailoverInput",
        uberParent: "RecoveryPlanProviderSpecificFailoverInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryPlanTestFailoverInput = {
    type: {
        name: "Composite",
        className: "RecoveryPlanTestFailoverInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RecoveryPlanTestFailoverInputProperties",
                },
            },
        },
    },
};
const RecoveryPlanTestFailoverInputProperties = {
    type: {
        name: "Composite",
        className: "RecoveryPlanTestFailoverInputProperties",
        modelProperties: {
            failoverDirection: {
                serializedName: "failoverDirection",
                required: true,
                type: {
                    name: "String",
                },
            },
            networkType: {
                serializedName: "networkType",
                required: true,
                type: {
                    name: "String",
                },
            },
            networkId: {
                serializedName: "networkId",
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanProviderSpecificFailoverInput",
                        },
                    },
                },
            },
        },
    },
};
const RecoveryPlanTestFailoverCleanupInput = {
    type: {
        name: "Composite",
        className: "RecoveryPlanTestFailoverCleanupInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RecoveryPlanTestFailoverCleanupInputProperties",
                },
            },
        },
    },
};
const RecoveryPlanTestFailoverCleanupInputProperties = {
    type: {
        name: "Composite",
        className: "RecoveryPlanTestFailoverCleanupInputProperties",
        modelProperties: {
            comments: {
                constraints: {
                    MaxLength: 1024,
                },
                serializedName: "comments",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryPlanUnplannedFailoverInput = {
    type: {
        name: "Composite",
        className: "RecoveryPlanUnplannedFailoverInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RecoveryPlanUnplannedFailoverInputProperties",
                },
            },
        },
    },
};
const RecoveryPlanUnplannedFailoverInputProperties = {
    type: {
        name: "Composite",
        className: "RecoveryPlanUnplannedFailoverInputProperties",
        modelProperties: {
            failoverDirection: {
                serializedName: "failoverDirection",
                required: true,
                type: {
                    name: "String",
                },
            },
            sourceSiteOperations: {
                serializedName: "sourceSiteOperations",
                required: true,
                type: {
                    name: "String",
                },
            },
            providerSpecificDetails: {
                serializedName: "providerSpecificDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecoveryPlanProviderSpecificFailoverInput",
                        },
                    },
                },
            },
        },
    },
};
const SupportedOSProperties = {
    type: {
        name: "Composite",
        className: "SupportedOSProperties",
        modelProperties: {
            supportedOsList: {
                serializedName: "supportedOsList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SupportedOSProperty",
                        },
                    },
                },
            },
        },
    },
};
const SupportedOSProperty = {
    type: {
        name: "Composite",
        className: "SupportedOSProperty",
        modelProperties: {
            instanceType: {
                serializedName: "instanceType",
                type: {
                    name: "String",
                },
            },
            supportedOs: {
                serializedName: "supportedOs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SupportedOSDetails",
                        },
                    },
                },
            },
        },
    },
};
const SupportedOSDetails = {
    type: {
        name: "Composite",
        className: "SupportedOSDetails",
        modelProperties: {
            osName: {
                serializedName: "osName",
                type: {
                    name: "String",
                },
            },
            osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            },
            osVersions: {
                serializedName: "osVersions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OSVersionWrapper",
                        },
                    },
                },
            },
        },
    },
};
const OSVersionWrapper = {
    type: {
        name: "Composite",
        className: "OSVersionWrapper",
        modelProperties: {
            version: {
                serializedName: "version",
                type: {
                    name: "String",
                },
            },
            servicePack: {
                serializedName: "servicePack",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VaultHealthProperties = {
    type: {
        name: "Composite",
        className: "VaultHealthProperties",
        modelProperties: {
            vaultErrors: {
                serializedName: "vaultErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            protectedItemsHealth: {
                serializedName: "protectedItemsHealth",
                type: {
                    name: "Composite",
                    className: "ResourceHealthSummary",
                },
            },
            fabricsHealth: {
                serializedName: "fabricsHealth",
                type: {
                    name: "Composite",
                    className: "ResourceHealthSummary",
                },
            },
            containersHealth: {
                serializedName: "containersHealth",
                type: {
                    name: "Composite",
                    className: "ResourceHealthSummary",
                },
            },
        },
    },
};
const ResourceHealthSummary = {
    type: {
        name: "Composite",
        className: "ResourceHealthSummary",
        modelProperties: {
            resourceCount: {
                serializedName: "resourceCount",
                type: {
                    name: "Number",
                },
            },
            issues: {
                serializedName: "issues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthErrorSummary",
                        },
                    },
                },
            },
            categorizedResourceCounts: {
                serializedName: "categorizedResourceCounts",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Number" } },
                },
            },
        },
    },
};
const HealthErrorSummary = {
    type: {
        name: "Composite",
        className: "HealthErrorSummary",
        modelProperties: {
            summaryCode: {
                serializedName: "summaryCode",
                type: {
                    name: "String",
                },
            },
            category: {
                serializedName: "category",
                type: {
                    name: "String",
                },
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String",
                },
            },
            summaryMessage: {
                serializedName: "summaryMessage",
                type: {
                    name: "String",
                },
            },
            affectedResourceType: {
                serializedName: "affectedResourceType",
                type: {
                    name: "String",
                },
            },
            affectedResourceSubtype: {
                serializedName: "affectedResourceSubtype",
                type: {
                    name: "String",
                },
            },
            affectedResourceCorrelationIds: {
                serializedName: "affectedResourceCorrelationIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const VaultSettingCollection = {
    type: {
        name: "Composite",
        className: "VaultSettingCollection",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VaultSetting",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VaultSettingProperties = {
    type: {
        name: "Composite",
        className: "VaultSettingProperties",
        modelProperties: {
            migrationSolutionId: {
                serializedName: "migrationSolutionId",
                type: {
                    name: "String",
                },
            },
            vmwareToAzureProviderType: {
                serializedName: "vmwareToAzureProviderType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VaultSettingCreationInput = {
    type: {
        name: "Composite",
        className: "VaultSettingCreationInput",
        modelProperties: {
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "VaultSettingCreationInputProperties",
                },
            },
        },
    },
};
const VaultSettingCreationInputProperties = {
    type: {
        name: "Composite",
        className: "VaultSettingCreationInputProperties",
        modelProperties: {
            migrationSolutionId: {
                serializedName: "migrationSolutionId",
                type: {
                    name: "String",
                },
            },
            vmwareToAzureProviderType: {
                serializedName: "vmwareToAzureProviderType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const A2AVmDiskInputDetails = {
    type: {
        name: "Composite",
        className: "A2AVmDiskInputDetails",
        modelProperties: {
            diskUri: {
                serializedName: "diskUri",
                required: true,
                type: {
                    name: "String",
                },
            },
            recoveryAzureStorageAccountId: {
                serializedName: "recoveryAzureStorageAccountId",
                required: true,
                type: {
                    name: "String",
                },
            },
            primaryStagingAzureStorageAccountId: {
                serializedName: "primaryStagingAzureStorageAccountId",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const A2AVmManagedDiskInputDetails = {
    type: {
        name: "Composite",
        className: "A2AVmManagedDiskInputDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                required: true,
                type: {
                    name: "String",
                },
            },
            primaryStagingAzureStorageAccountId: {
                serializedName: "primaryStagingAzureStorageAccountId",
                required: true,
                type: {
                    name: "String",
                },
            },
            recoveryResourceGroupId: {
                serializedName: "recoveryResourceGroupId",
                required: true,
                type: {
                    name: "String",
                },
            },
            recoveryReplicaDiskAccountType: {
                serializedName: "recoveryReplicaDiskAccountType",
                type: {
                    name: "String",
                },
            },
            recoveryTargetDiskAccountType: {
                serializedName: "recoveryTargetDiskAccountType",
                type: {
                    name: "String",
                },
            },
            recoveryDiskEncryptionSetId: {
                serializedName: "recoveryDiskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
            diskEncryptionInfo: {
                serializedName: "diskEncryptionInfo",
                type: {
                    name: "Composite",
                    className: "DiskEncryptionInfo",
                },
            },
        },
    },
};
const DiskEncryptionInfo = {
    type: {
        name: "Composite",
        className: "DiskEncryptionInfo",
        modelProperties: {
            diskEncryptionKeyInfo: {
                serializedName: "diskEncryptionKeyInfo",
                type: {
                    name: "Composite",
                    className: "DiskEncryptionKeyInfo",
                },
            },
            keyEncryptionKeyInfo: {
                serializedName: "keyEncryptionKeyInfo",
                type: {
                    name: "Composite",
                    className: "KeyEncryptionKeyInfo",
                },
            },
        },
    },
};
const DiskEncryptionKeyInfo = {
    type: {
        name: "Composite",
        className: "DiskEncryptionKeyInfo",
        modelProperties: {
            secretIdentifier: {
                serializedName: "secretIdentifier",
                type: {
                    name: "String",
                },
            },
            keyVaultResourceArmId: {
                serializedName: "keyVaultResourceArmId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const KeyEncryptionKeyInfo = {
    type: {
        name: "Composite",
        className: "KeyEncryptionKeyInfo",
        modelProperties: {
            keyIdentifier: {
                serializedName: "keyIdentifier",
                type: {
                    name: "String",
                },
            },
            keyVaultResourceArmId: {
                serializedName: "keyVaultResourceArmId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProtectionProfileCustomDetails = {
    type: {
        name: "Composite",
        className: "ProtectionProfileCustomDetails",
        uberParent: "ProtectionProfileCustomDetails",
        polymorphicDiscriminator: {
            serializedName: "resourceType",
            clientName: "resourceType",
        },
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const StorageAccountCustomDetails = {
    type: {
        name: "Composite",
        className: "StorageAccountCustomDetails",
        uberParent: "StorageAccountCustomDetails",
        polymorphicDiscriminator: {
            serializedName: "resourceType",
            clientName: "resourceType",
        },
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryAvailabilitySetCustomDetails = {
    type: {
        name: "Composite",
        className: "RecoveryAvailabilitySetCustomDetails",
        uberParent: "RecoveryAvailabilitySetCustomDetails",
        polymorphicDiscriminator: {
            serializedName: "resourceType",
            clientName: "resourceType",
        },
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryVirtualNetworkCustomDetails = {
    type: {
        name: "Composite",
        className: "RecoveryVirtualNetworkCustomDetails",
        uberParent: "RecoveryVirtualNetworkCustomDetails",
        polymorphicDiscriminator: {
            serializedName: "resourceType",
            clientName: "resourceType",
        },
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RecoveryProximityPlacementGroupCustomDetails = {
    type: {
        name: "Composite",
        className: "RecoveryProximityPlacementGroupCustomDetails",
        uberParent: "RecoveryProximityPlacementGroupCustomDetails",
        polymorphicDiscriminator: {
            serializedName: "resourceType",
            clientName: "resourceType",
        },
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const A2AProtectionIntentDiskInputDetails = {
    type: {
        name: "Composite",
        className: "A2AProtectionIntentDiskInputDetails",
        modelProperties: {
            diskUri: {
                serializedName: "diskUri",
                required: true,
                type: {
                    name: "String",
                },
            },
            recoveryAzureStorageAccountCustomInput: {
                serializedName: "recoveryAzureStorageAccountCustomInput",
                type: {
                    name: "Composite",
                    className: "StorageAccountCustomDetails",
                },
            },
            primaryStagingStorageAccountCustomInput: {
                serializedName: "primaryStagingStorageAccountCustomInput",
                type: {
                    name: "Composite",
                    className: "StorageAccountCustomDetails",
                },
            },
        },
    },
};
const A2AProtectionIntentManagedDiskInputDetails = {
    type: {
        name: "Composite",
        className: "A2AProtectionIntentManagedDiskInputDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                required: true,
                type: {
                    name: "String",
                },
            },
            primaryStagingStorageAccountCustomInput: {
                serializedName: "primaryStagingStorageAccountCustomInput",
                type: {
                    name: "Composite",
                    className: "StorageAccountCustomDetails",
                },
            },
            recoveryResourceGroupCustomInput: {
                serializedName: "recoveryResourceGroupCustomInput",
                type: {
                    name: "Composite",
                    className: "RecoveryResourceGroupCustomDetails",
                },
            },
            recoveryReplicaDiskAccountType: {
                serializedName: "recoveryReplicaDiskAccountType",
                type: {
                    name: "String",
                },
            },
            recoveryTargetDiskAccountType: {
                serializedName: "recoveryTargetDiskAccountType",
                type: {
                    name: "String",
                },
            },
            recoveryDiskEncryptionSetId: {
                serializedName: "recoveryDiskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
            diskEncryptionInfo: {
                serializedName: "diskEncryptionInfo",
                type: {
                    name: "Composite",
                    className: "DiskEncryptionInfo",
                },
            },
        },
    },
};
const RecoveryResourceGroupCustomDetails = {
    type: {
        name: "Composite",
        className: "RecoveryResourceGroupCustomDetails",
        uberParent: "RecoveryResourceGroupCustomDetails",
        polymorphicDiscriminator: {
            serializedName: "resourceType",
            clientName: "resourceType",
        },
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ExtendedLocation = {
    type: {
        name: "Composite",
        className: "ExtendedLocation",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const A2AExtendedLocationDetails = {
    type: {
        name: "Composite",
        className: "A2AExtendedLocationDetails",
        modelProperties: {
            primaryExtendedLocation: {
                serializedName: "primaryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            },
            recoveryExtendedLocation: {
                serializedName: "recoveryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            },
        },
    },
};
const A2AFabricSpecificLocationDetails = {
    type: {
        name: "Composite",
        className: "A2AFabricSpecificLocationDetails",
        modelProperties: {
            initialPrimaryZone: {
                serializedName: "initialPrimaryZone",
                type: {
                    name: "String",
                },
            },
            initialRecoveryZone: {
                serializedName: "initialRecoveryZone",
                type: {
                    name: "String",
                },
            },
            initialPrimaryExtendedLocation: {
                serializedName: "initialPrimaryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            },
            initialRecoveryExtendedLocation: {
                serializedName: "initialRecoveryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            },
            initialPrimaryFabricLocation: {
                serializedName: "initialPrimaryFabricLocation",
                type: {
                    name: "String",
                },
            },
            initialRecoveryFabricLocation: {
                serializedName: "initialRecoveryFabricLocation",
                type: {
                    name: "String",
                },
            },
            primaryZone: {
                serializedName: "primaryZone",
                type: {
                    name: "String",
                },
            },
            recoveryZone: {
                serializedName: "recoveryZone",
                type: {
                    name: "String",
                },
            },
            primaryExtendedLocation: {
                serializedName: "primaryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            },
            recoveryExtendedLocation: {
                serializedName: "recoveryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            },
            primaryFabricLocation: {
                serializedName: "primaryFabricLocation",
                type: {
                    name: "String",
                },
            },
            recoveryFabricLocation: {
                serializedName: "recoveryFabricLocation",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const A2AProtectedDiskDetails = {
    type: {
        name: "Composite",
        className: "A2AProtectedDiskDetails",
        modelProperties: {
            diskUri: {
                serializedName: "diskUri",
                type: {
                    name: "String",
                },
            },
            recoveryAzureStorageAccountId: {
                serializedName: "recoveryAzureStorageAccountId",
                type: {
                    name: "String",
                },
            },
            primaryDiskAzureStorageAccountId: {
                serializedName: "primaryDiskAzureStorageAccountId",
                type: {
                    name: "String",
                },
            },
            recoveryDiskUri: {
                serializedName: "recoveryDiskUri",
                type: {
                    name: "String",
                },
            },
            diskName: {
                serializedName: "diskName",
                type: {
                    name: "String",
                },
            },
            diskCapacityInBytes: {
                serializedName: "diskCapacityInBytes",
                type: {
                    name: "Number",
                },
            },
            primaryStagingAzureStorageAccountId: {
                serializedName: "primaryStagingAzureStorageAccountId",
                type: {
                    name: "String",
                },
            },
            diskType: {
                serializedName: "diskType",
                type: {
                    name: "String",
                },
            },
            resyncRequired: {
                serializedName: "resyncRequired",
                type: {
                    name: "Boolean",
                },
            },
            monitoringPercentageCompletion: {
                serializedName: "monitoringPercentageCompletion",
                type: {
                    name: "Number",
                },
            },
            monitoringJobType: {
                serializedName: "monitoringJobType",
                type: {
                    name: "String",
                },
            },
            dataPendingInStagingStorageAccountInMB: {
                serializedName: "dataPendingInStagingStorageAccountInMB",
                type: {
                    name: "Number",
                },
            },
            dataPendingAtSourceAgentInMB: {
                serializedName: "dataPendingAtSourceAgentInMB",
                type: {
                    name: "Number",
                },
            },
            diskState: {
                serializedName: "diskState",
                type: {
                    name: "String",
                },
            },
            allowedDiskLevelOperation: {
                serializedName: "allowedDiskLevelOperation",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            isDiskEncrypted: {
                serializedName: "isDiskEncrypted",
                type: {
                    name: "Boolean",
                },
            },
            secretIdentifier: {
                serializedName: "secretIdentifier",
                type: {
                    name: "String",
                },
            },
            dekKeyVaultArmId: {
                serializedName: "dekKeyVaultArmId",
                type: {
                    name: "String",
                },
            },
            isDiskKeyEncrypted: {
                serializedName: "isDiskKeyEncrypted",
                type: {
                    name: "Boolean",
                },
            },
            keyIdentifier: {
                serializedName: "keyIdentifier",
                type: {
                    name: "String",
                },
            },
            kekKeyVaultArmId: {
                serializedName: "kekKeyVaultArmId",
                type: {
                    name: "String",
                },
            },
            failoverDiskName: {
                serializedName: "failoverDiskName",
                type: {
                    name: "String",
                },
            },
            tfoDiskName: {
                serializedName: "tfoDiskName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const A2AProtectedManagedDiskDetails = {
    type: {
        name: "Composite",
        className: "A2AProtectedManagedDiskDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                type: {
                    name: "String",
                },
            },
            recoveryResourceGroupId: {
                serializedName: "recoveryResourceGroupId",
                type: {
                    name: "String",
                },
            },
            recoveryTargetDiskId: {
                serializedName: "recoveryTargetDiskId",
                type: {
                    name: "String",
                },
            },
            recoveryReplicaDiskId: {
                serializedName: "recoveryReplicaDiskId",
                type: {
                    name: "String",
                },
            },
            recoveryOrignalTargetDiskId: {
                serializedName: "recoveryOrignalTargetDiskId",
                type: {
                    name: "String",
                },
            },
            recoveryReplicaDiskAccountType: {
                serializedName: "recoveryReplicaDiskAccountType",
                type: {
                    name: "String",
                },
            },
            recoveryTargetDiskAccountType: {
                serializedName: "recoveryTargetDiskAccountType",
                type: {
                    name: "String",
                },
            },
            recoveryDiskEncryptionSetId: {
                serializedName: "recoveryDiskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
            primaryDiskEncryptionSetId: {
                serializedName: "primaryDiskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
            diskName: {
                serializedName: "diskName",
                type: {
                    name: "String",
                },
            },
            diskCapacityInBytes: {
                serializedName: "diskCapacityInBytes",
                type: {
                    name: "Number",
                },
            },
            primaryStagingAzureStorageAccountId: {
                serializedName: "primaryStagingAzureStorageAccountId",
                type: {
                    name: "String",
                },
            },
            diskType: {
                serializedName: "diskType",
                type: {
                    name: "String",
                },
            },
            resyncRequired: {
                serializedName: "resyncRequired",
                type: {
                    name: "Boolean",
                },
            },
            monitoringPercentageCompletion: {
                serializedName: "monitoringPercentageCompletion",
                type: {
                    name: "Number",
                },
            },
            monitoringJobType: {
                serializedName: "monitoringJobType",
                type: {
                    name: "String",
                },
            },
            dataPendingInStagingStorageAccountInMB: {
                serializedName: "dataPendingInStagingStorageAccountInMB",
                type: {
                    name: "Number",
                },
            },
            dataPendingAtSourceAgentInMB: {
                serializedName: "dataPendingAtSourceAgentInMB",
                type: {
                    name: "Number",
                },
            },
            diskState: {
                serializedName: "diskState",
                type: {
                    name: "String",
                },
            },
            allowedDiskLevelOperation: {
                serializedName: "allowedDiskLevelOperation",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            isDiskEncrypted: {
                serializedName: "isDiskEncrypted",
                type: {
                    name: "Boolean",
                },
            },
            secretIdentifier: {
                serializedName: "secretIdentifier",
                type: {
                    name: "String",
                },
            },
            dekKeyVaultArmId: {
                serializedName: "dekKeyVaultArmId",
                type: {
                    name: "String",
                },
            },
            isDiskKeyEncrypted: {
                serializedName: "isDiskKeyEncrypted",
                type: {
                    name: "Boolean",
                },
            },
            keyIdentifier: {
                serializedName: "keyIdentifier",
                type: {
                    name: "String",
                },
            },
            kekKeyVaultArmId: {
                serializedName: "kekKeyVaultArmId",
                type: {
                    name: "String",
                },
            },
            failoverDiskName: {
                serializedName: "failoverDiskName",
                type: {
                    name: "String",
                },
            },
            tfoDiskName: {
                serializedName: "tfoDiskName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const A2AUnprotectedDiskDetails = {
    type: {
        name: "Composite",
        className: "A2AUnprotectedDiskDetails",
        modelProperties: {
            diskLunId: {
                serializedName: "diskLunId",
                type: {
                    name: "Number",
                },
            },
            diskAutoProtectionStatus: {
                serializedName: "diskAutoProtectionStatus",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VMNicDetails = {
    type: {
        name: "Composite",
        className: "VMNicDetails",
        modelProperties: {
            nicId: {
                serializedName: "nicId",
                type: {
                    name: "String",
                },
            },
            replicaNicId: {
                serializedName: "replicaNicId",
                type: {
                    name: "String",
                },
            },
            sourceNicArmId: {
                serializedName: "sourceNicArmId",
                type: {
                    name: "String",
                },
            },
            vMNetworkName: {
                serializedName: "vMNetworkName",
                type: {
                    name: "String",
                },
            },
            recoveryVMNetworkId: {
                serializedName: "recoveryVMNetworkId",
                type: {
                    name: "String",
                },
            },
            ipConfigs: {
                serializedName: "ipConfigs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IPConfigDetails",
                        },
                    },
                },
            },
            selectionType: {
                serializedName: "selectionType",
                type: {
                    name: "String",
                },
            },
            recoveryNetworkSecurityGroupId: {
                serializedName: "recoveryNetworkSecurityGroupId",
                type: {
                    name: "String",
                },
            },
            enableAcceleratedNetworkingOnRecovery: {
                serializedName: "enableAcceleratedNetworkingOnRecovery",
                type: {
                    name: "Boolean",
                },
            },
            tfoVMNetworkId: {
                serializedName: "tfoVMNetworkId",
                type: {
                    name: "String",
                },
            },
            tfoNetworkSecurityGroupId: {
                serializedName: "tfoNetworkSecurityGroupId",
                type: {
                    name: "String",
                },
            },
            enableAcceleratedNetworkingOnTfo: {
                serializedName: "enableAcceleratedNetworkingOnTfo",
                type: {
                    name: "Boolean",
                },
            },
            recoveryNicName: {
                serializedName: "recoveryNicName",
                type: {
                    name: "String",
                },
            },
            recoveryNicResourceGroupName: {
                serializedName: "recoveryNicResourceGroupName",
                type: {
                    name: "String",
                },
            },
            reuseExistingNic: {
                defaultValue: false,
                serializedName: "reuseExistingNic",
                type: {
                    name: "Boolean",
                },
            },
            tfoRecoveryNicName: {
                serializedName: "tfoRecoveryNicName",
                type: {
                    name: "String",
                },
            },
            tfoRecoveryNicResourceGroupName: {
                serializedName: "tfoRecoveryNicResourceGroupName",
                type: {
                    name: "String",
                },
            },
            tfoReuseExistingNic: {
                defaultValue: false,
                serializedName: "tfoReuseExistingNic",
                type: {
                    name: "Boolean",
                },
            },
            targetNicName: {
                serializedName: "targetNicName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const IPConfigDetails = {
    type: {
        name: "Composite",
        className: "IPConfigDetails",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            isPrimary: {
                serializedName: "isPrimary",
                type: {
                    name: "Boolean",
                },
            },
            subnetName: {
                serializedName: "subnetName",
                type: {
                    name: "String",
                },
            },
            staticIPAddress: {
                serializedName: "staticIPAddress",
                type: {
                    name: "String",
                },
            },
            ipAddressType: {
                serializedName: "ipAddressType",
                type: {
                    name: "String",
                },
            },
            isSeletedForFailover: {
                serializedName: "isSeletedForFailover",
                type: {
                    name: "Boolean",
                },
            },
            recoverySubnetName: {
                serializedName: "recoverySubnetName",
                type: {
                    name: "String",
                },
            },
            recoveryStaticIPAddress: {
                serializedName: "recoveryStaticIPAddress",
                type: {
                    name: "String",
                },
            },
            recoveryIPAddressType: {
                serializedName: "recoveryIPAddressType",
                type: {
                    name: "String",
                },
            },
            recoveryPublicIPAddressId: {
                serializedName: "recoveryPublicIPAddressId",
                type: {
                    name: "String",
                },
            },
            recoveryLBBackendAddressPoolIds: {
                serializedName: "recoveryLBBackendAddressPoolIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            tfoSubnetName: {
                serializedName: "tfoSubnetName",
                type: {
                    name: "String",
                },
            },
            tfoStaticIPAddress: {
                serializedName: "tfoStaticIPAddress",
                type: {
                    name: "String",
                },
            },
            tfoPublicIPAddressId: {
                serializedName: "tfoPublicIPAddressId",
                type: {
                    name: "String",
                },
            },
            tfoLBBackendAddressPoolIds: {
                serializedName: "tfoLBBackendAddressPoolIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const AzureToAzureVmSyncedConfigDetails = {
    type: {
        name: "Composite",
        className: "AzureToAzureVmSyncedConfigDetails",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            inputEndpoints: {
                serializedName: "inputEndpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InputEndpoint",
                        },
                    },
                },
            },
        },
    },
};
const InputEndpoint = {
    type: {
        name: "Composite",
        className: "InputEndpoint",
        modelProperties: {
            endpointName: {
                serializedName: "endpointName",
                type: {
                    name: "String",
                },
            },
            privatePort: {
                serializedName: "privatePort",
                type: {
                    name: "Number",
                },
            },
            publicPort: {
                serializedName: "publicPort",
                type: {
                    name: "Number",
                },
            },
            protocol: {
                serializedName: "protocol",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const A2AVmManagedDiskUpdateDetails = {
    type: {
        name: "Composite",
        className: "A2AVmManagedDiskUpdateDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                type: {
                    name: "String",
                },
            },
            recoveryTargetDiskAccountType: {
                serializedName: "recoveryTargetDiskAccountType",
                type: {
                    name: "String",
                },
            },
            recoveryReplicaDiskAccountType: {
                serializedName: "recoveryReplicaDiskAccountType",
                type: {
                    name: "String",
                },
            },
            diskEncryptionInfo: {
                serializedName: "diskEncryptionInfo",
                type: {
                    name: "Composite",
                    className: "DiskEncryptionInfo",
                },
            },
            failoverDiskName: {
                serializedName: "failoverDiskName",
                type: {
                    name: "String",
                },
            },
            tfoDiskName: {
                serializedName: "tfoDiskName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const A2AZoneDetails = {
    type: {
        name: "Composite",
        className: "A2AZoneDetails",
        modelProperties: {
            source: {
                serializedName: "source",
                type: {
                    name: "String",
                },
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const AgentDetails = {
    type: {
        name: "Composite",
        className: "AgentDetails",
        modelProperties: {
            agentId: {
                serializedName: "agentId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            machineId: {
                serializedName: "machineId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            disks: {
                serializedName: "disks",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AgentDiskDetails",
                        },
                    },
                },
            },
        },
    },
};
const AgentDiskDetails = {
    type: {
        name: "Composite",
        className: "AgentDiskDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            diskName: {
                serializedName: "diskName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            isOSDisk: {
                serializedName: "isOSDisk",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            capacityInBytes: {
                serializedName: "capacityInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            lunId: {
                serializedName: "lunId",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const ApplianceMonitoringDetails = {
    type: {
        name: "Composite",
        className: "ApplianceMonitoringDetails",
        modelProperties: {
            cpuDetails: {
                serializedName: "cpuDetails",
                type: {
                    name: "Composite",
                    className: "ApplianceResourceDetails",
                },
            },
            ramDetails: {
                serializedName: "ramDetails",
                type: {
                    name: "Composite",
                    className: "ApplianceResourceDetails",
                },
            },
            datastoreSnapshot: {
                serializedName: "datastoreSnapshot",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataStoreUtilizationDetails",
                        },
                    },
                },
            },
            disksReplicationDetails: {
                serializedName: "disksReplicationDetails",
                type: {
                    name: "Composite",
                    className: "ApplianceResourceDetails",
                },
            },
            esxiNfcBuffer: {
                serializedName: "esxiNfcBuffer",
                type: {
                    name: "Composite",
                    className: "ApplianceResourceDetails",
                },
            },
            networkBandwidth: {
                serializedName: "networkBandwidth",
                type: {
                    name: "Composite",
                    className: "ApplianceResourceDetails",
                },
            },
        },
    },
};
const ApplianceResourceDetails = {
    type: {
        name: "Composite",
        className: "ApplianceResourceDetails",
        modelProperties: {
            capacity: {
                serializedName: "capacity",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            processUtilization: {
                serializedName: "processUtilization",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            totalUtilization: {
                serializedName: "totalUtilization",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DataStoreUtilizationDetails = {
    type: {
        name: "Composite",
        className: "DataStoreUtilizationDetails",
        modelProperties: {
            totalSnapshotsSupported: {
                serializedName: "totalSnapshotsSupported",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            totalSnapshotsCreated: {
                serializedName: "totalSnapshotsCreated",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            dataStoreName: {
                serializedName: "dataStoreName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ApplianceQueryParameter = {
    type: {
        name: "Composite",
        className: "ApplianceQueryParameter",
        modelProperties: {
            providerType: {
                serializedName: "providerType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const AzureVmDiskDetails = {
    type: {
        name: "Composite",
        className: "AzureVmDiskDetails",
        modelProperties: {
            vhdType: {
                serializedName: "vhdType",
                type: {
                    name: "String",
                },
            },
            vhdId: {
                serializedName: "vhdId",
                type: {
                    name: "String",
                },
            },
            diskId: {
                serializedName: "diskId",
                type: {
                    name: "String",
                },
            },
            vhdName: {
                serializedName: "vhdName",
                type: {
                    name: "String",
                },
            },
            maxSizeMB: {
                serializedName: "maxSizeMB",
                type: {
                    name: "String",
                },
            },
            targetDiskLocation: {
                serializedName: "targetDiskLocation",
                type: {
                    name: "String",
                },
            },
            targetDiskName: {
                serializedName: "targetDiskName",
                type: {
                    name: "String",
                },
            },
            lunId: {
                serializedName: "lunId",
                type: {
                    name: "String",
                },
            },
            diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
            customTargetDiskName: {
                serializedName: "customTargetDiskName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InconsistentVmDetails = {
    type: {
        name: "Composite",
        className: "InconsistentVmDetails",
        modelProperties: {
            vmName: {
                serializedName: "vmName",
                type: {
                    name: "String",
                },
            },
            cloudName: {
                serializedName: "cloudName",
                type: {
                    name: "String",
                },
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            errorIds: {
                serializedName: "errorIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const DataStore = {
    type: {
        name: "Composite",
        className: "DataStore",
        modelProperties: {
            symbolicName: {
                serializedName: "symbolicName",
                type: {
                    name: "String",
                },
            },
            uuid: {
                serializedName: "uuid",
                type: {
                    name: "String",
                },
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "String",
                },
            },
            freeSpace: {
                serializedName: "freeSpace",
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DiskDetails = {
    type: {
        name: "Composite",
        className: "DiskDetails",
        modelProperties: {
            maxSizeMB: {
                serializedName: "maxSizeMB",
                type: {
                    name: "Number",
                },
            },
            vhdType: {
                serializedName: "vhdType",
                type: {
                    name: "String",
                },
            },
            vhdId: {
                serializedName: "vhdId",
                type: {
                    name: "String",
                },
            },
            vhdName: {
                serializedName: "vhdName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DiskVolumeDetails = {
    type: {
        name: "Composite",
        className: "DiskVolumeDetails",
        modelProperties: {
            label: {
                serializedName: "label",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const DraDetails = {
    type: {
        name: "Composite",
        className: "DraDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastHeartbeatUtc: {
                serializedName: "lastHeartbeatUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            health: {
                serializedName: "health",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            forwardProtectedItemCount: {
                serializedName: "forwardProtectedItemCount",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            reverseProtectedItemCount: {
                serializedName: "reverseProtectedItemCount",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const EventQueryParameter = {
    type: {
        name: "Composite",
        className: "EventQueryParameter",
        modelProperties: {
            eventCode: {
                serializedName: "eventCode",
                type: {
                    name: "String",
                },
            },
            severity: {
                serializedName: "severity",
                type: {
                    name: "String",
                },
            },
            eventType: {
                serializedName: "eventType",
                type: {
                    name: "String",
                },
            },
            fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String",
                },
            },
            affectedObjectFriendlyName: {
                serializedName: "affectedObjectFriendlyName",
                type: {
                    name: "String",
                },
            },
            affectedObjectCorrelationId: {
                serializedName: "affectedObjectCorrelationId",
                type: {
                    name: "String",
                },
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime",
                },
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const FabricQueryParameter = {
    type: {
        name: "Composite",
        className: "FabricQueryParameter",
        modelProperties: {
            zoneToZoneMappings: {
                serializedName: "zoneToZoneMappings",
                type: {
                    name: "String",
                },
            },
            extendedLocationMappings: {
                serializedName: "extendedLocationMappings",
                type: {
                    name: "String",
                },
            },
            locationDetails: {
                serializedName: "locationDetails",
                type: {
                    name: "String",
                },
            },
            fetchAgentDetails: {
                serializedName: "fetchAgentDetails",
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                type: {
                    name: "String",
                },
            },
            fqdn: {
                serializedName: "fqdn",
                type: {
                    name: "String",
                },
            },
            discoveryType: {
                serializedName: "discoveryType",
                type: {
                    name: "String",
                },
            },
            osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const JobEntity = {
    type: {
        name: "Composite",
        className: "JobEntity",
        modelProperties: {
            jobId: {
                serializedName: "jobId",
                type: {
                    name: "String",
                },
            },
            jobFriendlyName: {
                serializedName: "jobFriendlyName",
                type: {
                    name: "String",
                },
            },
            targetObjectId: {
                serializedName: "targetObjectId",
                type: {
                    name: "String",
                },
            },
            targetObjectName: {
                serializedName: "targetObjectName",
                type: {
                    name: "String",
                },
            },
            targetInstanceType: {
                serializedName: "targetInstanceType",
                type: {
                    name: "String",
                },
            },
            jobScenarioName: {
                serializedName: "jobScenarioName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const FailoverReplicationProtectedItemDetails = {
    type: {
        name: "Composite",
        className: "FailoverReplicationProtectedItemDetails",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            testVmName: {
                serializedName: "testVmName",
                type: {
                    name: "String",
                },
            },
            testVmFriendlyName: {
                serializedName: "testVmFriendlyName",
                type: {
                    name: "String",
                },
            },
            networkConnectionStatus: {
                serializedName: "networkConnectionStatus",
                type: {
                    name: "String",
                },
            },
            networkFriendlyName: {
                serializedName: "networkFriendlyName",
                type: {
                    name: "String",
                },
            },
            subnet: {
                serializedName: "subnet",
                type: {
                    name: "String",
                },
            },
            recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            },
            recoveryPointTime: {
                serializedName: "recoveryPointTime",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const GatewayOperationDetails = {
    type: {
        name: "Composite",
        className: "GatewayOperationDetails",
        modelProperties: {
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            progressPercentage: {
                serializedName: "progressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            timeElapsed: {
                serializedName: "timeElapsed",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            timeRemaining: {
                serializedName: "timeRemaining",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            uploadSpeed: {
                serializedName: "uploadSpeed",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            hostName: {
                serializedName: "hostName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            dataStores: {
                serializedName: "dataStores",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            vmwareReadThroughput: {
                serializedName: "vmwareReadThroughput",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const HyperVHostDetails = {
    type: {
        name: "Composite",
        className: "HyperVHostDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            marsAgentVersion: {
                serializedName: "marsAgentVersion",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const HyperVReplicaAzureDiskInputDetails = {
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureDiskInputDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                type: {
                    name: "String",
                },
            },
            logStorageAccountId: {
                serializedName: "logStorageAccountId",
                type: {
                    name: "String",
                },
            },
            diskType: {
                serializedName: "diskType",
                type: {
                    name: "String",
                },
            },
            diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const HyperVReplicaAzureManagedDiskDetails = {
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureManagedDiskDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                type: {
                    name: "String",
                },
            },
            seedManagedDiskId: {
                serializedName: "seedManagedDiskId",
                type: {
                    name: "String",
                },
            },
            replicaDiskType: {
                serializedName: "replicaDiskType",
                type: {
                    name: "String",
                },
            },
            diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InitialReplicationDetails = {
    type: {
        name: "Composite",
        className: "InitialReplicationDetails",
        modelProperties: {
            initialReplicationType: {
                serializedName: "initialReplicationType",
                type: {
                    name: "String",
                },
            },
            initialReplicationProgressPercentage: {
                serializedName: "initialReplicationProgressPercentage",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const OSDetails = {
    type: {
        name: "Composite",
        className: "OSDetails",
        modelProperties: {
            osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            },
            productType: {
                serializedName: "productType",
                type: {
                    name: "String",
                },
            },
            osEdition: {
                serializedName: "osEdition",
                type: {
                    name: "String",
                },
            },
            oSVersion: {
                serializedName: "oSVersion",
                type: {
                    name: "String",
                },
            },
            oSMajorVersion: {
                serializedName: "oSMajorVersion",
                type: {
                    name: "String",
                },
            },
            oSMinorVersion: {
                serializedName: "oSMinorVersion",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const OSUpgradeSupportedVersions = {
    type: {
        name: "Composite",
        className: "OSUpgradeSupportedVersions",
        modelProperties: {
            supportedSourceOsVersion: {
                serializedName: "supportedSourceOsVersion",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            supportedTargetOsVersions: {
                serializedName: "supportedTargetOsVersions",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
const UpdateDiskInput = {
    type: {
        name: "Composite",
        className: "UpdateDiskInput",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                required: true,
                type: {
                    name: "String",
                },
            },
            targetDiskName: {
                serializedName: "targetDiskName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageAgentDetails = {
    type: {
        name: "Composite",
        className: "InMageAgentDetails",
        modelProperties: {
            agentVersion: {
                serializedName: "agentVersion",
                type: {
                    name: "String",
                },
            },
            agentUpdateStatus: {
                serializedName: "agentUpdateStatus",
                type: {
                    name: "String",
                },
            },
            postUpdateRebootStatus: {
                serializedName: "postUpdateRebootStatus",
                type: {
                    name: "String",
                },
            },
            agentExpiryDate: {
                serializedName: "agentExpiryDate",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const InMageAzureV2DiskInputDetails = {
    type: {
        name: "Composite",
        className: "InMageAzureV2DiskInputDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                type: {
                    name: "String",
                },
            },
            logStorageAccountId: {
                serializedName: "logStorageAccountId",
                type: {
                    name: "String",
                },
            },
            diskType: {
                serializedName: "diskType",
                type: {
                    name: "String",
                },
            },
            diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageAzureV2ManagedDiskDetails = {
    type: {
        name: "Composite",
        className: "InMageAzureV2ManagedDiskDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                type: {
                    name: "String",
                },
            },
            seedManagedDiskId: {
                serializedName: "seedManagedDiskId",
                type: {
                    name: "String",
                },
            },
            replicaDiskType: {
                serializedName: "replicaDiskType",
                type: {
                    name: "String",
                },
            },
            diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
            targetDiskName: {
                serializedName: "targetDiskName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageAzureV2ProtectedDiskDetails = {
    type: {
        name: "Composite",
        className: "InMageAzureV2ProtectedDiskDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                type: {
                    name: "String",
                },
            },
            diskName: {
                serializedName: "diskName",
                type: {
                    name: "String",
                },
            },
            protectionStage: {
                serializedName: "protectionStage",
                type: {
                    name: "String",
                },
            },
            healthErrorCode: {
                serializedName: "healthErrorCode",
                type: {
                    name: "String",
                },
            },
            rpoInSeconds: {
                serializedName: "rpoInSeconds",
                type: {
                    name: "Number",
                },
            },
            resyncRequired: {
                serializedName: "resyncRequired",
                type: {
                    name: "String",
                },
            },
            resyncProgressPercentage: {
                serializedName: "resyncProgressPercentage",
                type: {
                    name: "Number",
                },
            },
            resyncDurationInSeconds: {
                serializedName: "resyncDurationInSeconds",
                type: {
                    name: "Number",
                },
            },
            diskCapacityInBytes: {
                serializedName: "diskCapacityInBytes",
                type: {
                    name: "Number",
                },
            },
            fileSystemCapacityInBytes: {
                serializedName: "fileSystemCapacityInBytes",
                type: {
                    name: "Number",
                },
            },
            sourceDataInMegaBytes: {
                serializedName: "sourceDataInMegaBytes",
                type: {
                    name: "Number",
                },
            },
            psDataInMegaBytes: {
                serializedName: "psDataInMegaBytes",
                type: {
                    name: "Number",
                },
            },
            targetDataInMegaBytes: {
                serializedName: "targetDataInMegaBytes",
                type: {
                    name: "Number",
                },
            },
            diskResized: {
                serializedName: "diskResized",
                type: {
                    name: "String",
                },
            },
            lastRpoCalculatedTime: {
                serializedName: "lastRpoCalculatedTime",
                type: {
                    name: "DateTime",
                },
            },
            resyncProcessedBytes: {
                serializedName: "resyncProcessedBytes",
                type: {
                    name: "Number",
                },
            },
            resyncTotalTransferredBytes: {
                serializedName: "resyncTotalTransferredBytes",
                type: {
                    name: "Number",
                },
            },
            resyncLast15MinutesTransferredBytes: {
                serializedName: "resyncLast15MinutesTransferredBytes",
                type: {
                    name: "Number",
                },
            },
            resyncLastDataTransferTimeUTC: {
                serializedName: "resyncLastDataTransferTimeUTC",
                type: {
                    name: "DateTime",
                },
            },
            resyncStartTime: {
                serializedName: "resyncStartTime",
                type: {
                    name: "DateTime",
                },
            },
            progressHealth: {
                serializedName: "progressHealth",
                type: {
                    name: "String",
                },
            },
            progressStatus: {
                serializedName: "progressStatus",
                type: {
                    name: "String",
                },
            },
            secondsToTakeSwitchProvider: {
                serializedName: "secondsToTakeSwitchProvider",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const InMageAzureV2SwitchProviderBlockingErrorDetails = {
    type: {
        name: "Composite",
        className: "InMageAzureV2SwitchProviderBlockingErrorDetails",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessage: {
                serializedName: "errorMessage",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            possibleCauses: {
                serializedName: "possibleCauses",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            recommendedAction: {
                serializedName: "recommendedAction",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessageParameters: {
                serializedName: "errorMessageParameters",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            errorTags: {
                serializedName: "errorTags",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
        },
    },
};
const InMageAzureV2SwitchProviderDetails = {
    type: {
        name: "Composite",
        className: "InMageAzureV2SwitchProviderDetails",
        modelProperties: {
            targetVaultId: {
                serializedName: "targetVaultId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            targetResourceId: {
                serializedName: "targetResourceId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            targetFabricId: {
                serializedName: "targetFabricId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            targetApplianceId: {
                serializedName: "targetApplianceId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageDiskDetails = {
    type: {
        name: "Composite",
        className: "InMageDiskDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                type: {
                    name: "String",
                },
            },
            diskName: {
                serializedName: "diskName",
                type: {
                    name: "String",
                },
            },
            diskSizeInMB: {
                serializedName: "diskSizeInMB",
                type: {
                    name: "String",
                },
            },
            diskType: {
                serializedName: "diskType",
                type: {
                    name: "String",
                },
            },
            diskConfiguration: {
                serializedName: "diskConfiguration",
                type: {
                    name: "String",
                },
            },
            volumeList: {
                serializedName: "volumeList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DiskVolumeDetails",
                        },
                    },
                },
            },
        },
    },
};
const InMageDiskExclusionInput = {
    type: {
        name: "Composite",
        className: "InMageDiskExclusionInput",
        modelProperties: {
            volumeOptions: {
                serializedName: "volumeOptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageVolumeExclusionOptions",
                        },
                    },
                },
            },
            diskSignatureOptions: {
                serializedName: "diskSignatureOptions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageDiskSignatureExclusionOptions",
                        },
                    },
                },
            },
        },
    },
};
const InMageVolumeExclusionOptions = {
    type: {
        name: "Composite",
        className: "InMageVolumeExclusionOptions",
        modelProperties: {
            volumeLabel: {
                serializedName: "volumeLabel",
                type: {
                    name: "String",
                },
            },
            onlyExcludeIfSingleVolume: {
                serializedName: "onlyExcludeIfSingleVolume",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageDiskSignatureExclusionOptions = {
    type: {
        name: "Composite",
        className: "InMageDiskSignatureExclusionOptions",
        modelProperties: {
            diskSignature: {
                serializedName: "diskSignature",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageFabricSwitchProviderBlockingErrorDetails = {
    type: {
        name: "Composite",
        className: "InMageFabricSwitchProviderBlockingErrorDetails",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessage: {
                serializedName: "errorMessage",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            possibleCauses: {
                serializedName: "possibleCauses",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            recommendedAction: {
                serializedName: "recommendedAction",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessageParameters: {
                serializedName: "errorMessageParameters",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            errorTags: {
                serializedName: "errorTags",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
        },
    },
};
const InMageProtectedDiskDetails = {
    type: {
        name: "Composite",
        className: "InMageProtectedDiskDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                type: {
                    name: "String",
                },
            },
            diskName: {
                serializedName: "diskName",
                type: {
                    name: "String",
                },
            },
            protectionStage: {
                serializedName: "protectionStage",
                type: {
                    name: "String",
                },
            },
            healthErrorCode: {
                serializedName: "healthErrorCode",
                type: {
                    name: "String",
                },
            },
            rpoInSeconds: {
                serializedName: "rpoInSeconds",
                type: {
                    name: "Number",
                },
            },
            resyncRequired: {
                serializedName: "resyncRequired",
                type: {
                    name: "String",
                },
            },
            resyncProgressPercentage: {
                serializedName: "resyncProgressPercentage",
                type: {
                    name: "Number",
                },
            },
            resyncDurationInSeconds: {
                serializedName: "resyncDurationInSeconds",
                type: {
                    name: "Number",
                },
            },
            diskCapacityInBytes: {
                serializedName: "diskCapacityInBytes",
                type: {
                    name: "Number",
                },
            },
            fileSystemCapacityInBytes: {
                serializedName: "fileSystemCapacityInBytes",
                type: {
                    name: "Number",
                },
            },
            sourceDataInMB: {
                serializedName: "sourceDataInMB",
                type: {
                    name: "Number",
                },
            },
            psDataInMB: {
                serializedName: "psDataInMB",
                type: {
                    name: "Number",
                },
            },
            targetDataInMB: {
                serializedName: "targetDataInMB",
                type: {
                    name: "Number",
                },
            },
            diskResized: {
                serializedName: "diskResized",
                type: {
                    name: "String",
                },
            },
            lastRpoCalculatedTime: {
                serializedName: "lastRpoCalculatedTime",
                type: {
                    name: "DateTime",
                },
            },
            resyncProcessedBytes: {
                serializedName: "resyncProcessedBytes",
                type: {
                    name: "Number",
                },
            },
            resyncTotalTransferredBytes: {
                serializedName: "resyncTotalTransferredBytes",
                type: {
                    name: "Number",
                },
            },
            resyncLast15MinutesTransferredBytes: {
                serializedName: "resyncLast15MinutesTransferredBytes",
                type: {
                    name: "Number",
                },
            },
            resyncLastDataTransferTimeUTC: {
                serializedName: "resyncLastDataTransferTimeUTC",
                type: {
                    name: "DateTime",
                },
            },
            resyncStartTime: {
                serializedName: "resyncStartTime",
                type: {
                    name: "DateTime",
                },
            },
            progressHealth: {
                serializedName: "progressHealth",
                type: {
                    name: "String",
                },
            },
            progressStatus: {
                serializedName: "progressStatus",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageRcmAgentUpgradeBlockingErrorDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmAgentUpgradeBlockingErrorDetails",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessage: {
                serializedName: "errorMessage",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            possibleCauses: {
                serializedName: "possibleCauses",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            recommendedAction: {
                serializedName: "recommendedAction",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessageParameters: {
                serializedName: "errorMessageParameters",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            errorTags: {
                serializedName: "errorTags",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
        },
    },
};
const InMageRcmApplianceDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmApplianceDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fabricArmId: {
                serializedName: "fabricArmId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            processServer: {
                serializedName: "processServer",
                type: {
                    name: "Composite",
                    className: "ProcessServerDetails",
                },
            },
            rcmProxy: {
                serializedName: "rcmProxy",
                type: {
                    name: "Composite",
                    className: "RcmProxyDetails",
                },
            },
            pushInstaller: {
                serializedName: "pushInstaller",
                type: {
                    name: "Composite",
                    className: "PushInstallerDetails",
                },
            },
            replicationAgent: {
                serializedName: "replicationAgent",
                type: {
                    name: "Composite",
                    className: "ReplicationAgentDetails",
                },
            },
            reprotectAgent: {
                serializedName: "reprotectAgent",
                type: {
                    name: "Composite",
                    className: "ReprotectAgentDetails",
                },
            },
            marsAgent: {
                serializedName: "marsAgent",
                type: {
                    name: "Composite",
                    className: "MarsAgentDetails",
                },
            },
            dra: {
                serializedName: "dra",
                type: {
                    name: "Composite",
                    className: "DraDetails",
                },
            },
            switchProviderBlockingErrorDetails: {
                serializedName: "switchProviderBlockingErrorDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageRcmFabricSwitchProviderBlockingErrorDetails",
                        },
                    },
                },
            },
        },
    },
};
const ProcessServerDetails = {
    type: {
        name: "Composite",
        className: "ProcessServerDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fabricObjectId: {
                serializedName: "fabricObjectId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            ipAddresses: {
                serializedName: "ipAddresses",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastHeartbeatUtc: {
                serializedName: "lastHeartbeatUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            totalMemoryInBytes: {
                serializedName: "totalMemoryInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            availableMemoryInBytes: {
                serializedName: "availableMemoryInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            usedMemoryInBytes: {
                serializedName: "usedMemoryInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            memoryUsagePercentage: {
                serializedName: "memoryUsagePercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            totalSpaceInBytes: {
                serializedName: "totalSpaceInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            availableSpaceInBytes: {
                serializedName: "availableSpaceInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            usedSpaceInBytes: {
                serializedName: "usedSpaceInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            freeSpacePercentage: {
                serializedName: "freeSpacePercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            throughputUploadPendingDataInBytes: {
                serializedName: "throughputUploadPendingDataInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            throughputInBytes: {
                serializedName: "throughputInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            processorUsagePercentage: {
                serializedName: "processorUsagePercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            throughputStatus: {
                serializedName: "throughputStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            systemLoad: {
                serializedName: "systemLoad",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            systemLoadStatus: {
                serializedName: "systemLoadStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            diskUsageStatus: {
                serializedName: "diskUsageStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            memoryUsageStatus: {
                serializedName: "memoryUsageStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            processorUsageStatus: {
                serializedName: "processorUsageStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            health: {
                serializedName: "health",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            protectedItemCount: {
                serializedName: "protectedItemCount",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            historicHealth: {
                serializedName: "historicHealth",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RcmProxyDetails = {
    type: {
        name: "Composite",
        className: "RcmProxyDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fabricObjectId: {
                serializedName: "fabricObjectId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            clientAuthenticationType: {
                serializedName: "clientAuthenticationType",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastHeartbeatUtc: {
                serializedName: "lastHeartbeatUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            health: {
                serializedName: "health",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
        },
    },
};
const PushInstallerDetails = {
    type: {
        name: "Composite",
        className: "PushInstallerDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fabricObjectId: {
                serializedName: "fabricObjectId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastHeartbeatUtc: {
                serializedName: "lastHeartbeatUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            health: {
                serializedName: "health",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
        },
    },
};
const ReplicationAgentDetails = {
    type: {
        name: "Composite",
        className: "ReplicationAgentDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fabricObjectId: {
                serializedName: "fabricObjectId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastHeartbeatUtc: {
                serializedName: "lastHeartbeatUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            health: {
                serializedName: "health",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
        },
    },
};
const ReprotectAgentDetails = {
    type: {
        name: "Composite",
        className: "ReprotectAgentDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fabricObjectId: {
                serializedName: "fabricObjectId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastHeartbeatUtc: {
                serializedName: "lastHeartbeatUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            health: {
                serializedName: "health",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            protectedItemCount: {
                serializedName: "protectedItemCount",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            accessibleDatastores: {
                serializedName: "accessibleDatastores",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            vcenterId: {
                serializedName: "vcenterId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastDiscoveryInUtc: {
                serializedName: "lastDiscoveryInUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const MarsAgentDetails = {
    type: {
        name: "Composite",
        className: "MarsAgentDetails",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            biosId: {
                serializedName: "biosId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fabricObjectId: {
                serializedName: "fabricObjectId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastHeartbeatUtc: {
                serializedName: "lastHeartbeatUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            health: {
                serializedName: "health",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
        },
    },
};
const InMageRcmFabricSwitchProviderBlockingErrorDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmFabricSwitchProviderBlockingErrorDetails",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessage: {
                serializedName: "errorMessage",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            possibleCauses: {
                serializedName: "possibleCauses",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            recommendedAction: {
                serializedName: "recommendedAction",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessageParameters: {
                serializedName: "errorMessageParameters",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            errorTags: {
                serializedName: "errorTags",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
        },
    },
};
const InMageRcmDiscoveredProtectedVmDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmDiscoveredProtectedVmDetails",
        modelProperties: {
            vCenterId: {
                serializedName: "vCenterId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            vCenterFqdn: {
                serializedName: "vCenterFqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            datastores: {
                serializedName: "datastores",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            ipAddresses: {
                serializedName: "ipAddresses",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            vmwareToolsStatus: {
                serializedName: "vmwareToolsStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            powerStatus: {
                serializedName: "powerStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            vmFqdn: {
                serializedName: "vmFqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            osName: {
                serializedName: "osName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            createdTimestamp: {
                serializedName: "createdTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            updatedTimestamp: {
                serializedName: "updatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            isDeleted: {
                serializedName: "isDeleted",
                readOnly: true,
                type: {
                    name: "Boolean",
                },
            },
            lastDiscoveryTimeInUtc: {
                serializedName: "lastDiscoveryTimeInUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const InMageRcmDiskInput = {
    type: {
        name: "Composite",
        className: "InMageRcmDiskInput",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                required: true,
                type: {
                    name: "String",
                },
            },
            logStorageAccountId: {
                serializedName: "logStorageAccountId",
                required: true,
                type: {
                    name: "String",
                },
            },
            diskType: {
                serializedName: "diskType",
                required: true,
                type: {
                    name: "String",
                },
            },
            diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageRcmDisksDefaultInput = {
    type: {
        name: "Composite",
        className: "InMageRcmDisksDefaultInput",
        modelProperties: {
            logStorageAccountId: {
                serializedName: "logStorageAccountId",
                required: true,
                type: {
                    name: "String",
                },
            },
            diskType: {
                serializedName: "diskType",
                required: true,
                type: {
                    name: "String",
                },
            },
            diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageRcmFailbackDiscoveredProtectedVmDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmFailbackDiscoveredProtectedVmDetails",
        modelProperties: {
            vCenterId: {
                serializedName: "vCenterId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            vCenterFqdn: {
                serializedName: "vCenterFqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            datastores: {
                serializedName: "datastores",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            ipAddresses: {
                serializedName: "ipAddresses",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            vmwareToolsStatus: {
                serializedName: "vmwareToolsStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            powerStatus: {
                serializedName: "powerStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            vmFqdn: {
                serializedName: "vmFqdn",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            osName: {
                serializedName: "osName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            createdTimestamp: {
                serializedName: "createdTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            updatedTimestamp: {
                serializedName: "updatedTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            isDeleted: {
                serializedName: "isDeleted",
                readOnly: true,
                type: {
                    name: "Boolean",
                },
            },
            lastDiscoveryTimeInUtc: {
                serializedName: "lastDiscoveryTimeInUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const InMageRcmFailbackMobilityAgentDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmFailbackMobilityAgentDetails",
        modelProperties: {
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            latestVersion: {
                serializedName: "latestVersion",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            driverVersion: {
                serializedName: "driverVersion",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            latestUpgradableVersionWithoutReboot: {
                serializedName: "latestUpgradableVersionWithoutReboot",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            agentVersionExpiryDate: {
                serializedName: "agentVersionExpiryDate",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            driverVersionExpiryDate: {
                serializedName: "driverVersionExpiryDate",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            lastHeartbeatUtc: {
                serializedName: "lastHeartbeatUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            reasonsBlockingUpgrade: {
                serializedName: "reasonsBlockingUpgrade",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            isUpgradeable: {
                serializedName: "isUpgradeable",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageRcmFailbackNicDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmFailbackNicDetails",
        modelProperties: {
            macAddress: {
                serializedName: "macAddress",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            networkName: {
                serializedName: "networkName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            adapterType: {
                serializedName: "adapterType",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            sourceIpAddress: {
                serializedName: "sourceIpAddress",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageRcmFailbackProtectedDiskDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmFailbackProtectedDiskDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            diskName: {
                serializedName: "diskName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            isOSDisk: {
                serializedName: "isOSDisk",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            capacityInBytes: {
                serializedName: "capacityInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            diskUuid: {
                serializedName: "diskUuid",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            dataPendingInLogDataStoreInMB: {
                serializedName: "dataPendingInLogDataStoreInMB",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            dataPendingAtSourceAgentInMB: {
                serializedName: "dataPendingAtSourceAgentInMB",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            isInitialReplicationComplete: {
                serializedName: "isInitialReplicationComplete",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            irDetails: {
                serializedName: "irDetails",
                type: {
                    name: "Composite",
                    className: "InMageRcmFailbackSyncDetails",
                },
            },
            resyncDetails: {
                serializedName: "resyncDetails",
                type: {
                    name: "Composite",
                    className: "InMageRcmFailbackSyncDetails",
                },
            },
            lastSyncTime: {
                serializedName: "lastSyncTime",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
const InMageRcmFailbackSyncDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmFailbackSyncDetails",
        modelProperties: {
            progressHealth: {
                serializedName: "progressHealth",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            transferredBytes: {
                serializedName: "transferredBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            last15MinutesTransferredBytes: {
                serializedName: "last15MinutesTransferredBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            lastDataTransferTimeUtc: {
                serializedName: "lastDataTransferTimeUtc",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            processedBytes: {
                serializedName: "processedBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastRefreshTime: {
                serializedName: "lastRefreshTime",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            progressPercentage: {
                serializedName: "progressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const InMageRcmLastAgentUpgradeErrorDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmLastAgentUpgradeErrorDetails",
        modelProperties: {
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessage: {
                serializedName: "errorMessage",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            possibleCauses: {
                serializedName: "possibleCauses",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            recommendedAction: {
                serializedName: "recommendedAction",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessageParameters: {
                serializedName: "errorMessageParameters",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            errorTags: {
                serializedName: "errorTags",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
        },
    },
};
const InMageRcmMobilityAgentDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmMobilityAgentDetails",
        modelProperties: {
            version: {
                serializedName: "version",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            latestVersion: {
                serializedName: "latestVersion",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            latestAgentReleaseDate: {
                serializedName: "latestAgentReleaseDate",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            driverVersion: {
                serializedName: "driverVersion",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            latestUpgradableVersionWithoutReboot: {
                serializedName: "latestUpgradableVersionWithoutReboot",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            agentVersionExpiryDate: {
                serializedName: "agentVersionExpiryDate",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            driverVersionExpiryDate: {
                serializedName: "driverVersionExpiryDate",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            lastHeartbeatUtc: {
                serializedName: "lastHeartbeatUtc",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            reasonsBlockingUpgrade: {
                serializedName: "reasonsBlockingUpgrade",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            isUpgradeable: {
                serializedName: "isUpgradeable",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageRcmNicDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmNicDetails",
        modelProperties: {
            nicId: {
                serializedName: "nicId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            isPrimaryNic: {
                serializedName: "isPrimaryNic",
                type: {
                    name: "String",
                },
            },
            isSelectedForFailover: {
                serializedName: "isSelectedForFailover",
                type: {
                    name: "String",
                },
            },
            sourceIPAddress: {
                serializedName: "sourceIPAddress",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            sourceIPAddressType: {
                serializedName: "sourceIPAddressType",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            sourceNetworkId: {
                serializedName: "sourceNetworkId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            sourceSubnetName: {
                serializedName: "sourceSubnetName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            targetIPAddress: {
                serializedName: "targetIPAddress",
                type: {
                    name: "String",
                },
            },
            targetIPAddressType: {
                serializedName: "targetIPAddressType",
                type: {
                    name: "String",
                },
            },
            targetSubnetName: {
                serializedName: "targetSubnetName",
                type: {
                    name: "String",
                },
            },
            testSubnetName: {
                serializedName: "testSubnetName",
                type: {
                    name: "String",
                },
            },
            testIPAddress: {
                serializedName: "testIPAddress",
                type: {
                    name: "String",
                },
            },
            testIPAddressType: {
                serializedName: "testIPAddressType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageRcmNicInput = {
    type: {
        name: "Composite",
        className: "InMageRcmNicInput",
        modelProperties: {
            nicId: {
                serializedName: "nicId",
                required: true,
                type: {
                    name: "String",
                },
            },
            isPrimaryNic: {
                serializedName: "isPrimaryNic",
                required: true,
                type: {
                    name: "String",
                },
            },
            isSelectedForFailover: {
                serializedName: "isSelectedForFailover",
                type: {
                    name: "String",
                },
            },
            targetSubnetName: {
                serializedName: "targetSubnetName",
                type: {
                    name: "String",
                },
            },
            targetStaticIPAddress: {
                serializedName: "targetStaticIPAddress",
                type: {
                    name: "String",
                },
            },
            testSubnetName: {
                serializedName: "testSubnetName",
                type: {
                    name: "String",
                },
            },
            testStaticIPAddress: {
                serializedName: "testStaticIPAddress",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const InMageRcmProtectedDiskDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmProtectedDiskDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            diskName: {
                serializedName: "diskName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            isOSDisk: {
                serializedName: "isOSDisk",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            capacityInBytes: {
                serializedName: "capacityInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            logStorageAccountId: {
                serializedName: "logStorageAccountId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            seedManagedDiskId: {
                serializedName: "seedManagedDiskId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            seedBlobUri: {
                serializedName: "seedBlobUri",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            targetManagedDiskId: {
                serializedName: "targetManagedDiskId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            diskType: {
                serializedName: "diskType",
                type: {
                    name: "String",
                },
            },
            dataPendingInLogDataStoreInMB: {
                serializedName: "dataPendingInLogDataStoreInMB",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            dataPendingAtSourceAgentInMB: {
                serializedName: "dataPendingAtSourceAgentInMB",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            isInitialReplicationComplete: {
                serializedName: "isInitialReplicationComplete",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            irDetails: {
                serializedName: "irDetails",
                type: {
                    name: "Composite",
                    className: "InMageRcmSyncDetails",
                },
            },
            resyncDetails: {
                serializedName: "resyncDetails",
                type: {
                    name: "Composite",
                    className: "InMageRcmSyncDetails",
                },
            },
        },
    },
};
const InMageRcmSyncDetails = {
    type: {
        name: "Composite",
        className: "InMageRcmSyncDetails",
        modelProperties: {
            progressHealth: {
                serializedName: "progressHealth",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            transferredBytes: {
                serializedName: "transferredBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            last15MinutesTransferredBytes: {
                serializedName: "last15MinutesTransferredBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            lastDataTransferTimeUtc: {
                serializedName: "lastDataTransferTimeUtc",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            processedBytes: {
                serializedName: "processedBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            startTime: {
                serializedName: "startTime",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            lastRefreshTime: {
                serializedName: "lastRefreshTime",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            progressPercentage: {
                serializedName: "progressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const OSDiskDetails = {
    type: {
        name: "Composite",
        className: "OSDiskDetails",
        modelProperties: {
            osVhdId: {
                serializedName: "osVhdId",
                type: {
                    name: "String",
                },
            },
            osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            },
            vhdName: {
                serializedName: "vhdName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const MasterTargetServer = {
    type: {
        name: "Composite",
        className: "MasterTargetServer",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            },
            agentVersion: {
                serializedName: "agentVersion",
                type: {
                    name: "String",
                },
            },
            lastHeartbeat: {
                serializedName: "lastHeartbeat",
                type: {
                    name: "DateTime",
                },
            },
            versionStatus: {
                serializedName: "versionStatus",
                type: {
                    name: "String",
                },
            },
            retentionVolumes: {
                serializedName: "retentionVolumes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RetentionVolume",
                        },
                    },
                },
            },
            dataStores: {
                serializedName: "dataStores",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataStore",
                        },
                    },
                },
            },
            validationErrors: {
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            diskCount: {
                serializedName: "diskCount",
                type: {
                    name: "Number",
                },
            },
            osVersion: {
                serializedName: "osVersion",
                type: {
                    name: "String",
                },
            },
            agentExpiryDate: {
                serializedName: "agentExpiryDate",
                type: {
                    name: "DateTime",
                },
            },
            marsAgentVersion: {
                serializedName: "marsAgentVersion",
                type: {
                    name: "String",
                },
            },
            marsAgentExpiryDate: {
                serializedName: "marsAgentExpiryDate",
                type: {
                    name: "DateTime",
                },
            },
            agentVersionDetails: {
                serializedName: "agentVersionDetails",
                type: {
                    name: "Composite",
                    className: "VersionDetails",
                },
            },
            marsAgentVersionDetails: {
                serializedName: "marsAgentVersionDetails",
                type: {
                    name: "Composite",
                    className: "VersionDetails",
                },
            },
        },
    },
};
const RetentionVolume = {
    type: {
        name: "Composite",
        className: "RetentionVolume",
        modelProperties: {
            volumeName: {
                serializedName: "volumeName",
                type: {
                    name: "String",
                },
            },
            capacityInBytes: {
                serializedName: "capacityInBytes",
                type: {
                    name: "Number",
                },
            },
            freeSpaceInBytes: {
                serializedName: "freeSpaceInBytes",
                type: {
                    name: "Number",
                },
            },
            thresholdPercentage: {
                serializedName: "thresholdPercentage",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
const MigrationItemsQueryParameter = {
    type: {
        name: "Composite",
        className: "MigrationItemsQueryParameter",
        modelProperties: {
            sourceFabricName: {
                serializedName: "sourceFabricName",
                type: {
                    name: "String",
                },
            },
            sourceContainerName: {
                serializedName: "sourceContainerName",
                type: {
                    name: "String",
                },
            },
            instanceType: {
                serializedName: "instanceType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const MobilityServiceUpdate = {
    type: {
        name: "Composite",
        className: "MobilityServiceUpdate",
        modelProperties: {
            version: {
                serializedName: "version",
                type: {
                    name: "String",
                },
            },
            rebootStatus: {
                serializedName: "rebootStatus",
                type: {
                    name: "String",
                },
            },
            osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProcessServer = {
    type: {
        name: "Composite",
        className: "ProcessServer",
        modelProperties: {
            friendlyName: {
                serializedName: "friendlyName",
                type: {
                    name: "String",
                },
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String",
                },
            },
            osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            },
            agentVersion: {
                serializedName: "agentVersion",
                type: {
                    name: "String",
                },
            },
            lastHeartbeat: {
                serializedName: "lastHeartbeat",
                type: {
                    name: "DateTime",
                },
            },
            versionStatus: {
                serializedName: "versionStatus",
                type: {
                    name: "String",
                },
            },
            mobilityServiceUpdates: {
                serializedName: "mobilityServiceUpdates",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MobilityServiceUpdate",
                        },
                    },
                },
            },
            hostId: {
                serializedName: "hostId",
                type: {
                    name: "String",
                },
            },
            machineCount: {
                serializedName: "machineCount",
                type: {
                    name: "String",
                },
            },
            replicationPairCount: {
                serializedName: "replicationPairCount",
                type: {
                    name: "String",
                },
            },
            systemLoad: {
                serializedName: "systemLoad",
                type: {
                    name: "String",
                },
            },
            systemLoadStatus: {
                serializedName: "systemLoadStatus",
                type: {
                    name: "String",
                },
            },
            cpuLoad: {
                serializedName: "cpuLoad",
                type: {
                    name: "String",
                },
            },
            cpuLoadStatus: {
                serializedName: "cpuLoadStatus",
                type: {
                    name: "String",
                },
            },
            totalMemoryInBytes: {
                serializedName: "totalMemoryInBytes",
                type: {
                    name: "Number",
                },
            },
            availableMemoryInBytes: {
                serializedName: "availableMemoryInBytes",
                type: {
                    name: "Number",
                },
            },
            memoryUsageStatus: {
                serializedName: "memoryUsageStatus",
                type: {
                    name: "String",
                },
            },
            totalSpaceInBytes: {
                serializedName: "totalSpaceInBytes",
                type: {
                    name: "Number",
                },
            },
            availableSpaceInBytes: {
                serializedName: "availableSpaceInBytes",
                type: {
                    name: "Number",
                },
            },
            spaceUsageStatus: {
                serializedName: "spaceUsageStatus",
                type: {
                    name: "String",
                },
            },
            psServiceStatus: {
                serializedName: "psServiceStatus",
                type: {
                    name: "String",
                },
            },
            sslCertExpiryDate: {
                serializedName: "sslCertExpiryDate",
                type: {
                    name: "DateTime",
                },
            },
            sslCertExpiryRemainingDays: {
                serializedName: "sslCertExpiryRemainingDays",
                type: {
                    name: "Number",
                },
            },
            osVersion: {
                serializedName: "osVersion",
                type: {
                    name: "String",
                },
            },
            healthErrors: {
                serializedName: "healthErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            },
            agentExpiryDate: {
                serializedName: "agentExpiryDate",
                type: {
                    name: "DateTime",
                },
            },
            agentVersionDetails: {
                serializedName: "agentVersionDetails",
                type: {
                    name: "Composite",
                    className: "VersionDetails",
                },
            },
            health: {
                serializedName: "health",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            psStatsRefreshTime: {
                serializedName: "psStatsRefreshTime",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            throughputUploadPendingDataInBytes: {
                serializedName: "throughputUploadPendingDataInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            throughputInMBps: {
                serializedName: "throughputInMBps",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            throughputInBytes: {
                serializedName: "throughputInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            throughputStatus: {
                serializedName: "throughputStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            marsCommunicationStatus: {
                serializedName: "marsCommunicationStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            marsRegistrationStatus: {
                serializedName: "marsRegistrationStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProtectableItemQueryParameter = {
    type: {
        name: "Composite",
        className: "ProtectableItemQueryParameter",
        modelProperties: {
            state: {
                serializedName: "state",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ProtectedItemsQueryParameter = {
    type: {
        name: "Composite",
        className: "ProtectedItemsQueryParameter",
        modelProperties: {
            sourceFabricName: {
                serializedName: "sourceFabricName",
                type: {
                    name: "String",
                },
            },
            recoveryPlanName: {
                serializedName: "recoveryPlanName",
                type: {
                    name: "String",
                },
            },
            sourceFabricLocation: {
                serializedName: "sourceFabricLocation",
                type: {
                    name: "String",
                },
            },
            fabricObjectId: {
                serializedName: "fabricObjectId",
                type: {
                    name: "String",
                },
            },
            vCenterName: {
                serializedName: "vCenterName",
                type: {
                    name: "String",
                },
            },
            instanceType: {
                serializedName: "instanceType",
                type: {
                    name: "String",
                },
            },
            multiVmGroupCreateOption: {
                serializedName: "multiVmGroupCreateOption",
                type: {
                    name: "String",
                },
            },
            processServerId: {
                serializedName: "processServerId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RoleAssignment = {
    type: {
        name: "Composite",
        className: "RoleAssignment",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "String",
                },
            },
            principalId: {
                serializedName: "principalId",
                type: {
                    name: "String",
                },
            },
            roleDefinitionId: {
                serializedName: "roleDefinitionId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const RunAsAccount = {
    type: {
        name: "Composite",
        className: "RunAsAccount",
        modelProperties: {
            accountId: {
                serializedName: "accountId",
                type: {
                    name: "String",
                },
            },
            accountName: {
                serializedName: "accountName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VMwareCbtDiskInput = {
    type: {
        name: "Composite",
        className: "VMwareCbtDiskInput",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                required: true,
                type: {
                    name: "String",
                },
            },
            diskType: {
                serializedName: "diskType",
                type: {
                    name: "String",
                },
            },
            isOSDisk: {
                serializedName: "isOSDisk",
                required: true,
                type: {
                    name: "String",
                },
            },
            logStorageAccountId: {
                serializedName: "logStorageAccountId",
                required: true,
                type: {
                    name: "String",
                },
            },
            logStorageAccountSasSecretName: {
                serializedName: "logStorageAccountSasSecretName",
                required: true,
                type: {
                    name: "String",
                },
            },
            diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VMwareCbtSecurityProfileProperties = {
    type: {
        name: "Composite",
        className: "VMwareCbtSecurityProfileProperties",
        modelProperties: {
            targetVmSecurityType: {
                serializedName: "targetVmSecurityType",
                type: {
                    name: "String",
                },
            },
            isTargetVmSecureBootEnabled: {
                serializedName: "isTargetVmSecureBootEnabled",
                type: {
                    name: "String",
                },
            },
            isTargetVmTpmEnabled: {
                serializedName: "isTargetVmTpmEnabled",
                type: {
                    name: "String",
                },
            },
            isTargetVmIntegrityMonitoringEnabled: {
                serializedName: "isTargetVmIntegrityMonitoringEnabled",
                type: {
                    name: "String",
                },
            },
            isTargetVmConfidentialEncryptionEnabled: {
                serializedName: "isTargetVmConfidentialEncryptionEnabled",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VMwareCbtProtectedDiskDetails = {
    type: {
        name: "Composite",
        className: "VMwareCbtProtectedDiskDetails",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            diskName: {
                serializedName: "diskName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            diskType: {
                serializedName: "diskType",
                type: {
                    name: "String",
                },
            },
            diskPath: {
                serializedName: "diskPath",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            isOSDisk: {
                serializedName: "isOSDisk",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            capacityInBytes: {
                serializedName: "capacityInBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            logStorageAccountId: {
                serializedName: "logStorageAccountId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            logStorageAccountSasSecretName: {
                serializedName: "logStorageAccountSasSecretName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            seedManagedDiskId: {
                serializedName: "seedManagedDiskId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            seedBlobUri: {
                serializedName: "seedBlobUri",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            targetManagedDiskId: {
                serializedName: "targetManagedDiskId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            targetBlobUri: {
                serializedName: "targetBlobUri",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            targetDiskName: {
                serializedName: "targetDiskName",
                type: {
                    name: "String",
                },
            },
            gatewayOperationDetails: {
                serializedName: "gatewayOperationDetails",
                type: {
                    name: "Composite",
                    className: "GatewayOperationDetails",
                },
            },
        },
    },
};
const VMwareCbtNicDetails = {
    type: {
        name: "Composite",
        className: "VMwareCbtNicDetails",
        modelProperties: {
            nicId: {
                serializedName: "nicId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            isPrimaryNic: {
                serializedName: "isPrimaryNic",
                type: {
                    name: "String",
                },
            },
            sourceIPAddress: {
                serializedName: "sourceIPAddress",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            sourceIPAddressType: {
                serializedName: "sourceIPAddressType",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            sourceNetworkId: {
                serializedName: "sourceNetworkId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            targetIPAddress: {
                serializedName: "targetIPAddress",
                type: {
                    name: "String",
                },
            },
            targetIPAddressType: {
                serializedName: "targetIPAddressType",
                type: {
                    name: "String",
                },
            },
            targetSubnetName: {
                serializedName: "targetSubnetName",
                type: {
                    name: "String",
                },
            },
            testNetworkId: {
                serializedName: "testNetworkId",
                type: {
                    name: "String",
                },
            },
            testSubnetName: {
                serializedName: "testSubnetName",
                type: {
                    name: "String",
                },
            },
            testIPAddress: {
                serializedName: "testIPAddress",
                type: {
                    name: "String",
                },
            },
            testIPAddressType: {
                serializedName: "testIPAddressType",
                type: {
                    name: "String",
                },
            },
            targetNicName: {
                serializedName: "targetNicName",
                type: {
                    name: "String",
                },
            },
            isSelectedForMigration: {
                serializedName: "isSelectedForMigration",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VMwareCbtNicInput = {
    type: {
        name: "Composite",
        className: "VMwareCbtNicInput",
        modelProperties: {
            nicId: {
                serializedName: "nicId",
                required: true,
                type: {
                    name: "String",
                },
            },
            isPrimaryNic: {
                serializedName: "isPrimaryNic",
                required: true,
                type: {
                    name: "String",
                },
            },
            targetSubnetName: {
                serializedName: "targetSubnetName",
                type: {
                    name: "String",
                },
            },
            targetStaticIPAddress: {
                serializedName: "targetStaticIPAddress",
                type: {
                    name: "String",
                },
            },
            isSelectedForMigration: {
                serializedName: "isSelectedForMigration",
                type: {
                    name: "String",
                },
            },
            targetNicName: {
                serializedName: "targetNicName",
                type: {
                    name: "String",
                },
            },
            testSubnetName: {
                serializedName: "testSubnetName",
                type: {
                    name: "String",
                },
            },
            testStaticIPAddress: {
                serializedName: "testStaticIPAddress",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const VMwareCbtUpdateDiskInput = {
    type: {
        name: "Composite",
        className: "VMwareCbtUpdateDiskInput",
        modelProperties: {
            diskId: {
                serializedName: "diskId",
                required: true,
                type: {
                    name: "String",
                },
            },
            targetDiskName: {
                serializedName: "targetDiskName",
                type: {
                    name: "String",
                },
            },
            isOSDisk: {
                serializedName: "isOSDisk",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const Alert = {
    type: {
        name: "Composite",
        className: "Alert",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "AlertProperties",
                },
            } }),
    },
};
const Event = {
    type: {
        name: "Composite",
        className: "Event",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "EventProperties",
                },
            } }),
    },
};
const Fabric = {
    type: {
        name: "Composite",
        className: "Fabric",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "FabricProperties",
                },
            } }),
    },
};
const LogicalNetwork = {
    type: {
        name: "Composite",
        className: "LogicalNetwork",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "LogicalNetworkProperties",
                },
            } }),
    },
};
const Network = {
    type: {
        name: "Composite",
        className: "Network",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "NetworkProperties",
                },
            } }),
    },
};
const NetworkMapping = {
    type: {
        name: "Composite",
        className: "NetworkMapping",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "NetworkMappingProperties",
                },
            } }),
    },
};
const ProtectionContainer = {
    type: {
        name: "Composite",
        className: "ProtectionContainer",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProtectionContainerProperties",
                },
            } }),
    },
};
const MigrationItem = {
    type: {
        name: "Composite",
        className: "MigrationItem",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MigrationItemProperties",
                },
            } }),
    },
};
const MigrationRecoveryPoint = {
    type: {
        name: "Composite",
        className: "MigrationRecoveryPoint",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "MigrationRecoveryPointProperties",
                },
            } }),
    },
};
const ProtectableItem = {
    type: {
        name: "Composite",
        className: "ProtectableItem",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProtectableItemProperties",
                },
            } }),
    },
};
const ReplicationProtectedItem = {
    type: {
        name: "Composite",
        className: "ReplicationProtectedItem",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ReplicationProtectedItemProperties",
                },
            } }),
    },
};
const RecoveryPoint = {
    type: {
        name: "Composite",
        className: "RecoveryPoint",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RecoveryPointProperties",
                },
            } }),
    },
};
const ProtectionContainerMapping = {
    type: {
        name: "Composite",
        className: "ProtectionContainerMapping",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ProtectionContainerMappingProperties",
                },
            } }),
    },
};
const RecoveryServicesProvider = {
    type: {
        name: "Composite",
        className: "RecoveryServicesProvider",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RecoveryServicesProviderProperties",
                },
            } }),
    },
};
const StorageClassification = {
    type: {
        name: "Composite",
        className: "StorageClassification",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "StorageClassificationProperties",
                },
            } }),
    },
};
const StorageClassificationMapping = {
    type: {
        name: "Composite",
        className: "StorageClassificationMapping",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "StorageClassificationMappingProperties",
                },
            } }),
    },
};
const VCenter = {
    type: {
        name: "Composite",
        className: "VCenter",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "VCenterProperties",
                },
            } }),
    },
};
const Job = {
    type: {
        name: "Composite",
        className: "Job",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "JobProperties",
                },
            } }),
    },
};
const Policy = {
    type: {
        name: "Composite",
        className: "Policy",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "PolicyProperties",
                },
            } }),
    },
};
const ReplicationProtectionIntent = {
    type: {
        name: "Composite",
        className: "ReplicationProtectionIntent",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "ReplicationProtectionIntentProperties",
                },
            } }),
    },
};
const RecoveryPlan = {
    type: {
        name: "Composite",
        className: "RecoveryPlan",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RecoveryPlanProperties",
                },
            } }),
    },
};
const SupportedOperatingSystems = {
    type: {
        name: "Composite",
        className: "SupportedOperatingSystems",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SupportedOSProperties",
                },
            } }),
    },
};
const VaultHealthDetails = {
    type: {
        name: "Composite",
        className: "VaultHealthDetails",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "VaultHealthProperties",
                },
            } }),
    },
};
const VaultSetting = {
    type: {
        name: "Composite",
        className: "VaultSetting",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "VaultSettingProperties",
                },
            } }),
    },
};
const InMageRcmApplianceSpecificDetails = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmApplianceSpecificDetails",
        uberParent: "ApplianceSpecificDetails",
        polymorphicDiscriminator: ApplianceSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ApplianceSpecificDetails.type.modelProperties), { appliances: {
                serializedName: "appliances",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageRcmApplianceDetails",
                        },
                    },
                },
            } }),
    },
};
const A2AEventDetails = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AEventDetails",
        uberParent: "EventProviderSpecificDetails",
        polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventProviderSpecificDetails.type.modelProperties), { protectedItemName: {
                serializedName: "protectedItemName",
                type: {
                    name: "String",
                },
            }, fabricObjectId: {
                serializedName: "fabricObjectId",
                type: {
                    name: "String",
                },
            }, fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String",
                },
            }, fabricLocation: {
                serializedName: "fabricLocation",
                type: {
                    name: "String",
                },
            }, remoteFabricName: {
                serializedName: "remoteFabricName",
                type: {
                    name: "String",
                },
            }, remoteFabricLocation: {
                serializedName: "remoteFabricLocation",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplica2012EventDetails = {
    serializedName: "HyperVReplica2012",
    type: {
        name: "Composite",
        className: "HyperVReplica2012EventDetails",
        uberParent: "EventProviderSpecificDetails",
        polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventProviderSpecificDetails.type.modelProperties), { containerName: {
                serializedName: "containerName",
                type: {
                    name: "String",
                },
            }, fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String",
                },
            }, remoteContainerName: {
                serializedName: "remoteContainerName",
                type: {
                    name: "String",
                },
            }, remoteFabricName: {
                serializedName: "remoteFabricName",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplica2012R2EventDetails = {
    serializedName: "HyperVReplica2012R2",
    type: {
        name: "Composite",
        className: "HyperVReplica2012R2EventDetails",
        uberParent: "EventProviderSpecificDetails",
        polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventProviderSpecificDetails.type.modelProperties), { containerName: {
                serializedName: "containerName",
                type: {
                    name: "String",
                },
            }, fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String",
                },
            }, remoteContainerName: {
                serializedName: "remoteContainerName",
                type: {
                    name: "String",
                },
            }, remoteFabricName: {
                serializedName: "remoteFabricName",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaAzureEventDetails = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureEventDetails",
        uberParent: "EventProviderSpecificDetails",
        polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventProviderSpecificDetails.type.modelProperties), { containerName: {
                serializedName: "containerName",
                type: {
                    name: "String",
                },
            }, fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String",
                },
            }, remoteContainerName: {
                serializedName: "remoteContainerName",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaBaseEventDetails = {
    serializedName: "HyperVReplicaBaseEventDetails",
    type: {
        name: "Composite",
        className: "HyperVReplicaBaseEventDetails",
        uberParent: "EventProviderSpecificDetails",
        polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventProviderSpecificDetails.type.modelProperties), { containerName: {
                serializedName: "containerName",
                type: {
                    name: "String",
                },
            }, fabricName: {
                serializedName: "fabricName",
                type: {
                    name: "String",
                },
            }, remoteContainerName: {
                serializedName: "remoteContainerName",
                type: {
                    name: "String",
                },
            }, remoteFabricName: {
                serializedName: "remoteFabricName",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageAzureV2EventDetails = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2EventDetails",
        uberParent: "EventProviderSpecificDetails",
        polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventProviderSpecificDetails.type.modelProperties), { eventType: {
                serializedName: "eventType",
                type: {
                    name: "String",
                },
            }, category: {
                serializedName: "category",
                type: {
                    name: "String",
                },
            }, component: {
                serializedName: "component",
                type: {
                    name: "String",
                },
            }, correctiveAction: {
                serializedName: "correctiveAction",
                type: {
                    name: "String",
                },
            }, details: {
                serializedName: "details",
                type: {
                    name: "String",
                },
            }, summary: {
                serializedName: "summary",
                type: {
                    name: "String",
                },
            }, siteName: {
                serializedName: "siteName",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmEventDetails = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmEventDetails",
        uberParent: "EventProviderSpecificDetails",
        polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventProviderSpecificDetails.type.modelProperties), { protectedItemName: {
                serializedName: "protectedItemName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, vmName: {
                serializedName: "vmName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, latestAgentVersion: {
                serializedName: "latestAgentVersion",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, jobId: {
                serializedName: "jobId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, fabricName: {
                serializedName: "fabricName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, applianceName: {
                serializedName: "applianceName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, serverType: {
                serializedName: "serverType",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, componentDisplayName: {
                serializedName: "componentDisplayName",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmFailbackEventDetails = {
    serializedName: "InMageRcmFailback",
    type: {
        name: "Composite",
        className: "InMageRcmFailbackEventDetails",
        uberParent: "EventProviderSpecificDetails",
        polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventProviderSpecificDetails.type.modelProperties), { protectedItemName: {
                serializedName: "protectedItemName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, vmName: {
                serializedName: "vmName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, applianceName: {
                serializedName: "applianceName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, serverType: {
                serializedName: "serverType",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, componentDisplayName: {
                serializedName: "componentDisplayName",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const VMwareCbtEventDetails = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtEventDetails",
        uberParent: "EventProviderSpecificDetails",
        polymorphicDiscriminator: EventProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventProviderSpecificDetails.type.modelProperties), { migrationItemName: {
                serializedName: "migrationItemName",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const JobStatusEventDetails = {
    serializedName: "JobStatus",
    type: {
        name: "Composite",
        className: "JobStatusEventDetails",
        uberParent: "EventSpecificDetails",
        polymorphicDiscriminator: EventSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EventSpecificDetails.type.modelProperties), { jobId: {
                serializedName: "jobId",
                type: {
                    name: "String",
                },
            }, jobFriendlyName: {
                serializedName: "jobFriendlyName",
                type: {
                    name: "String",
                },
            }, jobStatus: {
                serializedName: "jobStatus",
                type: {
                    name: "String",
                },
            }, affectedObjectType: {
                serializedName: "affectedObjectType",
                type: {
                    name: "String",
                },
            } }),
    },
};
const AzureFabricSpecificDetails = {
    serializedName: "Azure",
    type: {
        name: "Composite",
        className: "AzureFabricSpecificDetails",
        uberParent: "FabricSpecificDetails",
        polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FabricSpecificDetails.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String",
                },
            }, containerIds: {
                serializedName: "containerIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            }, zones: {
                serializedName: "zones",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AZoneDetails",
                        },
                    },
                },
            }, extendedLocations: {
                serializedName: "extendedLocations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AExtendedLocationDetails",
                        },
                    },
                },
            }, locationDetails: {
                serializedName: "locationDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AFabricSpecificLocationDetails",
                        },
                    },
                },
            } }),
    },
};
const HyperVSiteDetails = {
    serializedName: "HyperVSite",
    type: {
        name: "Composite",
        className: "HyperVSiteDetails",
        uberParent: "FabricSpecificDetails",
        polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FabricSpecificDetails.type.modelProperties), { hyperVHosts: {
                serializedName: "hyperVHosts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HyperVHostDetails",
                        },
                    },
                },
            } }),
    },
};
const InMageRcmFabricSpecificDetails = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmFabricSpecificDetails",
        uberParent: "FabricSpecificDetails",
        polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FabricSpecificDetails.type.modelProperties), { vmwareSiteId: {
                serializedName: "vmwareSiteId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, physicalSiteId: {
                serializedName: "physicalSiteId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, serviceEndpoint: {
                serializedName: "serviceEndpoint",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, serviceResourceId: {
                serializedName: "serviceResourceId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, serviceContainerId: {
                serializedName: "serviceContainerId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, dataPlaneUri: {
                serializedName: "dataPlaneUri",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, controlPlaneUri: {
                serializedName: "controlPlaneUri",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, sourceAgentIdentityDetails: {
                serializedName: "sourceAgentIdentityDetails",
                type: {
                    name: "Composite",
                    className: "IdentityProviderDetails",
                },
            }, processServers: {
                serializedName: "processServers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProcessServerDetails",
                        },
                    },
                },
            }, rcmProxies: {
                serializedName: "rcmProxies",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RcmProxyDetails",
                        },
                    },
                },
            }, pushInstallers: {
                serializedName: "pushInstallers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PushInstallerDetails",
                        },
                    },
                },
            }, replicationAgents: {
                serializedName: "replicationAgents",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReplicationAgentDetails",
                        },
                    },
                },
            }, reprotectAgents: {
                serializedName: "reprotectAgents",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ReprotectAgentDetails",
                        },
                    },
                },
            }, marsAgents: {
                serializedName: "marsAgents",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MarsAgentDetails",
                        },
                    },
                },
            }, dras: {
                serializedName: "dras",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DraDetails",
                        },
                    },
                },
            }, agentDetails: {
                serializedName: "agentDetails",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AgentDetails",
                        },
                    },
                },
            } }),
    },
};
const VmmDetails = {
    serializedName: "VMM",
    type: {
        name: "Composite",
        className: "VmmDetails",
        uberParent: "FabricSpecificDetails",
        polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, FabricSpecificDetails.type.modelProperties),
    },
};
const VMwareDetails = {
    serializedName: "VMware",
    type: {
        name: "Composite",
        className: "VMwareDetails",
        uberParent: "FabricSpecificDetails",
        polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FabricSpecificDetails.type.modelProperties), { processServers: {
                serializedName: "processServers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProcessServer",
                        },
                    },
                },
            }, masterTargetServers: {
                serializedName: "masterTargetServers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MasterTargetServer",
                        },
                    },
                },
            }, runAsAccounts: {
                serializedName: "runAsAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RunAsAccount",
                        },
                    },
                },
            }, replicationPairCount: {
                serializedName: "replicationPairCount",
                type: {
                    name: "String",
                },
            }, processServerCount: {
                serializedName: "processServerCount",
                type: {
                    name: "String",
                },
            }, agentCount: {
                serializedName: "agentCount",
                type: {
                    name: "String",
                },
            }, protectedServers: {
                serializedName: "protectedServers",
                type: {
                    name: "String",
                },
            }, systemLoad: {
                serializedName: "systemLoad",
                type: {
                    name: "String",
                },
            }, systemLoadStatus: {
                serializedName: "systemLoadStatus",
                type: {
                    name: "String",
                },
            }, cpuLoad: {
                serializedName: "cpuLoad",
                type: {
                    name: "String",
                },
            }, cpuLoadStatus: {
                serializedName: "cpuLoadStatus",
                type: {
                    name: "String",
                },
            }, totalMemoryInBytes: {
                serializedName: "totalMemoryInBytes",
                type: {
                    name: "Number",
                },
            }, availableMemoryInBytes: {
                serializedName: "availableMemoryInBytes",
                type: {
                    name: "Number",
                },
            }, memoryUsageStatus: {
                serializedName: "memoryUsageStatus",
                type: {
                    name: "String",
                },
            }, totalSpaceInBytes: {
                serializedName: "totalSpaceInBytes",
                type: {
                    name: "Number",
                },
            }, availableSpaceInBytes: {
                serializedName: "availableSpaceInBytes",
                type: {
                    name: "Number",
                },
            }, spaceUsageStatus: {
                serializedName: "spaceUsageStatus",
                type: {
                    name: "String",
                },
            }, webLoad: {
                serializedName: "webLoad",
                type: {
                    name: "String",
                },
            }, webLoadStatus: {
                serializedName: "webLoadStatus",
                type: {
                    name: "String",
                },
            }, databaseServerLoad: {
                serializedName: "databaseServerLoad",
                type: {
                    name: "String",
                },
            }, databaseServerLoadStatus: {
                serializedName: "databaseServerLoadStatus",
                type: {
                    name: "String",
                },
            }, csServiceStatus: {
                serializedName: "csServiceStatus",
                type: {
                    name: "String",
                },
            }, ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String",
                },
            }, agentVersion: {
                serializedName: "agentVersion",
                type: {
                    name: "String",
                },
            }, hostName: {
                serializedName: "hostName",
                type: {
                    name: "String",
                },
            }, lastHeartbeat: {
                serializedName: "lastHeartbeat",
                type: {
                    name: "DateTime",
                },
            }, versionStatus: {
                serializedName: "versionStatus",
                type: {
                    name: "String",
                },
            }, sslCertExpiryDate: {
                serializedName: "sslCertExpiryDate",
                type: {
                    name: "DateTime",
                },
            }, sslCertExpiryRemainingDays: {
                serializedName: "sslCertExpiryRemainingDays",
                type: {
                    name: "Number",
                },
            }, psTemplateVersion: {
                serializedName: "psTemplateVersion",
                type: {
                    name: "String",
                },
            }, agentExpiryDate: {
                serializedName: "agentExpiryDate",
                type: {
                    name: "DateTime",
                },
            }, agentVersionDetails: {
                serializedName: "agentVersionDetails",
                type: {
                    name: "Composite",
                    className: "VersionDetails",
                },
            }, switchProviderBlockingErrorDetails: {
                serializedName: "switchProviderBlockingErrorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageFabricSwitchProviderBlockingErrorDetails",
                        },
                    },
                },
            } }),
    },
};
const VMwareV2FabricSpecificDetails = {
    serializedName: "VMwareV2",
    type: {
        name: "Composite",
        className: "VMwareV2FabricSpecificDetails",
        uberParent: "FabricSpecificDetails",
        polymorphicDiscriminator: FabricSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FabricSpecificDetails.type.modelProperties), { vmwareSiteId: {
                serializedName: "vmwareSiteId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, physicalSiteId: {
                serializedName: "physicalSiteId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, migrationSolutionId: {
                serializedName: "migrationSolutionId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, serviceEndpoint: {
                serializedName: "serviceEndpoint",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, serviceResourceId: {
                serializedName: "serviceResourceId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, serviceContainerId: {
                serializedName: "serviceContainerId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, processServers: {
                serializedName: "processServers",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ProcessServerDetails",
                        },
                    },
                },
            } }),
    },
};
const AzureFabricCreationInput = {
    serializedName: "Azure",
    type: {
        name: "Composite",
        className: "AzureFabricCreationInput",
        uberParent: "FabricSpecificCreationInput",
        polymorphicDiscriminator: FabricSpecificCreationInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FabricSpecificCreationInput.type.modelProperties), { location: {
                serializedName: "location",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmFabricCreationInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmFabricCreationInput",
        uberParent: "FabricSpecificCreationInput",
        polymorphicDiscriminator: FabricSpecificCreationInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FabricSpecificCreationInput.type.modelProperties), { vmwareSiteId: {
                serializedName: "vmwareSiteId",
                required: true,
                type: {
                    name: "String",
                },
            }, physicalSiteId: {
                serializedName: "physicalSiteId",
                required: true,
                type: {
                    name: "String",
                },
            }, sourceAgentIdentity: {
                serializedName: "sourceAgentIdentity",
                type: {
                    name: "Composite",
                    className: "IdentityProviderInput",
                },
            } }),
    },
};
const VMwareV2FabricCreationInput = {
    serializedName: "VMwareV2",
    type: {
        name: "Composite",
        className: "VMwareV2FabricCreationInput",
        uberParent: "FabricSpecificCreationInput",
        polymorphicDiscriminator: FabricSpecificCreationInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FabricSpecificCreationInput.type.modelProperties), { vmwareSiteId: {
                serializedName: "vmwareSiteId",
                type: {
                    name: "String",
                },
            }, physicalSiteId: {
                serializedName: "physicalSiteId",
                type: {
                    name: "String",
                },
            }, migrationSolutionId: {
                serializedName: "migrationSolutionId",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const AzureToAzureNetworkMappingSettings = {
    serializedName: "AzureToAzure",
    type: {
        name: "Composite",
        className: "AzureToAzureNetworkMappingSettings",
        uberParent: "NetworkMappingFabricSpecificSettings",
        polymorphicDiscriminator: NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, NetworkMappingFabricSpecificSettings.type.modelProperties), { primaryFabricLocation: {
                serializedName: "primaryFabricLocation",
                type: {
                    name: "String",
                },
            }, recoveryFabricLocation: {
                serializedName: "recoveryFabricLocation",
                type: {
                    name: "String",
                },
            } }),
    },
};
const VmmToAzureNetworkMappingSettings = {
    serializedName: "VmmToAzure",
    type: {
        name: "Composite",
        className: "VmmToAzureNetworkMappingSettings",
        uberParent: "NetworkMappingFabricSpecificSettings",
        polymorphicDiscriminator: NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, NetworkMappingFabricSpecificSettings.type.modelProperties),
    },
};
const VmmToVmmNetworkMappingSettings = {
    serializedName: "VmmToVmm",
    type: {
        name: "Composite",
        className: "VmmToVmmNetworkMappingSettings",
        uberParent: "NetworkMappingFabricSpecificSettings",
        polymorphicDiscriminator: NetworkMappingFabricSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, NetworkMappingFabricSpecificSettings.type.modelProperties),
    },
};
const AzureToAzureCreateNetworkMappingInput = {
    serializedName: "AzureToAzure",
    type: {
        name: "Composite",
        className: "AzureToAzureCreateNetworkMappingInput",
        uberParent: "FabricSpecificCreateNetworkMappingInput",
        polymorphicDiscriminator: FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FabricSpecificCreateNetworkMappingInput.type.modelProperties), { primaryNetworkId: {
                serializedName: "primaryNetworkId",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const VmmToAzureCreateNetworkMappingInput = {
    serializedName: "VmmToAzure",
    type: {
        name: "Composite",
        className: "VmmToAzureCreateNetworkMappingInput",
        uberParent: "FabricSpecificCreateNetworkMappingInput",
        polymorphicDiscriminator: FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, FabricSpecificCreateNetworkMappingInput.type.modelProperties),
    },
};
const VmmToVmmCreateNetworkMappingInput = {
    serializedName: "VmmToVmm",
    type: {
        name: "Composite",
        className: "VmmToVmmCreateNetworkMappingInput",
        uberParent: "FabricSpecificCreateNetworkMappingInput",
        polymorphicDiscriminator: FabricSpecificCreateNetworkMappingInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, FabricSpecificCreateNetworkMappingInput.type.modelProperties),
    },
};
const AzureToAzureUpdateNetworkMappingInput = {
    serializedName: "AzureToAzure",
    type: {
        name: "Composite",
        className: "AzureToAzureUpdateNetworkMappingInput",
        uberParent: "FabricSpecificUpdateNetworkMappingInput",
        polymorphicDiscriminator: FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, FabricSpecificUpdateNetworkMappingInput.type.modelProperties), { primaryNetworkId: {
                serializedName: "primaryNetworkId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const VmmToAzureUpdateNetworkMappingInput = {
    serializedName: "VmmToAzure",
    type: {
        name: "Composite",
        className: "VmmToAzureUpdateNetworkMappingInput",
        uberParent: "FabricSpecificUpdateNetworkMappingInput",
        polymorphicDiscriminator: FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, FabricSpecificUpdateNetworkMappingInput.type.modelProperties),
    },
};
const VmmToVmmUpdateNetworkMappingInput = {
    serializedName: "VmmToVmm",
    type: {
        name: "Composite",
        className: "VmmToVmmUpdateNetworkMappingInput",
        uberParent: "FabricSpecificUpdateNetworkMappingInput",
        polymorphicDiscriminator: FabricSpecificUpdateNetworkMappingInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, FabricSpecificUpdateNetworkMappingInput.type.modelProperties),
    },
};
const A2AContainerCreationInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AContainerCreationInput",
        uberParent: "ReplicationProviderSpecificContainerCreationInput",
        polymorphicDiscriminator: ReplicationProviderSpecificContainerCreationInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign({}, ReplicationProviderSpecificContainerCreationInput.type.modelProperties),
    },
};
const A2ACrossClusterMigrationContainerCreationInput = {
    serializedName: "A2ACrossClusterMigration",
    type: {
        name: "Composite",
        className: "A2ACrossClusterMigrationContainerCreationInput",
        uberParent: "ReplicationProviderSpecificContainerCreationInput",
        polymorphicDiscriminator: ReplicationProviderSpecificContainerCreationInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign({}, ReplicationProviderSpecificContainerCreationInput.type
            .modelProperties),
    },
};
const VMwareCbtContainerCreationInput = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtContainerCreationInput",
        uberParent: "ReplicationProviderSpecificContainerCreationInput",
        polymorphicDiscriminator: ReplicationProviderSpecificContainerCreationInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign({}, ReplicationProviderSpecificContainerCreationInput.type.modelProperties),
    },
};
const VMwareCbtMigrationDetails = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtMigrationDetails",
        uberParent: "MigrationProviderSpecificSettings",
        polymorphicDiscriminator: MigrationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MigrationProviderSpecificSettings.type.modelProperties), { vmwareMachineId: {
                serializedName: "vmwareMachineId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, osType: {
                serializedName: "osType",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, osName: {
                serializedName: "osName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, firmwareType: {
                serializedName: "firmwareType",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, targetGeneration: {
                serializedName: "targetGeneration",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            }, sqlServerLicenseType: {
                serializedName: "sqlServerLicenseType",
                type: {
                    name: "String",
                },
            }, dataMoverRunAsAccountId: {
                serializedName: "dataMoverRunAsAccountId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, snapshotRunAsAccountId: {
                serializedName: "snapshotRunAsAccountId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, storageAccountId: {
                serializedName: "storageAccountId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, targetVmName: {
                serializedName: "targetVmName",
                type: {
                    name: "String",
                },
            }, targetVmSize: {
                serializedName: "targetVmSize",
                type: {
                    name: "String",
                },
            }, targetLocation: {
                serializedName: "targetLocation",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, targetResourceGroupId: {
                serializedName: "targetResourceGroupId",
                type: {
                    name: "String",
                },
            }, targetAvailabilitySetId: {
                serializedName: "targetAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, confidentialVmKeyVaultId: {
                serializedName: "confidentialVmKeyVaultId",
                type: {
                    name: "String",
                },
            }, targetVmSecurityProfile: {
                serializedName: "targetVmSecurityProfile",
                type: {
                    name: "Composite",
                    className: "VMwareCbtSecurityProfileProperties",
                },
            }, targetBootDiagnosticsStorageAccountId: {
                serializedName: "targetBootDiagnosticsStorageAccountId",
                type: {
                    name: "String",
                },
            }, targetVmTags: {
                serializedName: "targetVmTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, protectedDisks: {
                serializedName: "protectedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMwareCbtProtectedDiskDetails",
                        },
                    },
                },
            }, targetNetworkId: {
                serializedName: "targetNetworkId",
                type: {
                    name: "String",
                },
            }, testNetworkId: {
                serializedName: "testNetworkId",
                type: {
                    name: "String",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMwareCbtNicDetails",
                        },
                    },
                },
            }, targetNicTags: {
                serializedName: "targetNicTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, migrationRecoveryPointId: {
                serializedName: "migrationRecoveryPointId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, lastRecoveryPointReceived: {
                serializedName: "lastRecoveryPointReceived",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            }, lastRecoveryPointId: {
                serializedName: "lastRecoveryPointId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, initialSeedingProgressPercentage: {
                serializedName: "initialSeedingProgressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, migrationProgressPercentage: {
                serializedName: "migrationProgressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resyncProgressPercentage: {
                serializedName: "resyncProgressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resumeProgressPercentage: {
                serializedName: "resumeProgressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, deltaSyncProgressPercentage: {
                serializedName: "deltaSyncProgressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, isCheckSumResyncCycle: {
                serializedName: "isCheckSumResyncCycle",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, initialSeedingRetryCount: {
                serializedName: "initialSeedingRetryCount",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resyncRetryCount: {
                serializedName: "resyncRetryCount",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resumeRetryCount: {
                serializedName: "resumeRetryCount",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, deltaSyncRetryCount: {
                serializedName: "deltaSyncRetryCount",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resyncRequired: {
                serializedName: "resyncRequired",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, resyncState: {
                serializedName: "resyncState",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, performAutoResync: {
                serializedName: "performAutoResync",
                type: {
                    name: "String",
                },
            }, seedDiskTags: {
                serializedName: "seedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetDiskTags: {
                serializedName: "targetDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, supportedOSVersions: {
                serializedName: "supportedOSVersions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            }, applianceMonitoringDetails: {
                serializedName: "applianceMonitoringDetails",
                type: {
                    name: "Composite",
                    className: "ApplianceMonitoringDetails",
                },
            }, gatewayOperationDetails: {
                serializedName: "gatewayOperationDetails",
                type: {
                    name: "Composite",
                    className: "GatewayOperationDetails",
                },
            }, operationName: {
                serializedName: "operationName",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const VMwareCbtEnableMigrationInput = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtEnableMigrationInput",
        uberParent: "EnableMigrationProviderSpecificInput",
        polymorphicDiscriminator: EnableMigrationProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnableMigrationProviderSpecificInput.type.modelProperties), { vmwareMachineId: {
                serializedName: "vmwareMachineId",
                required: true,
                type: {
                    name: "String",
                },
            }, disksToInclude: {
                serializedName: "disksToInclude",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMwareCbtDiskInput",
                        },
                    },
                },
            }, licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            }, sqlServerLicenseType: {
                serializedName: "sqlServerLicenseType",
                type: {
                    name: "String",
                },
            }, performSqlBulkRegistration: {
                serializedName: "performSqlBulkRegistration",
                type: {
                    name: "String",
                },
            }, dataMoverRunAsAccountId: {
                serializedName: "dataMoverRunAsAccountId",
                required: true,
                type: {
                    name: "String",
                },
            }, snapshotRunAsAccountId: {
                serializedName: "snapshotRunAsAccountId",
                required: true,
                type: {
                    name: "String",
                },
            }, targetVmName: {
                serializedName: "targetVmName",
                type: {
                    name: "String",
                },
            }, targetVmSize: {
                serializedName: "targetVmSize",
                type: {
                    name: "String",
                },
            }, targetResourceGroupId: {
                serializedName: "targetResourceGroupId",
                required: true,
                type: {
                    name: "String",
                },
            }, targetNetworkId: {
                serializedName: "targetNetworkId",
                required: true,
                type: {
                    name: "String",
                },
            }, testNetworkId: {
                serializedName: "testNetworkId",
                type: {
                    name: "String",
                },
            }, targetSubnetName: {
                serializedName: "targetSubnetName",
                type: {
                    name: "String",
                },
            }, testSubnetName: {
                serializedName: "testSubnetName",
                type: {
                    name: "String",
                },
            }, targetAvailabilitySetId: {
                serializedName: "targetAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, confidentialVmKeyVaultId: {
                serializedName: "confidentialVmKeyVaultId",
                type: {
                    name: "String",
                },
            }, targetVmSecurityProfile: {
                serializedName: "targetVmSecurityProfile",
                type: {
                    name: "Composite",
                    className: "VMwareCbtSecurityProfileProperties",
                },
            }, targetBootDiagnosticsStorageAccountId: {
                serializedName: "targetBootDiagnosticsStorageAccountId",
                type: {
                    name: "String",
                },
            }, performAutoResync: {
                serializedName: "performAutoResync",
                type: {
                    name: "String",
                },
            }, targetVmTags: {
                serializedName: "targetVmTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, seedDiskTags: {
                serializedName: "seedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetDiskTags: {
                serializedName: "targetDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetNicTags: {
                serializedName: "targetNicTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            } }),
    },
};
const VMwareCbtUpdateMigrationItemInput = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtUpdateMigrationItemInput",
        uberParent: "UpdateMigrationItemProviderSpecificInput",
        polymorphicDiscriminator: UpdateMigrationItemProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UpdateMigrationItemProviderSpecificInput.type.modelProperties), { targetVmName: {
                serializedName: "targetVmName",
                type: {
                    name: "String",
                },
            }, targetVmSize: {
                serializedName: "targetVmSize",
                type: {
                    name: "String",
                },
            }, targetResourceGroupId: {
                serializedName: "targetResourceGroupId",
                type: {
                    name: "String",
                },
            }, targetAvailabilitySetId: {
                serializedName: "targetAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, targetBootDiagnosticsStorageAccountId: {
                serializedName: "targetBootDiagnosticsStorageAccountId",
                type: {
                    name: "String",
                },
            }, targetNetworkId: {
                serializedName: "targetNetworkId",
                type: {
                    name: "String",
                },
            }, testNetworkId: {
                serializedName: "testNetworkId",
                type: {
                    name: "String",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMwareCbtNicInput",
                        },
                    },
                },
            }, vmDisks: {
                serializedName: "vmDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMwareCbtUpdateDiskInput",
                        },
                    },
                },
            }, licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            }, sqlServerLicenseType: {
                serializedName: "sqlServerLicenseType",
                type: {
                    name: "String",
                },
            }, performAutoResync: {
                serializedName: "performAutoResync",
                type: {
                    name: "String",
                },
            }, targetVmTags: {
                serializedName: "targetVmTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetDiskTags: {
                serializedName: "targetDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetNicTags: {
                serializedName: "targetNicTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            } }),
    },
};
const VMwareCbtMigrateInput = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtMigrateInput",
        uberParent: "MigrateProviderSpecificInput",
        polymorphicDiscriminator: MigrateProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MigrateProviderSpecificInput.type.modelProperties), { performShutdown: {
                serializedName: "performShutdown",
                required: true,
                type: {
                    name: "String",
                },
            }, osUpgradeVersion: {
                serializedName: "osUpgradeVersion",
                type: {
                    name: "String",
                },
            } }),
    },
};
const VMwareCbtResumeReplicationInput = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtResumeReplicationInput",
        uberParent: "ResumeReplicationProviderSpecificInput",
        polymorphicDiscriminator: ResumeReplicationProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResumeReplicationProviderSpecificInput.type.modelProperties), { deleteMigrationResources: {
                serializedName: "deleteMigrationResources",
                type: {
                    name: "String",
                },
            } }),
    },
};
const VMwareCbtResyncInput = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtResyncInput",
        uberParent: "ResyncProviderSpecificInput",
        polymorphicDiscriminator: ResyncProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ResyncProviderSpecificInput.type.modelProperties), { skipCbtReset: {
                serializedName: "skipCbtReset",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const VMwareCbtTestMigrateInput = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtTestMigrateInput",
        uberParent: "TestMigrateProviderSpecificInput",
        polymorphicDiscriminator: TestMigrateProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TestMigrateProviderSpecificInput.type.modelProperties), { recoveryPointId: {
                serializedName: "recoveryPointId",
                required: true,
                type: {
                    name: "String",
                },
            }, networkId: {
                serializedName: "networkId",
                required: true,
                type: {
                    name: "String",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMwareCbtNicInput",
                        },
                    },
                },
            }, osUpgradeVersion: {
                serializedName: "osUpgradeVersion",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVVirtualMachineDetails = {
    serializedName: "HyperVVirtualMachine",
    type: {
        name: "Composite",
        className: "HyperVVirtualMachineDetails",
        uberParent: "ConfigurationSettings",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: Object.assign(Object.assign({}, ConfigurationSettings.type.modelProperties), { sourceItemId: {
                serializedName: "sourceItemId",
                type: {
                    name: "String",
                },
            }, generation: {
                serializedName: "generation",
                type: {
                    name: "String",
                },
            }, osDetails: {
                serializedName: "osDetails",
                type: {
                    name: "Composite",
                    className: "OSDetails",
                },
            }, diskDetails: {
                serializedName: "diskDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DiskDetails",
                        },
                    },
                },
            }, hasPhysicalDisk: {
                serializedName: "hasPhysicalDisk",
                type: {
                    name: "String",
                },
            }, hasFibreChannelAdapter: {
                serializedName: "hasFibreChannelAdapter",
                type: {
                    name: "String",
                },
            }, hasSharedVhd: {
                serializedName: "hasSharedVhd",
                type: {
                    name: "String",
                },
            }, hyperVHostId: {
                serializedName: "hyperVHostId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const ReplicationGroupDetails = {
    serializedName: "ReplicationGroupDetails",
    type: {
        name: "Composite",
        className: "ReplicationGroupDetails",
        uberParent: "ConfigurationSettings",
        polymorphicDiscriminator: ConfigurationSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ConfigurationSettings.type.modelProperties),
    },
};
const VMwareVirtualMachineDetails = {
    serializedName: "VMwareVirtualMachine",
    type: {
        name: "Composite",
        className: "VMwareVirtualMachineDetails",
        uberParent: "ConfigurationSettings",
        polymorphicDiscriminator: ConfigurationSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ConfigurationSettings.type.modelProperties), { agentGeneratedId: {
                serializedName: "agentGeneratedId",
                type: {
                    name: "String",
                },
            }, agentInstalled: {
                serializedName: "agentInstalled",
                type: {
                    name: "String",
                },
            }, osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            }, agentVersion: {
                serializedName: "agentVersion",
                type: {
                    name: "String",
                },
            }, ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String",
                },
            }, poweredOn: {
                serializedName: "poweredOn",
                type: {
                    name: "String",
                },
            }, vCenterInfrastructureId: {
                serializedName: "vCenterInfrastructureId",
                type: {
                    name: "String",
                },
            }, discoveryType: {
                serializedName: "discoveryType",
                type: {
                    name: "String",
                },
            }, diskDetails: {
                serializedName: "diskDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageDiskDetails",
                        },
                    },
                },
            }, validationErrors: {
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            } }),
    },
};
const A2ACrossClusterMigrationReplicationDetails = {
    serializedName: "A2ACrossClusterMigration",
    type: {
        name: "Composite",
        className: "A2ACrossClusterMigrationReplicationDetails",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificSettings.type.modelProperties), { fabricObjectId: {
                serializedName: "fabricObjectId",
                type: {
                    name: "String",
                },
            }, primaryFabricLocation: {
                serializedName: "primaryFabricLocation",
                type: {
                    name: "String",
                },
            }, osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            }, vmProtectionState: {
                serializedName: "vmProtectionState",
                type: {
                    name: "String",
                },
            }, vmProtectionStateDescription: {
                serializedName: "vmProtectionStateDescription",
                type: {
                    name: "String",
                },
            }, lifecycleId: {
                serializedName: "lifecycleId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2AReplicationDetails = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AReplicationDetails",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificSettings.type.modelProperties), { fabricObjectId: {
                serializedName: "fabricObjectId",
                type: {
                    name: "String",
                },
            }, initialPrimaryZone: {
                serializedName: "initialPrimaryZone",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, initialPrimaryFabricLocation: {
                serializedName: "initialPrimaryFabricLocation",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, initialRecoveryZone: {
                serializedName: "initialRecoveryZone",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, initialPrimaryExtendedLocation: {
                serializedName: "initialPrimaryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            }, initialRecoveryExtendedLocation: {
                serializedName: "initialRecoveryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            }, initialRecoveryFabricLocation: {
                serializedName: "initialRecoveryFabricLocation",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, multiVmGroupId: {
                serializedName: "multiVmGroupId",
                type: {
                    name: "String",
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                type: {
                    name: "String",
                },
            }, multiVmGroupCreateOption: {
                serializedName: "multiVmGroupCreateOption",
                type: {
                    name: "String",
                },
            }, managementId: {
                serializedName: "managementId",
                type: {
                    name: "String",
                },
            }, protectedDisks: {
                serializedName: "protectedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AProtectedDiskDetails",
                        },
                    },
                },
            }, unprotectedDisks: {
                serializedName: "unprotectedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AUnprotectedDiskDetails",
                        },
                    },
                },
            }, protectedManagedDisks: {
                serializedName: "protectedManagedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AProtectedManagedDiskDetails",
                        },
                    },
                },
            }, recoveryBootDiagStorageAccountId: {
                serializedName: "recoveryBootDiagStorageAccountId",
                type: {
                    name: "String",
                },
            }, primaryFabricLocation: {
                serializedName: "primaryFabricLocation",
                type: {
                    name: "String",
                },
            }, recoveryFabricLocation: {
                serializedName: "recoveryFabricLocation",
                type: {
                    name: "String",
                },
            }, osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            }, recoveryAzureVMSize: {
                serializedName: "recoveryAzureVMSize",
                type: {
                    name: "String",
                },
            }, recoveryAzureVMName: {
                serializedName: "recoveryAzureVMName",
                type: {
                    name: "String",
                },
            }, recoveryAzureResourceGroupId: {
                serializedName: "recoveryAzureResourceGroupId",
                type: {
                    name: "String",
                },
            }, recoveryCloudService: {
                serializedName: "recoveryCloudService",
                type: {
                    name: "String",
                },
            }, recoveryAvailabilitySet: {
                serializedName: "recoveryAvailabilitySet",
                type: {
                    name: "String",
                },
            }, selectedRecoveryAzureNetworkId: {
                serializedName: "selectedRecoveryAzureNetworkId",
                type: {
                    name: "String",
                },
            }, selectedTfoAzureNetworkId: {
                serializedName: "selectedTfoAzureNetworkId",
                type: {
                    name: "String",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMNicDetails",
                        },
                    },
                },
            }, vmSyncedConfigDetails: {
                serializedName: "vmSyncedConfigDetails",
                type: {
                    name: "Composite",
                    className: "AzureToAzureVmSyncedConfigDetails",
                },
            }, monitoringPercentageCompletion: {
                serializedName: "monitoringPercentageCompletion",
                type: {
                    name: "Number",
                },
            }, monitoringJobType: {
                serializedName: "monitoringJobType",
                type: {
                    name: "String",
                },
            }, lastHeartbeat: {
                serializedName: "lastHeartbeat",
                type: {
                    name: "DateTime",
                },
            }, agentVersion: {
                serializedName: "agentVersion",
                type: {
                    name: "String",
                },
            }, agentExpiryDate: {
                serializedName: "agentExpiryDate",
                type: {
                    name: "DateTime",
                },
            }, isReplicationAgentUpdateRequired: {
                serializedName: "isReplicationAgentUpdateRequired",
                type: {
                    name: "Boolean",
                },
            }, agentCertificateExpiryDate: {
                serializedName: "agentCertificateExpiryDate",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            }, isReplicationAgentCertificateUpdateRequired: {
                serializedName: "isReplicationAgentCertificateUpdateRequired",
                type: {
                    name: "Boolean",
                },
            }, recoveryFabricObjectId: {
                serializedName: "recoveryFabricObjectId",
                type: {
                    name: "String",
                },
            }, vmProtectionState: {
                serializedName: "vmProtectionState",
                type: {
                    name: "String",
                },
            }, vmProtectionStateDescription: {
                serializedName: "vmProtectionStateDescription",
                type: {
                    name: "String",
                },
            }, lifecycleId: {
                serializedName: "lifecycleId",
                type: {
                    name: "String",
                },
            }, testFailoverRecoveryFabricObjectId: {
                serializedName: "testFailoverRecoveryFabricObjectId",
                type: {
                    name: "String",
                },
            }, rpoInSeconds: {
                serializedName: "rpoInSeconds",
                type: {
                    name: "Number",
                },
            }, lastRpoCalculatedTime: {
                serializedName: "lastRpoCalculatedTime",
                type: {
                    name: "DateTime",
                },
            }, primaryAvailabilityZone: {
                serializedName: "primaryAvailabilityZone",
                type: {
                    name: "String",
                },
            }, recoveryAvailabilityZone: {
                serializedName: "recoveryAvailabilityZone",
                type: {
                    name: "String",
                },
            }, primaryExtendedLocation: {
                serializedName: "primaryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            }, recoveryExtendedLocation: {
                serializedName: "recoveryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            }, vmEncryptionType: {
                serializedName: "vmEncryptionType",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, tfoAzureVMName: {
                serializedName: "tfoAzureVMName",
                type: {
                    name: "String",
                },
            }, recoveryAzureGeneration: {
                serializedName: "recoveryAzureGeneration",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, recoveryProximityPlacementGroupId: {
                serializedName: "recoveryProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, autoProtectionOfDataDisk: {
                serializedName: "autoProtectionOfDataDisk",
                type: {
                    name: "String",
                },
            }, recoveryVirtualMachineScaleSetId: {
                serializedName: "recoveryVirtualMachineScaleSetId",
                type: {
                    name: "String",
                },
            }, recoveryCapacityReservationGroupId: {
                serializedName: "recoveryCapacityReservationGroupId",
                type: {
                    name: "String",
                },
            }, churnOptionSelected: {
                serializedName: "churnOptionSelected",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaAzureReplicationDetails = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureReplicationDetails",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificSettings.type.modelProperties), { azureVmDiskDetails: {
                serializedName: "azureVmDiskDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureVmDiskDetails",
                        },
                    },
                },
            }, recoveryAzureVmName: {
                serializedName: "recoveryAzureVmName",
                type: {
                    name: "String",
                },
            }, recoveryAzureVMSize: {
                serializedName: "recoveryAzureVMSize",
                type: {
                    name: "String",
                },
            }, recoveryAzureStorageAccount: {
                serializedName: "recoveryAzureStorageAccount",
                type: {
                    name: "String",
                },
            }, recoveryAzureLogStorageAccountId: {
                serializedName: "recoveryAzureLogStorageAccountId",
                type: {
                    name: "String",
                },
            }, lastReplicatedTime: {
                serializedName: "lastReplicatedTime",
                type: {
                    name: "DateTime",
                },
            }, rpoInSeconds: {
                serializedName: "rpoInSeconds",
                type: {
                    name: "Number",
                },
            }, lastRpoCalculatedTime: {
                serializedName: "lastRpoCalculatedTime",
                type: {
                    name: "DateTime",
                },
            }, vmId: {
                serializedName: "vmId",
                type: {
                    name: "String",
                },
            }, vmProtectionState: {
                serializedName: "vmProtectionState",
                type: {
                    name: "String",
                },
            }, vmProtectionStateDescription: {
                serializedName: "vmProtectionStateDescription",
                type: {
                    name: "String",
                },
            }, initialReplicationDetails: {
                serializedName: "initialReplicationDetails",
                type: {
                    name: "Composite",
                    className: "InitialReplicationDetails",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMNicDetails",
                        },
                    },
                },
            }, selectedRecoveryAzureNetworkId: {
                serializedName: "selectedRecoveryAzureNetworkId",
                type: {
                    name: "String",
                },
            }, selectedSourceNicId: {
                serializedName: "selectedSourceNicId",
                type: {
                    name: "String",
                },
            }, encryption: {
                serializedName: "encryption",
                type: {
                    name: "String",
                },
            }, oSDetails: {
                serializedName: "oSDetails",
                type: {
                    name: "Composite",
                    className: "OSDetails",
                },
            }, sourceVmRamSizeInMB: {
                serializedName: "sourceVmRamSizeInMB",
                type: {
                    name: "Number",
                },
            }, sourceVmCpuCount: {
                serializedName: "sourceVmCpuCount",
                type: {
                    name: "Number",
                },
            }, enableRdpOnTargetOption: {
                serializedName: "enableRdpOnTargetOption",
                type: {
                    name: "String",
                },
            }, recoveryAzureResourceGroupId: {
                serializedName: "recoveryAzureResourceGroupId",
                type: {
                    name: "String",
                },
            }, recoveryAvailabilitySetId: {
                serializedName: "recoveryAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, useManagedDisks: {
                serializedName: "useManagedDisks",
                type: {
                    name: "String",
                },
            }, licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            }, sqlServerLicenseType: {
                serializedName: "sqlServerLicenseType",
                type: {
                    name: "String",
                },
            }, lastRecoveryPointReceived: {
                serializedName: "lastRecoveryPointReceived",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            }, targetVmTags: {
                serializedName: "targetVmTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, seedManagedDiskTags: {
                serializedName: "seedManagedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetManagedDiskTags: {
                serializedName: "targetManagedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetNicTags: {
                serializedName: "targetNicTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, protectedManagedDisks: {
                serializedName: "protectedManagedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HyperVReplicaAzureManagedDiskDetails",
                        },
                    },
                },
            }, allAvailableOSUpgradeConfigurations: {
                serializedName: "allAvailableOSUpgradeConfigurations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OSUpgradeSupportedVersions",
                        },
                    },
                },
            } }),
    },
};
const HyperVReplicaBaseReplicationDetails = {
    serializedName: "HyperVReplicaBaseReplicationDetails",
    type: {
        name: "Composite",
        className: "HyperVReplicaBaseReplicationDetails",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificSettings.type.modelProperties), { lastReplicatedTime: {
                serializedName: "lastReplicatedTime",
                type: {
                    name: "DateTime",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMNicDetails",
                        },
                    },
                },
            }, vmId: {
                serializedName: "vmId",
                type: {
                    name: "String",
                },
            }, vmProtectionState: {
                serializedName: "vmProtectionState",
                type: {
                    name: "String",
                },
            }, vmProtectionStateDescription: {
                serializedName: "vmProtectionStateDescription",
                type: {
                    name: "String",
                },
            }, initialReplicationDetails: {
                serializedName: "initialReplicationDetails",
                type: {
                    name: "Composite",
                    className: "InitialReplicationDetails",
                },
            }, vMDiskDetails: {
                serializedName: "vMDiskDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DiskDetails",
                        },
                    },
                },
            } }),
    },
};
const HyperVReplicaBlueReplicationDetails = {
    serializedName: "HyperVReplica2012R2",
    type: {
        name: "Composite",
        className: "HyperVReplicaBlueReplicationDetails",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificSettings.type.modelProperties), { lastReplicatedTime: {
                serializedName: "lastReplicatedTime",
                type: {
                    name: "DateTime",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMNicDetails",
                        },
                    },
                },
            }, vmId: {
                serializedName: "vmId",
                type: {
                    name: "String",
                },
            }, vmProtectionState: {
                serializedName: "vmProtectionState",
                type: {
                    name: "String",
                },
            }, vmProtectionStateDescription: {
                serializedName: "vmProtectionStateDescription",
                type: {
                    name: "String",
                },
            }, initialReplicationDetails: {
                serializedName: "initialReplicationDetails",
                type: {
                    name: "Composite",
                    className: "InitialReplicationDetails",
                },
            }, vMDiskDetails: {
                serializedName: "vMDiskDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DiskDetails",
                        },
                    },
                },
            } }),
    },
};
const HyperVReplicaReplicationDetails = {
    serializedName: "HyperVReplica2012",
    type: {
        name: "Composite",
        className: "HyperVReplicaReplicationDetails",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificSettings.type.modelProperties), { lastReplicatedTime: {
                serializedName: "lastReplicatedTime",
                type: {
                    name: "DateTime",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMNicDetails",
                        },
                    },
                },
            }, vmId: {
                serializedName: "vmId",
                type: {
                    name: "String",
                },
            }, vmProtectionState: {
                serializedName: "vmProtectionState",
                type: {
                    name: "String",
                },
            }, vmProtectionStateDescription: {
                serializedName: "vmProtectionStateDescription",
                type: {
                    name: "String",
                },
            }, initialReplicationDetails: {
                serializedName: "initialReplicationDetails",
                type: {
                    name: "Composite",
                    className: "InitialReplicationDetails",
                },
            }, vMDiskDetails: {
                serializedName: "vMDiskDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DiskDetails",
                        },
                    },
                },
            } }),
    },
};
const InMageAzureV2ReplicationDetails = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2ReplicationDetails",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificSettings.type.modelProperties), { infrastructureVmId: {
                serializedName: "infrastructureVmId",
                type: {
                    name: "String",
                },
            }, vCenterInfrastructureId: {
                serializedName: "vCenterInfrastructureId",
                type: {
                    name: "String",
                },
            }, protectionStage: {
                serializedName: "protectionStage",
                type: {
                    name: "String",
                },
            }, vmId: {
                serializedName: "vmId",
                type: {
                    name: "String",
                },
            }, vmProtectionState: {
                serializedName: "vmProtectionState",
                type: {
                    name: "String",
                },
            }, vmProtectionStateDescription: {
                serializedName: "vmProtectionStateDescription",
                type: {
                    name: "String",
                },
            }, resyncProgressPercentage: {
                serializedName: "resyncProgressPercentage",
                type: {
                    name: "Number",
                },
            }, rpoInSeconds: {
                serializedName: "rpoInSeconds",
                type: {
                    name: "Number",
                },
            }, compressedDataRateInMB: {
                serializedName: "compressedDataRateInMB",
                type: {
                    name: "Number",
                },
            }, uncompressedDataRateInMB: {
                serializedName: "uncompressedDataRateInMB",
                type: {
                    name: "Number",
                },
            }, ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String",
                },
            }, agentVersion: {
                serializedName: "agentVersion",
                type: {
                    name: "String",
                },
            }, agentExpiryDate: {
                serializedName: "agentExpiryDate",
                type: {
                    name: "DateTime",
                },
            }, isAgentUpdateRequired: {
                serializedName: "isAgentUpdateRequired",
                type: {
                    name: "String",
                },
            }, isRebootAfterUpdateRequired: {
                serializedName: "isRebootAfterUpdateRequired",
                type: {
                    name: "String",
                },
            }, lastHeartbeat: {
                serializedName: "lastHeartbeat",
                type: {
                    name: "DateTime",
                },
            }, processServerId: {
                serializedName: "processServerId",
                type: {
                    name: "String",
                },
            }, processServerName: {
                serializedName: "processServerName",
                type: {
                    name: "String",
                },
            }, multiVmGroupId: {
                serializedName: "multiVmGroupId",
                type: {
                    name: "String",
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                type: {
                    name: "String",
                },
            }, multiVmSyncStatus: {
                serializedName: "multiVmSyncStatus",
                type: {
                    name: "String",
                },
            }, protectedDisks: {
                serializedName: "protectedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageAzureV2ProtectedDiskDetails",
                        },
                    },
                },
            }, diskResized: {
                serializedName: "diskResized",
                type: {
                    name: "String",
                },
            }, masterTargetId: {
                serializedName: "masterTargetId",
                type: {
                    name: "String",
                },
            }, sourceVmCpuCount: {
                serializedName: "sourceVmCpuCount",
                type: {
                    name: "Number",
                },
            }, sourceVmRamSizeInMB: {
                serializedName: "sourceVmRamSizeInMB",
                type: {
                    name: "Number",
                },
            }, osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            }, vhdName: {
                serializedName: "vhdName",
                type: {
                    name: "String",
                },
            }, osDiskId: {
                serializedName: "osDiskId",
                type: {
                    name: "String",
                },
            }, azureVMDiskDetails: {
                serializedName: "azureVMDiskDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AzureVmDiskDetails",
                        },
                    },
                },
            }, recoveryAzureVMName: {
                serializedName: "recoveryAzureVMName",
                type: {
                    name: "String",
                },
            }, recoveryAzureVMSize: {
                serializedName: "recoveryAzureVMSize",
                type: {
                    name: "String",
                },
            }, recoveryAzureStorageAccount: {
                serializedName: "recoveryAzureStorageAccount",
                type: {
                    name: "String",
                },
            }, recoveryAzureLogStorageAccountId: {
                serializedName: "recoveryAzureLogStorageAccountId",
                type: {
                    name: "String",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMNicDetails",
                        },
                    },
                },
            }, selectedRecoveryAzureNetworkId: {
                serializedName: "selectedRecoveryAzureNetworkId",
                type: {
                    name: "String",
                },
            }, selectedTfoAzureNetworkId: {
                serializedName: "selectedTfoAzureNetworkId",
                type: {
                    name: "String",
                },
            }, selectedSourceNicId: {
                serializedName: "selectedSourceNicId",
                type: {
                    name: "String",
                },
            }, discoveryType: {
                serializedName: "discoveryType",
                type: {
                    name: "String",
                },
            }, enableRdpOnTargetOption: {
                serializedName: "enableRdpOnTargetOption",
                type: {
                    name: "String",
                },
            }, datastores: {
                serializedName: "datastores",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            }, targetVmId: {
                serializedName: "targetVmId",
                type: {
                    name: "String",
                },
            }, recoveryAzureResourceGroupId: {
                serializedName: "recoveryAzureResourceGroupId",
                type: {
                    name: "String",
                },
            }, recoveryAvailabilitySetId: {
                serializedName: "recoveryAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, useManagedDisks: {
                serializedName: "useManagedDisks",
                type: {
                    name: "String",
                },
            }, licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            }, sqlServerLicenseType: {
                serializedName: "sqlServerLicenseType",
                type: {
                    name: "String",
                },
            }, validationErrors: {
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            }, lastRpoCalculatedTime: {
                serializedName: "lastRpoCalculatedTime",
                type: {
                    name: "DateTime",
                },
            }, lastUpdateReceivedTime: {
                serializedName: "lastUpdateReceivedTime",
                type: {
                    name: "DateTime",
                },
            }, replicaId: {
                serializedName: "replicaId",
                type: {
                    name: "String",
                },
            }, osVersion: {
                serializedName: "osVersion",
                type: {
                    name: "String",
                },
            }, protectedManagedDisks: {
                serializedName: "protectedManagedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageAzureV2ManagedDiskDetails",
                        },
                    },
                },
            }, lastRecoveryPointReceived: {
                serializedName: "lastRecoveryPointReceived",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            }, firmwareType: {
                serializedName: "firmwareType",
                type: {
                    name: "String",
                },
            }, azureVmGeneration: {
                serializedName: "azureVmGeneration",
                type: {
                    name: "String",
                },
            }, isAdditionalStatsAvailable: {
                serializedName: "isAdditionalStatsAvailable",
                type: {
                    name: "Boolean",
                },
            }, totalDataTransferred: {
                serializedName: "totalDataTransferred",
                type: {
                    name: "Number",
                },
            }, totalProgressHealth: {
                serializedName: "totalProgressHealth",
                type: {
                    name: "String",
                },
            }, targetVmTags: {
                serializedName: "targetVmTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, seedManagedDiskTags: {
                serializedName: "seedManagedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetManagedDiskTags: {
                serializedName: "targetManagedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetNicTags: {
                serializedName: "targetNicTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, switchProviderBlockingErrorDetails: {
                serializedName: "switchProviderBlockingErrorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageAzureV2SwitchProviderBlockingErrorDetails",
                        },
                    },
                },
            }, switchProviderDetails: {
                serializedName: "switchProviderDetails",
                type: {
                    name: "Composite",
                    className: "InMageAzureV2SwitchProviderDetails",
                },
            }, supportedOSVersions: {
                serializedName: "supportedOSVersions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            }, allAvailableOSUpgradeConfigurations: {
                serializedName: "allAvailableOSUpgradeConfigurations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OSUpgradeSupportedVersions",
                        },
                    },
                },
            }, osName: {
                serializedName: "osName",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmFailbackReplicationDetails = {
    serializedName: "InMageRcmFailback",
    type: {
        name: "Composite",
        className: "InMageRcmFailbackReplicationDetails",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificSettings.type.modelProperties), { internalIdentifier: {
                serializedName: "internalIdentifier",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, azureVirtualMachineId: {
                serializedName: "azureVirtualMachineId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, reprotectAgentId: {
                serializedName: "reprotectAgentId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, reprotectAgentName: {
                serializedName: "reprotectAgentName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, osType: {
                serializedName: "osType",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, logStorageAccountId: {
                serializedName: "logStorageAccountId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, targetvCenterId: {
                serializedName: "targetvCenterId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, targetDataStoreName: {
                serializedName: "targetDataStoreName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, targetVmName: {
                serializedName: "targetVmName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, initialReplicationProgressPercentage: {
                serializedName: "initialReplicationProgressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, initialReplicationProcessedBytes: {
                serializedName: "initialReplicationProcessedBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, initialReplicationTransferredBytes: {
                serializedName: "initialReplicationTransferredBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, initialReplicationProgressHealth: {
                serializedName: "initialReplicationProgressHealth",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, resyncProgressPercentage: {
                serializedName: "resyncProgressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resyncProcessedBytes: {
                serializedName: "resyncProcessedBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resyncTransferredBytes: {
                serializedName: "resyncTransferredBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resyncProgressHealth: {
                serializedName: "resyncProgressHealth",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, resyncRequired: {
                serializedName: "resyncRequired",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, resyncState: {
                serializedName: "resyncState",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, protectedDisks: {
                serializedName: "protectedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageRcmFailbackProtectedDiskDetails",
                        },
                    },
                },
            }, mobilityAgentDetails: {
                serializedName: "mobilityAgentDetails",
                type: {
                    name: "Composite",
                    className: "InMageRcmFailbackMobilityAgentDetails",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageRcmFailbackNicDetails",
                        },
                    },
                },
            }, lastPlannedFailoverStartTime: {
                serializedName: "lastPlannedFailoverStartTime",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            }, lastPlannedFailoverStatus: {
                serializedName: "lastPlannedFailoverStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, discoveredVmDetails: {
                serializedName: "discoveredVmDetails",
                type: {
                    name: "Composite",
                    className: "InMageRcmFailbackDiscoveredProtectedVmDetails",
                },
            }, lastUsedPolicyId: {
                serializedName: "lastUsedPolicyId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, lastUsedPolicyFriendlyName: {
                serializedName: "lastUsedPolicyFriendlyName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, isAgentRegistrationSuccessfulAfterFailover: {
                serializedName: "isAgentRegistrationSuccessfulAfterFailover",
                readOnly: true,
                type: {
                    name: "Boolean",
                },
            } }),
    },
};
const InMageRcmReplicationDetails = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmReplicationDetails",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificSettings.type.modelProperties), { internalIdentifier: {
                serializedName: "internalIdentifier",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, fabricDiscoveryMachineId: {
                serializedName: "fabricDiscoveryMachineId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, discoveryType: {
                serializedName: "discoveryType",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, processServerId: {
                serializedName: "processServerId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, processorCoreCount: {
                serializedName: "processorCoreCount",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, allocatedMemoryInMB: {
                serializedName: "allocatedMemoryInMB",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, processServerName: {
                serializedName: "processServerName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, runAsAccountId: {
                serializedName: "runAsAccountId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, osType: {
                serializedName: "osType",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, firmwareType: {
                serializedName: "firmwareType",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, primaryNicIpAddress: {
                serializedName: "primaryNicIpAddress",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, targetGeneration: {
                serializedName: "targetGeneration",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            }, storageAccountId: {
                serializedName: "storageAccountId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, targetVmName: {
                serializedName: "targetVmName",
                type: {
                    name: "String",
                },
            }, targetVmSize: {
                serializedName: "targetVmSize",
                type: {
                    name: "String",
                },
            }, targetResourceGroupId: {
                serializedName: "targetResourceGroupId",
                type: {
                    name: "String",
                },
            }, targetLocation: {
                serializedName: "targetLocation",
                type: {
                    name: "String",
                },
            }, targetAvailabilitySetId: {
                serializedName: "targetAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, targetBootDiagnosticsStorageAccountId: {
                serializedName: "targetBootDiagnosticsStorageAccountId",
                type: {
                    name: "String",
                },
            }, targetNetworkId: {
                serializedName: "targetNetworkId",
                type: {
                    name: "String",
                },
            }, testNetworkId: {
                serializedName: "testNetworkId",
                type: {
                    name: "String",
                },
            }, failoverRecoveryPointId: {
                serializedName: "failoverRecoveryPointId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, lastRecoveryPointReceived: {
                serializedName: "lastRecoveryPointReceived",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            }, lastRpoInSeconds: {
                serializedName: "lastRpoInSeconds",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, lastRpoCalculatedTime: {
                serializedName: "lastRpoCalculatedTime",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            }, lastRecoveryPointId: {
                serializedName: "lastRecoveryPointId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, initialReplicationProgressPercentage: {
                serializedName: "initialReplicationProgressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, initialReplicationProcessedBytes: {
                serializedName: "initialReplicationProcessedBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, initialReplicationTransferredBytes: {
                serializedName: "initialReplicationTransferredBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, initialReplicationProgressHealth: {
                serializedName: "initialReplicationProgressHealth",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, resyncProgressPercentage: {
                serializedName: "resyncProgressPercentage",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resyncProcessedBytes: {
                serializedName: "resyncProcessedBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resyncTransferredBytes: {
                serializedName: "resyncTransferredBytes",
                readOnly: true,
                type: {
                    name: "Number",
                },
            }, resyncProgressHealth: {
                serializedName: "resyncProgressHealth",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, resyncRequired: {
                serializedName: "resyncRequired",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, resyncState: {
                serializedName: "resyncState",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, agentUpgradeState: {
                serializedName: "agentUpgradeState",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, lastAgentUpgradeType: {
                serializedName: "lastAgentUpgradeType",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, agentUpgradeJobId: {
                serializedName: "agentUpgradeJobId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, agentUpgradeAttemptToVersion: {
                serializedName: "agentUpgradeAttemptToVersion",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, protectedDisks: {
                serializedName: "protectedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageRcmProtectedDiskDetails",
                        },
                    },
                },
            }, isLastUpgradeSuccessful: {
                serializedName: "isLastUpgradeSuccessful",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, isAgentRegistrationSuccessfulAfterFailover: {
                serializedName: "isAgentRegistrationSuccessfulAfterFailover",
                readOnly: true,
                type: {
                    name: "Boolean",
                },
            }, mobilityAgentDetails: {
                serializedName: "mobilityAgentDetails",
                type: {
                    name: "Composite",
                    className: "InMageRcmMobilityAgentDetails",
                },
            }, lastAgentUpgradeErrorDetails: {
                serializedName: "lastAgentUpgradeErrorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageRcmLastAgentUpgradeErrorDetails",
                        },
                    },
                },
            }, agentUpgradeBlockingErrorDetails: {
                serializedName: "agentUpgradeBlockingErrorDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageRcmAgentUpgradeBlockingErrorDetails",
                        },
                    },
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageRcmNicDetails",
                        },
                    },
                },
            }, discoveredVmDetails: {
                serializedName: "discoveredVmDetails",
                type: {
                    name: "Composite",
                    className: "InMageRcmDiscoveredProtectedVmDetails",
                },
            } }),
    },
};
const InMageReplicationDetails = {
    serializedName: "InMage",
    type: {
        name: "Composite",
        className: "InMageReplicationDetails",
        uberParent: "ReplicationProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProviderSpecificSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificSettings.type.modelProperties), { activeSiteType: {
                serializedName: "activeSiteType",
                type: {
                    name: "String",
                },
            }, sourceVmCpuCount: {
                serializedName: "sourceVmCpuCount",
                type: {
                    name: "Number",
                },
            }, sourceVmRamSizeInMB: {
                serializedName: "sourceVmRamSizeInMB",
                type: {
                    name: "Number",
                },
            }, osDetails: {
                serializedName: "osDetails",
                type: {
                    name: "Composite",
                    className: "OSDiskDetails",
                },
            }, protectionStage: {
                serializedName: "protectionStage",
                type: {
                    name: "String",
                },
            }, vmId: {
                serializedName: "vmId",
                type: {
                    name: "String",
                },
            }, vmProtectionState: {
                serializedName: "vmProtectionState",
                type: {
                    name: "String",
                },
            }, vmProtectionStateDescription: {
                serializedName: "vmProtectionStateDescription",
                type: {
                    name: "String",
                },
            }, resyncDetails: {
                serializedName: "resyncDetails",
                type: {
                    name: "Composite",
                    className: "InitialReplicationDetails",
                },
            }, retentionWindowStart: {
                serializedName: "retentionWindowStart",
                type: {
                    name: "DateTime",
                },
            }, retentionWindowEnd: {
                serializedName: "retentionWindowEnd",
                type: {
                    name: "DateTime",
                },
            }, compressedDataRateInMB: {
                serializedName: "compressedDataRateInMB",
                type: {
                    name: "Number",
                },
            }, uncompressedDataRateInMB: {
                serializedName: "uncompressedDataRateInMB",
                type: {
                    name: "Number",
                },
            }, rpoInSeconds: {
                serializedName: "rpoInSeconds",
                type: {
                    name: "Number",
                },
            }, protectedDisks: {
                serializedName: "protectedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageProtectedDiskDetails",
                        },
                    },
                },
            }, ipAddress: {
                serializedName: "ipAddress",
                type: {
                    name: "String",
                },
            }, lastHeartbeat: {
                serializedName: "lastHeartbeat",
                type: {
                    name: "DateTime",
                },
            }, processServerId: {
                serializedName: "processServerId",
                type: {
                    name: "String",
                },
            }, masterTargetId: {
                serializedName: "masterTargetId",
                type: {
                    name: "String",
                },
            }, consistencyPoints: {
                serializedName: "consistencyPoints",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "DateTime" } },
                },
            }, diskResized: {
                serializedName: "diskResized",
                type: {
                    name: "String",
                },
            }, rebootAfterUpdateStatus: {
                serializedName: "rebootAfterUpdateStatus",
                type: {
                    name: "String",
                },
            }, multiVmGroupId: {
                serializedName: "multiVmGroupId",
                type: {
                    name: "String",
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                type: {
                    name: "String",
                },
            }, multiVmSyncStatus: {
                serializedName: "multiVmSyncStatus",
                type: {
                    name: "String",
                },
            }, agentDetails: {
                serializedName: "agentDetails",
                type: {
                    name: "Composite",
                    className: "InMageAgentDetails",
                },
            }, vCenterInfrastructureId: {
                serializedName: "vCenterInfrastructureId",
                type: {
                    name: "String",
                },
            }, infrastructureVmId: {
                serializedName: "infrastructureVmId",
                type: {
                    name: "String",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "VMNicDetails",
                        },
                    },
                },
            }, discoveryType: {
                serializedName: "discoveryType",
                type: {
                    name: "String",
                },
            }, azureStorageAccountId: {
                serializedName: "azureStorageAccountId",
                type: {
                    name: "String",
                },
            }, datastores: {
                serializedName: "datastores",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            }, validationErrors: {
                serializedName: "validationErrors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HealthError",
                        },
                    },
                },
            }, lastRpoCalculatedTime: {
                serializedName: "lastRpoCalculatedTime",
                type: {
                    name: "DateTime",
                },
            }, lastUpdateReceivedTime: {
                serializedName: "lastUpdateReceivedTime",
                type: {
                    name: "DateTime",
                },
            }, replicaId: {
                serializedName: "replicaId",
                type: {
                    name: "String",
                },
            }, osVersion: {
                serializedName: "osVersion",
                type: {
                    name: "String",
                },
            }, isAdditionalStatsAvailable: {
                serializedName: "isAdditionalStatsAvailable",
                type: {
                    name: "Boolean",
                },
            }, totalDataTransferred: {
                serializedName: "totalDataTransferred",
                type: {
                    name: "Number",
                },
            }, totalProgressHealth: {
                serializedName: "totalProgressHealth",
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2ACrossClusterMigrationEnableProtectionInput = {
    serializedName: "A2ACrossClusterMigration",
    type: {
        name: "Composite",
        className: "A2ACrossClusterMigrationEnableProtectionInput",
        uberParent: "EnableProtectionProviderSpecificInput",
        polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnableProtectionProviderSpecificInput.type.modelProperties), { fabricObjectId: {
                serializedName: "fabricObjectId",
                type: {
                    name: "String",
                },
            }, recoveryContainerId: {
                serializedName: "recoveryContainerId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2AEnableProtectionInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AEnableProtectionInput",
        uberParent: "EnableProtectionProviderSpecificInput",
        polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnableProtectionProviderSpecificInput.type.modelProperties), { fabricObjectId: {
                serializedName: "fabricObjectId",
                required: true,
                type: {
                    name: "String",
                },
            }, recoveryContainerId: {
                serializedName: "recoveryContainerId",
                type: {
                    name: "String",
                },
            }, recoveryResourceGroupId: {
                serializedName: "recoveryResourceGroupId",
                type: {
                    name: "String",
                },
            }, recoveryCloudServiceId: {
                serializedName: "recoveryCloudServiceId",
                type: {
                    name: "String",
                },
            }, recoveryAvailabilitySetId: {
                serializedName: "recoveryAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, recoveryProximityPlacementGroupId: {
                serializedName: "recoveryProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, vmDisks: {
                serializedName: "vmDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AVmDiskInputDetails",
                        },
                    },
                },
            }, vmManagedDisks: {
                serializedName: "vmManagedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AVmManagedDiskInputDetails",
                        },
                    },
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                type: {
                    name: "String",
                },
            }, multiVmGroupId: {
                serializedName: "multiVmGroupId",
                type: {
                    name: "String",
                },
            }, recoveryBootDiagStorageAccountId: {
                serializedName: "recoveryBootDiagStorageAccountId",
                type: {
                    name: "String",
                },
            }, diskEncryptionInfo: {
                serializedName: "diskEncryptionInfo",
                type: {
                    name: "Composite",
                    className: "DiskEncryptionInfo",
                },
            }, recoveryAvailabilityZone: {
                serializedName: "recoveryAvailabilityZone",
                type: {
                    name: "String",
                },
            }, recoveryExtendedLocation: {
                serializedName: "recoveryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            }, recoveryAzureNetworkId: {
                serializedName: "recoveryAzureNetworkId",
                type: {
                    name: "String",
                },
            }, recoverySubnetName: {
                serializedName: "recoverySubnetName",
                type: {
                    name: "String",
                },
            }, recoveryVirtualMachineScaleSetId: {
                serializedName: "recoveryVirtualMachineScaleSetId",
                type: {
                    name: "String",
                },
            }, recoveryCapacityReservationGroupId: {
                serializedName: "recoveryCapacityReservationGroupId",
                type: {
                    name: "String",
                },
            }, autoProtectionOfDataDisk: {
                serializedName: "autoProtectionOfDataDisk",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaAzureEnableProtectionInput = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureEnableProtectionInput",
        uberParent: "EnableProtectionProviderSpecificInput",
        polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnableProtectionProviderSpecificInput.type.modelProperties), { hvHostVmId: {
                serializedName: "hvHostVmId",
                type: {
                    name: "String",
                },
            }, vmName: {
                serializedName: "vmName",
                type: {
                    name: "String",
                },
            }, osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            }, vhdId: {
                serializedName: "vhdId",
                type: {
                    name: "String",
                },
            }, targetStorageAccountId: {
                serializedName: "targetStorageAccountId",
                type: {
                    name: "String",
                },
            }, targetAzureNetworkId: {
                serializedName: "targetAzureNetworkId",
                type: {
                    name: "String",
                },
            }, targetAzureSubnetId: {
                serializedName: "targetAzureSubnetId",
                type: {
                    name: "String",
                },
            }, enableRdpOnTargetOption: {
                serializedName: "enableRdpOnTargetOption",
                type: {
                    name: "String",
                },
            }, targetAzureVmName: {
                serializedName: "targetAzureVmName",
                type: {
                    name: "String",
                },
            }, logStorageAccountId: {
                serializedName: "logStorageAccountId",
                type: {
                    name: "String",
                },
            }, disksToInclude: {
                serializedName: "disksToInclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            }, targetAzureV1ResourceGroupId: {
                serializedName: "targetAzureV1ResourceGroupId",
                type: {
                    name: "String",
                },
            }, targetAzureV2ResourceGroupId: {
                serializedName: "targetAzureV2ResourceGroupId",
                type: {
                    name: "String",
                },
            }, useManagedDisks: {
                serializedName: "useManagedDisks",
                type: {
                    name: "String",
                },
            }, targetAvailabilitySetId: {
                serializedName: "targetAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            }, sqlServerLicenseType: {
                serializedName: "sqlServerLicenseType",
                type: {
                    name: "String",
                },
            }, targetVmSize: {
                serializedName: "targetVmSize",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, useManagedDisksForReplication: {
                serializedName: "useManagedDisksForReplication",
                type: {
                    name: "String",
                },
            }, diskType: {
                serializedName: "diskType",
                type: {
                    name: "String",
                },
            }, disksToIncludeForManagedDisks: {
                serializedName: "disksToIncludeForManagedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HyperVReplicaAzureDiskInputDetails",
                        },
                    },
                },
            }, diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String",
                },
            }, targetVmTags: {
                serializedName: "targetVmTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, seedManagedDiskTags: {
                serializedName: "seedManagedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetManagedDiskTags: {
                serializedName: "targetManagedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetNicTags: {
                serializedName: "targetNicTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            } }),
    },
};
const InMageAzureV2EnableProtectionInput = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2EnableProtectionInput",
        uberParent: "EnableProtectionProviderSpecificInput",
        polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnableProtectionProviderSpecificInput.type.modelProperties), { masterTargetId: {
                serializedName: "masterTargetId",
                type: {
                    name: "String",
                },
            }, processServerId: {
                serializedName: "processServerId",
                type: {
                    name: "String",
                },
            }, storageAccountId: {
                serializedName: "storageAccountId",
                type: {
                    name: "String",
                },
            }, runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            }, multiVmGroupId: {
                serializedName: "multiVmGroupId",
                type: {
                    name: "String",
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                type: {
                    name: "String",
                },
            }, disksToInclude: {
                serializedName: "disksToInclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageAzureV2DiskInputDetails",
                        },
                    },
                },
            }, targetAzureNetworkId: {
                serializedName: "targetAzureNetworkId",
                type: {
                    name: "String",
                },
            }, targetAzureSubnetId: {
                serializedName: "targetAzureSubnetId",
                type: {
                    name: "String",
                },
            }, enableRdpOnTargetOption: {
                serializedName: "enableRdpOnTargetOption",
                type: {
                    name: "String",
                },
            }, targetAzureVmName: {
                serializedName: "targetAzureVmName",
                type: {
                    name: "String",
                },
            }, logStorageAccountId: {
                serializedName: "logStorageAccountId",
                type: {
                    name: "String",
                },
            }, targetAzureV1ResourceGroupId: {
                serializedName: "targetAzureV1ResourceGroupId",
                type: {
                    name: "String",
                },
            }, targetAzureV2ResourceGroupId: {
                serializedName: "targetAzureV2ResourceGroupId",
                type: {
                    name: "String",
                },
            }, diskType: {
                serializedName: "diskType",
                type: {
                    name: "String",
                },
            }, targetAvailabilitySetId: {
                serializedName: "targetAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            }, sqlServerLicenseType: {
                serializedName: "sqlServerLicenseType",
                type: {
                    name: "String",
                },
            }, targetVmSize: {
                serializedName: "targetVmSize",
                type: {
                    name: "String",
                },
            }, diskEncryptionSetId: {
                serializedName: "diskEncryptionSetId",
                type: {
                    name: "String",
                },
            }, targetVmTags: {
                serializedName: "targetVmTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, seedManagedDiskTags: {
                serializedName: "seedManagedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetManagedDiskTags: {
                serializedName: "targetManagedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetNicTags: {
                serializedName: "targetNicTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            } }),
    },
};
const InMageEnableProtectionInput = {
    serializedName: "InMage",
    type: {
        name: "Composite",
        className: "InMageEnableProtectionInput",
        uberParent: "EnableProtectionProviderSpecificInput",
        polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnableProtectionProviderSpecificInput.type.modelProperties), { vmFriendlyName: {
                serializedName: "vmFriendlyName",
                type: {
                    name: "String",
                },
            }, masterTargetId: {
                serializedName: "masterTargetId",
                required: true,
                type: {
                    name: "String",
                },
            }, processServerId: {
                serializedName: "processServerId",
                required: true,
                type: {
                    name: "String",
                },
            }, retentionDrive: {
                serializedName: "retentionDrive",
                required: true,
                type: {
                    name: "String",
                },
            }, runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            }, multiVmGroupId: {
                serializedName: "multiVmGroupId",
                required: true,
                type: {
                    name: "String",
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                required: true,
                type: {
                    name: "String",
                },
            }, datastoreName: {
                serializedName: "datastoreName",
                type: {
                    name: "String",
                },
            }, diskExclusionInput: {
                serializedName: "diskExclusionInput",
                type: {
                    name: "Composite",
                    className: "InMageDiskExclusionInput",
                },
            }, disksToInclude: {
                serializedName: "disksToInclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            } }),
    },
};
const InMageRcmEnableProtectionInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmEnableProtectionInput",
        uberParent: "EnableProtectionProviderSpecificInput",
        polymorphicDiscriminator: EnableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, EnableProtectionProviderSpecificInput.type.modelProperties), { fabricDiscoveryMachineId: {
                serializedName: "fabricDiscoveryMachineId",
                required: true,
                type: {
                    name: "String",
                },
            }, disksToInclude: {
                serializedName: "disksToInclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageRcmDiskInput",
                        },
                    },
                },
            }, disksDefault: {
                serializedName: "disksDefault",
                type: {
                    name: "Composite",
                    className: "InMageRcmDisksDefaultInput",
                },
            }, targetResourceGroupId: {
                serializedName: "targetResourceGroupId",
                required: true,
                type: {
                    name: "String",
                },
            }, targetNetworkId: {
                serializedName: "targetNetworkId",
                type: {
                    name: "String",
                },
            }, testNetworkId: {
                serializedName: "testNetworkId",
                type: {
                    name: "String",
                },
            }, targetSubnetName: {
                serializedName: "targetSubnetName",
                type: {
                    name: "String",
                },
            }, testSubnetName: {
                serializedName: "testSubnetName",
                type: {
                    name: "String",
                },
            }, targetVmName: {
                serializedName: "targetVmName",
                type: {
                    name: "String",
                },
            }, targetVmSize: {
                serializedName: "targetVmSize",
                type: {
                    name: "String",
                },
            }, licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            }, targetAvailabilitySetId: {
                serializedName: "targetAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, targetBootDiagnosticsStorageAccountId: {
                serializedName: "targetBootDiagnosticsStorageAccountId",
                type: {
                    name: "String",
                },
            }, runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            }, processServerId: {
                serializedName: "processServerId",
                required: true,
                type: {
                    name: "String",
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2AUpdateReplicationProtectedItemInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AUpdateReplicationProtectedItemInput",
        uberParent: "UpdateReplicationProtectedItemProviderInput",
        polymorphicDiscriminator: UpdateReplicationProtectedItemProviderInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UpdateReplicationProtectedItemProviderInput.type.modelProperties), { recoveryCloudServiceId: {
                serializedName: "recoveryCloudServiceId",
                type: {
                    name: "String",
                },
            }, recoveryResourceGroupId: {
                serializedName: "recoveryResourceGroupId",
                type: {
                    name: "String",
                },
            }, managedDiskUpdateDetails: {
                serializedName: "managedDiskUpdateDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AVmManagedDiskUpdateDetails",
                        },
                    },
                },
            }, recoveryBootDiagStorageAccountId: {
                serializedName: "recoveryBootDiagStorageAccountId",
                type: {
                    name: "String",
                },
            }, diskEncryptionInfo: {
                serializedName: "diskEncryptionInfo",
                type: {
                    name: "Composite",
                    className: "DiskEncryptionInfo",
                },
            }, tfoAzureVMName: {
                serializedName: "tfoAzureVMName",
                type: {
                    name: "String",
                },
            }, recoveryProximityPlacementGroupId: {
                serializedName: "recoveryProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, recoveryVirtualMachineScaleSetId: {
                serializedName: "recoveryVirtualMachineScaleSetId",
                type: {
                    name: "String",
                },
            }, recoveryCapacityReservationGroupId: {
                serializedName: "recoveryCapacityReservationGroupId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaAzureUpdateReplicationProtectedItemInput = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureUpdateReplicationProtectedItemInput",
        uberParent: "UpdateReplicationProtectedItemProviderInput",
        polymorphicDiscriminator: UpdateReplicationProtectedItemProviderInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UpdateReplicationProtectedItemProviderInput.type.modelProperties), { recoveryAzureV1ResourceGroupId: {
                serializedName: "recoveryAzureV1ResourceGroupId",
                type: {
                    name: "String",
                },
            }, recoveryAzureV2ResourceGroupId: {
                serializedName: "recoveryAzureV2ResourceGroupId",
                type: {
                    name: "String",
                },
            }, useManagedDisks: {
                serializedName: "useManagedDisks",
                type: {
                    name: "String",
                },
            }, diskIdToDiskEncryptionMap: {
                serializedName: "diskIdToDiskEncryptionMap",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetVmTags: {
                serializedName: "targetVmTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetManagedDiskTags: {
                serializedName: "targetManagedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetNicTags: {
                serializedName: "targetNicTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, sqlServerLicenseType: {
                serializedName: "sqlServerLicenseType",
                type: {
                    name: "String",
                },
            }, vmDisks: {
                serializedName: "vmDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UpdateDiskInput",
                        },
                    },
                },
            } }),
    },
};
const InMageAzureV2UpdateReplicationProtectedItemInput = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2UpdateReplicationProtectedItemInput",
        uberParent: "UpdateReplicationProtectedItemProviderInput",
        polymorphicDiscriminator: UpdateReplicationProtectedItemProviderInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UpdateReplicationProtectedItemProviderInput.type.modelProperties), { recoveryAzureV1ResourceGroupId: {
                serializedName: "recoveryAzureV1ResourceGroupId",
                type: {
                    name: "String",
                },
            }, recoveryAzureV2ResourceGroupId: {
                serializedName: "recoveryAzureV2ResourceGroupId",
                type: {
                    name: "String",
                },
            }, useManagedDisks: {
                serializedName: "useManagedDisks",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetVmTags: {
                serializedName: "targetVmTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetManagedDiskTags: {
                serializedName: "targetManagedDiskTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, targetNicTags: {
                serializedName: "targetNicTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, sqlServerLicenseType: {
                serializedName: "sqlServerLicenseType",
                type: {
                    name: "String",
                },
            }, vmDisks: {
                serializedName: "vmDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UpdateDiskInput",
                        },
                    },
                },
            } }),
    },
};
const InMageRcmUpdateReplicationProtectedItemInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmUpdateReplicationProtectedItemInput",
        uberParent: "UpdateReplicationProtectedItemProviderInput",
        polymorphicDiscriminator: UpdateReplicationProtectedItemProviderInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UpdateReplicationProtectedItemProviderInput.type.modelProperties), { targetVmName: {
                serializedName: "targetVmName",
                type: {
                    name: "String",
                },
            }, targetVmSize: {
                serializedName: "targetVmSize",
                type: {
                    name: "String",
                },
            }, targetResourceGroupId: {
                serializedName: "targetResourceGroupId",
                type: {
                    name: "String",
                },
            }, targetAvailabilitySetId: {
                serializedName: "targetAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, targetAvailabilityZone: {
                serializedName: "targetAvailabilityZone",
                type: {
                    name: "String",
                },
            }, targetProximityPlacementGroupId: {
                serializedName: "targetProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, targetBootDiagnosticsStorageAccountId: {
                serializedName: "targetBootDiagnosticsStorageAccountId",
                type: {
                    name: "String",
                },
            }, targetNetworkId: {
                serializedName: "targetNetworkId",
                type: {
                    name: "String",
                },
            }, testNetworkId: {
                serializedName: "testNetworkId",
                type: {
                    name: "String",
                },
            }, vmNics: {
                serializedName: "vmNics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InMageRcmNicInput",
                        },
                    },
                },
            }, licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2AAddDisksInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AAddDisksInput",
        uberParent: "AddDisksProviderSpecificInput",
        polymorphicDiscriminator: AddDisksProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, AddDisksProviderSpecificInput.type.modelProperties), { vmDisks: {
                serializedName: "vmDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AVmDiskInputDetails",
                        },
                    },
                },
            }, vmManagedDisks: {
                serializedName: "vmManagedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AVmManagedDiskInputDetails",
                        },
                    },
                },
            } }),
    },
};
const A2AApplyRecoveryPointInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AApplyRecoveryPointInput",
        uberParent: "ApplyRecoveryPointProviderSpecificInput",
        polymorphicDiscriminator: ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ApplyRecoveryPointProviderSpecificInput.type.modelProperties),
    },
};
const A2ACrossClusterMigrationApplyRecoveryPointInput = {
    serializedName: "A2ACrossClusterMigration",
    type: {
        name: "Composite",
        className: "A2ACrossClusterMigrationApplyRecoveryPointInput",
        uberParent: "ApplyRecoveryPointProviderSpecificInput",
        polymorphicDiscriminator: ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ApplyRecoveryPointProviderSpecificInput.type.modelProperties),
    },
};
const HyperVReplicaAzureApplyRecoveryPointInput = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureApplyRecoveryPointInput",
        uberParent: "ApplyRecoveryPointProviderSpecificInput",
        polymorphicDiscriminator: ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ApplyRecoveryPointProviderSpecificInput.type.modelProperties), { primaryKekCertificatePfx: {
                serializedName: "primaryKekCertificatePfx",
                type: {
                    name: "String",
                },
            }, secondaryKekCertificatePfx: {
                serializedName: "secondaryKekCertificatePfx",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageAzureV2ApplyRecoveryPointInput = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2ApplyRecoveryPointInput",
        uberParent: "ApplyRecoveryPointProviderSpecificInput",
        polymorphicDiscriminator: ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, ApplyRecoveryPointProviderSpecificInput.type.modelProperties),
    },
};
const InMageRcmApplyRecoveryPointInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmApplyRecoveryPointInput",
        uberParent: "ApplyRecoveryPointProviderSpecificInput",
        polymorphicDiscriminator: ApplyRecoveryPointProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ApplyRecoveryPointProviderSpecificInput.type.modelProperties), { recoveryPointId: {
                serializedName: "recoveryPointId",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaAzureFailbackProviderInput = {
    serializedName: "HyperVReplicaAzureFailback",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureFailbackProviderInput",
        uberParent: "PlannedFailoverProviderSpecificFailoverInput",
        polymorphicDiscriminator: PlannedFailoverProviderSpecificFailoverInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PlannedFailoverProviderSpecificFailoverInput.type.modelProperties), { dataSyncOption: {
                serializedName: "dataSyncOption",
                type: {
                    name: "String",
                },
            }, recoveryVmCreationOption: {
                serializedName: "recoveryVmCreationOption",
                type: {
                    name: "String",
                },
            }, providerIdForAlternateRecovery: {
                serializedName: "providerIdForAlternateRecovery",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaAzurePlannedFailoverProviderInput = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzurePlannedFailoverProviderInput",
        uberParent: "PlannedFailoverProviderSpecificFailoverInput",
        polymorphicDiscriminator: PlannedFailoverProviderSpecificFailoverInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PlannedFailoverProviderSpecificFailoverInput.type.modelProperties), { primaryKekCertificatePfx: {
                serializedName: "primaryKekCertificatePfx",
                type: {
                    name: "String",
                },
            }, secondaryKekCertificatePfx: {
                serializedName: "secondaryKekCertificatePfx",
                type: {
                    name: "String",
                },
            }, recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            }, osUpgradeVersion: {
                serializedName: "osUpgradeVersion",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmFailbackPlannedFailoverProviderInput = {
    serializedName: "InMageRcmFailback",
    type: {
        name: "Composite",
        className: "InMageRcmFailbackPlannedFailoverProviderInput",
        uberParent: "PlannedFailoverProviderSpecificFailoverInput",
        polymorphicDiscriminator: PlannedFailoverProviderSpecificFailoverInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PlannedFailoverProviderSpecificFailoverInput.type.modelProperties), { recoveryPointType: {
                serializedName: "recoveryPointType",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2ARecoveryPointDetails = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2ARecoveryPointDetails",
        uberParent: "ProviderSpecificRecoveryPointDetails",
        polymorphicDiscriminator: ProviderSpecificRecoveryPointDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProviderSpecificRecoveryPointDetails.type.modelProperties), { recoveryPointSyncType: {
                serializedName: "recoveryPointSyncType",
                type: {
                    name: "String",
                },
            }, disks: {
                serializedName: "disks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            } }),
    },
};
const InMageAzureV2RecoveryPointDetails = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2RecoveryPointDetails",
        uberParent: "ProviderSpecificRecoveryPointDetails",
        polymorphicDiscriminator: ProviderSpecificRecoveryPointDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProviderSpecificRecoveryPointDetails.type.modelProperties), { isMultiVmSyncPoint: {
                serializedName: "isMultiVmSyncPoint",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmRecoveryPointDetails = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmRecoveryPointDetails",
        uberParent: "ProviderSpecificRecoveryPointDetails",
        polymorphicDiscriminator: ProviderSpecificRecoveryPointDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProviderSpecificRecoveryPointDetails.type.modelProperties), { isMultiVmSyncPoint: {
                serializedName: "isMultiVmSyncPoint",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageDisableProtectionProviderSpecificInput = {
    serializedName: "InMage",
    type: {
        name: "Composite",
        className: "InMageDisableProtectionProviderSpecificInput",
        uberParent: "DisableProtectionProviderSpecificInput",
        polymorphicDiscriminator: DisableProtectionProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DisableProtectionProviderSpecificInput.type.modelProperties), { replicaVmDeletionStatus: {
                serializedName: "replicaVmDeletionStatus",
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2ARemoveDisksInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2ARemoveDisksInput",
        uberParent: "RemoveDisksProviderSpecificInput",
        polymorphicDiscriminator: RemoveDisksProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RemoveDisksProviderSpecificInput.type.modelProperties), { vmDisksUris: {
                serializedName: "vmDisksUris",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            }, vmManagedDisksIds: {
                serializedName: "vmManagedDisksIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            } }),
    },
};
const A2AReprotectInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AReprotectInput",
        uberParent: "ReverseReplicationProviderSpecificInput",
        polymorphicDiscriminator: ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReverseReplicationProviderSpecificInput.type.modelProperties), { recoveryContainerId: {
                serializedName: "recoveryContainerId",
                type: {
                    name: "String",
                },
            }, vmDisks: {
                serializedName: "vmDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AVmDiskInputDetails",
                        },
                    },
                },
            }, recoveryResourceGroupId: {
                serializedName: "recoveryResourceGroupId",
                type: {
                    name: "String",
                },
            }, recoveryCloudServiceId: {
                serializedName: "recoveryCloudServiceId",
                type: {
                    name: "String",
                },
            }, recoveryAvailabilitySetId: {
                serializedName: "recoveryAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, policyId: {
                serializedName: "policyId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaAzureReprotectInput = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureReprotectInput",
        uberParent: "ReverseReplicationProviderSpecificInput",
        polymorphicDiscriminator: ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReverseReplicationProviderSpecificInput.type.modelProperties), { hvHostVmId: {
                serializedName: "hvHostVmId",
                type: {
                    name: "String",
                },
            }, vmName: {
                serializedName: "vmName",
                type: {
                    name: "String",
                },
            }, osType: {
                serializedName: "osType",
                type: {
                    name: "String",
                },
            }, vHDId: {
                serializedName: "vHDId",
                type: {
                    name: "String",
                },
            }, storageAccountId: {
                serializedName: "storageAccountId",
                type: {
                    name: "String",
                },
            }, logStorageAccountId: {
                serializedName: "logStorageAccountId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageAzureV2ReprotectInput = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2ReprotectInput",
        uberParent: "ReverseReplicationProviderSpecificInput",
        polymorphicDiscriminator: ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReverseReplicationProviderSpecificInput.type.modelProperties), { masterTargetId: {
                serializedName: "masterTargetId",
                type: {
                    name: "String",
                },
            }, processServerId: {
                serializedName: "processServerId",
                type: {
                    name: "String",
                },
            }, storageAccountId: {
                serializedName: "storageAccountId",
                type: {
                    name: "String",
                },
            }, runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            }, policyId: {
                serializedName: "policyId",
                type: {
                    name: "String",
                },
            }, logStorageAccountId: {
                serializedName: "logStorageAccountId",
                type: {
                    name: "String",
                },
            }, disksToInclude: {
                serializedName: "disksToInclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            } }),
    },
};
const InMageRcmFailbackReprotectInput = {
    serializedName: "InMageRcmFailback",
    type: {
        name: "Composite",
        className: "InMageRcmFailbackReprotectInput",
        uberParent: "ReverseReplicationProviderSpecificInput",
        polymorphicDiscriminator: ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReverseReplicationProviderSpecificInput.type.modelProperties), { processServerId: {
                serializedName: "processServerId",
                required: true,
                type: {
                    name: "String",
                },
            }, runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            }, policyId: {
                serializedName: "policyId",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmReprotectInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmReprotectInput",
        uberParent: "ReverseReplicationProviderSpecificInput",
        polymorphicDiscriminator: ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReverseReplicationProviderSpecificInput.type.modelProperties), { reprotectAgentId: {
                serializedName: "reprotectAgentId",
                required: true,
                type: {
                    name: "String",
                },
            }, datastoreName: {
                serializedName: "datastoreName",
                required: true,
                type: {
                    name: "String",
                },
            }, logStorageAccountId: {
                serializedName: "logStorageAccountId",
                required: true,
                type: {
                    name: "String",
                },
            }, policyId: {
                serializedName: "policyId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageReprotectInput = {
    serializedName: "InMage",
    type: {
        name: "Composite",
        className: "InMageReprotectInput",
        uberParent: "ReverseReplicationProviderSpecificInput",
        polymorphicDiscriminator: ReverseReplicationProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReverseReplicationProviderSpecificInput.type.modelProperties), { masterTargetId: {
                serializedName: "masterTargetId",
                required: true,
                type: {
                    name: "String",
                },
            }, processServerId: {
                serializedName: "processServerId",
                required: true,
                type: {
                    name: "String",
                },
            }, retentionDrive: {
                serializedName: "retentionDrive",
                required: true,
                type: {
                    name: "String",
                },
            }, runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            }, datastoreName: {
                serializedName: "datastoreName",
                type: {
                    name: "String",
                },
            }, diskExclusionInput: {
                serializedName: "diskExclusionInput",
                type: {
                    name: "Composite",
                    className: "InMageDiskExclusionInput",
                },
            }, profileId: {
                serializedName: "profileId",
                required: true,
                type: {
                    name: "String",
                },
            }, disksToInclude: {
                serializedName: "disksToInclude",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            } }),
    },
};
const InMageAzureV2SwitchProviderInput = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2SwitchProviderInput",
        uberParent: "SwitchProviderSpecificInput",
        polymorphicDiscriminator: SwitchProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SwitchProviderSpecificInput.type.modelProperties), { targetVaultID: {
                serializedName: "targetVaultID",
                required: true,
                type: {
                    name: "String",
                },
            }, targetFabricID: {
                serializedName: "targetFabricID",
                required: true,
                type: {
                    name: "String",
                },
            }, targetApplianceID: {
                serializedName: "targetApplianceID",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2ATestFailoverInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2ATestFailoverInput",
        uberParent: "TestFailoverProviderSpecificInput",
        polymorphicDiscriminator: TestFailoverProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TestFailoverProviderSpecificInput.type.modelProperties), { recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            }, cloudServiceCreationOption: {
                serializedName: "cloudServiceCreationOption",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaAzureTestFailoverInput = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureTestFailoverInput",
        uberParent: "TestFailoverProviderSpecificInput",
        polymorphicDiscriminator: TestFailoverProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TestFailoverProviderSpecificInput.type.modelProperties), { primaryKekCertificatePfx: {
                serializedName: "primaryKekCertificatePfx",
                type: {
                    name: "String",
                },
            }, secondaryKekCertificatePfx: {
                serializedName: "secondaryKekCertificatePfx",
                type: {
                    name: "String",
                },
            }, recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            }, osUpgradeVersion: {
                serializedName: "osUpgradeVersion",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageAzureV2TestFailoverInput = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2TestFailoverInput",
        uberParent: "TestFailoverProviderSpecificInput",
        polymorphicDiscriminator: TestFailoverProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TestFailoverProviderSpecificInput.type.modelProperties), { recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            }, osUpgradeVersion: {
                serializedName: "osUpgradeVersion",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmTestFailoverInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmTestFailoverInput",
        uberParent: "TestFailoverProviderSpecificInput",
        polymorphicDiscriminator: TestFailoverProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TestFailoverProviderSpecificInput.type.modelProperties), { networkId: {
                serializedName: "networkId",
                type: {
                    name: "String",
                },
            }, recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageTestFailoverInput = {
    serializedName: "InMage",
    type: {
        name: "Composite",
        className: "InMageTestFailoverInput",
        uberParent: "TestFailoverProviderSpecificInput",
        polymorphicDiscriminator: TestFailoverProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TestFailoverProviderSpecificInput.type.modelProperties), { recoveryPointType: {
                serializedName: "recoveryPointType",
                type: {
                    name: "String",
                },
            }, recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2AUnplannedFailoverInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AUnplannedFailoverInput",
        uberParent: "UnplannedFailoverProviderSpecificInput",
        polymorphicDiscriminator: UnplannedFailoverProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UnplannedFailoverProviderSpecificInput.type.modelProperties), { recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            }, cloudServiceCreationOption: {
                serializedName: "cloudServiceCreationOption",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaAzureUnplannedFailoverInput = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzureUnplannedFailoverInput",
        uberParent: "UnplannedFailoverProviderSpecificInput",
        polymorphicDiscriminator: UnplannedFailoverProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UnplannedFailoverProviderSpecificInput.type.modelProperties), { primaryKekCertificatePfx: {
                serializedName: "primaryKekCertificatePfx",
                type: {
                    name: "String",
                },
            }, secondaryKekCertificatePfx: {
                serializedName: "secondaryKekCertificatePfx",
                type: {
                    name: "String",
                },
            }, recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageAzureV2UnplannedFailoverInput = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2UnplannedFailoverInput",
        uberParent: "UnplannedFailoverProviderSpecificInput",
        polymorphicDiscriminator: UnplannedFailoverProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UnplannedFailoverProviderSpecificInput.type.modelProperties), { recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            }, osUpgradeVersion: {
                serializedName: "osUpgradeVersion",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmUnplannedFailoverInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmUnplannedFailoverInput",
        uberParent: "UnplannedFailoverProviderSpecificInput",
        polymorphicDiscriminator: UnplannedFailoverProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UnplannedFailoverProviderSpecificInput.type.modelProperties), { performShutdown: {
                serializedName: "performShutdown",
                required: true,
                type: {
                    name: "String",
                },
            }, recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageUnplannedFailoverInput = {
    serializedName: "InMage",
    type: {
        name: "Composite",
        className: "InMageUnplannedFailoverInput",
        uberParent: "UnplannedFailoverProviderSpecificInput",
        polymorphicDiscriminator: UnplannedFailoverProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UnplannedFailoverProviderSpecificInput.type.modelProperties), { recoveryPointType: {
                serializedName: "recoveryPointType",
                type: {
                    name: "String",
                },
            }, recoveryPointId: {
                serializedName: "recoveryPointId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmUpdateApplianceForReplicationProtectedItemInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmUpdateApplianceForReplicationProtectedItemInput",
        uberParent: "UpdateApplianceForReplicationProtectedItemProviderSpecificInput",
        polymorphicDiscriminator: UpdateApplianceForReplicationProtectedItemProviderSpecificInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, UpdateApplianceForReplicationProtectedItemProviderSpecificInput.type
            .modelProperties), { runAsAccountId: {
                serializedName: "runAsAccountId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2AProtectionContainerMappingDetails = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AProtectionContainerMappingDetails",
        uberParent: "ProtectionContainerMappingProviderSpecificDetails",
        polymorphicDiscriminator: ProtectionContainerMappingProviderSpecificDetails.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionContainerMappingProviderSpecificDetails.type
            .modelProperties), { agentAutoUpdateStatus: {
                serializedName: "agentAutoUpdateStatus",
                type: {
                    name: "String",
                },
            }, automationAccountArmId: {
                serializedName: "automationAccountArmId",
                type: {
                    name: "String",
                },
            }, automationAccountAuthenticationType: {
                serializedName: "automationAccountAuthenticationType",
                type: {
                    name: "String",
                },
            }, scheduleName: {
                serializedName: "scheduleName",
                type: {
                    name: "String",
                },
            }, jobScheduleName: {
                serializedName: "jobScheduleName",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmProtectionContainerMappingDetails = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmProtectionContainerMappingDetails",
        uberParent: "ProtectionContainerMappingProviderSpecificDetails",
        polymorphicDiscriminator: ProtectionContainerMappingProviderSpecificDetails.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionContainerMappingProviderSpecificDetails.type
            .modelProperties), { enableAgentAutoUpgrade: {
                serializedName: "enableAgentAutoUpgrade",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const VMwareCbtProtectionContainerMappingDetails = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtProtectionContainerMappingDetails",
        uberParent: "ProtectionContainerMappingProviderSpecificDetails",
        polymorphicDiscriminator: ProtectionContainerMappingProviderSpecificDetails.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionContainerMappingProviderSpecificDetails.type
            .modelProperties), { keyVaultId: {
                serializedName: "keyVaultId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, keyVaultUri: {
                serializedName: "keyVaultUri",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, storageAccountId: {
                serializedName: "storageAccountId",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, storageAccountSasSecretName: {
                serializedName: "storageAccountSasSecretName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, serviceBusConnectionStringSecretName: {
                serializedName: "serviceBusConnectionStringSecretName",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, targetLocation: {
                serializedName: "targetLocation",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, roleSizeToNicCountMap: {
                serializedName: "roleSizeToNicCountMap",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "Number" } },
                },
            }, excludedSkus: {
                serializedName: "excludedSkus",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            } }),
    },
};
const A2AContainerMappingInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AContainerMappingInput",
        uberParent: "ReplicationProviderSpecificContainerMappingInput",
        polymorphicDiscriminator: ReplicationProviderSpecificContainerMappingInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificContainerMappingInput.type.modelProperties), { agentAutoUpdateStatus: {
                serializedName: "agentAutoUpdateStatus",
                type: {
                    name: "String",
                },
            }, automationAccountArmId: {
                serializedName: "automationAccountArmId",
                type: {
                    name: "String",
                },
            }, automationAccountAuthenticationType: {
                serializedName: "automationAccountAuthenticationType",
                type: {
                    name: "String",
                },
            } }),
    },
};
const VMwareCbtContainerMappingInput = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtContainerMappingInput",
        uberParent: "ReplicationProviderSpecificContainerMappingInput",
        polymorphicDiscriminator: ReplicationProviderSpecificContainerMappingInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificContainerMappingInput.type.modelProperties), { keyVaultId: {
                serializedName: "keyVaultId",
                type: {
                    name: "String",
                },
            }, keyVaultUri: {
                serializedName: "keyVaultUri",
                type: {
                    name: "String",
                },
            }, storageAccountId: {
                serializedName: "storageAccountId",
                required: true,
                type: {
                    name: "String",
                },
            }, storageAccountSasSecretName: {
                serializedName: "storageAccountSasSecretName",
                type: {
                    name: "String",
                },
            }, serviceBusConnectionStringSecretName: {
                serializedName: "serviceBusConnectionStringSecretName",
                type: {
                    name: "String",
                },
            }, targetLocation: {
                serializedName: "targetLocation",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2AUpdateContainerMappingInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AUpdateContainerMappingInput",
        uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
        polymorphicDiscriminator: ReplicationProviderSpecificUpdateContainerMappingInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificUpdateContainerMappingInput.type
            .modelProperties), { agentAutoUpdateStatus: {
                serializedName: "agentAutoUpdateStatus",
                type: {
                    name: "String",
                },
            }, automationAccountArmId: {
                serializedName: "automationAccountArmId",
                type: {
                    name: "String",
                },
            }, automationAccountAuthenticationType: {
                serializedName: "automationAccountAuthenticationType",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmUpdateContainerMappingInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmUpdateContainerMappingInput",
        uberParent: "ReplicationProviderSpecificUpdateContainerMappingInput",
        polymorphicDiscriminator: ReplicationProviderSpecificUpdateContainerMappingInput.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProviderSpecificUpdateContainerMappingInput.type
            .modelProperties), { enableAgentAutoUpgrade: {
                serializedName: "enableAgentAutoUpgrade",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2ASwitchProtectionInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2ASwitchProtectionInput",
        uberParent: "SwitchProtectionProviderSpecificInput",
        polymorphicDiscriminator: SwitchProtectionProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SwitchProtectionProviderSpecificInput.type.modelProperties), { recoveryContainerId: {
                serializedName: "recoveryContainerId",
                type: {
                    name: "String",
                },
            }, vmDisks: {
                serializedName: "vmDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AVmDiskInputDetails",
                        },
                    },
                },
            }, vmManagedDisks: {
                serializedName: "vmManagedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AVmManagedDiskInputDetails",
                        },
                    },
                },
            }, recoveryResourceGroupId: {
                serializedName: "recoveryResourceGroupId",
                type: {
                    name: "String",
                },
            }, recoveryCloudServiceId: {
                serializedName: "recoveryCloudServiceId",
                type: {
                    name: "String",
                },
            }, recoveryAvailabilitySetId: {
                serializedName: "recoveryAvailabilitySetId",
                type: {
                    name: "String",
                },
            }, policyId: {
                serializedName: "policyId",
                type: {
                    name: "String",
                },
            }, recoveryBootDiagStorageAccountId: {
                serializedName: "recoveryBootDiagStorageAccountId",
                type: {
                    name: "String",
                },
            }, recoveryAvailabilityZone: {
                serializedName: "recoveryAvailabilityZone",
                type: {
                    name: "String",
                },
            }, recoveryProximityPlacementGroupId: {
                serializedName: "recoveryProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            }, recoveryVirtualMachineScaleSetId: {
                serializedName: "recoveryVirtualMachineScaleSetId",
                type: {
                    name: "String",
                },
            }, recoveryCapacityReservationGroupId: {
                serializedName: "recoveryCapacityReservationGroupId",
                type: {
                    name: "String",
                },
            }, diskEncryptionInfo: {
                serializedName: "diskEncryptionInfo",
                type: {
                    name: "Composite",
                    className: "DiskEncryptionInfo",
                },
            } }),
    },
};
const AutomationRunbookTaskDetails = {
    serializedName: "AutomationRunbookTaskDetails",
    type: {
        name: "Composite",
        className: "AutomationRunbookTaskDetails",
        uberParent: "TaskTypeDetails",
        polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskTypeDetails.type.modelProperties), { name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            }, cloudServiceName: {
                serializedName: "cloudServiceName",
                type: {
                    name: "String",
                },
            }, subscriptionId: {
                serializedName: "subscriptionId",
                type: {
                    name: "String",
                },
            }, accountName: {
                serializedName: "accountName",
                type: {
                    name: "String",
                },
            }, runbookId: {
                serializedName: "runbookId",
                type: {
                    name: "String",
                },
            }, runbookName: {
                serializedName: "runbookName",
                type: {
                    name: "String",
                },
            }, jobId: {
                serializedName: "jobId",
                type: {
                    name: "String",
                },
            }, jobOutput: {
                serializedName: "jobOutput",
                type: {
                    name: "String",
                },
            }, isPrimarySideScript: {
                serializedName: "isPrimarySideScript",
                type: {
                    name: "Boolean",
                },
            } }),
    },
};
const ConsistencyCheckTaskDetails = {
    serializedName: "ConsistencyCheckTaskDetails",
    type: {
        name: "Composite",
        className: "ConsistencyCheckTaskDetails",
        uberParent: "TaskTypeDetails",
        polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskTypeDetails.type.modelProperties), { vmDetails: {
                serializedName: "vmDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InconsistentVmDetails",
                        },
                    },
                },
            } }),
    },
};
const JobTaskDetails = {
    serializedName: "JobTaskDetails",
    type: {
        name: "Composite",
        className: "JobTaskDetails",
        uberParent: "TaskTypeDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: Object.assign(Object.assign({}, TaskTypeDetails.type.modelProperties), { jobTask: {
                serializedName: "jobTask",
                type: {
                    name: "Composite",
                    className: "JobEntity",
                },
            } }),
    },
};
const ManualActionTaskDetails = {
    serializedName: "ManualActionTaskDetails",
    type: {
        name: "Composite",
        className: "ManualActionTaskDetails",
        uberParent: "TaskTypeDetails",
        polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskTypeDetails.type.modelProperties), { name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            }, instructions: {
                serializedName: "instructions",
                type: {
                    name: "String",
                },
            }, observation: {
                serializedName: "observation",
                type: {
                    name: "String",
                },
            } }),
    },
};
const ScriptActionTaskDetails = {
    serializedName: "ScriptActionTaskDetails",
    type: {
        name: "Composite",
        className: "ScriptActionTaskDetails",
        uberParent: "TaskTypeDetails",
        polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskTypeDetails.type.modelProperties), { name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            }, path: {
                serializedName: "path",
                type: {
                    name: "String",
                },
            }, output: {
                serializedName: "output",
                type: {
                    name: "String",
                },
            }, isPrimarySideScript: {
                serializedName: "isPrimarySideScript",
                type: {
                    name: "Boolean",
                },
            } }),
    },
};
const VmNicUpdatesTaskDetails = {
    serializedName: "VmNicUpdatesTaskDetails",
    type: {
        name: "Composite",
        className: "VmNicUpdatesTaskDetails",
        uberParent: "TaskTypeDetails",
        polymorphicDiscriminator: TaskTypeDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskTypeDetails.type.modelProperties), { vmId: {
                serializedName: "vmId",
                type: {
                    name: "String",
                },
            }, nicId: {
                serializedName: "nicId",
                type: {
                    name: "String",
                },
            }, name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InlineWorkflowTaskDetails = {
    serializedName: "InlineWorkflowTaskDetails",
    type: {
        name: "Composite",
        className: "InlineWorkflowTaskDetails",
        uberParent: "GroupTaskDetails",
        polymorphicDiscriminator: GroupTaskDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, GroupTaskDetails.type.modelProperties), { workflowIds: {
                serializedName: "workflowIds",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            } }),
    },
};
const RecoveryPlanGroupTaskDetails = {
    serializedName: "RecoveryPlanGroupTaskDetails",
    type: {
        name: "Composite",
        className: "RecoveryPlanGroupTaskDetails",
        uberParent: "GroupTaskDetails",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: Object.assign(Object.assign({}, GroupTaskDetails.type.modelProperties), { name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            }, groupId: {
                serializedName: "groupId",
                type: {
                    name: "String",
                },
            }, rpGroupType: {
                serializedName: "rpGroupType",
                type: {
                    name: "String",
                },
            } }),
    },
};
const AsrJobDetails = {
    serializedName: "AsrJobDetails",
    type: {
        name: "Composite",
        className: "AsrJobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, JobDetails.type.modelProperties),
    },
};
const ExportJobDetails = {
    serializedName: "ExportJobDetails",
    type: {
        name: "Composite",
        className: "ExportJobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobDetails.type.modelProperties), { blobUri: {
                serializedName: "blobUri",
                type: {
                    name: "String",
                },
            }, sasToken: {
                serializedName: "sasToken",
                type: {
                    name: "String",
                },
            } }),
    },
};
const FailoverJobDetails = {
    serializedName: "FailoverJobDetails",
    type: {
        name: "Composite",
        className: "FailoverJobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobDetails.type.modelProperties), { protectedItemDetails: {
                serializedName: "protectedItemDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FailoverReplicationProtectedItemDetails",
                        },
                    },
                },
            } }),
    },
};
const SwitchProtectionJobDetails = {
    serializedName: "SwitchProtectionJobDetails",
    type: {
        name: "Composite",
        className: "SwitchProtectionJobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobDetails.type.modelProperties), { newReplicationProtectedItemId: {
                serializedName: "newReplicationProtectedItemId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const TestFailoverJobDetails = {
    serializedName: "TestFailoverJobDetails",
    type: {
        name: "Composite",
        className: "TestFailoverJobDetails",
        uberParent: "JobDetails",
        polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobDetails.type.modelProperties), { testFailoverStatus: {
                serializedName: "testFailoverStatus",
                type: {
                    name: "String",
                },
            }, comments: {
                serializedName: "comments",
                type: {
                    name: "String",
                },
            }, networkName: {
                serializedName: "networkName",
                type: {
                    name: "String",
                },
            }, networkFriendlyName: {
                serializedName: "networkFriendlyName",
                type: {
                    name: "String",
                },
            }, networkType: {
                serializedName: "networkType",
                type: {
                    name: "String",
                },
            }, protectedItemDetails: {
                serializedName: "protectedItemDetails",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FailoverReplicationProtectedItemDetails",
                        },
                    },
                },
            } }),
    },
};
const A2APolicyDetails = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2APolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { recoveryPointThresholdInMinutes: {
                serializedName: "recoveryPointThresholdInMinutes",
                type: {
                    name: "Number",
                },
            }, recoveryPointHistory: {
                serializedName: "recoveryPointHistory",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, multiVmSyncStatus: {
                serializedName: "multiVmSyncStatus",
                type: {
                    name: "String",
                },
            }, crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            } }),
    },
};
const HyperVReplicaAzurePolicyDetails = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzurePolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { recoveryPointHistoryDurationInHours: {
                serializedName: "recoveryPointHistoryDurationInHours",
                type: {
                    name: "Number",
                },
            }, applicationConsistentSnapshotFrequencyInHours: {
                serializedName: "applicationConsistentSnapshotFrequencyInHours",
                type: {
                    name: "Number",
                },
            }, replicationInterval: {
                serializedName: "replicationInterval",
                type: {
                    name: "Number",
                },
            }, onlineReplicationStartTime: {
                serializedName: "onlineReplicationStartTime",
                type: {
                    name: "String",
                },
            }, encryption: {
                serializedName: "encryption",
                type: {
                    name: "String",
                },
            }, activeStorageAccountId: {
                serializedName: "activeStorageAccountId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaBasePolicyDetails = {
    serializedName: "HyperVReplicaBasePolicyDetails",
    type: {
        name: "Composite",
        className: "HyperVReplicaBasePolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { recoveryPoints: {
                serializedName: "recoveryPoints",
                type: {
                    name: "Number",
                },
            }, applicationConsistentSnapshotFrequencyInHours: {
                serializedName: "applicationConsistentSnapshotFrequencyInHours",
                type: {
                    name: "Number",
                },
            }, compression: {
                serializedName: "compression",
                type: {
                    name: "String",
                },
            }, initialReplicationMethod: {
                serializedName: "initialReplicationMethod",
                type: {
                    name: "String",
                },
            }, onlineReplicationStartTime: {
                serializedName: "onlineReplicationStartTime",
                type: {
                    name: "String",
                },
            }, offlineReplicationImportPath: {
                serializedName: "offlineReplicationImportPath",
                type: {
                    name: "String",
                },
            }, offlineReplicationExportPath: {
                serializedName: "offlineReplicationExportPath",
                type: {
                    name: "String",
                },
            }, replicationPort: {
                serializedName: "replicationPort",
                type: {
                    name: "Number",
                },
            }, allowedAuthenticationType: {
                serializedName: "allowedAuthenticationType",
                type: {
                    name: "Number",
                },
            }, replicaDeletionOption: {
                serializedName: "replicaDeletionOption",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaBluePolicyDetails = {
    serializedName: "HyperVReplica2012R2",
    type: {
        name: "Composite",
        className: "HyperVReplicaBluePolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { replicationFrequencyInSeconds: {
                serializedName: "replicationFrequencyInSeconds",
                type: {
                    name: "Number",
                },
            }, recoveryPoints: {
                serializedName: "recoveryPoints",
                type: {
                    name: "Number",
                },
            }, applicationConsistentSnapshotFrequencyInHours: {
                serializedName: "applicationConsistentSnapshotFrequencyInHours",
                type: {
                    name: "Number",
                },
            }, compression: {
                serializedName: "compression",
                type: {
                    name: "String",
                },
            }, initialReplicationMethod: {
                serializedName: "initialReplicationMethod",
                type: {
                    name: "String",
                },
            }, onlineReplicationStartTime: {
                serializedName: "onlineReplicationStartTime",
                type: {
                    name: "String",
                },
            }, offlineReplicationImportPath: {
                serializedName: "offlineReplicationImportPath",
                type: {
                    name: "String",
                },
            }, offlineReplicationExportPath: {
                serializedName: "offlineReplicationExportPath",
                type: {
                    name: "String",
                },
            }, replicationPort: {
                serializedName: "replicationPort",
                type: {
                    name: "Number",
                },
            }, allowedAuthenticationType: {
                serializedName: "allowedAuthenticationType",
                type: {
                    name: "Number",
                },
            }, replicaDeletionOption: {
                serializedName: "replicaDeletionOption",
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaPolicyDetails = {
    serializedName: "HyperVReplica2012",
    type: {
        name: "Composite",
        className: "HyperVReplicaPolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { recoveryPoints: {
                serializedName: "recoveryPoints",
                type: {
                    name: "Number",
                },
            }, applicationConsistentSnapshotFrequencyInHours: {
                serializedName: "applicationConsistentSnapshotFrequencyInHours",
                type: {
                    name: "Number",
                },
            }, compression: {
                serializedName: "compression",
                type: {
                    name: "String",
                },
            }, initialReplicationMethod: {
                serializedName: "initialReplicationMethod",
                type: {
                    name: "String",
                },
            }, onlineReplicationStartTime: {
                serializedName: "onlineReplicationStartTime",
                type: {
                    name: "String",
                },
            }, offlineReplicationImportPath: {
                serializedName: "offlineReplicationImportPath",
                type: {
                    name: "String",
                },
            }, offlineReplicationExportPath: {
                serializedName: "offlineReplicationExportPath",
                type: {
                    name: "String",
                },
            }, replicationPort: {
                serializedName: "replicationPort",
                type: {
                    name: "Number",
                },
            }, allowedAuthenticationType: {
                serializedName: "allowedAuthenticationType",
                type: {
                    name: "Number",
                },
            }, replicaDeletionOption: {
                serializedName: "replicaDeletionOption",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageAzureV2PolicyDetails = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2PolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, recoveryPointThresholdInMinutes: {
                serializedName: "recoveryPointThresholdInMinutes",
                type: {
                    name: "Number",
                },
            }, recoveryPointHistory: {
                serializedName: "recoveryPointHistory",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, multiVmSyncStatus: {
                serializedName: "multiVmSyncStatus",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageBasePolicyDetails = {
    serializedName: "InMageBasePolicyDetails",
    type: {
        name: "Composite",
        className: "InMageBasePolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { recoveryPointThresholdInMinutes: {
                serializedName: "recoveryPointThresholdInMinutes",
                type: {
                    name: "Number",
                },
            }, recoveryPointHistory: {
                serializedName: "recoveryPointHistory",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, multiVmSyncStatus: {
                serializedName: "multiVmSyncStatus",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMagePolicyDetails = {
    serializedName: "InMage",
    type: {
        name: "Composite",
        className: "InMagePolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { recoveryPointThresholdInMinutes: {
                serializedName: "recoveryPointThresholdInMinutes",
                type: {
                    name: "Number",
                },
            }, recoveryPointHistory: {
                serializedName: "recoveryPointHistory",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, multiVmSyncStatus: {
                serializedName: "multiVmSyncStatus",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmFailbackPolicyDetails = {
    serializedName: "InMageRcmFailback",
    type: {
        name: "Composite",
        className: "InMageRcmFailbackPolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            } }),
    },
};
const InMageRcmPolicyDetails = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmPolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { recoveryPointHistoryInMinutes: {
                serializedName: "recoveryPointHistoryInMinutes",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, enableMultiVmSync: {
                serializedName: "enableMultiVmSync",
                type: {
                    name: "String",
                },
            } }),
    },
};
const VmwareCbtPolicyDetails = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VmwareCbtPolicyDetails",
        uberParent: "PolicyProviderSpecificDetails",
        polymorphicDiscriminator: PolicyProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificDetails.type.modelProperties), { recoveryPointHistoryInMinutes: {
                serializedName: "recoveryPointHistoryInMinutes",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            } }),
    },
};
const A2ACrossClusterMigrationPolicyCreationInput = {
    serializedName: "A2ACrossClusterMigration",
    type: {
        name: "Composite",
        className: "A2ACrossClusterMigrationPolicyCreationInput",
        uberParent: "PolicyProviderSpecificInput",
        polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, PolicyProviderSpecificInput.type.modelProperties),
    },
};
const A2APolicyCreationInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2APolicyCreationInput",
        uberParent: "PolicyProviderSpecificInput",
        polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificInput.type.modelProperties), { recoveryPointHistory: {
                serializedName: "recoveryPointHistory",
                type: {
                    name: "Number",
                },
            }, crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, multiVmSyncStatus: {
                serializedName: "multiVmSyncStatus",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const HyperVReplicaAzurePolicyInput = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "HyperVReplicaAzurePolicyInput",
        uberParent: "PolicyProviderSpecificInput",
        polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificInput.type.modelProperties), { recoveryPointHistoryDuration: {
                serializedName: "recoveryPointHistoryDuration",
                type: {
                    name: "Number",
                },
            }, applicationConsistentSnapshotFrequencyInHours: {
                serializedName: "applicationConsistentSnapshotFrequencyInHours",
                type: {
                    name: "Number",
                },
            }, replicationInterval: {
                serializedName: "replicationInterval",
                type: {
                    name: "Number",
                },
            }, onlineReplicationStartTime: {
                serializedName: "onlineReplicationStartTime",
                type: {
                    name: "String",
                },
            }, storageAccounts: {
                serializedName: "storageAccounts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            } }),
    },
};
const HyperVReplicaPolicyInput = {
    serializedName: "HyperVReplica2012",
    type: {
        name: "Composite",
        className: "HyperVReplicaPolicyInput",
        uberParent: "PolicyProviderSpecificInput",
        polymorphicDiscriminator: {
            serializedName: "instanceType",
            clientName: "instanceType",
        },
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificInput.type.modelProperties), { recoveryPoints: {
                serializedName: "recoveryPoints",
                type: {
                    name: "Number",
                },
            }, applicationConsistentSnapshotFrequencyInHours: {
                serializedName: "applicationConsistentSnapshotFrequencyInHours",
                type: {
                    name: "Number",
                },
            }, compression: {
                serializedName: "compression",
                type: {
                    name: "String",
                },
            }, initialReplicationMethod: {
                serializedName: "initialReplicationMethod",
                type: {
                    name: "String",
                },
            }, onlineReplicationStartTime: {
                serializedName: "onlineReplicationStartTime",
                type: {
                    name: "String",
                },
            }, offlineReplicationImportPath: {
                serializedName: "offlineReplicationImportPath",
                type: {
                    name: "String",
                },
            }, offlineReplicationExportPath: {
                serializedName: "offlineReplicationExportPath",
                type: {
                    name: "String",
                },
            }, replicationPort: {
                serializedName: "replicationPort",
                type: {
                    name: "Number",
                },
            }, allowedAuthenticationType: {
                serializedName: "allowedAuthenticationType",
                type: {
                    name: "Number",
                },
            }, replicaDeletion: {
                serializedName: "replicaDeletion",
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageAzureV2PolicyInput = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "InMageAzureV2PolicyInput",
        uberParent: "PolicyProviderSpecificInput",
        polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificInput.type.modelProperties), { recoveryPointThresholdInMinutes: {
                serializedName: "recoveryPointThresholdInMinutes",
                type: {
                    name: "Number",
                },
            }, recoveryPointHistory: {
                serializedName: "recoveryPointHistory",
                type: {
                    name: "Number",
                },
            }, crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, multiVmSyncStatus: {
                serializedName: "multiVmSyncStatus",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMagePolicyInput = {
    serializedName: "InMage",
    type: {
        name: "Composite",
        className: "InMagePolicyInput",
        uberParent: "PolicyProviderSpecificInput",
        polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificInput.type.modelProperties), { recoveryPointThresholdInMinutes: {
                serializedName: "recoveryPointThresholdInMinutes",
                type: {
                    name: "Number",
                },
            }, recoveryPointHistory: {
                serializedName: "recoveryPointHistory",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, multiVmSyncStatus: {
                serializedName: "multiVmSyncStatus",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const InMageRcmFailbackPolicyCreationInput = {
    serializedName: "InMageRcmFailback",
    type: {
        name: "Composite",
        className: "InMageRcmFailbackPolicyCreationInput",
        uberParent: "PolicyProviderSpecificInput",
        polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificInput.type.modelProperties), { crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            } }),
    },
};
const InMageRcmPolicyCreationInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "InMageRcmPolicyCreationInput",
        uberParent: "PolicyProviderSpecificInput",
        polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificInput.type.modelProperties), { recoveryPointHistoryInMinutes: {
                serializedName: "recoveryPointHistoryInMinutes",
                type: {
                    name: "Number",
                },
            }, crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, enableMultiVmSync: {
                serializedName: "enableMultiVmSync",
                type: {
                    name: "String",
                },
            } }),
    },
};
const VMwareCbtPolicyCreationInput = {
    serializedName: "VMwareCbt",
    type: {
        name: "Composite",
        className: "VMwareCbtPolicyCreationInput",
        uberParent: "PolicyProviderSpecificInput",
        polymorphicDiscriminator: PolicyProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, PolicyProviderSpecificInput.type.modelProperties), { recoveryPointHistoryInMinutes: {
                serializedName: "recoveryPointHistoryInMinutes",
                type: {
                    name: "Number",
                },
            }, crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            } }),
    },
};
const A2AReplicationIntentDetails = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2AReplicationIntentDetails",
        uberParent: "ReplicationProtectionIntentProviderSpecificSettings",
        polymorphicDiscriminator: ReplicationProtectionIntentProviderSpecificSettings.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ReplicationProtectionIntentProviderSpecificSettings.type
            .modelProperties), { fabricObjectId: {
                serializedName: "fabricObjectId",
                type: {
                    name: "String",
                },
            }, primaryLocation: {
                serializedName: "primaryLocation",
                type: {
                    name: "String",
                },
            }, recoveryLocation: {
                serializedName: "recoveryLocation",
                type: {
                    name: "String",
                },
            }, recoverySubscriptionId: {
                serializedName: "recoverySubscriptionId",
                type: {
                    name: "String",
                },
            }, vmDisks: {
                serializedName: "vmDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AProtectionIntentDiskInputDetails",
                        },
                    },
                },
            }, vmManagedDisks: {
                serializedName: "vmManagedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AProtectionIntentManagedDiskInputDetails",
                        },
                    },
                },
            }, recoveryResourceGroupId: {
                serializedName: "recoveryResourceGroupId",
                type: {
                    name: "String",
                },
            }, protectionProfile: {
                serializedName: "protectionProfile",
                type: {
                    name: "Composite",
                    className: "ProtectionProfileCustomDetails",
                },
            }, primaryStagingStorageAccount: {
                serializedName: "primaryStagingStorageAccount",
                type: {
                    name: "Composite",
                    className: "StorageAccountCustomDetails",
                },
            }, recoveryAvailabilitySet: {
                serializedName: "recoveryAvailabilitySet",
                type: {
                    name: "Composite",
                    className: "RecoveryAvailabilitySetCustomDetails",
                },
            }, recoveryVirtualNetwork: {
                serializedName: "recoveryVirtualNetwork",
                type: {
                    name: "Composite",
                    className: "RecoveryVirtualNetworkCustomDetails",
                },
            }, recoveryProximityPlacementGroup: {
                serializedName: "recoveryProximityPlacementGroup",
                type: {
                    name: "Composite",
                    className: "RecoveryProximityPlacementGroupCustomDetails",
                },
            }, autoProtectionOfDataDisk: {
                serializedName: "autoProtectionOfDataDisk",
                type: {
                    name: "String",
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                type: {
                    name: "String",
                },
            }, multiVmGroupId: {
                serializedName: "multiVmGroupId",
                type: {
                    name: "String",
                },
            }, recoveryBootDiagStorageAccount: {
                serializedName: "recoveryBootDiagStorageAccount",
                type: {
                    name: "Composite",
                    className: "StorageAccountCustomDetails",
                },
            }, diskEncryptionInfo: {
                serializedName: "diskEncryptionInfo",
                type: {
                    name: "Composite",
                    className: "DiskEncryptionInfo",
                },
            }, recoveryAvailabilityZone: {
                serializedName: "recoveryAvailabilityZone",
                type: {
                    name: "String",
                },
            }, recoveryAvailabilityType: {
                serializedName: "recoveryAvailabilityType",
                required: true,
                type: {
                    name: "String",
                },
            }, agentAutoUpdateStatus: {
                serializedName: "agentAutoUpdateStatus",
                type: {
                    name: "String",
                },
            }, automationAccountArmId: {
                serializedName: "automationAccountArmId",
                type: {
                    name: "String",
                },
            }, automationAccountAuthenticationType: {
                serializedName: "automationAccountAuthenticationType",
                type: {
                    name: "String",
                },
            } }),
    },
};
const A2ACreateProtectionIntentInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "A2ACreateProtectionIntentInput",
        uberParent: "CreateProtectionIntentProviderSpecificDetails",
        polymorphicDiscriminator: CreateProtectionIntentProviderSpecificDetails.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CreateProtectionIntentProviderSpecificDetails.type.modelProperties), { fabricObjectId: {
                serializedName: "fabricObjectId",
                required: true,
                type: {
                    name: "String",
                },
            }, primaryLocation: {
                serializedName: "primaryLocation",
                required: true,
                type: {
                    name: "String",
                },
            }, recoveryLocation: {
                serializedName: "recoveryLocation",
                required: true,
                type: {
                    name: "String",
                },
            }, recoverySubscriptionId: {
                serializedName: "recoverySubscriptionId",
                required: true,
                type: {
                    name: "String",
                },
            }, recoveryAvailabilityType: {
                serializedName: "recoveryAvailabilityType",
                required: true,
                type: {
                    name: "String",
                },
            }, protectionProfileCustomInput: {
                serializedName: "protectionProfileCustomInput",
                type: {
                    name: "Composite",
                    className: "ProtectionProfileCustomDetails",
                },
            }, recoveryResourceGroupId: {
                serializedName: "recoveryResourceGroupId",
                required: true,
                type: {
                    name: "String",
                },
            }, primaryStagingStorageAccountCustomInput: {
                serializedName: "primaryStagingStorageAccountCustomInput",
                type: {
                    name: "Composite",
                    className: "StorageAccountCustomDetails",
                },
            }, recoveryAvailabilitySetCustomInput: {
                serializedName: "recoveryAvailabilitySetCustomInput",
                type: {
                    name: "Composite",
                    className: "RecoveryAvailabilitySetCustomDetails",
                },
            }, recoveryVirtualNetworkCustomInput: {
                serializedName: "recoveryVirtualNetworkCustomInput",
                type: {
                    name: "Composite",
                    className: "RecoveryVirtualNetworkCustomDetails",
                },
            }, recoveryProximityPlacementGroupCustomInput: {
                serializedName: "recoveryProximityPlacementGroupCustomInput",
                type: {
                    name: "Composite",
                    className: "RecoveryProximityPlacementGroupCustomDetails",
                },
            }, autoProtectionOfDataDisk: {
                serializedName: "autoProtectionOfDataDisk",
                type: {
                    name: "String",
                },
            }, vmDisks: {
                serializedName: "vmDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AProtectionIntentDiskInputDetails",
                        },
                    },
                },
            }, vmManagedDisks: {
                serializedName: "vmManagedDisks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "A2AProtectionIntentManagedDiskInputDetails",
                        },
                    },
                },
            }, multiVmGroupName: {
                serializedName: "multiVmGroupName",
                type: {
                    name: "String",
                },
            }, multiVmGroupId: {
                serializedName: "multiVmGroupId",
                type: {
                    name: "String",
                },
            }, recoveryBootDiagStorageAccount: {
                serializedName: "recoveryBootDiagStorageAccount",
                type: {
                    name: "Composite",
                    className: "StorageAccountCustomDetails",
                },
            }, diskEncryptionInfo: {
                serializedName: "diskEncryptionInfo",
                type: {
                    name: "Composite",
                    className: "DiskEncryptionInfo",
                },
            }, recoveryAvailabilityZone: {
                serializedName: "recoveryAvailabilityZone",
                type: {
                    name: "String",
                },
            }, agentAutoUpdateStatus: {
                serializedName: "agentAutoUpdateStatus",
                type: {
                    name: "String",
                },
            }, automationAccountAuthenticationType: {
                serializedName: "automationAccountAuthenticationType",
                type: {
                    name: "String",
                },
            }, automationAccountArmId: {
                serializedName: "automationAccountArmId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanAutomationRunbookActionDetails = {
    serializedName: "AutomationRunbookActionDetails",
    type: {
        name: "Composite",
        className: "RecoveryPlanAutomationRunbookActionDetails",
        uberParent: "RecoveryPlanActionDetails",
        polymorphicDiscriminator: RecoveryPlanActionDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanActionDetails.type.modelProperties), { runbookId: {
                serializedName: "runbookId",
                type: {
                    name: "String",
                },
            }, timeout: {
                serializedName: "timeout",
                type: {
                    name: "String",
                },
            }, fabricLocation: {
                serializedName: "fabricLocation",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanManualActionDetails = {
    serializedName: "ManualActionDetails",
    type: {
        name: "Composite",
        className: "RecoveryPlanManualActionDetails",
        uberParent: "RecoveryPlanActionDetails",
        polymorphicDiscriminator: RecoveryPlanActionDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanActionDetails.type.modelProperties), { description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanScriptActionDetails = {
    serializedName: "ScriptActionDetails",
    type: {
        name: "Composite",
        className: "RecoveryPlanScriptActionDetails",
        uberParent: "RecoveryPlanActionDetails",
        polymorphicDiscriminator: RecoveryPlanActionDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanActionDetails.type.modelProperties), { path: {
                serializedName: "path",
                required: true,
                type: {
                    name: "String",
                },
            }, timeout: {
                serializedName: "timeout",
                type: {
                    name: "String",
                },
            }, fabricLocation: {
                serializedName: "fabricLocation",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanA2ADetails = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "RecoveryPlanA2ADetails",
        uberParent: "RecoveryPlanProviderSpecificDetails",
        polymorphicDiscriminator: RecoveryPlanProviderSpecificDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanProviderSpecificDetails.type.modelProperties), { primaryZone: {
                serializedName: "primaryZone",
                type: {
                    name: "String",
                },
            }, recoveryZone: {
                serializedName: "recoveryZone",
                type: {
                    name: "String",
                },
            }, primaryExtendedLocation: {
                serializedName: "primaryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            }, recoveryExtendedLocation: {
                serializedName: "recoveryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            } }),
    },
};
const RecoveryPlanA2AInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "RecoveryPlanA2AInput",
        uberParent: "RecoveryPlanProviderSpecificInput",
        polymorphicDiscriminator: RecoveryPlanProviderSpecificInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanProviderSpecificInput.type.modelProperties), { primaryZone: {
                serializedName: "primaryZone",
                type: {
                    name: "String",
                },
            }, recoveryZone: {
                serializedName: "recoveryZone",
                type: {
                    name: "String",
                },
            }, primaryExtendedLocation: {
                serializedName: "primaryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            }, recoveryExtendedLocation: {
                serializedName: "recoveryExtendedLocation",
                type: {
                    name: "Composite",
                    className: "ExtendedLocation",
                },
            } }),
    },
};
const RecoveryPlanA2AFailoverInput = {
    serializedName: "A2A",
    type: {
        name: "Composite",
        className: "RecoveryPlanA2AFailoverInput",
        uberParent: "RecoveryPlanProviderSpecificFailoverInput",
        polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties), { recoveryPointType: {
                serializedName: "recoveryPointType",
                required: true,
                type: {
                    name: "String",
                },
            }, cloudServiceCreationOption: {
                serializedName: "cloudServiceCreationOption",
                type: {
                    name: "String",
                },
            }, multiVmSyncPointOption: {
                serializedName: "multiVmSyncPointOption",
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanHyperVReplicaAzureFailbackInput = {
    serializedName: "HyperVReplicaAzureFailback",
    type: {
        name: "Composite",
        className: "RecoveryPlanHyperVReplicaAzureFailbackInput",
        uberParent: "RecoveryPlanProviderSpecificFailoverInput",
        polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties), { dataSyncOption: {
                serializedName: "dataSyncOption",
                required: true,
                type: {
                    name: "String",
                },
            }, recoveryVmCreationOption: {
                serializedName: "recoveryVmCreationOption",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanHyperVReplicaAzureFailoverInput = {
    serializedName: "HyperVReplicaAzure",
    type: {
        name: "Composite",
        className: "RecoveryPlanHyperVReplicaAzureFailoverInput",
        uberParent: "RecoveryPlanProviderSpecificFailoverInput",
        polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties), { primaryKekCertificatePfx: {
                serializedName: "primaryKekCertificatePfx",
                type: {
                    name: "String",
                },
            }, secondaryKekCertificatePfx: {
                serializedName: "secondaryKekCertificatePfx",
                type: {
                    name: "String",
                },
            }, recoveryPointType: {
                serializedName: "recoveryPointType",
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanInMageAzureV2FailoverInput = {
    serializedName: "InMageAzureV2",
    type: {
        name: "Composite",
        className: "RecoveryPlanInMageAzureV2FailoverInput",
        uberParent: "RecoveryPlanProviderSpecificFailoverInput",
        polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties), { recoveryPointType: {
                serializedName: "recoveryPointType",
                required: true,
                type: {
                    name: "String",
                },
            }, useMultiVmSyncPoint: {
                serializedName: "useMultiVmSyncPoint",
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanInMageFailoverInput = {
    serializedName: "InMage",
    type: {
        name: "Composite",
        className: "RecoveryPlanInMageFailoverInput",
        uberParent: "RecoveryPlanProviderSpecificFailoverInput",
        polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties), { recoveryPointType: {
                serializedName: "recoveryPointType",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanInMageRcmFailbackFailoverInput = {
    serializedName: "InMageRcmFailback",
    type: {
        name: "Composite",
        className: "RecoveryPlanInMageRcmFailbackFailoverInput",
        uberParent: "RecoveryPlanProviderSpecificFailoverInput",
        polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties), { recoveryPointType: {
                serializedName: "recoveryPointType",
                required: true,
                type: {
                    name: "String",
                },
            }, useMultiVmSyncPoint: {
                serializedName: "useMultiVmSyncPoint",
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanInMageRcmFailoverInput = {
    serializedName: "InMageRcm",
    type: {
        name: "Composite",
        className: "RecoveryPlanInMageRcmFailoverInput",
        uberParent: "RecoveryPlanProviderSpecificFailoverInput",
        polymorphicDiscriminator: RecoveryPlanProviderSpecificFailoverInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryPlanProviderSpecificFailoverInput.type.modelProperties), { recoveryPointType: {
                serializedName: "recoveryPointType",
                required: true,
                type: {
                    name: "String",
                },
            }, useMultiVmSyncPoint: {
                serializedName: "useMultiVmSyncPoint",
                type: {
                    name: "String",
                },
            } }),
    },
};
const ExistingProtectionProfile = {
    serializedName: "Existing",
    type: {
        name: "Composite",
        className: "ExistingProtectionProfile",
        uberParent: "ProtectionProfileCustomDetails",
        polymorphicDiscriminator: ProtectionProfileCustomDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionProfileCustomDetails.type.modelProperties), { protectionProfileId: {
                serializedName: "protectionProfileId",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const NewProtectionProfile = {
    serializedName: "New",
    type: {
        name: "Composite",
        className: "NewProtectionProfile",
        uberParent: "ProtectionProfileCustomDetails",
        polymorphicDiscriminator: ProtectionProfileCustomDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, ProtectionProfileCustomDetails.type.modelProperties), { policyName: {
                serializedName: "policyName",
                required: true,
                type: {
                    name: "String",
                },
            }, recoveryPointHistory: {
                serializedName: "recoveryPointHistory",
                type: {
                    name: "Number",
                },
            }, crashConsistentFrequencyInMinutes: {
                serializedName: "crashConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, appConsistentFrequencyInMinutes: {
                serializedName: "appConsistentFrequencyInMinutes",
                type: {
                    name: "Number",
                },
            }, multiVmSyncStatus: {
                serializedName: "multiVmSyncStatus",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const ExistingStorageAccount = {
    serializedName: "Existing",
    type: {
        name: "Composite",
        className: "ExistingStorageAccount",
        uberParent: "StorageAccountCustomDetails",
        polymorphicDiscriminator: StorageAccountCustomDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, StorageAccountCustomDetails.type.modelProperties), { azureStorageAccountId: {
                serializedName: "azureStorageAccountId",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
const ExistingRecoveryAvailabilitySet = {
    serializedName: "Existing",
    type: {
        name: "Composite",
        className: "ExistingRecoveryAvailabilitySet",
        uberParent: "RecoveryAvailabilitySetCustomDetails",
        polymorphicDiscriminator: RecoveryAvailabilitySetCustomDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryAvailabilitySetCustomDetails.type.modelProperties), { recoveryAvailabilitySetId: {
                serializedName: "recoveryAvailabilitySetId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const ExistingRecoveryVirtualNetwork = {
    serializedName: "Existing",
    type: {
        name: "Composite",
        className: "ExistingRecoveryVirtualNetwork",
        uberParent: "RecoveryVirtualNetworkCustomDetails",
        polymorphicDiscriminator: RecoveryVirtualNetworkCustomDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryVirtualNetworkCustomDetails.type.modelProperties), { recoveryVirtualNetworkId: {
                serializedName: "recoveryVirtualNetworkId",
                required: true,
                type: {
                    name: "String",
                },
            }, recoverySubnetName: {
                serializedName: "recoverySubnetName",
                type: {
                    name: "String",
                },
            } }),
    },
};
const NewRecoveryVirtualNetwork = {
    serializedName: "New",
    type: {
        name: "Composite",
        className: "NewRecoveryVirtualNetwork",
        uberParent: "RecoveryVirtualNetworkCustomDetails",
        polymorphicDiscriminator: RecoveryVirtualNetworkCustomDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryVirtualNetworkCustomDetails.type.modelProperties), { recoveryVirtualNetworkResourceGroupName: {
                serializedName: "recoveryVirtualNetworkResourceGroupName",
                type: {
                    name: "String",
                },
            }, recoveryVirtualNetworkName: {
                serializedName: "recoveryVirtualNetworkName",
                type: {
                    name: "String",
                },
            } }),
    },
};
const ExistingRecoveryProximityPlacementGroup = {
    serializedName: "Existing",
    type: {
        name: "Composite",
        className: "ExistingRecoveryProximityPlacementGroup",
        uberParent: "RecoveryProximityPlacementGroupCustomDetails",
        polymorphicDiscriminator: RecoveryProximityPlacementGroupCustomDetails.type
            .polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryProximityPlacementGroupCustomDetails.type.modelProperties), { recoveryProximityPlacementGroupId: {
                serializedName: "recoveryProximityPlacementGroupId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const ExistingRecoveryResourceGroup = {
    serializedName: "Existing",
    type: {
        name: "Composite",
        className: "ExistingRecoveryResourceGroup",
        uberParent: "RecoveryResourceGroupCustomDetails",
        polymorphicDiscriminator: RecoveryResourceGroupCustomDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RecoveryResourceGroupCustomDetails.type.modelProperties), { recoveryResourceGroupId: {
                serializedName: "recoveryResourceGroupId",
                type: {
                    name: "String",
                },
            } }),
    },
};
const VmmVirtualMachineDetails = {
    serializedName: "VmmVirtualMachine",
    type: {
        name: "Composite",
        className: "VmmVirtualMachineDetails",
        uberParent: "HyperVVirtualMachineDetails",
        polymorphicDiscriminator: HyperVVirtualMachineDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, HyperVVirtualMachineDetails.type.modelProperties),
    },
};
const FabricReplicationGroupTaskDetails = {
    serializedName: "FabricReplicationGroupTaskDetails",
    type: {
        name: "Composite",
        className: "FabricReplicationGroupTaskDetails",
        uberParent: "JobTaskDetails",
        polymorphicDiscriminator: JobTaskDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobTaskDetails.type.modelProperties), { skippedReason: {
                serializedName: "skippedReason",
                type: {
                    name: "String",
                },
            }, skippedReasonString: {
                serializedName: "skippedReasonString",
                type: {
                    name: "String",
                },
            } }),
    },
};
const VirtualMachineTaskDetails = {
    serializedName: "VirtualMachineTaskDetails",
    type: {
        name: "Composite",
        className: "VirtualMachineTaskDetails",
        uberParent: "JobTaskDetails",
        polymorphicDiscriminator: JobTaskDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, JobTaskDetails.type.modelProperties), { skippedReason: {
                serializedName: "skippedReason",
                type: {
                    name: "String",
                },
            }, skippedReasonString: {
                serializedName: "skippedReasonString",
                type: {
                    name: "String",
                },
            } }),
    },
};
const RecoveryPlanShutdownGroupTaskDetails = {
    serializedName: "RecoveryPlanShutdownGroupTaskDetails",
    type: {
        name: "Composite",
        className: "RecoveryPlanShutdownGroupTaskDetails",
        uberParent: "RecoveryPlanGroupTaskDetails",
        polymorphicDiscriminator: RecoveryPlanGroupTaskDetails.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, RecoveryPlanGroupTaskDetails.type.modelProperties),
    },
};
const HyperVReplicaBluePolicyInput = {
    serializedName: "HyperVReplica2012R2",
    type: {
        name: "Composite",
        className: "HyperVReplicaBluePolicyInput",
        uberParent: "HyperVReplicaPolicyInput",
        polymorphicDiscriminator: HyperVReplicaPolicyInput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, HyperVReplicaPolicyInput.type.modelProperties), { replicationFrequencyInSeconds: {
                serializedName: "replicationFrequencyInSeconds",
                type: {
                    name: "Number",
                },
            } }),
    },
};
const ReplicationFabricsRemoveInfraHeaders = {
    type: {
        name: "Composite",
        className: "ReplicationFabricsRemoveInfraHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String",
                },
            },
        },
    },
};
const ReplicationProtectedItemsUpdateMobilityServiceHeaders = {
    type: {
        name: "Composite",
        className: "ReplicationProtectedItemsUpdateMobilityServiceHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String",
                },
            },
        },
    },
};
let discriminators = {
    ApplianceSpecificDetails: ApplianceSpecificDetails,
    EventProviderSpecificDetails: EventProviderSpecificDetails,
    EventSpecificDetails: EventSpecificDetails,
    FabricSpecificDetails: FabricSpecificDetails,
    FabricSpecificCreationInput: FabricSpecificCreationInput,
    NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
    FabricSpecificCreateNetworkMappingInput: FabricSpecificCreateNetworkMappingInput,
    FabricSpecificUpdateNetworkMappingInput: FabricSpecificUpdateNetworkMappingInput,
    ReplicationProviderSpecificContainerCreationInput: ReplicationProviderSpecificContainerCreationInput,
    MigrationProviderSpecificSettings: MigrationProviderSpecificSettings,
    EnableMigrationProviderSpecificInput: EnableMigrationProviderSpecificInput,
    UpdateMigrationItemProviderSpecificInput: UpdateMigrationItemProviderSpecificInput,
    MigrateProviderSpecificInput: MigrateProviderSpecificInput,
    ResumeReplicationProviderSpecificInput: ResumeReplicationProviderSpecificInput,
    ResyncProviderSpecificInput: ResyncProviderSpecificInput,
    TestMigrateProviderSpecificInput: TestMigrateProviderSpecificInput,
    ConfigurationSettings: ConfigurationSettings,
    ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
    EnableProtectionProviderSpecificInput: EnableProtectionProviderSpecificInput,
    UpdateReplicationProtectedItemProviderInput: UpdateReplicationProtectedItemProviderInput,
    AddDisksProviderSpecificInput: AddDisksProviderSpecificInput,
    ApplyRecoveryPointProviderSpecificInput: ApplyRecoveryPointProviderSpecificInput,
    PlannedFailoverProviderSpecificFailoverInput: PlannedFailoverProviderSpecificFailoverInput,
    ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
    DisableProtectionProviderSpecificInput: DisableProtectionProviderSpecificInput,
    RemoveDisksProviderSpecificInput: RemoveDisksProviderSpecificInput,
    ReverseReplicationProviderSpecificInput: ReverseReplicationProviderSpecificInput,
    SwitchProviderSpecificInput: SwitchProviderSpecificInput,
    TestFailoverProviderSpecificInput: TestFailoverProviderSpecificInput,
    UnplannedFailoverProviderSpecificInput: UnplannedFailoverProviderSpecificInput,
    UpdateApplianceForReplicationProtectedItemProviderSpecificInput: UpdateApplianceForReplicationProtectedItemProviderSpecificInput,
    ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
    ReplicationProviderSpecificContainerMappingInput: ReplicationProviderSpecificContainerMappingInput,
    ReplicationProviderSpecificUpdateContainerMappingInput: ReplicationProviderSpecificUpdateContainerMappingInput,
    SwitchProtectionProviderSpecificInput: SwitchProtectionProviderSpecificInput,
    TaskTypeDetails: TaskTypeDetails,
    GroupTaskDetails: GroupTaskDetails,
    JobDetails: JobDetails,
    PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
    PolicyProviderSpecificInput: PolicyProviderSpecificInput,
    ReplicationProtectionIntentProviderSpecificSettings: ReplicationProtectionIntentProviderSpecificSettings,
    CreateProtectionIntentProviderSpecificDetails: CreateProtectionIntentProviderSpecificDetails,
    RecoveryPlanActionDetails: RecoveryPlanActionDetails,
    RecoveryPlanProviderSpecificDetails: RecoveryPlanProviderSpecificDetails,
    RecoveryPlanProviderSpecificInput: RecoveryPlanProviderSpecificInput,
    RecoveryPlanProviderSpecificFailoverInput: RecoveryPlanProviderSpecificFailoverInput,
    ProtectionProfileCustomDetails: ProtectionProfileCustomDetails,
    StorageAccountCustomDetails: StorageAccountCustomDetails,
    RecoveryAvailabilitySetCustomDetails: RecoveryAvailabilitySetCustomDetails,
    RecoveryVirtualNetworkCustomDetails: RecoveryVirtualNetworkCustomDetails,
    RecoveryProximityPlacementGroupCustomDetails: RecoveryProximityPlacementGroupCustomDetails,
    RecoveryResourceGroupCustomDetails: RecoveryResourceGroupCustomDetails,
    "ApplianceSpecificDetails.InMageRcm": InMageRcmApplianceSpecificDetails,
    "EventProviderSpecificDetails.A2A": A2AEventDetails,
    "EventProviderSpecificDetails.HyperVReplica2012": HyperVReplica2012EventDetails,
    "EventProviderSpecificDetails.HyperVReplica2012R2": HyperVReplica2012R2EventDetails,
    "EventProviderSpecificDetails.HyperVReplicaAzure": HyperVReplicaAzureEventDetails,
    "EventProviderSpecificDetails.HyperVReplicaBaseEventDetails": HyperVReplicaBaseEventDetails,
    "EventProviderSpecificDetails.InMageAzureV2": InMageAzureV2EventDetails,
    "EventProviderSpecificDetails.InMageRcm": InMageRcmEventDetails,
    "EventProviderSpecificDetails.InMageRcmFailback": InMageRcmFailbackEventDetails,
    "EventProviderSpecificDetails.VMwareCbt": VMwareCbtEventDetails,
    "EventSpecificDetails.JobStatus": JobStatusEventDetails,
    "FabricSpecificDetails.Azure": AzureFabricSpecificDetails,
    "FabricSpecificDetails.HyperVSite": HyperVSiteDetails,
    "FabricSpecificDetails.InMageRcm": InMageRcmFabricSpecificDetails,
    "FabricSpecificDetails.VMM": VmmDetails,
    "FabricSpecificDetails.VMware": VMwareDetails,
    "FabricSpecificDetails.VMwareV2": VMwareV2FabricSpecificDetails,
    "FabricSpecificCreationInput.Azure": AzureFabricCreationInput,
    "FabricSpecificCreationInput.InMageRcm": InMageRcmFabricCreationInput,
    "FabricSpecificCreationInput.VMwareV2": VMwareV2FabricCreationInput,
    "NetworkMappingFabricSpecificSettings.AzureToAzure": AzureToAzureNetworkMappingSettings,
    "NetworkMappingFabricSpecificSettings.VmmToAzure": VmmToAzureNetworkMappingSettings,
    "NetworkMappingFabricSpecificSettings.VmmToVmm": VmmToVmmNetworkMappingSettings,
    "FabricSpecificCreateNetworkMappingInput.AzureToAzure": AzureToAzureCreateNetworkMappingInput,
    "FabricSpecificCreateNetworkMappingInput.VmmToAzure": VmmToAzureCreateNetworkMappingInput,
    "FabricSpecificCreateNetworkMappingInput.VmmToVmm": VmmToVmmCreateNetworkMappingInput,
    "FabricSpecificUpdateNetworkMappingInput.AzureToAzure": AzureToAzureUpdateNetworkMappingInput,
    "FabricSpecificUpdateNetworkMappingInput.VmmToAzure": VmmToAzureUpdateNetworkMappingInput,
    "FabricSpecificUpdateNetworkMappingInput.VmmToVmm": VmmToVmmUpdateNetworkMappingInput,
    "ReplicationProviderSpecificContainerCreationInput.A2A": A2AContainerCreationInput,
    "ReplicationProviderSpecificContainerCreationInput.A2ACrossClusterMigration": A2ACrossClusterMigrationContainerCreationInput,
    "ReplicationProviderSpecificContainerCreationInput.VMwareCbt": VMwareCbtContainerCreationInput,
    "MigrationProviderSpecificSettings.VMwareCbt": VMwareCbtMigrationDetails,
    "EnableMigrationProviderSpecificInput.VMwareCbt": VMwareCbtEnableMigrationInput,
    "UpdateMigrationItemProviderSpecificInput.VMwareCbt": VMwareCbtUpdateMigrationItemInput,
    "MigrateProviderSpecificInput.VMwareCbt": VMwareCbtMigrateInput,
    "ResumeReplicationProviderSpecificInput.VMwareCbt": VMwareCbtResumeReplicationInput,
    "ResyncProviderSpecificInput.VMwareCbt": VMwareCbtResyncInput,
    "TestMigrateProviderSpecificInput.VMwareCbt": VMwareCbtTestMigrateInput,
    "ConfigurationSettings.HyperVVirtualMachine": HyperVVirtualMachineDetails,
    "ConfigurationSettings.ReplicationGroupDetails": ReplicationGroupDetails,
    "ConfigurationSettings.VMwareVirtualMachine": VMwareVirtualMachineDetails,
    "ReplicationProviderSpecificSettings.A2ACrossClusterMigration": A2ACrossClusterMigrationReplicationDetails,
    "ReplicationProviderSpecificSettings.A2A": A2AReplicationDetails,
    "ReplicationProviderSpecificSettings.HyperVReplicaAzure": HyperVReplicaAzureReplicationDetails,
    "ReplicationProviderSpecificSettings.HyperVReplicaBaseReplicationDetails": HyperVReplicaBaseReplicationDetails,
    "ReplicationProviderSpecificSettings.HyperVReplica2012R2": HyperVReplicaBlueReplicationDetails,
    "ReplicationProviderSpecificSettings.HyperVReplica2012": HyperVReplicaReplicationDetails,
    "ReplicationProviderSpecificSettings.InMageAzureV2": InMageAzureV2ReplicationDetails,
    "ReplicationProviderSpecificSettings.InMageRcmFailback": InMageRcmFailbackReplicationDetails,
    "ReplicationProviderSpecificSettings.InMageRcm": InMageRcmReplicationDetails,
    "ReplicationProviderSpecificSettings.InMage": InMageReplicationDetails,
    "EnableProtectionProviderSpecificInput.A2ACrossClusterMigration": A2ACrossClusterMigrationEnableProtectionInput,
    "EnableProtectionProviderSpecificInput.A2A": A2AEnableProtectionInput,
    "EnableProtectionProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureEnableProtectionInput,
    "EnableProtectionProviderSpecificInput.InMageAzureV2": InMageAzureV2EnableProtectionInput,
    "EnableProtectionProviderSpecificInput.InMage": InMageEnableProtectionInput,
    "EnableProtectionProviderSpecificInput.InMageRcm": InMageRcmEnableProtectionInput,
    "UpdateReplicationProtectedItemProviderInput.A2A": A2AUpdateReplicationProtectedItemInput,
    "UpdateReplicationProtectedItemProviderInput.HyperVReplicaAzure": HyperVReplicaAzureUpdateReplicationProtectedItemInput,
    "UpdateReplicationProtectedItemProviderInput.InMageAzureV2": InMageAzureV2UpdateReplicationProtectedItemInput,
    "UpdateReplicationProtectedItemProviderInput.InMageRcm": InMageRcmUpdateReplicationProtectedItemInput,
    "AddDisksProviderSpecificInput.A2A": A2AAddDisksInput,
    "ApplyRecoveryPointProviderSpecificInput.A2A": A2AApplyRecoveryPointInput,
    "ApplyRecoveryPointProviderSpecificInput.A2ACrossClusterMigration": A2ACrossClusterMigrationApplyRecoveryPointInput,
    "ApplyRecoveryPointProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureApplyRecoveryPointInput,
    "ApplyRecoveryPointProviderSpecificInput.InMageAzureV2": InMageAzureV2ApplyRecoveryPointInput,
    "ApplyRecoveryPointProviderSpecificInput.InMageRcm": InMageRcmApplyRecoveryPointInput,
    "PlannedFailoverProviderSpecificFailoverInput.HyperVReplicaAzureFailback": HyperVReplicaAzureFailbackProviderInput,
    "PlannedFailoverProviderSpecificFailoverInput.HyperVReplicaAzure": HyperVReplicaAzurePlannedFailoverProviderInput,
    "PlannedFailoverProviderSpecificFailoverInput.InMageRcmFailback": InMageRcmFailbackPlannedFailoverProviderInput,
    "ProviderSpecificRecoveryPointDetails.A2A": A2ARecoveryPointDetails,
    "ProviderSpecificRecoveryPointDetails.InMageAzureV2": InMageAzureV2RecoveryPointDetails,
    "ProviderSpecificRecoveryPointDetails.InMageRcm": InMageRcmRecoveryPointDetails,
    "DisableProtectionProviderSpecificInput.InMage": InMageDisableProtectionProviderSpecificInput,
    "RemoveDisksProviderSpecificInput.A2A": A2ARemoveDisksInput,
    "ReverseReplicationProviderSpecificInput.A2A": A2AReprotectInput,
    "ReverseReplicationProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureReprotectInput,
    "ReverseReplicationProviderSpecificInput.InMageAzureV2": InMageAzureV2ReprotectInput,
    "ReverseReplicationProviderSpecificInput.InMageRcmFailback": InMageRcmFailbackReprotectInput,
    "ReverseReplicationProviderSpecificInput.InMageRcm": InMageRcmReprotectInput,
    "ReverseReplicationProviderSpecificInput.InMage": InMageReprotectInput,
    "SwitchProviderSpecificInput.InMageAzureV2": InMageAzureV2SwitchProviderInput,
    "TestFailoverProviderSpecificInput.A2A": A2ATestFailoverInput,
    "TestFailoverProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureTestFailoverInput,
    "TestFailoverProviderSpecificInput.InMageAzureV2": InMageAzureV2TestFailoverInput,
    "TestFailoverProviderSpecificInput.InMageRcm": InMageRcmTestFailoverInput,
    "TestFailoverProviderSpecificInput.InMage": InMageTestFailoverInput,
    "UnplannedFailoverProviderSpecificInput.A2A": A2AUnplannedFailoverInput,
    "UnplannedFailoverProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzureUnplannedFailoverInput,
    "UnplannedFailoverProviderSpecificInput.InMageAzureV2": InMageAzureV2UnplannedFailoverInput,
    "UnplannedFailoverProviderSpecificInput.InMageRcm": InMageRcmUnplannedFailoverInput,
    "UnplannedFailoverProviderSpecificInput.InMage": InMageUnplannedFailoverInput,
    "UpdateApplianceForReplicationProtectedItemProviderSpecificInput.InMageRcm": InMageRcmUpdateApplianceForReplicationProtectedItemInput,
    "ProtectionContainerMappingProviderSpecificDetails.A2A": A2AProtectionContainerMappingDetails,
    "ProtectionContainerMappingProviderSpecificDetails.InMageRcm": InMageRcmProtectionContainerMappingDetails,
    "ProtectionContainerMappingProviderSpecificDetails.VMwareCbt": VMwareCbtProtectionContainerMappingDetails,
    "ReplicationProviderSpecificContainerMappingInput.A2A": A2AContainerMappingInput,
    "ReplicationProviderSpecificContainerMappingInput.VMwareCbt": VMwareCbtContainerMappingInput,
    "ReplicationProviderSpecificUpdateContainerMappingInput.A2A": A2AUpdateContainerMappingInput,
    "ReplicationProviderSpecificUpdateContainerMappingInput.InMageRcm": InMageRcmUpdateContainerMappingInput,
    "SwitchProtectionProviderSpecificInput.A2A": A2ASwitchProtectionInput,
    "TaskTypeDetails.AutomationRunbookTaskDetails": AutomationRunbookTaskDetails,
    "TaskTypeDetails.ConsistencyCheckTaskDetails": ConsistencyCheckTaskDetails,
    "TaskTypeDetails.JobTaskDetails": JobTaskDetails,
    "TaskTypeDetails.ManualActionTaskDetails": ManualActionTaskDetails,
    "TaskTypeDetails.ScriptActionTaskDetails": ScriptActionTaskDetails,
    "TaskTypeDetails.VmNicUpdatesTaskDetails": VmNicUpdatesTaskDetails,
    "GroupTaskDetails.InlineWorkflowTaskDetails": InlineWorkflowTaskDetails,
    "GroupTaskDetails.RecoveryPlanGroupTaskDetails": RecoveryPlanGroupTaskDetails,
    "JobDetails.AsrJobDetails": AsrJobDetails,
    "JobDetails.ExportJobDetails": ExportJobDetails,
    "JobDetails.FailoverJobDetails": FailoverJobDetails,
    "JobDetails.SwitchProtectionJobDetails": SwitchProtectionJobDetails,
    "JobDetails.TestFailoverJobDetails": TestFailoverJobDetails,
    "PolicyProviderSpecificDetails.A2A": A2APolicyDetails,
    "PolicyProviderSpecificDetails.HyperVReplicaAzure": HyperVReplicaAzurePolicyDetails,
    "PolicyProviderSpecificDetails.HyperVReplicaBasePolicyDetails": HyperVReplicaBasePolicyDetails,
    "PolicyProviderSpecificDetails.HyperVReplica2012R2": HyperVReplicaBluePolicyDetails,
    "PolicyProviderSpecificDetails.HyperVReplica2012": HyperVReplicaPolicyDetails,
    "PolicyProviderSpecificDetails.InMageAzureV2": InMageAzureV2PolicyDetails,
    "PolicyProviderSpecificDetails.InMageBasePolicyDetails": InMageBasePolicyDetails,
    "PolicyProviderSpecificDetails.InMage": InMagePolicyDetails,
    "PolicyProviderSpecificDetails.InMageRcmFailback": InMageRcmFailbackPolicyDetails,
    "PolicyProviderSpecificDetails.InMageRcm": InMageRcmPolicyDetails,
    "PolicyProviderSpecificDetails.VMwareCbt": VmwareCbtPolicyDetails,
    "PolicyProviderSpecificInput.A2ACrossClusterMigration": A2ACrossClusterMigrationPolicyCreationInput,
    "PolicyProviderSpecificInput.A2A": A2APolicyCreationInput,
    "PolicyProviderSpecificInput.HyperVReplicaAzure": HyperVReplicaAzurePolicyInput,
    "PolicyProviderSpecificInput.HyperVReplica2012": HyperVReplicaPolicyInput,
    "PolicyProviderSpecificInput.InMageAzureV2": InMageAzureV2PolicyInput,
    "PolicyProviderSpecificInput.InMage": InMagePolicyInput,
    "PolicyProviderSpecificInput.InMageRcmFailback": InMageRcmFailbackPolicyCreationInput,
    "PolicyProviderSpecificInput.InMageRcm": InMageRcmPolicyCreationInput,
    "PolicyProviderSpecificInput.VMwareCbt": VMwareCbtPolicyCreationInput,
    "ReplicationProtectionIntentProviderSpecificSettings.A2A": A2AReplicationIntentDetails,
    "CreateProtectionIntentProviderSpecificDetails.A2A": A2ACreateProtectionIntentInput,
    "RecoveryPlanActionDetails.AutomationRunbookActionDetails": RecoveryPlanAutomationRunbookActionDetails,
    "RecoveryPlanActionDetails.ManualActionDetails": RecoveryPlanManualActionDetails,
    "RecoveryPlanActionDetails.ScriptActionDetails": RecoveryPlanScriptActionDetails,
    "RecoveryPlanProviderSpecificDetails.A2A": RecoveryPlanA2ADetails,
    "RecoveryPlanProviderSpecificInput.A2A": RecoveryPlanA2AInput,
    "RecoveryPlanProviderSpecificFailoverInput.A2A": RecoveryPlanA2AFailoverInput,
    "RecoveryPlanProviderSpecificFailoverInput.HyperVReplicaAzureFailback": RecoveryPlanHyperVReplicaAzureFailbackInput,
    "RecoveryPlanProviderSpecificFailoverInput.HyperVReplicaAzure": RecoveryPlanHyperVReplicaAzureFailoverInput,
    "RecoveryPlanProviderSpecificFailoverInput.InMageAzureV2": RecoveryPlanInMageAzureV2FailoverInput,
    "RecoveryPlanProviderSpecificFailoverInput.InMage": RecoveryPlanInMageFailoverInput,
    "RecoveryPlanProviderSpecificFailoverInput.InMageRcmFailback": RecoveryPlanInMageRcmFailbackFailoverInput,
    "RecoveryPlanProviderSpecificFailoverInput.InMageRcm": RecoveryPlanInMageRcmFailoverInput,
    "ProtectionProfileCustomDetails.Existing": ExistingProtectionProfile,
    "ProtectionProfileCustomDetails.New": NewProtectionProfile,
    "StorageAccountCustomDetails.Existing": ExistingStorageAccount,
    "RecoveryAvailabilitySetCustomDetails.Existing": ExistingRecoveryAvailabilitySet,
    "RecoveryVirtualNetworkCustomDetails.Existing": ExistingRecoveryVirtualNetwork,
    "RecoveryVirtualNetworkCustomDetails.New": NewRecoveryVirtualNetwork,
    "RecoveryProximityPlacementGroupCustomDetails.Existing": ExistingRecoveryProximityPlacementGroup,
    "RecoveryResourceGroupCustomDetails.Existing": ExistingRecoveryResourceGroup,
    "HyperVVirtualMachineDetails.VmmVirtualMachine": VmmVirtualMachineDetails,
    "JobTaskDetails.FabricReplicationGroupTaskDetails": FabricReplicationGroupTaskDetails,
    "JobTaskDetails.VirtualMachineTaskDetails": VirtualMachineTaskDetails,
    "RecoveryPlanGroupTaskDetails.RecoveryPlanShutdownGroupTaskDetails": RecoveryPlanShutdownGroupTaskDetails,
    "HyperVReplicaPolicyInput.HyperVReplica2012R2": HyperVReplicaBluePolicyInput,
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    A2AAddDisksInput: A2AAddDisksInput,
    A2AApplyRecoveryPointInput: A2AApplyRecoveryPointInput,
    A2AContainerCreationInput: A2AContainerCreationInput,
    A2AContainerMappingInput: A2AContainerMappingInput,
    A2ACreateProtectionIntentInput: A2ACreateProtectionIntentInput,
    A2ACrossClusterMigrationApplyRecoveryPointInput: A2ACrossClusterMigrationApplyRecoveryPointInput,
    A2ACrossClusterMigrationContainerCreationInput: A2ACrossClusterMigrationContainerCreationInput,
    A2ACrossClusterMigrationEnableProtectionInput: A2ACrossClusterMigrationEnableProtectionInput,
    A2ACrossClusterMigrationPolicyCreationInput: A2ACrossClusterMigrationPolicyCreationInput,
    A2ACrossClusterMigrationReplicationDetails: A2ACrossClusterMigrationReplicationDetails,
    A2AEnableProtectionInput: A2AEnableProtectionInput,
    A2AEventDetails: A2AEventDetails,
    A2AExtendedLocationDetails: A2AExtendedLocationDetails,
    A2AFabricSpecificLocationDetails: A2AFabricSpecificLocationDetails,
    A2APolicyCreationInput: A2APolicyCreationInput,
    A2APolicyDetails: A2APolicyDetails,
    A2AProtectedDiskDetails: A2AProtectedDiskDetails,
    A2AProtectedManagedDiskDetails: A2AProtectedManagedDiskDetails,
    A2AProtectionContainerMappingDetails: A2AProtectionContainerMappingDetails,
    A2AProtectionIntentDiskInputDetails: A2AProtectionIntentDiskInputDetails,
    A2AProtectionIntentManagedDiskInputDetails: A2AProtectionIntentManagedDiskInputDetails,
    A2ARecoveryPointDetails: A2ARecoveryPointDetails,
    A2ARemoveDisksInput: A2ARemoveDisksInput,
    A2AReplicationDetails: A2AReplicationDetails,
    A2AReplicationIntentDetails: A2AReplicationIntentDetails,
    A2AReprotectInput: A2AReprotectInput,
    A2ASwitchProtectionInput: A2ASwitchProtectionInput,
    A2ATestFailoverInput: A2ATestFailoverInput,
    A2AUnplannedFailoverInput: A2AUnplannedFailoverInput,
    A2AUnprotectedDiskDetails: A2AUnprotectedDiskDetails,
    A2AUpdateContainerMappingInput: A2AUpdateContainerMappingInput,
    A2AUpdateReplicationProtectedItemInput: A2AUpdateReplicationProtectedItemInput,
    A2AVmDiskInputDetails: A2AVmDiskInputDetails,
    A2AVmManagedDiskInputDetails: A2AVmManagedDiskInputDetails,
    A2AVmManagedDiskUpdateDetails: A2AVmManagedDiskUpdateDetails,
    A2AZoneDetails: A2AZoneDetails,
    ASRTask: ASRTask,
    AddDisksInput: AddDisksInput,
    AddDisksInputProperties: AddDisksInputProperties,
    AddDisksProviderSpecificInput: AddDisksProviderSpecificInput,
    AddRecoveryServicesProviderInput: AddRecoveryServicesProviderInput,
    AddRecoveryServicesProviderInputProperties: AddRecoveryServicesProviderInputProperties,
    AddVCenterRequest: AddVCenterRequest,
    AddVCenterRequestProperties: AddVCenterRequestProperties,
    AgentDetails: AgentDetails,
    AgentDiskDetails: AgentDiskDetails,
    Alert: Alert,
    AlertCollection: AlertCollection,
    AlertProperties: AlertProperties,
    ApplianceCollection: ApplianceCollection,
    ApplianceMonitoringDetails: ApplianceMonitoringDetails,
    ApplianceQueryParameter: ApplianceQueryParameter,
    ApplianceResourceDetails: ApplianceResourceDetails,
    ApplianceSpecificDetails: ApplianceSpecificDetails,
    ApplyRecoveryPointInput: ApplyRecoveryPointInput,
    ApplyRecoveryPointInputProperties: ApplyRecoveryPointInputProperties,
    ApplyRecoveryPointProviderSpecificInput: ApplyRecoveryPointProviderSpecificInput,
    AsrJobDetails: AsrJobDetails,
    AutomationRunbookTaskDetails: AutomationRunbookTaskDetails,
    AzureFabricCreationInput: AzureFabricCreationInput,
    AzureFabricSpecificDetails: AzureFabricSpecificDetails,
    AzureToAzureCreateNetworkMappingInput: AzureToAzureCreateNetworkMappingInput,
    AzureToAzureNetworkMappingSettings: AzureToAzureNetworkMappingSettings,
    AzureToAzureUpdateNetworkMappingInput: AzureToAzureUpdateNetworkMappingInput,
    AzureToAzureVmSyncedConfigDetails: AzureToAzureVmSyncedConfigDetails,
    AzureVmDiskDetails: AzureVmDiskDetails,
    ComputeSizeErrorDetails: ComputeSizeErrorDetails,
    ConfigurationSettings: ConfigurationSettings,
    ConfigureAlertRequest: ConfigureAlertRequest,
    ConfigureAlertRequestProperties: ConfigureAlertRequestProperties,
    ConsistencyCheckTaskDetails: ConsistencyCheckTaskDetails,
    CreateNetworkMappingInput: CreateNetworkMappingInput,
    CreateNetworkMappingInputProperties: CreateNetworkMappingInputProperties,
    CreatePolicyInput: CreatePolicyInput,
    CreatePolicyInputProperties: CreatePolicyInputProperties,
    CreateProtectionContainerInput: CreateProtectionContainerInput,
    CreateProtectionContainerInputProperties: CreateProtectionContainerInputProperties,
    CreateProtectionContainerMappingInput: CreateProtectionContainerMappingInput,
    CreateProtectionContainerMappingInputProperties: CreateProtectionContainerMappingInputProperties,
    CreateProtectionIntentInput: CreateProtectionIntentInput,
    CreateProtectionIntentProperties: CreateProtectionIntentProperties,
    CreateProtectionIntentProviderSpecificDetails: CreateProtectionIntentProviderSpecificDetails,
    CreateRecoveryPlanInput: CreateRecoveryPlanInput,
    CreateRecoveryPlanInputProperties: CreateRecoveryPlanInputProperties,
    CriticalJobHistoryDetails: CriticalJobHistoryDetails,
    CurrentJobDetails: CurrentJobDetails,
    CurrentScenarioDetails: CurrentScenarioDetails,
    DataStore: DataStore,
    DataStoreUtilizationDetails: DataStoreUtilizationDetails,
    DisableProtectionInput: DisableProtectionInput,
    DisableProtectionInputProperties: DisableProtectionInputProperties,
    DisableProtectionProviderSpecificInput: DisableProtectionProviderSpecificInput,
    DiscoverProtectableItemRequest: DiscoverProtectableItemRequest,
    DiscoverProtectableItemRequestProperties: DiscoverProtectableItemRequestProperties,
    DiskDetails: DiskDetails,
    DiskEncryptionInfo: DiskEncryptionInfo,
    DiskEncryptionKeyInfo: DiskEncryptionKeyInfo,
    DiskVolumeDetails: DiskVolumeDetails,
    Display: Display,
    DraDetails: DraDetails,
    EnableMigrationInput: EnableMigrationInput,
    EnableMigrationInputProperties: EnableMigrationInputProperties,
    EnableMigrationProviderSpecificInput: EnableMigrationProviderSpecificInput,
    EnableProtectionInput: EnableProtectionInput,
    EnableProtectionInputProperties: EnableProtectionInputProperties,
    EnableProtectionProviderSpecificInput: EnableProtectionProviderSpecificInput,
    EncryptionDetails: EncryptionDetails,
    ErrorAdditionalInfo: ErrorAdditionalInfo,
    ErrorDetail: ErrorDetail,
    ErrorResponse: ErrorResponse,
    Event: Event,
    EventCollection: EventCollection,
    EventProperties: EventProperties,
    EventProviderSpecificDetails: EventProviderSpecificDetails,
    EventQueryParameter: EventQueryParameter,
    EventSpecificDetails: EventSpecificDetails,
    ExistingProtectionProfile: ExistingProtectionProfile,
    ExistingRecoveryAvailabilitySet: ExistingRecoveryAvailabilitySet,
    ExistingRecoveryProximityPlacementGroup: ExistingRecoveryProximityPlacementGroup,
    ExistingRecoveryResourceGroup: ExistingRecoveryResourceGroup,
    ExistingRecoveryVirtualNetwork: ExistingRecoveryVirtualNetwork,
    ExistingStorageAccount: ExistingStorageAccount,
    ExportJobDetails: ExportJobDetails,
    ExtendedLocation: ExtendedLocation,
    Fabric: Fabric,
    FabricCollection: FabricCollection,
    FabricCreationInput: FabricCreationInput,
    FabricCreationInputProperties: FabricCreationInputProperties,
    FabricProperties: FabricProperties,
    FabricQueryParameter: FabricQueryParameter,
    FabricReplicationGroupTaskDetails: FabricReplicationGroupTaskDetails,
    FabricSpecificCreateNetworkMappingInput: FabricSpecificCreateNetworkMappingInput,
    FabricSpecificCreationInput: FabricSpecificCreationInput,
    FabricSpecificDetails: FabricSpecificDetails,
    FabricSpecificUpdateNetworkMappingInput: FabricSpecificUpdateNetworkMappingInput,
    FailoverJobDetails: FailoverJobDetails,
    FailoverProcessServerRequest: FailoverProcessServerRequest,
    FailoverProcessServerRequestProperties: FailoverProcessServerRequestProperties,
    FailoverReplicationProtectedItemDetails: FailoverReplicationProtectedItemDetails,
    GatewayOperationDetails: GatewayOperationDetails,
    GroupTaskDetails: GroupTaskDetails,
    HealthError: HealthError,
    HealthErrorSummary: HealthErrorSummary,
    HyperVHostDetails: HyperVHostDetails,
    HyperVReplica2012EventDetails: HyperVReplica2012EventDetails,
    HyperVReplica2012R2EventDetails: HyperVReplica2012R2EventDetails,
    HyperVReplicaAzureApplyRecoveryPointInput: HyperVReplicaAzureApplyRecoveryPointInput,
    HyperVReplicaAzureDiskInputDetails: HyperVReplicaAzureDiskInputDetails,
    HyperVReplicaAzureEnableProtectionInput: HyperVReplicaAzureEnableProtectionInput,
    HyperVReplicaAzureEventDetails: HyperVReplicaAzureEventDetails,
    HyperVReplicaAzureFailbackProviderInput: HyperVReplicaAzureFailbackProviderInput,
    HyperVReplicaAzureManagedDiskDetails: HyperVReplicaAzureManagedDiskDetails,
    HyperVReplicaAzurePlannedFailoverProviderInput: HyperVReplicaAzurePlannedFailoverProviderInput,
    HyperVReplicaAzurePolicyDetails: HyperVReplicaAzurePolicyDetails,
    HyperVReplicaAzurePolicyInput: HyperVReplicaAzurePolicyInput,
    HyperVReplicaAzureReplicationDetails: HyperVReplicaAzureReplicationDetails,
    HyperVReplicaAzureReprotectInput: HyperVReplicaAzureReprotectInput,
    HyperVReplicaAzureTestFailoverInput: HyperVReplicaAzureTestFailoverInput,
    HyperVReplicaAzureUnplannedFailoverInput: HyperVReplicaAzureUnplannedFailoverInput,
    HyperVReplicaAzureUpdateReplicationProtectedItemInput: HyperVReplicaAzureUpdateReplicationProtectedItemInput,
    HyperVReplicaBaseEventDetails: HyperVReplicaBaseEventDetails,
    HyperVReplicaBasePolicyDetails: HyperVReplicaBasePolicyDetails,
    HyperVReplicaBaseReplicationDetails: HyperVReplicaBaseReplicationDetails,
    HyperVReplicaBluePolicyDetails: HyperVReplicaBluePolicyDetails,
    HyperVReplicaBluePolicyInput: HyperVReplicaBluePolicyInput,
    HyperVReplicaBlueReplicationDetails: HyperVReplicaBlueReplicationDetails,
    HyperVReplicaPolicyDetails: HyperVReplicaPolicyDetails,
    HyperVReplicaPolicyInput: HyperVReplicaPolicyInput,
    HyperVReplicaReplicationDetails: HyperVReplicaReplicationDetails,
    HyperVSiteDetails: HyperVSiteDetails,
    HyperVVirtualMachineDetails: HyperVVirtualMachineDetails,
    IPConfigDetails: IPConfigDetails,
    IPConfigInputDetails: IPConfigInputDetails,
    IdentityProviderDetails: IdentityProviderDetails,
    IdentityProviderInput: IdentityProviderInput,
    InMageAgentDetails: InMageAgentDetails,
    InMageAzureV2ApplyRecoveryPointInput: InMageAzureV2ApplyRecoveryPointInput,
    InMageAzureV2DiskInputDetails: InMageAzureV2DiskInputDetails,
    InMageAzureV2EnableProtectionInput: InMageAzureV2EnableProtectionInput,
    InMageAzureV2EventDetails: InMageAzureV2EventDetails,
    InMageAzureV2ManagedDiskDetails: InMageAzureV2ManagedDiskDetails,
    InMageAzureV2PolicyDetails: InMageAzureV2PolicyDetails,
    InMageAzureV2PolicyInput: InMageAzureV2PolicyInput,
    InMageAzureV2ProtectedDiskDetails: InMageAzureV2ProtectedDiskDetails,
    InMageAzureV2RecoveryPointDetails: InMageAzureV2RecoveryPointDetails,
    InMageAzureV2ReplicationDetails: InMageAzureV2ReplicationDetails,
    InMageAzureV2ReprotectInput: InMageAzureV2ReprotectInput,
    InMageAzureV2SwitchProviderBlockingErrorDetails: InMageAzureV2SwitchProviderBlockingErrorDetails,
    InMageAzureV2SwitchProviderDetails: InMageAzureV2SwitchProviderDetails,
    InMageAzureV2SwitchProviderInput: InMageAzureV2SwitchProviderInput,
    InMageAzureV2TestFailoverInput: InMageAzureV2TestFailoverInput,
    InMageAzureV2UnplannedFailoverInput: InMageAzureV2UnplannedFailoverInput,
    InMageAzureV2UpdateReplicationProtectedItemInput: InMageAzureV2UpdateReplicationProtectedItemInput,
    InMageBasePolicyDetails: InMageBasePolicyDetails,
    InMageDisableProtectionProviderSpecificInput: InMageDisableProtectionProviderSpecificInput,
    InMageDiskDetails: InMageDiskDetails,
    InMageDiskExclusionInput: InMageDiskExclusionInput,
    InMageDiskSignatureExclusionOptions: InMageDiskSignatureExclusionOptions,
    InMageEnableProtectionInput: InMageEnableProtectionInput,
    InMageFabricSwitchProviderBlockingErrorDetails: InMageFabricSwitchProviderBlockingErrorDetails,
    InMagePolicyDetails: InMagePolicyDetails,
    InMagePolicyInput: InMagePolicyInput,
    InMageProtectedDiskDetails: InMageProtectedDiskDetails,
    InMageRcmAgentUpgradeBlockingErrorDetails: InMageRcmAgentUpgradeBlockingErrorDetails,
    InMageRcmApplianceDetails: InMageRcmApplianceDetails,
    InMageRcmApplianceSpecificDetails: InMageRcmApplianceSpecificDetails,
    InMageRcmApplyRecoveryPointInput: InMageRcmApplyRecoveryPointInput,
    InMageRcmDiscoveredProtectedVmDetails: InMageRcmDiscoveredProtectedVmDetails,
    InMageRcmDiskInput: InMageRcmDiskInput,
    InMageRcmDisksDefaultInput: InMageRcmDisksDefaultInput,
    InMageRcmEnableProtectionInput: InMageRcmEnableProtectionInput,
    InMageRcmEventDetails: InMageRcmEventDetails,
    InMageRcmFabricCreationInput: InMageRcmFabricCreationInput,
    InMageRcmFabricSpecificDetails: InMageRcmFabricSpecificDetails,
    InMageRcmFabricSwitchProviderBlockingErrorDetails: InMageRcmFabricSwitchProviderBlockingErrorDetails,
    InMageRcmFailbackDiscoveredProtectedVmDetails: InMageRcmFailbackDiscoveredProtectedVmDetails,
    InMageRcmFailbackEventDetails: InMageRcmFailbackEventDetails,
    InMageRcmFailbackMobilityAgentDetails: InMageRcmFailbackMobilityAgentDetails,
    InMageRcmFailbackNicDetails: InMageRcmFailbackNicDetails,
    InMageRcmFailbackPlannedFailoverProviderInput: InMageRcmFailbackPlannedFailoverProviderInput,
    InMageRcmFailbackPolicyCreationInput: InMageRcmFailbackPolicyCreationInput,
    InMageRcmFailbackPolicyDetails: InMageRcmFailbackPolicyDetails,
    InMageRcmFailbackProtectedDiskDetails: InMageRcmFailbackProtectedDiskDetails,
    InMageRcmFailbackReplicationDetails: InMageRcmFailbackReplicationDetails,
    InMageRcmFailbackReprotectInput: InMageRcmFailbackReprotectInput,
    InMageRcmFailbackSyncDetails: InMageRcmFailbackSyncDetails,
    InMageRcmLastAgentUpgradeErrorDetails: InMageRcmLastAgentUpgradeErrorDetails,
    InMageRcmMobilityAgentDetails: InMageRcmMobilityAgentDetails,
    InMageRcmNicDetails: InMageRcmNicDetails,
    InMageRcmNicInput: InMageRcmNicInput,
    InMageRcmPolicyCreationInput: InMageRcmPolicyCreationInput,
    InMageRcmPolicyDetails: InMageRcmPolicyDetails,
    InMageRcmProtectedDiskDetails: InMageRcmProtectedDiskDetails,
    InMageRcmProtectionContainerMappingDetails: InMageRcmProtectionContainerMappingDetails,
    InMageRcmRecoveryPointDetails: InMageRcmRecoveryPointDetails,
    InMageRcmReplicationDetails: InMageRcmReplicationDetails,
    InMageRcmReprotectInput: InMageRcmReprotectInput,
    InMageRcmSyncDetails: InMageRcmSyncDetails,
    InMageRcmTestFailoverInput: InMageRcmTestFailoverInput,
    InMageRcmUnplannedFailoverInput: InMageRcmUnplannedFailoverInput,
    InMageRcmUpdateApplianceForReplicationProtectedItemInput: InMageRcmUpdateApplianceForReplicationProtectedItemInput,
    InMageRcmUpdateContainerMappingInput: InMageRcmUpdateContainerMappingInput,
    InMageRcmUpdateReplicationProtectedItemInput: InMageRcmUpdateReplicationProtectedItemInput,
    InMageReplicationDetails: InMageReplicationDetails,
    InMageReprotectInput: InMageReprotectInput,
    InMageTestFailoverInput: InMageTestFailoverInput,
    InMageUnplannedFailoverInput: InMageUnplannedFailoverInput,
    InMageVolumeExclusionOptions: InMageVolumeExclusionOptions,
    InconsistentVmDetails: InconsistentVmDetails,
    InitialReplicationDetails: InitialReplicationDetails,
    InlineWorkflowTaskDetails: InlineWorkflowTaskDetails,
    InnerHealthError: InnerHealthError,
    InputEndpoint: InputEndpoint,
    Job: Job,
    JobCollection: JobCollection,
    JobDetails: JobDetails,
    JobEntity: JobEntity,
    JobErrorDetails: JobErrorDetails,
    JobProperties: JobProperties,
    JobQueryParameter: JobQueryParameter,
    JobStatusEventDetails: JobStatusEventDetails,
    JobTaskDetails: JobTaskDetails,
    KeyEncryptionKeyInfo: KeyEncryptionKeyInfo,
    LogicalNetwork: LogicalNetwork,
    LogicalNetworkCollection: LogicalNetworkCollection,
    LogicalNetworkProperties: LogicalNetworkProperties,
    ManualActionTaskDetails: ManualActionTaskDetails,
    MarsAgentDetails: MarsAgentDetails,
    MasterTargetServer: MasterTargetServer,
    MigrateInput: MigrateInput,
    MigrateInputProperties: MigrateInputProperties,
    MigrateProviderSpecificInput: MigrateProviderSpecificInput,
    MigrationItem: MigrationItem,
    MigrationItemCollection: MigrationItemCollection,
    MigrationItemProperties: MigrationItemProperties,
    MigrationItemsQueryParameter: MigrationItemsQueryParameter,
    MigrationProviderSpecificSettings: MigrationProviderSpecificSettings,
    MigrationRecoveryPoint: MigrationRecoveryPoint,
    MigrationRecoveryPointCollection: MigrationRecoveryPointCollection,
    MigrationRecoveryPointProperties: MigrationRecoveryPointProperties,
    MobilityServiceUpdate: MobilityServiceUpdate,
    Network: Network,
    NetworkCollection: NetworkCollection,
    NetworkMapping: NetworkMapping,
    NetworkMappingCollection: NetworkMappingCollection,
    NetworkMappingFabricSpecificSettings: NetworkMappingFabricSpecificSettings,
    NetworkMappingProperties: NetworkMappingProperties,
    NetworkProperties: NetworkProperties,
    NewProtectionProfile: NewProtectionProfile,
    NewRecoveryVirtualNetwork: NewRecoveryVirtualNetwork,
    OSDetails: OSDetails,
    OSDiskDetails: OSDiskDetails,
    OSUpgradeSupportedVersions: OSUpgradeSupportedVersions,
    OSVersionWrapper: OSVersionWrapper,
    OperationsDiscovery: OperationsDiscovery,
    OperationsDiscoveryCollection: OperationsDiscoveryCollection,
    PauseReplicationInput: PauseReplicationInput,
    PauseReplicationInputProperties: PauseReplicationInputProperties,
    PlannedFailoverInput: PlannedFailoverInput,
    PlannedFailoverInputProperties: PlannedFailoverInputProperties,
    PlannedFailoverProviderSpecificFailoverInput: PlannedFailoverProviderSpecificFailoverInput,
    Policy: Policy,
    PolicyCollection: PolicyCollection,
    PolicyProperties: PolicyProperties,
    PolicyProviderSpecificDetails: PolicyProviderSpecificDetails,
    PolicyProviderSpecificInput: PolicyProviderSpecificInput,
    ProcessServer: ProcessServer,
    ProcessServerDetails: ProcessServerDetails,
    ProtectableItem: ProtectableItem,
    ProtectableItemCollection: ProtectableItemCollection,
    ProtectableItemProperties: ProtectableItemProperties,
    ProtectableItemQueryParameter: ProtectableItemQueryParameter,
    ProtectedItemsQueryParameter: ProtectedItemsQueryParameter,
    ProtectionContainer: ProtectionContainer,
    ProtectionContainerCollection: ProtectionContainerCollection,
    ProtectionContainerFabricSpecificDetails: ProtectionContainerFabricSpecificDetails,
    ProtectionContainerMapping: ProtectionContainerMapping,
    ProtectionContainerMappingCollection: ProtectionContainerMappingCollection,
    ProtectionContainerMappingProperties: ProtectionContainerMappingProperties,
    ProtectionContainerMappingProviderSpecificDetails: ProtectionContainerMappingProviderSpecificDetails,
    ProtectionContainerProperties: ProtectionContainerProperties,
    ProtectionProfileCustomDetails: ProtectionProfileCustomDetails,
    ProviderError: ProviderError,
    ProviderSpecificRecoveryPointDetails: ProviderSpecificRecoveryPointDetails,
    PushInstallerDetails: PushInstallerDetails,
    RcmProxyDetails: RcmProxyDetails,
    RecoveryAvailabilitySetCustomDetails: RecoveryAvailabilitySetCustomDetails,
    RecoveryPlan: RecoveryPlan,
    RecoveryPlanA2ADetails: RecoveryPlanA2ADetails,
    RecoveryPlanA2AFailoverInput: RecoveryPlanA2AFailoverInput,
    RecoveryPlanA2AInput: RecoveryPlanA2AInput,
    RecoveryPlanAction: RecoveryPlanAction,
    RecoveryPlanActionDetails: RecoveryPlanActionDetails,
    RecoveryPlanAutomationRunbookActionDetails: RecoveryPlanAutomationRunbookActionDetails,
    RecoveryPlanCollection: RecoveryPlanCollection,
    RecoveryPlanGroup: RecoveryPlanGroup,
    RecoveryPlanGroupTaskDetails: RecoveryPlanGroupTaskDetails,
    RecoveryPlanHyperVReplicaAzureFailbackInput: RecoveryPlanHyperVReplicaAzureFailbackInput,
    RecoveryPlanHyperVReplicaAzureFailoverInput: RecoveryPlanHyperVReplicaAzureFailoverInput,
    RecoveryPlanInMageAzureV2FailoverInput: RecoveryPlanInMageAzureV2FailoverInput,
    RecoveryPlanInMageFailoverInput: RecoveryPlanInMageFailoverInput,
    RecoveryPlanInMageRcmFailbackFailoverInput: RecoveryPlanInMageRcmFailbackFailoverInput,
    RecoveryPlanInMageRcmFailoverInput: RecoveryPlanInMageRcmFailoverInput,
    RecoveryPlanManualActionDetails: RecoveryPlanManualActionDetails,
    RecoveryPlanPlannedFailoverInput: RecoveryPlanPlannedFailoverInput,
    RecoveryPlanPlannedFailoverInputProperties: RecoveryPlanPlannedFailoverInputProperties,
    RecoveryPlanProperties: RecoveryPlanProperties,
    RecoveryPlanProtectedItem: RecoveryPlanProtectedItem,
    RecoveryPlanProviderSpecificDetails: RecoveryPlanProviderSpecificDetails,
    RecoveryPlanProviderSpecificFailoverInput: RecoveryPlanProviderSpecificFailoverInput,
    RecoveryPlanProviderSpecificInput: RecoveryPlanProviderSpecificInput,
    RecoveryPlanScriptActionDetails: RecoveryPlanScriptActionDetails,
    RecoveryPlanShutdownGroupTaskDetails: RecoveryPlanShutdownGroupTaskDetails,
    RecoveryPlanTestFailoverCleanupInput: RecoveryPlanTestFailoverCleanupInput,
    RecoveryPlanTestFailoverCleanupInputProperties: RecoveryPlanTestFailoverCleanupInputProperties,
    RecoveryPlanTestFailoverInput: RecoveryPlanTestFailoverInput,
    RecoveryPlanTestFailoverInputProperties: RecoveryPlanTestFailoverInputProperties,
    RecoveryPlanUnplannedFailoverInput: RecoveryPlanUnplannedFailoverInput,
    RecoveryPlanUnplannedFailoverInputProperties: RecoveryPlanUnplannedFailoverInputProperties,
    RecoveryPoint: RecoveryPoint,
    RecoveryPointCollection: RecoveryPointCollection,
    RecoveryPointProperties: RecoveryPointProperties,
    RecoveryProximityPlacementGroupCustomDetails: RecoveryProximityPlacementGroupCustomDetails,
    RecoveryResourceGroupCustomDetails: RecoveryResourceGroupCustomDetails,
    RecoveryServicesProvider: RecoveryServicesProvider,
    RecoveryServicesProviderCollection: RecoveryServicesProviderCollection,
    RecoveryServicesProviderProperties: RecoveryServicesProviderProperties,
    RecoveryVirtualNetworkCustomDetails: RecoveryVirtualNetworkCustomDetails,
    RemoveDisksInput: RemoveDisksInput,
    RemoveDisksInputProperties: RemoveDisksInputProperties,
    RemoveDisksProviderSpecificInput: RemoveDisksProviderSpecificInput,
    RemoveProtectionContainerMappingInput: RemoveProtectionContainerMappingInput,
    RemoveProtectionContainerMappingInputProperties: RemoveProtectionContainerMappingInputProperties,
    RenewCertificateInput: RenewCertificateInput,
    RenewCertificateInputProperties: RenewCertificateInputProperties,
    ReplicationAgentDetails: ReplicationAgentDetails,
    ReplicationAppliance: ReplicationAppliance,
    ReplicationApplianceProperties: ReplicationApplianceProperties,
    ReplicationEligibilityResults: ReplicationEligibilityResults,
    ReplicationEligibilityResultsCollection: ReplicationEligibilityResultsCollection,
    ReplicationEligibilityResultsErrorInfo: ReplicationEligibilityResultsErrorInfo,
    ReplicationEligibilityResultsProperties: ReplicationEligibilityResultsProperties,
    ReplicationFabricsRemoveInfraHeaders: ReplicationFabricsRemoveInfraHeaders,
    ReplicationGroupDetails: ReplicationGroupDetails,
    ReplicationProtectedItem: ReplicationProtectedItem,
    ReplicationProtectedItemCollection: ReplicationProtectedItemCollection,
    ReplicationProtectedItemProperties: ReplicationProtectedItemProperties,
    ReplicationProtectedItemsUpdateMobilityServiceHeaders: ReplicationProtectedItemsUpdateMobilityServiceHeaders,
    ReplicationProtectionIntent: ReplicationProtectionIntent,
    ReplicationProtectionIntentCollection: ReplicationProtectionIntentCollection,
    ReplicationProtectionIntentProperties: ReplicationProtectionIntentProperties,
    ReplicationProtectionIntentProviderSpecificSettings: ReplicationProtectionIntentProviderSpecificSettings,
    ReplicationProviderContainerUnmappingInput: ReplicationProviderContainerUnmappingInput,
    ReplicationProviderSpecificContainerCreationInput: ReplicationProviderSpecificContainerCreationInput,
    ReplicationProviderSpecificContainerMappingInput: ReplicationProviderSpecificContainerMappingInput,
    ReplicationProviderSpecificSettings: ReplicationProviderSpecificSettings,
    ReplicationProviderSpecificUpdateContainerMappingInput: ReplicationProviderSpecificUpdateContainerMappingInput,
    ReprotectAgentDetails: ReprotectAgentDetails,
    ResolveHealthError: ResolveHealthError,
    ResolveHealthInput: ResolveHealthInput,
    ResolveHealthInputProperties: ResolveHealthInputProperties,
    Resource: Resource,
    ResourceHealthSummary: ResourceHealthSummary,
    ResumeJobParams: ResumeJobParams,
    ResumeJobParamsProperties: ResumeJobParamsProperties,
    ResumeReplicationInput: ResumeReplicationInput,
    ResumeReplicationInputProperties: ResumeReplicationInputProperties,
    ResumeReplicationProviderSpecificInput: ResumeReplicationProviderSpecificInput,
    ResyncInput: ResyncInput,
    ResyncInputProperties: ResyncInputProperties,
    ResyncProviderSpecificInput: ResyncProviderSpecificInput,
    RetentionVolume: RetentionVolume,
    ReverseReplicationInput: ReverseReplicationInput,
    ReverseReplicationInputProperties: ReverseReplicationInputProperties,
    ReverseReplicationProviderSpecificInput: ReverseReplicationProviderSpecificInput,
    RoleAssignment: RoleAssignment,
    RunAsAccount: RunAsAccount,
    ScriptActionTaskDetails: ScriptActionTaskDetails,
    ServiceError: ServiceError,
    StorageAccountCustomDetails: StorageAccountCustomDetails,
    StorageClassification: StorageClassification,
    StorageClassificationCollection: StorageClassificationCollection,
    StorageClassificationMapping: StorageClassificationMapping,
    StorageClassificationMappingCollection: StorageClassificationMappingCollection,
    StorageClassificationMappingInput: StorageClassificationMappingInput,
    StorageClassificationMappingProperties: StorageClassificationMappingProperties,
    StorageClassificationProperties: StorageClassificationProperties,
    StorageMappingInputProperties: StorageMappingInputProperties,
    Subnet: Subnet,
    SupportedOSDetails: SupportedOSDetails,
    SupportedOSProperties: SupportedOSProperties,
    SupportedOSProperty: SupportedOSProperty,
    SupportedOperatingSystems: SupportedOperatingSystems,
    SwitchProtectionInput: SwitchProtectionInput,
    SwitchProtectionInputProperties: SwitchProtectionInputProperties,
    SwitchProtectionJobDetails: SwitchProtectionJobDetails,
    SwitchProtectionProviderSpecificInput: SwitchProtectionProviderSpecificInput,
    SwitchProviderInput: SwitchProviderInput,
    SwitchProviderInputProperties: SwitchProviderInputProperties,
    SwitchProviderSpecificInput: SwitchProviderSpecificInput,
    TargetComputeSize: TargetComputeSize,
    TargetComputeSizeCollection: TargetComputeSizeCollection,
    TargetComputeSizeProperties: TargetComputeSizeProperties,
    TaskTypeDetails: TaskTypeDetails,
    TestFailoverCleanupInput: TestFailoverCleanupInput,
    TestFailoverCleanupInputProperties: TestFailoverCleanupInputProperties,
    TestFailoverInput: TestFailoverInput,
    TestFailoverInputProperties: TestFailoverInputProperties,
    TestFailoverJobDetails: TestFailoverJobDetails,
    TestFailoverProviderSpecificInput: TestFailoverProviderSpecificInput,
    TestMigrateCleanupInput: TestMigrateCleanupInput,
    TestMigrateCleanupInputProperties: TestMigrateCleanupInputProperties,
    TestMigrateInput: TestMigrateInput,
    TestMigrateInputProperties: TestMigrateInputProperties,
    TestMigrateProviderSpecificInput: TestMigrateProviderSpecificInput,
    UnplannedFailoverInput: UnplannedFailoverInput,
    UnplannedFailoverInputProperties: UnplannedFailoverInputProperties,
    UnplannedFailoverProviderSpecificInput: UnplannedFailoverProviderSpecificInput,
    UpdateApplianceForReplicationProtectedItemInput: UpdateApplianceForReplicationProtectedItemInput,
    UpdateApplianceForReplicationProtectedItemInputProperties: UpdateApplianceForReplicationProtectedItemInputProperties,
    UpdateApplianceForReplicationProtectedItemProviderSpecificInput: UpdateApplianceForReplicationProtectedItemProviderSpecificInput,
    UpdateDiskInput: UpdateDiskInput,
    UpdateMigrationItemInput: UpdateMigrationItemInput,
    UpdateMigrationItemInputProperties: UpdateMigrationItemInputProperties,
    UpdateMigrationItemProviderSpecificInput: UpdateMigrationItemProviderSpecificInput,
    UpdateMobilityServiceRequest: UpdateMobilityServiceRequest,
    UpdateMobilityServiceRequestProperties: UpdateMobilityServiceRequestProperties,
    UpdateNetworkMappingInput: UpdateNetworkMappingInput,
    UpdateNetworkMappingInputProperties: UpdateNetworkMappingInputProperties,
    UpdatePolicyInput: UpdatePolicyInput,
    UpdatePolicyInputProperties: UpdatePolicyInputProperties,
    UpdateProtectionContainerMappingInput: UpdateProtectionContainerMappingInput,
    UpdateProtectionContainerMappingInputProperties: UpdateProtectionContainerMappingInputProperties,
    UpdateRecoveryPlanInput: UpdateRecoveryPlanInput,
    UpdateRecoveryPlanInputProperties: UpdateRecoveryPlanInputProperties,
    UpdateReplicationProtectedItemInput: UpdateReplicationProtectedItemInput,
    UpdateReplicationProtectedItemInputProperties: UpdateReplicationProtectedItemInputProperties,
    UpdateReplicationProtectedItemProviderInput: UpdateReplicationProtectedItemProviderInput,
    UpdateVCenterRequest: UpdateVCenterRequest,
    UpdateVCenterRequestProperties: UpdateVCenterRequestProperties,
    VCenter: VCenter,
    VCenterCollection: VCenterCollection,
    VCenterProperties: VCenterProperties,
    VMNicDetails: VMNicDetails,
    VMNicInputDetails: VMNicInputDetails,
    VMwareCbtContainerCreationInput: VMwareCbtContainerCreationInput,
    VMwareCbtContainerMappingInput: VMwareCbtContainerMappingInput,
    VMwareCbtDiskInput: VMwareCbtDiskInput,
    VMwareCbtEnableMigrationInput: VMwareCbtEnableMigrationInput,
    VMwareCbtEventDetails: VMwareCbtEventDetails,
    VMwareCbtMigrateInput: VMwareCbtMigrateInput,
    VMwareCbtMigrationDetails: VMwareCbtMigrationDetails,
    VMwareCbtNicDetails: VMwareCbtNicDetails,
    VMwareCbtNicInput: VMwareCbtNicInput,
    VMwareCbtPolicyCreationInput: VMwareCbtPolicyCreationInput,
    VMwareCbtProtectedDiskDetails: VMwareCbtProtectedDiskDetails,
    VMwareCbtProtectionContainerMappingDetails: VMwareCbtProtectionContainerMappingDetails,
    VMwareCbtResumeReplicationInput: VMwareCbtResumeReplicationInput,
    VMwareCbtResyncInput: VMwareCbtResyncInput,
    VMwareCbtSecurityProfileProperties: VMwareCbtSecurityProfileProperties,
    VMwareCbtTestMigrateInput: VMwareCbtTestMigrateInput,
    VMwareCbtUpdateDiskInput: VMwareCbtUpdateDiskInput,
    VMwareCbtUpdateMigrationItemInput: VMwareCbtUpdateMigrationItemInput,
    VMwareDetails: VMwareDetails,
    VMwareV2FabricCreationInput: VMwareV2FabricCreationInput,
    VMwareV2FabricSpecificDetails: VMwareV2FabricSpecificDetails,
    VMwareVirtualMachineDetails: VMwareVirtualMachineDetails,
    VaultHealthDetails: VaultHealthDetails,
    VaultHealthProperties: VaultHealthProperties,
    VaultSetting: VaultSetting,
    VaultSettingCollection: VaultSettingCollection,
    VaultSettingCreationInput: VaultSettingCreationInput,
    VaultSettingCreationInputProperties: VaultSettingCreationInputProperties,
    VaultSettingProperties: VaultSettingProperties,
    VersionDetails: VersionDetails,
    VirtualMachineTaskDetails: VirtualMachineTaskDetails,
    VmNicUpdatesTaskDetails: VmNicUpdatesTaskDetails,
    VmmDetails: VmmDetails,
    VmmToAzureCreateNetworkMappingInput: VmmToAzureCreateNetworkMappingInput,
    VmmToAzureNetworkMappingSettings: VmmToAzureNetworkMappingSettings,
    VmmToAzureUpdateNetworkMappingInput: VmmToAzureUpdateNetworkMappingInput,
    VmmToVmmCreateNetworkMappingInput: VmmToVmmCreateNetworkMappingInput,
    VmmToVmmNetworkMappingSettings: VmmToVmmNetworkMappingSettings,
    VmmToVmmUpdateNetworkMappingInput: VmmToVmmUpdateNetworkMappingInput,
    VmmVirtualMachineDetails: VmmVirtualMachineDetails,
    VmwareCbtPolicyDetails: VmwareCbtPolicyDetails,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-08-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String",
        },
    },
};
const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
const resourceName = {
    parameterPath: "resourceName",
    mapper: {
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const alertSettingName = {
    parameterPath: "alertSettingName",
    mapper: {
        serializedName: "alertSettingName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
const request = {
    parameterPath: "request",
    mapper: ConfigureAlertRequest,
};
const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String",
        },
    },
};
const virtualMachineName = {
    parameterPath: "virtualMachineName",
    mapper: {
        serializedName: "virtualMachineName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const eventName = {
    parameterPath: "eventName",
    mapper: {
        serializedName: "eventName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const fabricName = {
    parameterPath: "fabricName",
    mapper: {
        serializedName: "fabricName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const input = {
    parameterPath: "input",
    mapper: FabricCreationInput,
};
const failoverProcessServerRequest = {
    parameterPath: "failoverProcessServerRequest",
    mapper: FailoverProcessServerRequest,
};
const renewCertificate = {
    parameterPath: "renewCertificate",
    mapper: RenewCertificateInput,
};
const resourceName1 = {
    parameterPath: "resourceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9]$"),
        },
        serializedName: "resourceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const fabricName1 = {
    parameterPath: "fabricName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9][A-Za-z0-9-]*[A-Za-z0-9]$"),
        },
        serializedName: "fabricName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const logicalNetworkName = {
    parameterPath: "logicalNetworkName",
    mapper: {
        serializedName: "logicalNetworkName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const networkName = {
    parameterPath: "networkName",
    mapper: {
        serializedName: "networkName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const networkMappingName = {
    parameterPath: "networkMappingName",
    mapper: {
        serializedName: "networkMappingName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const input1 = {
    parameterPath: "input",
    mapper: CreateNetworkMappingInput,
};
const input2 = {
    parameterPath: "input",
    mapper: UpdateNetworkMappingInput,
};
const protectionContainerName = {
    parameterPath: "protectionContainerName",
    mapper: {
        serializedName: "protectionContainerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const creationInput = {
    parameterPath: "creationInput",
    mapper: CreateProtectionContainerInput,
};
const discoverProtectableItemRequest = {
    parameterPath: "discoverProtectableItemRequest",
    mapper: DiscoverProtectableItemRequest,
};
const switchInput = {
    parameterPath: "switchInput",
    mapper: SwitchProtectionInput,
};
const skipToken = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "skipToken",
        type: {
            name: "String",
        },
    },
};
const takeToken = {
    parameterPath: ["options", "takeToken"],
    mapper: {
        serializedName: "takeToken",
        type: {
            name: "String",
        },
    },
};
const migrationItemName = {
    parameterPath: "migrationItemName",
    mapper: {
        serializedName: "migrationItemName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const input3 = {
    parameterPath: "input",
    mapper: EnableMigrationInput,
};
const deleteOption = {
    parameterPath: ["options", "deleteOption"],
    mapper: {
        serializedName: "deleteOption",
        type: {
            name: "String",
        },
    },
};
const input4 = {
    parameterPath: "input",
    mapper: UpdateMigrationItemInput,
};
const migrateInput = {
    parameterPath: "migrateInput",
    mapper: MigrateInput,
};
const pauseReplicationInput = {
    parameterPath: "pauseReplicationInput",
    mapper: PauseReplicationInput,
};
const resumeReplicationInput = {
    parameterPath: "resumeReplicationInput",
    mapper: ResumeReplicationInput,
};
const input5 = {
    parameterPath: "input",
    mapper: ResyncInput,
};
const testMigrateInput = {
    parameterPath: "testMigrateInput",
    mapper: TestMigrateInput,
};
const testMigrateCleanupInput = {
    parameterPath: "testMigrateCleanupInput",
    mapper: TestMigrateCleanupInput,
};
const migrationRecoveryPointName = {
    parameterPath: "migrationRecoveryPointName",
    mapper: {
        serializedName: "migrationRecoveryPointName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const take = {
    parameterPath: ["options", "take"],
    mapper: {
        serializedName: "$take",
        type: {
            name: "String",
        },
    },
};
const skipToken1 = {
    parameterPath: ["options", "skipToken"],
    mapper: {
        serializedName: "$skipToken",
        type: {
            name: "String",
        },
    },
};
const protectableItemName = {
    parameterPath: "protectableItemName",
    mapper: {
        serializedName: "protectableItemName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const replicatedProtectedItemName = {
    parameterPath: "replicatedProtectedItemName",
    mapper: {
        serializedName: "replicatedProtectedItemName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const input6 = {
    parameterPath: "input",
    mapper: EnableProtectionInput,
};
const updateProtectionInput = {
    parameterPath: "updateProtectionInput",
    mapper: UpdateReplicationProtectedItemInput,
};
const addDisksInput = {
    parameterPath: "addDisksInput",
    mapper: AddDisksInput,
};
const applyRecoveryPointInput = {
    parameterPath: "applyRecoveryPointInput",
    mapper: ApplyRecoveryPointInput,
};
const failoverInput = {
    parameterPath: "failoverInput",
    mapper: PlannedFailoverInput,
};
const disableProtectionInput = {
    parameterPath: "disableProtectionInput",
    mapper: DisableProtectionInput,
};
const removeDisksInput = {
    parameterPath: "removeDisksInput",
    mapper: RemoveDisksInput,
};
const reprotectInput = {
    parameterPath: "reprotectInput",
    mapper: ReverseReplicationInput,
};
const resolveHealthInput = {
    parameterPath: "resolveHealthInput",
    mapper: ResolveHealthInput,
};
const switchProviderInput = {
    parameterPath: "switchProviderInput",
    mapper: SwitchProviderInput,
};
const testfailoverInput = {
    parameterPath: "testfailoverInput",
    mapper: TestFailoverInput,
};
const cleanupInput = {
    parameterPath: "cleanupInput",
    mapper: TestFailoverCleanupInput,
};
const failoverInput1 = {
    parameterPath: "failoverInput",
    mapper: UnplannedFailoverInput,
};
const applianceUpdateInput = {
    parameterPath: "applianceUpdateInput",
    mapper: UpdateApplianceForReplicationProtectedItemInput,
};
const updateMobilityServiceRequest = {
    parameterPath: "updateMobilityServiceRequest",
    mapper: UpdateMobilityServiceRequest,
};
const recoveryPointName = {
    parameterPath: "recoveryPointName",
    mapper: {
        serializedName: "recoveryPointName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const mappingName = {
    parameterPath: "mappingName",
    mapper: {
        serializedName: "mappingName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const creationInput1 = {
    parameterPath: "creationInput",
    mapper: CreateProtectionContainerMappingInput,
};
const updateInput = {
    parameterPath: "updateInput",
    mapper: UpdateProtectionContainerMappingInput,
};
const removalInput = {
    parameterPath: "removalInput",
    mapper: RemoveProtectionContainerMappingInput,
};
const providerName = {
    parameterPath: "providerName",
    mapper: {
        serializedName: "providerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const addProviderInput = {
    parameterPath: "addProviderInput",
    mapper: AddRecoveryServicesProviderInput,
};
const storageClassificationName = {
    parameterPath: "storageClassificationName",
    mapper: {
        serializedName: "storageClassificationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const storageClassificationMappingName = {
    parameterPath: "storageClassificationMappingName",
    mapper: {
        serializedName: "storageClassificationMappingName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const pairingInput = {
    parameterPath: "pairingInput",
    mapper: StorageClassificationMappingInput,
};
const vcenterName = {
    parameterPath: "vcenterName",
    mapper: {
        serializedName: "vcenterName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const addVCenterRequest = {
    parameterPath: "addVCenterRequest",
    mapper: AddVCenterRequest,
};
const updateVCenterRequest = {
    parameterPath: "updateVCenterRequest",
    mapper: UpdateVCenterRequest,
};
const jobName = {
    parameterPath: "jobName",
    mapper: {
        serializedName: "jobName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const resumeJobParams = {
    parameterPath: "resumeJobParams",
    mapper: ResumeJobParams,
};
const jobQueryParameter = {
    parameterPath: "jobQueryParameter",
    mapper: JobQueryParameter,
};
const policyName = {
    parameterPath: "policyName",
    mapper: {
        serializedName: "policyName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const input7 = {
    parameterPath: "input",
    mapper: CreatePolicyInput,
};
const input8 = {
    parameterPath: "input",
    mapper: UpdatePolicyInput,
};
const intentObjectName = {
    parameterPath: "intentObjectName",
    mapper: {
        serializedName: "intentObjectName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const input9 = {
    parameterPath: "input",
    mapper: CreateProtectionIntentInput,
};
const recoveryPlanName = {
    parameterPath: "recoveryPlanName",
    mapper: {
        serializedName: "recoveryPlanName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const input10 = {
    parameterPath: "input",
    mapper: CreateRecoveryPlanInput,
};
const input11 = {
    parameterPath: "input",
    mapper: UpdateRecoveryPlanInput,
};
const input12 = {
    parameterPath: "input",
    mapper: RecoveryPlanPlannedFailoverInput,
};
const input13 = {
    parameterPath: "input",
    mapper: RecoveryPlanTestFailoverInput,
};
const input14 = {
    parameterPath: "input",
    mapper: RecoveryPlanTestFailoverCleanupInput,
};
const input15 = {
    parameterPath: "input",
    mapper: RecoveryPlanUnplannedFailoverInput,
};
const instanceType = {
    parameterPath: ["options", "instanceType"],
    mapper: {
        serializedName: "instanceType",
        type: {
            name: "String",
        },
    },
};
const vaultSettingName = {
    parameterPath: "vaultSettingName",
    mapper: {
        serializedName: "vaultSettingName",
        required: true,
        type: {
            name: "String",
        },
    },
};
const input16 = {
    parameterPath: "input",
    mapper: VaultSettingCreationInput,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Operations operations. */
class OperationsImpl {
    /**
     * Initialize a new instance of the class Operations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Operation to return the list of available operations.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceGroupName, options) {
        const iter = this.listPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Operation to return the list of available operations.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listOperationSpec$k);
    }
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, listNextOperationSpec$j);
    }
}
// Operation Specifications
const serializer$r = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$k = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/operations",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationsDiscoveryCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
    ],
    headerParameters: [accept],
    serializer: serializer$r,
};
const listNextOperationSpec$j = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: OperationsDiscoveryCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
    ],
    headerParameters: [accept],
    serializer: serializer$r,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationAlertSettings operations. */
class ReplicationAlertSettingsImpl {
    /**
     * Initialize a new instance of the class ReplicationAlertSettings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of email notification(alert) configurations for the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of email notification(alert) configurations for the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$j);
    }
    /**
     * Gets the details of the specified email notification(alert) configuration.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param alertSettingName The name of the email notification configuration.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, alertSettingName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, alertSettingName, options }, getOperationSpec$o);
    }
    /**
     * Create or update an email notification(alert) configuration.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param alertSettingName The name of the email notification(alert) configuration.
     * @param request The input to configure the email notification(alert).
     * @param options The options parameters.
     */
    create(resourceName, resourceGroupName, alertSettingName, request, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, alertSettingName, request, options }, createOperationSpec$d);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$i);
    }
}
// Operation Specifications
const serializer$q = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$j = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAlertSettings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AlertCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$q,
};
const getOperationSpec$o = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAlertSettings/{alertSettingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Alert,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        alertSettingName,
    ],
    headerParameters: [accept],
    serializer: serializer$q,
};
const createOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAlertSettings/{alertSettingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Alert,
        },
    },
    requestBody: request,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        alertSettingName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$q,
};
const listNextOperationSpec$i = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: AlertCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$q,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationAppliances operations. */
class ReplicationAppliancesImpl {
    /**
     * Initialize a new instance of the class ReplicationAppliances class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of Azure Site Recovery appliances for the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of Azure Site Recovery appliances for the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$i);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$h);
    }
}
// Operation Specifications
const serializer$p = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationAppliances",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplianceCollection,
        },
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$p,
};
const listNextOperationSpec$h = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ApplianceCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$p,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ReplicationEligibilityResultsOperations operations. */
class ReplicationEligibilityResultsOperationsImpl {
    /**
     * Initialize a new instance of the class ReplicationEligibilityResultsOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Validates whether a given VM can be protected or not in which case returns list of errors.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param virtualMachineName Virtual Machine name.
     * @param options The options parameters.
     */
    list(resourceGroupName, virtualMachineName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, virtualMachineName, options }, listOperationSpec$h);
    }
    /**
     * Validates whether a given VM can be protected or not in which case returns list of errors.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param virtualMachineName Virtual Machine name.
     * @param options The options parameters.
     */
    get(resourceGroupName, virtualMachineName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, virtualMachineName, options }, getOperationSpec$n);
    }
}
// Operation Specifications
const serializer$o = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}/providers/Microsoft.RecoveryServices/replicationEligibilityResults",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationEligibilityResultsCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        virtualMachineName,
    ],
    headerParameters: [accept],
    serializer: serializer$o,
};
const getOperationSpec$n = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/virtualMachines/{virtualMachineName}/providers/Microsoft.RecoveryServices/replicationEligibilityResults/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationEligibilityResults,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        virtualMachineName,
    ],
    headerParameters: [accept],
    serializer: serializer$o,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationEvents operations. */
class ReplicationEventsImpl {
    /**
     * Initialize a new instance of the class ReplicationEvents class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of Azure Site Recovery events for the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of Azure Site Recovery events for the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$g);
    }
    /**
     * The operation to get the details of an Azure Site recovery event.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param eventName The name of the Azure Site Recovery event.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, eventName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, eventName, options }, getOperationSpec$m);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$g);
    }
}
// Operation Specifications
const serializer$n = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationEvents",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventCollection,
        },
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$n,
};
const getOperationSpec$m = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationEvents/{eventName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Event,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        eventName,
    ],
    headerParameters: [accept],
    serializer: serializer$n,
};
const listNextOperationSpec$g = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: EventCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$n,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
function createLroSpec(inputs) {
    const { args, spec, sendOperationFn } = inputs;
    return {
        requestMethod: spec.httpMethod,
        requestPath: spec.path,
        sendInitialRequest: () => sendOperationFn(args, spec),
        sendPollRequest: (path, options) => {
            const restSpec = tslib.__rest(spec, ["requestBody"]);
            return sendOperationFn(args, Object.assign(Object.assign({}, restSpec), { httpMethod: "GET", path, abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal }));
        },
    };
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationFabrics operations. */
class ReplicationFabricsImpl {
    /**
     * Initialize a new instance of the class ReplicationFabrics class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets a list of the Azure Site Recovery fabrics in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$f);
    }
    /**
     * Gets the details of an Azure Site Recovery fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, options }, getOperationSpec$l);
    }
    /**
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Name of the ASR fabric.
     * @param input Fabric creation input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, fabricName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, fabricName, input, options },
                spec: createOperationSpec$c,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Name of the ASR fabric.
     * @param input Fabric creation input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, fabricName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, fabricName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName ASR fabric to purge.
     * @param options The options parameters.
     */
    beginPurge(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, fabricName, options },
                spec: purgeOperationSpec$3,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to purge(force delete) an Azure Site Recovery fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName ASR fabric to purge.
     * @param options The options parameters.
     */
    beginPurgeAndWait(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPurge(resourceName, resourceGroupName, fabricName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to perform a consistency check on the fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    beginCheckConsistency(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, fabricName, options },
                spec: checkConsistencyOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to perform a consistency check on the fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    beginCheckConsistencyAndWait(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCheckConsistency(resourceName, resourceGroupName, fabricName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName ASR fabric to migrate.
     * @param options The options parameters.
     */
    beginMigrateToAad(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, fabricName, options },
                spec: migrateToAadOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to migrate an Azure Site Recovery fabric to AAD.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName ASR fabric to migrate.
     * @param options The options parameters.
     */
    beginMigrateToAadAndWait(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMigrateToAad(resourceName, resourceGroupName, fabricName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to move replications from a process server to another process server.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The name of the fabric containing the process server.
     * @param failoverProcessServerRequest The input to the failover process server operation.
     * @param options The options parameters.
     */
    beginReassociateGateway(resourceName, resourceGroupName, fabricName, failoverProcessServerRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    failoverProcessServerRequest,
                    options,
                },
                spec: reassociateGatewayOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to move replications from a process server to another process server.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The name of the fabric containing the process server.
     * @param failoverProcessServerRequest The input to the failover process server operation.
     * @param options The options parameters.
     */
    beginReassociateGatewayAndWait(resourceName, resourceGroupName, fabricName, failoverProcessServerRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginReassociateGateway(resourceName, resourceGroupName, fabricName, failoverProcessServerRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to delete or remove an Azure Site Recovery fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName ASR fabric to delete.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, fabricName, options },
                spec: deleteOperationSpec$a,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to delete or remove an Azure Site Recovery fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName ASR fabric to delete.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, fabricName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Renews the connection certificate for the ASR replication fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName fabric name to renew certs for.
     * @param renewCertificate Renew certificate input.
     * @param options The options parameters.
     */
    beginRenewCertificate(resourceName, resourceGroupName, fabricName, renewCertificate, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    renewCertificate,
                    options,
                },
                spec: renewCertificateOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Renews the connection certificate for the ASR replication fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName fabric name to renew certs for.
     * @param renewCertificate Renew certificate input.
     * @param options The options parameters.
     */
    beginRenewCertificateAndWait(resourceName, resourceGroupName, fabricName, renewCertificate, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRenewCertificate(resourceName, resourceGroupName, fabricName, renewCertificate, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Removes the appliance's infrastructure under the fabric.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param resourceName Resource name.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    beginRemoveInfra(resourceGroupName, resourceName, fabricName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceGroupName, resourceName, fabricName, options },
                spec: removeInfraOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Removes the appliance's infrastructure under the fabric.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param resourceName Resource name.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    beginRemoveInfraAndWait(resourceGroupName, resourceName, fabricName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRemoveInfra(resourceGroupName, resourceName, fabricName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$f);
    }
}
// Operation Specifications
const serializer$m = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FabricCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$m,
};
const getOperationSpec$l = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Fabric,
        },
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$m,
};
const createOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Fabric,
        },
        201: {
            bodyMapper: Fabric,
        },
        202: {
            bodyMapper: Fabric,
        },
        204: {
            bodyMapper: Fabric,
        },
    },
    requestBody: input,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$m,
};
const purgeOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    serializer: serializer$m,
};
const checkConsistencyOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/checkConsistency",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Fabric,
        },
        201: {
            bodyMapper: Fabric,
        },
        202: {
            bodyMapper: Fabric,
        },
        204: {
            bodyMapper: Fabric,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$m,
};
const migrateToAadOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/migratetoaad",
    httpMethod: "POST",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    serializer: serializer$m,
};
const reassociateGatewayOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/reassociateGateway",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Fabric,
        },
        201: {
            bodyMapper: Fabric,
        },
        202: {
            bodyMapper: Fabric,
        },
        204: {
            bodyMapper: Fabric,
        },
    },
    requestBody: failoverProcessServerRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$m,
};
const deleteOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/remove",
    httpMethod: "POST",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    serializer: serializer$m,
};
const renewCertificateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/renewCertificate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Fabric,
        },
        201: {
            bodyMapper: Fabric,
        },
        202: {
            bodyMapper: Fabric,
        },
        204: {
            bodyMapper: Fabric,
        },
    },
    requestBody: renewCertificate,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$m,
};
const removeInfraOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/removeInfra",
    httpMethod: "POST",
    responses: {
        200: {
            headersMapper: ReplicationFabricsRemoveInfraHeaders,
        },
        201: {
            headersMapper: ReplicationFabricsRemoveInfraHeaders,
        },
        202: {
            headersMapper: ReplicationFabricsRemoveInfraHeaders,
        },
        204: {
            headersMapper: ReplicationFabricsRemoveInfraHeaders,
        },
        default: {
            bodyMapper: ErrorResponse,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName1,
        fabricName1,
    ],
    headerParameters: [accept],
    serializer: serializer$m,
};
const listNextOperationSpec$f = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: FabricCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$m,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationLogicalNetworks operations. */
class ReplicationLogicalNetworksImpl {
    /**
     * Initialize a new instance of the class ReplicationLogicalNetworks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all the logical networks of the Azure Site Recovery fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Server Id.
     * @param options The options parameters.
     */
    listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        const iter = this.listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings);
            },
        };
    }
    listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all the logical networks of the Azure Site Recovery fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Server Id.
     * @param options The options parameters.
     */
    _listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, options }, listByReplicationFabricsOperationSpec$5);
    }
    /**
     * Gets the details of a logical network.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Server Id.
     * @param logicalNetworkName Logical network name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, logicalNetworkName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            logicalNetworkName,
            options,
        }, getOperationSpec$k);
    }
    /**
     * ListByReplicationFabricsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Server Id.
     * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
     *                 method.
     * @param options The options parameters.
     */
    _listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, nextLink, options }, listByReplicationFabricsNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$l = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationFabricsOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationLogicalNetworks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogicalNetworkCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$l,
};
const getOperationSpec$k = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationLogicalNetworks/{logicalNetworkName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogicalNetwork,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        logicalNetworkName,
    ],
    headerParameters: [accept],
    serializer: serializer$l,
};
const listByReplicationFabricsNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: LogicalNetworkCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$l,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationNetworks operations. */
class ReplicationNetworksImpl {
    /**
     * Initialize a new instance of the class ReplicationNetworks class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the networks available for a fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        const iter = this.listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings);
            },
        };
    }
    listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the networks available in a vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the networks available for a fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    _listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, options }, listByReplicationFabricsOperationSpec$4);
    }
    /**
     * Gets the details of a network.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Server Id.
     * @param networkName Primary network name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, networkName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, networkName, options }, getOperationSpec$j);
    }
    /**
     * Lists the networks available in a vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$e);
    }
    /**
     * ListByReplicationFabricsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
     *                 method.
     * @param options The options parameters.
     */
    _listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, nextLink, options }, listByReplicationFabricsNextOperationSpec$4);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$e);
    }
}
// Operation Specifications
const serializer$k = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationFabricsOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$k,
};
const getOperationSpec$j = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Network,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        networkName,
    ],
    headerParameters: [accept],
    serializer: serializer$k,
};
const listOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$k,
};
const listByReplicationFabricsNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$k,
};
const listNextOperationSpec$e = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$k,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationNetworkMappings operations. */
class ReplicationNetworkMappingsImpl {
    /**
     * Initialize a new instance of the class ReplicationNetworkMappings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all ASR network mappings for the specified network.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param options The options parameters.
     */
    listByReplicationNetworks(resourceName, resourceGroupName, fabricName, networkName, options) {
        const iter = this.listByReplicationNetworksPagingAll(resourceName, resourceGroupName, fabricName, networkName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationNetworksPagingPage(resourceName, resourceGroupName, fabricName, networkName, options, settings);
            },
        };
    }
    listByReplicationNetworksPagingPage(resourceName, resourceGroupName, fabricName, networkName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationNetworksPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationNetworks(resourceName, resourceGroupName, fabricName, networkName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationNetworksNext(resourceName, resourceGroupName, fabricName, networkName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationNetworksPagingAll(resourceName, resourceGroupName, fabricName, networkName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationNetworksPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationNetworksPagingPage(resourceName, resourceGroupName, fabricName, networkName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all ASR network mappings in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists all ASR network mappings for the specified network.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param options The options parameters.
     */
    _listByReplicationNetworks(resourceName, resourceGroupName, fabricName, networkName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, networkName, options }, listByReplicationNetworksOperationSpec);
    }
    /**
     * Gets the details of an ASR network mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, networkName, networkMappingName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            networkName,
            networkMappingName,
            options,
        }, getOperationSpec$i);
    }
    /**
     * The operation to create an ASR network mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param input Create network mapping input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, fabricName, networkName, networkMappingName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    networkName,
                    networkMappingName,
                    input,
                    options,
                },
                spec: createOperationSpec$b,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to create an ASR network mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param input Create network mapping input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, fabricName, networkName, networkMappingName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, fabricName, networkName, networkMappingName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to delete a network mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName ARM Resource Name for network mapping.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, fabricName, networkName, networkMappingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    networkName,
                    networkMappingName,
                    options,
                },
                spec: deleteOperationSpec$9,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to delete a network mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName ARM Resource Name for network mapping.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, fabricName, networkName, networkMappingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, fabricName, networkName, networkMappingName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to update an ASR network mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param input Update network mapping input.
     * @param options The options parameters.
     */
    beginUpdate(resourceName, resourceGroupName, fabricName, networkName, networkMappingName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    networkName,
                    networkMappingName,
                    input,
                    options,
                },
                spec: updateOperationSpec$6,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to update an ASR network mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param networkMappingName Network mapping name.
     * @param input Update network mapping input.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceName, resourceGroupName, fabricName, networkName, networkMappingName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceName, resourceGroupName, fabricName, networkName, networkMappingName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists all ASR network mappings in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$d);
    }
    /**
     * ListByReplicationNetworksNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Primary fabric name.
     * @param networkName Primary network name.
     * @param nextLink The nextLink from the previous successful call to the ListByReplicationNetworks
     *                 method.
     * @param options The options parameters.
     */
    _listByReplicationNetworksNext(resourceName, resourceGroupName, fabricName, networkName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            networkName,
            nextLink,
            options,
        }, listByReplicationNetworksNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$d);
    }
}
// Operation Specifications
const serializer$j = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationNetworksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkMappingCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        networkName,
    ],
    headerParameters: [accept],
    serializer: serializer$j,
};
const getOperationSpec$i = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkMapping,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        networkName,
        networkMappingName,
    ],
    headerParameters: [accept],
    serializer: serializer$j,
};
const createOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: NetworkMapping,
        },
        201: {
            bodyMapper: NetworkMapping,
        },
        202: {
            bodyMapper: NetworkMapping,
        },
        204: {
            bodyMapper: NetworkMapping,
        },
    },
    requestBody: input1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        networkName,
        networkMappingName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$j,
};
const deleteOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        networkName,
        networkMappingName,
    ],
    serializer: serializer$j,
};
const updateOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: NetworkMapping,
        },
        201: {
            bodyMapper: NetworkMapping,
        },
        202: {
            bodyMapper: NetworkMapping,
        },
        204: {
            bodyMapper: NetworkMapping,
        },
    },
    requestBody: input2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        networkName,
        networkMappingName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$j,
};
const listOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationNetworkMappings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkMappingCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$j,
};
const listByReplicationNetworksNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkMappingCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
        networkName,
    ],
    headerParameters: [accept],
    serializer: serializer$j,
};
const listNextOperationSpec$d = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: NetworkMappingCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$j,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationProtectionContainers operations. */
class ReplicationProtectionContainersImpl {
    /**
     * Initialize a new instance of the class ReplicationProtectionContainers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the protection containers in the specified fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        const iter = this.listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings);
            },
        };
    }
    listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the protection containers in a vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the protection containers in the specified fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    _listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, options }, listByReplicationFabricsOperationSpec$3);
    }
    /**
     * Gets the details of a protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            options,
        }, getOperationSpec$h);
    }
    /**
     * Operation to create a protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param creationInput Creation input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, fabricName, protectionContainerName, creationInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    creationInput,
                    options,
                },
                spec: createOperationSpec$a,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to create a protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param creationInput Creation input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, creationInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, fabricName, protectionContainerName, creationInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to a add a protectable item to a protection container(Add physical server).
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param discoverProtectableItemRequest The request object to add a protectable item.
     * @param options The options parameters.
     */
    beginDiscoverProtectableItem(resourceName, resourceGroupName, fabricName, protectionContainerName, discoverProtectableItemRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    discoverProtectableItemRequest,
                    options,
                },
                spec: discoverProtectableItemOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to a add a protectable item to a protection container(Add physical server).
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the protection container.
     * @param discoverProtectableItemRequest The request object to add a protectable item.
     * @param options The options parameters.
     */
    beginDiscoverProtectableItemAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, discoverProtectableItemRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDiscoverProtectableItem(resourceName, resourceGroupName, fabricName, protectionContainerName, discoverProtectableItemRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to remove a protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    options,
                },
                spec: deleteOperationSpec$8,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to remove a protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric ARM name.
     * @param protectionContainerName Unique protection container ARM name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, fabricName, protectionContainerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to switch protection from one container to another or one replication provider to another.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param switchInput Switch protection input.
     * @param options The options parameters.
     */
    beginSwitchProtection(resourceName, resourceGroupName, fabricName, protectionContainerName, switchInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    switchInput,
                    options,
                },
                spec: switchProtectionOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to switch protection from one container to another or one replication provider to another.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param switchInput Switch protection input.
     * @param options The options parameters.
     */
    beginSwitchProtectionAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, switchInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginSwitchProtection(resourceName, resourceGroupName, fabricName, protectionContainerName, switchInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists the protection containers in a vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$c);
    }
    /**
     * ListByReplicationFabricsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
     *                 method.
     * @param options The options parameters.
     */
    _listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, nextLink, options }, listByReplicationFabricsNextOperationSpec$3);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$c);
    }
}
// Operation Specifications
const serializer$i = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationFabricsOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$i,
};
const getOperationSpec$h = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainer,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept],
    serializer: serializer$i,
};
const createOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ProtectionContainer,
        },
        201: {
            bodyMapper: ProtectionContainer,
        },
        202: {
            bodyMapper: ProtectionContainer,
        },
        204: {
            bodyMapper: ProtectionContainer,
        },
    },
    requestBody: creationInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$i,
};
const discoverProtectableItemOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/discoverProtectableItem",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ProtectionContainer,
        },
        201: {
            bodyMapper: ProtectionContainer,
        },
        202: {
            bodyMapper: ProtectionContainer,
        },
        204: {
            bodyMapper: ProtectionContainer,
        },
    },
    requestBody: discoverProtectableItemRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$i,
};
const deleteOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/remove",
    httpMethod: "POST",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    serializer: serializer$i,
};
const switchProtectionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/switchprotection",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ProtectionContainer,
        },
        201: {
            bodyMapper: ProtectionContainer,
        },
        202: {
            bodyMapper: ProtectionContainer,
        },
        204: {
            bodyMapper: ProtectionContainer,
        },
    },
    requestBody: switchInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$i,
};
const listOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$i,
};
const listByReplicationFabricsNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$i,
};
const listNextOperationSpec$c = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$i,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationMigrationItems operations. */
class ReplicationMigrationItemsImpl {
    /**
     * Initialize a new instance of the class ReplicationMigrationItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of ASR migration items in the protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param options The options parameters.
     */
    listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        const iter = this.listByReplicationProtectionContainersPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options, settings);
            },
        };
    }
    listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectionContainersPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectionContainersNext(resourceName, resourceGroupName, fabricName, protectionContainerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationProtectionContainersPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectionContainersPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of migration items in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the list of ASR migration items in the protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param options The options parameters.
     */
    _listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            options,
        }, listByReplicationProtectionContainersOperationSpec$3);
    }
    /**
     * Gets the details of a migration item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            migrationItemName,
            options,
        }, getOperationSpec$g);
    }
    /**
     * The operation to create an ASR migration item (enable migration).
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    migrationItemName,
                    input,
                    options,
                },
                spec: createOperationSpec$9,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to create an ASR migration item (enable migration).
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Enable migration input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to delete an ASR migration item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    migrationItemName,
                    options,
                },
                spec: deleteOperationSpec$7,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to delete an ASR migration item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to update the recovery settings of an ASR migration item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @param options The options parameters.
     */
    beginUpdate(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    migrationItemName,
                    input,
                    options,
                },
                spec: updateOperationSpec$5,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to update the recovery settings of an ASR migration item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Update migration item input.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to initiate migration of the item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @param options The options parameters.
     */
    beginMigrate(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, migrateInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    migrationItemName,
                    migrateInput,
                    options,
                },
                spec: migrateOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to initiate migration of the item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrateInput Migrate input.
     * @param options The options parameters.
     */
    beginMigrateAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, migrateInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginMigrate(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, migrateInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to initiate pause replication of the item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @param options The options parameters.
     */
    beginPauseReplication(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, pauseReplicationInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    migrationItemName,
                    pauseReplicationInput,
                    options,
                },
                spec: pauseReplicationOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to initiate pause replication of the item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param pauseReplicationInput Pause replication input.
     * @param options The options parameters.
     */
    beginPauseReplicationAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, pauseReplicationInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPauseReplication(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, pauseReplicationInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to initiate resume replication of the item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @param options The options parameters.
     */
    beginResumeReplication(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, resumeReplicationInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    migrationItemName,
                    resumeReplicationInput,
                    options,
                },
                spec: resumeReplicationOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to initiate resume replication of the item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param resumeReplicationInput Resume replication input.
     * @param options The options parameters.
     */
    beginResumeReplicationAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, resumeReplicationInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginResumeReplication(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, resumeReplicationInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to resynchronize replication of an ASR migration item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @param options The options parameters.
     */
    beginResync(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    migrationItemName,
                    input,
                    options,
                },
                spec: resyncOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to resynchronize replication of an ASR migration item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param input Resync input.
     * @param options The options parameters.
     */
    beginResyncAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginResync(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to initiate test migration of the item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @param options The options parameters.
     */
    beginTestMigrate(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, testMigrateInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    migrationItemName,
                    testMigrateInput,
                    options,
                },
                spec: testMigrateOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to initiate test migration of the item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateInput Test migrate input.
     * @param options The options parameters.
     */
    beginTestMigrateAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, testMigrateInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTestMigrate(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, testMigrateInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to initiate test migrate cleanup.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @param options The options parameters.
     */
    beginTestMigrateCleanup(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    migrationItemName,
                    testMigrateCleanupInput,
                    options,
                },
                spec: testMigrateCleanupOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to initiate test migrate cleanup.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param testMigrateCleanupInput Test migrate cleanup input.
     * @param options The options parameters.
     */
    beginTestMigrateCleanupAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTestMigrateCleanup(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, testMigrateCleanupInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the list of migration items in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$b);
    }
    /**
     * ListByReplicationProtectionContainersNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReplicationProtectionContainers method.
     * @param options The options parameters.
     */
    _listByReplicationProtectionContainersNext(resourceName, resourceGroupName, fabricName, protectionContainerName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            nextLink,
            options,
        }, listByReplicationProtectionContainersNextOperationSpec$3);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$b);
    }
}
// Operation Specifications
const serializer$h = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationProtectionContainersOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationItemCollection,
        },
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken,
        takeToken,
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept],
    serializer: serializer$h,
};
const getOperationSpec$g = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationItem,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$h,
};
const createOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: MigrationItem,
        },
        201: {
            bodyMapper: MigrationItem,
        },
        202: {
            bodyMapper: MigrationItem,
        },
        204: {
            bodyMapper: MigrationItem,
        },
    },
    requestBody: input3,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h,
};
const deleteOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion, deleteOption],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    serializer: serializer$h,
};
const updateOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: MigrationItem,
        },
        201: {
            bodyMapper: MigrationItem,
        },
        202: {
            bodyMapper: MigrationItem,
        },
        204: {
            bodyMapper: MigrationItem,
        },
    },
    requestBody: input4,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h,
};
const migrateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: MigrationItem,
        },
        201: {
            bodyMapper: MigrationItem,
        },
        202: {
            bodyMapper: MigrationItem,
        },
        204: {
            bodyMapper: MigrationItem,
        },
    },
    requestBody: migrateInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h,
};
const pauseReplicationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/pauseReplication",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: MigrationItem,
        },
        201: {
            bodyMapper: MigrationItem,
        },
        202: {
            bodyMapper: MigrationItem,
        },
        204: {
            bodyMapper: MigrationItem,
        },
    },
    requestBody: pauseReplicationInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h,
};
const resumeReplicationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/resumeReplication",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: MigrationItem,
        },
        201: {
            bodyMapper: MigrationItem,
        },
        202: {
            bodyMapper: MigrationItem,
        },
        204: {
            bodyMapper: MigrationItem,
        },
    },
    requestBody: resumeReplicationInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h,
};
const resyncOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/resync",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: MigrationItem,
        },
        201: {
            bodyMapper: MigrationItem,
        },
        202: {
            bodyMapper: MigrationItem,
        },
        204: {
            bodyMapper: MigrationItem,
        },
    },
    requestBody: input5,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h,
};
const testMigrateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrate",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: MigrationItem,
        },
        201: {
            bodyMapper: MigrationItem,
        },
        202: {
            bodyMapper: MigrationItem,
        },
        204: {
            bodyMapper: MigrationItem,
        },
    },
    requestBody: testMigrateInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h,
};
const testMigrateCleanupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/testMigrateCleanup",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: MigrationItem,
        },
        201: {
            bodyMapper: MigrationItem,
        },
        202: {
            bodyMapper: MigrationItem,
        },
        204: {
            bodyMapper: MigrationItem,
        },
    },
    requestBody: testMigrateCleanupInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$h,
};
const listOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationMigrationItems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationItemCollection,
        },
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken,
        takeToken,
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$h,
};
const listByReplicationProtectionContainersNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationItemCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept],
    serializer: serializer$h,
};
const listNextOperationSpec$b = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationItemCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$h,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing MigrationRecoveryPoints operations. */
class MigrationRecoveryPointsImpl {
    /**
     * Initialize a new instance of the class MigrationRecoveryPoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the recovery points for a migration item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param options The options parameters.
     */
    listByReplicationMigrationItems(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options) {
        const iter = this.listByReplicationMigrationItemsPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationMigrationItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options, settings);
            },
        };
    }
    listByReplicationMigrationItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationMigrationItemsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationMigrationItems(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationMigrationItemsNext(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationMigrationItemsPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationMigrationItemsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationMigrationItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the recovery points for a migration item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param options The options parameters.
     */
    _listByReplicationMigrationItems(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            migrationItemName,
            options,
        }, listByReplicationMigrationItemsOperationSpec);
    }
    /**
     * Gets a recovery point for a migration item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param migrationRecoveryPointName The migration recovery point name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, migrationRecoveryPointName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            migrationItemName,
            migrationRecoveryPointName,
            options,
        }, getOperationSpec$f);
    }
    /**
     * ListByReplicationMigrationItemsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param migrationItemName Migration item name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReplicationMigrationItems method.
     * @param options The options parameters.
     */
    _listByReplicationMigrationItemsNext(resourceName, resourceGroupName, fabricName, protectionContainerName, migrationItemName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            migrationItemName,
            nextLink,
            options,
        }, listByReplicationMigrationItemsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$g = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationMigrationItemsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationRecoveryPointCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$g,
};
const getOperationSpec$f = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints/{migrationRecoveryPointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationRecoveryPoint,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
        migrationRecoveryPointName,
    ],
    headerParameters: [accept],
    serializer: serializer$g,
};
const listByReplicationMigrationItemsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: MigrationRecoveryPointCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
        protectionContainerName,
        migrationItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$g,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationProtectableItems operations. */
class ReplicationProtectableItemsImpl {
    /**
     * Initialize a new instance of the class ReplicationProtectableItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the protectable items in a protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param options The options parameters.
     */
    listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        const iter = this.listByReplicationProtectionContainersPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options, settings);
            },
        };
    }
    listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectionContainersPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectionContainersNext(resourceName, resourceGroupName, fabricName, protectionContainerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationProtectionContainersPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectionContainersPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the protectable items in a protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param options The options parameters.
     */
    _listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            options,
        }, listByReplicationProtectionContainersOperationSpec$2);
    }
    /**
     * The operation to get the details of a protectable item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param protectableItemName Protectable item name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, protectionContainerName, protectableItemName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            protectableItemName,
            options,
        }, getOperationSpec$e);
    }
    /**
     * ListByReplicationProtectionContainersNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReplicationProtectionContainers method.
     * @param options The options parameters.
     */
    _listByReplicationProtectionContainersNext(resourceName, resourceGroupName, fabricName, protectionContainerName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            nextLink,
            options,
        }, listByReplicationProtectionContainersNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$f = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationProtectionContainersOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectableItems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectableItemCollection,
        },
    },
    queryParameters: [
        apiVersion,
        filter,
        take,
        skipToken1,
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept],
    serializer: serializer$f,
};
const getOperationSpec$e = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectableItems/{protectableItemName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectableItem,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        protectableItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$f,
};
const listByReplicationProtectionContainersNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectableItemCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept],
    serializer: serializer$f,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationProtectedItems operations. */
class ReplicationProtectedItemsImpl {
    /**
     * Initialize a new instance of the class ReplicationProtectedItems class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of ASR replication protected items in the protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param options The options parameters.
     */
    listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        const iter = this.listByReplicationProtectionContainersPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options, settings);
            },
        };
    }
    listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectionContainersPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectionContainersNext(resourceName, resourceGroupName, fabricName, protectionContainerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationProtectionContainersPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectionContainersPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of ASR replication protected items in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets the list of ASR replication protected items in the protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param options The options parameters.
     */
    _listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            options,
        }, listByReplicationProtectionContainersOperationSpec$1);
    }
    /**
     * Gets the details of an ASR replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric unique name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName,
            options,
        }, getOperationSpec$d);
    }
    /**
     * The operation to create an ASR replication protected item (Enable replication).
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param input Enable Protection Input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    input,
                    options,
                },
                spec: createOperationSpec$8,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to create an ASR replication protected item (Enable replication).
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Name of the fabric.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName A name for the replication protected item.
     * @param input Enable Protection Input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to delete or purge a replication protected item. This operation will force delete the
     * replication protected item. Use the remove operation on replication protected item to perform a
     * clean disable replication for the item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param options The options parameters.
     */
    beginPurge(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    options,
                },
                spec: purgeOperationSpec$2,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to delete or purge a replication protected item. This operation will force delete the
     * replication protected item. Use the remove operation on replication protected item to perform a
     * clean disable replication for the item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param options The options parameters.
     */
    beginPurgeAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPurge(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to update the recovery settings of an ASR replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param updateProtectionInput Update protection input.
     * @param options The options parameters.
     */
    beginUpdate(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    updateProtectionInput,
                    options,
                },
                spec: updateOperationSpec$4,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to update the recovery settings of an ASR replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param updateProtectionInput Update protection input.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to add disks(s) to the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param addDisksInput Add disks input.
     * @param options The options parameters.
     */
    beginAddDisks(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, addDisksInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    addDisksInput,
                    options,
                },
                spec: addDisksOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to add disks(s) to the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param addDisksInput Add disks input.
     * @param options The options parameters.
     */
    beginAddDisksAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, addDisksInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginAddDisks(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, addDisksInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to change the recovery point of a failed over replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item name.
     * @param applyRecoveryPointInput The ApplyRecoveryPointInput.
     * @param options The options parameters.
     */
    beginApplyRecoveryPoint(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    applyRecoveryPointInput,
                    options,
                },
                spec: applyRecoveryPointOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to change the recovery point of a failed over replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The ARM fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replicated protected item name.
     * @param applyRecoveryPointInput The ApplyRecoveryPointInput.
     * @param options The options parameters.
     */
    beginApplyRecoveryPointAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginApplyRecoveryPoint(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to cancel the failover of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param options The options parameters.
     */
    beginFailoverCancel(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    options,
                },
                spec: failoverCancelOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to cancel the failover of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param options The options parameters.
     */
    beginFailoverCancelAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginFailoverCancel(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to commit the failover of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param options The options parameters.
     */
    beginFailoverCommit(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    options,
                },
                spec: failoverCommitOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to commit the failover of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param options The options parameters.
     */
    beginFailoverCommitAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginFailoverCommit(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to initiate a planned failover of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param failoverInput Planned failover input.
     * @param options The options parameters.
     */
    beginPlannedFailover(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    failoverInput,
                    options,
                },
                spec: plannedFailoverOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to initiate a planned failover of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param failoverInput Planned failover input.
     * @param options The options parameters.
     */
    beginPlannedFailoverAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPlannedFailover(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to disable replication on a replication protected item. This will also remove the
     * item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param disableProtectionInput Disable protection input.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    disableProtectionInput,
                    options,
                },
                spec: deleteOperationSpec$6,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to disable replication on a replication protected item. This will also remove the
     * item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param disableProtectionInput Disable protection input.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to remove disk(s) from the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param removeDisksInput Remove disks input.
     * @param options The options parameters.
     */
    beginRemoveDisks(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, removeDisksInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    removeDisksInput,
                    options,
                },
                spec: removeDisksOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to remove disk(s) from the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param removeDisksInput Remove disks input.
     * @param options The options parameters.
     */
    beginRemoveDisksAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, removeDisksInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRemoveDisks(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, removeDisksInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to start resynchronize/repair replication for a replication protected item requiring
     * resynchronization.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the container.
     * @param replicatedProtectedItemName The name of the replication protected item.
     * @param options The options parameters.
     */
    beginRepairReplication(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    options,
                },
                spec: repairReplicationOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to start resynchronize/repair replication for a replication protected item requiring
     * resynchronization.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The name of the fabric.
     * @param protectionContainerName The name of the container.
     * @param replicatedProtectedItemName The name of the replication protected item.
     * @param options The options parameters.
     */
    beginRepairReplicationAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRepairReplication(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param reprotectInput Reverse replication input.
     * @param options The options parameters.
     */
    beginReprotect(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, reprotectInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    reprotectInput,
                    options,
                },
                spec: reprotectOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to reprotect or reverse replicate a failed over replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param reprotectInput Reverse replication input.
     * @param options The options parameters.
     */
    beginReprotectAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, reprotectInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginReprotect(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, reprotectInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to resolve health issues of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param resolveHealthInput Health issue input object.
     * @param options The options parameters.
     */
    beginResolveHealthErrors(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, resolveHealthInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    resolveHealthInput,
                    options,
                },
                spec: resolveHealthErrorsOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to resolve health issues of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param resolveHealthInput Health issue input object.
     * @param options The options parameters.
     */
    beginResolveHealthErrorsAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, resolveHealthInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginResolveHealthErrors(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, resolveHealthInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to initiate a switch provider of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param switchProviderInput Switch provider input.
     * @param options The options parameters.
     */
    beginSwitchProvider(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, switchProviderInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    switchProviderInput,
                    options,
                },
                spec: switchProviderOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "azure-async-operation",
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to initiate a switch provider of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param switchProviderInput Switch provider input.
     * @param options The options parameters.
     */
    beginSwitchProviderAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, switchProviderInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginSwitchProvider(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, switchProviderInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to perform a test failover of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param testfailoverInput Test failover input.
     * @param options The options parameters.
     */
    beginTestFailover(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, testfailoverInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    testfailoverInput,
                    options,
                },
                spec: testFailoverOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to perform a test failover of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param testfailoverInput Test failover input.
     * @param options The options parameters.
     */
    beginTestFailoverAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, testfailoverInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTestFailover(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, testfailoverInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to clean up the test failover of a replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param cleanupInput Test failover cleanup input.
     * @param options The options parameters.
     */
    beginTestFailoverCleanup(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, cleanupInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    cleanupInput,
                    options,
                },
                spec: testFailoverCleanupOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to clean up the test failover of a replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param cleanupInput Test failover cleanup input.
     * @param options The options parameters.
     */
    beginTestFailoverCleanupAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, cleanupInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTestFailoverCleanup(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, cleanupInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Operation to initiate a failover of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param failoverInput Failover input.
     * @param options The options parameters.
     */
    beginUnplannedFailover(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    failoverInput,
                    options,
                },
                spec: unplannedFailoverOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Operation to initiate a failover of the replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Unique fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param failoverInput Failover input.
     * @param options The options parameters.
     */
    beginUnplannedFailoverAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUnplannedFailover(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to update appliance of an ASR replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param applianceUpdateInput Appliance update protection input.
     * @param options The options parameters.
     */
    beginUpdateAppliance(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, applianceUpdateInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    applianceUpdateInput,
                    options,
                },
                spec: updateApplianceOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to update appliance of an ASR replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param applianceUpdateInput Appliance update protection input.
     * @param options The options parameters.
     */
    beginUpdateApplianceAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, applianceUpdateInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateAppliance(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, applianceUpdateInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to update(push update) the installed mobility service software on a replication
     * protected item to the latest available version.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicatedProtectedItemName The name of the protected item on which the agent is to be
     *                                    updated.
     * @param updateMobilityServiceRequest Request to update the mobility service on the protected item.
     * @param options The options parameters.
     */
    beginUpdateMobilityService(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, updateMobilityServiceRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    replicatedProtectedItemName,
                    updateMobilityServiceRequest,
                    options,
                },
                spec: updateMobilityServiceOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
                resourceLocationConfig: "location",
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to update(push update) the installed mobility service software on a replication
     * protected item to the latest available version.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The name of the fabric containing the protected item.
     * @param protectionContainerName The name of the container containing the protected item.
     * @param replicatedProtectedItemName The name of the protected item on which the agent is to be
     *                                    updated.
     * @param updateMobilityServiceRequest Request to update the mobility service on the protected item.
     * @param options The options parameters.
     */
    beginUpdateMobilityServiceAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, updateMobilityServiceRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdateMobilityService(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, updateMobilityServiceRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Gets the list of ASR replication protected items in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$a);
    }
    /**
     * ListByReplicationProtectionContainersNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReplicationProtectionContainers method.
     * @param options The options parameters.
     */
    _listByReplicationProtectionContainersNext(resourceName, resourceGroupName, fabricName, protectionContainerName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            nextLink,
            options,
        }, listByReplicationProtectionContainersNextOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$a);
    }
}
// Operation Specifications
const serializer$e = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationProtectionContainersOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItemCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept],
    serializer: serializer$e,
};
const getOperationSpec$d = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$e,
};
const createOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: input6,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const purgeOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    serializer: serializer$e,
};
const updateOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: updateProtectionInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const addDisksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/addDisks",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: addDisksInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const applyRecoveryPointOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/applyRecoveryPoint",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: applyRecoveryPointInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const failoverCancelOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/failoverCancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$e,
};
const failoverCommitOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/failoverCommit",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$e,
};
const plannedFailoverOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/plannedFailover",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: failoverInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const deleteOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/remove",
    httpMethod: "POST",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    requestBody: disableProtectionInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const removeDisksOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/removeDisks",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: removeDisksInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const repairReplicationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/repairReplication",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$e,
};
const reprotectOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/reProtect",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: reprotectInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const resolveHealthErrorsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/resolveHealthErrors",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: resolveHealthInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const switchProviderOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/switchProvider",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: switchProviderInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const testFailoverOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailover",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: testfailoverInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const testFailoverCleanupOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/testFailoverCleanup",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: cleanupInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const unplannedFailoverOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/unplannedFailover",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: failoverInput1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const updateApplianceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/updateAppliance",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: applianceUpdateInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const updateMobilityServiceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/updateMobilityService",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItem,
        },
        201: {
            bodyMapper: ReplicationProtectedItem,
        },
        202: {
            bodyMapper: ReplicationProtectedItem,
        },
        204: {
            bodyMapper: ReplicationProtectedItem,
        },
    },
    requestBody: updateMobilityServiceRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$e,
};
const listOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectedItems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItemCollection,
        },
    },
    queryParameters: [
        apiVersion,
        filter,
        skipToken,
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$e,
};
const listByReplicationProtectionContainersNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItemCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept],
    serializer: serializer$e,
};
const listNextOperationSpec$a = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationProtectedItemCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$e,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing RecoveryPoints operations. */
class RecoveryPointsImpl {
    /**
     * Initialize a new instance of the class RecoveryPoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the available recovery points for a replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item name.
     * @param options The options parameters.
     */
    listByReplicationProtectedItems(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        const iter = this.listByReplicationProtectedItemsPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationProtectedItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options, settings);
            },
        };
    }
    listByReplicationProtectedItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectedItemsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectedItems(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectedItemsNext(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationProtectedItemsPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectedItemsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationProtectedItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the available recovery points for a replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item name.
     * @param options The options parameters.
     */
    _listByReplicationProtectedItems(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName,
            options,
        }, listByReplicationProtectedItemsOperationSpec$1);
    }
    /**
     * Get the details of specified recovery point.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item name.
     * @param recoveryPointName The recovery point name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, recoveryPointName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName,
            recoveryPointName,
            options,
        }, getOperationSpec$c);
    }
    /**
     * ListByReplicationProtectedItemsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName The fabric name.
     * @param protectionContainerName The protection container name.
     * @param replicatedProtectedItemName The replication protected item name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReplicationProtectedItems method.
     * @param options The options parameters.
     */
    _listByReplicationProtectedItemsNext(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName,
            nextLink,
            options,
        }, listByReplicationProtectedItemsNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$d = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationProtectedItemsOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/recoveryPoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryPointCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$d,
};
const getOperationSpec$c = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/recoveryPoints/{recoveryPointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryPoint,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
        recoveryPointName,
    ],
    headerParameters: [accept],
    serializer: serializer$d,
};
const listByReplicationProtectedItemsNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryPointCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$d,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing TargetComputeSizes operations. */
class TargetComputeSizesImpl {
    /**
     * Initialize a new instance of the class TargetComputeSizes class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the available target compute sizes for a replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param options The options parameters.
     */
    listByReplicationProtectedItems(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        const iter = this.listByReplicationProtectedItemsPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationProtectedItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options, settings);
            },
        };
    }
    listByReplicationProtectedItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectedItemsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectedItems(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectedItemsNext(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationProtectedItemsPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectedItemsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationProtectedItemsPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the available target compute sizes for a replication protected item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param options The options parameters.
     */
    _listByReplicationProtectedItems(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName,
            options,
        }, listByReplicationProtectedItemsOperationSpec);
    }
    /**
     * ListByReplicationProtectedItemsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName protection container name.
     * @param replicatedProtectedItemName Replication protected item name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReplicationProtectedItems method.
     * @param options The options parameters.
     */
    _listByReplicationProtectedItemsNext(resourceName, resourceGroupName, fabricName, protectionContainerName, replicatedProtectedItemName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            replicatedProtectedItemName,
            nextLink,
            options,
        }, listByReplicationProtectedItemsNextOperationSpec);
    }
}
// Operation Specifications
const serializer$c = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationProtectedItemsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/targetComputeSizes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TargetComputeSizeCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$c,
};
const listByReplicationProtectedItemsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TargetComputeSizeCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
        protectionContainerName,
        replicatedProtectedItemName,
    ],
    headerParameters: [accept],
    serializer: serializer$c,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationProtectionContainerMappings operations. */
class ReplicationProtectionContainerMappingsImpl {
    /**
     * Initialize a new instance of the class ReplicationProtectionContainerMappings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the protection container mappings for a protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param options The options parameters.
     */
    listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        const iter = this.listByReplicationProtectionContainersPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options, settings);
            },
        };
    }
    listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectionContainersPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationProtectionContainersNext(resourceName, resourceGroupName, fabricName, protectionContainerName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationProtectionContainersPagingAll(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationProtectionContainersPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationProtectionContainersPagingPage(resourceName, resourceGroupName, fabricName, protectionContainerName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the protection container mappings in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the protection container mappings for a protection container.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param options The options parameters.
     */
    _listByReplicationProtectionContainers(resourceName, resourceGroupName, fabricName, protectionContainerName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            options,
        }, listByReplicationProtectionContainersOperationSpec);
    }
    /**
     * Gets the details of a protection container mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection Container mapping name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            mappingName,
            options,
        }, getOperationSpec$b);
    }
    /**
     * The operation to create a protection container mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param creationInput Mapping creation input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, creationInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    mappingName,
                    creationInput,
                    options,
                },
                spec: createOperationSpec$7,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to create a protection container mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param creationInput Mapping creation input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, creationInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, creationInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to purge(force delete) a protection container mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param options The options parameters.
     */
    beginPurge(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    mappingName,
                    options,
                },
                spec: purgeOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to purge(force delete) a protection container mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param options The options parameters.
     */
    beginPurgeAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPurge(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to update protection container mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param updateInput Mapping update input.
     * @param options The options parameters.
     */
    beginUpdate(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, updateInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    mappingName,
                    updateInput,
                    options,
                },
                spec: updateOperationSpec$3,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to update protection container mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param updateInput Mapping update input.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, updateInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, updateInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to delete or remove a protection container mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param removalInput Removal input.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, removalInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    protectionContainerName,
                    mappingName,
                    removalInput,
                    options,
                },
                spec: deleteOperationSpec$5,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to delete or remove a protection container mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param mappingName Protection container mapping name.
     * @param removalInput Removal input.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, removalInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, fabricName, protectionContainerName, mappingName, removalInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists the protection container mappings in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$9);
    }
    /**
     * ListByReplicationProtectionContainersNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param protectionContainerName Protection container name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReplicationProtectionContainers method.
     * @param options The options parameters.
     */
    _listByReplicationProtectionContainersNext(resourceName, resourceGroupName, fabricName, protectionContainerName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            protectionContainerName,
            nextLink,
            options,
        }, listByReplicationProtectionContainersNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$9);
    }
}
// Operation Specifications
const serializer$b = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationProtectionContainersOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerMappingCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept],
    serializer: serializer$b,
};
const getOperationSpec$b = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerMapping,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        mappingName,
    ],
    headerParameters: [accept],
    serializer: serializer$b,
};
const createOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ProtectionContainerMapping,
        },
        201: {
            bodyMapper: ProtectionContainerMapping,
        },
        202: {
            bodyMapper: ProtectionContainerMapping,
        },
        204: {
            bodyMapper: ProtectionContainerMapping,
        },
    },
    requestBody: creationInput1,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        mappingName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b,
};
const purgeOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        mappingName,
    ],
    serializer: serializer$b,
};
const updateOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: ProtectionContainerMapping,
        },
        201: {
            bodyMapper: ProtectionContainerMapping,
        },
        202: {
            bodyMapper: ProtectionContainerMapping,
        },
        204: {
            bodyMapper: ProtectionContainerMapping,
        },
    },
    requestBody: updateInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        mappingName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$b,
};
const deleteOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}/remove",
    httpMethod: "POST",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    requestBody: removalInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        protectionContainerName,
        mappingName,
    ],
    headerParameters: [contentType],
    mediaType: "json",
    serializer: serializer$b,
};
const listOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionContainerMappings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerMappingCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$b,
};
const listByReplicationProtectionContainersNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerMappingCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
        protectionContainerName,
    ],
    headerParameters: [accept],
    serializer: serializer$b,
};
const listNextOperationSpec$9 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProtectionContainerMappingCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$b,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationRecoveryServicesProviders operations. */
class ReplicationRecoveryServicesProvidersImpl {
    /**
     * Initialize a new instance of the class ReplicationRecoveryServicesProviders class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the registered recovery services providers for the specified fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        const iter = this.listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings);
            },
        };
    }
    listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the registered recovery services providers in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the registered recovery services providers for the specified fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    _listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, options }, listByReplicationFabricsOperationSpec$2);
    }
    /**
     * Gets the details of registered recovery services provider.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, providerName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, providerName, options }, getOperationSpec$a);
    }
    /**
     * The operation to add a recovery services provider.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param addProviderInput Add provider input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, fabricName, providerName, addProviderInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    providerName,
                    addProviderInput,
                    options,
                },
                spec: createOperationSpec$6,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to add a recovery services provider.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param addProviderInput Add provider input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, fabricName, providerName, addProviderInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, fabricName, providerName, addProviderInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to purge(force delete) a recovery services provider from the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param options The options parameters.
     */
    beginPurge(resourceName, resourceGroupName, fabricName, providerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    providerName,
                    options,
                },
                spec: purgeOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to purge(force delete) a recovery services provider from the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param options The options parameters.
     */
    beginPurgeAndWait(resourceName, resourceGroupName, fabricName, providerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPurge(resourceName, resourceGroupName, fabricName, providerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to refresh the information from the recovery services provider.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param options The options parameters.
     */
    beginRefreshProvider(resourceName, resourceGroupName, fabricName, providerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    providerName,
                    options,
                },
                spec: refreshProviderOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to refresh the information from the recovery services provider.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param options The options parameters.
     */
    beginRefreshProviderAndWait(resourceName, resourceGroupName, fabricName, providerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRefreshProvider(resourceName, resourceGroupName, fabricName, providerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to removes/delete(unregister) a recovery services provider from the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, fabricName, providerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    providerName,
                    options,
                },
                spec: deleteOperationSpec$4,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to removes/delete(unregister) a recovery services provider from the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param providerName Recovery services provider name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, fabricName, providerName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, fabricName, providerName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists the registered recovery services providers in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$8);
    }
    /**
     * ListByReplicationFabricsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
     *                 method.
     * @param options The options parameters.
     */
    _listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, nextLink, options }, listByReplicationFabricsNextOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$8);
    }
}
// Operation Specifications
const serializer$a = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationFabricsOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryServicesProviderCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$a,
};
const getOperationSpec$a = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryServicesProvider,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        providerName,
    ],
    headerParameters: [accept],
    serializer: serializer$a,
};
const createOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: RecoveryServicesProvider,
        },
        201: {
            bodyMapper: RecoveryServicesProvider,
        },
        202: {
            bodyMapper: RecoveryServicesProvider,
        },
        204: {
            bodyMapper: RecoveryServicesProvider,
        },
    },
    requestBody: addProviderInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        providerName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$a,
};
const purgeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        providerName,
    ],
    serializer: serializer$a,
};
const refreshProviderOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/refreshProvider",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RecoveryServicesProvider,
        },
        201: {
            bodyMapper: RecoveryServicesProvider,
        },
        202: {
            bodyMapper: RecoveryServicesProvider,
        },
        204: {
            bodyMapper: RecoveryServicesProvider,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        providerName,
    ],
    headerParameters: [accept],
    serializer: serializer$a,
};
const deleteOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}/remove",
    httpMethod: "POST",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        providerName,
    ],
    serializer: serializer$a,
};
const listOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryServicesProviders",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryServicesProviderCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$a,
};
const listByReplicationFabricsNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryServicesProviderCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$a,
};
const listNextOperationSpec$8 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryServicesProviderCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$a,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationStorageClassifications operations. */
class ReplicationStorageClassificationsImpl {
    /**
     * Initialize a new instance of the class ReplicationStorageClassifications class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the storage classifications available in the specified fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Site name of interest.
     * @param options The options parameters.
     */
    listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        const iter = this.listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings);
            },
        };
    }
    listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the storage classifications in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the storage classifications available in the specified fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Site name of interest.
     * @param options The options parameters.
     */
    _listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, options }, listByReplicationFabricsOperationSpec$1);
    }
    /**
     * Gets the details of the specified storage classification.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, storageClassificationName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            storageClassificationName,
            options,
        }, getOperationSpec$9);
    }
    /**
     * Lists the storage classifications in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$7);
    }
    /**
     * ListByReplicationFabricsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Site name of interest.
     * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
     *                 method.
     * @param options The options parameters.
     */
    _listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, nextLink, options }, listByReplicationFabricsNextOperationSpec$1);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$7);
    }
}
// Operation Specifications
const serializer$9 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationFabricsOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageClassificationCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$9,
};
const getOperationSpec$9 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageClassification,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        storageClassificationName,
    ],
    headerParameters: [accept],
    serializer: serializer$9,
};
const listOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassifications",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageClassificationCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$9,
};
const listByReplicationFabricsNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageClassificationCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$9,
};
const listNextOperationSpec$7 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageClassificationCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$9,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationStorageClassificationMappings operations. */
class ReplicationStorageClassificationMappingsImpl {
    /**
     * Initialize a new instance of the class ReplicationStorageClassificationMappings class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the storage classification mappings for the fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param options The options parameters.
     */
    listByReplicationStorageClassifications(resourceName, resourceGroupName, fabricName, storageClassificationName, options) {
        const iter = this.listByReplicationStorageClassificationsPagingAll(resourceName, resourceGroupName, fabricName, storageClassificationName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationStorageClassificationsPagingPage(resourceName, resourceGroupName, fabricName, storageClassificationName, options, settings);
            },
        };
    }
    listByReplicationStorageClassificationsPagingPage(resourceName, resourceGroupName, fabricName, storageClassificationName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationStorageClassificationsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationStorageClassifications(resourceName, resourceGroupName, fabricName, storageClassificationName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationStorageClassificationsNext(resourceName, resourceGroupName, fabricName, storageClassificationName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationStorageClassificationsPagingAll(resourceName, resourceGroupName, fabricName, storageClassificationName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationStorageClassificationsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationStorageClassificationsPagingPage(resourceName, resourceGroupName, fabricName, storageClassificationName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the storage classification mappings in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the storage classification mappings for the fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param options The options parameters.
     */
    _listByReplicationStorageClassifications(resourceName, resourceGroupName, fabricName, storageClassificationName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            storageClassificationName,
            options,
        }, listByReplicationStorageClassificationsOperationSpec);
    }
    /**
     * Gets the details of the specified storage classification mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, storageClassificationName, storageClassificationMappingName, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            storageClassificationName,
            storageClassificationMappingName,
            options,
        }, getOperationSpec$8);
    }
    /**
     * The operation to create a storage classification mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param pairingInput Pairing input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, fabricName, storageClassificationName, storageClassificationMappingName, pairingInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    storageClassificationName,
                    storageClassificationMappingName,
                    pairingInput,
                    options,
                },
                spec: createOperationSpec$5,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to create a storage classification mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param pairingInput Pairing input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, fabricName, storageClassificationName, storageClassificationMappingName, pairingInput, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, fabricName, storageClassificationName, storageClassificationMappingName, pairingInput, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to delete a storage classification mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, fabricName, storageClassificationName, storageClassificationMappingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    storageClassificationName,
                    storageClassificationMappingName,
                    options,
                },
                spec: deleteOperationSpec$3,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to delete a storage classification mapping.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param storageClassificationMappingName Storage classification mapping name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, fabricName, storageClassificationName, storageClassificationMappingName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, fabricName, storageClassificationName, storageClassificationMappingName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists the storage classification mappings in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$6);
    }
    /**
     * ListByReplicationStorageClassificationsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param storageClassificationName Storage classification name.
     * @param nextLink The nextLink from the previous successful call to the
     *                 ListByReplicationStorageClassifications method.
     * @param options The options parameters.
     */
    _listByReplicationStorageClassificationsNext(resourceName, resourceGroupName, fabricName, storageClassificationName, nextLink, options) {
        return this.client.sendOperationRequest({
            resourceName,
            resourceGroupName,
            fabricName,
            storageClassificationName,
            nextLink,
            options,
        }, listByReplicationStorageClassificationsNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$6);
    }
}
// Operation Specifications
const serializer$8 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationStorageClassificationsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageClassificationMappingCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        storageClassificationName,
    ],
    headerParameters: [accept],
    serializer: serializer$8,
};
const getOperationSpec$8 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageClassificationMapping,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        storageClassificationName,
        storageClassificationMappingName,
    ],
    headerParameters: [accept],
    serializer: serializer$8,
};
const createOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: StorageClassificationMapping,
        },
        201: {
            bodyMapper: StorageClassificationMapping,
        },
        202: {
            bodyMapper: StorageClassificationMapping,
        },
        204: {
            bodyMapper: StorageClassificationMapping,
        },
    },
    requestBody: pairingInput,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        storageClassificationName,
        storageClassificationMappingName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$8,
};
const deleteOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}/replicationStorageClassificationMappings/{storageClassificationMappingName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        storageClassificationName,
        storageClassificationMappingName,
    ],
    serializer: serializer$8,
};
const listOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationStorageClassificationMappings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageClassificationMappingCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$8,
};
const listByReplicationStorageClassificationsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageClassificationMappingCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
        storageClassificationName,
    ],
    headerParameters: [accept],
    serializer: serializer$8,
};
const listNextOperationSpec$6 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: StorageClassificationMappingCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$8,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationvCenters operations. */
class ReplicationvCentersImpl {
    /**
     * Initialize a new instance of the class ReplicationvCenters class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the vCenter servers registered in a fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        const iter = this.listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings);
            },
        };
    }
    listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listByReplicationFabricsPagingAll(resourceName, resourceGroupName, fabricName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByReplicationFabricsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByReplicationFabricsPagingPage(resourceName, resourceGroupName, fabricName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the vCenter servers registered in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists the vCenter servers registered in a fabric.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param options The options parameters.
     */
    _listByReplicationFabrics(resourceName, resourceGroupName, fabricName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, options }, listByReplicationFabricsOperationSpec);
    }
    /**
     * Gets the details of a registered vCenter server(Add vCenter server).
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param vcenterName vcenter name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, fabricName, vcenterName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, vcenterName, options }, getOperationSpec$7);
    }
    /**
     * The operation to create a vCenter object..
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param vcenterName vcenter name.
     * @param addVCenterRequest The input to the add vCenter operation.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, fabricName, vcenterName, addVCenterRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    vcenterName,
                    addVCenterRequest,
                    options,
                },
                spec: createOperationSpec$4,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to create a vCenter object..
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param vcenterName vcenter name.
     * @param addVCenterRequest The input to the add vCenter operation.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, fabricName, vcenterName, addVCenterRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, fabricName, vcenterName, addVCenterRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to remove(unregister) a registered vCenter server from the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param vcenterName vcenter name.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, fabricName, vcenterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    vcenterName,
                    options,
                },
                spec: deleteOperationSpec$2,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to remove(unregister) a registered vCenter server from the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param vcenterName vcenter name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, fabricName, vcenterName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, fabricName, vcenterName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to update a registered vCenter.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param vcenterName vcenter name.
     * @param updateVCenterRequest The input to the update vCenter operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceName, resourceGroupName, fabricName, vcenterName, updateVCenterRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    fabricName,
                    vcenterName,
                    updateVCenterRequest,
                    options,
                },
                spec: updateOperationSpec$2,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to update a registered vCenter.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param vcenterName vcenter name.
     * @param updateVCenterRequest The input to the update vCenter operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceName, resourceGroupName, fabricName, vcenterName, updateVCenterRequest, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceName, resourceGroupName, fabricName, vcenterName, updateVCenterRequest, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Lists the vCenter servers registered in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$5);
    }
    /**
     * ListByReplicationFabricsNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param fabricName Fabric name.
     * @param nextLink The nextLink from the previous successful call to the ListByReplicationFabrics
     *                 method.
     * @param options The options parameters.
     */
    _listByReplicationFabricsNext(resourceName, resourceGroupName, fabricName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, fabricName, nextLink, options }, listByReplicationFabricsNextOperationSpec);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$5);
    }
}
// Operation Specifications
const serializer$7 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listByReplicationFabricsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VCenterCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$7,
};
const getOperationSpec$7 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VCenter,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        vcenterName,
    ],
    headerParameters: [accept],
    serializer: serializer$7,
};
const createOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: VCenter,
        },
        201: {
            bodyMapper: VCenter,
        },
        202: {
            bodyMapper: VCenter,
        },
        204: {
            bodyMapper: VCenter,
        },
    },
    requestBody: addVCenterRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        vcenterName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7,
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        vcenterName,
    ],
    serializer: serializer$7,
};
const updateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: VCenter,
        },
        201: {
            bodyMapper: VCenter,
        },
        202: {
            bodyMapper: VCenter,
        },
        204: {
            bodyMapper: VCenter,
        },
    },
    requestBody: updateVCenterRequest,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        fabricName,
        vcenterName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$7,
};
const listOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationvCenters",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VCenterCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$7,
};
const listByReplicationFabricsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VCenterCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
        fabricName,
    ],
    headerParameters: [accept],
    serializer: serializer$7,
};
const listNextOperationSpec$5 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VCenterCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$7,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationJobs operations. */
class ReplicationJobsImpl {
    /**
     * Initialize a new instance of the class ReplicationJobs class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of Azure Site Recovery Jobs for the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of Azure Site Recovery Jobs for the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$4);
    }
    /**
     * Get the details of an Azure Site Recovery job.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobName Job identifier.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, jobName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, jobName, options }, getOperationSpec$6);
    }
    /**
     * The operation to cancel an Azure Site Recovery job.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobName Job identifier.
     * @param options The options parameters.
     */
    beginCancel(resourceName, resourceGroupName, jobName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, jobName, options },
                spec: cancelOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to cancel an Azure Site Recovery job.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobName Job identifier.
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceName, resourceGroupName, jobName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCancel(resourceName, resourceGroupName, jobName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to restart an Azure Site Recovery job.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobName Job identifier.
     * @param options The options parameters.
     */
    beginRestart(resourceName, resourceGroupName, jobName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, jobName, options },
                spec: restartOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to restart an Azure Site Recovery job.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobName Job identifier.
     * @param options The options parameters.
     */
    beginRestartAndWait(resourceName, resourceGroupName, jobName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRestart(resourceName, resourceGroupName, jobName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to resume an Azure Site Recovery job.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobName Job identifier.
     * @param resumeJobParams Resume rob comments.
     * @param options The options parameters.
     */
    beginResume(resourceName, resourceGroupName, jobName, resumeJobParams, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    jobName,
                    resumeJobParams,
                    options,
                },
                spec: resumeOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to resume an Azure Site Recovery job.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobName Job identifier.
     * @param resumeJobParams Resume rob comments.
     * @param options The options parameters.
     */
    beginResumeAndWait(resourceName, resourceGroupName, jobName, resumeJobParams, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginResume(resourceName, resourceGroupName, jobName, resumeJobParams, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to export the details of the Azure Site Recovery jobs of the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobQueryParameter job query filter.
     * @param options The options parameters.
     */
    beginExport(resourceName, resourceGroupName, jobQueryParameter, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, jobQueryParameter, options },
                spec: exportOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to export the details of the Azure Site Recovery jobs of the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param jobQueryParameter job query filter.
     * @param options The options parameters.
     */
    beginExportAndWait(resourceName, resourceGroupName, jobQueryParameter, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginExport(resourceName, resourceGroupName, jobQueryParameter, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$4);
    }
}
// Operation Specifications
const serializer$6 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobCollection,
        },
    },
    queryParameters: [apiVersion, filter],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$6,
};
const getOperationSpec$6 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Job,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        jobName,
    ],
    headerParameters: [accept],
    serializer: serializer$6,
};
const cancelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Job,
        },
        201: {
            bodyMapper: Job,
        },
        202: {
            bodyMapper: Job,
        },
        204: {
            bodyMapper: Job,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        jobName,
    ],
    headerParameters: [accept],
    serializer: serializer$6,
};
const restartOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/restart",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Job,
        },
        201: {
            bodyMapper: Job,
        },
        202: {
            bodyMapper: Job,
        },
        204: {
            bodyMapper: Job,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        jobName,
    ],
    headerParameters: [accept],
    serializer: serializer$6,
};
const resumeOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/{jobName}/resume",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Job,
        },
        201: {
            bodyMapper: Job,
        },
        202: {
            bodyMapper: Job,
        },
        204: {
            bodyMapper: Job,
        },
    },
    requestBody: resumeJobParams,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        jobName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6,
};
const exportOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationJobs/export",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Job,
        },
        201: {
            bodyMapper: Job,
        },
        202: {
            bodyMapper: Job,
        },
        204: {
            bodyMapper: Job,
        },
    },
    requestBody: jobQueryParameter,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$6,
};
const listNextOperationSpec$4 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: JobCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$6,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationPolicies operations. */
class ReplicationPoliciesImpl {
    /**
     * Initialize a new instance of the class ReplicationPolicies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the replication policies for a vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the replication policies for a vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$3);
    }
    /**
     * Gets the details of a replication policy.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Replication policy name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, policyName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, policyName, options }, getOperationSpec$5);
    }
    /**
     * The operation to create a replication policy.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Replication policy name.
     * @param input Create policy input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, policyName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, policyName, input, options },
                spec: createOperationSpec$3,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to create a replication policy.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Replication policy name.
     * @param input Create policy input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, policyName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, policyName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to delete a replication policy.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Replication policy name.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, policyName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, policyName, options },
                spec: deleteOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to delete a replication policy.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Replication policy name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, policyName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, policyName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to update a replication policy.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Policy Id.
     * @param input Update Policy Input.
     * @param options The options parameters.
     */
    beginUpdate(resourceName, resourceGroupName, policyName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, policyName, input, options },
                spec: updateOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to update a replication policy.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param policyName Policy Id.
     * @param input Update Policy Input.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceName, resourceGroupName, policyName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceName, resourceGroupName, policyName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$3);
    }
}
// Operation Specifications
const serializer$5 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$5,
};
const getOperationSpec$5 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Policy,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        policyName,
    ],
    headerParameters: [accept],
    serializer: serializer$5,
};
const createOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Policy,
        },
        201: {
            bodyMapper: Policy,
        },
        202: {
            bodyMapper: Policy,
        },
        204: {
            bodyMapper: Policy,
        },
    },
    requestBody: input7,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        policyName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5,
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        policyName,
    ],
    serializer: serializer$5,
};
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationPolicies/{policyName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Policy,
        },
        201: {
            bodyMapper: Policy,
        },
        202: {
            bodyMapper: Policy,
        },
        204: {
            bodyMapper: Policy,
        },
    },
    requestBody: input8,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        policyName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$5,
};
const listNextOperationSpec$3 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: PolicyCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$5,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationProtectionIntents operations. */
class ReplicationProtectionIntentsImpl {
    /**
     * Initialize a new instance of the class ReplicationProtectionIntents class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of ASR replication protection intent objects in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of ASR replication protection intent objects in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$2);
    }
    /**
     * Gets the details of an ASR replication protection intent.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param intentObjectName Replication protection intent name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, intentObjectName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, intentObjectName, options }, getOperationSpec$4);
    }
    /**
     * The operation to create an ASR replication protection intent item.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param intentObjectName A name for the replication protection item.
     * @param input Create Protection Intent Input.
     * @param options The options parameters.
     */
    create(resourceName, resourceGroupName, intentObjectName, input, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, intentObjectName, input, options }, createOperationSpec$2);
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$2);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionIntents",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationProtectionIntentCollection,
        },
    },
    queryParameters: [
        apiVersion,
        skipToken,
        takeToken,
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$4,
};
const getOperationSpec$4 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionIntents/{intentObjectName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationProtectionIntent,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        intentObjectName,
    ],
    headerParameters: [accept],
    serializer: serializer$4,
};
const createOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionIntents/{intentObjectName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: ReplicationProtectionIntent,
        },
    },
    requestBody: input9,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        intentObjectName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$4,
};
const listNextOperationSpec$2 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ReplicationProtectionIntentCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$4,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationRecoveryPlans operations. */
class ReplicationRecoveryPlansImpl {
    /**
     * Initialize a new instance of the class ReplicationRecoveryPlans class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists the recovery plans in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists the recovery plans in the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec$1);
    }
    /**
     * Gets the details of the recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Name of the recovery plan.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, recoveryPlanName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, recoveryPlanName, options }, getOperationSpec$3);
    }
    /**
     * The operation to create a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    recoveryPlanName,
                    input,
                    options,
                },
                spec: createOperationSpec$1,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to create a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery Plan creation input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, recoveryPlanName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Delete a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param options The options parameters.
     */
    beginDelete(resourceName, resourceGroupName, recoveryPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, recoveryPlanName, options },
                spec: deleteOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Delete a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceName, resourceGroupName, recoveryPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(resourceName, resourceGroupName, recoveryPlanName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to update a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @param options The options parameters.
     */
    beginUpdate(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    recoveryPlanName,
                    input,
                    options,
                },
                spec: updateOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to update a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Update recovery plan input.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(resourceName, resourceGroupName, recoveryPlanName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to cancel the failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param options The options parameters.
     */
    beginFailoverCancel(resourceName, resourceGroupName, recoveryPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, recoveryPlanName, options },
                spec: failoverCancelOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to cancel the failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param options The options parameters.
     */
    beginFailoverCancelAndWait(resourceName, resourceGroupName, recoveryPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginFailoverCancel(resourceName, resourceGroupName, recoveryPlanName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to commit the failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param options The options parameters.
     */
    beginFailoverCommit(resourceName, resourceGroupName, recoveryPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, recoveryPlanName, options },
                spec: failoverCommitOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to commit the failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param options The options parameters.
     */
    beginFailoverCommitAndWait(resourceName, resourceGroupName, recoveryPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginFailoverCommit(resourceName, resourceGroupName, recoveryPlanName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to start the planned failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param options The options parameters.
     */
    beginPlannedFailover(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    recoveryPlanName,
                    input,
                    options,
                },
                spec: plannedFailoverOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to start the planned failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Failover input.
     * @param options The options parameters.
     */
    beginPlannedFailoverAndWait(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginPlannedFailover(resourceName, resourceGroupName, recoveryPlanName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param options The options parameters.
     */
    beginReprotect(resourceName, resourceGroupName, recoveryPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, recoveryPlanName, options },
                spec: reprotectOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to reprotect(reverse replicate) a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param options The options parameters.
     */
    beginReprotectAndWait(resourceName, resourceGroupName, recoveryPlanName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginReprotect(resourceName, resourceGroupName, recoveryPlanName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to start the test failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover input.
     * @param options The options parameters.
     */
    beginTestFailover(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    recoveryPlanName,
                    input,
                    options,
                },
                spec: testFailoverOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to start the test failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover input.
     * @param options The options parameters.
     */
    beginTestFailoverAndWait(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTestFailover(resourceName, resourceGroupName, recoveryPlanName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to cleanup test failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover cleanup input.
     * @param options The options parameters.
     */
    beginTestFailoverCleanup(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    recoveryPlanName,
                    input,
                    options,
                },
                spec: testFailoverCleanupOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to cleanup test failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan test failover cleanup input.
     * @param options The options parameters.
     */
    beginTestFailoverCleanupAndWait(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginTestFailoverCleanup(resourceName, resourceGroupName, recoveryPlanName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * The operation to start the unplanned failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan unplanned failover input.
     * @param options The options parameters.
     */
    beginUnplannedFailover(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    recoveryPlanName,
                    input,
                    options,
                },
                spec: unplannedFailoverOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to start the unplanned failover of a recovery plan.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param recoveryPlanName Recovery plan name.
     * @param input Recovery plan unplanned failover input.
     * @param options The options parameters.
     */
    beginUnplannedFailoverAndWait(resourceName, resourceGroupName, recoveryPlanName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUnplannedFailover(resourceName, resourceGroupName, recoveryPlanName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec$1);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryPlanCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$3,
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryPlan,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    headerParameters: [accept],
    serializer: serializer$3,
};
const createOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: RecoveryPlan,
        },
        201: {
            bodyMapper: RecoveryPlan,
        },
        202: {
            bodyMapper: RecoveryPlan,
        },
        204: {
            bodyMapper: RecoveryPlan,
        },
    },
    requestBody: input10,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3,
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
    httpMethod: "DELETE",
    responses: { 200: {}, 201: {}, 202: {}, 204: {} },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    serializer: serializer$3,
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: RecoveryPlan,
        },
        201: {
            bodyMapper: RecoveryPlan,
        },
        202: {
            bodyMapper: RecoveryPlan,
        },
        204: {
            bodyMapper: RecoveryPlan,
        },
    },
    requestBody: input11,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3,
};
const failoverCancelOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RecoveryPlan,
        },
        201: {
            bodyMapper: RecoveryPlan,
        },
        202: {
            bodyMapper: RecoveryPlan,
        },
        204: {
            bodyMapper: RecoveryPlan,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    headerParameters: [accept],
    serializer: serializer$3,
};
const failoverCommitOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/failoverCommit",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RecoveryPlan,
        },
        201: {
            bodyMapper: RecoveryPlan,
        },
        202: {
            bodyMapper: RecoveryPlan,
        },
        204: {
            bodyMapper: RecoveryPlan,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    headerParameters: [accept],
    serializer: serializer$3,
};
const plannedFailoverOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/plannedFailover",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RecoveryPlan,
        },
        201: {
            bodyMapper: RecoveryPlan,
        },
        202: {
            bodyMapper: RecoveryPlan,
        },
        204: {
            bodyMapper: RecoveryPlan,
        },
    },
    requestBody: input12,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3,
};
const reprotectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/reProtect",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RecoveryPlan,
        },
        201: {
            bodyMapper: RecoveryPlan,
        },
        202: {
            bodyMapper: RecoveryPlan,
        },
        204: {
            bodyMapper: RecoveryPlan,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    headerParameters: [accept],
    serializer: serializer$3,
};
const testFailoverOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RecoveryPlan,
        },
        201: {
            bodyMapper: RecoveryPlan,
        },
        202: {
            bodyMapper: RecoveryPlan,
        },
        204: {
            bodyMapper: RecoveryPlan,
        },
    },
    requestBody: input13,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3,
};
const testFailoverCleanupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailoverCleanup",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RecoveryPlan,
        },
        201: {
            bodyMapper: RecoveryPlan,
        },
        202: {
            bodyMapper: RecoveryPlan,
        },
        204: {
            bodyMapper: RecoveryPlan,
        },
    },
    requestBody: input14,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3,
};
const unplannedFailoverOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/unplannedFailover",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: RecoveryPlan,
        },
        201: {
            bodyMapper: RecoveryPlan,
        },
        202: {
            bodyMapper: RecoveryPlan,
        },
        204: {
            bodyMapper: RecoveryPlan,
        },
    },
    requestBody: input15,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        recoveryPlanName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer: serializer$3,
};
const listNextOperationSpec$1 = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RecoveryPlanCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$3,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing SupportedOperatingSystemsOperations operations. */
class SupportedOperatingSystemsOperationsImpl {
    /**
     * Initialize a new instance of the class SupportedOperatingSystemsOperations class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the data of supported operating systems by SRS.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, getOperationSpec$2);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationSupportedOperatingSystems",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: SupportedOperatingSystems,
        },
    },
    queryParameters: [apiVersion, instanceType],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$2,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing ReplicationVaultHealth operations. */
class ReplicationVaultHealthImpl {
    /**
     * Initialize a new instance of the class ReplicationVaultHealth class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the health details of the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, getOperationSpec$1);
    }
    /**
     * Refreshes health summary of the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    beginRefresh(resourceName, resourceGroupName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: { resourceName, resourceGroupName, options },
                spec: refreshOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * Refreshes health summary of the vault.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    beginRefreshAndWait(resourceName, resourceGroupName, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRefresh(resourceName, resourceGroupName, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultHealth",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultHealthDetails,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$1,
};
const refreshOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultHealth/default/refresh",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: VaultHealthDetails,
        },
        201: {
            bodyMapper: VaultHealthDetails,
        },
        202: {
            bodyMapper: VaultHealthDetails,
        },
        204: {
            bodyMapper: VaultHealthDetails,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer: serializer$1,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing ReplicationVaultSetting operations. */
class ReplicationVaultSettingImpl {
    /**
     * Initialize a new instance of the class ReplicationVaultSetting class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the list of vault setting. This includes the Migration Hub connection settings.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    list(resourceName, resourceGroupName, options) {
        const iter = this.listPagingAll(resourceName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listPagingPage(resourceName, resourceGroupName, options, settings);
            },
        };
    }
    listPagingPage(resourceName, resourceGroupName, options, settings) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib.__await(this._list(resourceName, resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
            while (continuationToken) {
                result = yield tslib.__await(this._listNext(resourceName, resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield tslib.__await(page);
            }
        });
    }
    listPagingAll(resourceName, resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listPagingPage(resourceName, resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets the list of vault setting. This includes the Migration Hub connection settings.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param options The options parameters.
     */
    _list(resourceName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, options }, listOperationSpec);
    }
    /**
     * Gets the vault setting. This includes the Migration Hub connection settings.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param vaultSettingName Vault setting name.
     * @param options The options parameters.
     */
    get(resourceName, resourceGroupName, vaultSettingName, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, vaultSettingName, options }, getOperationSpec);
    }
    /**
     * The operation to configure vault setting.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param vaultSettingName Vault setting name.
     * @param input Vault setting creation input.
     * @param options The options parameters.
     */
    beginCreate(resourceName, resourceGroupName, vaultSettingName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperationFn = (args, spec) => tslib.__awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON(),
                    },
                };
            });
            const lro = createLroSpec({
                sendOperationFn,
                args: {
                    resourceName,
                    resourceGroupName,
                    vaultSettingName,
                    input,
                    options,
                },
                spec: createOperationSpec,
            });
            const poller = yield coreLro.createHttpPoller(lro, {
                restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
            });
            yield poller.poll();
            return poller;
        });
    }
    /**
     * The operation to configure vault setting.
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param vaultSettingName Vault setting name.
     * @param input Vault setting creation input.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceName, resourceGroupName, vaultSettingName, input, options) {
        return tslib.__awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreate(resourceName, resourceGroupName, vaultSettingName, input, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * ListNext
     * @param resourceName The name of the recovery services vault.
     * @param resourceGroupName The name of the resource group where the recovery services vault is
     *                          present.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    _listNext(resourceName, resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceName, resourceGroupName, nextLink, options }, listNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultSettings",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultSettingCollection,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
    ],
    headerParameters: [accept],
    serializer,
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultSettings/{vaultSettingName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultSetting,
        },
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        vaultSettingName,
    ],
    headerParameters: [accept],
    serializer,
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationVaultSettings/{vaultSettingName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: VaultSetting,
        },
        201: {
            bodyMapper: VaultSetting,
        },
        202: {
            bodyMapper: VaultSetting,
        },
        204: {
            bodyMapper: VaultSetting,
        },
    },
    requestBody: input16,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        resourceName,
        vaultSettingName,
    ],
    headerParameters: [accept, contentType],
    mediaType: "json",
    serializer,
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: VaultSettingCollection,
        },
    },
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId,
        nextLink,
        resourceName,
    ],
    headerParameters: [accept],
    serializer,
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class SiteRecoveryManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the SiteRecoveryManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The subscription Id.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials,
        };
        const packageDetails = `azsdk-js-arm-recoveryservices-siterecovery/5.2.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix,
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName,
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge,
                },
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2023-08-01";
        this.operations = new OperationsImpl(this);
        this.replicationAlertSettings = new ReplicationAlertSettingsImpl(this);
        this.replicationAppliances = new ReplicationAppliancesImpl(this);
        this.replicationEligibilityResultsOperations =
            new ReplicationEligibilityResultsOperationsImpl(this);
        this.replicationEvents = new ReplicationEventsImpl(this);
        this.replicationFabrics = new ReplicationFabricsImpl(this);
        this.replicationLogicalNetworks = new ReplicationLogicalNetworksImpl(this);
        this.replicationNetworks = new ReplicationNetworksImpl(this);
        this.replicationNetworkMappings = new ReplicationNetworkMappingsImpl(this);
        this.replicationProtectionContainers =
            new ReplicationProtectionContainersImpl(this);
        this.replicationMigrationItems = new ReplicationMigrationItemsImpl(this);
        this.migrationRecoveryPoints = new MigrationRecoveryPointsImpl(this);
        this.replicationProtectableItems = new ReplicationProtectableItemsImpl(this);
        this.replicationProtectedItems = new ReplicationProtectedItemsImpl(this);
        this.recoveryPoints = new RecoveryPointsImpl(this);
        this.targetComputeSizes = new TargetComputeSizesImpl(this);
        this.replicationProtectionContainerMappings =
            new ReplicationProtectionContainerMappingsImpl(this);
        this.replicationRecoveryServicesProviders =
            new ReplicationRecoveryServicesProvidersImpl(this);
        this.replicationStorageClassifications =
            new ReplicationStorageClassificationsImpl(this);
        this.replicationStorageClassificationMappings =
            new ReplicationStorageClassificationMappingsImpl(this);
        this.replicationvCenters = new ReplicationvCentersImpl(this);
        this.replicationJobs = new ReplicationJobsImpl(this);
        this.replicationPolicies = new ReplicationPoliciesImpl(this);
        this.replicationProtectionIntents = new ReplicationProtectionIntentsImpl(this);
        this.replicationRecoveryPlans = new ReplicationRecoveryPlansImpl(this);
        this.supportedOperatingSystemsOperations =
            new SupportedOperatingSystemsOperationsImpl(this);
        this.replicationVaultHealth = new ReplicationVaultHealthImpl(this);
        this.replicationVaultSetting = new ReplicationVaultSettingImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            },
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.SiteRecoveryManagementClient = SiteRecoveryManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
