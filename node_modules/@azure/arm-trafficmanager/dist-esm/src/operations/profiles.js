/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing Profiles operations. */
export class ProfilesImpl {
    /**
     * Initialize a new instance of the class Profiles class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all Traffic Manager profiles within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield __await(this._listByResourceGroup(resourceGroupName, options));
            yield yield __await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all Traffic Manager profiles within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, _settings) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            result = yield __await(this._listBySubscription(options));
            yield yield __await(result.value || []);
        });
    }
    listBySubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listBySubscriptionPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     * @param parameters The Traffic Manager name parameters supplied to the
     *                   CheckTrafficManagerNameAvailability operation.
     * @param options The options parameters.
     */
    checkTrafficManagerRelativeDnsNameAvailability(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec);
    }
    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     * @param parameters The Traffic Manager name parameters supplied to the
     *                   CheckTrafficManagerNameAvailability operation.
     * @param options The options parameters.
     */
    checkTrafficManagerNameAvailabilityV2(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, checkTrafficManagerNameAvailabilityV2OperationSpec);
    }
    /**
     * Lists all Traffic Manager profiles within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Lists all Traffic Manager profiles within a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Gets a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param options The options parameters.
     */
    get(resourceGroupName, profileName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, options }, getOperationSpec);
    }
    /**
     * Create or update a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param parameters The Traffic Manager profile parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, profileName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, parameters, options }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile to be deleted.
     * @param options The options parameters.
     */
    delete(resourceGroupName, profileName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, options }, deleteOperationSpec);
    }
    /**
     * Update a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param parameters The Traffic Manager profile parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName, profileName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, parameters, options }, updateOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec = {
    path: "/providers/Microsoft.Network/checkTrafficManagerNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.TrafficManagerNameAvailability
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const checkTrafficManagerNameAvailabilityV2OperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/checkTrafficManagerNameAvailabilityV2",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.TrafficManagerNameAvailability
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProfileListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProfileListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Profile
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.profileName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Profile
        },
        201: {
            bodyMapper: Mappers.Profile
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.profileName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.DeleteOperationResult
        },
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.profileName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.Profile
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.profileName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=profiles.js.map