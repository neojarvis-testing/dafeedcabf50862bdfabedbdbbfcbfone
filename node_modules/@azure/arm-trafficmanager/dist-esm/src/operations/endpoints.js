/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/** Class containing Endpoints operations. */
export class EndpointsImpl {
    /**
     * Initialize a new instance of the class Endpoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Update a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint to be updated.
     * @param endpointName The name of the Traffic Manager endpoint to be updated.
     * @param parameters The Traffic Manager endpoint parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName, profileName, endpointType, endpointName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            profileName,
            endpointType,
            endpointName,
            parameters,
            options
        }, updateOperationSpec);
    }
    /**
     * Gets a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint.
     * @param endpointName The name of the Traffic Manager endpoint.
     * @param options The options parameters.
     */
    get(resourceGroupName, profileName, endpointType, endpointName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, endpointType, endpointName, options }, getOperationSpec);
    }
    /**
     * Create or update a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint to be created or updated.
     * @param endpointName The name of the Traffic Manager endpoint to be created or updated.
     * @param parameters The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, profileName, endpointType, endpointName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            profileName,
            endpointType,
            endpointName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint to be deleted.
     * @param endpointName The name of the Traffic Manager endpoint to be deleted.
     * @param options The options parameters.
     */
    delete(resourceGroupName, profileName, endpointType, endpointName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, endpointType, endpointName, options }, deleteOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.Endpoint
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.profileName,
        Parameters.endpointType,
        Parameters.endpointName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.Endpoint
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.profileName,
        Parameters.endpointType,
        Parameters.endpointName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.Endpoint
        },
        201: {
            bodyMapper: Mappers.Endpoint
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.profileName,
        Parameters.endpointType,
        Parameters.endpointName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: Mappers.DeleteOperationResult
        },
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.resourceGroupName,
        Parameters.profileName,
        Parameters.endpointType,
        Parameters.endpointName,
        Parameters.subscriptionId
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=endpoints.js.map