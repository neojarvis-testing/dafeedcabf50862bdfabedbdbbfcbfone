import { TrafficManagerUserMetricsKeys } from "../operationsInterfaces";
import { TrafficManagerManagementClient } from "../trafficManagerManagementClient";
import { TrafficManagerUserMetricsKeysGetOptionalParams, TrafficManagerUserMetricsKeysGetResponse, TrafficManagerUserMetricsKeysCreateOrUpdateOptionalParams, TrafficManagerUserMetricsKeysCreateOrUpdateResponse, TrafficManagerUserMetricsKeysDeleteOptionalParams, TrafficManagerUserMetricsKeysDeleteResponse } from "../models";
/** Class containing TrafficManagerUserMetricsKeys operations. */
export declare class TrafficManagerUserMetricsKeysImpl implements TrafficManagerUserMetricsKeys {
    private readonly client;
    /**
     * Initialize a new instance of the class TrafficManagerUserMetricsKeys class.
     * @param client Reference to the service client
     */
    constructor(client: TrafficManagerManagementClient);
    /**
     * Get the subscription-level key used for Real User Metrics collection.
     * @param options The options parameters.
     */
    get(options?: TrafficManagerUserMetricsKeysGetOptionalParams): Promise<TrafficManagerUserMetricsKeysGetResponse>;
    /**
     * Create or update a subscription-level key used for Real User Metrics collection.
     * @param options The options parameters.
     */
    createOrUpdate(options?: TrafficManagerUserMetricsKeysCreateOrUpdateOptionalParams): Promise<TrafficManagerUserMetricsKeysCreateOrUpdateResponse>;
    /**
     * Delete a subscription-level key used for Real User Metrics collection.
     * @param options The options parameters.
     */
    delete(options?: TrafficManagerUserMetricsKeysDeleteOptionalParams): Promise<TrafficManagerUserMetricsKeysDeleteResponse>;
}
//# sourceMappingURL=trafficManagerUserMetricsKeys.d.ts.map