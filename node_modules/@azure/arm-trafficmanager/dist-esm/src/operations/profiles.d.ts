import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Profiles } from "../operationsInterfaces";
import { TrafficManagerManagementClient } from "../trafficManagerManagementClient";
import { Profile, ProfilesListByResourceGroupOptionalParams, ProfilesListBySubscriptionOptionalParams, CheckTrafficManagerRelativeDnsNameAvailabilityParameters, ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityOptionalParams, ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse, ProfilesCheckTrafficManagerNameAvailabilityV2OptionalParams, ProfilesCheckTrafficManagerNameAvailabilityV2Response, ProfilesGetOptionalParams, ProfilesGetResponse, ProfilesCreateOrUpdateOptionalParams, ProfilesCreateOrUpdateResponse, ProfilesDeleteOptionalParams, ProfilesDeleteResponse, ProfilesUpdateOptionalParams, ProfilesUpdateResponse } from "../models";
/** Class containing Profiles operations. */
export declare class ProfilesImpl implements Profiles {
    private readonly client;
    /**
     * Initialize a new instance of the class Profiles class.
     * @param client Reference to the service client
     */
    constructor(client: TrafficManagerManagementClient);
    /**
     * Lists all Traffic Manager profiles within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ProfilesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Profile>;
    private listByResourceGroupPagingPage;
    private listByResourceGroupPagingAll;
    /**
     * Lists all Traffic Manager profiles within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ProfilesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Profile>;
    private listBySubscriptionPagingPage;
    private listBySubscriptionPagingAll;
    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     * @param parameters The Traffic Manager name parameters supplied to the
     *                   CheckTrafficManagerNameAvailability operation.
     * @param options The options parameters.
     */
    checkTrafficManagerRelativeDnsNameAvailability(parameters: CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options?: ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityOptionalParams): Promise<ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse>;
    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     * @param parameters The Traffic Manager name parameters supplied to the
     *                   CheckTrafficManagerNameAvailability operation.
     * @param options The options parameters.
     */
    checkTrafficManagerNameAvailabilityV2(parameters: CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options?: ProfilesCheckTrafficManagerNameAvailabilityV2OptionalParams): Promise<ProfilesCheckTrafficManagerNameAvailabilityV2Response>;
    /**
     * Lists all Traffic Manager profiles within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _listByResourceGroup;
    /**
     * Lists all Traffic Manager profiles within a subscription.
     * @param options The options parameters.
     */
    private _listBySubscription;
    /**
     * Gets a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, profileName: string, options?: ProfilesGetOptionalParams): Promise<ProfilesGetResponse>;
    /**
     * Create or update a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param parameters The Traffic Manager profile parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, profileName: string, parameters: Profile, options?: ProfilesCreateOrUpdateOptionalParams): Promise<ProfilesCreateOrUpdateResponse>;
    /**
     * Deletes a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile to be deleted.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, profileName: string, options?: ProfilesDeleteOptionalParams): Promise<ProfilesDeleteResponse>;
    /**
     * Update a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param parameters The Traffic Manager profile parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, profileName: string, parameters: Profile, options?: ProfilesUpdateOptionalParams): Promise<ProfilesUpdateResponse>;
}
//# sourceMappingURL=profiles.d.ts.map