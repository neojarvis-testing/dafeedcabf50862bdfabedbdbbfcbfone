/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Endpoint as EndpointMapper, CheckTrafficManagerRelativeDnsNameAvailabilityParameters as CheckTrafficManagerRelativeDnsNameAvailabilityParametersMapper, Profile as ProfileMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: EndpointMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const profileName = {
    parameterPath: "profileName",
    mapper: {
        serializedName: "profileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const endpointType = {
    parameterPath: "endpointType",
    mapper: {
        serializedName: "endpointType",
        required: true,
        type: {
            name: "Enum",
            allowedValues: ["AzureEndpoints", "ExternalEndpoints", "NestedEndpoints"]
        }
    }
};
export const endpointName = {
    parameterPath: "endpointName",
    mapper: {
        serializedName: "endpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const parameters1 = {
    parameterPath: "parameters",
    mapper: CheckTrafficManagerRelativeDnsNameAvailabilityParametersMapper
};
export const parameters2 = {
    parameterPath: "parameters",
    mapper: ProfileMapper
};
export const heatMapType = {
    parameterPath: "heatMapType",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "heatMapType",
        type: {
            name: "String"
        }
    }
};
export const topLeft = {
    parameterPath: ["options", "topLeft"],
    mapper: {
        constraints: {
            MinItems: 2,
            MaxItems: 2
        },
        serializedName: "topLeft",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Number"
                }
            }
        }
    },
    collectionFormat: "CSV"
};
export const botRight = {
    parameterPath: ["options", "botRight"],
    mapper: {
        constraints: {
            MinItems: 2,
            MaxItems: 2
        },
        serializedName: "botRight",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Number"
                }
            }
        }
    },
    collectionFormat: "CSV"
};
//# sourceMappingURL=parameters.js.map