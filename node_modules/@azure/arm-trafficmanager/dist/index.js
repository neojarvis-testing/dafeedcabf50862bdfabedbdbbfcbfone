'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var coreClient = require('@azure/core-client');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);
var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespace(coreRestPipeline);

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const pageMap = new WeakMap();
/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
function getContinuationToken(page) {
    var _a;
    if (typeof page !== "object" || page === null) {
        return undefined;
    }
    return (_a = pageMap.get(page)) === null || _a === void 0 ? void 0 : _a.continuationToken;
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link EndpointStatus} that the service accepts. */
exports.KnownEndpointStatus = void 0;
(function (KnownEndpointStatus) {
    /** Enabled */
    KnownEndpointStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownEndpointStatus["Disabled"] = "Disabled";
})(exports.KnownEndpointStatus || (exports.KnownEndpointStatus = {}));
/** Known values of {@link EndpointMonitorStatus} that the service accepts. */
exports.KnownEndpointMonitorStatus = void 0;
(function (KnownEndpointMonitorStatus) {
    /** CheckingEndpoint */
    KnownEndpointMonitorStatus["CheckingEndpoint"] = "CheckingEndpoint";
    /** Online */
    KnownEndpointMonitorStatus["Online"] = "Online";
    /** Degraded */
    KnownEndpointMonitorStatus["Degraded"] = "Degraded";
    /** Disabled */
    KnownEndpointMonitorStatus["Disabled"] = "Disabled";
    /** Inactive */
    KnownEndpointMonitorStatus["Inactive"] = "Inactive";
    /** Stopped */
    KnownEndpointMonitorStatus["Stopped"] = "Stopped";
    /** Unmonitored */
    KnownEndpointMonitorStatus["Unmonitored"] = "Unmonitored";
})(exports.KnownEndpointMonitorStatus || (exports.KnownEndpointMonitorStatus = {}));
/** Known values of {@link AlwaysServe} that the service accepts. */
exports.KnownAlwaysServe = void 0;
(function (KnownAlwaysServe) {
    /** Enabled */
    KnownAlwaysServe["Enabled"] = "Enabled";
    /** Disabled */
    KnownAlwaysServe["Disabled"] = "Disabled";
})(exports.KnownAlwaysServe || (exports.KnownAlwaysServe = {}));
/** Known values of {@link ProfileStatus} that the service accepts. */
exports.KnownProfileStatus = void 0;
(function (KnownProfileStatus) {
    /** Enabled */
    KnownProfileStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownProfileStatus["Disabled"] = "Disabled";
})(exports.KnownProfileStatus || (exports.KnownProfileStatus = {}));
/** Known values of {@link TrafficRoutingMethod} that the service accepts. */
exports.KnownTrafficRoutingMethod = void 0;
(function (KnownTrafficRoutingMethod) {
    /** Performance */
    KnownTrafficRoutingMethod["Performance"] = "Performance";
    /** Priority */
    KnownTrafficRoutingMethod["Priority"] = "Priority";
    /** Weighted */
    KnownTrafficRoutingMethod["Weighted"] = "Weighted";
    /** Geographic */
    KnownTrafficRoutingMethod["Geographic"] = "Geographic";
    /** MultiValue */
    KnownTrafficRoutingMethod["MultiValue"] = "MultiValue";
    /** Subnet */
    KnownTrafficRoutingMethod["Subnet"] = "Subnet";
})(exports.KnownTrafficRoutingMethod || (exports.KnownTrafficRoutingMethod = {}));
/** Known values of {@link ProfileMonitorStatus} that the service accepts. */
exports.KnownProfileMonitorStatus = void 0;
(function (KnownProfileMonitorStatus) {
    /** CheckingEndpoints */
    KnownProfileMonitorStatus["CheckingEndpoints"] = "CheckingEndpoints";
    /** Online */
    KnownProfileMonitorStatus["Online"] = "Online";
    /** Degraded */
    KnownProfileMonitorStatus["Degraded"] = "Degraded";
    /** Disabled */
    KnownProfileMonitorStatus["Disabled"] = "Disabled";
    /** Inactive */
    KnownProfileMonitorStatus["Inactive"] = "Inactive";
})(exports.KnownProfileMonitorStatus || (exports.KnownProfileMonitorStatus = {}));
/** Known values of {@link MonitorProtocol} that the service accepts. */
exports.KnownMonitorProtocol = void 0;
(function (KnownMonitorProtocol) {
    /** Http */
    KnownMonitorProtocol["Http"] = "HTTP";
    /** Https */
    KnownMonitorProtocol["Https"] = "HTTPS";
    /** TCP */
    KnownMonitorProtocol["TCP"] = "TCP";
})(exports.KnownMonitorProtocol || (exports.KnownMonitorProtocol = {}));
/** Known values of {@link TrafficViewEnrollmentStatus} that the service accepts. */
exports.KnownTrafficViewEnrollmentStatus = void 0;
(function (KnownTrafficViewEnrollmentStatus) {
    /** Enabled */
    KnownTrafficViewEnrollmentStatus["Enabled"] = "Enabled";
    /** Disabled */
    KnownTrafficViewEnrollmentStatus["Disabled"] = "Disabled";
})(exports.KnownTrafficViewEnrollmentStatus || (exports.KnownTrafficViewEnrollmentStatus = {}));
/** Known values of {@link AllowedEndpointRecordType} that the service accepts. */
exports.KnownAllowedEndpointRecordType = void 0;
(function (KnownAllowedEndpointRecordType) {
    /** DomainName */
    KnownAllowedEndpointRecordType["DomainName"] = "DomainName";
    /** IPv4Address */
    KnownAllowedEndpointRecordType["IPv4Address"] = "IPv4Address";
    /** IPv6Address */
    KnownAllowedEndpointRecordType["IPv6Address"] = "IPv6Address";
    /** Any */
    KnownAllowedEndpointRecordType["Any"] = "Any";
})(exports.KnownAllowedEndpointRecordType || (exports.KnownAllowedEndpointRecordType = {}));

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const EndpointPropertiesSubnetsItem = {
    type: {
        name: "Composite",
        className: "EndpointPropertiesSubnetsItem",
        modelProperties: {
            first: {
                serializedName: "first",
                type: {
                    name: "String"
                }
            },
            last: {
                serializedName: "last",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const EndpointPropertiesCustomHeadersItem = {
    type: {
        name: "Composite",
        className: "EndpointPropertiesCustomHeadersItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CloudErrorBody"
                }
            }
        }
    }
};
const CloudErrorBody = {
    type: {
        name: "Composite",
        className: "CloudErrorBody",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudErrorBody"
                        }
                    }
                }
            }
        }
    }
};
const DeleteOperationResult = {
    type: {
        name: "Composite",
        className: "DeleteOperationResult",
        modelProperties: {
            operationResult: {
                serializedName: "boolean",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const CheckTrafficManagerRelativeDnsNameAvailabilityParameters = {
    type: {
        name: "Composite",
        className: "CheckTrafficManagerRelativeDnsNameAvailabilityParameters",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const TrafficManagerNameAvailability = {
    type: {
        name: "Composite",
        className: "TrafficManagerNameAvailability",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ProfileListResult = {
    type: {
        name: "Composite",
        className: "ProfileListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Profile"
                        }
                    }
                }
            }
        }
    }
};
const DnsConfig = {
    type: {
        name: "Composite",
        className: "DnsConfig",
        modelProperties: {
            relativeName: {
                serializedName: "relativeName",
                type: {
                    name: "String"
                }
            },
            fqdn: {
                serializedName: "fqdn",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            ttl: {
                serializedName: "ttl",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const MonitorConfig = {
    type: {
        name: "Composite",
        className: "MonitorConfig",
        modelProperties: {
            profileMonitorStatus: {
                serializedName: "profileMonitorStatus",
                type: {
                    name: "String"
                }
            },
            protocol: {
                serializedName: "protocol",
                type: {
                    name: "String"
                }
            },
            port: {
                serializedName: "port",
                type: {
                    name: "Number"
                }
            },
            path: {
                serializedName: "path",
                type: {
                    name: "String"
                }
            },
            intervalInSeconds: {
                serializedName: "intervalInSeconds",
                type: {
                    name: "Number"
                }
            },
            timeoutInSeconds: {
                serializedName: "timeoutInSeconds",
                type: {
                    name: "Number"
                }
            },
            toleratedNumberOfFailures: {
                serializedName: "toleratedNumberOfFailures",
                type: {
                    name: "Number"
                }
            },
            customHeaders: {
                serializedName: "customHeaders",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MonitorConfigCustomHeadersItem"
                        }
                    }
                }
            },
            expectedStatusCodeRanges: {
                serializedName: "expectedStatusCodeRanges",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MonitorConfigExpectedStatusCodeRangesItem"
                        }
                    }
                }
            }
        }
    }
};
const MonitorConfigCustomHeadersItem = {
    type: {
        name: "Composite",
        className: "MonitorConfigCustomHeadersItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MonitorConfigExpectedStatusCodeRangesItem = {
    type: {
        name: "Composite",
        className: "MonitorConfigExpectedStatusCodeRangesItem",
        modelProperties: {
            min: {
                serializedName: "min",
                type: {
                    name: "Number"
                }
            },
            max: {
                serializedName: "max",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const Region = {
    type: {
        name: "Composite",
        className: "Region",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            regions: {
                serializedName: "regions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Region"
                        }
                    }
                }
            }
        }
    }
};
const HeatMapEndpoint = {
    type: {
        name: "Composite",
        className: "HeatMapEndpoint",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            endpointId: {
                serializedName: "endpointId",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const TrafficFlow = {
    type: {
        name: "Composite",
        className: "TrafficFlow",
        modelProperties: {
            sourceIp: {
                serializedName: "sourceIp",
                type: {
                    name: "String"
                }
            },
            latitude: {
                serializedName: "latitude",
                type: {
                    name: "Number"
                }
            },
            longitude: {
                serializedName: "longitude",
                type: {
                    name: "Number"
                }
            },
            queryExperiences: {
                serializedName: "queryExperiences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "QueryExperience"
                        }
                    }
                }
            }
        }
    }
};
const QueryExperience = {
    type: {
        name: "Composite",
        className: "QueryExperience",
        modelProperties: {
            endpointId: {
                serializedName: "endpointId",
                required: true,
                type: {
                    name: "Number"
                }
            },
            queryCount: {
                serializedName: "queryCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            latency: {
                serializedName: "latency",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            } })
    }
};
const Endpoint = {
    type: {
        name: "Composite",
        className: "Endpoint",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { targetResourceId: {
                serializedName: "properties.targetResourceId",
                type: {
                    name: "String"
                }
            }, target: {
                serializedName: "properties.target",
                type: {
                    name: "String"
                }
            }, endpointStatus: {
                serializedName: "properties.endpointStatus",
                type: {
                    name: "String"
                }
            }, weight: {
                serializedName: "properties.weight",
                type: {
                    name: "Number"
                }
            }, priority: {
                serializedName: "properties.priority",
                type: {
                    name: "Number"
                }
            }, endpointLocation: {
                serializedName: "properties.endpointLocation",
                type: {
                    name: "String"
                }
            }, endpointMonitorStatus: {
                serializedName: "properties.endpointMonitorStatus",
                type: {
                    name: "String"
                }
            }, minChildEndpoints: {
                serializedName: "properties.minChildEndpoints",
                type: {
                    name: "Number"
                }
            }, minChildEndpointsIPv4: {
                serializedName: "properties.minChildEndpointsIPv4",
                type: {
                    name: "Number"
                }
            }, minChildEndpointsIPv6: {
                serializedName: "properties.minChildEndpointsIPv6",
                type: {
                    name: "Number"
                }
            }, geoMapping: {
                serializedName: "properties.geoMapping",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, subnets: {
                serializedName: "properties.subnets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EndpointPropertiesSubnetsItem"
                        }
                    }
                }
            }, customHeaders: {
                serializedName: "properties.customHeaders",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EndpointPropertiesCustomHeadersItem"
                        }
                    }
                }
            }, alwaysServe: {
                serializedName: "properties.alwaysServe",
                type: {
                    name: "String"
                }
            } })
    }
};
const TrafficManagerGeographicHierarchy = {
    type: {
        name: "Composite",
        className: "TrafficManagerGeographicHierarchy",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { geographicHierarchy: {
                serializedName: "properties.geographicHierarchy",
                type: {
                    name: "Composite",
                    className: "Region"
                }
            } })
    }
};
const HeatMapModel = {
    type: {
        name: "Composite",
        className: "HeatMapModel",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { startTime: {
                serializedName: "properties.startTime",
                type: {
                    name: "DateTime"
                }
            }, endTime: {
                serializedName: "properties.endTime",
                type: {
                    name: "DateTime"
                }
            }, endpoints: {
                serializedName: "properties.endpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HeatMapEndpoint"
                        }
                    }
                }
            }, trafficFlows: {
                serializedName: "properties.trafficFlows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TrafficFlow"
                        }
                    }
                }
            } })
    }
};
const UserMetricsModel = {
    type: {
        name: "Composite",
        className: "UserMetricsModel",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { key: {
                serializedName: "properties.key",
                type: {
                    name: "String"
                }
            } })
    }
};
const Profile = {
    type: {
        name: "Composite",
        className: "Profile",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { profileStatus: {
                serializedName: "properties.profileStatus",
                type: {
                    name: "String"
                }
            }, trafficRoutingMethod: {
                serializedName: "properties.trafficRoutingMethod",
                type: {
                    name: "String"
                }
            }, dnsConfig: {
                serializedName: "properties.dnsConfig",
                type: {
                    name: "Composite",
                    className: "DnsConfig"
                }
            }, monitorConfig: {
                serializedName: "properties.monitorConfig",
                type: {
                    name: "Composite",
                    className: "MonitorConfig"
                }
            }, endpoints: {
                serializedName: "properties.endpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Endpoint"
                        }
                    }
                }
            }, trafficViewEnrollmentStatus: {
                serializedName: "properties.trafficViewEnrollmentStatus",
                type: {
                    name: "String"
                }
            }, allowedEndpointRecordTypes: {
                serializedName: "properties.allowedEndpointRecordTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, maxReturn: {
                serializedName: "properties.maxReturn",
                type: {
                    name: "Number"
                }
            } })
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EndpointPropertiesSubnetsItem: EndpointPropertiesSubnetsItem,
    EndpointPropertiesCustomHeadersItem: EndpointPropertiesCustomHeadersItem,
    Resource: Resource,
    CloudError: CloudError,
    CloudErrorBody: CloudErrorBody,
    DeleteOperationResult: DeleteOperationResult,
    CheckTrafficManagerRelativeDnsNameAvailabilityParameters: CheckTrafficManagerRelativeDnsNameAvailabilityParameters,
    TrafficManagerNameAvailability: TrafficManagerNameAvailability,
    ProfileListResult: ProfileListResult,
    DnsConfig: DnsConfig,
    MonitorConfig: MonitorConfig,
    MonitorConfigCustomHeadersItem: MonitorConfigCustomHeadersItem,
    MonitorConfigExpectedStatusCodeRangesItem: MonitorConfigExpectedStatusCodeRangesItem,
    Region: Region,
    HeatMapEndpoint: HeatMapEndpoint,
    TrafficFlow: TrafficFlow,
    QueryExperience: QueryExperience,
    ProxyResource: ProxyResource,
    TrackedResource: TrackedResource,
    Endpoint: Endpoint,
    TrafficManagerGeographicHierarchy: TrafficManagerGeographicHierarchy,
    HeatMapModel: HeatMapModel,
    UserMetricsModel: UserMetricsModel,
    Profile: Profile
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const parameters = {
    parameterPath: "parameters",
    mapper: Endpoint
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MaxLength: 90,
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const profileName = {
    parameterPath: "profileName",
    mapper: {
        serializedName: "profileName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const endpointType = {
    parameterPath: "endpointType",
    mapper: {
        serializedName: "endpointType",
        required: true,
        type: {
            name: "Enum",
            allowedValues: ["AzureEndpoints", "ExternalEndpoints", "NestedEndpoints"]
        }
    }
};
const endpointName = {
    parameterPath: "endpointName",
    mapper: {
        serializedName: "endpointName",
        required: true,
        type: {
            name: "String"
        }
    }
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-04-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const parameters1 = {
    parameterPath: "parameters",
    mapper: CheckTrafficManagerRelativeDnsNameAvailabilityParameters
};
const parameters2 = {
    parameterPath: "parameters",
    mapper: Profile
};
const heatMapType = {
    parameterPath: "heatMapType",
    mapper: {
        defaultValue: "default",
        isConstant: true,
        serializedName: "heatMapType",
        type: {
            name: "String"
        }
    }
};
const topLeft = {
    parameterPath: ["options", "topLeft"],
    mapper: {
        constraints: {
            MinItems: 2,
            MaxItems: 2
        },
        serializedName: "topLeft",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Number"
                }
            }
        }
    },
    collectionFormat: "CSV"
};
const botRight = {
    parameterPath: ["options", "botRight"],
    mapper: {
        constraints: {
            MinItems: 2,
            MaxItems: 2
        },
        serializedName: "botRight",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Number"
                }
            }
        }
    },
    collectionFormat: "CSV"
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Endpoints operations. */
class EndpointsImpl {
    /**
     * Initialize a new instance of the class Endpoints class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Update a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint to be updated.
     * @param endpointName The name of the Traffic Manager endpoint to be updated.
     * @param parameters The Traffic Manager endpoint parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName, profileName, endpointType, endpointName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            profileName,
            endpointType,
            endpointName,
            parameters,
            options
        }, updateOperationSpec$1);
    }
    /**
     * Gets a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint.
     * @param endpointName The name of the Traffic Manager endpoint.
     * @param options The options parameters.
     */
    get(resourceGroupName, profileName, endpointType, endpointName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, endpointType, endpointName, options }, getOperationSpec$3);
    }
    /**
     * Create or update a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint to be created or updated.
     * @param endpointName The name of the Traffic Manager endpoint to be created or updated.
     * @param parameters The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, profileName, endpointType, endpointName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            profileName,
            endpointType,
            endpointName,
            parameters,
            options
        }, createOrUpdateOperationSpec$2);
    }
    /**
     * Deletes a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint to be deleted.
     * @param endpointName The name of the Traffic Manager endpoint to be deleted.
     * @param options The options parameters.
     */
    delete(resourceGroupName, profileName, endpointType, endpointName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, endpointType, endpointName, options }, deleteOperationSpec$2);
    }
}
// Operation Specifications
const serializer$4 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const updateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Endpoint
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        subscriptionId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};
const getOperationSpec$3 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Endpoint
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$4
};
const createOrUpdateOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Endpoint
        },
        201: {
            bodyMapper: Endpoint
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        subscriptionId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$4
};
const deleteOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/{endpointType}/{endpointName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: DeleteOperationResult
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        profileName,
        endpointType,
        endpointName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$4
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/// <reference lib="esnext.asynciterable" />
/** Class containing Profiles operations. */
class ProfilesImpl {
    /**
     * Initialize a new instance of the class Profiles class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists all Traffic Manager profiles within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    listByResourceGroupPagingPage(resourceGroupName, options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listByResourceGroup(resourceGroupName, options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listByResourceGroupPagingAll(resourceGroupName, options) {
        return tslib.__asyncGenerator(this, arguments, function* listByResourceGroupPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listByResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists all Traffic Manager profiles within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options) {
        const iter = this.listBySubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listBySubscriptionPagingPage(options, settings);
            }
        };
    }
    listBySubscriptionPagingPage(options, _settings) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingPage_1() {
            let result;
            result = yield tslib.__await(this._listBySubscription(options));
            yield yield tslib.__await(result.value || []);
        });
    }
    listBySubscriptionPagingAll(options) {
        return tslib.__asyncGenerator(this, arguments, function* listBySubscriptionPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = tslib.__asyncValues(this.listBySubscriptionPagingPage(options)), _f; _f = yield tslib.__await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield tslib.__await(yield* tslib.__asyncDelegator(tslib.__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib.__await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     * @param parameters The Traffic Manager name parameters supplied to the
     *                   CheckTrafficManagerNameAvailability operation.
     * @param options The options parameters.
     */
    checkTrafficManagerRelativeDnsNameAvailability(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec);
    }
    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     * @param parameters The Traffic Manager name parameters supplied to the
     *                   CheckTrafficManagerNameAvailability operation.
     * @param options The options parameters.
     */
    checkTrafficManagerNameAvailabilityV2(parameters, options) {
        return this.client.sendOperationRequest({ parameters, options }, checkTrafficManagerNameAvailabilityV2OperationSpec);
    }
    /**
     * Lists all Traffic Manager profiles within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Lists all Traffic Manager profiles within a subscription.
     * @param options The options parameters.
     */
    _listBySubscription(options) {
        return this.client.sendOperationRequest({ options }, listBySubscriptionOperationSpec);
    }
    /**
     * Gets a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param options The options parameters.
     */
    get(resourceGroupName, profileName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, options }, getOperationSpec$2);
    }
    /**
     * Create or update a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param parameters The Traffic Manager profile parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, profileName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, parameters, options }, createOrUpdateOperationSpec$1);
    }
    /**
     * Deletes a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile to be deleted.
     * @param options The options parameters.
     */
    delete(resourceGroupName, profileName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, options }, deleteOperationSpec$1);
    }
    /**
     * Update a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param parameters The Traffic Manager profile parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName, profileName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, parameters, options }, updateOperationSpec);
    }
}
// Operation Specifications
const serializer$3 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const checkTrafficManagerRelativeDnsNameAvailabilityOperationSpec = {
    path: "/providers/Microsoft.Network/checkTrafficManagerNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TrafficManagerNameAvailability
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const checkTrafficManagerNameAvailabilityV2OperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/checkTrafficManagerNameAvailabilityV2",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: TrafficManagerNameAvailability
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters1,
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProfileListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const listBySubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficmanagerprofiles",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ProfileListResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer: serializer$3
};
const getOperationSpec$2 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Profile
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        profileName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const createOrUpdateOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Profile
        },
        201: {
            bodyMapper: Profile
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        profileName,
        subscriptionId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};
const deleteOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: DeleteOperationResult
        },
        204: {},
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        profileName,
        subscriptionId
    ],
    headerParameters: [accept],
    serializer: serializer$3
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Profile
        },
        default: {
            bodyMapper: CloudError
        }
    },
    requestBody: parameters2,
    queryParameters: [apiVersion],
    urlParameters: [
        $host,
        resourceGroupName,
        profileName,
        subscriptionId
    ],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer: serializer$3
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing GeographicHierarchies operations. */
class GeographicHierarchiesImpl {
    /**
     * Initialize a new instance of the class GeographicHierarchies class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets the default Geographic Hierarchy used by the Geographic traffic routing method.
     * @param options The options parameters.
     */
    getDefault(options) {
        return this.client.sendOperationRequest({ options }, getDefaultOperationSpec);
    }
}
// Operation Specifications
const serializer$2 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getDefaultOperationSpec = {
    path: "/providers/Microsoft.Network/trafficManagerGeographicHierarchies/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: TrafficManagerGeographicHierarchy
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host],
    headerParameters: [accept],
    serializer: serializer$2
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing HeatMap operations. */
class HeatMapImpl {
    /**
     * Initialize a new instance of the class HeatMap class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets latest heatmap for Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param options The options parameters.
     */
    get(resourceGroupName, profileName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, options }, getOperationSpec$1);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec$1 = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: HeatMapModel
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [
        apiVersion,
        topLeft,
        botRight
    ],
    urlParameters: [
        $host,
        resourceGroupName,
        profileName,
        subscriptionId,
        heatMapType
    ],
    headerParameters: [accept],
    serializer: serializer$1
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing TrafficManagerUserMetricsKeys operations. */
class TrafficManagerUserMetricsKeysImpl {
    /**
     * Initialize a new instance of the class TrafficManagerUserMetricsKeys class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get the subscription-level key used for Real User Metrics collection.
     * @param options The options parameters.
     */
    get(options) {
        return this.client.sendOperationRequest({ options }, getOperationSpec);
    }
    /**
     * Create or update a subscription-level key used for Real User Metrics collection.
     * @param options The options parameters.
     */
    createOrUpdate(options) {
        return this.client.sendOperationRequest({ options }, createOrUpdateOperationSpec);
    }
    /**
     * Delete a subscription-level key used for Real User Metrics collection.
     * @param options The options parameters.
     */
    delete(options) {
        return this.client.sendOperationRequest({ options }, deleteOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: UserMetricsModel
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: UserMetricsModel
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Network/trafficManagerUserMetricsKeys/default",
    httpMethod: "DELETE",
    responses: {
        200: {
            bodyMapper: DeleteOperationResult
        },
        default: {
            bodyMapper: CloudError
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [$host, subscriptionId],
    headerParameters: [accept],
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class TrafficManagerManagementClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the TrafficManagerManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials, subscriptionId, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (subscriptionId === undefined) {
            throw new Error("'subscriptionId' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials
        };
        const packageDetails = `azsdk-js-arm-trafficmanager/6.1.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "https://management.azure.com" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name ===
                coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length == 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline__namespace.bearerTokenAuthenticationPolicyName
            });
            this.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient__namespace.authorizeRequestOnClaimChallenge
                }
            }));
        }
        // Parameter assignments
        this.subscriptionId = subscriptionId;
        // Assigning values to Constant parameters
        this.$host = options.$host || "https://management.azure.com";
        this.apiVersion = options.apiVersion || "2022-04-01";
        this.endpoints = new EndpointsImpl(this);
        this.profiles = new ProfilesImpl(this);
        this.geographicHierarchies = new GeographicHierarchiesImpl(this);
        this.heatMap = new HeatMapImpl(this);
        this.trafficManagerUserMetricsKeys = new TrafficManagerUserMetricsKeysImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            sendRequest(request, next) {
                return tslib.__awaiter(this, void 0, void 0, function* () {
                    const param = request.url.split("?");
                    if (param.length > 1) {
                        const newParams = param[1].split("&").map((item) => {
                            if (item.indexOf("api-version") > -1) {
                                return "api-version=" + apiVersion;
                            }
                            else {
                                return item;
                            }
                        });
                        request.url = param[0] + "?" + newParams.join("&");
                    }
                    return next(request);
                });
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

exports.TrafficManagerManagementClient = TrafficManagerManagementClient;
exports.getContinuationToken = getContinuationToken;
//# sourceMappingURL=index.js.map
