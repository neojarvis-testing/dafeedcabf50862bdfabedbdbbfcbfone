import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';

/**
 * Defines values for AllowedEndpointRecordType. \
 * {@link KnownAllowedEndpointRecordType} can be used interchangeably with AllowedEndpointRecordType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **DomainName** \
 * **IPv4Address** \
 * **IPv6Address** \
 * **Any**
 */
export declare type AllowedEndpointRecordType = string;

/**
 * Defines values for AlwaysServe. \
 * {@link KnownAlwaysServe} can be used interchangeably with AlwaysServe,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type AlwaysServe = string;

/** Parameters supplied to check Traffic Manager name operation. */
export declare interface CheckTrafficManagerRelativeDnsNameAvailabilityParameters {
    /** The name of the resource. */
    name?: string;
    /** The type of the resource. */
    type?: string;
}

/** An error returned by the Azure Resource Manager */
export declare interface CloudError {
    /** The content of the error. */
    error?: CloudErrorBody;
}

/** The content of an error returned by the Azure Resource Manager */
export declare interface CloudErrorBody {
    /** Error code */
    code?: string;
    /** Error message */
    message?: string;
    /** Error target */
    target?: string;
    /** Error details */
    details?: CloudErrorBody[];
}

/** The result of the request or operation. */
export declare interface DeleteOperationResult {
    /**
     * The result of the operation or request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationResult?: boolean;
}

/** Class containing DNS settings in a Traffic Manager profile. */
export declare interface DnsConfig {
    /** The relative DNS name provided by this Traffic Manager profile. This value is combined with the DNS domain name used by Azure Traffic Manager to form the fully-qualified domain name (FQDN) of the profile. */
    relativeName?: string;
    /**
     * The fully-qualified domain name (FQDN) of the Traffic Manager profile. This is formed from the concatenation of the RelativeName with the DNS domain used by Azure Traffic Manager.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly fqdn?: string;
    /** The DNS Time-To-Live (TTL), in seconds. This informs the local DNS resolvers and DNS clients how long to cache DNS responses provided by this Traffic Manager profile. */
    ttl?: number;
}

/** Class representing a Traffic Manager endpoint. */
export declare interface Endpoint extends ProxyResource {
    /** The Azure Resource URI of the of the endpoint. Not applicable to endpoints of type 'ExternalEndpoints'. */
    targetResourceId?: string;
    /** The fully-qualified DNS name or IP address of the endpoint. Traffic Manager returns this value in DNS responses to direct traffic to this endpoint. */
    target?: string;
    /** The status of the endpoint. If the endpoint is Enabled, it is probed for endpoint health and is included in the traffic routing method. */
    endpointStatus?: EndpointStatus;
    /** The weight of this endpoint when using the 'Weighted' traffic routing method. Possible values are from 1 to 1000. */
    weight?: number;
    /** The priority of this endpoint when using the 'Priority' traffic routing method. Possible values are from 1 to 1000, lower values represent higher priority. This is an optional parameter.  If specified, it must be specified on all endpoints, and no two endpoints can share the same priority value. */
    priority?: number;
    /** Specifies the location of the external or nested endpoints when using the 'Performance' traffic routing method. */
    endpointLocation?: string;
    /** The monitoring status of the endpoint. */
    endpointMonitorStatus?: EndpointMonitorStatus;
    /** The minimum number of endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'. */
    minChildEndpoints?: number;
    /** The minimum number of IPv4 (DNS record type A) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'. */
    minChildEndpointsIPv4?: number;
    /** The minimum number of IPv6 (DNS record type AAAA) endpoints that must be available in the child profile in order for the parent profile to be considered available. Only applicable to endpoint of type 'NestedEndpoints'. */
    minChildEndpointsIPv6?: number;
    /** The list of countries/regions mapped to this endpoint when using the 'Geographic' traffic routing method. Please consult Traffic Manager Geographic documentation for a full list of accepted values. */
    geoMapping?: string[];
    /** The list of subnets, IP addresses, and/or address ranges mapped to this endpoint when using the 'Subnet' traffic routing method. An empty list will match all ranges not covered by other endpoints. */
    subnets?: EndpointPropertiesSubnetsItem[];
    /** List of custom headers. */
    customHeaders?: EndpointPropertiesCustomHeadersItem[];
    /** If Always Serve is enabled, probing for endpoint health will be disabled and endpoints will be included in the traffic routing method. */
    alwaysServe?: AlwaysServe;
}

/**
 * Defines values for EndpointMonitorStatus. \
 * {@link KnownEndpointMonitorStatus} can be used interchangeably with EndpointMonitorStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CheckingEndpoint** \
 * **Online** \
 * **Degraded** \
 * **Disabled** \
 * **Inactive** \
 * **Stopped** \
 * **Unmonitored**
 */
export declare type EndpointMonitorStatus = string;

/** Custom header name and value. */
export declare interface EndpointPropertiesCustomHeadersItem {
    /** Header name. */
    name?: string;
    /** Header value. */
    value?: string;
}

/** Subnet first address, scope, and/or last address. */
export declare interface EndpointPropertiesSubnetsItem {
    /** First address in the subnet. */
    first?: string;
    /** Last address in the subnet. */
    last?: string;
    /** Block size (number of leading bits in the subnet mask). */
    scope?: number;
}

/** Interface representing a Endpoints. */
export declare interface Endpoints {
    /**
     * Update a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint to be updated.
     * @param endpointName The name of the Traffic Manager endpoint to be updated.
     * @param parameters The Traffic Manager endpoint parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, profileName: string, endpointType: EndpointType, endpointName: string, parameters: Endpoint, options?: EndpointsUpdateOptionalParams): Promise<EndpointsUpdateResponse>;
    /**
     * Gets a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint.
     * @param endpointName The name of the Traffic Manager endpoint.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, profileName: string, endpointType: EndpointType, endpointName: string, options?: EndpointsGetOptionalParams): Promise<EndpointsGetResponse>;
    /**
     * Create or update a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint to be created or updated.
     * @param endpointName The name of the Traffic Manager endpoint to be created or updated.
     * @param parameters The Traffic Manager endpoint parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, profileName: string, endpointType: EndpointType, endpointName: string, parameters: Endpoint, options?: EndpointsCreateOrUpdateOptionalParams): Promise<EndpointsCreateOrUpdateResponse>;
    /**
     * Deletes a Traffic Manager endpoint.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param endpointType The type of the Traffic Manager endpoint to be deleted.
     * @param endpointName The name of the Traffic Manager endpoint to be deleted.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, profileName: string, endpointType: EndpointType, endpointName: string, options?: EndpointsDeleteOptionalParams): Promise<EndpointsDeleteResponse>;
}

/** Optional parameters. */
export declare interface EndpointsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type EndpointsCreateOrUpdateResponse = Endpoint;

/** Optional parameters. */
export declare interface EndpointsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the delete operation. */
export declare type EndpointsDeleteResponse = DeleteOperationResult;

/** Optional parameters. */
export declare interface EndpointsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type EndpointsGetResponse = Endpoint;

/**
 * Defines values for EndpointStatus. \
 * {@link KnownEndpointStatus} can be used interchangeably with EndpointStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type EndpointStatus = string;

/** Optional parameters. */
export declare interface EndpointsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type EndpointsUpdateResponse = Endpoint;

/** Defines values for EndpointType. */
export declare type EndpointType = "AzureEndpoints" | "ExternalEndpoints" | "NestedEndpoints";

/** Interface representing a GeographicHierarchies. */
export declare interface GeographicHierarchies {
    /**
     * Gets the default Geographic Hierarchy used by the Geographic traffic routing method.
     * @param options The options parameters.
     */
    getDefault(options?: GeographicHierarchiesGetDefaultOptionalParams): Promise<GeographicHierarchiesGetDefaultResponse>;
}

/** Optional parameters. */
export declare interface GeographicHierarchiesGetDefaultOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDefault operation. */
export declare type GeographicHierarchiesGetDefaultResponse = TrafficManagerGeographicHierarchy;

/**
 * Given the last `.value` produced by the `byPage` iterator,
 * returns a continuation token that can be used to begin paging from
 * that point later.
 * @param page An object from accessing `value` on the IteratorResult from a `byPage` iterator.
 * @returns The continuation token that can be passed into byPage() during future calls.
 */
export declare function getContinuationToken(page: unknown): string | undefined;

/** Interface representing a HeatMap. */
export declare interface HeatMap {
    /**
     * Gets latest heatmap for Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, profileName: string, options?: HeatMapGetOptionalParams): Promise<HeatMapGetResponse>;
}

/** Class which is a sparse representation of a Traffic Manager endpoint. */
export declare interface HeatMapEndpoint {
    /** The ARM Resource ID of this Traffic Manager endpoint. */
    resourceId?: string;
    /** A number uniquely identifying this endpoint in query experiences. */
    endpointId?: number;
}

/** Optional parameters. */
export declare interface HeatMapGetOptionalParams extends coreClient.OperationOptions {
    /** The top left latitude,longitude pair of the rectangular viewport to query for. */
    topLeft?: number[];
    /** The bottom right latitude,longitude pair of the rectangular viewport to query for. */
    botRight?: number[];
}

/** Contains response data for the get operation. */
export declare type HeatMapGetResponse = HeatMapModel;

/** Class representing a Traffic Manager HeatMap. */
export declare interface HeatMapModel extends ProxyResource {
    /** The beginning of the time window for this HeatMap, inclusive. */
    startTime?: Date;
    /** The ending of the time window for this HeatMap, exclusive. */
    endTime?: Date;
    /** The endpoints used in this HeatMap calculation. */
    endpoints?: HeatMapEndpoint[];
    /** The traffic flows produced in this HeatMap calculation. */
    trafficFlows?: TrafficFlow[];
}

/** Known values of {@link AllowedEndpointRecordType} that the service accepts. */
export declare enum KnownAllowedEndpointRecordType {
    /** DomainName */
    DomainName = "DomainName",
    /** IPv4Address */
    IPv4Address = "IPv4Address",
    /** IPv6Address */
    IPv6Address = "IPv6Address",
    /** Any */
    Any = "Any"
}

/** Known values of {@link AlwaysServe} that the service accepts. */
export declare enum KnownAlwaysServe {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link EndpointMonitorStatus} that the service accepts. */
export declare enum KnownEndpointMonitorStatus {
    /** CheckingEndpoint */
    CheckingEndpoint = "CheckingEndpoint",
    /** Online */
    Online = "Online",
    /** Degraded */
    Degraded = "Degraded",
    /** Disabled */
    Disabled = "Disabled",
    /** Inactive */
    Inactive = "Inactive",
    /** Stopped */
    Stopped = "Stopped",
    /** Unmonitored */
    Unmonitored = "Unmonitored"
}

/** Known values of {@link EndpointStatus} that the service accepts. */
export declare enum KnownEndpointStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link MonitorProtocol} that the service accepts. */
export declare enum KnownMonitorProtocol {
    /** Http */
    Http = "HTTP",
    /** Https */
    Https = "HTTPS",
    /** TCP */
    TCP = "TCP"
}

/** Known values of {@link ProfileMonitorStatus} that the service accepts. */
export declare enum KnownProfileMonitorStatus {
    /** CheckingEndpoints */
    CheckingEndpoints = "CheckingEndpoints",
    /** Online */
    Online = "Online",
    /** Degraded */
    Degraded = "Degraded",
    /** Disabled */
    Disabled = "Disabled",
    /** Inactive */
    Inactive = "Inactive"
}

/** Known values of {@link ProfileStatus} that the service accepts. */
export declare enum KnownProfileStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Known values of {@link TrafficRoutingMethod} that the service accepts. */
export declare enum KnownTrafficRoutingMethod {
    /** Performance */
    Performance = "Performance",
    /** Priority */
    Priority = "Priority",
    /** Weighted */
    Weighted = "Weighted",
    /** Geographic */
    Geographic = "Geographic",
    /** MultiValue */
    MultiValue = "MultiValue",
    /** Subnet */
    Subnet = "Subnet"
}

/** Known values of {@link TrafficViewEnrollmentStatus} that the service accepts. */
export declare enum KnownTrafficViewEnrollmentStatus {
    /** Enabled */
    Enabled = "Enabled",
    /** Disabled */
    Disabled = "Disabled"
}

/** Class containing endpoint monitoring settings in a Traffic Manager profile. */
export declare interface MonitorConfig {
    /** The profile-level monitoring status of the Traffic Manager profile. */
    profileMonitorStatus?: ProfileMonitorStatus;
    /** The protocol (HTTP, HTTPS or TCP) used to probe for endpoint health. */
    protocol?: MonitorProtocol;
    /** The TCP port used to probe for endpoint health. */
    port?: number;
    /** The path relative to the endpoint domain name used to probe for endpoint health. */
    path?: string;
    /** The monitor interval for endpoints in this profile. This is the interval at which Traffic Manager will check the health of each endpoint in this profile. */
    intervalInSeconds?: number;
    /** The monitor timeout for endpoints in this profile. This is the time that Traffic Manager allows endpoints in this profile to response to the health check. */
    timeoutInSeconds?: number;
    /** The number of consecutive failed health check that Traffic Manager tolerates before declaring an endpoint in this profile Degraded after the next failed health check. */
    toleratedNumberOfFailures?: number;
    /** List of custom headers. */
    customHeaders?: MonitorConfigCustomHeadersItem[];
    /** List of expected status code ranges. */
    expectedStatusCodeRanges?: MonitorConfigExpectedStatusCodeRangesItem[];
}

/** Custom header name and value. */
export declare interface MonitorConfigCustomHeadersItem {
    /** Header name. */
    name?: string;
    /** Header value. */
    value?: string;
}

/** Min and max value of a status code range. */
export declare interface MonitorConfigExpectedStatusCodeRangesItem {
    /** Min status code. */
    min?: number;
    /** Max status code. */
    max?: number;
}

/**
 * Defines values for MonitorProtocol. \
 * {@link KnownMonitorProtocol} can be used interchangeably with MonitorProtocol,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **HTTP** \
 * **HTTPS** \
 * **TCP**
 */
export declare type MonitorProtocol = string;

/** Class representing a Traffic Manager profile. */
export declare interface Profile extends TrackedResource {
    /** The status of the Traffic Manager profile. */
    profileStatus?: ProfileStatus;
    /** The traffic routing method of the Traffic Manager profile. */
    trafficRoutingMethod?: TrafficRoutingMethod;
    /** The DNS settings of the Traffic Manager profile. */
    dnsConfig?: DnsConfig;
    /** The endpoint monitoring settings of the Traffic Manager profile. */
    monitorConfig?: MonitorConfig;
    /** The list of endpoints in the Traffic Manager profile. */
    endpoints?: Endpoint[];
    /** Indicates whether Traffic View is 'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates 'Disabled'. Enabling this feature will increase the cost of the Traffic Manage profile. */
    trafficViewEnrollmentStatus?: TrafficViewEnrollmentStatus;
    /** The list of allowed endpoint record types. */
    allowedEndpointRecordTypes?: AllowedEndpointRecordType[];
    /** Maximum number of endpoints to be returned for MultiValue routing type. */
    maxReturn?: number;
}

/** The list Traffic Manager profiles operation response. */
export declare interface ProfileListResult {
    /** Gets the list of Traffic manager profiles. */
    value?: Profile[];
}

/**
 * Defines values for ProfileMonitorStatus. \
 * {@link KnownProfileMonitorStatus} can be used interchangeably with ProfileMonitorStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CheckingEndpoints** \
 * **Online** \
 * **Degraded** \
 * **Disabled** \
 * **Inactive**
 */
export declare type ProfileMonitorStatus = string;

/** Interface representing a Profiles. */
export declare interface Profiles {
    /**
     * Lists all Traffic Manager profiles within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: ProfilesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Profile>;
    /**
     * Lists all Traffic Manager profiles within a subscription.
     * @param options The options parameters.
     */
    listBySubscription(options?: ProfilesListBySubscriptionOptionalParams): PagedAsyncIterableIterator<Profile>;
    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     * @param parameters The Traffic Manager name parameters supplied to the
     *                   CheckTrafficManagerNameAvailability operation.
     * @param options The options parameters.
     */
    checkTrafficManagerRelativeDnsNameAvailability(parameters: CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options?: ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityOptionalParams): Promise<ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse>;
    /**
     * Checks the availability of a Traffic Manager Relative DNS name.
     * @param parameters The Traffic Manager name parameters supplied to the
     *                   CheckTrafficManagerNameAvailability operation.
     * @param options The options parameters.
     */
    checkTrafficManagerNameAvailabilityV2(parameters: CheckTrafficManagerRelativeDnsNameAvailabilityParameters, options?: ProfilesCheckTrafficManagerNameAvailabilityV2OptionalParams): Promise<ProfilesCheckTrafficManagerNameAvailabilityV2Response>;
    /**
     * Gets a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, profileName: string, options?: ProfilesGetOptionalParams): Promise<ProfilesGetResponse>;
    /**
     * Create or update a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param parameters The Traffic Manager profile parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, profileName: string, parameters: Profile, options?: ProfilesCreateOrUpdateOptionalParams): Promise<ProfilesCreateOrUpdateResponse>;
    /**
     * Deletes a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile to be deleted.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, profileName: string, options?: ProfilesDeleteOptionalParams): Promise<ProfilesDeleteResponse>;
    /**
     * Update a Traffic Manager profile.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param profileName The name of the Traffic Manager profile.
     * @param parameters The Traffic Manager profile parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, profileName: string, parameters: Profile, options?: ProfilesUpdateOptionalParams): Promise<ProfilesUpdateResponse>;
}

/** Optional parameters. */
export declare interface ProfilesCheckTrafficManagerNameAvailabilityV2OptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkTrafficManagerNameAvailabilityV2 operation. */
export declare type ProfilesCheckTrafficManagerNameAvailabilityV2Response = TrafficManagerNameAvailability;

/** Optional parameters. */
export declare interface ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkTrafficManagerRelativeDnsNameAvailability operation. */
export declare type ProfilesCheckTrafficManagerRelativeDnsNameAvailabilityResponse = TrafficManagerNameAvailability;

/** Optional parameters. */
export declare interface ProfilesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ProfilesCreateOrUpdateResponse = Profile;

/** Optional parameters. */
export declare interface ProfilesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the delete operation. */
export declare type ProfilesDeleteResponse = DeleteOperationResult;

/** Optional parameters. */
export declare interface ProfilesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ProfilesGetResponse = Profile;

/** Optional parameters. */
export declare interface ProfilesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type ProfilesListByResourceGroupResponse = ProfileListResult;

/** Optional parameters. */
export declare interface ProfilesListBySubscriptionOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySubscription operation. */
export declare type ProfilesListBySubscriptionResponse = ProfileListResult;

/**
 * Defines values for ProfileStatus. \
 * {@link KnownProfileStatus} can be used interchangeably with ProfileStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type ProfileStatus = string;

/** Optional parameters. */
export declare interface ProfilesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type ProfilesUpdateResponse = Profile;

/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags */
export declare interface ProxyResource extends Resource {
}

/** Class representing a Traffic Manager HeatMap query experience properties. */
export declare interface QueryExperience {
    /** The id of the endpoint from the 'endpoints' array which these queries were routed to. */
    endpointId: number;
    /** The number of queries originating from this location. */
    queryCount: number;
    /** The latency experienced by queries originating from this location. */
    latency?: number;
}

/** Class representing a region in the Geographic hierarchy used with the Geographic traffic routing method. */
export declare interface Region {
    /** The code of the region */
    code?: string;
    /** The name of the region */
    name?: string;
    /** The list of Regions grouped under this Region in the Geographic Hierarchy. */
    regions?: Region[];
}

/** The core properties of ARM resources */
export declare interface Resource {
    /** Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName} */
    id?: string;
    /** The name of the resource */
    name?: string;
    /** The type of the resource. Ex- Microsoft.Network/trafficManagerProfiles. */
    type?: string;
}

/** The resource model definition for a ARM tracked top level resource */
export declare interface TrackedResource extends Resource {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The Azure Region where the resource lives */
    location?: string;
}

/** Class representing a Traffic Manager HeatMap traffic flow properties. */
export declare interface TrafficFlow {
    /** The IP address that this query experience originated from. */
    sourceIp?: string;
    /** The approximate latitude that these queries originated from. */
    latitude?: number;
    /** The approximate longitude that these queries originated from. */
    longitude?: number;
    /** The query experiences produced in this HeatMap calculation. */
    queryExperiences?: QueryExperience[];
}

/** Class representing the Geographic hierarchy used with the Geographic traffic routing method. */
export declare interface TrafficManagerGeographicHierarchy extends ProxyResource {
    /** The region at the root of the hierarchy from all the regions in the hierarchy can be retrieved. */
    geographicHierarchy?: Region;
}

export declare class TrafficManagerManagementClient extends coreClient.ServiceClient {
    $host: string;
    apiVersion: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the TrafficManagerManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: TrafficManagerManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    endpoints: Endpoints;
    profiles: Profiles;
    geographicHierarchies: GeographicHierarchies;
    heatMap: HeatMap;
    trafficManagerUserMetricsKeys: TrafficManagerUserMetricsKeys;
}

/** Optional parameters. */
export declare interface TrafficManagerManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Api Version */
    apiVersion?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Class representing a Traffic Manager Name Availability response. */
export declare interface TrafficManagerNameAvailability {
    /** The relative name. */
    name?: string;
    /** Traffic Manager profile resource type. */
    type?: string;
    /** Describes whether the relative name is available or not. */
    nameAvailable?: boolean;
    /** The reason why the name is not available, when applicable. */
    reason?: string;
    /** Descriptive message that explains why the name is not available, when applicable. */
    message?: string;
}

/** Interface representing a TrafficManagerUserMetricsKeys. */
export declare interface TrafficManagerUserMetricsKeys {
    /**
     * Get the subscription-level key used for Real User Metrics collection.
     * @param options The options parameters.
     */
    get(options?: TrafficManagerUserMetricsKeysGetOptionalParams): Promise<TrafficManagerUserMetricsKeysGetResponse>;
    /**
     * Create or update a subscription-level key used for Real User Metrics collection.
     * @param options The options parameters.
     */
    createOrUpdate(options?: TrafficManagerUserMetricsKeysCreateOrUpdateOptionalParams): Promise<TrafficManagerUserMetricsKeysCreateOrUpdateResponse>;
    /**
     * Delete a subscription-level key used for Real User Metrics collection.
     * @param options The options parameters.
     */
    delete(options?: TrafficManagerUserMetricsKeysDeleteOptionalParams): Promise<TrafficManagerUserMetricsKeysDeleteResponse>;
}

/** Optional parameters. */
export declare interface TrafficManagerUserMetricsKeysCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type TrafficManagerUserMetricsKeysCreateOrUpdateResponse = UserMetricsModel;

/** Optional parameters. */
export declare interface TrafficManagerUserMetricsKeysDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the delete operation. */
export declare type TrafficManagerUserMetricsKeysDeleteResponse = DeleteOperationResult;

/** Optional parameters. */
export declare interface TrafficManagerUserMetricsKeysGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TrafficManagerUserMetricsKeysGetResponse = UserMetricsModel;

/**
 * Defines values for TrafficRoutingMethod. \
 * {@link KnownTrafficRoutingMethod} can be used interchangeably with TrafficRoutingMethod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Performance** \
 * **Priority** \
 * **Weighted** \
 * **Geographic** \
 * **MultiValue** \
 * **Subnet**
 */
export declare type TrafficRoutingMethod = string;

/**
 * Defines values for TrafficViewEnrollmentStatus. \
 * {@link KnownTrafficViewEnrollmentStatus} can be used interchangeably with TrafficViewEnrollmentStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type TrafficViewEnrollmentStatus = string;

/** Class representing Traffic Manager User Metrics. */
export declare interface UserMetricsModel extends ProxyResource {
    /** The key returned by the User Metrics operation. */
    key?: string;
}

export { }
