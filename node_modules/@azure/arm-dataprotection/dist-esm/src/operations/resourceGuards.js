/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing ResourceGuards operations. */
export class ResourceGuardsImpl {
    /**
     * Initialize a new instance of the class ResourceGuards class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Returns ResourceGuards collection belonging to a subscription.
     * @param options The options parameters.
     */
    listResourcesInSubscription(options) {
        const iter = this.getResourcesInSubscriptionPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getResourcesInSubscriptionPagingPage(options, settings);
            }
        };
    }
    getResourcesInSubscriptionPagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* getResourcesInSubscriptionPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getResourcesInSubscription(options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getResourcesInSubscriptionNext(continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getResourcesInSubscriptionPagingAll(options) {
        return __asyncGenerator(this, arguments, function* getResourcesInSubscriptionPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getResourcesInSubscriptionPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns ResourceGuards collection belonging to a ResourceGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listResourcesInResourceGroup(resourceGroupName, options) {
        const iter = this.getResourcesInResourceGroupPagingAll(resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getResourcesInResourceGroupPagingPage(resourceGroupName, options, settings);
            }
        };
    }
    getResourcesInResourceGroupPagingPage(resourceGroupName, options, settings) {
        return __asyncGenerator(this, arguments, function* getResourcesInResourceGroupPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getResourcesInResourceGroup(resourceGroupName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getResourcesInResourceGroupNext(resourceGroupName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getResourcesInResourceGroupPagingAll(resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* getResourcesInResourceGroupPagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getResourcesInResourceGroupPagingPage(resourceGroupName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    listDisableSoftDeleteRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        const iter = this.getDisableSoftDeleteRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getDisableSoftDeleteRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings);
            }
        };
    }
    getDisableSoftDeleteRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings) {
        return __asyncGenerator(this, arguments, function* getDisableSoftDeleteRequestsObjectsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getDisableSoftDeleteRequestsObjects(resourceGroupName, resourceGuardsName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getDisableSoftDeleteRequestsObjectsNext(resourceGroupName, resourceGuardsName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getDisableSoftDeleteRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options) {
        return __asyncGenerator(this, arguments, function* getDisableSoftDeleteRequestsObjectsPagingAll_1() {
            var _a, e_3, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getDisableSoftDeleteRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    listDeleteResourceGuardProxyRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        const iter = this.getDeleteResourceGuardProxyRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getDeleteResourceGuardProxyRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings);
            }
        };
    }
    getDeleteResourceGuardProxyRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings) {
        return __asyncGenerator(this, arguments, function* getDeleteResourceGuardProxyRequestsObjectsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getDeleteResourceGuardProxyRequestsObjects(resourceGroupName, resourceGuardsName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getDeleteResourceGuardProxyRequestsObjectsNext(resourceGroupName, resourceGuardsName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getDeleteResourceGuardProxyRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options) {
        return __asyncGenerator(this, arguments, function* getDeleteResourceGuardProxyRequestsObjectsPagingAll_1() {
            var _a, e_4, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getDeleteResourceGuardProxyRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    listBackupSecurityPINRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        const iter = this.getBackupSecurityPINRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getBackupSecurityPINRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings);
            }
        };
    }
    getBackupSecurityPINRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings) {
        return __asyncGenerator(this, arguments, function* getBackupSecurityPINRequestsObjectsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getBackupSecurityPINRequestsObjects(resourceGroupName, resourceGuardsName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getBackupSecurityPINRequestsObjectsNext(resourceGroupName, resourceGuardsName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getBackupSecurityPINRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options) {
        return __asyncGenerator(this, arguments, function* getBackupSecurityPINRequestsObjectsPagingAll_1() {
            var _a, e_5, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getBackupSecurityPINRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_5) throw e_5.error; }
            }
        });
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    listDeleteProtectedItemRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        const iter = this.getDeleteProtectedItemRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getDeleteProtectedItemRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings);
            }
        };
    }
    getDeleteProtectedItemRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings) {
        return __asyncGenerator(this, arguments, function* getDeleteProtectedItemRequestsObjectsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getDeleteProtectedItemRequestsObjects(resourceGroupName, resourceGuardsName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getDeleteProtectedItemRequestsObjectsNext(resourceGroupName, resourceGuardsName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getDeleteProtectedItemRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options) {
        return __asyncGenerator(this, arguments, function* getDeleteProtectedItemRequestsObjectsPagingAll_1() {
            var _a, e_6, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getDeleteProtectedItemRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_6) throw e_6.error; }
            }
        });
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    listUpdateProtectionPolicyRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        const iter = this.getUpdateProtectionPolicyRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getUpdateProtectionPolicyRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings);
            }
        };
    }
    getUpdateProtectionPolicyRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings) {
        return __asyncGenerator(this, arguments, function* getUpdateProtectionPolicyRequestsObjectsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getUpdateProtectionPolicyRequestsObjects(resourceGroupName, resourceGuardsName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getUpdateProtectionPolicyRequestsObjectsNext(resourceGroupName, resourceGuardsName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getUpdateProtectionPolicyRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options) {
        return __asyncGenerator(this, arguments, function* getUpdateProtectionPolicyRequestsObjectsPagingAll_1() {
            var _a, e_7, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getUpdateProtectionPolicyRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_7) throw e_7.error; }
            }
        });
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    listUpdateProtectedItemRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        const iter = this.getUpdateProtectedItemRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getUpdateProtectedItemRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings);
            }
        };
    }
    getUpdateProtectedItemRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options, settings) {
        return __asyncGenerator(this, arguments, function* getUpdateProtectedItemRequestsObjectsPagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getUpdateProtectedItemRequestsObjects(resourceGroupName, resourceGuardsName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getUpdateProtectedItemRequestsObjectsNext(resourceGroupName, resourceGuardsName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getUpdateProtectedItemRequestsObjectsPagingAll(resourceGroupName, resourceGuardsName, options) {
        return __asyncGenerator(this, arguments, function* getUpdateProtectedItemRequestsObjectsPagingAll_1() {
            var _a, e_8, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getUpdateProtectedItemRequestsObjectsPagingPage(resourceGroupName, resourceGuardsName, options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a;) {
                    _c = _f.value;
                    _d = false;
                    try {
                        const page = _c;
                        yield __await(yield* __asyncDelegator(__asyncValues(page)));
                    }
                    finally {
                        _d = true;
                    }
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_8) throw e_8.error; }
            }
        });
    }
    /**
     * Returns ResourceGuards collection belonging to a subscription.
     * @param options The options parameters.
     */
    _getResourcesInSubscription(options) {
        return this.client.sendOperationRequest({ options }, getResourcesInSubscriptionOperationSpec);
    }
    /**
     * Returns ResourceGuards collection belonging to a ResourceGroup.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _getResourcesInResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, getResourcesInResourceGroupOperationSpec);
    }
    /**
     * Creates or updates a ResourceGuard resource belonging to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName The name of ResourceGuard
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    put(resourceGroupName, resourceGuardsName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, parameters, options }, putOperationSpec);
    }
    /**
     * Returns a ResourceGuard belonging to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName The name of ResourceGuard
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceGuardsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, options }, getOperationSpec);
    }
    /**
     * Deletes a ResourceGuard resource from the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName The name of ResourceGuard
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceGuardsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, options }, deleteOperationSpec);
    }
    /**
     * Updates a ResourceGuard resource belonging to a resource group. For example, updating tags for a
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName The name of ResourceGuard
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    patch(resourceGroupName, resourceGuardsName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, parameters, options }, patchOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    _getDisableSoftDeleteRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, options }, getDisableSoftDeleteRequestsObjectsOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    _getDeleteResourceGuardProxyRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, options }, getDeleteResourceGuardProxyRequestsObjectsOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    _getBackupSecurityPINRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, options }, getBackupSecurityPINRequestsObjectsOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    _getDeleteProtectedItemRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, options }, getDeleteProtectedItemRequestsObjectsOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    _getUpdateProtectionPolicyRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, options }, getUpdateProtectionPolicyRequestsObjectsOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param options The options parameters.
     */
    _getUpdateProtectedItemRequestsObjects(resourceGroupName, resourceGuardsName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, options }, getUpdateProtectedItemRequestsObjectsOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param requestName
     * @param options The options parameters.
     */
    getDefaultDisableSoftDeleteRequestsObject(resourceGroupName, resourceGuardsName, requestName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, requestName, options }, getDefaultDisableSoftDeleteRequestsObjectOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param requestName
     * @param options The options parameters.
     */
    getDefaultDeleteResourceGuardProxyRequestsObject(resourceGroupName, resourceGuardsName, requestName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, requestName, options }, getDefaultDeleteResourceGuardProxyRequestsObjectOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param requestName
     * @param options The options parameters.
     */
    getDefaultBackupSecurityPINRequestsObject(resourceGroupName, resourceGuardsName, requestName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, requestName, options }, getDefaultBackupSecurityPINRequestsObjectOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param requestName
     * @param options The options parameters.
     */
    getDefaultDeleteProtectedItemRequestsObject(resourceGroupName, resourceGuardsName, requestName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, requestName, options }, getDefaultDeleteProtectedItemRequestsObjectOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param requestName
     * @param options The options parameters.
     */
    getDefaultUpdateProtectionPolicyRequestsObject(resourceGroupName, resourceGuardsName, requestName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, requestName, options }, getDefaultUpdateProtectionPolicyRequestsObjectOperationSpec);
    }
    /**
     * Returns collection of operation request objects for a critical operation protected by the given
     * ResourceGuard resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param requestName
     * @param options The options parameters.
     */
    getDefaultUpdateProtectedItemRequestsObject(resourceGroupName, resourceGuardsName, requestName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, requestName, options }, getDefaultUpdateProtectedItemRequestsObjectOperationSpec);
    }
    /**
     * GetResourcesInSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the GetResourcesInSubscription
     *                 method.
     * @param options The options parameters.
     */
    _getResourcesInSubscriptionNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, getResourcesInSubscriptionNextOperationSpec);
    }
    /**
     * GetResourcesInResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the GetResourcesInResourceGroup
     *                 method.
     * @param options The options parameters.
     */
    _getResourcesInResourceGroupNext(resourceGroupName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, nextLink, options }, getResourcesInResourceGroupNextOperationSpec);
    }
    /**
     * GetDisableSoftDeleteRequestsObjectsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param nextLink The nextLink from the previous successful call to the
     *                 GetDisableSoftDeleteRequestsObjects method.
     * @param options The options parameters.
     */
    _getDisableSoftDeleteRequestsObjectsNext(resourceGroupName, resourceGuardsName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, nextLink, options }, getDisableSoftDeleteRequestsObjectsNextOperationSpec);
    }
    /**
     * GetDeleteResourceGuardProxyRequestsObjectsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param nextLink The nextLink from the previous successful call to the
     *                 GetDeleteResourceGuardProxyRequestsObjects method.
     * @param options The options parameters.
     */
    _getDeleteResourceGuardProxyRequestsObjectsNext(resourceGroupName, resourceGuardsName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, nextLink, options }, getDeleteResourceGuardProxyRequestsObjectsNextOperationSpec);
    }
    /**
     * GetBackupSecurityPINRequestsObjectsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param nextLink The nextLink from the previous successful call to the
     *                 GetBackupSecurityPINRequestsObjects method.
     * @param options The options parameters.
     */
    _getBackupSecurityPINRequestsObjectsNext(resourceGroupName, resourceGuardsName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, nextLink, options }, getBackupSecurityPINRequestsObjectsNextOperationSpec);
    }
    /**
     * GetDeleteProtectedItemRequestsObjectsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param nextLink The nextLink from the previous successful call to the
     *                 GetDeleteProtectedItemRequestsObjects method.
     * @param options The options parameters.
     */
    _getDeleteProtectedItemRequestsObjectsNext(resourceGroupName, resourceGuardsName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, nextLink, options }, getDeleteProtectedItemRequestsObjectsNextOperationSpec);
    }
    /**
     * GetUpdateProtectionPolicyRequestsObjectsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param nextLink The nextLink from the previous successful call to the
     *                 GetUpdateProtectionPolicyRequestsObjects method.
     * @param options The options parameters.
     */
    _getUpdateProtectionPolicyRequestsObjectsNext(resourceGroupName, resourceGuardsName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, nextLink, options }, getUpdateProtectionPolicyRequestsObjectsNextOperationSpec);
    }
    /**
     * GetUpdateProtectedItemRequestsObjectsNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceGuardsName
     * @param nextLink The nextLink from the previous successful call to the
     *                 GetUpdateProtectedItemRequestsObjects method.
     * @param options The options parameters.
     */
    _getUpdateProtectedItemRequestsObjectsNext(resourceGroupName, resourceGuardsName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceGuardsName, nextLink, options }, getUpdateProtectedItemRequestsObjectsNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getResourcesInSubscriptionOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/resourceGuards",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGuardResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const getResourcesInResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGuardResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const putOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGuardResource
        },
        201: {
            bodyMapper: Mappers.ResourceGuardResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters13,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGuardResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const patchOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGuardResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.parameters14,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getDisableSoftDeleteRequestsObjectsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/disableSoftDeleteRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDeleteResourceGuardProxyRequestsObjectsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/deleteResourceGuardProxyRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getBackupSecurityPINRequestsObjectsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/getBackupSecurityPINRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDeleteProtectedItemRequestsObjectsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/deleteProtectedItemRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getUpdateProtectionPolicyRequestsObjectsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/updateProtectionPolicyRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getUpdateProtectedItemRequestsObjectsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/updateProtectedItemRequests",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDefaultDisableSoftDeleteRequestsObjectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/disableSoftDeleteRequests/{requestName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName,
        Parameters.requestName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDefaultDeleteResourceGuardProxyRequestsObjectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/deleteResourceGuardProxyRequests/{requestName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName,
        Parameters.requestName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDefaultBackupSecurityPINRequestsObjectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/getBackupSecurityPINRequests/{requestName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName,
        Parameters.requestName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDefaultDeleteProtectedItemRequestsObjectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/deleteProtectedItemRequests/{requestName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName,
        Parameters.requestName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDefaultUpdateProtectionPolicyRequestsObjectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/updateProtectionPolicyRequests/{requestName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName,
        Parameters.requestName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDefaultUpdateProtectedItemRequestsObjectOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}/updateProtectedItemRequests/{requestName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResource
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceGuardsName,
        Parameters.requestName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getResourcesInSubscriptionNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGuardResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getResourcesInResourceGroupNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ResourceGuardResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDisableSoftDeleteRequestsObjectsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDeleteResourceGuardProxyRequestsObjectsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getBackupSecurityPINRequestsObjectsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getDeleteProtectedItemRequestsObjectsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getUpdateProtectionPolicyRequestsObjectsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getUpdateProtectedItemRequestsObjectsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DppBaseResourceList
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.nextLink,
        Parameters.resourceGuardsName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=resourceGuards.js.map