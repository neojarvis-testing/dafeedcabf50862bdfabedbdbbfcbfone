import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BackupVaults } from "../operationsInterfaces";
import { DataProtectionClient } from "../dataProtectionClient";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import { BackupVaultResource, BackupVaultsGetInSubscriptionOptionalParams, BackupVaultsGetInResourceGroupOptionalParams, BackupVaultsGetOptionalParams, BackupVaultsGetResponse, BackupVaultsCreateOrUpdateOptionalParams, BackupVaultsCreateOrUpdateResponse, BackupVaultsDeleteOptionalParams, PatchResourceRequestInput, BackupVaultsUpdateOptionalParams, BackupVaultsUpdateResponse, CheckNameAvailabilityRequest, BackupVaultsCheckNameAvailabilityOptionalParams, BackupVaultsCheckNameAvailabilityResponse } from "../models";
/** Class containing BackupVaults operations. */
export declare class BackupVaultsImpl implements BackupVaults {
    private readonly client;
    /**
     * Initialize a new instance of the class BackupVaults class.
     * @param client Reference to the service client
     */
    constructor(client: DataProtectionClient);
    /**
     * Returns resource collection belonging to a subscription.
     * @param options The options parameters.
     */
    listInSubscription(options?: BackupVaultsGetInSubscriptionOptionalParams): PagedAsyncIterableIterator<BackupVaultResource>;
    private getInSubscriptionPagingPage;
    private getInSubscriptionPagingAll;
    /**
     * Returns resource collection belonging to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listInResourceGroup(resourceGroupName: string, options?: BackupVaultsGetInResourceGroupOptionalParams): PagedAsyncIterableIterator<BackupVaultResource>;
    private getInResourceGroupPagingPage;
    private getInResourceGroupPagingAll;
    /**
     * Returns resource collection belonging to a subscription.
     * @param options The options parameters.
     */
    private _getInSubscription;
    /**
     * Returns resource collection belonging to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    private _getInResourceGroup;
    /**
     * Returns a resource belonging to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vaultName: string, options?: BackupVaultsGetOptionalParams): Promise<BackupVaultsGetResponse>;
    /**
     * Creates or updates a BackupVault resource belonging to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, vaultName: string, parameters: BackupVaultResource, options?: BackupVaultsCreateOrUpdateOptionalParams): Promise<SimplePollerLike<OperationState<BackupVaultsCreateOrUpdateResponse>, BackupVaultsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a BackupVault resource belonging to a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, vaultName: string, parameters: BackupVaultResource, options?: BackupVaultsCreateOrUpdateOptionalParams): Promise<BackupVaultsCreateOrUpdateResponse>;
    /**
     * Deletes a BackupVault resource from the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, vaultName: string, options?: BackupVaultsDeleteOptionalParams): Promise<SimplePollerLike<OperationState<void>, void>>;
    /**
     * Deletes a BackupVault resource from the resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, vaultName: string, options?: BackupVaultsDeleteOptionalParams): Promise<void>;
    /**
     * Updates a BackupVault resource belonging to a resource group. For example, updating tags for a
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, vaultName: string, parameters: PatchResourceRequestInput, options?: BackupVaultsUpdateOptionalParams): Promise<SimplePollerLike<OperationState<BackupVaultsUpdateResponse>, BackupVaultsUpdateResponse>>;
    /**
     * Updates a BackupVault resource belonging to a resource group. For example, updating tags for a
     * resource.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, vaultName: string, parameters: PatchResourceRequestInput, options?: BackupVaultsUpdateOptionalParams): Promise<BackupVaultsUpdateResponse>;
    /**
     * API to check for resource name availability
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param location The location in which uniqueness will be verified.
     * @param parameters Check name availability request
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName: string, location: string, parameters: CheckNameAvailabilityRequest, options?: BackupVaultsCheckNameAvailabilityOptionalParams): Promise<BackupVaultsCheckNameAvailabilityResponse>;
    /**
     * GetInSubscriptionNext
     * @param nextLink The nextLink from the previous successful call to the GetInSubscription method.
     * @param options The options parameters.
     */
    private _getInSubscriptionNext;
    /**
     * GetInResourceGroupNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param nextLink The nextLink from the previous successful call to the GetInResourceGroup method.
     * @param options The options parameters.
     */
    private _getInResourceGroupNext;
}
//# sourceMappingURL=backupVaults.d.ts.map