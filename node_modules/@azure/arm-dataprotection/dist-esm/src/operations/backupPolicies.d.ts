import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BackupPolicies } from "../operationsInterfaces";
import { DataProtectionClient } from "../dataProtectionClient";
import { BaseBackupPolicyResource, BackupPoliciesListOptionalParams, BackupPoliciesGetOptionalParams, BackupPoliciesGetResponse, BackupPoliciesCreateOrUpdateOptionalParams, BackupPoliciesCreateOrUpdateResponse, BackupPoliciesDeleteOptionalParams } from "../models";
/** Class containing BackupPolicies operations. */
export declare class BackupPoliciesImpl implements BackupPolicies {
    private readonly client;
    /**
     * Initialize a new instance of the class BackupPolicies class.
     * @param client Reference to the service client
     */
    constructor(client: DataProtectionClient);
    /**
     * Returns list of backup policies belonging to a backup vault
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, vaultName: string, options?: BackupPoliciesListOptionalParams): PagedAsyncIterableIterator<BaseBackupPolicyResource>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Returns list of backup policies belonging to a backup vault
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets a backup policy belonging to a backup vault
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param backupPolicyName
     * @param options The options parameters.
     */
    get(resourceGroupName: string, vaultName: string, backupPolicyName: string, options?: BackupPoliciesGetOptionalParams): Promise<BackupPoliciesGetResponse>;
    /**
     * Creates or Updates a backup policy belonging to a backup vault
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param backupPolicyName Name of the policy
     * @param parameters Request body for operation
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, vaultName: string, backupPolicyName: string, parameters: BaseBackupPolicyResource, options?: BackupPoliciesCreateOrUpdateOptionalParams): Promise<BackupPoliciesCreateOrUpdateResponse>;
    /**
     * Deletes a backup policy belonging to a backup vault
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param backupPolicyName
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, vaultName: string, backupPolicyName: string, options?: BackupPoliciesDeleteOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vaultName The name of the backup vault.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=backupPolicies.d.ts.map