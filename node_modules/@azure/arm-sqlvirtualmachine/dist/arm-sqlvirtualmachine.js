/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-azure-js'), require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-azure-js', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.ArmSqlvirtualmachine = {}), global.msRestAzure, global.msRest));
}(this, (function (exports, msRestAzure, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var CloudError = msRestAzure.CloudErrorMapper;
    var BaseResource = msRestAzure.BaseResourceMapper;
    var PrivateIPAddress = {
        serializedName: "PrivateIPAddress",
        type: {
            name: "Composite",
            className: "PrivateIPAddress",
            modelProperties: {
                ipAddress: {
                    serializedName: "ipAddress",
                    type: {
                        name: "String"
                    }
                },
                subnetResourceId: {
                    serializedName: "subnetResourceId",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var LoadBalancerConfiguration = {
        serializedName: "LoadBalancerConfiguration",
        type: {
            name: "Composite",
            className: "LoadBalancerConfiguration",
            modelProperties: {
                privateIpAddress: {
                    serializedName: "privateIpAddress",
                    type: {
                        name: "Composite",
                        className: "PrivateIPAddress"
                    }
                },
                publicIpAddressResourceId: {
                    serializedName: "publicIpAddressResourceId",
                    type: {
                        name: "String"
                    }
                },
                loadBalancerResourceId: {
                    serializedName: "loadBalancerResourceId",
                    type: {
                        name: "String"
                    }
                },
                probePort: {
                    serializedName: "probePort",
                    type: {
                        name: "Number"
                    }
                },
                sqlVirtualMachineInstances: {
                    serializedName: "sqlVirtualMachineInstances",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Resource = {
        serializedName: "Resource",
        type: {
            name: "Composite",
            className: "Resource",
            modelProperties: {
                id: {
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "String"
                    }
                },
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProxyResource = {
        serializedName: "ProxyResource",
        type: {
            name: "Composite",
            className: "ProxyResource",
            modelProperties: __assign({}, Resource.type.modelProperties)
        }
    };
    var AvailabilityGroupListener = {
        serializedName: "AvailabilityGroupListener",
        type: {
            name: "Composite",
            className: "AvailabilityGroupListener",
            modelProperties: __assign(__assign({}, ProxyResource.type.modelProperties), { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, availabilityGroupName: {
                    serializedName: "properties.availabilityGroupName",
                    type: {
                        name: "String"
                    }
                }, loadBalancerConfigurations: {
                    serializedName: "properties.loadBalancerConfigurations",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "LoadBalancerConfiguration"
                            }
                        }
                    }
                }, createDefaultAvailabilityGroupIfNotExist: {
                    serializedName: "properties.createDefaultAvailabilityGroupIfNotExist",
                    type: {
                        name: "Boolean"
                    }
                }, port: {
                    serializedName: "properties.port",
                    type: {
                        name: "Number"
                    }
                } })
        }
    };
    var OperationDisplay = {
        serializedName: "OperationDisplay",
        type: {
            name: "Composite",
            className: "OperationDisplay",
            modelProperties: {
                provider: {
                    readOnly: true,
                    serializedName: "provider",
                    type: {
                        name: "String"
                    }
                },
                resource: {
                    readOnly: true,
                    serializedName: "resource",
                    type: {
                        name: "String"
                    }
                },
                operation: {
                    readOnly: true,
                    serializedName: "operation",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    readOnly: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Operation = {
        serializedName: "Operation",
        type: {
            name: "Composite",
            className: "Operation",
            modelProperties: {
                name: {
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                display: {
                    readOnly: true,
                    serializedName: "display",
                    type: {
                        name: "Composite",
                        className: "OperationDisplay"
                    }
                },
                origin: {
                    readOnly: true,
                    serializedName: "origin",
                    type: {
                        name: "String"
                    }
                },
                properties: {
                    readOnly: true,
                    serializedName: "properties",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Object"
                            }
                        }
                    }
                }
            }
        }
    };
    var WsfcDomainProfile = {
        serializedName: "WsfcDomainProfile",
        type: {
            name: "Composite",
            className: "WsfcDomainProfile",
            modelProperties: {
                domainFqdn: {
                    serializedName: "domainFqdn",
                    type: {
                        name: "String"
                    }
                },
                ouPath: {
                    serializedName: "ouPath",
                    type: {
                        name: "String"
                    }
                },
                clusterBootstrapAccount: {
                    serializedName: "clusterBootstrapAccount",
                    type: {
                        name: "String"
                    }
                },
                clusterOperatorAccount: {
                    serializedName: "clusterOperatorAccount",
                    type: {
                        name: "String"
                    }
                },
                sqlServiceAccount: {
                    serializedName: "sqlServiceAccount",
                    type: {
                        name: "String"
                    }
                },
                fileShareWitnessPath: {
                    serializedName: "fileShareWitnessPath",
                    type: {
                        name: "String"
                    }
                },
                storageAccountUrl: {
                    serializedName: "storageAccountUrl",
                    type: {
                        name: "String"
                    }
                },
                storageAccountPrimaryKey: {
                    serializedName: "storageAccountPrimaryKey",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TrackedResource = {
        serializedName: "TrackedResource",
        type: {
            name: "Composite",
            className: "TrackedResource",
            modelProperties: __assign(__assign({}, Resource.type.modelProperties), { location: {
                    required: true,
                    serializedName: "location",
                    type: {
                        name: "String"
                    }
                }, tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                } })
        }
    };
    var SqlVirtualMachineGroup = {
        serializedName: "SqlVirtualMachineGroup",
        type: {
            name: "Composite",
            className: "SqlVirtualMachineGroup",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, sqlImageOffer: {
                    serializedName: "properties.sqlImageOffer",
                    type: {
                        name: "String"
                    }
                }, sqlImageSku: {
                    serializedName: "properties.sqlImageSku",
                    type: {
                        name: "String"
                    }
                }, scaleType: {
                    readOnly: true,
                    serializedName: "properties.scaleType",
                    type: {
                        name: "String"
                    }
                }, clusterManagerType: {
                    readOnly: true,
                    serializedName: "properties.clusterManagerType",
                    type: {
                        name: "String"
                    }
                }, clusterConfiguration: {
                    readOnly: true,
                    serializedName: "properties.clusterConfiguration",
                    type: {
                        name: "String"
                    }
                }, wsfcDomainProfile: {
                    serializedName: "properties.wsfcDomainProfile",
                    type: {
                        name: "Composite",
                        className: "WsfcDomainProfile"
                    }
                } })
        }
    };
    var SqlVirtualMachineGroupUpdate = {
        serializedName: "SqlVirtualMachineGroupUpdate",
        type: {
            name: "Composite",
            className: "SqlVirtualMachineGroupUpdate",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ResourceIdentity = {
        serializedName: "ResourceIdentity",
        type: {
            name: "Composite",
            className: "ResourceIdentity",
            modelProperties: {
                principalId: {
                    readOnly: true,
                    serializedName: "principalId",
                    type: {
                        name: "Uuid"
                    }
                },
                type: {
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                tenantId: {
                    readOnly: true,
                    serializedName: "tenantId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var WsfcDomainCredentials = {
        serializedName: "WsfcDomainCredentials",
        type: {
            name: "Composite",
            className: "WsfcDomainCredentials",
            modelProperties: {
                clusterBootstrapAccountPassword: {
                    serializedName: "clusterBootstrapAccountPassword",
                    type: {
                        name: "String"
                    }
                },
                clusterOperatorAccountPassword: {
                    serializedName: "clusterOperatorAccountPassword",
                    type: {
                        name: "String"
                    }
                },
                sqlServiceAccountPassword: {
                    serializedName: "sqlServiceAccountPassword",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AutoPatchingSettings = {
        serializedName: "AutoPatchingSettings",
        type: {
            name: "Composite",
            className: "AutoPatchingSettings",
            modelProperties: {
                enable: {
                    serializedName: "enable",
                    type: {
                        name: "Boolean"
                    }
                },
                dayOfWeek: {
                    serializedName: "dayOfWeek",
                    type: {
                        name: "Enum",
                        allowedValues: [
                            "Monday",
                            "Tuesday",
                            "Wednesday",
                            "Thursday",
                            "Friday",
                            "Saturday",
                            "Sunday"
                        ]
                    }
                },
                maintenanceWindowStartingHour: {
                    serializedName: "maintenanceWindowStartingHour",
                    type: {
                        name: "Number"
                    }
                },
                maintenanceWindowDuration: {
                    serializedName: "maintenanceWindowDuration",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var AutoBackupSettings = {
        serializedName: "AutoBackupSettings",
        type: {
            name: "Composite",
            className: "AutoBackupSettings",
            modelProperties: {
                enable: {
                    serializedName: "enable",
                    type: {
                        name: "Boolean"
                    }
                },
                enableEncryption: {
                    serializedName: "enableEncryption",
                    type: {
                        name: "Boolean"
                    }
                },
                retentionPeriod: {
                    serializedName: "retentionPeriod",
                    type: {
                        name: "Number"
                    }
                },
                storageAccountUrl: {
                    serializedName: "storageAccountUrl",
                    type: {
                        name: "String"
                    }
                },
                storageAccessKey: {
                    serializedName: "storageAccessKey",
                    type: {
                        name: "String"
                    }
                },
                password: {
                    serializedName: "password",
                    type: {
                        name: "String"
                    }
                },
                backupSystemDbs: {
                    serializedName: "backupSystemDbs",
                    type: {
                        name: "Boolean"
                    }
                },
                backupScheduleType: {
                    serializedName: "backupScheduleType",
                    type: {
                        name: "String"
                    }
                },
                fullBackupFrequency: {
                    serializedName: "fullBackupFrequency",
                    type: {
                        name: "String"
                    }
                },
                fullBackupStartTime: {
                    serializedName: "fullBackupStartTime",
                    type: {
                        name: "Number"
                    }
                },
                fullBackupWindowHours: {
                    serializedName: "fullBackupWindowHours",
                    type: {
                        name: "Number"
                    }
                },
                logBackupFrequency: {
                    serializedName: "logBackupFrequency",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var KeyVaultCredentialSettings = {
        serializedName: "KeyVaultCredentialSettings",
        type: {
            name: "Composite",
            className: "KeyVaultCredentialSettings",
            modelProperties: {
                enable: {
                    serializedName: "enable",
                    type: {
                        name: "Boolean"
                    }
                },
                credentialName: {
                    serializedName: "credentialName",
                    type: {
                        name: "String"
                    }
                },
                azureKeyVaultUrl: {
                    serializedName: "azureKeyVaultUrl",
                    type: {
                        name: "String"
                    }
                },
                servicePrincipalName: {
                    serializedName: "servicePrincipalName",
                    type: {
                        name: "String"
                    }
                },
                servicePrincipalSecret: {
                    serializedName: "servicePrincipalSecret",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SqlConnectivityUpdateSettings = {
        serializedName: "SqlConnectivityUpdateSettings",
        type: {
            name: "Composite",
            className: "SqlConnectivityUpdateSettings",
            modelProperties: {
                connectivityType: {
                    serializedName: "connectivityType",
                    type: {
                        name: "String"
                    }
                },
                port: {
                    serializedName: "port",
                    type: {
                        name: "Number"
                    }
                },
                sqlAuthUpdateUserName: {
                    serializedName: "sqlAuthUpdateUserName",
                    type: {
                        name: "String"
                    }
                },
                sqlAuthUpdatePassword: {
                    serializedName: "sqlAuthUpdatePassword",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SqlWorkloadTypeUpdateSettings = {
        serializedName: "SqlWorkloadTypeUpdateSettings",
        type: {
            name: "Composite",
            className: "SqlWorkloadTypeUpdateSettings",
            modelProperties: {
                sqlWorkloadType: {
                    serializedName: "sqlWorkloadType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SqlStorageUpdateSettings = {
        serializedName: "SqlStorageUpdateSettings",
        type: {
            name: "Composite",
            className: "SqlStorageUpdateSettings",
            modelProperties: {
                diskCount: {
                    serializedName: "diskCount",
                    type: {
                        name: "Number"
                    }
                },
                startingDeviceId: {
                    serializedName: "startingDeviceId",
                    type: {
                        name: "Number"
                    }
                },
                diskConfigurationType: {
                    serializedName: "diskConfigurationType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var AdditionalFeaturesServerConfigurations = {
        serializedName: "AdditionalFeaturesServerConfigurations",
        type: {
            name: "Composite",
            className: "AdditionalFeaturesServerConfigurations",
            modelProperties: {
                isRServicesEnabled: {
                    serializedName: "isRServicesEnabled",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ServerConfigurationsManagementSettings = {
        serializedName: "ServerConfigurationsManagementSettings",
        type: {
            name: "Composite",
            className: "ServerConfigurationsManagementSettings",
            modelProperties: {
                sqlConnectivityUpdateSettings: {
                    serializedName: "sqlConnectivityUpdateSettings",
                    type: {
                        name: "Composite",
                        className: "SqlConnectivityUpdateSettings"
                    }
                },
                sqlWorkloadTypeUpdateSettings: {
                    serializedName: "sqlWorkloadTypeUpdateSettings",
                    type: {
                        name: "Composite",
                        className: "SqlWorkloadTypeUpdateSettings"
                    }
                },
                sqlStorageUpdateSettings: {
                    serializedName: "sqlStorageUpdateSettings",
                    type: {
                        name: "Composite",
                        className: "SqlStorageUpdateSettings"
                    }
                },
                additionalFeaturesServerConfigurations: {
                    serializedName: "additionalFeaturesServerConfigurations",
                    type: {
                        name: "Composite",
                        className: "AdditionalFeaturesServerConfigurations"
                    }
                }
            }
        }
    };
    var SQLStorageSettings = {
        serializedName: "SQLStorageSettings",
        type: {
            name: "Composite",
            className: "SQLStorageSettings",
            modelProperties: {
                luns: {
                    serializedName: "luns",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                },
                defaultFilePath: {
                    serializedName: "defaultFilePath",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StorageConfigurationSettings = {
        serializedName: "StorageConfigurationSettings",
        type: {
            name: "Composite",
            className: "StorageConfigurationSettings",
            modelProperties: {
                sqlDataSettings: {
                    serializedName: "sqlDataSettings",
                    type: {
                        name: "Composite",
                        className: "SQLStorageSettings"
                    }
                },
                sqlLogSettings: {
                    serializedName: "sqlLogSettings",
                    type: {
                        name: "Composite",
                        className: "SQLStorageSettings"
                    }
                },
                sqlTempDbSettings: {
                    serializedName: "sqlTempDbSettings",
                    type: {
                        name: "Composite",
                        className: "SQLStorageSettings"
                    }
                },
                diskConfigurationType: {
                    serializedName: "diskConfigurationType",
                    type: {
                        name: "String"
                    }
                },
                storageWorkloadType: {
                    serializedName: "storageWorkloadType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SqlVirtualMachine = {
        serializedName: "SqlVirtualMachine",
        type: {
            name: "Composite",
            className: "SqlVirtualMachine",
            modelProperties: __assign(__assign({}, TrackedResource.type.modelProperties), { identity: {
                    serializedName: "identity",
                    type: {
                        name: "Composite",
                        className: "ResourceIdentity"
                    }
                }, virtualMachineResourceId: {
                    serializedName: "properties.virtualMachineResourceId",
                    type: {
                        name: "String"
                    }
                }, provisioningState: {
                    readOnly: true,
                    serializedName: "properties.provisioningState",
                    type: {
                        name: "String"
                    }
                }, sqlImageOffer: {
                    serializedName: "properties.sqlImageOffer",
                    type: {
                        name: "String"
                    }
                }, sqlServerLicenseType: {
                    serializedName: "properties.sqlServerLicenseType",
                    type: {
                        name: "String"
                    }
                }, sqlManagement: {
                    serializedName: "properties.sqlManagement",
                    type: {
                        name: "String"
                    }
                }, sqlImageSku: {
                    serializedName: "properties.sqlImageSku",
                    type: {
                        name: "String"
                    }
                }, sqlVirtualMachineGroupResourceId: {
                    serializedName: "properties.sqlVirtualMachineGroupResourceId",
                    type: {
                        name: "String"
                    }
                }, wsfcDomainCredentials: {
                    serializedName: "properties.wsfcDomainCredentials",
                    type: {
                        name: "Composite",
                        className: "WsfcDomainCredentials"
                    }
                }, autoPatchingSettings: {
                    serializedName: "properties.autoPatchingSettings",
                    type: {
                        name: "Composite",
                        className: "AutoPatchingSettings"
                    }
                }, autoBackupSettings: {
                    serializedName: "properties.autoBackupSettings",
                    type: {
                        name: "Composite",
                        className: "AutoBackupSettings"
                    }
                }, keyVaultCredentialSettings: {
                    serializedName: "properties.keyVaultCredentialSettings",
                    type: {
                        name: "Composite",
                        className: "KeyVaultCredentialSettings"
                    }
                }, serverConfigurationsManagementSettings: {
                    serializedName: "properties.serverConfigurationsManagementSettings",
                    type: {
                        name: "Composite",
                        className: "ServerConfigurationsManagementSettings"
                    }
                }, storageConfigurationSettings: {
                    serializedName: "properties.storageConfigurationSettings",
                    type: {
                        name: "Composite",
                        className: "StorageConfigurationSettings"
                    }
                } })
        }
    };
    var SqlVirtualMachineUpdate = {
        serializedName: "SqlVirtualMachineUpdate",
        type: {
            name: "Composite",
            className: "SqlVirtualMachineUpdate",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var AvailabilityGroupListenerListResult = {
        serializedName: "AvailabilityGroupListenerListResult",
        type: {
            name: "Composite",
            className: "AvailabilityGroupListenerListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "AvailabilityGroupListener"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var OperationListResult = {
        serializedName: "OperationListResult",
        type: {
            name: "Composite",
            className: "OperationListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Operation"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SqlVirtualMachineGroupListResult = {
        serializedName: "SqlVirtualMachineGroupListResult",
        type: {
            name: "Composite",
            className: "SqlVirtualMachineGroupListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SqlVirtualMachineGroup"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SqlVirtualMachineListResult = {
        serializedName: "SqlVirtualMachineListResult",
        type: {
            name: "Composite",
            className: "SqlVirtualMachineListResult",
            modelProperties: {
                value: {
                    readOnly: true,
                    serializedName: "",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SqlVirtualMachine"
                            }
                        }
                    }
                },
                nextLink: {
                    readOnly: true,
                    serializedName: "nextLink",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };

    var mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        BaseResource: BaseResource,
        PrivateIPAddress: PrivateIPAddress,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        Resource: Resource,
        ProxyResource: ProxyResource,
        AvailabilityGroupListener: AvailabilityGroupListener,
        OperationDisplay: OperationDisplay,
        Operation: Operation,
        WsfcDomainProfile: WsfcDomainProfile,
        TrackedResource: TrackedResource,
        SqlVirtualMachineGroup: SqlVirtualMachineGroup,
        SqlVirtualMachineGroupUpdate: SqlVirtualMachineGroupUpdate,
        ResourceIdentity: ResourceIdentity,
        WsfcDomainCredentials: WsfcDomainCredentials,
        AutoPatchingSettings: AutoPatchingSettings,
        AutoBackupSettings: AutoBackupSettings,
        KeyVaultCredentialSettings: KeyVaultCredentialSettings,
        SqlConnectivityUpdateSettings: SqlConnectivityUpdateSettings,
        SqlWorkloadTypeUpdateSettings: SqlWorkloadTypeUpdateSettings,
        SqlStorageUpdateSettings: SqlStorageUpdateSettings,
        AdditionalFeaturesServerConfigurations: AdditionalFeaturesServerConfigurations,
        ServerConfigurationsManagementSettings: ServerConfigurationsManagementSettings,
        SQLStorageSettings: SQLStorageSettings,
        StorageConfigurationSettings: StorageConfigurationSettings,
        SqlVirtualMachine: SqlVirtualMachine,
        SqlVirtualMachineUpdate: SqlVirtualMachineUpdate,
        AvailabilityGroupListenerListResult: AvailabilityGroupListenerListResult,
        OperationListResult: OperationListResult,
        SqlVirtualMachineGroupListResult: SqlVirtualMachineGroupListResult,
        SqlVirtualMachineListResult: SqlVirtualMachineListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalFeaturesServerConfigurations: AdditionalFeaturesServerConfigurations,
        AutoBackupSettings: AutoBackupSettings,
        AutoPatchingSettings: AutoPatchingSettings,
        AvailabilityGroupListener: AvailabilityGroupListener,
        AvailabilityGroupListenerListResult: AvailabilityGroupListenerListResult,
        BaseResource: BaseResource,
        CloudError: CloudError,
        KeyVaultCredentialSettings: KeyVaultCredentialSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        PrivateIPAddress: PrivateIPAddress,
        ProxyResource: ProxyResource,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        ServerConfigurationsManagementSettings: ServerConfigurationsManagementSettings,
        SqlConnectivityUpdateSettings: SqlConnectivityUpdateSettings,
        SQLStorageSettings: SQLStorageSettings,
        SqlStorageUpdateSettings: SqlStorageUpdateSettings,
        SqlVirtualMachine: SqlVirtualMachine,
        SqlVirtualMachineGroup: SqlVirtualMachineGroup,
        SqlWorkloadTypeUpdateSettings: SqlWorkloadTypeUpdateSettings,
        StorageConfigurationSettings: StorageConfigurationSettings,
        TrackedResource: TrackedResource,
        WsfcDomainCredentials: WsfcDomainCredentials,
        WsfcDomainProfile: WsfcDomainProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var acceptLanguage = {
        parameterPath: "acceptLanguage",
        mapper: {
            serializedName: "accept-language",
            defaultValue: 'en-US',
            type: {
                name: "String"
            }
        }
    };
    var apiVersion = {
        parameterPath: "apiVersion",
        mapper: {
            required: true,
            serializedName: "api-version",
            type: {
                name: "String"
            }
        }
    };
    var availabilityGroupListenerName = {
        parameterPath: "availabilityGroupListenerName",
        mapper: {
            required: true,
            serializedName: "availabilityGroupListenerName",
            type: {
                name: "String"
            }
        }
    };
    var expand = {
        parameterPath: [
            "options",
            "expand"
        ],
        mapper: {
            serializedName: "$expand",
            type: {
                name: "String"
            }
        }
    };
    var nextPageLink = {
        parameterPath: "nextPageLink",
        mapper: {
            required: true,
            serializedName: "nextLink",
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var resourceGroupName = {
        parameterPath: "resourceGroupName",
        mapper: {
            required: true,
            serializedName: "resourceGroupName",
            type: {
                name: "String"
            }
        }
    };
    var sqlVirtualMachineGroupName = {
        parameterPath: "sqlVirtualMachineGroupName",
        mapper: {
            required: true,
            serializedName: "sqlVirtualMachineGroupName",
            type: {
                name: "String"
            }
        }
    };
    var sqlVirtualMachineName = {
        parameterPath: "sqlVirtualMachineName",
        mapper: {
            required: true,
            serializedName: "sqlVirtualMachineName",
            type: {
                name: "String"
            }
        }
    };
    var subscriptionId = {
        parameterPath: "subscriptionId",
        mapper: {
            required: true,
            serializedName: "subscriptionId",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a AvailabilityGroupListeners. */
    var AvailabilityGroupListeners = /** @class */ (function () {
        /**
         * Create a AvailabilityGroupListeners.
         * @param {SqlVirtualMachineManagementClientContext} client Reference to the service client.
         */
        function AvailabilityGroupListeners(client) {
            this.client = client;
        }
        AvailabilityGroupListeners.prototype.get = function (resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineGroupName: sqlVirtualMachineGroupName,
                availabilityGroupListenerName: availabilityGroupListenerName,
                options: options
            }, getOperationSpec, callback);
        };
        /**
         * Creates or updates an availability group listener.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
         * @param availabilityGroupListenerName Name of the availability group listener.
         * @param parameters The availability group listener.
         * @param [options] The optional parameters
         * @returns Promise<Models.AvailabilityGroupListenersCreateOrUpdateResponse>
         */
        AvailabilityGroupListeners.prototype.createOrUpdate = function (resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes an availability group listener.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
         * @param availabilityGroupListenerName Name of the availability group listener.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        AvailabilityGroupListeners.prototype.deleteMethod = function (resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, options) {
            return this.beginDeleteMethod(resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        AvailabilityGroupListeners.prototype.listByGroup = function (resourceGroupName, sqlVirtualMachineGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineGroupName: sqlVirtualMachineGroupName,
                options: options
            }, listByGroupOperationSpec, callback);
        };
        /**
         * Creates or updates an availability group listener.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
         * @param availabilityGroupListenerName Name of the availability group listener.
         * @param parameters The availability group listener.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AvailabilityGroupListeners.prototype.beginCreateOrUpdate = function (resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineGroupName: sqlVirtualMachineGroupName,
                availabilityGroupListenerName: availabilityGroupListenerName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec, options);
        };
        /**
         * Deletes an availability group listener.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
         * @param availabilityGroupListenerName Name of the availability group listener.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        AvailabilityGroupListeners.prototype.beginDeleteMethod = function (resourceGroupName, sqlVirtualMachineGroupName, availabilityGroupListenerName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineGroupName: sqlVirtualMachineGroupName,
                availabilityGroupListenerName: availabilityGroupListenerName,
                options: options
            }, beginDeleteMethodOperationSpec, options);
        };
        AvailabilityGroupListeners.prototype.listByGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByGroupNextOperationSpec, callback);
        };
        return AvailabilityGroupListeners;
    }());
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineGroupName,
            availabilityGroupListenerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilityGroupListener
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilityGroupListenerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginCreateOrUpdateOperationSpec = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineGroupName,
            availabilityGroupListenerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, AvailabilityGroupListener), { required: true })
        },
        responses: {
            200: {
                bodyMapper: AvailabilityGroupListener
            },
            201: {
                bodyMapper: AvailabilityGroupListener
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var beginDeleteMethodOperationSpec = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/availabilityGroupListeners/{availabilityGroupListenerName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineGroupName,
            availabilityGroupListenerName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };
    var listByGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: AvailabilityGroupListenerListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        CloudError: CloudError,
        Operation: Operation,
        OperationDisplay: OperationDisplay,
        OperationListResult: OperationListResult
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a Operations. */
    var Operations = /** @class */ (function () {
        /**
         * Create a Operations.
         * @param {SqlVirtualMachineManagementClientContext} client Reference to the service client.
         */
        function Operations(client) {
            this.client = client;
        }
        Operations.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec, callback);
        };
        Operations.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec, callback);
        };
        return Operations;
    }());
    // Operation Specifications
    var serializer$1 = new msRest.Serializer(Mappers$1);
    var listOperationSpec = {
        httpMethod: "GET",
        path: "providers/Microsoft.SqlVirtualMachine/operations",
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };
    var listNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: OperationListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$1
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalFeaturesServerConfigurations: AdditionalFeaturesServerConfigurations,
        AutoBackupSettings: AutoBackupSettings,
        AutoPatchingSettings: AutoPatchingSettings,
        AvailabilityGroupListener: AvailabilityGroupListener,
        BaseResource: BaseResource,
        CloudError: CloudError,
        KeyVaultCredentialSettings: KeyVaultCredentialSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        PrivateIPAddress: PrivateIPAddress,
        ProxyResource: ProxyResource,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        ServerConfigurationsManagementSettings: ServerConfigurationsManagementSettings,
        SqlConnectivityUpdateSettings: SqlConnectivityUpdateSettings,
        SQLStorageSettings: SQLStorageSettings,
        SqlStorageUpdateSettings: SqlStorageUpdateSettings,
        SqlVirtualMachine: SqlVirtualMachine,
        SqlVirtualMachineGroup: SqlVirtualMachineGroup,
        SqlVirtualMachineGroupListResult: SqlVirtualMachineGroupListResult,
        SqlVirtualMachineGroupUpdate: SqlVirtualMachineGroupUpdate,
        SqlWorkloadTypeUpdateSettings: SqlWorkloadTypeUpdateSettings,
        StorageConfigurationSettings: StorageConfigurationSettings,
        TrackedResource: TrackedResource,
        WsfcDomainCredentials: WsfcDomainCredentials,
        WsfcDomainProfile: WsfcDomainProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SqlVirtualMachineGroups. */
    var SqlVirtualMachineGroups = /** @class */ (function () {
        /**
         * Create a SqlVirtualMachineGroups.
         * @param {SqlVirtualMachineManagementClientContext} client Reference to the service client.
         */
        function SqlVirtualMachineGroups(client) {
            this.client = client;
        }
        SqlVirtualMachineGroups.prototype.get = function (resourceGroupName, sqlVirtualMachineGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineGroupName: sqlVirtualMachineGroupName,
                options: options
            }, getOperationSpec$1, callback);
        };
        /**
         * Creates or updates a SQL virtual machine group.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
         * @param parameters The SQL virtual machine group.
         * @param [options] The optional parameters
         * @returns Promise<Models.SqlVirtualMachineGroupsCreateOrUpdateResponse>
         */
        SqlVirtualMachineGroups.prototype.createOrUpdate = function (resourceGroupName, sqlVirtualMachineGroupName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineGroupName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a SQL virtual machine group.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SqlVirtualMachineGroups.prototype.deleteMethod = function (resourceGroupName, sqlVirtualMachineGroupName, options) {
            return this.beginDeleteMethod(resourceGroupName, sqlVirtualMachineGroupName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates SQL virtual machine group tags.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
         * @param parameters The SQL virtual machine group.
         * @param [options] The optional parameters
         * @returns Promise<Models.SqlVirtualMachineGroupsUpdateResponse>
         */
        SqlVirtualMachineGroups.prototype.update = function (resourceGroupName, sqlVirtualMachineGroupName, parameters, options) {
            return this.beginUpdate(resourceGroupName, sqlVirtualMachineGroupName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SqlVirtualMachineGroups.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec, callback);
        };
        SqlVirtualMachineGroups.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$1, callback);
        };
        /**
         * Creates or updates a SQL virtual machine group.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
         * @param parameters The SQL virtual machine group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SqlVirtualMachineGroups.prototype.beginCreateOrUpdate = function (resourceGroupName, sqlVirtualMachineGroupName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineGroupName: sqlVirtualMachineGroupName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$1, options);
        };
        /**
         * Deletes a SQL virtual machine group.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SqlVirtualMachineGroups.prototype.beginDeleteMethod = function (resourceGroupName, sqlVirtualMachineGroupName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineGroupName: sqlVirtualMachineGroupName,
                options: options
            }, beginDeleteMethodOperationSpec$1, options);
        };
        /**
         * Updates SQL virtual machine group tags.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineGroupName Name of the SQL virtual machine group.
         * @param parameters The SQL virtual machine group.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SqlVirtualMachineGroups.prototype.beginUpdate = function (resourceGroupName, sqlVirtualMachineGroupName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineGroupName: sqlVirtualMachineGroupName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec, options);
        };
        SqlVirtualMachineGroups.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec, callback);
        };
        SqlVirtualMachineGroups.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$1, callback);
        };
        return SqlVirtualMachineGroups;
    }());
    // Operation Specifications
    var serializer$2 = new msRest.Serializer(Mappers$2);
    var getOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginCreateOrUpdateOperationSpec$1 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SqlVirtualMachineGroup), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineGroup
            },
            201: {
                bodyMapper: SqlVirtualMachineGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginDeleteMethodOperationSpec$1 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var beginUpdateOperationSpec = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SqlVirtualMachineGroupUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineGroup
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listByResourceGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };
    var listNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineGroupListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$2
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var Mappers$3 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        AdditionalFeaturesServerConfigurations: AdditionalFeaturesServerConfigurations,
        AutoBackupSettings: AutoBackupSettings,
        AutoPatchingSettings: AutoPatchingSettings,
        AvailabilityGroupListener: AvailabilityGroupListener,
        BaseResource: BaseResource,
        CloudError: CloudError,
        KeyVaultCredentialSettings: KeyVaultCredentialSettings,
        LoadBalancerConfiguration: LoadBalancerConfiguration,
        PrivateIPAddress: PrivateIPAddress,
        ProxyResource: ProxyResource,
        Resource: Resource,
        ResourceIdentity: ResourceIdentity,
        ServerConfigurationsManagementSettings: ServerConfigurationsManagementSettings,
        SqlConnectivityUpdateSettings: SqlConnectivityUpdateSettings,
        SQLStorageSettings: SQLStorageSettings,
        SqlStorageUpdateSettings: SqlStorageUpdateSettings,
        SqlVirtualMachine: SqlVirtualMachine,
        SqlVirtualMachineGroup: SqlVirtualMachineGroup,
        SqlVirtualMachineListResult: SqlVirtualMachineListResult,
        SqlVirtualMachineUpdate: SqlVirtualMachineUpdate,
        SqlWorkloadTypeUpdateSettings: SqlWorkloadTypeUpdateSettings,
        StorageConfigurationSettings: StorageConfigurationSettings,
        TrackedResource: TrackedResource,
        WsfcDomainCredentials: WsfcDomainCredentials,
        WsfcDomainProfile: WsfcDomainProfile
    });

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    /** Class representing a SqlVirtualMachines. */
    var SqlVirtualMachines = /** @class */ (function () {
        /**
         * Create a SqlVirtualMachines.
         * @param {SqlVirtualMachineManagementClientContext} client Reference to the service client.
         */
        function SqlVirtualMachines(client) {
            this.client = client;
        }
        SqlVirtualMachines.prototype.listBySqlVmGroup = function (resourceGroupName, sqlVirtualMachineGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineGroupName: sqlVirtualMachineGroupName,
                options: options
            }, listBySqlVmGroupOperationSpec, callback);
        };
        SqlVirtualMachines.prototype.list = function (options, callback) {
            return this.client.sendOperationRequest({
                options: options
            }, listOperationSpec$2, callback);
        };
        SqlVirtualMachines.prototype.get = function (resourceGroupName, sqlVirtualMachineName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineName: sqlVirtualMachineName,
                options: options
            }, getOperationSpec$2, callback);
        };
        /**
         * Creates or updates a SQL virtual machine.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineName Name of the SQL virtual machine.
         * @param parameters The SQL virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<Models.SqlVirtualMachinesCreateOrUpdateResponse>
         */
        SqlVirtualMachines.prototype.createOrUpdate = function (resourceGroupName, sqlVirtualMachineName, parameters, options) {
            return this.beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Deletes a SQL virtual machine.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineName Name of the SQL virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRest.RestResponse>
         */
        SqlVirtualMachines.prototype.deleteMethod = function (resourceGroupName, sqlVirtualMachineName, options) {
            return this.beginDeleteMethod(resourceGroupName, sqlVirtualMachineName, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        /**
         * Updates a SQL virtual machine.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineName Name of the SQL virtual machine.
         * @param parameters The SQL virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<Models.SqlVirtualMachinesUpdateResponse>
         */
        SqlVirtualMachines.prototype.update = function (resourceGroupName, sqlVirtualMachineName, parameters, options) {
            return this.beginUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options)
                .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
        };
        SqlVirtualMachines.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
            return this.client.sendOperationRequest({
                resourceGroupName: resourceGroupName,
                options: options
            }, listByResourceGroupOperationSpec$1, callback);
        };
        /**
         * Creates or updates a SQL virtual machine.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineName Name of the SQL virtual machine.
         * @param parameters The SQL virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SqlVirtualMachines.prototype.beginCreateOrUpdate = function (resourceGroupName, sqlVirtualMachineName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineName: sqlVirtualMachineName,
                parameters: parameters,
                options: options
            }, beginCreateOrUpdateOperationSpec$2, options);
        };
        /**
         * Deletes a SQL virtual machine.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineName Name of the SQL virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SqlVirtualMachines.prototype.beginDeleteMethod = function (resourceGroupName, sqlVirtualMachineName, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineName: sqlVirtualMachineName,
                options: options
            }, beginDeleteMethodOperationSpec$2, options);
        };
        /**
         * Updates a SQL virtual machine.
         * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
         * this value from the Azure Resource Manager API or the portal.
         * @param sqlVirtualMachineName Name of the SQL virtual machine.
         * @param parameters The SQL virtual machine.
         * @param [options] The optional parameters
         * @returns Promise<msRestAzure.LROPoller>
         */
        SqlVirtualMachines.prototype.beginUpdate = function (resourceGroupName, sqlVirtualMachineName, parameters, options) {
            return this.client.sendLRORequest({
                resourceGroupName: resourceGroupName,
                sqlVirtualMachineName: sqlVirtualMachineName,
                parameters: parameters,
                options: options
            }, beginUpdateOperationSpec$1, options);
        };
        SqlVirtualMachines.prototype.listBySqlVmGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listBySqlVmGroupNextOperationSpec, callback);
        };
        SqlVirtualMachines.prototype.listNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listNextOperationSpec$2, callback);
        };
        SqlVirtualMachines.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
            return this.client.sendOperationRequest({
                nextPageLink: nextPageLink,
                options: options
            }, listByResourceGroupNextOperationSpec$1, callback);
        };
        return SqlVirtualMachines;
    }());
    // Operation Specifications
    var serializer$3 = new msRest.Serializer(Mappers$3);
    var listBySqlVmGroupOperationSpec = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/sqlVirtualMachines",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines",
        urlParameters: [
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var getOperationSpec$2 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineName,
            subscriptionId
        ],
        queryParameters: [
            expand,
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupOperationSpec$1 = {
        httpMethod: "GET",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines",
        urlParameters: [
            resourceGroupName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginCreateOrUpdateOperationSpec$2 = {
        httpMethod: "PUT",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SqlVirtualMachine), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SqlVirtualMachine
            },
            201: {
                bodyMapper: SqlVirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginDeleteMethodOperationSpec$2 = {
        httpMethod: "DELETE",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {},
            202: {},
            204: {},
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var beginUpdateOperationSpec$1 = {
        httpMethod: "PATCH",
        path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
        urlParameters: [
            resourceGroupName,
            sqlVirtualMachineName,
            subscriptionId
        ],
        queryParameters: [
            apiVersion
        ],
        headerParameters: [
            acceptLanguage
        ],
        requestBody: {
            parameterPath: "parameters",
            mapper: __assign(__assign({}, SqlVirtualMachineUpdate), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SqlVirtualMachine
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listBySqlVmGroupNextOperationSpec = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listNextOperationSpec$2 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };
    var listByResourceGroupNextOperationSpec$1 = {
        httpMethod: "GET",
        baseUrl: "https://management.azure.com",
        path: "{nextLink}",
        urlParameters: [
            nextPageLink
        ],
        headerParameters: [
            acceptLanguage
        ],
        responses: {
            200: {
                bodyMapper: SqlVirtualMachineListResult
            },
            default: {
                bodyMapper: CloudError
            }
        },
        serializer: serializer$3
    };

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/arm-sqlvirtualmachine";
    var packageVersion = "4.1.1";
    var SqlVirtualMachineManagementClientContext = /** @class */ (function (_super) {
        __extends(SqlVirtualMachineManagementClientContext, _super);
        /**
         * Initializes a new instance of the SqlVirtualMachineManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription ID that identifies an Azure subscription.
         * @param [options] The parameter options
         */
        function SqlVirtualMachineManagementClientContext(credentials, subscriptionId, options) {
            var _this = this;
            if (credentials == undefined) {
                throw new Error('\'credentials\' cannot be null.');
            }
            if (subscriptionId == undefined) {
                throw new Error('\'subscriptionId\' cannot be null.');
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.apiVersion = '2017-03-01-preview';
            _this.acceptLanguage = 'en-US';
            _this.longRunningOperationRetryTimeout = 30;
            _this.baseUri = options.baseUri || _this.baseUri || "https://management.azure.com";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.credentials = credentials;
            _this.subscriptionId = subscriptionId;
            if (options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
                _this.acceptLanguage = options.acceptLanguage;
            }
            if (options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
                _this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
            }
            return _this;
        }
        return SqlVirtualMachineManagementClientContext;
    }(msRestAzure.AzureServiceClient));

    /*
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for
     * license information.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var SqlVirtualMachineManagementClient = /** @class */ (function (_super) {
        __extends(SqlVirtualMachineManagementClient, _super);
        /**
         * Initializes a new instance of the SqlVirtualMachineManagementClient class.
         * @param credentials Credentials needed for the client to connect to Azure. Credentials
         * implementing the TokenCredential interface from the @azure/identity package are recommended. For
         * more information about these credentials, see
         * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
         * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
         * @azure/ms-rest-browserauth are also supported.
         * @param subscriptionId Subscription ID that identifies an Azure subscription.
         * @param [options] The parameter options
         */
        function SqlVirtualMachineManagementClient(credentials, subscriptionId, options) {
            var _this = _super.call(this, credentials, subscriptionId, options) || this;
            _this.availabilityGroupListeners = new AvailabilityGroupListeners(_this);
            _this.operations = new Operations(_this);
            _this.sqlVirtualMachineGroups = new SqlVirtualMachineGroups(_this);
            _this.sqlVirtualMachines = new SqlVirtualMachines(_this);
            return _this;
        }
        return SqlVirtualMachineManagementClient;
    }(SqlVirtualMachineManagementClientContext));

    exports.AvailabilityGroupListeners = AvailabilityGroupListeners;
    exports.Operations = Operations;
    exports.SqlVirtualMachineGroups = SqlVirtualMachineGroups;
    exports.SqlVirtualMachineManagementClient = SqlVirtualMachineManagementClient;
    exports.SqlVirtualMachineManagementClientContext = SqlVirtualMachineManagementClientContext;
    exports.SqlVirtualMachineManagementMappers = mappers;
    exports.SqlVirtualMachineManagementModels = index;
    exports.SqlVirtualMachines = SqlVirtualMachines;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=arm-sqlvirtualmachine.js.map
