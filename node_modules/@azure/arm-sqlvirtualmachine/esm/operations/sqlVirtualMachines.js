/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import { __assign } from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/sqlVirtualMachinesMappers";
import * as Parameters from "../models/parameters";
/** Class representing a SqlVirtualMachines. */
var SqlVirtualMachines = /** @class */ (function () {
    /**
     * Create a SqlVirtualMachines.
     * @param {SqlVirtualMachineManagementClientContext} client Reference to the service client.
     */
    function SqlVirtualMachines(client) {
        this.client = client;
    }
    SqlVirtualMachines.prototype.listBySqlVmGroup = function (resourceGroupName, sqlVirtualMachineGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            sqlVirtualMachineGroupName: sqlVirtualMachineGroupName,
            options: options
        }, listBySqlVmGroupOperationSpec, callback);
    };
    SqlVirtualMachines.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    SqlVirtualMachines.prototype.get = function (resourceGroupName, sqlVirtualMachineName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            sqlVirtualMachineName: sqlVirtualMachineName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Creates or updates a SQL virtual machine.
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
     * this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<Models.SqlVirtualMachinesCreateOrUpdateResponse>
     */
    SqlVirtualMachines.prototype.createOrUpdate = function (resourceGroupName, sqlVirtualMachineName, parameters, options) {
        return this.beginCreateOrUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Deletes a SQL virtual machine.
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
     * this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    SqlVirtualMachines.prototype.deleteMethod = function (resourceGroupName, sqlVirtualMachineName, options) {
        return this.beginDeleteMethod(resourceGroupName, sqlVirtualMachineName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Updates a SQL virtual machine.
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
     * this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<Models.SqlVirtualMachinesUpdateResponse>
     */
    SqlVirtualMachines.prototype.update = function (resourceGroupName, sqlVirtualMachineName, parameters, options) {
        return this.beginUpdate(resourceGroupName, sqlVirtualMachineName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    SqlVirtualMachines.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    /**
     * Creates or updates a SQL virtual machine.
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
     * this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    SqlVirtualMachines.prototype.beginCreateOrUpdate = function (resourceGroupName, sqlVirtualMachineName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            sqlVirtualMachineName: sqlVirtualMachineName,
            parameters: parameters,
            options: options
        }, beginCreateOrUpdateOperationSpec, options);
    };
    /**
     * Deletes a SQL virtual machine.
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
     * this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    SqlVirtualMachines.prototype.beginDeleteMethod = function (resourceGroupName, sqlVirtualMachineName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            sqlVirtualMachineName: sqlVirtualMachineName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Updates a SQL virtual machine.
     * @param resourceGroupName Name of the resource group that contains the resource. You can obtain
     * this value from the Azure Resource Manager API or the portal.
     * @param sqlVirtualMachineName Name of the SQL virtual machine.
     * @param parameters The SQL virtual machine.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    SqlVirtualMachines.prototype.beginUpdate = function (resourceGroupName, sqlVirtualMachineName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            sqlVirtualMachineName: sqlVirtualMachineName,
            parameters: parameters,
            options: options
        }, beginUpdateOperationSpec, options);
    };
    SqlVirtualMachines.prototype.listBySqlVmGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listBySqlVmGroupNextOperationSpec, callback);
    };
    SqlVirtualMachines.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    SqlVirtualMachines.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    return SqlVirtualMachines;
}());
export { SqlVirtualMachines };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var listBySqlVmGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachineGroups/{sqlVirtualMachineGroupName}/sqlVirtualMachines",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.sqlVirtualMachineGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SqlVirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SqlVirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.sqlVirtualMachineName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.expand,
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SqlVirtualMachine
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SqlVirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginCreateOrUpdateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.sqlVirtualMachineName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.SqlVirtualMachine), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SqlVirtualMachine
        },
        201: {
            bodyMapper: Mappers.SqlVirtualMachine
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.sqlVirtualMachineName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var beginUpdateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/{sqlVirtualMachineName}",
    urlParameters: [
        Parameters.resourceGroupName,
        Parameters.sqlVirtualMachineName,
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: __assign(__assign({}, Mappers.SqlVirtualMachineUpdate), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SqlVirtualMachine
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listBySqlVmGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SqlVirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SqlVirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SqlVirtualMachineListResult
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    serializer: serializer
};
//# sourceMappingURL=sqlVirtualMachines.js.map