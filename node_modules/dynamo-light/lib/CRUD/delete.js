"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
/**
 * Deletes an item from the table
 */
function deleteItem({ docClient, tableName, key, options = {}, verbose = false, forTrx = false, }) {
    return __awaiter(this, void 0, void 0, function* () {
        let params;
        try {
            if (!key) {
                throw new Error("key is undefined!");
            }
            const { ReturnValues = "ALL_OLD" } = options;
            params = Object.assign({ TableName: tableName, Key: key, ReturnValues }, options);
            if (verbose) {
                console.log("params", params);
            }
            /**
             * Return params for this requirement, used for transact method
             */
            if (forTrx) {
                return {
                    Delete: params,
                };
            }
            const data = yield docClient.send(new lib_dynamodb_1.DeleteCommand(params));
            if (!data.Attributes) {
                throw new Error(`Key ${JSON.stringify(key)} already does not exist, try again.`);
            }
            else {
                if (verbose) {
                    console.log(`Successfully deleted item from table ${tableName}`, data);
                }
                return data;
            }
        }
        catch (error) {
            if (verbose) {
                console.error(error);
                console.log("params", JSON.stringify(params));
            }
            throw error;
        }
    });
}
exports.default = deleteItem;
