"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const helper_1 = require("../utils/helper");
function query({ docClient, tableName, indexName, partitionKey, partitionKeyValue, sortKey, sortKeyOperator, sortKeyValue, options = {}, pagination = false, verbose = false, }) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        /**
         * Check for errors
         */
        if (!partitionKey || !partitionKeyValue) {
            throw new Error(`Query fail: argument partitionKey - ${partitionKey} or partitionKeyValue ${partitionKeyValue} is invalid`);
        }
        if (sortKey) {
            if (!sortKeyValue || !sortKeyOperator) {
                throw new Error(`Query fail: both sortKeyValue and sortKeyOperator are required`);
            }
        }
        /**
         * Update query options / params
         */
        const keyConditionExpressions = (0, helper_1.buildKeyConditionExpressions)({
            partitionKey,
            partitionKeyValue,
            sortKey,
            sortKeyOperator,
            sortKeyValue,
        });
        const params = (0, helper_1.mergeOptions)(Object.assign(Object.assign({ TableName: tableName }, (indexName && { IndexName: indexName })), keyConditionExpressions), options);
        if (verbose) {
            console.log("params", params);
        }
        try {
            /**
             * Make the query
             */
            let result;
            let shouldKeepFetching = false;
            while (!result || shouldKeepFetching) {
                // eslint-disable-next-line no-await-in-loop
                const fetchedData = yield docClient.send(new lib_dynamodb_1.QueryCommand(params));
                const { LastEvaluatedKey } = fetchedData;
                result = (0, helper_1.concatBatchFetchResult)(result, fetchedData);
                params.ExclusiveStartKey = LastEvaluatedKey;
                if (params.Limit) {
                    params.Limit -= (_b = (_a = fetchedData.Items) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0;
                }
                const wantToFetchMore = (params.Limit === undefined || params.Limit > 0) && !pagination;
                const hasMoreToFetch = !!LastEvaluatedKey;
                shouldKeepFetching = wantToFetchMore && hasMoreToFetch;
            }
            if (verbose) {
                console.log(`Successfully queried ${result.Count} items from table ${tableName}`);
            }
            return result;
        }
        catch (error) {
            if (verbose) {
                console.error(`Unable to query items from ${tableName}. Error JSON:`, JSON.stringify(error), error.stack);
                console.log("params", JSON.stringify(params));
            }
            throw error;
        }
    });
}
exports.default = query;
