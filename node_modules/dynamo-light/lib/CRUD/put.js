"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
/**
 * Create Item in table, 'createdAt' and 'updatedAt' timeStamps will be added in each item
 */
function create({ docClient, tableName, item: rawItem, options = {}, verbose = false, forTrx = false, autoTimeStamp = false, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const item = Object.assign({}, rawItem);
        if (autoTimeStamp) {
            const timeStamp = Date.now();
            item.createdAt = timeStamp;
            item.updatedAt = timeStamp;
        }
        const params = Object.assign({ TableName: tableName, Item: item }, options);
        if (verbose) {
            console.log("params", params);
        }
        try {
            /**
             * Return params for this requirement, used for transact method
             */
            if (forTrx) {
                return {
                    Put: params,
                };
            }
            yield docClient.send(new lib_dynamodb_1.PutCommand(params));
            if (verbose) {
                console.log(`Successfully inserted item into table ${tableName}`);
            }
            return params;
        }
        catch (err) {
            if (verbose) {
                console.error(`Unable to insert item into ${tableName}. Error JSON:`, JSON.stringify(err), err.stack);
                console.log("params", JSON.stringify(params));
            }
            throw err;
        }
    });
}
exports.default = create;
