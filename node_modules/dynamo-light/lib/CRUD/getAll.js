"use strict";
var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done
          ? resolve(result.value)
          : new P(function (resolve) {
              resolve(result.value);
            }).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
Object.defineProperty(exports, "__esModule", { value: true });
const helper_1 = require("../helper");
/**
 * Get all items from table
 * */
function getAll({ docClient, tableName, indexName, options = {}, pagination = false, verbose = false }) {
  return __awaiter(this, void 0, void 0, function* () {
    let params;
    try {
      params = Object.assign({ TableName: tableName }, indexName && { IndexName: indexName }, options);
      verbose && console.log("params", params);
      let result;
      let shouldKeepFetching;
      while (!result || shouldKeepFetching) {
        // eslint-disable-next-line no-await-in-loop
        const fetchedData = yield docClient.scan(params).promise();
        const { LastEvaluatedKey } = fetchedData;
        result = helper_1.concatBatchFetchResult(result, fetchedData);
        params.ExclusiveStartKey = LastEvaluatedKey;
        if (params.Limit) {
          params.Limit -= fetchedData.Items.length;
        }
        shouldKeepFetching = !pagination && params.Limit > 0 && LastEvaluatedKey !== "undefined";
      }
      verbose && console.log(`Successfully scanned ${result.Count} items from table ${tableName}`);
      return result;
    } catch (error) {
      console.error(`Unable to get all items from ${tableName}. Error JSON:`, JSON.stringify(error), error.stack);
      console.log("params", JSON.stringify(params));
      throw error;
    }
  });
}
exports.default = getAll;
