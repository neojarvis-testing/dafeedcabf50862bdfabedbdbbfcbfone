"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const api = require("../utils/helper");
/**
 * Update item in table
 */
function update({ docClient, tableName, key, newFields: rawNewFields, options = {}, verbose = false, forTrx = false, autoTimeStamp = false, }) {
    return __awaiter(this, void 0, void 0, function* () {
        let params;
        try {
            const { ReturnValues = "ALL_NEW", createIfNotExist = false } = options;
            // Check for argument errors
            if (!key || typeof key !== "object" || Object.keys(key).length === 0) {
                console.error(`The key you gave was ${key}, which is invalid`);
                throw new Error("Update fail: argument `key` is invalid");
            }
            if (!rawNewFields || typeof rawNewFields !== "object" || Object.keys(rawNewFields).length === 0) {
                console.error(`invalid newFields`, rawNewFields);
                throw new Error("Update fail: newFields is invalid");
            }
            // Get update parameters
            const newFields = Object.assign({}, rawNewFields);
            if (autoTimeStamp) {
                newFields.updatedAt = Date.now();
            }
            const UpdateExpression = api.getUpdateExpression(newFields);
            const attributesUsedInExpression = createIfNotExist ? newFields : Object.assign(Object.assign({}, newFields), key);
            const ExpressionAttributeNames = api.getExpressionAttributeNames(attributesUsedInExpression);
            const ExpressionAttributeValues = api.getExpressionAttributeValues(attributesUsedInExpression);
            const dbKeyNames = Object.keys(key);
            const ConditionExpression = dbKeyNames.map((name) => `#${name} = :${name}`).join(" AND ");
            params = api.mergeOptions(Object.assign(Object.assign({ TableName: tableName, Key: key, UpdateExpression,
                ExpressionAttributeNames,
                ExpressionAttributeValues }, (!createIfNotExist && { ConditionExpression })), { ReturnValues }), options);
            if (verbose) {
                console.log("params", params);
            }
            /**
             * Return params for this requirement, used for transact method
             */
            if (forTrx) {
                return {
                    Update: params,
                };
            }
            const data = yield docClient.send(new lib_dynamodb_1.UpdateCommand(params));
            if (verbose) {
                console.log(`Successfully updated item from table ${tableName}`, data);
            }
            return data;
        }
        catch (err) {
            if (verbose) {
                console.error(`Unable to update in table ${tableName} for the following fields: ${JSON.stringify(rawNewFields)}`, JSON.stringify(err), err.stack);
                console.log("Error request params: ", JSON.stringify(params));
            }
            throw err;
        }
    });
}
exports.default = update;
