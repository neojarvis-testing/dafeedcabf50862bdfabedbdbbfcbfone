"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
/**
 * Transact write from table
 */
function transactWrite({ docClient, transactions, options, verbose = false, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { ClientRequestToken, ReturnConsumedCapacity = "TOTAL", ReturnItemCollectionMetrics = "NONE" } = options;
        const params = Object.assign(Object.assign(Object.assign({ TransactItems: transactions }, (ClientRequestToken && { ClientRequestToken })), (ReturnConsumedCapacity && { ReturnConsumedCapacity })), (ReturnItemCollectionMetrics && { ReturnItemCollectionMetrics }));
        try {
            const data = yield docClient.send(new lib_dynamodb_1.TransactWriteCommand(params));
            if (verbose) {
                console.log(`Successfully performed transactionWrite`, data);
            }
            return data;
        }
        catch (err) {
            if (verbose) {
                console.error(`Unable to perform transact write operation ${JSON.stringify(transactions)}. Error JSON:`, JSON.stringify(err), err.stack);
                console.log("params", JSON.stringify(params));
            }
            throw err;
        }
    });
}
exports.default = transactWrite;
