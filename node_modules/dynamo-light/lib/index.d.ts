import { DynamoDBClient, DynamoDBClientConfig } from "@aws-sdk/client-dynamodb";
import { DynamoDBDocumentClient } from "@aws-sdk/lib-dynamodb";
import { DeleteItemInput, GetItemInput, PutItemInput, QueryInput, ScanInput, UpdateItemInput } from "./types";
interface IIndex {
    name: string;
    partitionKey: string;
    sortKey: string | undefined;
}
export declare class Table {
    static transactWrite(transactions: any, options?: {
        verbose: boolean;
    }): Promise<import("@aws-sdk/lib-dynamodb").TransactWriteCommandOutput>;
    static replaceDynamoClient(newDbClient: DynamoDBClient, newDocClient: DynamoDBDocumentClient): void;
    tableName: string;
    partitionKey: string | undefined;
    sortKey: string | undefined;
    indexMap: Map<string, IIndex>;
    dbClient: DynamoDBClient;
    docClient: DynamoDBDocumentClient;
    private initialized;
    constructor(name: string, config?: DynamoDBClientConfig);
    initTable(): Promise<void>;
    /**
     * Check if the key is valid for this table
     * @param {} key
     */
    isValidKey(key: any): boolean;
    get(key: object | string, options?: GetItemInput): Promise<import("./CRUD/get").IDLGetOutput>;
    put(item: any, options?: PutItemInput): Promise<import("@aws-sdk/lib-dynamodb").PutCommandInput | {
        Put: import("@aws-sdk/lib-dynamodb").PutCommandInput;
    }>;
    delete(key: any, options?: DeleteItemInput): Promise<import("@aws-sdk/lib-dynamodb").DeleteCommandOutput | {
        Delete: any;
    }>;
    update(key: any, newFields: any, options?: UpdateItemInput): Promise<import("./CRUD/update").IDLUpdateOutput>;
    query(queryKey: {
        indexName?: string;
        partitionKeyValue?: any;
        sortKeyOperator?: string;
        sortKeyValue?: any;
        [key: string]: any;
    }, options?: QueryInput): Promise<any>;
    scan(param?: any, options?: ScanInput): Promise<any>;
    private retrieveKeys;
    private parsePartitionKey;
    /**
     * Retrieve options specified by DL(dynamo-light), and remove them from the option param
     * @param options
     */
    private retrieveAndDeleteDLOptions;
}
export {};
